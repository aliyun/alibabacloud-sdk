/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CloudAPI';
  @version = '2016-07-14';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'apigateway.cn-qingdao.aliyuncs.com',
    'cn-beijing' = 'apigateway.cn-beijing.aliyuncs.com',
    'cn-zhangjiakou' = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    'cn-huhehaote' = 'apigateway.cn-huhehaote.aliyuncs.com',
    'cn-wulanchabu' = 'apigateway.cn-wulanchabu.aliyuncs.com',
    'cn-hangzhou' = 'apigateway.cn-hangzhou.aliyuncs.com',
    'cn-shanghai' = 'apigateway.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'apigateway.cn-shenzhen.aliyuncs.com',
    'cn-heyuan' = 'apigateway.cn-heyuan.aliyuncs.com',
    'cn-guangzhou' = 'apigateway.cn-guangzhou.aliyuncs.com',
    'cn-chengdu' = 'apigateway.cn-chengdu.aliyuncs.com',
    'cn-hongkong' = 'apigateway.cn-hongkong.aliyuncs.com',
    'ap-northeast-1' = 'apigateway.ap-northeast-1.aliyuncs.com',
    'ap-southeast-1' = 'apigateway.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'apigateway.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'apigateway.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'apigateway.ap-southeast-5.aliyuncs.com',
    'ap-southeast-6' = 'apigateway.ap-southeast-6.aliyuncs.com',
    'ap-southeast-7' = 'apigateway.ap-southeast-7.aliyuncs.com',
    'us-east-1' = 'apigateway.us-east-1.aliyuncs.com',
    'us-west-1' = 'apigateway.us-west-1.aliyuncs.com',
    'eu-west-1' = 'apigateway.eu-west-1.aliyuncs.com',
    'eu-central-1' = 'apigateway.eu-central-1.aliyuncs.com',
    'ap-south-1' = 'apigateway.ap-south-1.aliyuncs.com',
    'me-east-1' = 'apigateway.me-east-1.aliyuncs.com',
    'me-central-1' = 'apigateway.me-central-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'apigateway.cn-hangzhou-finance.aliyuncs.com',
    'cn-shanghai-finance-1' = 'apigateway.cn-shanghai-finance-1.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'apigateway.cn-shenzhen-finance-1.aliyuncs.com',
    'cn-north-2-gov-1' = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    'ap-northeast-2-pop' = 'apigateway.aliyuncs.com',
    'cn-beijing-finance-1' = 'apigateway.cn-beijing-finance-1.aliyuncs.com',
    'cn-beijing-finance-pop' = 'apigateway.aliyuncs.com',
    'cn-beijing-gov-1' = 'apigateway.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'apigateway.aliyuncs.com',
    'cn-edge-1' = 'apigateway.aliyuncs.com',
    'cn-fujian' = 'apigateway.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-test-306' = 'apigateway.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'apigateway.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'apigateway.aliyuncs.com',
    'cn-qingdao-nebula' = 'apigateway.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'apigateway.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'apigateway.aliyuncs.com',
    'cn-shanghai-inner' = 'apigateway.cn-shanghai-inner.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-inner' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'apigateway.aliyuncs.com',
    'cn-wuhan' = 'apigateway.aliyuncs.com',
    'cn-yushanfang' = 'apigateway.aliyuncs.com',
    'cn-zhangbei' = 'apigateway.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'apigateway.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'apigateway.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'apigateway.aliyuncs.com',
    'eu-west-1-oxs' = 'apigateway.aliyuncs.com',
    'rus-west-1-pop' = 'apigateway.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbolishApiRequest {
  apiId: string(name='ApiId', description='The ID of the specified API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='123', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model AbolishApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and is the opposite of DeployApi.
  * *   An API can be unpublished from a specified runtime environment in under 5 seconds.
  * *   An unpublished API cannot be called in the specified runtime environment.
  *
 */
async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbolishApi', 'POST', '/', 'json', false, 'json', request);
}

model AddAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', description='The ACL settings.

*   entry: the entries that you want to add to the ACL. You can add CIDR blocks. Separate multiple CIDR blocks with commas (,).
*   comment: the description of the ACL.

> You can add at most 50 IP addresses or CIDR blocks to an ACL in each call. If the IP address or CIDR block that you want to add to an ACL already exists, the IP address or CIDR block is not added. The entries that you add must be CIDR blocks.', example='[{\\"entry\\": \\"192.168.1.0/24\\", \\"comment\\": \\"test\\"}]', position='Query'),
  aclId: string(name='AclId', description='The ID of the access control list (ACL).', example='acl-bp1ohqkonqybecf4llbrc', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
}

model AddAccessControlListEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAccessControlListEntryResponseBody(name='body'),
}

async function addAccessControlListEntry(request: AddAccessControlListEntryRequest): AddAccessControlListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAccessControlListEntry', 'POST', '/', 'json', false, 'json', request);
}

model AddIpControlPolicyItemRequest {
  appId?: string(name='AppId', description='The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.

*   You can add only one app ID restriction policy at a time.
*   If this parameter is empty, no restriction is imposed on the app IDs.
*   If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
*   Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
*   If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.', example='1111111', position='Query'),
  cidrIp: string(name='CidrIp', description='The IP addresses or CIDR blocks involved in the policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can specify a maximum of 10 IP addresses or CIDR blocks.', example='113.125.1.101;101.11.1.1', position='Query'),
  ipControlId: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='4223a10e-eed3-46a6-8b7c-23003f488153', position='Query'),
}

model AddIpControlPolicyItemResponseBody = {
  policyItemId?: string(name='PolicyItemId', description='The ID of the policy. The ID is unique.', example='P151617000829241'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model AddIpControlPolicyItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIpControlPolicyItemResponseBody(name='body'),
}

/**
  * When you call this operation, note that:
  * *   This operation is intended for API providers.
  * *   An added policy immediately takes effect on all APIs that are bound to the access control list (ACL).
  * *   A maximum of 100 policies can be added to an ACL.
  *
 */
async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model AddTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='fa876ffb-caab-4f0a-93b3-3409f2fa5199', position='Query'),
  specialKey: string(name='SpecialKey', description='The ID of the app or Alibaba Cloud account. Specify this parameter based on the value of the **SpecialType** parameter. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3f053654YpMPwo#/secure) page.', example='3382463', position='Query'),
  specialType: string(name='SpecialType', description='The type of the special throttling policy. Valid values:

*   **APP**
*   **USER**', example='APP', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the specified throttling policy.', example='tf123456', position='Query'),
  trafficValue: int32(name='TrafficValue', description='The special throttling value.', example='10000', position='Query'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model AddTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTrafficSpecialControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   If the input SpecialKey already exists, the previous configuration is overwritten. Use caution when calling this operation.
  * *   Special throttling policies must be added to an existing throttling policy, and can take effect on all the APIs to which the throttling policy is bound.
  *
 */
async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model AttachApiProductRequest {
  apiProductId: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  apis: [ 
    {
      apiId: string(name='ApiId', description='The API ID.', example='551877242a4b4f3a84a56b7c3570e4a7'),
      stageName: string(name='StageName', description='The environment. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE'),
    }
  ](name='Apis', description='The APIs to be attached.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AttachApiProductResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BA20890E-75C7-41BC-9C8B-73276B58F550'),
}

model AttachApiProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachApiProductResponseBody(name='body'),
}

async function attachApiProduct(request: AttachApiProductRequest): AttachApiProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachApiProduct', 'POST', '/', 'json', false, 'json', request);
}

model AttachPluginRequest {
  apiId?: string(name='ApiId', description='The number of the API to be bound.', example='8afff6c8c4c6447abb035812e4d66b65', position='Query'),
  apiIds?: string(name='ApiIds', description='The number of the API to be operated. Separate multiple numbers with commas (,). A maximum of 100 numbers can be entered.', example='xxx', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group that contains the API to which the plug-in is to be bound.', example='285bb759342649a1b70c2093a772e087', position='Query'),
  pluginId: string(name='PluginId', description='The ID of the plug-in to be bound.', example='9a3f1a5279434f2ba74ccd91c295af9f', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE: the pre-release environment**
*   **TEST**', example='TEST', position='Query'),
}

model AttachPluginResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model AttachPluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachPluginResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   You can only bind plug-ins to published APIs.
  * *   The plug-in takes effect immediately after it is bound to an API.
  * *   If you bind a different plug-in to an API, this plug-in takes effect immediately.
  *
 */
async function attachPlugin(request: AttachPluginRequest): AttachPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPlugin', 'POST', '/', 'json', false, 'json', request);
}

model BatchAbolishApisRequest {
  api: [ 
    {
      apiUid: string(name='ApiUid', description='The ID of the API.', example='994f72dcdaf04af0b38022c65fdbd1ac'),
      groupId: string(name='GroupId', description='The ID of the API group.', example='ced5ab777f7b440398ea70e4470124de'),
      stageId?: string(name='StageId', description='The ID of the environment.', example='979fd16250644d5b82173534f465ac77'),
      stageName?: string(name='StageName', description='The name of the environment.', example='RELEASE'),
    }
  ](name='Api', description='The APIs that you want to operate.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchAbolishApisResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the operation.', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model BatchAbolishApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAbolishApisResponseBody(name='body'),
}

async function batchAbolishApis(request: BatchAbolishApisRequest): BatchAbolishApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAbolishApis', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeployApisRequest {
  api?: [ 
    {
      apiUid: string(name='ApiUid', description='The API ID.', example='2b35dd68345b472f8051647306a16415'),
      groupId: string(name='GroupId', description='The API group ID.', example='b4f5c342b8bc4ef88ccda0332402e0fa'),
    }
  ](name='Api', description='The APIs that you want to publish.', position='Query'),
  description: string(name='Description', description='The description.', example='test', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**
*   PRE: the pre-release environment', example='RELEASE', position='Query'),
}

model BatchDeployApisResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the operation.', example='2a322599-8e38-428a-a306-9b21ea2129bf'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model BatchDeployApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeployApisResponseBody(name='body'),
}

async function batchDeployApis(request: BatchDeployApisRequest): BatchDeployApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeployApis', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessControlListRequest {
  aclName: string(name='AclName', description='The name of the ACL. The name must be 1 to 30 characters in length, and can contain letters, digits, periods (.), hyphens (-), forward slashes (/), and underscores (\\_). The name must be unique within the region.', example='testAcl', position='Query'),
  addressIPVersion?: string(name='AddressIPVersion', description='The IP version. Valid values: **ipv4** and **ipv6**.', example='ipv4', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateAccessControlListResponseBody = {
  aclId?: string(name='AclId'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model CreateAccessControlListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessControlListResponseBody(name='body'),
}

async function createAccessControlList(request: CreateAccessControlListRequest): CreateAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessControlList', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The type of the two-way communication API.

*   **COMMON**: normal APIs
*   **REGISTER**: registered APIs
*   **UNREGISTER**: unregistered APIs
*   **NOTIFY**: downstream notification APIs', example='HmacSHA256', position='Query'),
  apiName: string(name='ApiName', description='The name of the API that you want to create. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (\\_).', example='ApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='The IDof the backend service', example='HEADER', position='Query'),
  authType?: string(name='AuthType', description='The configuration items of API requests sent by the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).', example='APP', position='Query'),
  backendEnable?: boolean(name='BackendEnable', description='Specifies whether to enable backend services.', example='true', position='Query'),
  backendId?: string(name='BackendId', description='Specifies whether to enable backend services.', example='a0305308908c4740aba9cbfd63ba99b7', position='Query'),
  constantParameters?: string(name='ConstantParameters', position='Body'),
  description?: string(name='Description', description='The description of the API. The description can be up to 180 characters in length.', example='Api description', position='Query'),
  disableInternet?: boolean(name='DisableInternet', description='If **AuthType** is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.', example='true', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Body'),
  failResultSample?: string(name='FailResultSample', position='Body'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set **DisableInternet** to **true** to limit API calls to within the VPC.
*   If you set **DisableInternet** to **false**, the limit is lifted. The default value is false when you create an API.', example='true', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='08ae4aa0f95e4321849ee57f4e0b3077', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', description='If the **AuthType** is **APP** authentication, you need to pass this value to specify the signature algorithm. If you do not specify this parameter, the default value HmacSHA256 is used. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='{\\"openIdApiType\\":null,\\"idTokenParamName\\":null,\\"publicKeyId\\":null,\\"publicKey\\":null}', position='Query'),
  requestConfig: string(name='RequestConfig', description='The configuration items of API requests sent by API Gateway to the backend service.

For more information, see [ServiceConfig](~~43987~~).', example='{"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}', position='Query'),
  requestParameters?: string(name='RequestParameters', position='Body'),
  resultBodyModel?: string(name='ResultBodyModel', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.', example='{}', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Body'),
  resultSample?: string(name='ResultSample', position='Body'),
  resultType?: string(name='ResultType', description='The sample response from the backend service.', example='HTML', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).', example='{"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Body'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Body'),
  systemParameters?: string(name='SystemParameters', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
  visibility: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', description='The return description of the API.', example='COMMON', position='Query'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId', description='The ID of the API.', example='8afff6c8c4c6447abb035812e4d66b65'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model CreateApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The name of an API must be unique within an API group.
  * *   A request path must be unique within an API group.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function createApi(request: CreateApiRequest): CreateApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApi', 'POST', '/', 'json', true, 'form', request);
}

model CreateApiGroupRequest {
  basePath?: string(name='BasePath', example='/qqq', position='Query'),
  description?: string(name='Description', example='The weather informations.', position='Query'),
  groupName: string(name='GroupName', example='Weather', position='Query'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', example='Key， Value', position='Query'),
}

model CreateApiGroupResponseBody = {
  basePath?: string(name='BasePath', example='/qqq'),
  description?: string(name='Description', example='The weather informations'),
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7xx'),
  groupName?: string(name='GroupName', example='Weather'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  instanceType?: string(name='InstanceType', example='VPC_SHARED'),
  requestId?: string(name='RequestId', example='FF3B7D81-66AE-47E0-BF69-157DCF187514'),
  subDomain?: string(name='SubDomain', example='523e8dc7bbe04613b5b1d726xxxxxxxx-cn-hangzhou.alicloudapi.com'),
  tagStatus?: boolean(name='TagStatus', example='True'),
}

model CreateApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiStageVariableRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', description='The ID of the runtime environment.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7', position='Query'),
  stageRouteModel?: string(name='StageRouteModel', deprecated='true', position='Query'),
  supportRoute?: boolean(name='SupportRoute', description='Specifies whether routing is supported.', example='true', position='Query'),
  variableName: string(name='VariableName', description='The name of the variable to be added. This parameter is case-sensitive.', example='serverName', position='Query'),
  variableValue?: string(name='VariableValue', description='The value of the variable.', example='api.domain.com', position='Query'),
}

model CreateApiStageVariableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='03442A3D-3B7D-434C-8A95-A5FEB999B529'),
}

model CreateApiStageVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiStageVariableResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  appCode?: string(name='AppCode', description='The AppCode of the application.', example='3aaf905a0a1f4f0eabc6d891dfa08afc', position='Query'),
  appKey?: string(name='AppKey', description='The key of the application that is used to make an API call.', example='60030986', position='Query'),
  appName: string(name='AppName', description='The name of the application. The name must be 4 to 26 characters in length. The name can contain letters, digits, and underscores (\\_), and must start with a letter.', example='CreateAppTest', position='Query'),
  appSecret?: string(name='AppSecret', description='The password of the application.', example='nzyNqFkRWB2uLw86', position='Query'),
  description?: string(name='Description', description='The description of the application. The description can be up to 180 characters in length.', example='test', position='Query'),
  extend?: string(name='Extend', description='The extended information.', example='110210264071', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

Valid values of n: `[1, 20]`.', example='env'),
      value?: string(name='Value', description='The value of the tag.

Valid values of n: `[1, 20]`. If the parameter has a value, you must specify a value for the tag key with the same N as tag.N.Key. Otherwise, an error is reported.', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model CreateAppResponseBody = {
  appId?: long(name='AppId', description='The unique ID of the application.', example='20112314518278'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BA20890E-75C7-41BC-9C8B-73276B58F550'),
  tagStatus?: boolean(name='TagStatus', description='Indicates whether the tag exists. If the value is **true**, the tag exists. If the value is **false**, the tag does not exist.', example='false'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   Each application has a key-value pair which is used for identity verification when you call an API.
  * *   An application must be authorized to call an API.
  * *   Each application has only one key-value pair, which can be reset if the pair is leaked.
  * *   A maximum of 1,000 applications can be created for each Alibaba Cloud account.
  * *   You can call this operation up to 50 times per second per account.
  *
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackendRequest {
  backendName: string(name='BackendName', example='testBackendService', position='Query'),
  backendType: string(name='BackendType', example='HTTP', position='Query'),
  createEventBridgeServiceLinkedRole?: boolean(name='CreateEventBridgeServiceLinkedRole', example='true', position='Query'),
  createSlr?: boolean(name='CreateSlr', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreateBackendResponseBody = {
  backendId?: string(name='BackendId', example='0d105f80a8f340408bd34954d4e4ff22'),
  requestId?: string(name='RequestId', example='66D84355-164D-53ED-81FF-03DCF181DE24'),
}

model CreateBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBackendResponseBody(name='body'),
}

async function createBackend(request: CreateBackendRequest): CreateBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackend', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackendModelRequest {
  backendId?: string(name='BackendId', example='34e94fcd3e2e47a49824a89b8f92cb5e', position='Query'),
  backendModelData?: string(name='BackendModelData', example='{\\"ServiceAddress\\":\\"http://apigateway-echo-redux.alicloudapi.com:8080\\"}', position='Query'),
  backendType?: string(name='BackendType', example='HTTP', position='Query'),
  description?: string(name='Description', example='model description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', example='TEST', position='Query'),
}

model CreateBackendModelResponseBody = {
  backendModelId?: string(name='BackendModelId', example='4be6b110b7aa40b0bf0c83cc00b3bd86'),
  requestId?: string(name='RequestId', example='64411ECF-FAF7-5E3C-BA7B-E4A1F15A28CA'),
}

model CreateBackendModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBackendModelResponseBody(name='body'),
}

async function createBackendModel(request: CreateBackendModelRequest): CreateBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatasetRequest {
  datasetName: string(name='DatasetName', description='The name of the dataset.', example='DatasetName', position='Query'),
  datasetType: string(name='DatasetType', description='The type of the dataset. Valid values:

* JWT_BLOCKING: a JSON Web Token (JWT) blacklist
* IP_WHITELIST_CIDR : an IP address whitelist
* PARAMETER_ACCESS : parameter-based access control', example='JWT_BLOCKING', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='123'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', position='Query'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', description='The ID of the dataset.', example='a25a6589b2584ff490e891cc********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4173F95B-360C-460C-9F6C-4A96********'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataset', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatasetItemRequest {
  datasetId: string(name='DatasetId', example='a25a6589b2584ff490e891cc********', position='Query'),
  description?: string(name='Description', position='Query'),
  expiredTime?: string(name='ExpiredTime', example='2022-09-22T12:00:00Z', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  value: string(name='Value', example='106.43.XXX.XXX', position='Query'),
}

model CreateDatasetItemResponseBody = {
  datasetItemId?: string(name='DatasetItemId', example='5045****'),
  requestId?: string(name='RequestId', example='8A5E2053-4D9F-5280-B7A9-D357********'),
}

model CreateDatasetItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetItemResponseBody(name='body'),
}

async function createDatasetItem(request: CreateDatasetItemRequest): CreateDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  duration?: int32(name='Duration', example='1', position='Query'),
  httpsPolicy?: string(name='HttpsPolicy', example='HTTPS2_TLS1_2', position='Query'),
  instanceCidr?: string(name='InstanceCidr', position='Query'),
  instanceName: string(name='InstanceName', example='ApigatewayInstance', position='Query'),
  instanceSpec: string(name='InstanceSpec', example='api.s1.small', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  token: string(name='Token', example='c20d86c4-1eb3-4d0b-afe9-c586df1e2136', position='Query'),
  userVpcId?: string(name='UserVpcId', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-beijing-MAZ3(c,e)', position='Query'),
  zoneVSwitchSecurityGroup?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      securityGroupId?: string(name='SecurityGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneVSwitchSecurityGroup', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='apigateway-hz-b3c5dadd5***'),
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  tagStatus?: boolean(name='TagStatus'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntranetDomainRequest {
  groupId: string(name='GroupId', description='The custom domain name.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateIntranetDomainResponseBody = {
  domainName?: string(name='DomainName', description='The ID of the request.', example='api.demo.com'),
  requestId?: string(name='RequestId', description='auditing', example='20D942A5-EDC6-5DA3-93F9-257888399E22'),
}

model CreateIntranetDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIntranetDomainResponseBody(name='body'),
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntranetDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpControlRequest {
  description?: string(name='Description', description='The description. The description can be up to 200 characters in length.', example='test', position='Query'),
  ipControlName: string(name='IpControlName', description='The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).``', example='controlNameTest', position='Query'),
  ipControlPolicys?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.

*   You can add only one application ID at a time.
*   If this parameter is empty, no applications are restricted.
*   If this parameter is not empty, not only IP addresses but also applications are restricted.
*   If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
*   If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.
*   Valid values of N in IpControlPolicys.N: `[1,100]`.', example='11111'),
      cidrIp?: string(name='CidrIp', description='The IP address or CIDR block involved in a policy.

*   If you want to specify a policy when you create an ACL, this parameter is required.
*   The IP address or CIDR block that is defined in each policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.
*   Valid values of N in IpControlPolicys.N: `[1,100]`.', example='114.1.1.0/24'),
    }
  ](name='IpControlPolicys', description='The information about the policies. The information is an array of ipcontrolpolicys data.', position='Query'),
  ipControlType: string(name='IpControlType', description='The type of the ACL. Valid values:

*   **ALLOW**: an IP address whitelist
*   **REFUSE**: an IP address blacklist', example='ALLOW', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateIpControlResponseBody = {
  ipControlId?: string(name='IpControlId', description='The ID of the ACL.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model CreateIpControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpControlResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   An ACL must be bound to an API to take effect. After an ACL is bound to an API, the ACL takes effect on the API immediately.
  * *   You can add policies to an ACL when you create the ACL.
  * *   If an ACL does not have any policy, the ACL is ineffective.
  *
 */
async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpControl', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', example='PROVIDER', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', description='slslogstore', example='api-gateway', position='Query'),
  slsProject: string(name='SlsProject', example='rec-lq-sls', position='Query'),
}

model CreateLogConfigResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateLogConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogConfigResponseBody(name='body'),
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateModelRequest {
  description?: string(name='Description', description='The description of the model definition.', example='Model Description', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the model belongs.', example='30e792398d6c4569b04c0e53a3494381', position='Query'),
  modelName: string(name='ModelName', description='The name of the model. The name must be unique within the group.', example='Test', position='Query'),
  schema: string(name='Schema', description='The definition of the model in JSON Schema.', example='{"type":"object","properties":{"id":{"format":"int64","maximum":100,"exclusiveMaximum":true,"type":"integer"},"name":{"maxLength":10,"type":"string"}}}', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The values of the tag.', example='123'),
    }
  ](name='Tag', description='The object tags that match the lifecycle rule. You can specify multiple tags.', position='Query'),
}

model CreateModelResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the model was created.', example='2019-01-29T09:33:01Z'),
  description?: string(name='Description', description='The description of the created model.', example='Model Description'),
  groupId?: string(name='GroupId', description='The ID of the API group to which the created model belongs.', example='30e792398d6c4569b04c0e53a3494381'),
  modelId?: string(name='ModelId', description='The ID of the created model.', example='766c0b9538a04bdf974953b5576783ba'),
  modelName?: string(name='ModelName', description='The name of the created model.', example='Test'),
  modelRef?: string(name='ModelRef', description='The URI of the created model.', example='https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba'),
  modifiedTime?: string(name='ModifiedTime', description='The time when the model is last modified.', example='2019-01-29T09:33:01Z'),
  regionId?: string(name='RegionId', description='The region to which the created model belongs.', example='cn-qingdao'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
  schema?: string(name='Schema', description='The definition of the created model.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
  * *   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
  * *   JSON Schema supports only element attributes of the Object type.
  *
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupRequest {
  auth: string(name='Auth', description='The caller authentication status of the API. Valid values: **ok**: The authentication is successful. **mismatch**: The request is redirected. **servicenotfound**: A request error occurred. **Unknown**: An unknown error occurred.', example='false', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='6735211ab9094c818f32f27bc545b6c8', position='Query'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', description='The ID of the monitoring group.', example='166636221', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateMonitorGroupResponseBody = {
  monitorGroupId?: long(name='MonitorGroupId', description='The ID of the API group. This ID is generated by the system and is unique globally.', example='187421794'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D7136F7-9D67-5D4D-8418-6A512CCEE3A2'),
}

model CreateMonitorGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMonitorGroupResponseBody(name='body'),
}

async function createMonitorGroup(request: CreateMonitorGroupRequest): CreateMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePluginRequest {
  description?: string(name='Description', description='The description of the plug-in. The description can contain a maximum of 200 characters in length.', example='createPlugin', position='Query'),
  pluginData: string(name='PluginData', description='The plug-in definition. Supported formats: JSON and YAML.', example='Plugin definition', position='Query'),
  pluginName: string(name='PluginName', description='The name of the plug-in. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). However, it cannot start with an underscore.', example='NewCors', position='Query'),
  pluginType: string(name='PluginType', description='The type of the plug-in. Valid values:

*   **ipControl: IP address-based access control**
*   **trafficControl: throttling**
*   **backendSignature: backend signature**
*   **jwtAuth** :JWT (OpenId Connect) authentication
*   **cors** :cross-origin resource sharing (CORS)
*   **caching**', example='cors', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.

N can be an integer from 1 to 20.``', example='env'),
      value: string(name='Value', description='The value of the tag.

N can be an integer from 1 to 20.``', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model CreatePluginResponseBody = {
  pluginId?: string(name='PluginId', description='The ID of the plug-in.', example='1f3bde29b43d4d53989248327ff737f2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  tagStatus?: boolean(name='TagStatus', description='Indicates whether the plug-in is successfully marked.', example='true'),
}

model CreatePluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePluginResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The number of plug-ins of the same type that each user can create is limited. Different limits apply to different plug-in types.
  * *   The plug-in definitions for advanced features are restricted.
  * *   Plug-ins must be bound to APIs to take effect. After a plug-in is bound, it takes effect on that API immediately.
  *
 */
async function createPlugin(request: CreatePluginRequest): CreatePluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePlugin', 'POST', '/', 'json', false, 'json', request);
}

model CreateSignatureRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='fa876ffb-caab-4f0a-93b3-3409f2fa5199', position='Query'),
  signatureKey: string(name='SignatureKey', description='The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.', example='qwertyuiop', position='Query'),
  signatureName: string(name='SignatureName', description='The displayed name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.', example='backendsignature', position='Query'),
  signatureSecret: string(name='SignatureSecret', description='The Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.', example='asdfghjkl', position='Query'),
}

model CreateSignatureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureId?: string(name='SignatureId', description='The ID of the back-end signature key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureName?: string(name='SignatureName', description='The name of the back-end signature key.', example='backendsignature'),
}

model CreateSignatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSignatureResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The API operation only creates a key policy. You must call the binding operation to bind the key to an API.
  * *   After the key is bound to the API, requests sent from API Gateway to the backend service contain signature strings. You can specify whether your backend service verifies these signature strings.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSignature', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficControlRequest {
  apiDefault: int32(name='ApiDefault', description='The default throttling value for each API.', example='10000', position='Query'),
  appDefault?: int32(name='AppDefault', description='The default throttling value for each app.', example='10000', position='Query'),
  description?: string(name='Description', description='The description of the throttling policy.', example='ThrottlingTestDescription', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='436fa39b-b3b9-40c5-ae5d-ce3e000e38c5', position='Query'),
  trafficControlName: string(name='TrafficControlName', description='The name of the throttling policy. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.', example='ThrottlingTest', position='Query'),
  trafficControlUnit: string(name='TrafficControlUnit', description='The unit to be used in the throttling policy. Valid values:

*   **SECOND**
*   **MINUTE**
*   **HOUR**
*   **DAY**', example='MINUTE', position='Query'),
  userDefault?: int32(name='UserDefault', description='The default throttling value for each user.', example='10000', position='Query'),
}

model CreateTrafficControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  trafficControlId?: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456'),
}

model CreateTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   Throttling policies must be bound to APIs to take effect. After a policy is bound to an API, it goes into effect on that API immediately.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessControlListRequest {
  aclId: string(name='AclId', description='The ID of the access control policy.', example='acl-uf6fpfdg3b5muska7uqem', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAccessControlListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model DeleteAccessControlListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessControlListResponseBody(name='body'),
}

async function deleteAccessControlList(request: DeleteAccessControlListRequest): DeleteAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessControlList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAllTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='fa876ffb-caab-4f0a-93b3-3409f2fa5199', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456', position='Query'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  *
 */
async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='08ae4aa0f95e4321849ee57f4e0b3077', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ017'),
}

model DeleteApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and cannot be undone after it is complete.
  * *   An API that is running in the runtime environment must be unpublished before you can delete the API.****
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiGroupRequest {
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='key'),
      value: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tag', description='The object tags that match the lifecycle rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99'),
}

model DeleteApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiGroupResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   An API group that contains APIs cannot be deleted. To delete the API group, you must first delete its APIs.
  * *   After an API group is deleted, the second-level domain name bound to the API group is automatically invalidated.
  * *   If the specified API group does not exist, a success response is returned.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiProductRequest {
  apiProductId: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiProductResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ002'),
}

model DeleteApiProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiProductResponseBody(name='body'),
}

async function deleteApiProduct(request: DeleteApiProductRequest): DeleteApiProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiProduct', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiStageVariableRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', description='The ID of the runtime environment.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7', position='Query'),
  variableName: string(name='VariableName', description='The name of the variable to be deleted. This parameter is case-sensitive.', example='serverName', position='Query'),
}

model DeleteApiStageVariableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='03442A3D-3B7D-434C-8A95-A5FEB969B529'),
}

model DeleteApiStageVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiStageVariableResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appId: long(name='AppId', description='The ID of the application.', example='110840611', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='appname'),
      value?: string(name='Value', description='The value of the tag.', example='testapp'),
    }
  ](name='Tag', description='The tags. Up to 20 tags are allowed.', example='test2', position='Query'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   After an application is deleted, the application and its API authorization cannot be restored.
  * *   You can call this operation up to 50 times per second per account.
  *
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackendRequest {
  backendId?: string(name='BackendId', description='The ID of the backend service.', example='27be0dd9ebbc467b9e86c0d250d0b92e', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteBackendResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DeleteBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBackendResponseBody(name='body'),
}

async function deleteBackend(request: DeleteBackendRequest): DeleteBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackend', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackendModelRequest {
  backendId?: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7', position='Query'),
  backendModelId: string(name='BackendModelId', example='4be6b110b7aa40b0bf0c83cc00b3bd86', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', example='TEST', position='Query'),
}

model DeleteBackendModelResponseBody = {
  operationId?: string(name='OperationId', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model DeleteBackendModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBackendModelResponseBody(name='body'),
}

async function deleteBackendModel(request: DeleteBackendModelRequest): DeleteBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatasetRequest {
  datasetId: string(name='DatasetId', example='a25a6589b2584ff490e891cc********', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='048C8EFB-528F-5E97-8A3D-D17B********'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataset', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatasetItemRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='a25a6589b2584ff490e891cc********', position='Query'),
  datasetItemId: string(name='DatasetItemId', description='The ID of the data entry.', example='5045****', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDatasetItemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FF433E09-663A-5F5D-9DBA-A611********'),
}

model DeleteDatasetItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetItemResponseBody(name='body'),
}

async function deleteDatasetItem(request: DeleteDatasetItemRequest): DeleteDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the domain name to be unbound is bound. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   If the specified domain name does not exist, a successful response will still appear.
  * *   Unbinding a domain name from an API group will affect access to the APIs in the group. Exercise caution when using this operation.
  *
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainCertificateRequest {
  certificateId: string(name='CertificateId', description='The ID of the SSL certificate that you want to delete. The ID is automatically generated by the system and globally unique.', example='c621720d1eb34843822b7fb5148e6926', position='Query'),
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model DeleteDomainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-sh-ae502ee79ef8', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='key'),
      value: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tag', description='The tag of objects that match the lifecycle rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA4B3261-F14A-5E33-8608-F75A1DF27AD4'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpControlRequest {
  ipControlId: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteIpControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteIpControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpControlResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   If the ACL is bound to an API, you must unbind the ACL from the API before you can delete the ACL. Otherwise, an error is returned.
  * *   If you call this operation on an ACL that does not exist, a success message is returned.
  *
 */
async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', description='The log type. Valid values: **log** and **survey**.', example='log', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLogConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DeleteLogConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLogConfigResponseBody(name='body'),
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteModelRequest {
  groupId: string(name='GroupId', description='The ID of the API group to which the model belongs.', example='30e792398d6c4569b04c0e53a3494381', position='Query'),
  modelName: string(name='ModelName', description='The name of the model.', example='Test', position='Query'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupRequest {
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='42925e7f5209438186d5560239af5286', position='Query'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', description='The ID of the monitoring group.', example='166636221', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteMonitorGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7E2CBAA-47FF-569F-AF12-B14B80E25422'),
}

model DeleteMonitorGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMonitorGroupResponseBody(name='body'),
}

async function deleteMonitorGroup(request: DeleteMonitorGroupRequest): DeleteMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeletePluginRequest {
  pluginId: string(name='PluginId', description='The ID of the plug-in to be deleted.', example='9a3f1a5279434f2ba74ccd91c295af9f', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.

N can be an integer from 1 to 20.``', example='env'),
      value: string(name='Value', description='The value of the tag.

N can be an integer from 1 to 20.``', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', position='Query'),
}

model DeletePluginResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeletePluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePluginResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   You must first unbind the plug-in from the API. Otherwise, an error is reported when you delete the plug-in.
  *
 */
async function deletePlugin(request: DeletePluginRequest): DeletePluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlugin', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSignatureRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='9abe3317-3e22-4957-ab9f-dd893d0ac956', position='Query'),
  signatureId: string(name='SignatureId', description='The ID of the key to be deleted.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
}

model DeleteSignatureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteSignatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSignatureResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This API operation deletes an existing backend signature key.
  * *   You cannot delete a key that is bound to an API. To delete the key, you must unbind it first.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSignature', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456', position='Query'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   If the throttling policy you want to delete is bound to APIs, you need to unbind the policy first. Otherwise, an error is reported when you delete the policy.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='7c51b234-48d3-44e1-9b36-e2ddccc738e3', position='Query'),
  specialKey: string(name='SpecialKey', description='The ID of the app or Alibaba Cloud account. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.343130a8sDi8cO#/secure) page.', example='3382463', position='Query'),
  specialType: string(name='SpecialType', description='The type of the special throttling policy. Valid values:

*   **APP**
*   **USER**', example='APP', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456', position='Query'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficSpecialControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   You can obtain the input parameters required in this operation by calling other APIs.
  *
 */
async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeployApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  description: string(name='Description', description='The publishing remarks.', example='for_test1', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='63be9002440b4778a61122f14c2b2bbb', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**: the pre-release environment
*   **TEST**', example='RELEASE', position='Query'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DeployApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers. Only the API that you have defined and published to a runtime environment can be called.
  * *   An API is published to a cluster in under 5 seconds.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function deployApi(request: DeployApiRequest): DeployApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAbolishApiTaskRequest {
  operationUid: string(name='OperationUid', description='The ID of the unpublishing operation.', example='fc54****dd4c4***ad7edd7****39401', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAbolishApiTaskResponseBody = {
  apiAbolishResults?: {
    apiAbolishResult?: [ 
    {
      abolishStatus?: string(name='AbolishStatus', description='The unpublishing status.', example='OVER'),
      apiName?: string(name='ApiName', description='The name of the API.', example='v2_page_consent'),
      apiUid?: string(name='ApiUid', description='The ID of the API.', example='4e26cdbbb113416dba1f0285bed29979'),
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Success. Request Success.'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='160cb6505e1c43a6b84346856d74eb47'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='wb2022021401619286'),
      stageId?: string(name='StageId', description='The ID of the runtime environment.', example='0919f2854a88484c91dc9253347c78f9'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
    }
  ](name='ApiAbolishResult')
  }(name='ApiAbolishResults', description='The result returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99'),
}

model DescribeAbolishApiTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAbolishApiTaskResponseBody(name='body'),
}

async function describeAbolishApiTask(request: DescribeAbolishApiTaskRequest): DescribeAbolishApiTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAbolishApiTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessControlListAttributeRequest {
  aclId?: string(name='AclId', description='The ID of the access control policy.', example='acl-3nsohdozz0ru8fi5onwz1', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccessControlListAttributeResponseBody = {
  aclEntrys?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment', description='The description of an entry.', example='default'),
      aclEntryIp?: string(name='AclEntryIp', description='The entries of the access control policy.', example='192.168.1.0/24'),
    }
  ](name='AclEntry')
  }(name='AclEntrys', description='The information about the access control policy.'),
  aclId?: string(name='AclId', description='The ID of the access control policy.', example='acl-uf6fpfdg3b5muska7uqem'),
  aclName?: string(name='AclName', description='The name of the access control policy.', example='testAcl'),
  addressIPVersion?: string(name='AddressIPVersion'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeAccessControlListAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessControlListAttributeResponseBody(name='body'),
}

async function describeAccessControlListAttribute(request: DescribeAccessControlListAttributeRequest): DescribeAccessControlListAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessControlListAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessControlListsRequest {
  aclName?: string(name='AclName', description='The name of the access control policy.', example='testAcl', position='Query'),
  addressIPVersion?: string(name='AddressIPVersion', description='IP版本，可以设置为**ipv4**或者**ipv6**。', example='ipv6', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the current page.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccessControlListsResponseBody = {
  acls?: {
    acl?: [ 
    {
      aclId?: string(name='AclId', description='The ID of the access control policy.', example='acl-3nsohdozz0ru8fi5onwz1'),
      aclName?: string(name='AclName', description='The name of the access control policy.', example='testAcl'),
      addressIPVersion?: string(name='AddressIPVersion', description='访问控制策略组的IP版本。
- **IPv4**。
- **IPv6**。', example='ipv4'),
    }
  ](name='Acl')
  }(name='Acls', description='The ACLs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
}

model DescribeAccessControlListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessControlListsResponseBody(name='body'),
}

async function describeAccessControlLists(request: DescribeAccessControlListsRequest): DescribeAccessControlListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessControlLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='8afff6c8c4c6447abb035812e4d66b65', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='123', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='If **AuthType** is set to **APP**, this value must be passed to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='8afff6c8c4c6447abb035812e4d66b65'),
  apiName?: string(name='ApiName', description='The name of the API, which is unique in the group.', example='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='If **AuthType** is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.', example='HEADER'),
  authType?: string(name='AuthType', description='The security authentication method of the API. Valid values:

*   **APP**: Only authorized applications can call the API.

*   **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
    *   We recommend that you do not make the API whose security authentication method is ANONYMOUS available in Alibaba Cloud Marketplace because API Gateway cannot meter calls on the caller or limit the number of calls on the API. If you want to make the API group to which the API belongs available in Alibaba Cloud Marketplace, we recommend that you move the API to another group, set its type to PRIVATE, or set its security authentication method to APP.

*   **APPOPENID**: The OpenID Connect account authentication method is used. Only applications authorized by OpenID Connect can call the API. If this method is selected, the OpenIdConnectConfig parameter is required.', example='APP'),
  backendConfig?: {
    backendId?: string(name='BackendId', description='The ID of the backend service.', example='0038e00c3dca44fcba3a94015d8f5bbf'),
    backendName?: string(name='BackendName', description='The name of the backend service.', example='testoss'),
    backendType?: string(name='BackendType', description='Backend service type', example='HTTP'),
  }(name='BackendConfig', description='Backend configurations'),
  backendEnable?: boolean(name='BackendEnable', description='Specifies whether to enable backend services.', example='true'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The constant parameter value.', example='constance'),
      description?: string(name='Description', description='The parameter description.', example='constance'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The mapped parameter name in the backend service.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='System parameters sent by API Gateway to the backend service'),
  createdTime?: string(name='CreatedTime', description='The creation time of the API.', example='2016-07-28T09:50:43Z'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The example value.', example='192.168.1.1'),
      description?: string(name='Description', description='The parameter description.', example='Client IP Address'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The mapped parameter name in the backend service.', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='Custom system parameters'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      deployedStatus?: string(name='DeployedStatus', description='The deployment status. Valid values: DEPLOYED and NONDEPLOYED.', example='DEPLOYED'),
      effectiveVersion?: string(name='EffectiveVersion', description='The effective version.', example='xxx'),
      stageName?: string(name='StageName', description='The environment to which the API is published. Valid values: RELEASE and TEST.', example='RELEASE'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos', description='The API publishing status.'),
  description?: string(name='Description', description='The description of the API.', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', description='Specifies whether to limit API calls to within the VPC. Valid values:

*   **true**: Only API calls from the VPC are supported.
*   **false**: API calls from the VPC and Internet are both supported.', example='false'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The returned error code.', example='400'),
      description?: string(name='Description', description='The error description.', example='The UserId parameter is missing from the request.'),
      message?: string(name='Message', description='The returned error message.', example='Missing the parameter UserId'),
      model?: string(name='Model', description='The model.', example='[\\"*\\"]'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service.', example='400'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='Specifies whether to carry the header : X-Ca-Nonce when calling an API. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent reply attacks. Valid values:

*   **true**: This field is forcibly checked when an API is requested to prevent replay attacks.
*   **false**: This field is not checked.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='08ae4aa0f95e4321849ee57f4e0b3077'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='ApiTest'),
  mock?: string(name='Mock', description='Specifies whether to enable the Mock mode. Valid values:

*   OPEN: The Mock mode is enabled.
*   CLOSED: The Mock mode is not enabled.', example='CLOSED'),
  mockResult?: string(name='MockResult', description='The result returned for service mocking.', example='test result'),
  modifiedTime?: string(name='ModifiedTime', description='The last modification time of the API.', example='2016-07-28T13:13:12Z'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The name of the parameter that corresponds to the token.', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='The OpenID Connect mode. Valid values:

*   **IDTOKEN**: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.
*   **BUSINESS**: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The public key.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='Configuration items of the third-party OpenID Connect authentication method'),
  regionId?: string(name='RegionId', description='The region ID of the API.', example='cn-qingdao'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the RequestMode parameter is set to MAPPING.********

The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The body model.', example='https://apigateway.aliyun.com/models/3a240a127dcc4afd9ab1bf7e947b4095/9e2df550e85b4121a79ec33e2619eaab'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode. Valid values: MAPPING and PASSTHROUGH.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='The configuration items of API requests sent by the consumer to API Gateway.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D0FF585F-7966-40CF-BC60-75DB070B23D5<'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The parameter name.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The default value.', example='20'),
      demoValue?: string(name='DemoValue', description='The example value.', example='20'),
      description?: string(name='Description', description='The parameter description.', example='Age'),
      docOrder?: int32(name='DocOrder', description='The order in which the parameter is sorted in the document.', example='0'),
      docShow?: string(name='DocShow', description='Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values that can be specified if the **ParameterType** parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='The JSON Schema used for JSON validation when **ParameterType** is set to String.', example='JSON'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum length of the parameter value if the **ParameterType** parameter is set to String.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.', example='123456'),
      minLength?: long(name='MinLength', description='The minimum length of the parameter value if the **ParameterType** parameter is set to String.', example='123456'),
      minValue?: long(name='MinValue', description='The minimum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.', example='123456'),
      parameterType?: string(name='ParameterType', description='The data type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression that is used to validate the parameter if the **ParameterType** parameter is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.'),
  resultBodyModel?: string(name='ResultBodyModel', description='The returned description of the API.', example='{}'),
  resultSample?: string(name='ResultSample', description='The sample response from the backend service.', example='200'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML.', example='JSON'),
  serviceConfig?: {
    aoneAppName?: string(name='AoneAppName', description='The application name in AONE.', example='ib-blank'),
    contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT**: the default header type in API Gateway
*   **CUSTOM**: a custom header type
*   **CLIENT**: the ContentType header type of the client', example='CUSTOM'),
    contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId', description='The ID of the region where the EventBridge instance is located.', example='cn-beijing'),
      eventBus?: string(name='EventBus', description='The event bus.', example='testBus'),
      eventSource?: string(name='EventSource', description='The event source.', example='baas_driver'),
      roleArn?: string(name='RoleArn', description='The Arn that is authorized by a RAM user to EventBridge.', example='acs:ram::1933122015759***:role/adminoidcaliyun'),
    }(name='EventBridgeConfig', description='Configuration items of EventBridge'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT**: the default header type in API Gateway
*   **CUSTOM**: a custom header type
*   **CLIENT**: the ContentType header type of the client', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The root path of Function Compute.', example='https://1227****64334133.ap-southeast-1-int***al.fc.aliyuncs.com/201****-15/proxy/test****ice.LATEST/testHttp/'),
      fcType?: string(name='FcType', description='The type of the Function Compute instance.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='The function name defined in Function Compute.', example='edge_function'),
      method?: string(name='Method', description='The request method.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='The backend only receives the service path.', example='false'),
      path?: string(name='Path', description='The API request path.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The alias of the function.', example='2'),
      regionId?: string(name='RegionId', description='The region where the Function Compute instance is located.', example='cn-qingdao'),
      roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The service name defined in Function Compute.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='Backend configuration items when the backend service is Function Compute'),
    mock?: string(name='Mock', description='Specifies whether to enable the Mock mode. Valid values:

*   **TRUE**: The Mock mode is enabled.
*   **FALSE**: The Mock mode is not enabled.', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The name of the HTTP header.', example='Content-Length'),
        headerValue?: string(name='HeaderValue', description='The value of the HTTP header.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The simulated headers.'),
    mockResult?: string(name='MockResult', description='The result returned when the Mock mode is enabled.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='The status code returned for service mocking.', example='200'),
    ossConfig?: {
      action?: string(name='Action', description='The operation options on OSS. Valid values:

*   GetObject
*   PostObject
*   DeleteObject
*   PutObject
*   HeadObject
*   GetObjectMeta
*   AppendObject', example='GetObject'),
      bucketName?: string(name='BucketName', description='The OSS bucket.', example='cbg-db'),
      key?: string(name='Key', description='The stored object or folder path.', example='/folder/test.json'),
      ossRegionId?: string(name='OssRegionId', description='The ID of the region where the OSS instance is located.', example='cn-hangzhou'),
    }(name='OssConfig', description='The information returned when the backend service is Object Storage Service (OSS).'),
    serviceAddress?: string(name='ServiceAddress', description='The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    servicePath?: string(name='ServicePath', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The protocol used by the backend service. Valid values: HTTP and HTTPS.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service. Unit: milliseconds.', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='Specifies whether to enable the VPC channel. Valid values:

*   **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
*   **FALSE**: The VPC channel is not enabled.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='The ID of the ECS or SLB instance in the VPC.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='The name of the VPC access authorization.', example='glmall-app-test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='8080'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeafsc3fygk1***'),
      vpcScheme?: string(name='VpcScheme', description='The VPC protocol.', example='HTTP'),
    }(name='VpcConfig', description='Configuration items related to VPC channels'),
  }(name='ServiceConfig', description='The configuration items of API requests that API Gateway sends to the backend service.'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The data type of the parameter. Valid values: STRING, NUMBER, and BOOLEAN.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='The mapped parameter name in the backend service.', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The name of the frontend parameter. The name must be included in RequestParametersObject and match ApiParameterName in RequestParameters.', example='sex'),
      serviceParameterName?: string(name='ServiceParameterName', description='The mapped parameter name in the backend service.', example='sex'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The example value.', example='192.168.1.1'),
      description?: string(name='Description', description='The parameter description.', example='Client IP Address'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The mapped parameter name in the backend service.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='System parameters sent by API Gateway to the backend service'),
  tagList?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='TagList'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', description='The type of the two-way communication API.

*   **COMMON**: common API
*   **REGISTER**: registered API
*   **UNREGISTER**: unregistered API
*   **NOTIFY**: downstream notification API', example='COMMON'),
}

model DescribeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='123', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**
*   **TEST**

If this parameter is not specified, the default value is used, which is RELEASE.', example='RELEASE', position='Query'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId', description='The ID of the API.', example='b24be7e59a104e52bffbf432cc9272af'),
  apiName?: string(name='ApiName', description='The name of the API', example='ObtainKeywordQRCodeAddress'),
  authType?: string(name='AuthType', description='The security authentication method. Valid values: APP, ANONYMOUS, and APPOPENID, indicating respectively Alibaba Cloud application authentication, anonymous authentication, and third-party OpenID Connect account authentication.', example='APP'),
  deployedTime?: string(name='DeployedTime', description='The publishing time.', example='2022-07-13T16:00:33Z'),
  description?: string(name='Description', description='The API description.', example='Lynk\\&Co Digital Mall OMS-UAT'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to set **DisableInternet** to **true** to limit API calls to within the VPC.
*   If you set **DisableInternet** to **false**, the limit is lifted. The default value is false when you create an API.', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The returned error code.', example='Error'),
      description?: string(name='Description', description='The description of the error code.', example='Unauthorized'),
      message?: string(name='Message', description='The returned error message.', example='error message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='f51d08c5b7c84342905544ebaec26d35'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='Member Age Transaction Service'),
  regionId?: string(name='RegionId', description='The region ID of the API group.', example='cn-hangzhou'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the RequestMode parameter is set to MAPPING.********

The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.', example='STREAM'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='The returned API frontend definition information. It is an array consisting of RequestConfig data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F253FB5F-9AE1-5DDA-99B5-46BE00A3719E'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The name of the parameter in the API request.', example='Length'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The default value.', example='20'),
      demoValue?: string(name='DemoValue', description='The example value.', example='20'),
      description?: string(name='Description', description='The description.', example='Parameters'),
      docOrder?: int32(name='DocOrder', description='The order in which the parameter is sorted in the document.', example='0'),
      docShow?: string(name='DocShow', description='Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values that can be specified if the **ParameterType** parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='JSON scheme', example='{}'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum length.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum value.', example='200'),
      minLength?: long(name='MinLength', description='The minimum length.', example='2'),
      minValue?: long(name='MinValue', description='The minimum value.', example='123456'),
      parameterType?: string(name='ParameterType', description='The data type of the parameter.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression that is used to validate the parameter if the **ParameterType** parameter is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The returned frontend input parameters in the API. It is an array consisting of RequestParameter data.'),
  resultSample?: string(name='ResultSample', description='The sample response.', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}'),
  resultType?: string(name='ResultType', description='The return value type.', example='JSON'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
  visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values: PUBLIC and PRIVATE.', example='PUBLIC'),
}

model DescribeApiDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocResponseBody(name='body'),
}

/**
  * *   For API callers, the specified API must be a public or authorized private API that has been published to a runtime environment.
  * *   When you call this operation as an API caller, the service information, parameter definitions, and other details of the API you specify are returned.
  * *   When you call this operation as an API provider, the definition of the specified API running in the specified runtime environment is returned. The returned definition takes effect in the runtime environment, and may be different from the definition of the API you modify.
  * *   Before you call this operation as an API provider, ensure that the API to be queried is a public one or that your application has been authorized to call the API, because authentication on API callers is required.
  *
 */
async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupRequest {
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='appname'),
      value?: string(name='Value', description='The value of the tag.', example='test_app'),
    }
  ](name='Tag', description='The object tags that match the lifecycle rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DescribeApiGroupResponseBody = {
  basePath?: string(name='BasePath', description='The root path of the API.', example='/qqq'),
  billingStatus?: string(name='BillingStatus', description='The billing status of the API group.

*   **NORMAL**: The API group is normal.
*   **LOCKED**: The API group is locked due to overdue payments.', example='NORMAL'),
  cloudMarketCommodity?: boolean(name='CloudMarketCommodity', description='The products on Alibaba Cloud Marketplace.', example='false'),
  cmsMonitorGroup?: string(name='CmsMonitorGroup', description='The CloudMonitor application group.', example='217008423'),
  compatibleFlags?: string(name='CompatibleFlags', description='The list of associated tags. Separate multiple tags with commas (,).', example='depart:dep1'),
  createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the API group.', example='2016-08-01T06:53:02Z'),
  customDomains?: {
    domainItem?: [ 
    {
      bindStageAlias?: string(name='BindStageAlias'),
      bindStageName?: string(name='BindStageName', description='The environment in which the associated API group runs.', example='TEST'),
      certificateId?: string(name='CertificateId', description='The unique ID of the SSL certificate, which is automatically generated by the system.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
      certificateName?: string(name='CertificateName', description='The SSL certificate name.', example='myCertificate'),
      certificateValidEnd?: long(name='CertificateValidEnd', description='The time when the certificate expires.', example='2635123476000'),
      certificateValidStart?: long(name='CertificateValidStart', description='The time when the certificate takes effect.', example='1689043476000'),
      customDomainType?: string(name='CustomDomainType', description='The type of the custom domain name.', example='intranet'),
      domainBindingStatus?: string(name='DomainBindingStatus', description='The binding status of the custom domain name. Valid values:

*   **BINDING**: The domain name is bound.
*   **BOUND**: The domain name is not bound.', example='BINDING'),
      domainCNAMEStatus?: string(name='DomainCNAMEStatus', description='The domain name resolution status. Valid values:

*   **RESOLVED**
*   **UNRESOLVED**', example='RESOLVED'),
      domainLegalStatus?: string(name='DomainLegalStatus', description='The validity status of the domain name. Valid values:

*   **NORMAL**: The domain name is valid.
*   **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.', example='ABNORMAL'),
      domainName?: string(name='DomainName', description='The domain name.', example='api.demo.com'),
      domainRemark?: string(name='DomainRemark', description='Remarks about the domain name, such as the cause of an exception.', example='Indicates that the domain name does not have an ICP filing.'),
      domainWebSocketStatus?: string(name='DomainWebSocketStatus', description='The status of the domain name that uses the WebSocket feature.', example='CLOSE'),
      isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps', description='Indicates whether to redirect HTTP requests as HTTPS requests.', example='false'),
      wildcardDomainPatterns?: string(name='WildcardDomainPatterns', description='The wildcard domain name mode.', example='[\\"{test}.test.com\\"]'),
    }
  ](name='DomainItem')
  }(name='CustomDomains', description='The custom domain name information.'),
  customTraceConfig?: string(name='CustomTraceConfig', description='The custom trace configuration.', example='{\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}'),
  customerConfigs?: string(name='CustomerConfigs', description='The list of custom configuration items.', example='removeResponseServerHeader'),
  dedicatedInstanceType?: string(name='DedicatedInstanceType', example='normal'),
  defaultDomain?: string(name='DefaultDomain', description='The default domain name.', example='mkt.api.gaore.com'),
  description?: string(name='Description', description='The description of the API group.', example='New weather informations.'),
  disableInnerDomain?: boolean(name='DisableInnerDomain', description='Indicates whether access over the public second-level domain name is enabled. Valid values:

*   true
*   false', example='false'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  groupName?: string(name='GroupName', description='The name of the group to which the API belongs.', example='NewWeather'),
  httpsPolicy?: string(name='HttpsPolicy', description='The HTTPS policy.', example='HTTPS2_TLS1_0'),
  illegalStatus?: string(name='IllegalStatus', description='The validity status of the API group. Valid values:

*   **NORMAL**: The API group is normal.
*   **LOCKED**: The API group is locked because it is not valid.', example='NORMAL'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43xxxxx'),
  instanceType?: string(name='InstanceType', description='The type of the instance.

*   CLASSIC_SHARED: shared instance that uses the classic network configuration
*   VPC_SHARED: shared instance that uses VPC
*   VPC_DEDICATED: dedicated instance that uses VPC', example='VPC_SHARED'),
  ipv6Status?: string(name='Ipv6Status', description='The IPv6 status.', example='UNBIND'),
  migrationError?: string(name='MigrationError', example='The current instance conflicts with the target instance.'),
  migrationStatus?: string(name='MigrationStatus', example='Fail'),
  modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the API group.', example='2016-08-01T06:54:32Z'),
  passthroughHeaders?: string(name='PassthroughHeaders', description='Specifies whether to pass headers.', example='eagleeye-rpcid,x-b3-traceid'),
  regionId?: string(name='RegionId', description='The region to which the API group belongs.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03442A3D-3B7D-434C-8A95-A5FEB989B519'),
  stageItems?: {
    stageInfo?: [ 
    {
      description?: string(name='Description', description='The environment description.', example='MYTEST'),
      stageId?: string(name='StageId', description='The environment ID.', example='123e8dc7bbe01613b5b1d726c2a7888e'),
      stageName?: string(name='StageName', description='The environment name.', example='TEST'),
    }
  ](name='StageInfo')
  }(name='StageItems', description='The runtime environment information.'),
  status?: string(name='Status', description='The status of the API group.

*   **NORMAL**: The API group is normal.
*   **DELETE**: The API group is deleted.', example='NORMAL'),
  subDomain?: string(name='SubDomain', description='The second-level domain name automatically assigned to the API group.', example='27d50c0f2e54b359919923d908bb015-cn-hangzhou.alicloudapi.com'),
  trafficLimit?: int32(name='TrafficLimit', description='The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.', example='500'),
  userLogConfig?: string(name='UserLogConfig', description='The user log settings.', example='{\\"requestBody\\":true,\\"responseBody\\":true,\\"queryString\\":\\"test\\",\\"requestHeaders\\":\\"test\\",\\"responseHeaders\\":\\"test\\",\\"jwtClaims\\":\\"test\\"}'),
  vpcDomain?: string(name='VpcDomain', description='The VPC domain name.', example='e4****7151954***acbd9f7****1058a-ap-southeast-1-vpc.alicloudapi.com'),
  vpcSlbIntranetDomain?: string(name='VpcSlbIntranetDomain', description='The VPC SLB domain name.', example='257e9d450e924d00b976b0ecfb7184c2-cn-beijing-intranet.alicloudapi.com'),
}

model DescribeApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupVpcWhitelistRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='f6c64214dc27400196eef954575d60d3', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
  vpcIds?: string(name='VpcIds', description='The ID of the VPC.', example='vpc-bp11w979o2s9rcr962w25'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupVpcWhitelistResponseBody(name='body'),
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroupVpcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  enableTagAuth?: boolean(name='EnableTagAuth', description='Specifies whether to enable tag verification.', example='true', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='be6d2abcc0dd4f749fc2d2edd6567164', position='Query'),
  groupName?: string(name='GroupName', description='The keyword that can be specified in the name of the API group.', example='Traffic', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43245xx', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sort?: string(name='Sort', description='The order. Valid values: asc and desc. Default value: desc.

*   asc: The API groups are displayed in ascending order of modification time.
*   desc: The API groups are displayed in descending order of modification time.', example='desc', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      basePath?: string(name='BasePath', description='The basepath.', example='/v2/'),
      billingStatus?: string(name='BillingStatus', description='The billing status of the API group. Valid values:

*   **NORMAL**: The instance is normal.
*   **LOCKED**: The API group is locked due to overdue payments.', example='NORMAL'),
      createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the API group.', example='2016-08-01T08:45:15Z'),
      description?: string(name='Description', description='Group Description', example='TrafficInformations.'),
      groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='be6d2abcc0dd4f749fc2d2edd6567164'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='Traffic'),
      httpsPolicy?: string(name='HttpsPolicy', description='The HTTPS security policy', example='HTTPS2_TLS1_0'),
      illegalStatus?: string(name='IllegalStatus', description='The validity status of the API group. Valid values:

*   **NORMAL**: The instance is normal.
*   **LOCKED**: The API group is locked because it is not valid.', example='NORMAL'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43245xx'),
      instanceType?: string(name='InstanceType', description='The type of the instance.', example='VPC_SHARED'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the API group.', example='2016-08-01T08:45:15Z'),
      regionId?: string(name='RegionId', description='The region to which the API group belongs.', example='cn-hangzhou'),
      subDomain?: string(name='SubDomain', description='The second-level domain name that corresponds to the API group and is used by the CNAME of the custom domain name.', example='be6d2abcc0dd4f749fc2d2edd6567164-cn-hangzhou.alicloudapi.com'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='key'),
          value?: string(name='Value', description='The value of the tag.', example='value'),
        }
      ](name='TagInfo')
      }(name='Tags', description='The list of tags.'),
      trafficLimit?: int32(name='TrafficLimit', description='The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.', example='500'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes', description='The returned group set.'),
  pageNumber?: int32(name='PageNumber', description='The number of pages to return the results on.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiHistoriesRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='c076144d7878437b8f82fb85890ce6a0', position='Query'),
  apiName?: string(name='ApiName', description='The name of the API. The name is used for fuzzy match.', example='weather', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='1084f9034c744137901057206b39d2b6', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
}

model DescribeApiHistoriesResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiName?: string(name='ApiName', description='The name of the API.', example='CreateObject'),
      deployedTime?: string(name='DeployedTime', description='The publishing time (UTC) of the API.', example='2016-07-20T08:28:48Z'),
      description?: string(name='Description', description='The description of the API.', example='Creates an object'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='myGroup2'),
      historyVersion?: string(name='HistoryVersion', description='The historical version of the API.', example='20160705104552393'),
      regionId?: string(name='RegionId', description='The region in which the API is located.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
      status?: string(name='Status', description='Indicates whether an API version is effective. Valid values: **ONLINE** and **OFFLINE**.', example='ONLINE'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems', description='The returned API information. It is an array consisting of ApiHisItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='3'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ003'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='32'),
}

model DescribeApiHistoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiHistoriesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers. Only APIs that have been published have historical version records.
  * *   This operation allows you to obtain the historical versions of an API. This operation is always called by other operations.
  *
 */
async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiHistories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiHistoryRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='dc6e17ee3120404c839bbcd7622ab6ed', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='3013a55c0c44483f984d26df27120513', position='Query'),
  historyVersion: string(name='HistoryVersion', description='Specifies the version number that you want to query.', example='20211122155403834', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**: the test environment
*   **PRE**: the pre-release environment', example='RELEASE', position='Query'),
}

model DescribeApiHistoryResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='If **AuthType** is set to **APP**, this value must be passed to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='bebf996e4b3d445d83078094b72b0d91'),
  apiName?: string(name='ApiName', description='The name of the API.', example='Backstage_MengMeng Broadcast_Seven Niu Cloud Push Stream Callback_Official'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='The AppCode authentication type supported. Valid values:

*   DEFAULT: supported after being made available in Alibaba Cloud Marketplace
*   DISABLE: not supported.
*   HEADER : supported only in the Header parameter
*   HEADER_QUERY : supported in the Header or Query parameter.', example='HEADER'),
  authType?: string(name='AuthType', description='The security authentication method of the API. Valid values:

*   **APP: Only authorized applications can call the API.**

*   **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.', example='APP'),
  backendConfig?: {
    backendId?: string(name='BackendId', description='The ID of the backend service.', example='a0305308908c4740aba9cbfd63ba99b7'),
    backendName?: string(name='BackendName', description='The name of the backend service.', example='zmapi'),
    backendType?: string(name='BackendType', description='The type of the backend service.', example='HTTP'),
  }(name='BackendConfig', description='Backend configurations'),
  backendEnable?: boolean(name='BackendEnable', description='Specifies whether to enable backend services.', example='true'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The constant value.', example='constance'),
      description?: string(name='Description', description='The description.', example='for_test1'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='The constant parameters.'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='Example', example='192.168.1.1'),
      description?: string(name='Description', description='The description of the custom system parameter.', example='balabala'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the custom system parameter.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='The custom system parameters.'),
  deployedTime?: string(name='DeployedTime', description='The publishing time (UTC) of the API.', example='2021-06-1113:57:38'),
  description?: string(name='Description', description='The description of the API.', example='Queries weather based on the region name'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to set **DisableInternet** to **true** to limit API calls to within the VPC.
*   If you set **DisableInternet** to **false**, the limit is lifted. The default value is false when you create an API.', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The error code.', example='400'),
      description?: string(name='Description', description='The description.', example='Missing the parameter UserId'),
      message?: string(name='Message', description='The error message.', example='MissingParameter'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.

For more information, see [ErrorCodeSample](~~44392~~).'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='cfb6ef799bf54fffabb0f02019ad2581'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='dev_api'),
  historyVersion?: string(name='HistoryVersion', description='The historical version number.', example='20211022134156663'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The name of the parameter that corresponds to the token.', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='The configuration of OpenID Connect authentication. Valid values:

*   **IDTOKEN: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.**
*   **BUSINESS: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The public key of the API.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='The configuration items of the third-party OpenID Connect authentication method.'),
  regionId?: string(name='RegionId', description='The region where the API is located.', example='cn-hangzhou'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams. This parameter takes effect only when the RequestMode parameter is set to MAPPING.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The body model.', example='https://apigateway.aliyun.com/models/3a240a1XXXXXXXXd9ab1bf7e947b4095/9e2df550e85b4XXXXXXXX619eaab'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='API path', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='Configuration items of API requests sent by the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The name of the API parameter.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='Default value', example='20'),
      demoValue?: string(name='DemoValue', description='Examples', example='20'),
      description?: string(name='Description', description='The description.', example='modidyTest'),
      docOrder?: int32(name='DocOrder', description='The order in the document.', example='0'),
      docShow?: string(name='DocShow', description='Specifies whether the document is public. Valid values: PUBLIC and PRIVATE.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values that can be entered when ParameterType is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='JSON scheme', example='{}'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum parameter length when ParameterType is set to String.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum parameter value when ParameterType is set to Int, Long, Float, or Double.', example='123456'),
      minLength?: long(name='MinLength', description='The minimum parameter length when ParameterType is set to String.', example='123456'),
      minValue?: long(name='MinValue', description='The minimum parameter value when ParameterType is set to Int, Long, Float, or Double.', example='123456'),
      parameterType?: string(name='ParameterType', description='The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression used for parameter validation when ParameterType is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required. Valid values: REQUIRED and OPTIONAL.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).'),
  resultBodyModel?: string(name='ResultBodyModel', description='The return description of the API.', example='{}'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', description='The description.', example='for_test1'),
      hasChild?: boolean(name='HasChild', description='Specifies whether a subnode exists.', example='true'),
      id?: string(name='Id', description='The ID of the result.', example='id'),
      key?: string(name='Key', description='The primary key of the result.', example='groupName'),
      mandatory?: boolean(name='Mandatory', description='Specifies whether the parameter is required.', example='true'),
      name?: string(name='Name', description='The name of the result.', example='fwqf'),
      pid?: string(name='Pid', description='The ID of the parent node.', example='pid'),
      type?: string(name='Type', description='The type of the result.', example='String'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions', description='The return description of the API.'),
  resultSample?: string(name='ResultSample', description='The sample response.', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}'),
  resultType?: string(name='ResultType', description='The type of the data to return.', example='JSON'),
  serviceConfig?: {
    contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header type used when you call the backend service over HTTP.

*   DEFAULT: the default header type in API Gateway
*   CUSTOM: a custom header type
*   CLIENT: the ContentType header type of the client', example='CUSTOM'),
    contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/json'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId', description='The ID of the region where the EventBridge instance is located.', example='cn-beijing'),
      eventBus?: string(name='EventBus', description='The event bus.', example='testBus'),
      eventSource?: string(name='EventSource', description='The event source of the managed rule.', example='baas_driver'),
      roleArn?: string(name='RoleArn', description='The Arn that is authorized by a RAM user to EventBridge.', example='acs:ram::1933122015759***:role/adminoidcaliyun'),
    }(name='EventBridgeConfig', description='Configuration items of EventBridge'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT: the default header type in API Gateway.**
*   **CUSTOM: a custom header type.**
*   **CLIENT: the ContentType header type of the client.', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/json'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The root path of Function Compute.', example='https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/'),
      fcType?: string(name='FcType', description='The type of the Function Compute instance.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='The function name defined in Function Compute.', example='domain_business_control'),
      method?: string(name='Method', description='The request method.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='The backend only receives the service path.', example='false'),
      path?: string(name='Path', description='The API request path.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The alias of the function.', example='2'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The service name defined in Function Compute.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='Backend configuration items when the backend service is Function Compute'),
    mock?: string(name='Mock', description='Specifies whether to enable the MOCK mode. Valid values:

*   TRUE: The Mock mode is enabled.
*   FALSE: The Mock mode is not enabled.', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The name of the HTTP header parameter.', example='Content-Type'),
        headerValue?: string(name='HeaderValue', description='The value of the HTTP header parameter.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The simulated Headers.'),
    mockResult?: string(name='MockResult', description='The result returned when the Mock mode is enabled.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='The status code returned for service mocking.', example='200'),
    ossConfig?: {
      action?: string(name='Action', description='The operation options on OSS. Valid values:

*   GetObject
*   PostObject
*   DeleteObject
*   PutObject
*   HeadObject
*   GetObjectMeta
*   AppendObject', example='GetObject'),
      bucketName?: string(name='BucketName', description='The OSS bucket.', example='phototest02'),
      key?: string(name='Key', description='The stored object or folder path.', example='ENV'),
      ossRegionId?: string(name='OssRegionId', description='The ID of the region where the OSS instance is located.', example='cn-hangzhou'),
    }(name='OssConfig', description='Information when the backend service is OSS'),
    serviceAddress?: string(name='ServiceAddress', description='The URL used to call the backend service.', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='The HTTP request method used when calling the backend service. Valid values: PUT, GET, POST, DELETE, PATCH, HEAD, OPTIONS, and ANY.', example='POST'),
    servicePath?: string(name='ServicePath', description='The path used when you call the backend service.', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The backend service protocol. Currently, only HTTP, HTTPS, and FunctionCompute are supported.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service, in millisecond.', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='Specifies whether to enable the VPC channel. Valid values:

*   TRUE: The VPC channel is enabled.
*   FALSE: The VPC channel is not enabled.

You must create the corresponding VPC access authorization before you can enable a VPC channel.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='The IDs of the ELB and SLB instances in the VPC.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='The name of the VPC.', example='glmall-app-test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='8080'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeafsc3fygk1***'),
      vpcScheme?: string(name='VpcScheme', description='The VPC protocol.', example='HTTP'),
    }(name='VpcConfig', description='Configuration items related to VPC channels'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf6kg9x8sx2tbxxxx'),
  }(name='ServiceConfig', description='The information about a backend service call.'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The data type of the back-end service parameter.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The corresponding frontend parameter. It must be included in RequestParametersObject and matches ApiParameterName in RequestParameter data.', example='sex'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='sex'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).'),
  stageName?: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
  status?: string(name='Status', description='The invocation status of the API.', example='200'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The sample value of the parameter.', example='192.168.1.1'),
      description?: string(name='Description', description='The description.', example='system parameters description'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='The common parameters of the APIs, in JSON format.'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', description='The type of the two-way communication API. Valid values:

*   **COMMON**: general APIs
*   **REGISTER**: registered APIs
*   **UNREGISTER**: unregistered APIs
*   **NOTIFY**: downstream notification', example='COMMON'),
}

model DescribeApiHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiHistoryResponseBody(name='body'),
}

/**
  * Queries the details of a specified historical version of a specified API definition.
  * *   This API is intended for API providers.
  * *   API Gateway records the time and definition of an API every time the API is published. You can use the version number obtained from other operations to query definition details at a certain publication.
  *
 */
async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiIpControlsRequest {
  apiIds?: string(name='ApiIds', description='The IDs of APIs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='123,234', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='test', position='Query'),
}

model DescribeApiIpControlsResponseBody = {
  apiIpControls?: {
    apiIpControlItem?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='The name of the API.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The time of binding.', example='2016-07-23T08:28:48Z'),
      ipControlId?: string(name='IpControlId', description='The ID of the ACL.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      ipControlName?: string(name='IpControlName', description='The name of the ACL.', example='testControlName'),
    }
  ](name='ApiIpControlItem')
  }(name='ApiIpControls', description='The information about the ACLs. The information is an array of ApiIpControlItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeApiIpControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiIpControlsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   If an optional parameter is not specified, all results are returned on separate pages.
  * ·
  *
 */
async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiLatencyDataRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  endTime: string(name='EndTime', description='The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T09:28:48Z', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='63be9002440b4778a61122f14c2b2bbb', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment. Valid values:

*   **RELEASE**
*   **PRE**: the pre-release environment
*   **TEST**', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T08:28:48Z', position='Query'),
}

model DescribeApiLatencyDataResponseBody = {
  callLatencys?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', description='The value corresponding to the monitoring metric.', example='15'),
    }
  ](name='MonitorItem')
  }(name='CallLatencys', description='The returned information about API call latency. It is an array consisting of MonitorItem data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiLatencyDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiLatencyDataResponseBody(name='body'),
}

/**
  * You can call this operation to query the latency metrics in milliseconds for a specified API.
  * *   This API is intended for API providers.
  * *   Only statistics for API calls made in the release environment are collected by default.
  *
 */
async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiLatencyData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiMarketAttributesRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='1f9b5e9ba80943099cac52e040b7e160', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='b693252f3f19445e9a01dac177c4454c', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiMarketAttributesResponseBody = {
  apiId?: string(name='ApiId', description='The ID of the API.', example='6318cd8f6a304cac9318dea8d9a78f7a'),
  marketChargingMode?: string(name='MarketChargingMode', description='The billing method used by the Alibaba Cloud Marketplace.', example='PREPAID_BY_USAGE'),
  needCharging?: string(name='NeedCharging', description='Indicates whether fees are charged.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='545D4E52-4F77-5EC4-BB7E-7344CEC7B5E6'),
}

model DescribeApiMarketAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiMarketAttributesResponseBody(name='body'),
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiMarketAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiProductApisRequest {
  apiProductId: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiProductApisResponseBody = {
  apiInfoList?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='dd46297680014a7e8e318308f3345951'),
      apiName?: string(name='ApiName', description='The API name.', example='testApi'),
      description?: string(name='Description', description='The API description.', example='test'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='1e377f18142345dfb700cd8911c2463a'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='testApiGroup'),
      method?: string(name='Method', description='The request method of the API.', example='POST'),
      path?: string(name='Path', description='The request path of the API.', example='/test'),
      regionId?: string(name='RegionId', description='The ID of the region where the API is deployed.', example='cn-hangzhou'),
      stageName?: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE'),
    }
  ](name='ApiInfo')
  }(name='ApiInfoList', description='The information about the returned APIs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='03442A3D-3B7D-434C-8A95-A5FEB989B519'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='4'),
}

model DescribeApiProductApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiProductApisResponseBody(name='body'),
}

async function describeApiProductApis(request: DescribeApiProductApisRequest): DescribeApiProductApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiProductApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiProductsByAppRequest {
  appId: long(name='AppId', description='The application ID.', example='110962435', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiProductsByAppResponseBody = {
  apiProductInfoList?: {
    apiProductInfo?: [ 
    {
      apiProductId?: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e'),
    }
  ](name='ApiProductInfo')
  }(name='ApiProductInfoList', description='The information about API products.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B805201-AF4C-5788-AC9E-C3EEC83DC82A'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='4'),
}

model DescribeApiProductsByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiProductsByAppResponseBody(name='body'),
}

async function describeApiProductsByApp(request: DescribeApiProductsByAppRequest): DescribeApiProductsByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiProductsByApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiQpsDataRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  endTime: string(name='EndTime', description='The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T09:28:48Z', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='63be9002440b4778a61122f14c2b2bbb', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment. Valid values:

*   **RELEASE**
*   **PRE**: the pre-release environment
*   **TEST**', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T08:28:48Z', position='Query'),
}

model DescribeApiQpsDataResponseBody = {
  callFails?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', description='The value corresponding to the monitoring metric.', example='0'),
    }
  ](name='MonitorItem')
  }(name='CallFails', description='The returned information about failed API calls. It is an array consisting of MonitorItem data.'),
  callSuccesses?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-28T08:24:00Z'),
      itemValue?: string(name='ItemValue', description='The value corresponding to the monitoring metric.', example='650'),
    }
  ](name='MonitorItem')
  }(name='CallSuccesses', description='The returned information about successful API calls. It is an array consisting of MonitorItem data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiQpsDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiQpsDataResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   Only statistics for API calls made in the release environment are collected by default.
  *
 */
async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiSignaturesRequest {
  apiIds?: string(name='ApiIds', description='The IDs of the APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='123', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model DescribeApiSignaturesResponseBody = {
  apiSignatures?: {
    apiSignatureItem?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='The name of the API.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The time when the backend signature key was bound.', example='2016-07-23T08:28:48Z'),
      signatureId?: string(name='SignatureId', description='The ID of the backend signature key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureName?: string(name='SignatureName', description='The name of the backend signature key.', example='backendsignature'),
    }
  ](name='ApiSignatureItem')
  }(name='ApiSignatures', description='The returned signature key information. It is an array consisting of ApiSignatureItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeApiSignaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiSignaturesResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
  *
 */
async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiSignatures', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiTrafficControlsRequest {
  apiIds?: string(name='ApiIds', description='The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='123,234', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group that you want to query.', example='0009db9c828549768a200320714b8930', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='20', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The runtime environment of the API. Valid values:

*   **RELEASE**
*   **TEST**: the test environment', example='RELEASE', position='Query'),
}

model DescribeApiTrafficControlsResponseBody = {
  apiTrafficControls?: {
    apiTrafficControlItem?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='API operation', example='testapi'),
      boundTime?: string(name='BoundTime', description='The binding time of the throttling policy.', example='2016-07-23T08:28:48Z'),
      trafficControlId?: string(name='TrafficControlId', description='The ID of the throttling policy.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      trafficControlName?: string(name='TrafficControlName', description='The name of the throttling policy.', example='backendsignature'),
    }
  ](name='ApiTrafficControlItem')
  }(name='ApiTrafficControls', description='The returned throttling policy information. It is an array consisting of ApiTrafficControlItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeApiTrafficControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiTrafficControlsResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
  *
 */
async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiTrafficDataRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  endTime: string(name='EndTime', description='The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T09:28:48Z', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='63be9002440b4778a61122f14c2b2bbb', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment. Valid values:

*   **RELEASE**
*   **TEST**: the test environment
*   PRE: the pre-release environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-23T08:28:48Z', position='Query'),
}

model DescribeApiTrafficDataResponseBody = {
  callDownloads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', description='The value corresponding to the monitoring metric.', example='0'),
    }
  ](name='MonitorItem')
  }(name='CallDownloads', description='The returned downlink traffic data of API calls. It is an array consisting of MonitorItem data.'),
  callUploads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', description='The value corresponding to the monitoring metric.', example='670'),
    }
  ](name='MonitorItem')
  }(name='CallUploads', description='The returned uplink traffic data of API calls. It is an array consisting of MonitorItem data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiTrafficDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiTrafficDataResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   Only statistics for API calls made in the release environment are collected by default.
  *
 */
async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId', description='The API ID.', example='f68c19ee3bd1478fb58aa05ce8ae9b5a', position='Query'),
  apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='GET', position='Query'),
  apiName?: string(name='ApiName', description='The API name. The name is used for fuzzy match.', example='weather', position='Query'),
  apiPath?: string(name='ApiPath', description='The request path of the API.', example='/illegal/query', position='Query'),
  catalogId?: string(name='CatalogId', description='The category ID.', example='1553414085247362', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='Specifies whether to enable tag verification.', example='true', position='Query'),
  groupId?: string(name='GroupId', description='The API group ID.', example='c4a4d2de657548a2bd485d5d4df42b4a', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment in which you want to perform this operation. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tag', description='The tags of objects that match the rule.', example='Key， Value', position='Query'),
  unDeployed?: boolean(name='UnDeployed', description='Specifies whether to filter unpublished APIs.', example='true', position='Query'),
  visibility?: string(name='Visibility', description='Specifies whether the API is public. Valid values:

*   **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
*   **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.', example='PUBLIC', position='Query'),
}

model DescribeApisResponseBody = {
  apiSummarys?: {
    apiSummary?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='GET'),
      apiName?: string(name='ApiName', description='The API name.', example='CreateObject'),
      apiPath?: string(name='ApiPath', description='The request path of the API.', example='/sqb/'),
      createdTime?: string(name='CreatedTime', description='The time when the API was created. The time is displayed in UTC.', example='2016-05-20T18:18:25Z'),
      deployedInfos?: {
        deployedInfo?: [ 
        {
          deployedStatus?: string(name='DeployedStatus', description='The deployment status. Valid values: DEPLOYED and NONDEPLOYED.', example='DEPLOYED'),
          effectiveVersion?: string(name='EffectiveVersion', description='The deployed version.', example='20220103170737313'),
          stageName?: string(name='StageName', description='Stage Name:

*   **RELEASE**: production environment
*   **PRE**: staging environment
*   **TEST**: test environment', example='RELEASE'),
        }
      ](name='DeployedInfo')
      }(name='DeployedInfos', description='The API publishing statuses.'),
      description?: string(name='Description', description='The API description.', example='Creates an object'),
      groupId?: string(name='GroupId', description='The API group ID.', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='myGroup2'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the API was modified. The time is displayed in UTC.', example='2016-07-23T08:28:48Z'),
      regionId?: string(name='RegionId', description='The ID of the region to which the API belongs.', example='cn-qingdao'),
      tagList?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='tagKey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='tagValue'),
        }
      ](name='Tag')
      }(name='TagList', description='The tags that are added to the APIs.'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**: The API is public.
*   **PRIVATE**: The API is private.', example='PUBLIC'),
    }
  ](name='ApiSummary')
  }(name='ApiSummarys', description='The queried API definitions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='3'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ002'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='32'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
  * *   This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
  *
 */
async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByAppRequest {
  apiName?: string(name='ApiName', example='getPersonInfo', position='Query'),
  apiUid?: string(name='ApiUid', example='b19240592b1b4e74961fb8438ed7550c', position='Query'),
  appId: long(name='AppId', example='333486644', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  method?: string(name='Method', example='POST', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  path?: string(name='Path', example='/tt', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId', example='c625795a1e664782a918eaa629e96ab5'),
      apiName?: string(name='ApiName', example='sd2_h5_player_history_competition'),
      authVaildTime?: string(name='AuthVaildTime', example='Sun, 02 Jan 2022 16:00:00 GMT'),
      authorizationSource?: string(name='AuthorizationSource', example='SELF'),
      createdTime?: string(name='CreatedTime', example='Sun, 02 Jan 2022 16:00:00 GMT'),
      description?: string(name='Description', example='b1008kz'),
      groupId?: string(name='GroupId', example='38bed48d664149e4b9b5ea576319673f'),
      groupName?: string(name='GroupName', example='wb2022012101605749'),
      method?: string(name='Method', example='GET'),
      operator?: string(name='Operator', example='PROVIDER'),
      path?: string(name='Path', example='/api/offline/cacheData'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stageAlias?: string(name='StageAlias'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeApisByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByBackendRequest {
  backendId: string(name='BackendId', description='The ID of the backend service.', example='4ac69b7a17524781b275ed4c5eb25c54', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the current page.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**

If you do not specify this parameter, APIs in the draft state are returned.', example='PRE', position='Query'),
}

model DescribeApisByBackendResponseBody = {
  apiInfoList?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='20bcdc9453524b78a8beb1f6de21edb7'),
      apiName?: string(name='ApiName', description='The name of the API.', example='testApi'),
      description?: string(name='Description', description='The description of the API.', example='test'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='15bcdc9453524b7gs8beb1f6de21edb7'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='testApiGroup'),
      method?: string(name='Method', description='The request method of the API.', example='GET'),
      path?: string(name='Path', description='The request path of the API.', example='/test'),
    }
  ](name='ApiInfo')
  }(name='ApiInfoList', description='The information about the returned API list.'),
  pageNumber?: int32(name='PageNumber', description='The number of the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeApisByBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByBackendResponseBody(name='body'),
}

async function describeApisByBackend(request: DescribeApisByBackendRequest): DescribeApisByBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByBackend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByIpControlRequest {
  ipControlId: string(name='IpControlId', description='The ID of the ACL.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByIpControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='The name of the API', example='testapi'),
      boundTime?: string(name='BoundTime', description='The time of API binding.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The description of the API.', example='Description'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='mygroup'),
      regionId?: string(name='RegionId', description='The region in which the API is located.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST.', example='TEST'),
      visibility?: string(name='Visibility', description='The visibility of the API. Valid values:

*   **PUBLIC**
*   **PRIVATE**', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='The returned API information. It is an array of ApiInfo data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeApisByIpControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByIpControlResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   You can specify PageNumber to obtain the result on the specified page.
  *
 */
async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisBySignatureRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', description='The ID of the signature key.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
}

model DescribeApisBySignatureResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='The name of the API.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The binding time of the API.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The description of the API.', example='Description'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the group to which the API belongs.', example='mygroup'),
      regionId?: string(name='RegionId', description='The region where the API is located.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='The returned API information. It is an array consisting of ApiInfo data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeApisBySignatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisBySignatureResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The results are returned on separate pages. You can specify PageNumber to obtain the result on the specified page.
  *
 */
async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisBySignature', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByTrafficControlRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='9abe3317-3e22-4957-ab9f-dd893d0ac956', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy that you want to query.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
}

model DescribeApisByTrafficControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='The name of the API', example='testapi'),
      boundTime?: string(name='BoundTime', description='The binding time of the API.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The description of the API.', example='Description'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the group to which an API belongs.', example='mygroup'),
      regionId?: string(name='RegionId', description='The region where the API is located.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='The returned API information. It is an array consisting of ApiInfo data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeApisByTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByTrafficControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   You can specify PageNumber to obtain the result on the specified page.
  *
 */
async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByVpcAccessRequest {
  pageNumber?: int32(name='PageNumber', example='2', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcName?: string(name='VpcName', example='lynkco-iov-uat', position='Query'),
}

model DescribeApisByVpcAccessResponseBody = {
  apiVpcAccessInfos?: {
    apiVpcAccessInfo?: [ 
    {
      apiId?: string(name='ApiId', example='09839002de484e76b5a213b040a6a3ca'),
      apiName?: string(name='ApiName', example='iwc'),
      description?: string(name='Description', example='123'),
      groupId?: string(name='GroupId', example='41c33748cbfb41f6b00870156203b72a'),
      groupName?: string(name='GroupName', example='RT_PLU_IP_CTRL_group'),
      instanceId?: string(name='InstanceId', example='Ib-04e41XXXXXd95e9c1'),
      method?: string(name='Method', example='POST'),
      path?: string(name='Path', example='/api/v1/friends/rc/status'),
      port?: int32(name='Port', example='443'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stageId?: string(name='StageId', example='57e17906a69b4424914fb1e05f67c78a'),
      stageName?: string(name='StageName', example='RELEASE'),
      vpcId?: string(name='VpcId', description='vpc id', example='vpc-2ze7bj64wstznvftrskbk'),
      vpcName?: string(name='VpcName', example='aliYun_service_prod'),
    }
  ](name='ApiVpcAccessInfo')
  }(name='ApiVpcAccessInfos'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4E707B25-5119-5ACF-9D26-7D2A2762F05C'),
  totalCount?: int32(name='TotalCount', example='12'),
}

model DescribeApisByVpcAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByVpcAccessResponseBody(name='body'),
}

async function describeApisByVpcAccess(request: DescribeApisByVpcAccessRequest): DescribeApisByVpcAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByVpcAccess', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisWithStageNameIntegratedByAppRequest {
  apiName?: string(name='ApiName', description='The API name.', example='ApiName', position='Query'),
  apiUid?: string(name='ApiUid', description='The API ID.', example='b19240592b1b4e74961fb8438ed7550c', position='Query'),
  appId: long(name='AppId', description='The application ID.', example='2386789', position='Query'),
  description?: string(name='Description', description='The API description. The description can be up to 200 characters in length.', example='test', position='Query'),
  method?: string(name='Method', description='The request HTTP method of the API.', example='POST', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  path?: string(name='Path', description='The request path of the API.', example='/tt', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisWithStageNameIntegratedByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='c625795a1e664782a918eaa629e96ab5'),
      apiName?: string(name='ApiName', description='The API name.', example='sd2_h5_player_history_competition'),
      authorizationSource?: string(name='AuthorizationSource', description='The authorization source.', example='SELF'),
      createdTime?: string(name='CreatedTime', description='The time when the authorization was created.', example='Sun, 02 Jan 2022 16:00:00 GMT'),
      description?: string(name='Description', description='The API description.', example='b1008kz'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='38bed48d664149e4b9b5ea576319673f'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='manager_vehicles'),
      method?: string(name='Method', description='The request HTTP method of the API.', example='POST'),
      operator?: string(name='Operator', description='The authorizer. Valid values:

*   **PROVIDER:** the API owner
*   **CONSUMER:** the API caller', example='PROVIDER'),
      path?: string(name='Path', description='The request path of the API.', example='/api/offline/cacheData'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-shanghai'),
      stageNameAndAuth?: map[string]string(name='StageNameAndAuth', description='The mapping information between environments and authorizations.'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos', description='The authorization information of the API.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeApisWithStageNameIntegratedByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisWithStageNameIntegratedByAppResponseBody(name='body'),
}

async function describeApisWithStageNameIntegratedByApp(request: DescribeApisWithStageNameIntegratedByAppRequest): DescribeApisWithStageNameIntegratedByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisWithStageNameIntegratedByApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppRequest {
  appId?: long(name='AppId', description='The ID of the app. The ID is generated by the system and globally unique.', example='110843374', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppResponseBody = {
  appId?: long(name='AppId', description='The ID of the app.', example='110843374'),
  appName?: string(name='AppName', description='The name of the app.', example='CreateApptest'),
  createdTime?: string(name='CreatedTime', description='The time when the app was created.', example='2019-01-29T09:33:01Z'),
  description?: string(name='Description', description='The description of the app.', example='Estimated on October 15, 2021 at 10:20:27'),
  extend?: string(name='Extend', description='The extended information.', example='110243810311'),
  modifiedTime?: string(name='ModifiedTime', description='The time when the app was modified.', example='2019-01-29T09:33:01Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DBDB3B0F-EC61-5F33-88AD-EC2446FA1DDB'),
}

model DescribeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppResponseBody(name='body'),
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppAttributesRequest {
  appCode?: string(name='AppCode', description='The AppCode of the app.', example='23552160', position='Query'),
  appId?: long(name='AppId', description='The ID of the app.', example='20112314518278', position='Query'),
  appKey?: string(name='AppKey', description='The app key that is used to make an API call.', example='203708622', position='Query'),
  appName?: string(name='AppName', description='The name of the app.', example='testApp', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='Specifies whether to enable tag verification.', example='true', position='Query'),
  extend?: string(name='Extend', description='The extended information.', example='110243810311', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sort?: string(name='Sort', description='The order. Valid values: asc and desc. Default value: desc.

*   asc: The apps are displayed in ascending order of modification time.
*   desc: The apps are displayed in descending order of modification time.', example='desc', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The value of tag N.

Valid values of n: `[1, 20]`.', example='env'),
      value?: string(name='Value', description='The key of tag N.

Valid values of n: `[1, 20]`.', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DescribeAppAttributesResponseBody = {
  apps?: {
    appAttribute?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='20112314518278'),
      appName?: string(name='AppName', description='The application name.', example='CreateApptest'),
      createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the application.', example='2016-07-31T04:10:19Z'),
      description?: string(name='Description', description='The application description.', example='App test'),
      extend?: string(name='Extend', description='The extended information.', example='110461946884'),
      modifiedTime?: string(name='ModifiedTime', description='The modification time (UTC) of the application.', example='2016-07-31T04:10:19Z'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='appid'),
          value?: string(name='Value', description='The tag value.', example='123'),
        }
      ](name='TagInfo')
      }(name='Tags', description='The tags.'),
    }
  ](name='AppAttribute')
  }(name='Apps', description='The returned application information. It is an array that consists of AppAttribute data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8883AC74-259D-4C0B-99FC-0B7F9A588B2F'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeAppAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppAttributesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   AppId is optional.
  *
 */
async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecurityRequest {
  appId: long(name='AppId', description='The ID of the app.', example='20112314518278', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='app'),
      value?: string(name='Value', description='The value of the tag.', example='123'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DescribeAppSecurityResponseBody = {
  appCode?: string(name='AppCode', description='The AppCode of the app.', example='3aaf905a0a1f4f0eabc6d891dfa08afc'),
  appKey?: string(name='AppKey', description='The key of the app.', example='60030986'),
  appSecret?: string(name='AppSecret', description='The password of the app.', example='c1ae97aaa7e45f21d10824bc44678fee'),
  createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the key, which is the same as the app creation time.', example='2016-07-31T04:10:19Z'),
  modifiedTime?: string(name='ModifiedTime', description='The modification time (UTC) of the key.', example='2016-07-31T04:10:19Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeAppSecurityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecurityResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  *
 */
async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: long(name='AppId', description='The ID of the app.', example='20112314518278', position='Query'),
  appOwner?: long(name='AppOwner', description='The Alibaba Cloud account of the app owner. For more information, see [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3a8c196eVWxvQB#/secure).', example='1546564', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsResponseBody = {
  apps?: {
    appItem?: [ 
    {
      appId?: long(name='AppId', description='The ID of the app.', example='20112314518278'),
      appName?: string(name='AppName', description='The name of the app.', example='CreateApptest'),
      description?: string(name='Description', description='The description of the app.', example='App test'),
    }
  ](name='AppItem')
  }(name='Apps', description='The returned app information. It is an array consisting of AppItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   API providers can use the app IDs or their Apsara Stack tenant accounts to query app information.
  * *   Each provider can call this operation for a maximum of 200 times every day in a region.
  *
 */
async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsByApiProductRequest {
  apiProductId: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  appName?: string(name='AppName', description='The application name.', example='testApp', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsByApiProductResponseBody = {
  authorizedApps?: {
    authorizedApp?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='110982419'),
      appName?: string(name='AppName', description='The application name.', example='APP_02580_DEV'),
      authValidTime?: string(name='AuthValidTime', description='The expiration time of the authorization. The time is in GMT. An empty value indicates that the authorization does not expire.', example='2023-06-17T03:41:53Z'),
      authorizedTime?: string(name='AuthorizedTime', description='The time when the authorization was created. The time is in GMT.', example='2016-07-21T06:17:20Z'),
      description?: string(name='Description', description='The authorization description.'),
      extend?: string(name='Extend', description='The extended information.', example='extra info'),
    }
  ](name='AuthorizedApp')
  }(name='AuthorizedApps', description='The information about authorized applications.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC866798-62D3-52F4-8AB5-CA149A53984F'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='4'),
}

model DescribeAppsByApiProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsByApiProductResponseBody(name='body'),
}

async function describeAppsByApiProduct(request: DescribeAppsByApiProductRequest): DescribeAppsByApiProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppsByApiProduct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthorizedApisRequest {
  appId: long(name='AppId', description='The application ID, which is generated by the system and globally unique.', example='2386789', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAuthorizedApisResponseBody = {
  authorizedApis?: {
    authorizedApi?: [ 
    {
      apiId?: string(name='ApiId', description='The unique identifier of the API, which is automatically generated by the system.', example='baacc592e63a4cb6a41920d9d3f91f38'),
      apiName?: string(name='ApiName', description='The name of the API', example='AreaWeather'),
      authVaildTime?: string(name='AuthVaildTime', description='The expiration time of the authorization in UTC.', example='2018-10-05T16:00:00Z'),
      authorizationSource?: string(name='AuthorizationSource', description='The authorization source. Valid values:

*   **CONSOLE**
*   **API**', example='CONSOLE'),
      authorizedTime?: string(name='AuthorizedTime', description='The authorization time in UTC.', example='2016-07-21T06:17:20'),
      description?: string(name='Description', description='Authorization description', example='Queries weather based on the region name'),
      groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='Weather'),
      operator?: string(name='Operator', description='The authorizer. Valid values:

*   **PROVIDER:** API owner
*   **CONSUMER:** API caller', example='PROVIDER'),
      regionId?: string(name='RegionId', description='The region to which the API belongs.', example='cn-hangzhou'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**: the test environment', example='RELEASE'),
    }
  ](name='AuthorizedApi')
  }(name='AuthorizedApis', description='The authorized API set.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeAuthorizedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthorizedApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   The specified application can call all APIs included in the responses.
  *
 */
async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthorizedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthorizedAppsRequest {
  apiId: string(name='ApiId', description='The ID of the API. This ID is generated by the system and globally unique.', example='baacc592e63a4cb6a41920d9d3f91f38', position='Query'),
  appId?: long(name='AppId', description='The ID of the app.', example='20112314518278', position='Query'),
  appName?: string(name='AppName', description='The name of the app.', example='CreateApptest', position='Query'),
  appOwnerId?: long(name='AppOwnerId', description='The Alibaba Cloud account of the app owner.', example='1546564', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
}

model DescribeAuthorizedAppsResponseBody = {
  authorizedApps?: {
    authorizedApp?: [ 
    {
      appDescription?: string(name='AppDescription'),
      appId?: long(name='AppId', description='The ID, which is generated by the system and globally unique.', example='2386789'),
      appName?: string(name='AppName', description='The name of the app.', example='Weather'),
      authVaildTime?: string(name='AuthVaildTime', description='The name of the app.', example='2018-10-05T16:00:00Z'),
      authorizationSource?: string(name='AuthorizationSource', description='The authorization source. Valid values:

*   **CONSOLE**
*   **API**', example='CONSOLE'),
      authorizedTime?: string(name='AuthorizedTime', description='The authorization time (UTC).', example='2016-07-21T06:17:20Z'),
      description?: string(name='Description', description='The description of the authorization.', example='Queries weather based on the region name'),
      operator?: string(name='Operator', description='The authorizer. Valid values:

*   **PROVIDER: API owner**
*   **CONSUMER: API caller**', example='PROVIDER'),
      stageAlias?: string(name='StageAlias'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
    }
  ](name='AuthorizedApp')
  }(name='AuthorizedApps', description='The returned group set.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeAuthorizedAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAuthorizedAppsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   All applications included in the responses have access to the specified API.
  *
 */
async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthorizedApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackendInfoRequest {
  backendId?: string(name='BackendId', description='The ID of the backend service.', example='739b68751c0b4e899e04d0c92b6d0be7', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBackendInfoResponseBody = {
  backendInfo?: {
    backendId?: string(name='BackendId', description='The ID of the backend service.', example='6fc978bb63574146b766863dd7bdf661'),
    backendModels?: [ 
      {
        backendConfig?: {
          discoveryConfig?: {
            nacosConfig?: {
              accessKey?: string(name='AccessKey', description='The AccessKey of the RAM user that has the resource management permissions on Microservices Engine (MSE).', example='A5FIDxxxxxx'),
              authType?: string(name='AuthType', description='The authentication method.', example='PASSWORD'),
              clusters?: string(name='Clusters', description='The name of the cluster to which the microservice belongs.', example='cluster1'),
              groupName?: string(name='GroupName', description='The name of the group to which the microservice that is registered with Nacos belongs.', example='DEFAULT_GROUP'),
              namespace?: string(name='Namespace', description='The ID of the namespace where the microservice that is registered with Nacos resides.', example='public'),
              password?: string(name='Password', description='The password.', example='password'),
              secretKey?: string(name='SecretKey', description='The SecretKey of the RAM user that has the resource management permissions on MSE.', example='dl5loxxxxxx'),
              serverAddress?: string(name='ServerAddress', description='The Nacos service address.', example='http://1xx.2xx.3xx.4xx:8848'),
              serviceName?: string(name='ServiceName', description='The microservice name.', example='service-provider'),
              userName?: string(name='UserName', description='The username.', example='username'),
            }(name='NacosConfig', description='The Nacos configurations.'),
            rcType?: string(name='RcType', description='The registry type.', example='NACOS'),
            zookeeperConfig?: {
              connectString?: string(name='ConnectString'),
              namespace?: string(name='Namespace'),
              serviceName?: string(name='ServiceName'),
            }(name='ZookeeperConfig'),
          }(name='DiscoveryConfig', description='The information about the backend service whose type is Service Discovery.'),
          edasConfig?: {
            edasAppId?: string(name='EdasAppId'),
            microserviceNamespace?: string(name='MicroserviceNamespace'),
            microserviceNamespaceId?: string(name='MicroserviceNamespaceId'),
            microserviceNamespaceName?: string(name='MicroserviceNamespaceName'),
            mseInstanceId?: string(name='MseInstanceId'),
            registryType?: string(name='RegistryType'),
            serviceName?: string(name='ServiceName'),
          }(name='EdasConfig'),
          eventBridgeConfig?: {
            eventBridgeRegionId?: string(name='EventBridgeRegionId', description='The region ID of the event bus in EventBridge.', example='cn-hangzhou'),
            eventBus?: string(name='EventBus', description='The event bus.', example='testBus'),
            eventSource?: string(name='EventSource', description='The event source.', example='dds_driver'),
            roleArn?: string(name='RoleArn', description='The ARN of the RAM role to be assumed by API Gateway to access EventBridge.', example='acs:ram::1975133748561***:role/aliyunserviceroleforiotlogexport'),
          }(name='EventBridgeConfig', description='The information about the backend service whose type is EventBridge.'),
          functionComputeConfig?: {
            fcBaseUrl?: string(name='FcBaseUrl', description='The root path of the Function Compute service.', example='https://t*******.ap-*****.fcapp.run/'),
            fcRegionId?: string(name='FcRegionId', description='The region ID of the Function Compute service.', example='cn-hangzhou'),
            fcType?: string(name='FcType', description='The type of the service in Function Compute.', example='HttpTrigger'),
            functionName?: string(name='FunctionName', description='The function name that is defined in Function Compute.', example='edge_function'),
            onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='Indicates whether the backend service receives only the service path.', example='false'),
            qualifier?: string(name='Qualifier', description='The alias of the function.', example='testQualifier'),
            roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role that is assumed by API Gateway to access Function Compute.', example='acs:ram::31985*:role/aliyunserviceroleforbastionhostpam'),
            serviceName?: string(name='ServiceName', description='The service name that is defined in Function Compute.', example='myservice'),
          }(name='FunctionComputeConfig', description='The information about the backend service whose type is Function Compute.'),
          httpTargetHostName?: string(name='HttpTargetHostName', description='The host of the backend service.', example='www.host.com'),
          mockConfig?: {
            mockHeaders?: [ 
              {
                headerName?: string(name='HeaderName', description='The name of the header parameter.'),
                headerValue?: string(name='HeaderValue', description='The value of the header parameter.'),
              }
            ](name='MockHeaders', description='The header returned for service mocking.'),
            mockResult?: string(name='MockResult', description='The result returned for service mocking.'),
            mockStatusCode?: string(name='MockStatusCode', description='The status code that is returned for service mocking.'),
          }(name='MockConfig', description='The information about the backend service whose type is Mock.'),
          ossConfig?: {
            bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='my_bucket'),
            ossRegionId?: string(name='OssRegionId', description='The region ID of the OSS bucket.', example='cn-hangzhou'),
          }(name='OssConfig', description='The information about the backend service whose type is Object Storage Service (OSS).'),
          serviceAddress?: string(name='ServiceAddress', description='The URL of the backend service.', example='10.0.0.1'),
          serviceTimeout?: int32(name='ServiceTimeout'),
          type?: string(name='Type', description='The type of the backend service.', example='VPC'),
          vpcConfig?: {
            instanceId?: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.', example='i-uf6iaale3gfef9t9cb41'),
            name?: string(name='Name', description='The name of the VPC configuration.', example='dypls-cn-beijing-slb-pre'),
            port?: long(name='Port', description='The port number that corresponds to the instance.', example='8080'),
            vpcAccessId?: string(name='VpcAccessId', description='The ID of the VPC access authorization.', example='2zej3ehuzg9m77kvwnfpn'),
            vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9v96hqi6d14744sxqmx'),
            vpcScheme?: string(name='VpcScheme', description='Indicates whether HTTP or HTTPS is used.', example='http'),
            vpcTargetHostName?: string(name='VpcTargetHostName', description='The host of the backend service.'),
          }(name='VpcConfig', description='The information about the virtual private cloud (VPC). This parameter is available only for backend services whose type is VPC.'),
        }(name='BackendConfig', description='The backend service configurations.'),
        backendModelId?: string(name='BackendModelId', description='The ID of the backend service in the environment.', example='5c4995d08e8b4954b0f326e8e4f2b97d'),
        description?: string(name='Description', description='The description of the backend service.', example='testDvs 1'),
        gmtCreate?: string(name='GmtCreate', description='The time when the backend service was created.', example='2021-12-20T03:22:03.000+0000'),
        gmtModified?: string(name='GmtModified', description='The time when the backend service was modified.', example='2021-12-20T03:22:03.000+0000'),
        stageModeId?: string(name='StageModeId', description='The ID of the environment.', example='6fc978bb63574146b766863dd7bdf661'),
        stageName?: string(name='StageName', description='The environment name.', example='RELEASE'),
      }
    ](name='BackendModels', description='The configurations of the backend service in the environment.'),
    backendName?: string(name='BackendName', description='The name of the backend service.', example='testoss2'),
    backendType?: string(name='BackendType', description='The type of the backend service.', example='HTTP'),
    createdTime?: string(name='CreatedTime', description='The time when the backend service was created.', example='2021-11-22T11:10:46+08:00'),
    description?: string(name='Description', description='The description of the backend service.', example='add'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the backend service was modified.', example='2017-12-11T15:18:09+08:00'),
  }(name='BackendInfo', description='The information about the backend service.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AA90E87-3506-5AA6-AFFB-A4D53B4F6231'),
}

model DescribeBackendInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackendInfoResponseBody(name='body'),
}

async function describeBackendInfo(request: DescribeBackendInfoRequest): DescribeBackendInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackendInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackendListRequest {
  backendName?: string(name='BackendName', description='The name of the backend service. You can use \\* to perform fuzzy queries.', example='test', position='Query'),
  backendType?: string(name='BackendType', description='The type of the backend service.', example='HTTP', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the current page.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeBackendListResponseBody = {
  backendInfoList?: [ 
    {
      backendId?: string(name='BackendId', description='The ID of the backend service.', example='35bd31d32c9c425ebbe9330db9f8c375'),
      backendName?: string(name='BackendName', description='The name of the backend service.', example='test'),
      backendType?: string(name='BackendType', description='The type of the backend service.', example='HTTP'),
      createdTime?: string(name='CreatedTime', description='The time when the backend service was created.', example='2022-01-25T11:22:29Z'),
      description?: string(name='Description', description='The description of the backend service.', example='test'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the backend service was modified.', example='2022-01-25T11:22:29Z'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='BackendInfoList', description='The backend services.'),
  pageNumber?: int32(name='PageNumber', description='The number of the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='090A0DF9-9144-5236-8CBA-E18DE317722D'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeBackendListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackendListResponseBody(name='body'),
}

async function describeBackendList(request: DescribeBackendListRequest): DescribeBackendListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackendList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetInfoRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='a25a6589b2584ff490e891cc********', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDatasetInfoResponseBody = {
  datasetInfo?: {
    createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the dataset.', example='2022-09-21T12:58:43Z'),
    datasetId?: string(name='DatasetId', description='The ID of the dataset.', example='62b91a790a693238********'),
    datasetName?: string(name='DatasetName', description='The name of the dataset.', example='DatasetName'),
    datasetType?: string(name='DatasetType', description='The type of the dataset. Valid values:

*   JWT_BLOCKING: a JSON Web Token (JWT) blacklist
*   IP_WHITELIST_CIDR : an IP address whitelist
*   PARAMETER_ACCESS : parameter-based access control', example='JWT_BLOCKING'),
    modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the dataset.', example='2022-09-21T12:58:43Z'),
  }(name='DatasetInfo'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A2C8F75E-EE84-5C64-960F-45C8********'),
}

model DescribeDatasetInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDatasetInfoResponseBody(name='body'),
}

async function describeDatasetInfo(request: DescribeDatasetInfoRequest): DescribeDatasetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetItemInfoRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='62b91a790a693238********', position='Query'),
  datasetItemId?: string(name='DatasetItemId', description='The ID of the data entry.', example='5045****', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  value?: string(name='Value', description='The value of the data entry.', example='106.43.XXX.XXX', position='Query'),
}

model DescribeDatasetItemInfoResponseBody = {
  datasetItemInfo?: {
    createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the data entry.', example='2022-09-21T12:58:43Z'),
    datasetId?: string(name='DatasetId', description='The ID of the dataset.', example='626238665db4a5140eea3e40********'),
    datasetItemId?: string(name='DatasetItemId', description='The ID of the data entry.', example='5045****'),
    description?: string(name='Description', description='The description of the data entry.', example='Description'),
    expiredTime?: string(name='ExpiredTime', description='The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ** format. If this parameter is empty, the data entry does not expire.', example='2022-09-22T12:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the data entry.', example='2022-09-21T12:58:43Z'),
    value?: string(name='Value', description='The value of the data entry.', example='106.43.XXX.XXX'),
  }(name='DatasetItemInfo', description='The Dataset information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BAFA85F-38E3-5D9E-9E32-4B09********'),
}

model DescribeDatasetItemInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDatasetItemInfoResponseBody(name='body'),
}

async function describeDatasetItemInfo(request: DescribeDatasetItemInfoRequest): DescribeDatasetItemInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetItemInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetItemListRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='602e1f6b3543200eaab0a89e********', position='Query'),
  datasetItemIds?: string(name='DatasetItemIds', description='The ID of the data entry. You can enter multiple IDs. Separate them with commas (,).', example='5045****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDatasetItemListResponseBody = {
  datasetItemInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the data entry was created.', example='2022-09-21T12:58:43Z'),
      datasetId?: string(name='DatasetId', description='The ID of the dataset.', example='4add6a61804e47858266883e********'),
      datasetItemId?: string(name='DatasetItemId', description='The ID of the data entry.', example='5045****'),
      description?: string(name='Description', description='The description of the data entry.', example='Description'),
      expiredTime?: string(name='ExpiredTime', description='The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ** format. If this parameter is empty, the data entry does not expire.', example='2022-09-22T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the data entry.', example='2022-09-21T12:58:43Z'),
      value?: string(name='Value', description='The value of the data entry.', example='106.43.XXX.XXX'),
    }
  ](name='DatasetItemInfoList', description='The Dataset information.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C6E9C6E4-608B-5C0F-9783-E288********'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeDatasetItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDatasetItemListResponseBody(name='body'),
}

async function describeDatasetItemList(request: DescribeDatasetItemListRequest): DescribeDatasetItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetItemList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetListRequest {
  datasetIds?: string(name='DatasetIds', description='The IDs of the datasets.', example='4add6a61804e47858266883e********', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='env'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', position='Query'),
}

model DescribeDatasetListResponseBody = {
  datasetInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the dataset was created. The time is displayed in UTC.', example='2022-09-21T12:58:43Z'),
      datasetId?: string(name='DatasetId', description='The dataset ID.', example='6304ce6b4ae6453f********'),
      datasetName?: string(name='DatasetName', description='The dataset name.', example='DatasetName'),
      datasetType?: string(name='DatasetType', description='The dataset type. Valid values:

*   JWT_BLOCKING : a JSON Web Token (JWT) blacklist
*   IP_WHITELIST_CIDR : an IP address whitelist
*   PARAMETER_ACCESS: a list of parameters for parameter-based access control', example='IP_WHITELIST_CIDR'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the dataset was last modified. The time is displayed in UTC.', example='2022-09-21T12:58:43Z'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='ENV'),
          value?: string(name='Value', description='The tag value.', example='123'),
        }
      ](name='Tags', description='The tags of the dataset.'),
    }
  ](name='DatasetInfoList', description='The returned dataset information. It is an array consisting of datasetinfo.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D403C6E6-21B3-5B78-82DA-E3B6********'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeDatasetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDatasetListResponseBody(name='body'),
}

async function describeDatasetList(request: DescribeDatasetListRequest): DescribeDatasetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployApiTaskRequest {
  operationUid: string(name='OperationUid', description='The task ID.', example='51524fb8f12846d694d0a1de9a0cf274', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDeployApiTaskResponseBody = {
  deployedResults?: {
    deployedResult?: [ 
    {
      apiUid?: string(name='ApiUid', description='The ID of the API.', example='0433c1cd84724923b7a4f9ca1cfc249c'),
      deployedStatus?: string(name='DeployedStatus', description='The deployment status of the API.', example='OVER'),
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Success. Request Success.'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='e8da6f6346184da9a30d0dc1888b1f3b'),
      stageName?: string(name='StageName', description='The runtime environment of the API. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
    }
  ](name='DeployedResult')
  }(name='DeployedResults', description='The returned result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA4B3261-F14A-5E33-8608-F75A1DF27AD4'),
}

model DescribeDeployApiTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployApiTaskResponseBody(name='body'),
}

async function describeDeployApiTask(request: DescribeDeployApiTaskRequest): DescribeDeployApiTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployApiTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='ab7c95a01a7e42f28718f34497bbf47c', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='81750604ccff48c48f34d6c0165e09db', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE: the pre-release environment**
*   **TEST**', example='RELEASE', position='Query'),
}

model DescribeDeployedApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The signature method used by the client. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='4eed13a57d4e42fbb51316be8a5329ff'),
  apiName?: string(name='ApiName', description='The name of the API', example='weather'),
  authType?: string(name='AuthType', description='The security authentication method of the API. Valid values:

*   **APP: Only authorized applications can call the API.**

*   **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.', example='APP'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The constant value.', example='constance'),
      description?: string(name='Description', description='The description.', example='123'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='The constant parameters.'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='Example', example='192.168.1.1'),
      description?: string(name='Description', description='The description.', example='123'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the custom system parameter.', example='appid'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='The custom system parameters.'),
  deployedTime?: string(name='DeployedTime', description='The deployment time. Format: yyyy-mm-ddhh:mm:ss.', example='2022-07-25T17:47:51Z'),
  description?: string(name='Description', description='The description.', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to set DisableInternet to **true** to limit API calls to within the VPC.
*   If you set DisableInternet to **false**, the limit is lifted.

>  If you do not set this parameter, the original value is not modified.', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The error code.', example='Error'),
      description?: string(name='Description', description='The description.', example='Description'),
      message?: string(name='Message', description='The error message.', example='error message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.

For more information, see [ErrorCodeSample](~~44392~~).'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='bc77f5b49c974437a9912ea3755cd834'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='Weather'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The name of the parameter that corresponds to the token.', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='The configuration of OpenID Connect authentication. Valid values:

*   **IDTOKEN: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.**
*   **BUSINESS: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The public key of the API.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='The configuration items of the third-party OpenID Connect authentication method.'),
  regionId?: string(name='RegionId', description='The region to which the API group belongs.', example='cn-beijing'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the RequestMode parameter is set to MAPPING.

The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The body model.', example='https://apigateway.aliyun.com/models/3a240a127dccXXXXXXXX947b4095/9e2df550e85b4121a79XXXXXxaab'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='Configuration items of API requests sent by the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The name of the API parameter.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The default value.', example='20'),
      demoValue?: string(name='DemoValue', description='Example', example='20'),
      description?: string(name='Description', description='Description', example='parameter description'),
      docOrder?: int32(name='DocOrder', description='The order in the document.', example='0'),
      docShow?: string(name='DocShow', description='Specifies whether the document is public. Valid values: PUBLIC and PRIVATE.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values that can be entered when ParameterType is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='JSON scheme', example='{}'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum parameter length when ParameterType is set to String.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum parameter value when ParameterType is set to Int, Long, Float, or Double.', example='123456'),
      minLength?: long(name='MinLength', description='The minimum parameter length when ParameterType is set to String.', example='123456'),
      minValue?: long(name='MinValue', description='The minimum parameter value when ParameterType is set to Int, Long, Float, or Double.', example='123456'),
      parameterType?: string(name='ParameterType', description='The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression used for parameter validation when ParameterType is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required. Valid values: REQUIRED and OPTIONAL.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).'),
  resultBodyModel?: string(name='ResultBodyModel', description='The return description of the API.', example='{}'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', description='The description.', example='result description'),
      hasChild?: boolean(name='HasChild', description='Specifies whether a subnode exists.', example='false'),
      id?: string(name='Id', description='The ID of the result.', example='id'),
      key?: string(name='Key', description='The primary key of the result.', example='DEMO'),
      mandatory?: boolean(name='Mandatory', description='Specifies whether the parameter is required.', example='true'),
      name?: string(name='Name', description='The name of the result.', example='fwqf'),
      pid?: string(name='Pid', description='The ID of the parent node.', example='pid'),
      type?: string(name='Type', description='The type of the result.', example='String'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions', description='The return description of the API.'),
  resultSample?: string(name='ResultSample', description='The sample response from the backend service.', example='{code: 200, message:\\"success\\", data: \\"\\"}'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.', example='HTML'),
  serviceConfig?: {
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT: the default header type in API Gateway.**
*   **CUSTOM: a custom header type.**
*   **CLIENT: the ContentType header type of the client.', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The root path of Function Compute.', example='https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/'),
      fcType?: string(name='FcType', description='The type of the Function Compute instance.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='The function name defined in Function Compute.', example='domain_business_control'),
      method?: string(name='Method', description='The request method.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='The backend only receives the service path.', example='false'),
      path?: string(name='Path', description='The API request path.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The alias of the function.', example='2'),
      regionId?: string(name='RegionId', description='The region where the API is located.', example='cn-beijing'),
      roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The service name defined in Function Compute.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='Backend configuration items when the backend service is Function Compute'),
    mock?: string(name='Mock', description='Specifies whether to enable the Mock mode. Valid values:

*   **TRUE: The Mock mode is enabled.**
*   **FALSE: The Mock mode is not enabled.', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The name of the HTTP header parameter.', example='Content-Type'),
        headerValue?: string(name='HeaderValue', description='The value of the HTTP header parameter.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The simulated Headers.'),
    mockResult?: string(name='MockResult', description='The result returned when the Mock mode is enabled.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='The status code returned for service mocking.', example='200'),
    serviceAddress?: string(name='ServiceAddress', description='The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    servicePath?: string(name='ServicePath', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The backend service protocol. Currently, only HTTP, HTTPS, and FunctionCompute are supported.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service, in millisecond.', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='Specifies whether to enable the VPC channel. Valid values:

*   **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
*   **FALSE**: The VPC channel is not enabled.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='The IDs of the ELB and SLB instances in the VPC.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='The name of the VPC access authorization.', example='glmall-app-test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='8080'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeafsc3fygk1***'),
    }(name='VpcConfig', description='Configuration items related to VPC channels'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf6kg9x8sx2tbxxxx'),
  }(name='ServiceConfig', description='The configuration items of API requests sent by API Gateway to the backend service.

For more information, see [ServiceConfig](~~43987~~).'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The data type of the back-end service parameter.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The name of the front-end input parameter.', example='sex'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='sex'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE: the pre-release environment**
*   **TEST**', example='RELEASE'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='Examples', example='192.168.1.1'),
      description?: string(name='Description', description='The description.', example='QueryParamDTO'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='System parameters'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.**
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
}

model DescribeDeployedApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='c076144d7878437b8f82fb85890ce6a0', position='Query'),
  apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='POST', position='Query'),
  apiName?: string(name='ApiName', description='The name of the API. The name is used for fuzzy match.', example='weather', position='Query'),
  apiPath?: string(name='ApiPath', description='The request path of the API.', example='/st4', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='Specifies whether to enable tag verification.', example='true', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='63be9002440b4778a61122f14c2b2bbb', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='appname'),
      value?: string(name='Value', description='The tag value.', example='testapp'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model DescribeDeployedApisResponseBody = {
  deployedApis?: {
    deployedApiItem?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='c076144d7878437b8f82fb85890ce6a0'),
      apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='POST'),
      apiName?: string(name='ApiName', description='The API name.', example='DescribeObjects'),
      apiPath?: string(name='ApiPath', description='The request path of the API.', example='/trademark/search'),
      deployedTime?: string(name='DeployedTime', description='The time when the API was published. The time is displayed in UTC.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The API description.', example='Queries objects by page'),
      groupId?: string(name='GroupId', description='The API group ID.', example='63be9002440b4778a61122f14c2b2bbb'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='myGroup3'),
      regionId?: string(name='RegionId', description='The region ID of the API.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The environment name. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**', example='PUBLIC'),
    }
  ](name='DeployedApiItem')
  }(name='DeployedApis', description='The returned API information. It is an array consisting of DeployedApiItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ002'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeDeployedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployedApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  *
 */
async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRequest {
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group. An API group ID is generated by the system and is globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDomainResponseBody = {
  certificateBody?: string(name='CertificateBody', description='The certificate content.', example='xxx'),
  certificateId?: string(name='CertificateId', description='The unique ID of the SSL certificate, which is automatically generated by the system.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  certificateName?: string(name='CertificateName', description='The SSL certificate name.', example='myCertificate'),
  certificatePrivateKey?: string(name='CertificatePrivateKey', description='The private key of the SSL certificate.', example='xxx'),
  certificateValidEnd?: long(name='CertificateValidEnd', description='The time when the certificate expires. The value is a timestamp. Unit: milliseconds.', example='1704038400000'),
  certificateValidStart?: long(name='CertificateValidStart', description='The time when the certificate takes effect. The value is a timestamp. Unit: milliseconds.', example='1672502400000'),
  domainBindingStatus?: string(name='DomainBindingStatus', description='The binding status of the custom domain name. Valid values:

*   BINDING: The domain name is bound to the API group.
*   BOUND: The domain name is not bound to the API group.', example='BINDING'),
  domainCNAMEStatus?: string(name='DomainCNAMEStatus', description='The domain name resolution status. Valid values:

*   RESOLVED: The domain name has been resolved.
*   UNRESOLVED: The domain name has not been resolved.', example='RESOLVED'),
  domainLegalStatus?: string(name='DomainLegalStatus', description='The validity status of the domain name. Valid values:

*   NORMAL
*   ABNORMAL: This status affects API calls and must be rectified as soon as possible.', example='NORMAL'),
  domainName?: string(name='DomainName', description='The custom domain name.', example='api.demo.com'),
  domainRemark?: string(name='DomainRemark', description='Remarks about the domain name, such as the cause of an exception.', example='The status of the domain name that uses WebSocket.'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus', description='The status of the domain name that uses WebSocket.', example='NORMAL'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015'),
  requestId?: string(name='RequestId', description='The request ID.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  subDomain?: string(name='SubDomain', description='The second-level domain name that is automatically assigned to the API group.', example='xxx-cn-hangzhou.alicloudapi.com'),
}

model DescribeDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDomainResponseBody(name='body'),
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupLatencyRequest {
  endTime: string(name='EndTime', description='The end time of the time range to query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.', example='2023-04-14T06:26:14Z', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='d825094fdd114a869f5adb443d9b7ead', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which you want to perform the query. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time of the time range to query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.', example='2023-03-30T16:00:00Z', position='Query'),
}

model DescribeGroupLatencyResponseBody = {
  latencyPacket?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   latency: the backend processing latency
*   gatewayLatency: the API Gateway processing latency', example='latency'),
      itemTime?: string(name='ItemTime', description='The point in time when the latency data was collected. The format is YYYY-MM-DDThh:mm:ssZ.', example='2023-03-30T16:10:00Z'),
      itemValue?: string(name='ItemValue', description='The latency. Unit: ms.', example='100.0'),
    }
  ](name='MonitorItem')
  }(name='LatencyPacket', description='The latency information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='75DC3AB0-421C-5371-8170-86AEABF77AD0'),
}

model DescribeGroupLatencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupLatencyResponseBody(name='body'),
}

async function describeGroupLatency(request: DescribeGroupLatencyRequest): DescribeGroupLatencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupLatency', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupQpsRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-08-23T07:27:44Z', position='Query'),
  groupId: string(name='GroupId', description='The API group ID.', example='264c60db9f764345a13ac5c825b229b9', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment to which the API group is published. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-08-12T06:09:52Z', position='Query'),
}

model DescribeGroupQpsResponseBody = {
  groupQps?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The point in time.', example='2023-08-02T09:15:00Z'),
      itemValue?: string(name='ItemValue', description='The number of requests at the specified point in time.', example='17'),
    }
  ](name='MonitorItem')
  }(name='GroupQps', description='The number of requests directed to the API group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model DescribeGroupQpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupQpsResponseBody(name='body'),
}

async function describeGroupQps(request: DescribeGroupQpsRequest): DescribeGroupQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupTrafficRequest {
  endTime: string(name='EndTime', description='The end time for the query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.', example='2023-06-16T02:16:53Z', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='16df9d11caa04900bcafe23b38a81600', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment to which the APIs in the API group are published. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the staging environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time for the query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.', example='2023-01-29T01:27:43Z', position='Query'),
}

model DescribeGroupTrafficResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  trafficPerSecond?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   inbound: traffic consumed by requests
*   outbound: traffic consumed by responses', example='inbound'),
      itemTime?: string(name='ItemTime', description='The corresponding time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.', example='2023-01-29T01:30:00Z'),
      itemValue?: string(name='ItemValue', description='The traffic volume per second.', example='100.0'),
    }
  ](name='MonitorItem')
  }(name='TrafficPerSecond', description='The traffic information per second.'),
}

model DescribeGroupTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupTrafficResponseBody(name='body'),
}

async function describeGroupTraffic(request: DescribeGroupTrafficRequest): DescribeGroupTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryApisRequest {
  apiId?: string(name='ApiId', example='a12068f555964ca8a0c9c33288f1e5a7', position='Query'),
  apiName?: string(name='ApiName', example='getPersonInfo', position='Query'),
  groupId: string(name='GroupId', example='0ccb66aadb5345b78a40f57d192d8aa4', position='Query'),
  pageNumber?: string(name='PageNumber', example='2', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', example='RELEASE', position='Query'),
}

model DescribeHistoryApisResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiName?: string(name='ApiName', example='v2_role_assign'),
      deployedTime?: string(name='DeployedTime', example='2016-07-20T08:28:48Z'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', example='myGroup2'),
      historyVersion?: string(name='HistoryVersion', example='20210915101416294'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
      stageAlias?: string(name='StageAlias'),
      stageName?: string(name='StageName', example='RELEASE'),
      status?: string(name='Status', example='ONLINE'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeHistoryApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImportOASTaskRequest {
  operationId: string(name='OperationId', description='The ID of the asynchronous API import task that was generated during the import operation. This ID is used to query the execution status of the API import task.', example='4c53ccf1d40c489686d1adf5c2644a7f', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeImportOASTaskResponseBody = {
  apiResults?: {
    apiResult?: [ 
    {
      apiId?: string(name='ApiId', example='c5a0c2900ff746b789c007545be22fb8'),
      apiName?: string(name='ApiName', example='GetByCreatorIdUsingGET'),
      description?: string(name='Description'),
      errorMessage?: string(name='ErrorMessage', example='Internal Error'),
      groupId?: string(name='GroupId', example='736508d885074167ba8fbce3bc95ea0b'),
      method?: string(name='Method', example='GET'),
      path?: string(name='Path', example='/creator/getByCreatorId'),
      updateStatus?: string(name='UpdateStatus', example='WAIT'),
    }
  ](name='ApiResult')
  }(name='ApiResults', description='The execution status of the subtask. Valid values:

*   RUNNING
*   WAIT
*   OVER
*   FAIL
*   CANCEL'),
  modelResults?: {
    modelResult?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='Internal Error'),
      groupId?: string(name='GroupId', example='736508d885074167ba8fbce3bc95ea0b'),
      modelId?: string(name='ModelId', example='6b48d724c921415486e190c494dd6bf8'),
      modelName?: string(name='ModelName', example='Pet'),
      updateStatus?: string(name='UpdateStatus', example='FAIL'),
    }
  ](name='ModelResult')
  }(name='ModelResults', description='The execution status of the subtask. Valid values:

*   RUNNING
*   WAIT
*   OVER
*   FAIL
*   CANCEL'),
  requestId?: string(name='RequestId', description='The request ID.', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
  taskStatus?: string(name='TaskStatus', description='The status of the import task. Valid values:

*   Running
*   Finished', example='Finished'),
}

model DescribeImportOASTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImportOASTaskResponseBody(name='body'),
}

async function describeImportOASTask(request: DescribeImportOASTaskRequest): DescribeImportOASTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImportOASTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceDropConnectionsRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T07:00:09Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the dedicated instance.', example='apigateway-cn-n6w1v1234501', position='Query'),
  sbcName: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T06:00:09Z', position='Query'),
}

model DescribeInstanceDropConnectionsResponseBody = {
  instanceDropConnections?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T01:11:00Z'),
      itemValue?: string(name='ItemValue', description='The number of dropped packets in the instance.', example='0.0'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropConnections', description='The list of dropped connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DescribeInstanceDropConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceDropConnectionsResponseBody(name='body'),
}

async function describeInstanceDropConnections(request: DescribeInstanceDropConnectionsRequest): DescribeInstanceDropConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceDropConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceDropPacketRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-12-16T02:04:36Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v641b9dxc00p', position='Query'),
  sbcName: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T04:00:36Z', position='Query'),
}

model DescribeInstanceDropPacketResponseBody = {
  instanceDropPacket?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstanceDropPacketRX: the number of inbound packets dropped in the instance per second.
*   InstanceDropPacketTX: the number of outbound packets dropped in the instance per second.', example='InstanceDropPacketRX'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T04:00:36Z'),
      itemValue?: string(name='ItemValue', description='The number of dropped packets in the instance.', example='0.0'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropPacket', description='The list of dropped packets in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeInstanceDropPacketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceDropPacketResponseBody(name='body'),
}

async function describeInstanceDropPacket(request: DescribeInstanceDropPacketRequest): DescribeInstanceDropPacketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceDropPacket', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceHttpCodeRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-07-21T06:05:52Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-m7r227yy2004', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-14T02:12:10Z', position='Query'),
}

model DescribeInstanceHttpCodeResponseBody = {
  instanceHttpCode?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The HTTP status code returned.', example='404'),
      itemValue?: string(name='ItemValue', description='The corresponding value.', example='1'),
    }
  ](name='MonitorItem')
  }(name='InstanceHttpCode', description='The HTTP status codes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DescribeInstanceHttpCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceHttpCodeResponseBody(name='body'),
}

async function describeInstanceHttpCode(request: DescribeInstanceHttpCodeRequest): DescribeInstanceHttpCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceHttpCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceLatencyRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T02:05:13Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v641jf5tt01v', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T11:07:05Z', position='Query'),
}

model DescribeInstanceLatencyResponseBody = {
  instanceLatency?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   gatewayLatency API: the processing latency of API Gateway
*   latency: the processing latency of the backend service.', example='latency'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T02:05:13Z'),
      itemValue?: string(name='ItemValue', description='The value of the average latency.', example='10'),
    }
  ](name='MonitorItem')
  }(name='InstanceLatency', description='The list of average latencies in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceLatencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceLatencyResponseBody(name='body'),
}

async function describeInstanceLatency(request: DescribeInstanceLatencyRequest): DescribeInstanceLatencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceLatency', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceNewConnectionsRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-08T02:08:00Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001', position='Query'),
  sbcName: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-01T02:08:00Z', position='Query'),
}

model DescribeInstanceNewConnectionsResponseBody = {
  instanceNewConnections?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-08T02:08:00Z'),
      itemValue?: string(name='ItemValue', description='The number of new connections in the instance.', example='16'),
    }
  ](name='MonitorItem')
  }(name='InstanceNewConnections', description='The list of new connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceNewConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceNewConnectionsResponseBody(name='body'),
}

async function describeInstanceNewConnections(request: DescribeInstanceNewConnectionsRequest): DescribeInstanceNewConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceNewConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancePacketsRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-24T10:14:53Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001', position='Query'),
  sbcName: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-18T01:14:26Z', position='Query'),
}

model DescribeInstancePacketsResponseBody = {
  instancePackets?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstancePacketRX: inbound data packets
*   InstancePacketTX: outbound data packets', example='InstancePacketRX'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-24T10:14:53Z'),
      itemValue?: string(name='ItemValue', description='The number of inbound and outbound data packets in the instance.', example='0'),
    }
  ](name='MonitorItem')
  }(name='InstancePackets', description='The list of inbound and outbound data packets in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstancePacketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancePacketsResponseBody(name='body'),
}

async function describeInstancePackets(request: DescribeInstancePacketsRequest): DescribeInstancePacketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstancePackets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceQpsRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-29T06:25:00Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-bj-6c219f1fd5d4', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-02-10T06:03:47Z', position='Query'),
}

model DescribeInstanceQpsResponseBody = {
  instanceQps?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-29T06:25:00Z'),
      itemValue?: string(name='ItemValue', description='The number of requests sent to the APIs in the instance.', example='500'),
    }
  ](name='MonitorItem')
  }(name='InstanceQps', description='The list of requests sent to the APIs in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceQpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceQpsResponseBody(name='body'),
}

async function describeInstanceQps(request: DescribeInstanceQpsRequest): DescribeInstanceQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSlbConnectRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T15:07:06Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-sz-1574cc7c5a31', position='Query'),
  sbcName: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-01T02:09:33Z', position='Query'),
}

model DescribeInstanceSlbConnectResponseBody = {
  instanceSlbConnect?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstanceMaxConnection: the maximum number of connections
*   InstanceInactiveConnection: the number of inactive connections
*   InstanceActiveConnection: the number of active connections', example='InstanceActiveConnection'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T15:07:06Z'),
      itemValue?: string(name='ItemValue', description='The number of concurrent connections in the instance.', example='12'),
    }
  ](name='MonitorItem')
  }(name='InstanceSlbConnect', description='The list of concurrent connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model DescribeInstanceSlbConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSlbConnectResponseBody(name='body'),
}

async function describeInstanceSlbConnect(request: DescribeInstanceSlbConnectRequest): DescribeInstanceSlbConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSlbConnect', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTrafficRequest {
  endTime: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-01T06:34:03Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which the API runs. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST: the test environment**', example='RELEASE', position='Query'),
  startTime: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-31T03:42:00Z', position='Query'),
}

model DescribeInstanceTrafficResponseBody = {
  instanceTraffic?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   inbound: traffic consumed by requests
*   outbound: traffic consumed by responses', example='inbound'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-01T06:34:03Z'),
      itemValue?: string(name='ItemValue', description='The amount of traffic consumed by the requests and responses in the instance.', example='10'),
    }
  ](name='MonitorItem')
  }(name='InstanceTraffic', description='The traffic consumed by the requests and responses in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTrafficResponseBody(name='body'),
}

async function describeInstanceTraffic(request: DescribeInstanceTrafficRequest): DescribeInstanceTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  enableTagAuthorization?: boolean(name='EnableTagAuthorization', example='false', position='Query'),
  instanceId?: string(name='InstanceId', example='api-shared-vpc-001', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instanceAttribute?: [ 
    {
      aclId?: string(name='AclId', example='acl-uf6f9zfxfxtp5j9ng3yv4'),
      aclName?: string(name='AclName', example='test'),
      aclStatus?: string(name='AclStatus', example='on'),
      aclType?: string(name='AclType', example='white'),
      classicEgressAddress?: string(name='ClassicEgressAddress', example='10.0.0.1'),
      connectCidrBlocks?: string(name='ConnectCidrBlocks'),
      connectVpcId?: string(name='ConnectVpcId', description='VPC融合类型专享实例联通的用户VPC ID', example='vpc-m5eo7khlb4h4f8y9egsdg'),
      createdTime?: string(name='CreatedTime', example='2021-10-22 15:36:53.0'),
      dedicatedInstanceType?: string(name='DedicatedInstanceType', description='专享实例类型
- vpc_connect：VPC融合类型专享实例
- normal：传统类型专享实例', example='vpc_connect'),
      egressIpv6Enable?: boolean(name='EgressIpv6Enable', example='true'),
      expiredTime?: string(name='ExpiredTime', example='1659801600000'),
      httpsPolicies?: string(name='HttpsPolicies', example='HTTPS2_TLS1_2'),
      IPV6AclId?: string(name='IPV6AclId', example='acl-124resFfs235'),
      IPV6AclName?: string(name='IPV6AclName', example='testIPV6'),
      IPV6AclStatus?: string(name='IPV6AclStatus', example='on'),
      IPV6AclType?: string(name='IPV6AclType', example='black'),
      instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
      instanceCidrBlock?: string(name='InstanceCidrBlock', description='专享实例所在网段
- 172.16.0.0/12
- 192.168.0.0/16', example='192.168.0.0/16'),
      instanceClusterId?: string(name='InstanceClusterId'),
      instanceId?: string(name='InstanceId', example='api-shared-vpc-020'),
      instanceName?: string(name='InstanceName', example='test'),
      instanceRpsLimit?: int32(name='InstanceRpsLimit', example='500'),
      instanceSpec?: string(name='InstanceSpec', example='api.s1.small'),
      instanceSpecAttributes?: {
        specAttribute?: [ 
        {
          localName?: string(name='LocalName'),
          value?: string(name='Value', example='2500'),
        }
      ](name='SpecAttribute')
      }(name='InstanceSpecAttributes'),
      instanceType?: string(name='InstanceType', example='VPC_SHARED'),
      internetEgressAddress?: string(name='InternetEgressAddress', example='47.241.89.244'),
      intranetSegments?: string(name='IntranetSegments'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      networkInterfaceAttributes?: {
        networkInterfaceAttribute?: [ 
        {
          cidrBlock?: string(name='CidrBlock', description='vSwitch的网段。', example='192.168.17.0/24'),
          securityGroupId?: string(name='SecurityGroupId', description='安全组的ID，同一个安全组内的服务可以互相访问。', example='sg-2zeehz13zcyj1kfk3o85'),
          vswitchId?: string(name='VswitchId', description='虚拟交换机ID', example='vsw-2zeqals6rbj51bhjn8b89'),
          zoneId?: string(name='ZoneId', description='可用区ID', example='cn-shenzhen-d'),
        }
      ](name='NetworkInterfaceAttribute')
      }(name='NetworkInterfaceAttributes', description='VPC融合类型专享实例连通的用户VPC内的网络信息'),
      privateDnsList?: {
        privateDns?: [ string ](name='PrivateDns')
      }(name='PrivateDnsList'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      status?: string(name='Status', example='RUNNING'),
      supportIpv6?: boolean(name='SupportIpv6', example='true'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
      userVpcId?: string(name='UserVpcId', example='vpc-t***hx****yu9****t0g4'),
      userVswitchId?: string(name='UserVswitchId', example='vsw-t4***eh****d7q****i2f'),
      vpcEgressAddress?: string(name='VpcEgressAddress', example='100.104.254.0/26'),
      vpcIntranetEnable?: boolean(name='VpcIntranetEnable', example='true'),
      vpcOwnerId?: long(name='VpcOwnerId'),
      vpcSlbIntranetEnable?: boolean(name='VpcSlbIntranetEnable', example='true'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-MAZ5(g,h)'),
      zoneLocalName?: string(name='ZoneLocalName'),
    }
  ](name='InstanceAttribute')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlPolicyItemsRequest {
  ipControlId?: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  policyItemId?: string(name='PolicyItemId', description='The ID of the policy.', example='P151617000829241', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlPolicyItemsResponseBody = {
  ipControlPolicyItems?: {
    ipControlPolicyItem?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application.', example='11112'),
      cidrIp?: string(name='CidrIp', description='The IP addresses or CIDR blocks.', example='113.125.XX.XX;101.11.XX.XX'),
      createTime?: string(name='CreateTime', description='The time when the policy was created. The time is displayed in UTC.', example='2018-01-17T06:20:08Z'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the policy was modified. The time is displayed in UTC.', example='2018-01-17T06:25:13Z'),
      policyItemId?: string(name='PolicyItemId', description='The ID of the policy.', example='P151617000829241'),
    }
  ](name='IpControlPolicyItem')
  }(name='IpControlPolicyItems', description='The information about policies. The information is an array of IpControlPolicyItem data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeIpControlPolicyItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpControlPolicyItemsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   You can filter the query results by policy ID.
  *
 */
async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControlPolicyItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlsRequest {
  ipControlId?: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  ipControlName?: string(name='IpControlName', description='The name of the ACL.', example='ACL test', position='Query'),
  ipControlType?: string(name='IpControlType', description='The type of the ACL. Valid values:

*   **ALLOW**: a whitelist
*   **REFUSE**: a blacklist', example='ALLOW', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlsResponseBody = {
  ipControlInfos?: {
    ipControlInfo?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the ACL was created. The time is displayed in UTC.', example='2018-01-17T05:48:11Z'),
      description?: string(name='Description', description='The description of the ACL.', example='description'),
      ipControlId?: string(name='IpControlId', description='The ID of the ACL.', example='7ea91319a34d48a09b5c9c871d9768b1'),
      ipControlName?: string(name='IpControlName', description='The name of the ACL.', example='testControl11'),
      ipControlType?: string(name='IpControlType', description='The type of the ACL.', example='ALLOW'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the ACL was modified. The time is displayed in UTC.', example='2018-01-17T06:00:38Z'),
      regionId?: string(name='RegionId', description='The ID of the region in which the ACL is deployed.', example='cn-qingdao'),
    }
  ](name='IpControlInfo')
  }(name='IpControlInfos', description='The information about the ACL. The information is an array that consists of IpControlInfo data. The information does not include specific policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeIpControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpControlsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   This operation is used to query the ACLs in a region. Region is a system parameter.
  * *   You can filter the query results by ACL ID, name, or type.
  * *   This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~DescribeIpControlPolicyItems~~) operation.
  *
 */
async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', example='PROVIDER', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLogConfigResponseBody = {
  logInfos?: {
    logInfo?: [ 
    {
      logType?: string(name='LogType', example='PROVIDER'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      slsLogStore?: string(name='SlsLogStore', example='slsstore'),
      slsProject?: string(name='SlsProject', example='slsproject'),
    }
  ](name='LogInfo')
  }(name='LogInfos'),
  requestId?: string(name='RequestId', example='E3BC2706-ABDB-5B64-A12F-08DFD9E3F339'),
}

model DescribeLogConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLogConfigResponseBody(name='body'),
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMarketRemainsQuotaRequest {
  domainName: string(name='DomainName', description='The custom domain name.', example='*.demo.com', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeMarketRemainsQuotaResponseBody = {
  remainsQuota?: long(name='RemainsQuota', description='The remaining quota.', example='1000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model DescribeMarketRemainsQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMarketRemainsQuotaResponseBody(name='body'),
}

async function describeMarketRemainsQuota(request: DescribeMarketRemainsQuotaRequest): DescribeMarketRemainsQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMarketRemainsQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModelsRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='30e792398d6c4569b04c0e53a3494381', position='Query'),
  modelId?: string(name='ModelId', description='The ID of the model.', example='123', position='Query'),
  modelName?: string(name='ModelName', description='The name of the model.', example='Test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeModelsResponseBody = {
  modelDetails?: {
    modelDetail?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the model was created.', example='2019-01-29T11:07:48Z'),
      description?: string(name='Description', description='The definition of the model description.', example='Model Description'),
      groupId?: string(name='GroupId', description='The ID of the API group to which the model belongs.', example='30e792398d6c4569b04c0e53a3494381'),
      modelId?: string(name='ModelId', description='The ID of the model.', example='766c0b9538a04bdf974953b5576783ba'),
      modelName?: string(name='ModelName', description='The name of the model.', example='Test'),
      modelRef?: string(name='ModelRef', description='The URI of the model.', example='https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time of the model.', example='2019-01-29T11:07:48Z'),
      schema?: string(name='Schema', description='The definition of the model.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails', description='The returned information about models. It is an array consisting of ModelDetail data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40306469-2FB5-417A-B723-AF1F4A4FA204'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelsResponseBody(name='body'),
}

/**
  * *   Fuzzy queries are supported.
  *
 */
async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModels', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginApisRequest {
  apiId?: string(name='ApiId', example='c6b0dd188b0e4e408e12f926********', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', example='231a4bb81ee94da785733c29********', position='Query'),
  method?: string(name='Method', example='GET', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  path?: string(name='Path', example='/sendVerifyCode', position='Query'),
  pluginId: string(name='PluginId', example='bf6583efcef44c51adb00c4e********', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePluginApisResponseBody = {
  apiSummarys?: {
    apiPluginSummary?: [ 
    {
      apiId?: string(name='ApiId', example='accc8c68b7294b1cb4928741********'),
      apiName?: string(name='ApiName', example='fhosQueryDayOfStock_V2'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='5f51f89261854fd9ad5116be********'),
      groupName?: string(name='GroupName', example='myGroup2'),
      method?: string(name='Method', example='GET'),
      path?: string(name='Path', example='/mqTest'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stageAlias?: string(name='StageAlias'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='ApiPluginSummary')
  }(name='ApiSummarys'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F9C5C4A5-BC6C-57A3-839F-AB08********'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribePluginApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePluginApisResponseBody(name='body'),
}

async function describePluginApis(request: DescribePluginApisRequest): DescribePluginApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginSchemasRequest {
  language?: string(name='Language', example='en', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePluginSchemasResponseBody = {
  pluginSchemas?: {
    pluginSchema?: [ 
    {
      description?: string(name='Description', example='plugin scheme description'),
      documentId?: string(name='DocumentId', example='4107**'),
      name?: string(name='Name', example='VPC_C'),
      supportClassic?: boolean(name='SupportClassic', example='true'),
      title?: string(name='Title', example='plugin schema title'),
    }
  ](name='PluginSchema')
  }(name='PluginSchemas'),
  requestId?: string(name='RequestId', example='2D39D1B3-8548-508A-9CE2-7F4A3F2A7989'),
}

model DescribePluginSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePluginSchemasResponseBody(name='body'),
}

async function describePluginSchemas(request: DescribePluginSchemasRequest): DescribePluginSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginTemplatesRequest {
  language?: string(name='Language', description='The language that is used to return the description of the system policy. Valid values:

*   en: English
*   zh-CN: Chinese.
*   ja: Japanese', example='zh', position='Query'),
  pluginName?: string(name='PluginName', description='The name of the plug-in.', example='jwtAuth', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePluginTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  templates?: {
    template?: [ 
    {
      description?: string(name='Description', description='The description.', example='balabala'),
      documentAnchor?: string(name='DocumentAnchor', description='The document anchor point.', example='anchor'),
      documentId?: string(name='DocumentId', description='The ID of the document.', example='41079'),
      sample?: string(name='Sample', description='The sample.', example='1'),
      title?: string(name='Title', description='The title of the plug-in template title.', example='template title'),
    }
  ](name='Template')
  }(name='Templates', description='The templates.'),
}

model DescribePluginTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePluginTemplatesResponseBody(name='body'),
}

async function describePluginTemplates(request: DescribePluginTemplatesRequest): DescribePluginTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  pluginId?: string(name='PluginId', description='The ID of the plug-in.', example='a96926e82f994915a8da40a119374537', position='Query'),
  pluginName?: string(name='PluginName', description='The name of the plug-in.', example='testPlugin', position='Query'),
  pluginType?: string(name='PluginType', description='The business type of the plug-in.', example='cors', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

N can be an integer from 1 to 20.``', example='env'),
      value?: string(name='Value', description='The value of the tag.

N can be an integer from 1 to 20.``', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the lifecycle rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model DescribePluginsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the plug-in.', example='2019-01-11T09:29:58Z'),
      description?: string(name='Description', description='The plug-in description.', example='Throttling'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the plug-in.', example='2019-01-11T09:29:58Z'),
      pluginData?: string(name='PluginData', description='The definition statement of the plug-in.', example='{"unit":"MINUTE","apiDefault":20}'),
      pluginId?: string(name='PluginId', description='The ID of the plug-in.', example='9a3f1a5279434f2ba74ccd91c295af9f'),
      pluginName?: string(name='PluginName', description='The name of the plug-in.', example='firstPlugin'),
      pluginType?: string(name='PluginType', description='The type of the plug-in.', example='trafficControl'),
      regionId?: string(name='RegionId', description='The region where the plug-in is located.', example='cn-qingdao'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='testkey'),
          value?: string(name='Value', description='The value of the tag.', example='tetstvalue'),
        }
      ](name='TagInfo')
      }(name='Tags', description='The tags.'),
    }
  ](name='PluginAttribute')
  }(name='Plugins', description='The returned information about the plug-in. It is an array consisting of PluginAttribute data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46373DC4-19F1-4DC8-8C31-1107289BB5E0'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribePluginsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePluginsResponseBody(name='body'),
}

/**
  * *   This operation supports pagination.
  * *   This operation allows you to query plug-ins by business type.
  * *   This operation allows you to query plug-ins by ID.
  * *   This operation allows you to query plug-ins by name.
  *
 */
async function describePlugins(request: DescribePluginsRequest): DescribePluginsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlugins', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginsByApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='93f4ead4080c4b2da70b7f81f50ae459', position='Query'),
  groupId: string(name='GroupId', description='The ID of the group to which the API belongs.', example='3c7a38392e764718ad7673e7b7f535d4', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The environment in which the API is running. Valid values:

*   **RELEASE**: production
*   **PRE**: staging
*   **TEST**: test', example='RELEASE', position='Query'),
}

model DescribePluginsByApiResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the plug-in was created. The time is displayed in UTC.', example='2019-01-11T09:29:58Z'),
      description?: string(name='Description', description='The plug-in description.', example='Traffic throttling'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the plug-in was last modified. The time is displayed in UTC.', example='2019-01-11T09:29:58Z'),
      pluginData?: string(name='PluginData', description='The definition statement of the plug-in.', example='{\\"unit\\":\\"MINUTE\\",\\"apiDefault\\":20}'),
      pluginId?: string(name='PluginId', description='The plug-in ID.', example='9a3f1a5279434f2ba74ccd91c295af9f'),
      pluginName?: string(name='PluginName', description='The plug-in name.', example='firstPlugin'),
      pluginType?: string(name='PluginType', description='The plug-in type.', example='trafficControl'),
      regionId?: string(name='RegionId', description='The region where the plug-in resides.', example='cn-qingdao'),
    }
  ](name='PluginAttribute')
  }(name='Plugins', description='The plug-in information. The information is an array that consists of PluginAttribute data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46373DC4-19F1-4DC8-8C31-1107289BB5E0'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribePluginsByApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePluginsByApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   This operation supports pagination.
  *
 */
async function describePluginsByApi(request: DescribePluginsByApiRequest): DescribePluginsByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginsByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupRequest {
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='102b631ae1094e33a77c45312226184e', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupResponseBody = {
  description?: string(name='Description', description='The description of the API group.', example='api group description'),
  domains?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName', description='The domain name.', example='test_domain.com'),
    }
  ](name='DomainItem')
  }(name='Domains', description='The list of domain names.'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='48977d7b96074966a7c9c2a8872d7e06'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='Weather'),
  purchasedTime?: string(name='PurchasedTime', description='The time when the API group was purchased.', example='2021-12-19T00:00:00'),
  regionId?: string(name='RegionId', description='The region where the API group is located.', example='cn-qingdao'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
  status?: string(name='Status', description='The status of the API group.

*   **NORMAL**: The API group is normal.
*   **DELETE**: The API group is deleted.', example='NORMAL'),
}

model DescribePurchasedApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiGroupResponseBody(name='body'),
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='20', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='20'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType', description='The billing method.', example='POSTPAID'),
      description?: string(name='Description', description='The description of the API group.', example='1'),
      expireTime?: string(name='ExpireTime', description='The time when the API group expires.', example='2021-12-19T00:00:00'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='8e91f23f88f94348855b82c9a73209f3'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='group1'),
      invokeTimesMax?: long(name='InvokeTimesMax', description='The maximum number of calls.', example='10'),
      invokeTimesNow?: long(name='InvokeTimesNow', description='The current number of calls.', example='10'),
      purchasedTime?: string(name='PurchasedTime', description='The time when the API group was purchased.', example='2021-12-19T00:00:00'),
      regionId?: string(name='RegionId', description='The ID of the region where the API group is located.', example='cn-shanghai'),
      status?: string(name='Status', description='The status of the API group.

*   **NORMAL**: The API group is normal.
*   **DELETE**: The API group is deleted.', example='NORMAL'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes', description='The attributes of the API group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribePurchasedApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApisRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6', position='Query'),
  apiName?: string(name='ApiName', description='The name of the API.', example='Cz88IpQuery', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='d27ad517be5f4c95ac3631780a8f4d50', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='RELEASE', position='Query'),
  visibility?: string(name='Visibility', description='Specifies whether the API is public. Valid values:

*   **PUBLIC**: indicates that the API is public. If you set this parameter to PUBLIC, this API is displayed on the API List page in the console for all users after the API is published to the production environment.
*   **PRIVATE**: indicates that the API is private. If you set this parameter to PRIVATE, this API is not displayed in Alibaba Cloud Marketplace after the API group to which this API belongs is made available.', example='PUBLIC', position='Query'),
}

model DescribePurchasedApisResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  purchasedApis?: {
    purchasedApi?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='eb6e54c1576d41149746e8e69b0a0792'),
      apiName?: string(name='ApiName', description='The name of the API.', example='gw_rado_tissot_'),
      deployedTime?: string(name='DeployedTime', description='The deployment time. Format: yyyy-mm-ddhh:mm:ss.', example='2021-06-1113:57:38'),
      description?: string(name='Description', description='The description of the API.', example='test'),
      groupId?: string(name='GroupId', description='The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.', example='3013a55c0c44483f984d26df27120513'),
      groupName?: string(name='GroupName', description='The name of the API group.', example='DMS_DEFAULT_GROUP_408589'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the API.', example='2021-06-11T13:57:38+08:00'),
      purchasedTime?: string(name='PurchasedTime', description='The time when the API was purchased.', example='2021-06-11T13:57:38+08:00'),
      regionId?: string(name='RegionId', description='The ID of the region in which the API is located.', example='cn-hangzhou'),
      stageName?: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='TEST'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**', example='PUBLIC'),
    }
  ](name='PurchasedApi')
  }(name='PurchasedApis', description='The monitoring information about API call delays. The returned information is an array consisting of purchased APIs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribePurchasedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese', example='zh', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Shenzhen)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the service for the region.', example='apigateway.cn-shenzhen.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-shenzhen'),
    }
  ](name='Region')
  }(name='Regions', description='The returned region information. It is an array that consists of Region data.', example='cn-huhehaote'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * This operation queries regions in which API Gateway is available.
  * *   This operation is intended for API providers and callers.
  *
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSignaturesRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId?: string(name='SignatureId', description='The IDs of the keys to query.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  signatureName?: string(name='SignatureName', description='The names of the keys to query.', example='backendsignature', position='Query'),
}

model DescribeSignaturesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureInfos?: {
    signatureInfo?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The creation time of the key.', example='2016-07-23T08:28:48Z'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time of the key.', example='2016-07-24T08:28:48Z'),
      regionId?: string(name='RegionId', description='The region where the key is located.', example='cn-qingdao'),
      signatureId?: string(name='SignatureId', description='The ID of the backend signature key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureKey?: string(name='SignatureKey', description='The Key value of the backend signature key.', example='qwertyuiop'),
      signatureName?: string(name='SignatureName', description='The name of the backend signature key.', example='backendsignature'),
      signatureSecret?: string(name='SignatureSecret', description='The Secret value of the backend signature key.', example='asdfghjkl'),
    }
  ](name='SignatureInfo')
  }(name='SignatureInfos', description='The returned signature information. It is an array consisting of SignatureInfo data.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
}

model DescribeSignaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSignaturesResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This operation is used to query the backend signature keys in a Region. Region is a system parameter.
  *
 */
async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSignatures', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSignaturesByApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6', position='Query'),
  groupId: string(name='GroupId', description='The ID of the group to which the API belongs.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model DescribeSignaturesByApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatures?: {
    signatureItem?: [ 
    {
      boundTime?: string(name='BoundTime', description='The time when the key was bound.', example='2016-07-23T08:28:48Z'),
      signatureId?: string(name='SignatureId', description='The ID of the backend signature key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureName?: string(name='SignatureName', description='The name of the backend signature key.', example='mysecret'),
    }
  ](name='SignatureItem')
  }(name='Signatures', description='The returned signature key information. It is an array consisting of SignatureItem data.'),
}

model DescribeSignaturesByApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSignaturesByApiResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  *
 */
async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSignaturesByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSummaryDataRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSummaryDataResponseBody = {
  expireInstanceNum?: int32(name='ExpireInstanceNum', description='The number of subscription dedicated instances that expire in 14 days or less.', example='1'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  usageApiNum?: int32(name='UsageApiNum', description='The number of APIs.', example='10'),
  usageGroupNum?: int32(name='UsageGroupNum', description='The number of API groups.', example='1'),
  usageInstanceNum?: int32(name='UsageInstanceNum', description='The number of running dedicated instances.', example='1'),
}

model DescribeSummaryDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSummaryDataResponseBody(name='body'),
}

async function describeSummaryData(request: DescribeSummaryDataRequest): DescribeSummaryDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSummaryData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CCDF65E-6050-412D-AD68-FA3D9196836C'),
  systemParams?: {
    systemParamItem?: [ 
    {
      demoValue?: string(name='DemoValue', description='Examples', example='192.168.1.1'),
      description?: string(name='Description', description='The description of a parameter.', example='Client IP Address'),
      paramName?: string(name='ParamName', description='The name of the parameter.', example='CaClientIp'),
      paramType?: string(name='ParamType', description='The type of the parameter.', example='string'),
    }
  ](name='SystemParamItem')
  }(name='SystemParams', description='The returned information about system parameters. It is an array that consists of SystemParam data.'),
}

model DescribeSystemParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSystemParametersResponseBody(name='body'),
}

/**
  * *   This API is intended for API callers.
  * *   The response of this API contains the system parameters that are optional in API definitions.
  *
 */
async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsRequest {
  apiId?: string(name='ApiId', description='The specified API ID. This parameter must be specified together with GroupId and StageName.', example='3b81fd160f5645e097cc8855d75a1cf6', position='Query'),
  groupId?: string(name='GroupId', description='The specified group ID. This parameter must be specified together with ApiId and StageName.', example='0009db9c828549768a200320714b8930', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='436fa39b-b3b9-40c5-ae5d-ce3e000e38c5', position='Query'),
  stageName?: string(name='StageName', description='The environment name. This parameter must be specified together with GroupId and ApiId. Valid values:********

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
  trafficControlId?: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456', position='Query'),
  trafficControlName?: string(name='TrafficControlName', description='The name of the throttling policy.', example='ThrottlingTest', position='Query'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='93D91A99-F093-4596-87BA-3C4FBFD3FD8A'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault', description='The default throttling value for each API.', example='20000'),
      appDefault?: int32(name='AppDefault', description='The default throttling value for each app.', example='8000'),
      createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the throttling policy.', example='2016-01-27T10:19:39Z'),
      description?: string(name='Description', description='The description of the throttling policy.', example='test'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the throttling policy.', example='2016-01-27T10:34:38Z'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType', description='The type of the special throttling policy. Valid values:

*   **APP**
*   **USER**', example='USER'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey', description='The AppId or user account corresponding to SpecialType.', example='test_wg@aliyun.com'),
              trafficValue?: int32(name='TrafficValue', description='The throttling value.', example='100'),
            }
          ](name='Special')
          }(name='Specials', description='The returned information about a special throttling policy. It is an array consisting of Special data.'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies', description='The returned information about a special throttling policy. It is an array consisting of SpecialPolicy data.'),
      trafficControlId?: string(name='TrafficControlId', description='The ID of the throttling policy.', example='cfed6c970d45481dbe136d6b5ac68c41'),
      trafficControlName?: string(name='TrafficControlName', description='The name of the throttling policy.', example='wulingtestq1'),
      trafficControlUnit?: string(name='TrafficControlUnit', description='The unit to be used in the throttling policy. Valid values:

*   MINUTE
*   HOUR
*   DAY', example='Minute'),
      userDefault?: int32(name='UserDefault', description='The default throttling value for each user.', example='15000'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls', description='The returned throttling policy information. It is an array consisting of TrafficControl data.'),
}

model DescribeTrafficControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrafficControlsResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This API can be used to query all existing throttling policies (including special throttling policies) and their details.
  * *   You can specify query conditions. For example, you can query the throttling policies bound to a specified API or in a specified environment.
  *
 */
async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsByApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='3b81fd160f5645e097cc8855d75a1cf6', position='Query'),
  groupId: string(name='GroupId', description='The ID of the group to which the API to be queried belongs.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='7c51b234-48d3-44e1-9b36-e2ddccc738e3', position='Query'),
  stageName: string(name='StageName', description='The runtime environment of the API. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
}

model DescribeTrafficControlsByApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  trafficControlItems?: {
    trafficControlItem?: [ 
    {
      boundTime?: string(name='BoundTime', description='The binding time of the policy.', example='2016-07-23T08:28:48Z'),
      trafficControlItemId?: string(name='TrafficControlItemId', description='The ID of the throttling policy.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      trafficControlItemName?: string(name='TrafficControlItemName', description='The name of the throttling policy.', example='mysecret'),
    }
  ](name='TrafficControlItem')
  }(name='TrafficControlItems', description='The returned throttling policy information. It is an array consisting of TrafficControlItem data.'),
}

model DescribeTrafficControlsByApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrafficControlsByApiResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  *
 */
async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControlsByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpdateBackendTaskRequest {
  operationUid: string(name='OperationUid', example='4e13c3e0c44c4a4ebb5231264eeb9bc1', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUpdateBackendTaskResponseBody = {
  apiUpdateBackendResults?: {
    apiUpdateBackendResult?: [ 
    {
      apiName?: string(name='ApiName', example='checkin_linechart_today'),
      apiUid?: string(name='ApiUid', example='14faa7ba0572445685866ddb6a6f19da'),
      backendId?: string(name='BackendId', example='c09b078bcb8f4ade9677bd8b18cdf43f'),
      errorMsg?: string(name='ErrorMsg', example='Failed'),
      groupId?: string(name='GroupId', example='3013a55c0c44483f984d26df27120513'),
      groupName?: string(name='GroupName', example='imotob1'),
      stageId?: string(name='StageId', example='d8f2f54f3309458b8aaceb36c01c2dd9'),
      stageName?: string(name='StageName', example='RELEASE'),
      updateStatus?: string(name='UpdateStatus', example='OVER'),
    }
  ](name='ApiUpdateBackendResult')
  }(name='ApiUpdateBackendResults'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DescribeUpdateBackendTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUpdateBackendTaskResponseBody(name='body'),
}

async function describeUpdateBackendTask(request: DescribeUpdateBackendTaskRequest): DescribeUpdateBackendTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpdateBackendTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpdateVpcInfoTaskRequest {
  operationUid: string(name='OperationUid', example='7d341787517a47afaaef9cc1bdb7acce', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUpdateVpcInfoTaskResponseBody = {
  apiUpdateVpcInfoResults?: {
    apiUpdateVpcInfoResult?: [ 
    {
      apiName?: string(name='ApiName', example='api_test2'),
      apiUid?: string(name='ApiUid', example='86364e7c166c47ba819b3f8f95ac0913'),
      errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
      groupId?: string(name='GroupId', example='e8da6f6346184da9a30d0dc1888b1f3b'),
      groupName?: string(name='GroupName', example='test'),
      stageId?: string(name='StageId', example='fe952b95072747e2a8dfd336bcff8d7f'),
      stageName?: string(name='StageName', example='RELEASE'),
      updateStatus?: string(name='UpdateStatus', example='success'),
    }
  ](name='ApiUpdateVpcInfoResult')
  }(name='ApiUpdateVpcInfoResults'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeUpdateVpcInfoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUpdateVpcInfoTaskResponseBody(name='body'),
}

async function describeUpdateVpcInfoTask(request: DescribeUpdateVpcInfoTaskRequest): DescribeUpdateVpcInfoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpdateVpcInfoTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcAccessesRequest {
  accurateQuery?: boolean(name='AccurateQuery', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='10.199.26.***', position='Query'),
  name?: string(name='Name', description='The name of the authorization. The name must be unique.', example='wuying-edm-svc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  port?: string(name='Port', description='The service port.', example='8080', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='appname'),
      value?: string(name='Value', description='The value of the tag.', example='product'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', position='Query'),
  vpcAccessId?: string(name='VpcAccessId', description='The ID of the VPC authorization.', example='vpc-*****ssds24', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf657qec7lx42paw3qxxx', position='Query'),
}

model DescribeVpcAccessesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8883AC74-259D-4C0B-99FC-0B7F9A588B2F'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  vpcAccessAttributes?: {
    vpcAccessAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the authorization was created.', example='2017-01-30T04:10:19Z'),
      description?: string(name='Description', description='The description of the VPC access authorization.', example='Test'),
      instanceId?: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.', example='i-uf6bzcg1pr4oh5jjmxxx'),
      name?: string(name='Name', description='The name of the authorization.', example='test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='80'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='PROJECT'),
          value?: string(name='Value', description='The value of the tag.', example='6427a17ae6041d1be62414e4'),
        }
      ](name='TagInfo')
      }(name='Tags', description='The list of tags.'),
      vpcAccessId?: string(name='VpcAccessId', description='The ID of the VPC access authorization.', example='vpc-*****ssds24'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf657qec7lx42paw3qxxx'),
      vpcTargetHostName?: string(name='VpcTargetHostName', description='The host of the backend service.', example='hos-a***.fh-**nc.com'),
    }
  ](name='VpcAccessAttribute')
  }(name='VpcAccessAttributes', description='The information about the VPC access authorization. The information is an array consisting of VpcAccessAttribute data.'),
}

model DescribeVpcAccessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcAccessesResponseBody(name='body'),
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcAccesses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  language?: string(name='Language', description='The language in which you want to use to return the description of the system policy. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9324B68F-9863-5722-A0FD-0798E2B02A0E'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.', example='China (Hangzhou) Multi-zone 2(j,g)'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-MAZ2(j,g)'),
    }
  ](name='Zone')
  }(name='Zones', description='The zones available in the current region.', example='{\\"Zone\\": [{\\"ZoneId\\": \\"cn-hangzhou-i\\"}]}'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachApiProductRequest {
  apiProductId: string(name='ApiProductId', description='The ID of the API product.', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  apis: [ 
    {
      apiId: string(name='ApiId', description='The API ID.', example='ba84c55eca46488598da17c0609f3ead'),
      stageName: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
    }
  ](name='Apis', description='The APIs that you want to detach from the API product.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DetachApiProductResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='98E4A7DC-1EA6-5E6A-ACFE-91B60CE7D4BB'),
}

model DetachApiProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachApiProductResponseBody(name='body'),
}

async function detachApiProduct(request: DetachApiProductRequest): DetachApiProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachApiProduct', 'POST', '/', 'json', false, 'json', request);
}

model DetachPluginRequest {
  apiId?: string(name='ApiId', example='19a2846d8e8541c788c6be740035eb68', position='Query'),
  groupId?: string(name='GroupId', example='93b87279e54c4c0baeb7113cdf9c67f5', position='Query'),
  pluginId: string(name='PluginId', example='05df2b52a3644a3a8b1935ab8ab59e9d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', example='RELEASE', position='Query'),
}

model DetachPluginResponseBody = {
  requestId?: string(name='RequestId', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DetachPluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachPluginResponseBody(name='body'),
}

async function detachPlugin(request: DetachPluginRequest): DetachPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPlugin', 'POST', '/', 'json', false, 'json', request);
}

model DisableInstanceAccessControlRequest {
  aclId: string(name='AclId', description='The ID of the access control policy.', example='acl-grgqc0mnuhkqciwtam', position='Query'),
  addressIPVersion?: string(name='AddressIPVersion', description='IP版本，可以设置为**ipv4**或者**ipv6**。', example='ipv4', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43xxxxx', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DisableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DisableInstanceAccessControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableInstanceAccessControlResponseBody(name='body'),
}

async function disableInstanceAccessControl(request: DisableInstanceAccessControlRequest): DisableInstanceAccessControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInstanceAccessControl', 'POST', '/', 'json', false, 'json', request);
}

model DryRunSwaggerRequest {
  data: string(name='Data', description='The Swagger text content.', example='"A Swagger API definition in YAML"', position='Body'),
  dataFormat: string(name='DataFormat', description='The Swagger text format:

*   json
*   yaml', example='yaml', position='Query'),
  globalCondition?: map[string]any(name='GlobalCondition', description='The global condition.', example='{}', shrink='json', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='d633cf5524f841b9950e245b191bdabf', position='Query'),
  overwrite: boolean(name='Overwrite', description='Specifies whether to overwrite the existing API.

APIs with the same HTTP request type and backend request path are considered the same.', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DryRunSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message returned when the API is created.', example='api already exists : apiUid ===> 8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method configured when the API is created.', example='post'),
      path?: string(name='Path', description='The request path configured when the API is created.', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed', description='The APIs that failed to be created based on the Swagger-compliant data imported this time.'),
  globalCondition?: string(name='GlobalCondition', description='The global condition.', example='{}'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Not Found'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='36d4bcfaec1946e1870d90b2d7519710'),
      modelName?: string(name='ModelName', description='The name of the model.', example='Region'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed', description='The models that failed to be imported through the Swagger-compliant data this time.'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId', description='The ID of the API group.', example='b2d552ed90ca435b86f7bf8d45414793'),
      modelName?: string(name='ModelName', description='The name of the model.', example='NewInstance'),
      modelOperation?: string(name='ModelOperation', description='The model operation.', example='CREATE'),
      modelUid?: string(name='ModelUid', description='The UID of the model.', example='ec1946e1870d90b2d7519'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess', description='The models that failed to be imported through the Swagger-compliant data this time.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  success?: {
    apiDryRunSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation', description='Specifies whether the operation is CREATE or MODIFY.', example='CREATE'),
      apiSwagger?: string(name='ApiSwagger', description='The API definition that complies with the Swagger specification.', example='"A Swagger API definition in YAML"'),
      apiUid?: string(name='ApiUid', description='The UID of the successfully imported API.', example='8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method configured when the API is created.', example='get'),
      path?: string(name='Path', description='The request path configured when the API is created.', example='/http/get/mapping'),
    }
  ](name='ApiDryRunSwaggerSuccess')
  }(name='Success', description='The APIs that are created based on the Swagger-compliant data imported this time.'),
}

model DryRunSwaggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DryRunSwaggerResponseBody(name='body'),
}

async function dryRunSwagger(request: DryRunSwaggerRequest): DryRunSwaggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DryRunSwagger', 'POST', '/', 'json', true, 'form', request);
}

model EnableInstanceAccessControlRequest {
  aclId: string(name='AclId', example='acl-bp11escro2et2tioscy52', position='Query'),
  aclType: string(name='AclType', example='black', position='Query'),
  addressIPVersion?: string(name='AddressIPVersion', position='Query'),
  instanceId: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model EnableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model EnableInstanceAccessControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableInstanceAccessControlResponseBody(name='body'),
}

async function enableInstanceAccessControl(request: EnableInstanceAccessControlRequest): EnableInstanceAccessControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstanceAccessControl', 'POST', '/', 'json', false, 'json', request);
}

model ImportOASRequest {
  authType?: string(name='AuthType', description='The security authentication method of the API. Valid values:

*   **APP: Only authorized applications can call the API.**

*   **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.', example='APP', position='Query'),
  backendName?: string(name='BackendName', description='The name of the backend service.', example='testBackendService', position='Query'),
  data: string(name='Data', description='The OAS-compliant text file or OSS object URL.', example='swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Petstore 2.0"
basePath: "/"
schemes:
- "https"
- "http"
paths:
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      operationId: "findPetsByStatus"
      parameters:
      - name: "status"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"', position='Body'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='08ae4aa0f95e4321849ee57f4e0b3077', position='Query'),
  ignoreWarning?: boolean(name='IgnoreWarning', description='Specifies whether to ignore alerts.', example='true', position='Query'),
  OASVersion?: string(name='OASVersion', description='The OAS version.', example='OAS2', position='Query'),
  overwrite: boolean(name='Overwrite', description='Specifies whether to overwrite an existing API.

If an existing API has the same HTTP request type and backend request path as the API to be imported, the existing API is overwritten.', example='true', position='Query'),
  requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.', example='PASSTHROUGH', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  skipDryRun?: boolean(name='SkipDryRun', description='Specifies whether to directly import the API without performing a precheck.', example='true', position='Query'),
}

model ImportOASResponseBody = {
  errorMessages?: {
    errorMessage?: [ string ](name='ErrorMessage')
  }(name='ErrorMessages', description='The error messages that appear due to the invalid data in the imported file.'),
  failedApis?: {
    failedApi?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Invalid Api Definition.'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method configured when you created the API.', example='POST'),
      path?: string(name='Path', description='The request path configured when you created the API.', example='/st1'),
    }
  ](name='FailedApi')
  }(name='FailedApis', description='The APIs that failed to pass the precheck.'),
  failedModels?: {
    failedModel?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='Invalid Model Definition.'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='2c1bc62e19614cc68c6b0b484bc9c5db'),
      modelName?: string(name='ModelName', description='The name of the model.', example='test'),
    }
  ](name='FailedModel')
  }(name='FailedModels', description='The information about the models that failed to pass the precheck.'),
  operationId?: string(name='OperationId', description='The ID of the asynchronous API import task that was generated during the import operation. This ID is used to query the execution status of the API import task.', example='c16a1880f5164d779f6a54f64d997cd9'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
  successApis?: {
    successApi?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='92af1abffc2443eaa2b815fdbd9c13f1'),
      apiOperation?: string(name='ApiOperation', description='Indicates that the operation is CREATE or MODIFY.', example='CREATE'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method configured when you created the API.', example='POST'),
      path?: string(name='Path', description='The request path configured when you created the API.', example='/st1'),
    }
  ](name='SuccessApi')
  }(name='SuccessApis', description='The information about the APIs that have passed the precheck.'),
  successModels?: {
    successModel?: [ 
    {
      groupId?: string(name='GroupId', description='The ID of the API group.', example='feaccf67040643bcbdedb253e59eb527'),
      modelName?: string(name='ModelName', description='The name of the model.', example='test'),
      modelOperation?: string(name='ModelOperation', description='The operation of the model. Valid values: CREATE and MODIFY.', example='CREATE'),
      modelUid?: string(name='ModelUid', description='The UID of the model.', example='1r4efwee19614cc68c6b0b484bc9c5dbs'),
    }
  ](name='SuccessModel')
  }(name='SuccessModels', description='The information about the models that have passed the precheck.'),
  warningMessages?: {
    warningMessage?: [ string ](name='WarningMessage')
  }(name='WarningMessages', description='The warning messages that appear due to the invalid data in the imported file.'),
}

model ImportOASResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportOASResponseBody(name='body'),
}

async function importOAS(request: ImportOASRequest): ImportOASResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportOAS', 'POST', '/', 'json', true, 'form', request);
}

model ImportSwaggerRequest {
  data: string(name='Data', description='The Swagger text content.', example='"A Swagger API definition in YAML"', position='Body'),
  dataFormat: string(name='DataFormat', description='The Swagger text format:

*   json
*   yaml', example='yaml', position='Query'),
  dryRun?: boolean(name='DryRun', description='The pre-inspection.', example='true', position='Query'),
  globalCondition?: map[string]any(name='GlobalCondition', description='The global conditions.', example='{}', shrink='json', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the Swagger is imported.', example='0009db9c828549768a200320714b8930', position='Query'),
  overwrite: boolean(name='Overwrite', description='Specifies whether to overwrite the existing API.

APIs with the same HTTP request type and backend request path are considered the same.', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ImportSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message returned.', example='api already exists : apiUid ===> 8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method of the API.', example='post'),
      path?: string(name='Path', description='The request path of the API.', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed', description='The APIs that failed to be created based on the Swagger-compliant data imported this time.'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='error msg'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='36d4bcfaec1946e1870d90b2d7519710'),
      modelName?: string(name='ModelName', description='The name of the model.', example='Region'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed', description='The models that failed to be imported based on the Swagger-compliant data imported this time.'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId', description='The ID of the API group.', example='b2d552ed90ca435b86f7bf8d45414793'),
      modelName?: string(name='ModelName', description='The name of the model.', example='NewInstance'),
      modelOperation?: string(name='ModelOperation', description='The model operation.'),
      modelUid?: string(name='ModelUid', description='The UID of the model.', example='d4bcfaec1946e1870d'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess', description='The models that were imported based on the Swagger-compliant data imported this time.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='647CEF05-404C-4125-B3D7-44792EB77392'),
  success?: {
    apiImportSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation', description='Specifies that the operation is CREATE or MODIFY.', example='CREATE'),
      apiUid?: string(name='ApiUid', description='The UID of the imported API.', example='8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method of the API.', example='get'),
      path?: string(name='Path', description='The request path of the API.', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerSuccess')
  }(name='Success', description='The APIs that were created based on the Swagger-compliant data imported this time.'),
}

model ImportSwaggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportSwaggerResponseBody(name='body'),
}

/**
  * *   Alibaba Cloud supports extensions based on Swagger 2.0.
  * *   Alibaba Cloud supports Swagger configuration files in JSON and YAML formats.
  *
 */
async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportSwagger', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='1d2db86sca4384811e0b5e8707e68181f', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource.

Valid values of N: `[1,50]`.', example='285bb759342649a1b70c2093a772e087', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Currently, tags are supported for API groups, plug-ins, and apps. Operations performed on APIs are based on the tags of API groups.

*   **apiGroup**
*   **plugin**
*   **app**
*   **api**', example='apiGroup', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

Valid values of N: `[1,20]`.', example='env'),
      value?: string(name='Value', description='The value of the tag. If the parameter has a value, a value is also required for the tag key of the same N in the corresponding **tag.N.Key**. Otherwise, an error is reported.

Valid values of N: `[1,20]`.', example='product'),
    }
  ](name='Tag', description='The tag of objects that match the lifecycle rule. You can specify multiple tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.

A NextToken value of -1 indicates that a next query does not exist.', example='1d2db86sca4384811e0b5e8707e68181f'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69A58F-345C-4FDE-88E4-BF5189484043'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='285bb759342649a1b70c2093a772e087'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='apiGroup'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='owner'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='zhangsan'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The resource list.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * *   The Tag.N.Key and Tag.N.Value parameters constitute a key-value pair.
  * *   ResourceId.N must meet all the key-value pairs that are entered. If you enter multiple key-value pairs, resources that contain the specified key-value pairs are returned.
  * *   This operation is used to query resource tags based on conditions. If no relationship matches the conditions, an empty list is returned.
  * *   You can query both user tags and visible system tags.
  * *   In addition to the required parameters, you can also specify ResourceId.N to query the visible resource tags of a specified resource in a region.
  * *   You can also specify Tag.N.Key to query the visible keys of a specified key in a region.
  * *   At least one of ResourceId.N, Tag.N.Key, and Tag.N.Value exists.
  * *   You can query tags of the same type or different types in a single operation.
  * *   You can query all your user types and visible system tags.
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The type of the two-way communication API. Valid values:

*   **COMMON**: general APIs
*   **REGISTER**: registered APIs
*   **UNREGISTER**: unregistered APIs
*   **NOTIFY**: downstream notification', example='HmacSHA256', position='Query'),
  apiId: string(name='ApiId', description='The ID of the API.', example='8afff6c8c4c6447abb035812e4d66b65', position='Query'),
  apiName: string(name='ApiName', description='The name of the API. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (\\_).', example='ApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='The ID of the backend service.', example='DEFAULT', position='Query'),
  authType?: string(name='AuthType', description='The configuration items of API requests sent by the consumer to API Gateway.', example='APP', position='Query'),
  backendEnable?: boolean(name='BackendEnable', description='Configuration Mode', example='true', position='Query'),
  backendId?: string(name='BackendId', description='Specifies whether to enable backend services.', example='0d105f80a8f340408bd34954d4e4ff22', position='Query'),
  constantParameters?: string(name='ConstantParameters', position='Body'),
  description?: string(name='Description', description='The description of the API. The description can be up to 180 characters in length.', example='Api description', position='Query'),
  disableInternet?: boolean(name='DisableInternet', description='The AppCode authentication type supported. Valid values:

*   DEFAULT: supported after being made available in Alibaba Cloud Marketplace
*   DISABLE: not supported
*   HEADER : supported only in the Header parameter
*   HEADER_QUERY: supported in the Header or Query parameter', example='true', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Body'),
  failResultSample?: string(name='FailResultSample', position='Body'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set DisableInternet to **true** to limit API calls to within the VPC.
*   If you set DisableInternet to **false**, the limit if lifted.

>  If you do not set this parameter, the original value is used.', example='true', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', description='The client-side request signature method of the API. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='{\\"OpenIdApiType\\":\\"IDTOKEN\\",\\"PublicKey\\":\\"lzlj1573\\",\\"IdTokenParamName\\":\\"\\",\\"PublicKeyId\\":\\"lzljorders\\"}', position='Query'),
  requestConfig: string(name='RequestConfig', description='The configuration items of API requests sent by API Gateway to the backend service.', example='{"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}', position='Query'),
  requestParameters?: string(name='RequestParameters', position='Body'),
  resultBodyModel?: string(name='ResultBodyModel', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. If you do not set this parameter, the original value is used.', example='{}', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Body'),
  resultSample?: string(name='ResultSample', position='Body'),
  resultType?: string(name='ResultType', description='The sample response from the backend service.', example='HTML', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', description='The parameters of API requests sent by the consumer to API Gateway.', example='{"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Body'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Body'),
  systemParameters?: string(name='SystemParameters', position='Body'),
  visibility: string(name='Visibility', description='Specifies whether the API is public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', description='The returned description of the API.', example='COMMON', position='Query'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model ModifyApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiResponseBody(name='body'),
}

/**
  * **This operation is intended for API providers.**
  * *   This API operation requires a full update. Updates of partial parameters are not supported.
  * *   When you modify an API name, make sure that the name of each API within the same group is unique.
  * *   When you modify the request path, make sure that each request path within the same group is unique.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApi', 'POST', '/', 'json', true, 'form', request);
}

model ModifyApiConfigurationRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='If the **AuthType** parameter is set to **APP**, you must include this parameter to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256', position='Query'),
  apiId: string(name='ApiId', description='The ID of the API.', example='baacc592e63a4cb6a41920d9d3f91f38', position='Query'),
  apiName?: string(name='ApiName', description='The name of the API.', example='testModifyApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='If the **AuthType** parameter is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.', example='DEFAULT', position='Query'),
  authType?: string(name='AuthType', description='API安全认证类型，目前可以取值：

- **APP**：只允许已授权的APP调用
- **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
     - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制；
     - AppCodeAuthType的值不会生效。', example='APP', position='Query'),
  backendName?: string(name='BackendName', description='The name of the backend service. This parameter takes effect only when the UseBackendService parameter is set to TRUE.', example='testBackendService', position='Query'),
  bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the **RequestMode** parameter is set to **MAPPING**.

The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM** and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.', example='STREAM', position='Query'),
  bodyModel?: string(name='BodyModel', description='The body model.', example='https://apigateway.aliyun.com/models/f4e7333c****40dcbaf7c9da553ccd8d/3ab61f775b****d4bc35e993****87aa8', position='Query'),
  contentTypeCategory?: string(name='ContentTypeCategory', description='The ContentType configuration of the backend request.

*   DEFAULT: the default configuration in API Gateway
*   CUSTOM: a custom configuration', example='DEFAULT', position='Query'),
  contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8', position='Query'),
  description?: string(name='Description', description='The description of the API.', example='TestModifyDescription', position='Query'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to call the API only in an internal network. If the **DisableInternet** parameter is set to **true**, the API can be called only in an internal network.
*   If the **DisableInternet** parameter is set to **false**, the API can be called over the Internet and in an internal network.', example='false', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.

For more information, see [ErrorCodeSample](~~44392~~).', example='[{"Code":"400","Message":"Missing the userId","Description":"param invalid"}]', position='Query'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service. This value is used only to generate documents. It does not affect the returned result.', example='{"errorCode":"fail","errorMessage":"param invalid"}', position='Query'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If the **ForceNonceCheck** parameter is set to **false**, X-Ca-Nonce is not checked. If you do not modify this parameter when you modify an API, the original value is used.', example='true', position='Query'),
  functionComputeConfig?: string(name='FunctionComputeConfig', description='The Function Compute configuration.', example='{"FcType":"FCEvent","FcRegionId":"cn-hangzhou","RoleArn":"acs:ram::xxxxxxxx:role/aliyunserviceroleforapigateway","selectServiceName":"fcTest","FunctionName":"funcTest","selectFunctionName":"funcTest","Qualifier":"LATEST","Path":"","FcBaseUrl":"","ServiceName":"fcTest"}', position='Query'),
  httpConfig?: string(name='HttpConfig', description='The HTTP configuration.', example='{"serviceAddress":"http://test.api.com","servicePath":"/test/api","serviceHttpMethod":"GET"}', position='Query'),
  mockConfig?: string(name='MockConfig', description='The Mock configuration.', example='{"MockResult":"test","MockHeaders":[{"HeaderName":"testHeader","HeaderValue":"testHeader"}],"MockStatusCode":"400"}', position='Query'),
  modelName?: string(name='ModelName', description='The name of the model.', example='Test', position='Query'),
  ossConfig?: string(name='OssConfig', description='The OSS configuration.', example='{"OssRegionId":"cn-hangzhou","Key":"/test.html","BucketName":"test-api-oss","Action":"GetObject"}', position='Query'),
  postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='The description of the request body', position='Query'),
  requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='GET', position='Query'),
  requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING', position='Query'),
  requestParameters?: string(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).', example='[{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"header1","DefaultValue":"123124","Location":"Head"},{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"REQUIRED","isHide":false,"ApiParameterName":"header2","DefaultValue":"","Location":"Head"},{"ParameterLocation":{"name":"Query","orderNumber":3},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"query1","DefaultValue":"1245","Location":"Query"},{"ApiParameterName":"CaClientIp","ParameterLocation":{"name":"Query","orderNumber":0},"Location":"Query","ParameterType":"String","Required":"REQUIRED","Description":"ClientIP"},{"ApiParameterName":"testConstant","ParameterLocation":{"name":"Head","orderNumber":0},"Location":"Head","ParameterType":"String","Required":"REQUIRED","DefaultValue":"111"}]', position='Query'),
  requestPath?: string(name='RequestPath', description='The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the path of the API request is `/object/add`.', example='/test/api', position='Query'),
  requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP', position='Query'),
  resultSample?: string(name='ResultSample', description='The sample response from the backend service. This value is used only to generate documents. It does not affect the returned result.', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}', position='Query'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. This value is used only to generate documents. It does not affect the returned result.', example='JSON', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceParameters?: string(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).', example='[{"ServiceParameterName":"header1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"header2","Location":"Query","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"query1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"ipp","Location":"Query","Type":"String","ParameterCatalog":"SYSTEM"},{"ServiceParameterName":"testConstant","Location":"Head","Type":"String","ParameterCatalog":"CONSTANT"}]', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).', example='[{"ServiceParameterName":"header1","RequestParameterName":"header1"},{"ServiceParameterName":"header2","RequestParameterName":"header2"},{"ServiceParameterName":"query1","RequestParameterName":"query1"},{"ServiceParameterName":"ipp","RequestParameterName":"CaClientIp"},{"ServiceParameterName":"testConstant","RequestParameterName":"testConstant"}]', position='Query'),
  serviceProtocol?: string(name='ServiceProtocol', description='The protocol that is used to access backend services. Valid values:

*   Http: for backend services that use HTTP or HTTPS
*   Vpc: for backend services that use VPC
*   FC: for Function Compute
*   OSS: for Object Storage Service
*   Mock: for backend services that use the Mock mode
*   EventBridge: for EventBridge

You must specify the config value for the corresponding backend service.', example='HTTP', position='Query'),
  serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service. Unit: milliseconds.', example='10000', position='Query'),
  useBackendService?: boolean(name='UseBackendService', description='Specifies whether to use the information about the created backend service. Valid values:

*   TRUE: uses the information about the created backend service.
*   FALSE: uses the information about the custom backend service.', example='TRUE', position='Query'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC:** The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE:** The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC', position='Query'),
  vpcConfig?: string(name='VpcConfig', description='The VPC configuration.', example='{"VpcId":"vpc-xxxxxxx","Name":"testVpc","InstanceId":"i-p0ssssss","Port":80,"servicePath":"/test/vpc","serviceHttpMethod":"HEAD"}', position='Query'),
}

model ModifyApiConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model ModifyApiConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiConfigurationResponseBody(name='body'),
}

async function modifyApiConfiguration(request: ModifyApiConfigurationRequest): ModifyApiConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupRequest {
  basePath?: string(name='BasePath', description='The root path of the API.', example='/eeee', position='Query'),
  compatibleFlags?: string(name='CompatibleFlags', description='The list of associated tags. Separate multiple tags with commas (,).', example='depart:dep1', position='Query'),
  customTraceConfig?: string(name='CustomTraceConfig', description='The custom trace configuration.', example='{\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}', position='Query'),
  customerConfigs?: string(name='CustomerConfigs', description='The data of custom configuration items.', example='removeResponseServerHeader', position='Query'),
  defaultDomain?: string(name='DefaultDomain', description='The default domain name.', example='mkt.api.gaore.com', position='Query'),
  description?: string(name='Description', description='The API group description that you want to specify, which cannot exceed 180 characters. If this parameter is not specified, the group description is not modified.', example='New weather informations.', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  groupName?: string(name='GroupName', description='The API group name must be globally unique. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (\\_). If this parameter is not specified, the group name is not modified.', example='NewWeather', position='Query'),
  passthroughHeaders?: string(name='PassthroughHeaders', description='Specifies whether to pass headers.', example='eagleeye-rpcid,x-b3-traceid,host', position='Query'),
  rpcPattern?: string(name='RpcPattern', description='The RPC mode.', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  supportSSE?: string(name='SupportSSE', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.', example='env'),
      value: string(name='Value', description='The value of the tag.', example='uat'),
    }
  ](name='Tag', description='The object tags that match the lifecycle rule. You can specify multiple tags.', example='Key， Value', position='Query'),
  userLogConfig?: string(name='UserLogConfig', description='The user log configuration.', example='{\\"requestBody\\":false,\\"responseBody\\":false,\\"queryString\\":\\"\\",\\"requestHeaders\\":\\"\\",\\"responseHeaders\\":\\"\\",\\"jwtClaims\\":\\"\\"}', position='Query'),
}

model ModifyApiGroupResponseBody = {
  basePath?: string(name='BasePath', description='The root path of the API.', example='/test'),
  description?: string(name='Description', description='The description of the API group.', example='New weather informations.'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  groupName?: string(name='GroupName', description='The name of the group to which an API belongs.', example='NewWeather'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4CF287C6-CE5B-477B-BE27-C48F99EADBC8'),
  subDomain?: string(name='SubDomain', description='The second-level domain name automatically assigned to the API group.', example='523e8dc7bbe04613b5b1d726c2a7889d-cn-hangzhou.alicloudapi.com'),
}

model ModifyApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiGroupResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupInstanceRequest {
  groupId: string(name='GroupId', example='01c97ed08a614118849b00079753d1e2', position='Query'),
  remark?: string(name='Remark', example='migrate', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='env'),
      value: string(name='Value', example='123'),
    }
  ](name='Tag', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', example='apigateway-bj-c325375b1ebe', position='Query'),
}

model ModifyApiGroupInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E07AEFF0-9FB0-599E-8F12-B418D8AE1F3D'),
}

model ModifyApiGroupInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiGroupInstanceResponseBody(name='body'),
}

async function modifyApiGroupInstance(request: ModifyApiGroupInstanceRequest): ModifyApiGroupInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroupInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupNetworkPolicyRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='b0162c75d7d34ff48506f1aff878b05e', position='Query'),
  httpsPolicy?: string(name='HttpsPolicy', description='The HTTPS security policy.', example='HTTPS1_1_TLS1_0', position='Query'),
  innerDomainEnable?: boolean(name='InnerDomainEnable', description='Specifies whether to disable the public second-level domain name.', example='true', position='Query'),
  internetEnable?: boolean(name='InternetEnable', description='Specifies whether to enable the virtual private cloud (VPC) second-level domain name.', example='true', position='Query'),
  internetIPV6Enable?: boolean(name='InternetIPV6Enable', description='Specifies whether to enable IPv6. Valid values: **true** and **false**.', example='true', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcIntranetEnable?: boolean(name='VpcIntranetEnable', description='Specifies whether to enable the VPC domain name. Valid values:

*   TRUE
*   FALSE', example='false', position='Query'),
  vpcSlbIntranetEnable?: boolean(name='VpcSlbIntranetEnable', description='Specifies whether to enable the self-calling domain name.', example='false', position='Query'),
}

model ModifyApiGroupNetworkPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4E707B25-5119-5ACF-9D26-7D2A2762F05C'),
}

model ModifyApiGroupNetworkPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiGroupNetworkPolicyResponseBody(name='body'),
}

async function modifyApiGroupNetworkPolicy(request: ModifyApiGroupNetworkPolicyRequest): ModifyApiGroupNetworkPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroupNetworkPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupVpcWhitelistRequest {
  groupId: string(name='GroupId', description='The ID of the API group.', example='9b80408147724ddab4c4e2703c6ca019', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcIds: string(name='VpcIds', description='The ID of the VPC instance.', example='vpc-bp11w979o2s9rcr962w25', position='Query'),
}

model ModifyApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F8B9DC8C-D6E2-5065-BD1F-0401866E7F10'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiGroupVpcWhitelistResponseBody(name='body'),
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroupVpcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: long(name='AppId', description='The ID of the application.', example='20112314518278', position='Query'),
  appName?: string(name='AppName', description='The ID must be 4 to 26 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.

If you do not want to modify the existing value, do not specify this parameter.', example='jiedian_pord', position='Query'),
  description?: string(name='Description', description='The description of the application. The description can be up to 180 characters in length.

If you do not want to modify the existing value, do not specify this parameter.', example='modidyTest', position='Query'),
  extend?: string(name='Extend', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.

Valid values of n: `[1, 20]`.', example='key'),
      value?: string(name='Value', description='The value of the tag.

Valid values of n: `[1, 20]`.', example='value'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   **AppName** or **Description** can be modified. If these parameters are not specified, no modifications are made and the operation will directly return a success response.
  * *   You can call this operation up to 50 times per second per account.
  *
 */
async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackendRequest {
  backendId: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7', position='Query'),
  backendName: string(name='BackendName', example='testHttpModify', position='Query'),
  backendType: string(name='BackendType', example='HTTP', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyBackendResponseBody = {
  requestId?: string(name='RequestId', example='06DACA61-9359-5EC6-AEDA-C73E620E49A9'),
}

model ModifyBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBackendResponseBody(name='body'),
}

async function modifyBackend(request: ModifyBackendRequest): ModifyBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackend', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackendModelRequest {
  backendId?: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7', position='Query'),
  backendModelData?: string(name='BackendModelData', example='{\\"ServiceAddress\\":\\"http://121.40.XX.XX\\"}', position='Query'),
  backendModelId?: string(name='BackendModelId', example='3bb6375bc71c4e4c95ce05b4e7a55a9d', position='Query'),
  backendType?: string(name='BackendType', example='OSS', position='Query'),
  description?: string(name='Description', example='modify plugin first', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', example='TEST', position='Query'),
}

model ModifyBackendModelResponseBody = {
  operationId?: string(name='OperationId', example='c16a1880f5164d779f6a54f64d997cd9'),
  requestId?: string(name='RequestId', example='19B89B04-418B-55EE-94A8-6B42CA06002A'),
}

model ModifyBackendModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBackendModelResponseBody(name='body'),
}

async function modifyBackendModel(request: ModifyBackendModelRequest): ModifyBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatasetRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='a25a6589b2584ff490e891cc********', position='Query'),
  datasetName: string(name='DatasetName', description='The name of the dataset.', example='NewDatasetName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyDatasetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876********'),
}

model ModifyDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatasetResponseBody(name='body'),
}

async function modifyDataset(request: ModifyDatasetRequest): ModifyDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataset', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatasetItemRequest {
  datasetId: string(name='DatasetId', description='The ID of the dataset.', example='a25a6589b2584ff490e891cc********', position='Query'),
  datasetItemId: string(name='DatasetItemId', description='The ID of the data entry.', example='5045****', position='Query'),
  description?: string(name='Description', description='The description of the data entry. The description cannot exceed 180 characters in length.', example='description', position='Query'),
  expiredTime?: string(name='ExpiredTime', description='The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ** format.', example='2022-09-22T12:00:00Z', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyDatasetItemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DE77BC-0F7D-5A18-B494-BD2C********'),
}

model ModifyDatasetItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatasetItemResponseBody(name='body'),
}

async function modifyDatasetItem(request: ModifyDatasetItemRequest): ModifyDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttributeRequest {
  deleteVpcIpBlock?: string(name='DeleteVpcIpBlock', example='true', position='Query'),
  egressIpv6Enable?: string(name='EgressIpv6Enable', example='true', position='Query'),
  httpsPolicy?: string(name='HttpsPolicy', example='HTTPS2_TLS1_0', position='Query'),
  IPV6Enabled?: string(name='IPV6Enabled', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='apigateway-ht-8xxxxxxxxx', position='Query'),
  instanceName?: string(name='InstanceName', example='apigatewayInstance', position='Query'),
  intranetSegments?: string(name='IntranetSegments', example='172.0.0.1/24', position='Query'),
  maintainEndTime?: string(name='MaintainEndTime', example='23:00Z', position='Query'),
  maintainStartTime?: string(name='MaintainStartTime', example='18:00Z', position='Query'),
  toConnectVpcIpBlock?: {
    cidrBlock?: string(name='CidrBlock', example='172.16.0.0/16'),
    customized?: boolean(name='Customized', example='false'),
    vswitchId?: string(name='VswitchId', example='vsw-wz94cqvaoe1ipxxxxxx'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
  }(name='ToConnectVpcIpBlock', shrink='json', position='Query'),
  token?: string(name='Token', example='c20d86c4-1eb3-4d0b-afe9-c586df1e2136', position='Query'),
  vpcSlbIntranetEnable?: string(name='VpcSlbIntranetEnable', example='false', position='Query'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='F3186326-2C57-58E1-B6E9-XXXXXXXXXXXX'),
}

model ModifyInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether payment is automatically made during renewal. Valid values:

*   **True**: Automatic payment is enabled. Make sure that your Alibaba Cloud account has adequate balance.
*   **False**: Automatic payment is disabled. You have to manually pay in the console. Log on to the console. In the upper-right corner, choose **Expenses > User Center**. In the left-side navigation pane, click **Orders**. On the page that appears, find your order and complete the payment.

Default value: **False**.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43xxxxx', position='Query'),
  instanceSpec: string(name='InstanceSpec', description='The specifications of the instance.', example='api.s1.small', position='Query'),
  modifyAction?: string(name='ModifyAction', description='Specifies whether to upgrade or downgrade the instance. Valid values:

*   **UPGRADE**
*   **DOWNGRADE**

Default value: **UPGRADE**.', example='UPGRADE', position='Query'),
  skipWaitSwitch?: boolean(name='SkipWaitSwitch', description='Specifies whether to skip the Waiting for Traffic Switchover state. During the upgrade or downgrade, a new outbound IP address may be added to the API Gateway instance. The Waiting for Traffic Switchover state is used to remind users of adding the new outbound IP address to the whitelist. If you set the SkipWaitSwitch parameter to true, the instance does not enter the Waiting for Traffic Switchover state when a new outbound IP address is available. Instead, the system sends internal messages to the user.', example='false', position='Query'),
  token: string(name='Token', description='The password.', example='b5845042-2f2f-4e96-bd5c-36c6e5c2a68c', position='Query'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
}

model ModifyInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIntranetDomainPolicyRequest {
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcIntranetEnable: boolean(name='VpcIntranetEnable', description='Specifies whether to enable the VPC domain name. Valid values:

*   TRUE
*   FALSE', example='true', position='Query'),
}

model ModifyIntranetDomainPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model ModifyIntranetDomainPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIntranetDomainPolicyResponseBody(name='body'),
}

async function modifyIntranetDomainPolicy(request: ModifyIntranetDomainPolicyRequest): ModifyIntranetDomainPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIntranetDomainPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlRequest {
  description?: string(name='Description', description='The description. The description can be up to 200 characters in length.', example='description', position='Query'),
  ipControlId: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  ipControlName?: string(name='IpControlName', description='The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).', example='testControl11', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyIpControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpControlResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   This operation allows you to modify only the name and description of an ACL. You cannot modify the type of the ACL.
  *
 */
async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlPolicyItemRequest {
  appId?: string(name='AppId', description='The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.

*   You can add only one application ID at a time.
*   If this parameter is empty, no applications are restricted.
*   If this parameter is not empty, not only IP addresses but also applications are restricted.
*   If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
*   If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.', example='123', position='Query'),
  cidrIp: string(name='CidrIp', description='The IP address or CIDR block that is defined in a policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.', example='113.125.1.101;101.11.1.1', position='Query'),
  ipControlId: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  policyItemId: string(name='PolicyItemId', description='The ID of the policy.', example='P151617000829241', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyIpControlPolicyItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpControlPolicyItemResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The modification immediately takes effect on all the APIs that are bound to the policy.
  * *   This operation causes a full modification of the content of a policy.
  *
 */
async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', example='PROVIDER', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', example='logs-gateway', position='Query'),
  slsProject: string(name='SlsProject', example='ford-api-gateway-log', position='Query'),
}

model ModifyLogConfigResponseBody = {
  requestId?: string(name='RequestId', example='75A4ADCB-AA26-51FB-94D4-AB3240040974'),
}

model ModifyLogConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyLogConfigResponseBody(name='body'),
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyModelRequest {
  description?: string(name='Description', description='The description of the new model definition.', example='Model Description', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the model belongs.', example='30e792398d6c4569b04c0e53a3494381', position='Query'),
  modelName: string(name='ModelName', description='The name of the model.', example='Test', position='Query'),
  newModelName?: string(name='NewModelName', description='The new name of the model.', example='NewTest', position='Query'),
  schema?: string(name='Schema', description='The new definition of the model.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}', position='Query'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
}

model ModifyModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyModelResponseBody(name='body'),
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyModel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPluginRequest {
  description?: string(name='Description', description='The description of the plug-in. The description can contain a maximum of 200 characters in length.', example='modify plugin first', position='Query'),
  pluginData?: string(name='PluginData', description='The statement that is used to modify the plug-in definition.', example='Plugin definition', position='Query'),
  pluginId: string(name='PluginId', description='The ID of the plug-in whose information you want to modify.', example='a96926e82f994915a8da40a119374537', position='Query'),
  pluginName?: string(name='PluginName', description='The name of the plug-in. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). However, it cannot start with an underscore.', example='modifyCors', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag.

N can be an integer from 1 to 20.``', example='env'),
      value: string(name='Value', description='The value of the tag.

N can be an integer from 1 to 20.``', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', example='Key， Value', position='Query'),
}

model ModifyPluginResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model ModifyPluginResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPluginResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The name of the plug-in must be unique.
  *
 */
async function modifyPlugin(request: ModifyPluginRequest): ModifyPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPlugin', 'POST', '/', 'json', false, 'json', request);
}

model ModifySignatureRequest {
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='436fa39b-b3b9-40c5-ae5d-ce3e000e38c5', position='Query'),
  signatureId: string(name='SignatureId', description='The ID of the signature key that you want to manage.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  signatureKey?: string(name='SignatureKey', description='The new Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.', example='qwertyuiop', position='Query'),
  signatureName?: string(name='SignatureName', description='The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.', example='backendsignature', position='Query'),
  signatureSecret?: string(name='SignatureSecret', description='The new Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.', example='asdfghjkl', position='Query'),
}

model ModifySignatureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureId?: string(name='SignatureId', description='The ID of the key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureName?: string(name='SignatureName', description='The name of the key.', example='backendsignature'),
}

model ModifySignatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySignatureResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This API operation modifies the name, Key value, and Secret value of an existing signature key.
  * *   Note that the modification takes effect immediately. If the key has been bound to an API, you must adjust the backend signature verification based on the new key accordingly.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySignature', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault', description='The default throttling value for each API.', example='10000', position='Query'),
  appDefault?: int32(name='AppDefault', description='The default throttling value for each app.', example='10000', position='Query'),
  description?: string(name='Description', description='The description of the throttling policy.', example='ThrottlingTestDescription', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='4223a10e-eed3-46a6-8b7c-23003f488153', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy.', example='tf123456', position='Query'),
  trafficControlName?: string(name='TrafficControlName', description='The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.', example='ThrottlingTest', position='Query'),
  trafficControlUnit?: string(name='TrafficControlUnit', description='The unit to be used in the throttling policy. Valid values:

*   **SECOND**
*   **MINUTE**
*   **HOUR**
*   **DAY**', example='HOUR', position='Query'),
  userDefault?: int32(name='UserDefault', description='The default throttling value for each user.', example='10000', position='Query'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTrafficControlResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The modifications take effect on the bound APIs instantly.
  * *   The QPS limit on this operation is 50 per user.
  *
 */
async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcAccessAndUpdateApisRequest {
  instanceId?: string(name='InstanceId', description='The ID of the new instance.', example='i-uf6bzcg1pr4oh5jjmxxx', position='Query'),
  name: string(name='Name', description='The name of the VPC authorization.

> 

*   The name of a VPC authorization cannot be changed. You cannot use this parameter to change the name of a VPC authorization.

*   You must set this parameter to the name of the current VPC authorization.', example='VpcName', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', description='Specifies whether to update the associated API.

**

**Warning:** If you want to update the VPC authorization of a published API, you must set this parameter to true. Otherwise, the update will not be synchronized to the backend service of the API.', example='true', position='Query'),
  port?: int32(name='Port', description='The new port number.', example='80', position='Query'),
  refresh?: boolean(name='Refresh', description='Specifies whether to update the VPC authorization.

> 

*   If the ID of the instance in your VPC is changed but the IP address of the instance remains unchanged, you can set this parameter to true to update the VPC authorization.', example='false', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', description='The token of the request.', example='c20d86c4-1eb3-4d0b-afe9-c586df1e2136', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the new VPC.', example='vpc-m5e7jqfppv5wbvmdw5pg2', position='Query'),
  vpcTargetHostName?: string(name='VpcTargetHostName', description='The hostname of the backend service.', example='iot.hu***ng.com', position='Query'),
}

model ModifyVpcAccessAndUpdateApisResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the asynchronous task.

> 

*   If the associated API is updated, you can use the task ID in the **DescribeUpdateVpcInfoTask** operation to query the update result.', example='7b6d0cb72b2e4215b0129f675c889746'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CEC6EA-EEBA-5FD6-8BD9-2CF01980FE39'),
}

model ModifyVpcAccessAndUpdateApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcAccessAndUpdateApisResponseBody(name='body'),
}

async function modifyVpcAccessAndUpdateApis(request: ModifyVpcAccessAndUpdateApisRequest): ModifyVpcAccessAndUpdateApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcAccessAndUpdateApis', 'POST', '/', 'json', false, 'json', request);
}

model OpenApiGatewayServiceRequest {
}

model OpenApiGatewayServiceResponseBody = {
  orderId?: string(name='OrderId', example='210981***530495'),
  requestId?: string(name='RequestId', example='2D39D1B3-8548-508A-9CE2-7F4A3F2A7989'),
}

model OpenApiGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenApiGatewayServiceResponseBody(name='body'),
}

async function openApiGatewayService(request: OpenApiGatewayServiceRequest): OpenApiGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenApiGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model QueryRequestLogsRequest {
  requestLogId: string(name='RequestLogId', description='The ID of the request log.', example='95657ED9-2F6F-426F-BD99-79C8********', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model QueryRequestLogsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C81********'),
  requestLogs?: {
    requestLog?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='4b83229ebcab4ecd88956fb3********'),
      apiName?: string(name='ApiName', description='The API name.', example='ApiName'),
      appName?: string(name='AppName', description='The application name.', example='VIPROOM_VIPROOM'),
      backendRequestEnd?: long(name='BackendRequestEnd', description='The time when API Gateway finished forwarding the request to the backend service.'),
      backendRequestStart?: long(name='BackendRequestStart', description='The time when API Gateway started to forward the request to the backend service.'),
      backendResponseEnd?: long(name='BackendResponseEnd', description='The time when API Gateway finished receiving the response from the backend service.'),
      backendResponseStart?: long(name='BackendResponseStart', description='The time when API Gateway started to receive the response from the backend service.'),
      clientIp?: string(name='ClientIp', description='The IP address of the client that sends the request.', example='21.237.XXX.XXX'),
      clientNonce?: string(name='ClientNonce', description='The X-Ca-Nonce header included in the request from the client.', example='d43df9db-3b05-4cd6-888a-1c0b********'),
      consumerAppId?: string(name='ConsumerAppId', description='The application ID that is used by the caller.', example='11096****'),
      consumerAppKey?: string(name='ConsumerAppKey', description='The App Key that is used by the caller.', example='20412****'),
      customTraceId?: string(name='CustomTraceId', description='The custom trace ID.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      domain?: string(name='Domain', description='The requested domain name in the request.', example='360bdd88695c48ae8085c7f2********-ap-southeast-1.alicloudapi.com'),
      errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='X500ER'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='Backend service connect failed `Timeout connecting to [/1XX.20.0.XX:8080]`'),
      exception?: string(name='Exception', description='The specific error message returned by the backend service.', example='error msg'),
      frontRequestEnd?: long(name='FrontRequestEnd', description='The time when API Gateway finished receiving the request.'),
      frontRequestStart?: long(name='FrontRequestStart', description='The time when API Gateway started to receive the request.'),
      frontResponseEnd?: long(name='FrontResponseEnd', description='The time when API Gateway finished forwarding the response to the client.'),
      frontResponseStart?: long(name='FrontResponseStart', description='The time when API Gateway started to forward the response to the client.'),
      groupId?: string(name='GroupId', description='The ID of the API group to which the API belongs.', example='dc024277fe6c4cada79ba0bd6********'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='GroupName'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method that is used to send the request.', example='POST'),
      httpPath?: string(name='HttpPath', description='The path of the request.', example='/testPath'),
      initialRequestId?: string(name='InitialRequestId', description='The initial request ID when API Gateway calls an API. For example, if API-1 calls API-2, the initialRequestId parameter in the log of API-2 indicates the ID of the request from API-1.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      instanceId?: string(name='InstanceId', description='The ID of the API Gateway instance to which the API belongs.', example='apigateway-bj-ab2b********'),
      jwtClaims?: string(name='JwtClaims', description='The JSON web token (JWT) claims. The claims can be configured at the group level.', example='{}'),
      region?: string(name='Region', description='The region in which the instance resides.', example='cn-hangzhou'),
      requestBody?: string(name='RequestBody', description='The request body. A request body cannot exceed 1,024 bytes in size.', example='param=paramName'),
      requestHeaders?: string(name='RequestHeaders', description='The request headers.', example='content-type: application/x-www-form-urlencoded'),
      requestId?: string(name='RequestId', description='The request ID.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      requestProtocol?: string(name='RequestProtocol', description='The protocol used by the client to send the request. Valid values: HTTP, HTTPS, and WS.', example='HTTP'),
      requestQueryString?: string(name='RequestQueryString', description='The query string for the request.', example='username=name'),
      requestSize?: string(name='RequestSize', description='The size of the request. Unit: bytes.', example='1923'),
      requestTime?: string(name='RequestTime', description='The request time, in UTC.', example='2022-10-29T03:59:59Z'),
      responseBody?: string(name='ResponseBody', description='The response body. A response body cannot exceed 1,024 bytes in size.', example='param=paramName'),
      responseHeaders?: string(name='ResponseHeaders', description='The headers in the API response.', example='content-type: application/x-www-form-urlencoded'),
      responseSize?: string(name='ResponseSize', description='The size of returned data. Unit: bytes.', example='23441'),
      serviceLatency?: string(name='ServiceLatency', description='The total time consumed to access the backend resources. The total time includes the time consumed to request a connection to the resources, the time consumed to establish the connection, and the time consumed to call the backend service. Unit: milliseconds.', example='324'),
      stageId?: string(name='StageId', description='The ID of the API environment.', example='8a305b7f10334052a52d9156********'),
      stageName?: string(name='StageName', description='The name of the API environment.', example='RELEASE'),
      statusCode?: string(name='StatusCode', description='The status code returned.', example='200'),
      totalLatency?: string(name='TotalLatency', description='The total time consumed by the request. Unit: milliseconds.', example='1345'),
      plugin?: string(name='plugin', description='The plug-in hit by the request and the relevant context.', example='[]'),
    }
  ](name='RequestLog')
  }(name='RequestLogs', description='The request logs.'),
}

model QueryRequestLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRequestLogsResponseBody(name='body'),
}

async function queryRequestLogs(request: QueryRequestLogsRequest): QueryRequestLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRequestLogs', 'POST', '/', 'json', false, 'json', request);
}

model ReactivateDomainRequest {
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReactivateDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model ReactivateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReactivateDomainResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   You must solve the problem that is mentioned in the domain name exception prompt before you can reactivate the domain name.
  * *   A typical reason why a custom domain name becomes abnormal is that the domain name does not have an ICP filing or the domain name is included in a blacklist by the administration. When a custom domain name is abnormal, users cannot use it to access APIs.
  * *   You can call this operation to reactivate the domain name to resume normal access.
  *
 */
async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReactivateDomain', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', example='[{\\"entry\\":\\"192.168.1.0/24\\",\\"comment\\":\\"WhiteIp\\"}]', position='Query'),
  aclId: string(name='AclId', example='acl-bp12ag0xxcfhq1ll68wp9', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model RemoveAccessControlListEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAccessControlListEntryResponseBody(name='body'),
}

async function removeAccessControlListEntry(request: RemoveAccessControlListEntryRequest): RemoveAccessControlListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAccessControlListEntry', 'POST', '/', 'json', false, 'json', request);
}

model RemoveApiProductsAuthoritiesRequest {
  apiProductIds: [ string ](name='ApiProductIds', description='The API products.', shrink='simple', position='Query'),
  appId: long(name='AppId', description='The application ID.', example='110982490', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveApiProductsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
}

model RemoveApiProductsAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveApiProductsAuthoritiesResponseBody(name='body'),
}

async function removeApiProductsAuthorities(request: RemoveApiProductsAuthoritiesRequest): RemoveApiProductsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApiProductsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveApisAuthoritiesRequest {
  apiIds: string(name='ApiIds', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78', position='Query'),
  appId: long(name='AppId', description='The ID of the app. The ID is generated by the system and globally unique.', example='2386789', position='Query'),
  description?: string(name='Description', description='The description of the authorization.', example='Queries weather based on the region name', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model RemoveApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model RemoveApisAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveApisAuthoritiesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and callers.
  * *   Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
  *
 */
async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApisAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAppsAuthoritiesRequest {
  apiId: string(name='ApiId', description='The ID of the API. This ID is generated by the system and globally unique.', example='baacc592e63a4cb6a41920d9d3f91f38', position='Query'),
  appIds: string(name='AppIds', description='The IDs of applications. Separate multiple application IDs with commas (,). A maximum of 100 applications IDs can be entered.', example='2386789,3286798', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model RemoveAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model RemoveAppsAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAppsAuthoritiesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and callers.
  * *   Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
  *
 */
async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAppsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlApisRequest {
  apiIds?: string(name='ApiIds', description='The IDs of the APIs from which you want to unbind the ACL.

*   If this parameter is not specified, the ACL is unbound from all the APIs in the specified environment of the API group.
*   The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='123', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930', position='Query'),
  ipControlId: string(name='IpControlId', description='The ID of the ACL.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model RemoveIpControlApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveIpControlApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveIpControlApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   The unbinding takes effect immediately. After the API is unbound from the ACL, the corresponding environment does not have any IP address access control in place for the API.
  *
 */
async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlPolicyItemRequest {
  ipControlId: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1', position='Query'),
  policyItemIds: string(name='PolicyItemIds', description='The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.', example='P151533572852362;P151533557750260', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveIpControlPolicyItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveIpControlPolicyItemResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
 */
async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSignatureApisRequest {
  apiIds?: string(name='ApiIds', description='The IDs of the APIs from which you want to unbind the signature key.

*   If this parameter is not specified, the signature key is unbound from all the APIs in the specified environment of the API group.
*   The IDs of the APIs that you want to manage. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='123', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the API that you want to manage belongs.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', description='The ID of the signature key.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model RemoveSignatureApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveSignatureApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSignatureApisResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The operation takes effect immediately. The request sent from API Gateway to the backend service does not contain the signature string. The corresponding verification step can be removed from the backend.
  *
 */
async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSignatureApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTrafficControlApisRequest {
  apiIds?: string(name='ApiIds', description='The IDs of the APIs from which you want to unbind a specified throttling policy.

*   If this parameter is not specified, the throttling policy is unbound from all the APIs in the specified environment of the API group.
*   Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='4223a10e-eed3-46a6-8b7c-23003f488153', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy that you want to unbind from APIs.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
}

model RemoveTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveTrafficControlApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTrafficControlApisResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This API allows you to unbind a specified throttling policy from up to 100 APIs at a time.
  *
 */
async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTrafficControlApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVpcAccessRequest {
  instanceId: string(name='InstanceId', description='The ID of an ECS or SLB instance in the VPC.', example='i-uf6bzcg1pr4oh5jjmxxx', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', description='Specifies whether batch work is required.', example='true', position='Query'),
  port: int32(name='Port', description='The port number that corresponds to the instance.', example='80', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf657qec7lx42paw3qxxx', position='Query'),
}

model RemoveVpcAccessResponseBody = {
  apis?: {
    api?: [ 
    {
      apiId?: string(name='ApiId', description='API Id', example='551877242a4b4f3a84a56b7c3570e4a7'),
      groupId?: string(name='GroupId', description='The ID of the API group.', example='78d54ac4424d4b1792e33ca35637e8e4'),
      stageId?: string(name='StageId', description='The ID of the runtime environment.', example='d1e1ee28f9fb4b729db0ee8ca76ff0a5'),
    }
  ](name='Api')
  }(name='Apis', description='API operations'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model RemoveVpcAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveVpcAccessResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   Revokes the permissions of API Gateway to access your VPC instance.
  * >  Deleting an authorization affects the associated API. Before you delete the authorization, make sure that it is not used by the API.
  *
 */
async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVpcAccess', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVpcAccessAndAbolishApisRequest {
  instanceId: string(name='InstanceId', example='i-uf6iaale3gfef9t9cb41', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', example='true', position='Query'),
  port: int32(name='Port', example='8080', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1iw82phcgkvupgfv0o8', position='Query'),
}

model RemoveVpcAccessAndAbolishApisResponseBody = {
  operationId?: string(name='OperationId', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model RemoveVpcAccessAndAbolishApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveVpcAccessAndAbolishApisResponseBody(name='body'),
}

async function removeVpcAccessAndAbolishApis(request: RemoveVpcAccessAndAbolishApisRequest): RemoveVpcAccessAndAbolishApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVpcAccessAndAbolishApis', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppCodeRequest {
  appCode: string(name='AppCode', description='The AppCode of the app.', example='3aaf905a0a1f4f0eabc6d891dfa08afc', position='Query'),
  newAppCode?: string(name='NewAppCode', description='The new AppCode of the app.', example='6f0e7ab2aa5f4b8fb18421e6edf4fb6c2', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model ResetAppCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppCodeResponseBody(name='body'),
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppCode', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppSecretRequest {
  appKey: string(name='AppKey', description='The key of the application that is used to make an API call.', example='60030986', position='Query'),
  newAppKey?: string(name='NewAppKey', description='The new AppKey that you set must be globally unique.', example='testAppKey', position='Query'),
  newAppSecret?: string(name='NewAppSecret', description='The new key of the application. To improve compatibility, we recommend that you use other parameters.', example='test***', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model ResetAppSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppSecretResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   A new secret is automatically generated after you have called this operation. This secret cannot be customized.
  * *   The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
  *
 */
async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByAppRequest {
  appId: long(name='AppId', example='110797019', position='Query'),
  language: string(name='Language', example='java', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByAppResponseBody = {
  downloadLink?: string(name='DownloadLink', example='UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......'),
  requestId?: string(name='RequestId', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
}

model SdkGenerateByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SdkGenerateByAppResponseBody(name='body'),
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByApp', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByAppForRegionRequest {
  appId: long(name='AppId', example='110906109', position='Query'),
  language: string(name='Language', example='java', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByAppForRegionResponseBody = {
  downloadLink?: string(name='DownloadLink', example='UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......'),
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model SdkGenerateByAppForRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SdkGenerateByAppForRegionResponseBody(name='body'),
}

async function sdkGenerateByAppForRegion(request: SdkGenerateByAppForRegionRequest): SdkGenerateByAppForRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByAppForRegion', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByGroupRequest {
  groupId: string(name='GroupId', example='1a991a450b9548a1a3df38fd3af117c2', position='Query'),
  language: string(name='Language', example='java', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByGroupResponseBody = {
  downloadLink?: string(name='DownloadLink', example='http://oss-bucket/object'),
  requestId?: string(name='RequestId', example='D0075BDA-8AED-5073-A70A-FE44E86AB20F'),
}

model SdkGenerateByGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SdkGenerateByGroupResponseBody(name='body'),
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetAccessControlListAttributeRequest {
  aclId: string(name='AclId', example='acl-bp1ohqkonqybecf4llbrc', position='Query'),
  aclName: string(name='AclName', example='testAcl', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetAccessControlListAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
}

model SetAccessControlListAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessControlListAttributeResponseBody(name='body'),
}

async function setAccessControlListAttribute(request: SetAccessControlListAttributeRequest): SetAccessControlListAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccessControlListAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SetApiProductsAuthoritiesRequest {
  apiProductIds: [ string ](name='ApiProductIds', shrink='simple', position='Query'),
  appId: long(name='AppId', example='111385984', position='Query'),
  authValidTime?: string(name='AuthValidTime', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetApiProductsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', example='2603F41E-77FC-59A3-840E-296578A9BDE0'),
}

model SetApiProductsAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApiProductsAuthoritiesResponseBody(name='body'),
}

async function setApiProductsAuthorities(request: SetApiProductsAuthoritiesRequest): SetApiProductsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApiProductsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model SetApisAuthoritiesRequest {
  apiIds?: string(name='ApiIds', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78', position='Query'),
  appId: long(name='AppId', description='The ID of the app. This ID is generated by the system and globally unique.', example='2386789', position='Query'),
  authValidTime?: string(name='AuthValidTime', description='The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.', example='Fri,05Oct201816:00:00GMT', position='Query'),
  description?: string(name='Description', description='The description of the authorization.', example='Queries weather based on the region name', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model SetApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model SetApisAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApisAuthoritiesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and callers.
  * *   API providers can authorize any apps to call their APIs.
  * *   API callers can authorize their own apps to call the APIs that they have purchased.
  *
 */
async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApisAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model SetAppsAuthToApiProductRequest {
  apiProductId: string(name='ApiProductId', example='117b7a64a8b3f064eaa4a47ac62aac5e', position='Query'),
  appIds: [ long ](name='AppIds', position='Query'),
  authValidTime?: string(name='AuthValidTime', example='2023-05-31T08:15:39Z', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetAppsAuthToApiProductResponseBody = {
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model SetAppsAuthToApiProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAppsAuthToApiProductResponseBody(name='body'),
}

async function setAppsAuthToApiProduct(request: SetAppsAuthToApiProductRequest): SetAppsAuthToApiProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAppsAuthToApiProduct', 'POST', '/', 'json', false, 'json', request);
}

model SetAppsAuthoritiesRequest {
  apiId: string(name='ApiId', description='The ID of the API. This ID is generated by the system and globally unique.', example='baacc592e63a4cb6a41920d9d3f91f38', position='Query'),
  appIds: string(name='AppIds', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='2386789,3389798', position='Query'),
  authValidTime?: string(name='AuthValidTime', description='The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.', example='Fri,05Oct201816:00:00GMT', position='Query'),
  description?: string(name='Description', description='The description of the authorization.', example='Queries weather based on the region name', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='TEST', position='Query'),
}

model SetAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model SetAppsAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAppsAuthoritiesResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers and callers.
  * *   API providers can authorize any apps to call their APIs.
  * *   API callers can authorize their own apps to call the APIs that they have purchased.
  *
 */
async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAppsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainRequest {
  bindStageName?: string(name='BindStageName', description='The environment which you can access by using the domain name. If you do not specify this parameter, the domain name can be used to access all environments.

If you specify an environment, the domain name can be used to access only the specified environment. Valid values:

*   TEST
*   PRE
*   RELEASE

If you want to use the domain name to access all environments, set this parameter to an empty string ("").', example='RELEASE', position='Query'),
  customDomainType?: string(name='CustomDomainType', description='The network type of the domain name to be bound. Default value: INTERNET. Valid values:

*   INTERNET
*   INTRANET. If you set this parameter to this value, the domain name cannot be used on the Internet.', example='INTERNET', position='Query'),
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  isForce?: boolean(name='IsForce', description='Specifies whether this binding relationship takes precedence over the binding relationships between the domain name and other API groups. If you set this parameter to true, this binding relationship takes precedence, and the domain name is automatically unbound from other API groups. This operation brings risks. Proceed with caution.', example='false', position='Query'),
  isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps', description='Specifies whether to redirect HTTP requests to HTTPS requests.', example='false', position='Query'),
}

model SetDomainResponseBody = {
  domainBindingStatus?: string(name='DomainBindingStatus', description='The binding status of the custom domain name. Valid values:

*   **BINDING**: The domain name has been bound.
*   **BOUND**: The domain name has not been bound.', example='BINDING'),
  domainLegalStatus?: string(name='DomainLegalStatus', description='The validity status of the domain name. Valid values:

*   **NORMAL**: The domain name is valid.
*   **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.', example='NORMAL'),
  domainName?: string(name='DomainName', description='The custom domain name.', example='api.demo.com'),
  domainRemark?: string(name='DomainRemark', description='The remarks on the domain name, such as the cause of an exception.', example='None'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus', description='The status of the domain name that uses the WebSocket feature.', example='NORMAL'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AA90E87-3506-5AA6-AFFB-A4D53B4F6231'),
  subDomain?: string(name='SubDomain', description='The second-level domain name assigned to the API group. This domain name is used to test API calls.', example='xxx-cn-hangzhou.alicloudapi.com'),
}

model SetDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainResponseBody(name='body'),
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainCertificateRequest {
  caCertificateBody?: string(name='CaCertificateBody', description='The content of the CA certificate.', example='Content of the CA certificate', position='Query'),
  certificateBody?: string(name='CertificateBody', description='The certificate content.', example='For more information, see the following request examples', position='Query'),
  certificateName: string(name='CertificateName', description='The name of the SSL certificate.', example='test_cert', position='Query'),
  certificatePrivateKey?: string(name='CertificatePrivateKey', description='The private key of the SSL certificate.', example='For more information, see the following request examples', position='Query'),
  domainName: string(name='DomainName', description='The custom domain name.', example='api.demo.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.', example='927d50c0f2e54b359919923d908bb015', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sslVerifyDepth?: string(name='SslVerifyDepth', description='The certificate verification depth.', example='2', position='Query'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model SetDomainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainCertificateResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The SSL certificate must match the custom domain name.
  * *   After the SSL certificate is bound, HTTPS-based API services become available.
  *
 */
async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainWebSocketStatusRequest {
  actionValue: string(name='ActionValue', description='The action.', example='OPEN', position='Query'),
  domainName: string(name='DomainName', description='The custom domain name.', example='ac.fluvet.cn', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='cf976e63b70c4993807e7bb9345d4695', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  WSSEnable?: string(name='WSSEnable', position='Query'),
}

model SetDomainWebSocketStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
}

model SetDomainWebSocketStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainWebSocketStatusResponseBody(name='body'),
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainWebSocketStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetGroupAuthAppCodeRequest {
  authAppCode: string(name='AuthAppCode', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetGroupAuthAppCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGroupAuthAppCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetGroupAuthAppCodeResponseBody(name='body'),
}

async function setGroupAuthAppCode(request: SetGroupAuthAppCodeRequest): SetGroupAuthAppCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGroupAuthAppCode', 'POST', '/', 'json', false, 'json', request);
}

model SetIpControlApisRequest {
  apiIds: string(name='ApiIds', description='The API IDs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group.', example='0009db9c828549768a200320714b8930', position='Query'),
  ipControlId: string(name='IpControlId', description='The ID of the ACL.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='TEST', position='Query'),
}

model SetIpControlApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetIpControlApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetIpControlApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   A maximum of 100 APIs can be bound at a time.
  *
 */
async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model SetSignatureApisRequest {
  apiIds: string(name='ApiIds', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group to which the API that you want to manage belongs.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', description='The ID of the signature key.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='TEST', position='Query'),
}

model SetSignatureApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetSignatureApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSignatureApisResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This operation allows you to bind a signature key to an API. You can bind signature keys for up to 100 APIs at a time.
  *
 */
async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSignatureApis', 'POST', '/', 'json', false, 'json', request);
}

model SetTrafficControlApisRequest {
  apiIds: string(name='ApiIds', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group containing the APIs to which you want to bind a specified throttling policy.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='556d15cb-0808-432d-ab07-33e6b961b703', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
  trafficControlId: string(name='TrafficControlId', description='The ID of the throttling policy.', example='dd05f1c54d6749eda95f9fa6d491449a', position='Query'),
}

model SetTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetTrafficControlApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetTrafficControlApisResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   This API allows you to bind a specific throttling policy to up to 100 APIs at a time.
  *
 */
async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTrafficControlApis', 'POST', '/', 'json', false, 'json', request);
}

model SetVpcAccessRequest {
  description?: string(name='Description', description='The description of the VPC.', example='description of the VPC', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of an ECS or SLB instance in the VPC.', example='i-uf6bzcg1pr4oh5jjmxxx', position='Query'),
  name: string(name='Name', description='The name of the authorization. The name must be unique.', example='test', position='Query'),
  port: int32(name='Port', description='The port number that corresponds to the instance.', example='80', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='123'),
    }
  ](name='Tag', description='The tag of objects that match the rule. You can specify multiple tags.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC. The VPC must be an available one that belongs to the same account as the API.', example='vpc-uf657qec7lx42paw3qxxx', position='Query'),
  vpcTargetHostName?: string(name='VpcTargetHostName', description='The host of the backend service.', example='iot.hu***ng.com', position='Query'),
}

model SetVpcAccessResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  vpcAccessId?: string(name='VpcAccessId', description='The ID of the VPC access authorization.', example='4c68e061860f441ab72af7404137440e'),
}

model SetVpcAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetVpcAccessResponseBody(name='body'),
}

/**
  * * This operation is intended for API providers.
  * * This operation is used to authorize API Gateway to access your VPC instance.
  *
 */
async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVpcAccess', 'POST', '/', 'json', false, 'json', request);
}

model SetWildcardDomainPatternsRequest {
  domainName: string(name='DomainName', description='The custom domain name.', example='*.prd.e-eir.com', position='Query'),
  groupId: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='0009db9c828549768a200320714b8930', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns', description='The wildcard domain name mode.', example='[\\"{svc}.prd.e-eir.com\\"]', position='Query'),
}

model SetWildcardDomainPatternsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D0075BDA-8AED-5073-A70A-FE44E86AB20F'),
}

model SetWildcardDomainPatternsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetWildcardDomainPatternsResponseBody(name='body'),
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWildcardDomainPatterns', 'POST', '/', 'json', false, 'json', request);
}

model SwitchApiRequest {
  apiId: string(name='ApiId', description='The ID of the API.', example='d6f679aeb3be4b91b3688e887ca1fe16', position='Query'),
  description: string(name='Description', description='The description of the switch operation.', example='for_demo', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='123', position='Query'),
  historyVersion: string(name='HistoryVersion', description='The historical version that you want to switch to.', example='20160705104552292', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='RELEASE', position='Query'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model SwitchApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchApiResponseBody(name='body'),
}

/**
  * *   This API is intended for API providers.
  * *   The historical version can be obtained by calling the **DescribeHistoryApis** operation.
  * *   Only APIs that have been published more than once have historical versions.
  * *   This operation can only be performed on running APIs. Exercise caution when you perform this operation because the operation cannot be undone. The operation takes up to 5 seconds.
  * *   The switch operation is essentially a publish operation. A reason for this operation must be provided.
  *
 */
async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchApi', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='The ID of the resource.', example='285bb759342649a1b70c2093a772e087', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Tags are bound to API groups, plug-ins, and applications. You can use tags to manage cloud resources by group. Valid values:

*   **apiGroup**
*   **plugin**
*   **app**', example='apiGroup', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of tag N.', example='env'),
      value: string(name='Value', description='The value of tag N.', example='\\" \\"'),
    }
  ](name='Tag', description='The tag of objects that match the lifecycle rule. You can specify multiple tags.', example='2021022811', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * *   All tags (key-value pairs) are applied to all resources of a specified ResourceId, with each resource specified as ResourceId.N.
  * *   Tag.N is a resource tag consisting of a key-value pair: Tag.N.Key and Tag.N.Value.
  * *   If you call this operation to tag multiple resources simultaneously, either all or none of the resources will be tagged.
  * *   If you specify Tag.1.Value in addition to required parameters, you must also specify Tag.1.Key. Otherwise, an InvalidParameter.TagKey error is reported. A tag that has a value must have the corresponding key, but the key can be an empty string.
  * *   If a tag with the same key has been bound to a resource, the new tag will overwrite the existing one.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs.', example='285bb759342649a1b70c2093a772e087', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Tags are bound to API groups, plug-ins, and applications. You can use tags to manage cloud resources by group. Valid values:

*   **apiGroup**
*   **plugin**
*   **app**', example='apiGroup', position='Query'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='0f96f124-1276-4f81-b52b-c554240beb4c', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys of the resource.', example='env', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * *   If you call this operation to untag multiple resources simultaneously, either all or none of the resources will be untagged.
  * *   If you specify resource IDs without specifying tag keys and set the All parameter to true, all tags bound to the specified resources will be deleted. If a resource does not have any tags, the request is not processed but a success is returned.
  * *   If you specify resource IDs without specifying tag keys and set the All parameter to false, the request is not processed but a success is returned.
  * *   When tag keys are specified, the All parameter is invalid.
  * *   When multiple resources and key-value pairs are specified, the specified tags bound to the resources are deleted.
  *
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model ValidateVpcConnectivityRequest {
  instanceId: string(name='InstanceId', description='The ID of the API Gateway instance.', example='apigateway-hz-72bc18******', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcAccessId: string(name='VpcAccessId', description='The ID of the VPC access authorization.', example='5f1b3216f9********e2c1297b6741dc', position='Query'),
}

model ValidateVpcConnectivityResponseBody = {
  connected?: boolean(name='Connected', description='Indicates whether the API Gateway instance is connected to the port. Valid values:

*   **true**
*   **false**', example='True'),
  ipType?: string(name='IpType', description='Indicates whether the instance in the authorization is an ECS instance or an SLB instance when the instance ID in the authorization is an IP address. Valid values:

*   **ECS**
*   **SLB**
*   **INVALID**: The instance type corresponding to the IP address is invalid.', example='ECS'),
  requestId?: string(name='RequestId', description='The request ID.', example='9A591B5B-0EC2-5463-B8B8-1984AE3AEBF1'),
}

model ValidateVpcConnectivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateVpcConnectivityResponseBody(name='body'),
}

async function validateVpcConnectivity(request: ValidateVpcConnectivityRequest): ValidateVpcConnectivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateVpcConnectivity', 'POST', '/', 'json', false, 'json', request);
}

