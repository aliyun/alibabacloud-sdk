/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'NBF';
  @version = '2021-11-10_21-31-25-86';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApiTestRequest {
  testCmd?: string(name='testCmd', position='Query'),
}

model ApiTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function apiTest(request: ApiTestRequest): ApiTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApiTest', 'POST', '/nbf_gateway_inner/1_0_0/apiTest', 'string', false, 'json', request);
}

model BuildSdkRequest {
  buildCmd?: string(name='buildCmd', position='Query'),
}

model BuildSdkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function buildSdk(request: BuildSdkRequest): BuildSdkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildSdk', 'POST', '/nbf_gateway_inner/1_0_0/buildSdk', 'string', false, 'json', request);
}

model CreateAndReleaseApiRequest {
  creatApiCmd: string(name='creatApiCmd', position='Query'),
}

model CreateAndReleaseApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function createAndReleaseApi(request: CreateAndReleaseApiRequest): CreateAndReleaseApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAndReleaseApi', 'POST', '/nbf_gateway_inner/1_0_0/createAndReleaseApi', 'string', false, 'json', request);
}

model CreateSdkVersionRequest {
  createSdkCmd?: string(name='createSdkCmd', position='Query'),
}

model CreateSdkVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function createSdkVersion(request: CreateSdkVersionRequest): CreateSdkVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSdkVersion', 'POST', '/nbf_gateway_inner/1_0_0/createSdkVersion', 'string', false, 'json', request);
}

model DeleteApiRequest {
  apiExternalId?: string(name='apiExternalId', position='Query'),
}

model DeleteApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApi', 'POST', '/nbf_gateway_inner/1_0_0/deleteApi', 'string', false, 'json', request);
}

model GetResultRequest {
  taskId?: string(name='taskId', position='Query'),
}

model GetResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function getResult(request: GetResultRequest): GetResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResult', 'POST', '/nbf_gateway_inner/1_0_0/getResult', 'string', false, 'json', request);
}

model OpenApiGenericProxyRequest {
}

model OpenApiGenericProxyResponseBody = {
  data?: string(name='data'),
}

model OpenApiGenericProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenApiGenericProxyResponseBody(name='body'),
}

async function openApiGenericProxy(request: OpenApiGenericProxyRequest): OpenApiGenericProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OpenApiGenericProxy', 'POST', '/nbf_gateway_inner/1_0_0/openApiGenericProxy', 'json', false, 'json', request);
}

model PreCheckRequest {
  apiSchemaDTO: string(name='apiSchemaDTO', position='Query'),
  groupVersionExtraInfo: string(name='groupVersionExtraInfo', position='Query'),
  namespaceExternalId: string(name='namespaceExternalId', position='Query'),
}

model PreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function preCheck(request: PreCheckRequest): PreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreCheck', 'POST', '/nbf_gateway_inner/1_0_0/preCheck', 'string', false, 'json', request);
}

model PublishSdkRequest {
  taskId?: string(name='taskId', position='Query'),
}

model PublishSdkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function publishSdk(request: PublishSdkRequest): PublishSdkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishSdk', 'POST', '/nbf_gateway_inner/1_0_0/publishSdk', 'string', false, 'json', request);
}

model SerializeApiRequest {
  apiSchemaDTO?: string(name='apiSchemaDTO', position='Query'),
  type?: string(name='type', position='Query'),
}

model SerializeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function serializeApi(request: SerializeApiRequest): SerializeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SerializeApi', 'POST', '/nbf_gateway_inner/1_0_0/serializeApi', 'string', false, 'json', request);
}

model UpdateAndReleaseApiRequest {
  updateApiCmd?: string(name='updateApiCmd', position='Query'),
}

model UpdateAndReleaseApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

async function updateAndReleaseApi(request: UpdateAndReleaseApiRequest): UpdateAndReleaseApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAndReleaseApi', 'POST', '/nbf_gateway_inner/1_0_0/updateAndReleaseApi', 'string', false, 'json', request);
}

