/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('live-interaction', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddGroupMembersRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='会话id'),
    initMembers?: [ 
      {
        appUid?: string(name='AppUid'),
        role?: int32(name='Role', description='1群主，2管理员，3普通'),
        nick?: string(name='Nick'),
        joinTime?: long(name='JoinTime', description='unix毫秒数'),
        extensions?: map[string]string(name='Extensions'),
      }
    ](name='InitMembers', description='初始化成员'),
  }(name='RequestParams', description='群加人请求实体'),
}

model AddGroupMembersShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群加人请求实体'),
}

model AddGroupMembersResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model AddGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: AddGroupMembersResponseBody(name='body'),
}

async function addGroupMembersWithOptions(tmpReq: AddGroupMembersRequest, runtime: Util.RuntimeOptions): AddGroupMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddGroupMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGroupMembers', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGroupMembers(request: AddGroupMembersRequest): AddGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGroupMembersWithOptions(request, runtime);
}

model AddGroupSilenceBlacklistRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='群会话id'),
    members?: [ string ](name='Members', description='禁言用户列表'),
    silenceDuration?: long(name='SilenceDuration', description='禁言时长'),
  }(name='RequestParams', description='群禁言添加白名单请求体'),
}

model AddGroupSilenceBlacklistShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群禁言添加白名单请求体'),
}

model AddGroupSilenceBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model AddGroupSilenceBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddGroupSilenceBlacklistResponseBody(name='body'),
}

async function addGroupSilenceBlacklistWithOptions(tmpReq: AddGroupSilenceBlacklistRequest, runtime: Util.RuntimeOptions): AddGroupSilenceBlacklistResponse {
  Util.validateModel(tmpReq);
  var request = new AddGroupSilenceBlacklistShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGroupSilenceBlacklist', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGroupSilenceBlacklist(request: AddGroupSilenceBlacklistRequest): AddGroupSilenceBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGroupSilenceBlacklistWithOptions(request, runtime);
}

model AddGroupSilenceWhitelistRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='群会话id'),
    members?: [ string ](name='Members', description='禁言用户列表'),
  }(name='RequestParams', description='群禁言添加白名单请求体'),
}

model AddGroupSilenceWhitelistShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群禁言添加白名单请求体'),
}

model AddGroupSilenceWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model AddGroupSilenceWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: AddGroupSilenceWhitelistResponseBody(name='body'),
}

async function addGroupSilenceWhitelistWithOptions(tmpReq: AddGroupSilenceWhitelistRequest, runtime: Util.RuntimeOptions): AddGroupSilenceWhitelistResponse {
  Util.validateModel(tmpReq);
  var request = new AddGroupSilenceWhitelistShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGroupSilenceWhitelist', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGroupSilenceWhitelist(request: AddGroupSilenceWhitelistRequest): AddGroupSilenceWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGroupSilenceWhitelistWithOptions(request, runtime);
}

model CancelSilenceAllGroupMembersRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    operatorAppUid?: string(name='OperatorAppUid', description='操作者uid'),
  }(name='RequestParams'),
}

model CancelSilenceAllGroupMembersShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model CancelSilenceAllGroupMembersResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model CancelSilenceAllGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: CancelSilenceAllGroupMembersResponseBody(name='body'),
}

async function cancelSilenceAllGroupMembersWithOptions(tmpReq: CancelSilenceAllGroupMembersRequest, runtime: Util.RuntimeOptions): CancelSilenceAllGroupMembersResponse {
  Util.validateModel(tmpReq);
  var request = new CancelSilenceAllGroupMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelSilenceAllGroupMembers', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelSilenceAllGroupMembers(request: CancelSilenceAllGroupMembersRequest): CancelSilenceAllGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelSilenceAllGroupMembersWithOptions(request, runtime);
}

model CreateGroupRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    uuid?: string(name='Uuid', description='UUID(不可重复)'),
    creatorAppUid?: string(name='CreatorAppUid', description='创建者'),
    title?: string(name='Title', description='群标题'),
    iconMediaId?: string(name='IconMediaId', description='图标的id'),
    extensions?: map[string]string(name='Extensions', description='拓展字段'),
    initMembers?: [ 
      {
        appUid?: string(name='AppUid'),
        role?: int32(name='Role', description='1群主，2管理员，3普通'),
        nick?: string(name='Nick'),
        joinTime?: long(name='JoinTime', description='unix时间毫秒数'),
        extensions?: map[string]string(name='Extensions'),
      }
    ](name='InitMembers', description='初始化成员'),
  }(name='RequestParams', description='创建群聊请求实体'),
}

model CreateGroupShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='创建群聊请求实体'),
}

model CreateGroupResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    appCid?: string(name='AppCid'),
  }(name='Result'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroupWithOptions(tmpReq: CreateGroupRequest, runtime: Util.RuntimeOptions): CreateGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateGroup', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupWithOptions(request, runtime);
}

model CreateRoomRequest {
  request?: {
    domain?: string(name='domain'),
    ownerId?: string(name='ownerId'),
    ownerNick?: string(name='ownerNick'),
    title?: string(name='title'),
  }(name='Request'),
}

model CreateRoomResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: {
    roomId?: string(name='roomId'),
  }(name='Result'),
  requestId?: string(name='RequestId'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoomWithOptions(request: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRoom', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model DestroyRoomRequest {
  request?: {
    domain?: string(name='domain'),
    roomId?: string(name='roomId'),
    openId?: string(name='openId'),
  }(name='Request'),
}

model DestroyRoomResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='result'),
  success?: boolean(name='Success'),
}

model DestroyRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyRoomResponseBody(name='body'),
}

async function destroyRoomWithOptions(request: DestroyRoomRequest, runtime: Util.RuntimeOptions): DestroyRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DestroyRoom', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function destroyRoom(request: DestroyRoomRequest): DestroyRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyRoomWithOptions(request, runtime);
}

model DismissGroupRequest {
  appId?: string(name='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作用户'),
    appCid?: string(name='AppCid', description='会话id'),
  }(name='RequestParams', description='解散群聊请求实体'),
}

model DismissGroupShrinkRequest {
  appId?: string(name='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='解散群聊请求实体'),
}

model DismissGroupResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model DismissGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DismissGroupResponseBody(name='body'),
}

async function dismissGroupWithOptions(tmpReq: DismissGroupRequest, runtime: Util.RuntimeOptions): DismissGroupResponse {
  Util.validateModel(tmpReq);
  var request = new DismissGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DismissGroup', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dismissGroup(request: DismissGroupRequest): DismissGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return dismissGroupWithOptions(request, runtime);
}

model GetGroupMemberByIdsRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话id'),
    appUids?: [ string ](name='AppUids', description='appUid'),
  }(name='RequestParams', description='群聊设置扩展字段请求实体'),
}

model GetGroupMemberByIdsShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群聊设置扩展字段请求实体'),
}

model GetGroupMemberByIdsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    members?: [ 
      {
        appUid?: string(name='AppUid'),
        role?: int32(name='Role'),
        nick?: string(name='Nick'),
        joinTime?: long(name='JoinTime'),
        extensions?: map[string]string(name='Extensions'),
      }
    ](name='Members', description='群成员'),
  }(name='Result'),
}

model GetGroupMemberByIdsResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupMemberByIdsResponseBody(name='body'),
}

async function getGroupMemberByIdsWithOptions(tmpReq: GetGroupMemberByIdsRequest, runtime: Util.RuntimeOptions): GetGroupMemberByIdsResponse {
  Util.validateModel(tmpReq);
  var request = new GetGroupMemberByIdsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetGroupMemberByIds', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getGroupMemberByIds(request: GetGroupMemberByIdsRequest): GetGroupMemberByIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupMemberByIdsWithOptions(request, runtime);
}

model GetLoginTokenRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户ID'),
    appKey?: string(name='AppKey', description='AppKey'),
    deviceId?: string(name='DeviceId', description='设备ID'),
  }(name='RequestParams'),
}

model GetLoginTokenShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model GetLoginTokenResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    accessToken?: string(name='AccessToken', description='登录Tokon'),
    refreshToken?: string(name='RefreshToken', description='更新Token'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', description='登录Token过期时间'),
  }(name='Result'),
}

model GetLoginTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginTokenResponseBody(name='body'),
}

async function getLoginTokenWithOptions(tmpReq: GetLoginTokenRequest, runtime: Util.RuntimeOptions): GetLoginTokenResponse {
  Util.validateModel(tmpReq);
  var request = new GetLoginTokenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLoginToken', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLoginToken(request: GetLoginTokenRequest): GetLoginTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoginTokenWithOptions(request, runtime);
}

model GetMediaUploadUrlRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    type?: int32(name='Type', description='多媒体资源类型(取值参照文档中类型枚举值)'),
  }(name='RequestParams'),
}

model GetMediaUploadUrlShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model GetMediaUploadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    uploadUrl?: string(name='UploadUrl', description='上传Url'),
    mediaId?: string(name='MediaId', description='多媒体文件ID'),
  }(name='Result', description='调用返回值'),
}

model GetMediaUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaUploadUrlResponseBody(name='body'),
}

async function getMediaUploadUrlWithOptions(tmpReq: GetMediaUploadUrlRequest, runtime: Util.RuntimeOptions): GetMediaUploadUrlResponse {
  Util.validateModel(tmpReq);
  var request = new GetMediaUploadUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaUploadUrl', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaUploadUrl(request: GetMediaUploadUrlRequest): GetMediaUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaUploadUrlWithOptions(request, runtime);
}

model GetMediaUrlRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    mediaId?: string(name='MediaId', description='多媒体资源ID'),
    urlExpireTime?: long(name='UrlExpireTime', description='URL过期时间(秒，最大86400)'),
  }(name='RequestParams'),
}

model GetMediaUrlShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model GetMediaUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    url?: string(name='Url', description='文件Url'),
  }(name='Result'),
}

model GetMediaUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaUrlResponseBody(name='body'),
}

async function getMediaUrlWithOptions(tmpReq: GetMediaUrlRequest, runtime: Util.RuntimeOptions): GetMediaUrlResponse {
  Util.validateModel(tmpReq);
  var request = new GetMediaUrlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaUrl', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaUrl(request: GetMediaUrlRequest): GetMediaUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaUrlWithOptions(request, runtime);
}

model GetMessageByIdRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    msgId?: string(name='MsgId', description='消息Id'),
  }(name='RequestParams', description='请求实体'),
}

model GetMessageByIdShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='请求实体'),
}

model GetMessageByIdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    msgId?: string(name='MsgId', description='消息Id'),
    appCid?: string(name='AppCid', description='会话Id'),
    conversationType?: int32(name='ConversationType', description='会话类型'),
    createTime?: long(name='CreateTime', description='创建时间'),
    senderId?: string(name='SenderId', description='发送者的用户Id'),
    contentType?: int32(name='ContentType', description='消息类型'),
    content?: string(name='Content', description='消息体'),
    extensions?: map[string]string(name='Extensions'),
  }(name='Result'),
}

model GetMessageByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageByIdResponseBody(name='body'),
}

async function getMessageByIdWithOptions(tmpReq: GetMessageByIdRequest, runtime: Util.RuntimeOptions): GetMessageByIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetMessageByIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMessageById', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMessageById(request: GetMessageByIdRequest): GetMessageByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMessageByIdWithOptions(request, runtime);
}

model ImportGroupChatConversationRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    uuid?: string(name='Uuid', description='唯一标识，用于重入'),
    ownerAppUid?: string(name='OwnerAppUid', description='群主uid'),
    title?: string(name='Title', description='群标题'),
    iconMediaId?: string(name='IconMediaId', description='群头像'),
    memberLimit?: long(name='MemberLimit', description='群上限'),
    extensions?: map[string]string(name='Extensions', description='扩展字段'),
    createTime?: long(name='CreateTime', description='创建时间'),
    silenceAll?: boolean(name='SilenceAll', description='是否全员禁言'),
  }(name='RequestParams'),
}

model ImportGroupChatConversationShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model ImportGroupChatConversationResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    appCid?: string(name='AppCid', description='群ID'),
  }(name='Result'),
}

model ImportGroupChatConversationResponse = {
  headers: map[string]string(name='headers'),
  body: ImportGroupChatConversationResponseBody(name='body'),
}

async function importGroupChatConversationWithOptions(tmpReq: ImportGroupChatConversationRequest, runtime: Util.RuntimeOptions): ImportGroupChatConversationResponse {
  Util.validateModel(tmpReq);
  var request = new ImportGroupChatConversationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportGroupChatConversation', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importGroupChatConversation(request: ImportGroupChatConversationRequest): ImportGroupChatConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return importGroupChatConversationWithOptions(request, runtime);
}

model ImportGroupChatMemberRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='群ID'),
    groupChatMembers?: [ 
      {
        appUid?: string(name='AppUid', description='用户ID'),
        role?: long(name='Role', description='成员权限'),
        nick?: string(name='Nick', description='昵称'),
        top?: boolean(name='Top', description='是否置顶'),
        redPoint?: long(name='RedPoint', description='未读数'),
        mute?: boolean(name='Mute', description='是否免打扰'),
        visible?: boolean(name='Visible', description='是否可见'),
        joinTime?: long(name='JoinTime', description='入群时间戳'),
        modifyTime?: long(name='ModifyTime', description='最后修改时间'),
        extensions?: map[string]string(name='Extensions', description='自定义信息'),
      }
    ](name='GroupChatMembers'),
  }(name='RequestParams'),
}

model ImportGroupChatMemberShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model ImportGroupChatMemberResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model ImportGroupChatMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ImportGroupChatMemberResponseBody(name='body'),
}

async function importGroupChatMemberWithOptions(tmpReq: ImportGroupChatMemberRequest, runtime: Util.RuntimeOptions): ImportGroupChatMemberResponse {
  Util.validateModel(tmpReq);
  var request = new ImportGroupChatMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportGroupChatMember', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importGroupChatMember(request: ImportGroupChatMemberRequest): ImportGroupChatMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return importGroupChatMemberWithOptions(request, runtime);
}

model ImportMessageRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    messages?: [ 
      {
        uuid?: string(name='Uuid', description='唯一标识，用于重入'),
        appCid?: string(name='AppCid', description='会话ID'),
        conversationType?: long(name='ConversationType', description='会话类型1 单聊 2 群聊'),
        senderId?: string(name='SenderId', description='发送者ID'),
        receiverIds?: [ string ](name='ReceiverIds', description='接受者列表, 群聊如果列表为空者全员接收'),
        contentType?: long(name='ContentType', description='消息类型'),
        content?: string(name='Content', description='消息内容'),
        createTime?: long(name='CreateTime', description='消息发送时间戳'),
        extensions?: map[string]string(name='Extensions', description='自定义信息'),
      }
    ](name='Messages'),
  }(name='RequestParams'),
}

model ImportMessageShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model ImportMessageResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    importMessageResult?: map[string]ResultImportMessageResultValue(name='ImportMessageResult'),
  }(name='Result'),
}

model ImportMessageResponse = {
  headers: map[string]string(name='headers'),
  body: ImportMessageResponseBody(name='body'),
}

async function importMessageWithOptions(tmpReq: ImportMessageRequest, runtime: Util.RuntimeOptions): ImportMessageResponse {
  Util.validateModel(tmpReq);
  var request = new ImportMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportMessage', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importMessage(request: ImportMessageRequest): ImportMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return importMessageWithOptions(request, runtime);
}

model ImportSingleConversationRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    conversation?: {
      appCid?: string(name='AppCid', description='会话ID'),
      appUids?: [ string ](name='AppUids', description='用户ID列表'),
      extensions?: map[string]string(name='Extensions', description='扩展字段'),
      createTime?: long(name='CreateTime'),
    }(name='Conversation', description='会话基础信息'),
    userConversations?: map[string]RequestParamsUserConversationsValue(name='UserConversations', description='用户会话视图'),
  }(name='RequestParams'),
}

model ImportSingleConversationShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model ImportSingleConversationResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model ImportSingleConversationResponse = {
  headers: map[string]string(name='headers'),
  body: ImportSingleConversationResponseBody(name='body'),
}

async function importSingleConversationWithOptions(tmpReq: ImportSingleConversationRequest, runtime: Util.RuntimeOptions): ImportSingleConversationResponse {
  Util.validateModel(tmpReq);
  var request = new ImportSingleConversationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportSingleConversation', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importSingleConversation(request: ImportSingleConversationRequest): ImportSingleConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSingleConversationWithOptions(request, runtime);
}

model InitTenantRequest {
  request?: {
    domain?: string(name='domain'),
  }(name='Request'),
}

model InitTenantResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: boolean(name='result'),
  requestId?: string(name='RequestId'),
}

model InitTenantResponse = {
  headers: map[string]string(name='headers'),
  body: InitTenantResponseBody(name='body'),
}

async function initTenantWithOptions(request: InitTenantRequest, runtime: Util.RuntimeOptions): InitTenantResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitTenant', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initTenant(request: InitTenantRequest): InitTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return initTenantWithOptions(request, runtime);
}

model KickOffRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户ID'),
    appKeys?: [ string ](name='AppKeys', description='被踢下线的App的AppKey列表，为空时全部踢下线'),
    information?: string(name='Information', description='下线文案'),
  }(name='RequestParams'),
}

model KickOffShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model KickOffResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model KickOffResponse = {
  headers: map[string]string(name='headers'),
  body: KickOffResponseBody(name='body'),
}

async function kickOffWithOptions(tmpReq: KickOffRequest, runtime: Util.RuntimeOptions): KickOffResponse {
  Util.validateModel(tmpReq);
  var request = new KickOffShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KickOff', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function kickOff(request: KickOffRequest): KickOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickOffWithOptions(request, runtime);
}

model ListGroupSilenceMembersRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='群会话id'),
  }(name='RequestParams', description='群禁言添加白名单请求体'),
}

model ListGroupSilenceMembersShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群禁言添加白名单请求体'),
}

model ListGroupSilenceMembersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    appCid?: string(name='AppCid', description='群会话id'),
    whitelist?: [ string ](name='Whitelist', description='禁言白名单'),
    blacklist?: map[string]string(name='Blacklist', description='禁言黑名单用户及对应禁言时长'),
  }(name='Result'),
}

model ListGroupSilenceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupSilenceMembersResponseBody(name='body'),
}

async function listGroupSilenceMembersWithOptions(tmpReq: ListGroupSilenceMembersRequest, runtime: Util.RuntimeOptions): ListGroupSilenceMembersResponse {
  Util.validateModel(tmpReq);
  var request = new ListGroupSilenceMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListGroupSilenceMembers', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listGroupSilenceMembers(request: ListGroupSilenceMembersRequest): ListGroupSilenceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupSilenceMembersWithOptions(request, runtime);
}

model RecallMessageRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='操作者ID'),
    appCid?: string(name='AppCid', description='会话ID'),
    msgId?: string(name='MsgId', description='消息ID'),
    type?: int32(name='Type', description='撤回显示类型（默认为0)。0：静默撤回，不显示撤回信息，1：普通撤回，显示撤回信息；'),
    operatorType?: int32(name='OperatorType', description='操作者类型(默认为0)。0: 发送者; 1: 群主; 2: 系统; 3: 安全合规; 101: 业务自定义类型'),
    extensions?: map[string]string(name='Extensions', description='业务自定义扩展字段'),
  }(name='RequestParams'),
}

model RecallMessageShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model RecallMessageResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RecallMessageResponse = {
  headers: map[string]string(name='headers'),
  body: RecallMessageResponseBody(name='body'),
}

async function recallMessageWithOptions(tmpReq: RecallMessageRequest, runtime: Util.RuntimeOptions): RecallMessageResponse {
  Util.validateModel(tmpReq);
  var request = new RecallMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecallMessage', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recallMessage(request: RecallMessageRequest): RecallMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recallMessageWithOptions(request, runtime);
}

model RemoveExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: map[string]any(name='RequestParams'),
}

model RemoveExtensionByKeysResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveExtensionByKeysResponseBody(name='body'),
}

async function removeExtensionByKeysWithOptions(request: RemoveExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveExtensionByKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeExtensionByKeys(request: RemoveExtensionByKeysRequest): RemoveExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeExtensionByKeysWithOptions(request, runtime);
}

model RemoveGroupExtensionByKeysRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话id'),
    keys?: [ string ](name='Keys', description='拓展字段的key'),
  }(name='RequestParams', description='移除群聊拓展字段请求实体'),
}

model RemoveGroupExtensionByKeysShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='移除群聊拓展字段请求实体'),
}

model RemoveGroupExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveGroupExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveGroupExtensionByKeysResponseBody(name='body'),
}

async function removeGroupExtensionByKeysWithOptions(tmpReq: RemoveGroupExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveGroupExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveGroupExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveGroupExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeGroupExtensionByKeys(request: RemoveGroupExtensionByKeysRequest): RemoveGroupExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeGroupExtensionByKeysWithOptions(request, runtime);
}

model RemoveGroupMembersRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid'),
    appCid?: string(name='AppCid'),
    appUidsRemoved?: [ string ](name='AppUidsRemoved'),
  }(name='RequestParams', description='群踢人请求实体'),
}

model RemoveGroupMembersShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群踢人请求实体'),
}

model RemoveGroupMembersResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveGroupMembersResponseBody(name='body'),
}

async function removeGroupMembersWithOptions(tmpReq: RemoveGroupMembersRequest, runtime: Util.RuntimeOptions): RemoveGroupMembersResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveGroupMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveGroupMembers', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeGroupMembers(request: RemoveGroupMembersRequest): RemoveGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeGroupMembersWithOptions(request, runtime);
}

model RemoveGroupSilenceBlacklistRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='群会话id'),
    members?: [ string ](name='Members', description='禁言用户列表'),
  }(name='RequestParams', description='群禁言删除黑名单请求体'),
}

model RemoveGroupSilenceBlacklistShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群禁言删除黑名单请求体'),
}

model RemoveGroupSilenceBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveGroupSilenceBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveGroupSilenceBlacklistResponseBody(name='body'),
}

async function removeGroupSilenceBlacklistWithOptions(tmpReq: RemoveGroupSilenceBlacklistRequest, runtime: Util.RuntimeOptions): RemoveGroupSilenceBlacklistResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveGroupSilenceBlacklistShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveGroupSilenceBlacklist', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeGroupSilenceBlacklist(request: RemoveGroupSilenceBlacklistRequest): RemoveGroupSilenceBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeGroupSilenceBlacklistWithOptions(request, runtime);
}

model RemoveGroupSilenceWhitelistRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    operatorAppUid?: string(name='OperatorAppUid', description='操作者'),
    appCid?: string(name='AppCid', description='群会话id'),
    members?: [ string ](name='Members', description='禁言用户列表'),
  }(name='RequestParams', description='群禁言添加白名单请求体'),
}

model RemoveGroupSilenceWhitelistShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群禁言添加白名单请求体'),
}

model RemoveGroupSilenceWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveGroupSilenceWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveGroupSilenceWhitelistResponseBody(name='body'),
}

async function removeGroupSilenceWhitelistWithOptions(tmpReq: RemoveGroupSilenceWhitelistRequest, runtime: Util.RuntimeOptions): RemoveGroupSilenceWhitelistResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveGroupSilenceWhitelistShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveGroupSilenceWhitelist', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeGroupSilenceWhitelist(request: RemoveGroupSilenceWhitelistRequest): RemoveGroupSilenceWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeGroupSilenceWhitelistWithOptions(request, runtime);
}

model RemoveMessageExtensionByKeysRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    msgId?: string(name='MsgId', description='消息ID'),
    keys?: [ string ](name='Keys', description='需删除的Key'),
  }(name='RequestParams'),
}

model RemoveMessageExtensionByKeysShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model RemoveMessageExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  code?: string(name='Code', description='错误码，成功时为0'),
  message?: string(name='Message', description='错误信息，成功时为0	空'),
}

model RemoveMessageExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMessageExtensionByKeysResponseBody(name='body'),
}

async function removeMessageExtensionByKeysWithOptions(tmpReq: RemoveMessageExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveMessageExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveMessageExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveMessageExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeMessageExtensionByKeys(request: RemoveMessageExtensionByKeysRequest): RemoveMessageExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMessageExtensionByKeysWithOptions(request, runtime);
}

model RemoveSingleChatExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户id'),
    appCid?: string(name='AppCid', description='会话id'),
    keys?: [ string ](name='Keys'),
  }(name='RequestParams', description='单聊移除拓展字段请求实体'),
}

model RemoveSingleChatExtensionByKeysShrinkRequest {
  appId?: string(name='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='单聊移除拓展字段请求实体'),
}

model RemoveSingleChatExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveSingleChatExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSingleChatExtensionByKeysResponseBody(name='body'),
}

async function removeSingleChatExtensionByKeysWithOptions(tmpReq: RemoveSingleChatExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveSingleChatExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveSingleChatExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveSingleChatExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeSingleChatExtensionByKeys(request: RemoveSingleChatExtensionByKeysRequest): RemoveSingleChatExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSingleChatExtensionByKeysWithOptions(request, runtime);
}

model RemoveUserConversationExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户id'),
    appCid?: string(name='AppCid', description='会话id'),
    keys?: [ string ](name='Keys'),
  }(name='RequestParams', description='移除用户拓展字段请求实体'),
}

model RemoveUserConversationExtensionByKeysShrinkRequest {
  appId?: string(name='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='移除用户拓展字段请求实体'),
}

model RemoveUserConversationExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model RemoveUserConversationExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserConversationExtensionByKeysResponseBody(name='body'),
}

async function removeUserConversationExtensionByKeysWithOptions(tmpReq: RemoveUserConversationExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveUserConversationExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveUserConversationExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUserConversationExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUserConversationExtensionByKeys(request: RemoveUserConversationExtensionByKeysRequest): RemoveUserConversationExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserConversationExtensionByKeysWithOptions(request, runtime);
}

model RemoveUserExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: map[string]any(name='RequestParams'),
}

model RemoveUserExtensionByKeysResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveUserExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserExtensionByKeysResponseBody(name='body'),
}

async function removeUserExtensionByKeysWithOptions(request: RemoveUserExtensionByKeysRequest, runtime: Util.RuntimeOptions): RemoveUserExtensionByKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUserExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUserExtensionByKeys(request: RemoveUserExtensionByKeysRequest): RemoveUserExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserExtensionByKeysWithOptions(request, runtime);
}

model SendMessageRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    uuid?: string(name='Uuid', description='消息UUID'),
    appCid?: string(name='AppCid', description='会话ID'),
    conversationType?: int32(name='ConversationType', description='会话类型'),
    senderId?: string(name='SenderId', description='发送者UID'),
    contentType?: int32(name='ContentType', description='消息内容类型'),
    content?: string(name='Content', description='消息内容Json'),
    extensions?: map[string]string(name='Extensions', description='消息扩展字段'),
    options?: {
      redPointPolicy?: int32(name='RedPointPolicy', description='未读消息小红点控制。0:增加小红点; 1:不增加小红点'),
      receiveScopeOption?: {
        receiverIds?: [ string ](name='ReceiverIds', description='接受者列表'),
        excludeReceiverIds?: [ string ](name='ExcludeReceiverIds', description='不接收者列表'),
        receiveScope?: int32(name='ReceiveScope', description='消息获取控制。0: 会话内除指定ExcludeReceivers均可获取；1: 会话内仅指定ReceiverIds可获取'),
      }(name='ReceiveScopeOption', description='接受相关设置'),
      singleChatCreateRequest?: {
        appCid?: string(name='AppCid', description='单聊会话ID'),
        appUids?: [ string ](name='AppUids', description='用户ID列表'),
        extensions?: map[string]string(name='Extensions', description='扩展信息'),
        userConversation?: map[string]RequestParamsOptionsSingleChatCreateRequestUserConversationValue(name='UserConversation', description='用户会话视图信息'),
      }(name='SingleChatCreateRequest', description='单聊会话不存在时新建自定义单聊请求体'),
    }(name='Options', description='消息设置'),
  }(name='RequestParams', description='消息发送请求体'),
}

model SendMessageShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='消息发送请求体'),
}

model SendMessageResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: {
    msgId?: string(name='MsgId', description='消息ID'),
    createTime?: long(name='CreateTime', description='消息创建时间戳(毫秒)'),
  }(name='Result'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(tmpReq: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendMessage', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model SetExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: map[string]any(name='RequestParams'),
}

model SetExtensionByKeysResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SetExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetExtensionByKeysResponseBody(name='body'),
}

async function setExtensionByKeysWithOptions(request: SetExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetExtensionByKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setExtensionByKeys(request: SetExtensionByKeysRequest): SetExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setExtensionByKeysWithOptions(request, runtime);
}

model SetGroupExtensionByKeysRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid'),
    extensions?: map[string]string(name='Extensions', description='扩展字段'),
  }(name='RequestParams', description='群聊设置扩展字段请求实体'),
}

model SetGroupExtensionByKeysShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='群聊设置扩展字段请求实体'),
}

model SetGroupExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model SetGroupExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetGroupExtensionByKeysResponseBody(name='body'),
}

async function setGroupExtensionByKeysWithOptions(tmpReq: SetGroupExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetGroupExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new SetGroupExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetGroupExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setGroupExtensionByKeys(request: SetGroupExtensionByKeysRequest): SetGroupExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGroupExtensionByKeysWithOptions(request, runtime);
}

model SetMessageExtensionByKeysRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    msgId?: string(name='MsgId', description='消息ID'),
    extensions?: map[string]string(name='Extensions', description='需设置的K-V对'),
  }(name='RequestParams'),
}

model SetMessageExtensionByKeysShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model SetMessageExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  code?: string(name='Code', description='错误码，成功时为0'),
  message?: string(name='Message', description='错误信息，成功时为空'),
}

model SetMessageExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetMessageExtensionByKeysResponseBody(name='body'),
}

async function setMessageExtensionByKeysWithOptions(tmpReq: SetMessageExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetMessageExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new SetMessageExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetMessageExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setMessageExtensionByKeys(request: SetMessageExtensionByKeysRequest): SetMessageExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMessageExtensionByKeysWithOptions(request, runtime);
}

model SetSingleChatExtensionByKeysRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户id'),
    appCid?: string(name='AppCid', description='会话id'),
    extensions?: map[string]string(name='Extensions', description='拓展字段'),
  }(name='RequestParams', description='创建群聊请求实体'),
}

model SetSingleChatExtensionByKeysShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='创建群聊请求实体'),
}

model SetSingleChatExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model SetSingleChatExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetSingleChatExtensionByKeysResponseBody(name='body'),
}

async function setSingleChatExtensionByKeysWithOptions(tmpReq: SetSingleChatExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetSingleChatExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new SetSingleChatExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetSingleChatExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setSingleChatExtensionByKeys(request: SetSingleChatExtensionByKeysRequest): SetSingleChatExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSingleChatExtensionByKeysWithOptions(request, runtime);
}

model SetUserConversationExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: {
    appUid?: string(name='AppUid', description='用户id'),
    appCid?: string(name='AppCid', description='会话id'),
    extensions?: map[string]string(name='Extensions', description='拓展字段'),
  }(name='RequestParams', description='设置用户拓展字段请求实体'),
}

model SetUserConversationExtensionByKeysShrinkRequest {
  appId?: string(name='AppId'),
  requestParamsShrink?: string(name='RequestParams', description='设置用户拓展字段请求实体'),
}

model SetUserConversationExtensionByKeysResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model SetUserConversationExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserConversationExtensionByKeysResponseBody(name='body'),
}

async function setUserConversationExtensionByKeysWithOptions(tmpReq: SetUserConversationExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetUserConversationExtensionByKeysResponse {
  Util.validateModel(tmpReq);
  var request = new SetUserConversationExtensionByKeysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetUserConversationExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setUserConversationExtensionByKeys(request: SetUserConversationExtensionByKeysRequest): SetUserConversationExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserConversationExtensionByKeysWithOptions(request, runtime);
}

model SetUserExtensionByKeysRequest {
  appId?: string(name='AppId'),
  requestParams?: map[string]any(name='RequestParams'),
}

model SetUserExtensionByKeysResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SetUserExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserExtensionByKeysResponseBody(name='body'),
}

async function setUserExtensionByKeysWithOptions(request: SetUserExtensionByKeysRequest, runtime: Util.RuntimeOptions): SetUserExtensionByKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetUserExtensionByKeys', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setUserExtensionByKeys(request: SetUserExtensionByKeysRequest): SetUserExtensionByKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserExtensionByKeysWithOptions(request, runtime);
}

model SilenceAllGroupMembersRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    operatorAppUid?: string(name='OperatorAppUid', description='操作者uid'),
  }(name='RequestParams'),
}

model SilenceAllGroupMembersShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model SilenceAllGroupMembersResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model SilenceAllGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: SilenceAllGroupMembersResponseBody(name='body'),
}

async function silenceAllGroupMembersWithOptions(tmpReq: SilenceAllGroupMembersRequest, runtime: Util.RuntimeOptions): SilenceAllGroupMembersResponse {
  Util.validateModel(tmpReq);
  var request = new SilenceAllGroupMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SilenceAllGroupMembers', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function silenceAllGroupMembers(request: SilenceAllGroupMembersRequest): SilenceAllGroupMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return silenceAllGroupMembersWithOptions(request, runtime);
}

model UpdateGroupIconRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    operatorAppUid?: string(name='OperatorAppUid', description='操作者用户ID'),
    iconMediaId?: string(name='IconMediaId', description='群聊头像文件MediaID'),
  }(name='RequestParams'),
}

model UpdateGroupIconShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model UpdateGroupIconResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateGroupIconResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupIconResponseBody(name='body'),
}

async function updateGroupIconWithOptions(tmpReq: UpdateGroupIconRequest, runtime: Util.RuntimeOptions): UpdateGroupIconResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGroupIconShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGroupIcon', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGroupIcon(request: UpdateGroupIconRequest): UpdateGroupIconResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupIconWithOptions(request, runtime);
}

model UpdateGroupMembersRoleRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    operatorAppUid?: string(name='OperatorAppUid', description='操作者uid'),
    rrole?: int32(name='Rrole', description='角色'),
    appUids?: [ string ](name='AppUids', description='需要更改的uids'),
  }(name='RequestParams'),
}

model UpdateGroupMembersRoleShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model UpdateGroupMembersRoleResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateGroupMembersRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupMembersRoleResponseBody(name='body'),
}

async function updateGroupMembersRoleWithOptions(tmpReq: UpdateGroupMembersRoleRequest, runtime: Util.RuntimeOptions): UpdateGroupMembersRoleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGroupMembersRoleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGroupMembersRole', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGroupMembersRole(request: UpdateGroupMembersRoleRequest): UpdateGroupMembersRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupMembersRoleWithOptions(request, runtime);
}

model UpdateGroupTitleRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParams?: {
    appCid?: string(name='AppCid', description='会话ID'),
    operatorAppUid?: string(name='OperatorAppUid', description='操作者用户ID'),
    title?: string(name='Title', description='群聊标题'),
  }(name='RequestParams'),
}

model UpdateGroupTitleShrinkRequest {
  appId?: string(name='AppId', description='AppId'),
  requestParamsShrink?: string(name='RequestParams'),
}

model UpdateGroupTitleResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateGroupTitleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupTitleResponseBody(name='body'),
}

async function updateGroupTitleWithOptions(tmpReq: UpdateGroupTitleRequest, runtime: Util.RuntimeOptions): UpdateGroupTitleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGroupTitleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.requestParams)) {
    request.requestParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestParams, 'RequestParams', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGroupTitle', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGroupTitle(request: UpdateGroupTitleRequest): UpdateGroupTitleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGroupTitleWithOptions(request, runtime);
}

model UpdateTenantStatusRequest {
  request?: {
    domain?: string(name='domain'),
    status?: long(name='status'),
  }(name='Request'),
}

model UpdateTenantStatusResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: boolean(name='result'),
  requestId?: string(name='RequestId'),
}

model UpdateTenantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTenantStatusResponseBody(name='body'),
}

async function updateTenantStatusWithOptions(request: UpdateTenantStatusRequest, runtime: Util.RuntimeOptions): UpdateTenantStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTenantStatus', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTenantStatus(request: UpdateTenantStatusRequest): UpdateTenantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTenantStatusWithOptions(request, runtime);
}

model ResultImportMessageResultValue = {
  result?: long(name='result', description='0 成功'),
  msgId?: string(name='msgId', description='消息ID'),
}

model RequestParamsUserConversationsValue = {
  top?: boolean(name='Top', description='是否置顶'),
  redPoint?: long(name='RedPoint', description='未读数'),
  mute?: boolean(name='Mute', description='是否免打扰'),
  visible?: boolean(name='Visible', description='是否可见'),
  createTime?: long(name='CreateTime', description='创建时间戳'),
  modifyTime?: long(name='ModifyTime', description='修改时间戳'),
  userExtensions?: map[string]string(name='UserExtensions', description='自定义信息'),
}

model RequestParamsOptionsSingleChatCreateRequestUserConversationValue = {
  userExtensions?: map[string]string(name='UserExtensions', description='扩展信息'),
}

