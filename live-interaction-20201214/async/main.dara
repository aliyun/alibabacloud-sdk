/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'live-interaction';
  @version = '2020-12-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddGroupMembersRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000****'),
    initMembers: [ 
      {
        appUid?: string(name='AppUid', example='888666'),
        extensions?: map[string]string(name='Extensions'),
        joinTime?: long(name='JoinTime', example='1608739200000'),
        nick?: string(name='Nick', example='test'),
        role?: int32(name='Role', example='3'),
      }
    ](name='InitMembers'),
    operatorAppUid?: string(name='OperatorAppUid', example='112233'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model AddGroupMembersResponseBody = {
  code?: string(name='Code', example='Group.xxx'),
  message?: string(name='Message', example='Parameter Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model AddGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGroupMembersResponseBody(name='body'),
}

async function addGroupMembers(request: AddGroupMembersRequest): AddGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model AddGroupSilenceBlacklistRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$12345678'),
    members: [ string ](name='Members'),
    operatorAppUid?: string(name='OperatorAppUid', example='123'),
    silenceDuration?: long(name='SilenceDuration', example='600'),
  }(name='RequestParams', example='apitest', shrink='json', position='Body'),
}

model AddGroupSilenceBlacklistResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model AddGroupSilenceBlacklistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGroupSilenceBlacklistResponseBody(name='body'),
}

async function addGroupSilenceBlacklist(request: AddGroupSilenceBlacklistRequest): AddGroupSilenceBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGroupSilenceBlacklist', 'POST', '/', 'json', true, 'form', request);
}

model AddGroupSilenceWhitelistRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000'),
    members: [ string ](name='Members'),
    operatorAppUid?: string(name='OperatorAppUid', example='123'),
  }(name='RequestParams', example='apitest', shrink='json', position='Body'),
}

model AddGroupSilenceWhitelistResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model AddGroupSilenceWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGroupSilenceWhitelistResponseBody(name='body'),
}

async function addGroupSilenceWhitelist(request: AddGroupSilenceWhitelistRequest): AddGroupSilenceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGroupSilenceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model BindInterconnectionCidRequest {
  appId: string(name='AppId', description='AppId', example='apitest', position='Body'),
  requestParams: {
    aimAppCid: string(name='AimAppCid', example='$2$112345'),
    dingTalkCid: string(name='DingTalkCid', example='111489'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model BindInterconnectionCidResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model BindInterconnectionCidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindInterconnectionCidResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function bindInterconnectionCid(request: BindInterconnectionCidRequest): BindInterconnectionCidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindInterconnectionCid', 'POST', '/', 'json', true, 'form', request);
}

model BindInterconnectionUidRequest {
  appId: string(name='AppId', description='AppId', example='apitest', position='Body'),
  requestParams: {
    appUid: string(name='AppUid', example='123'),
    dingTalkUid: string(name='DingTalkUid', example='abc#corpId'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model BindInterconnectionUidResponseBody = {
  code?: string(name='Code', example='system'),
  message?: string(name='Message', example='error'),
  requestId?: string(name='RequestId', example='1234'),
}

model BindInterconnectionUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindInterconnectionUidResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function bindInterconnectionUid(request: BindInterconnectionUidRequest): BindInterconnectionUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindInterconnectionUid', 'POST', '/', 'json', true, 'form', request);
}

model CancelSilenceAllGroupMembersRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$10010'),
    operatorAppUid?: string(name='OperatorAppUid', example='123123'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model CancelSilenceAllGroupMembersResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model CancelSilenceAllGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelSilenceAllGroupMembersResponseBody(name='body'),
}

async function cancelSilenceAllGroupMembers(request: CancelSilenceAllGroupMembersRequest): CancelSilenceAllGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSilenceAllGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model CreateGroupRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    creatorAppUid: string(name='CreatorAppUid', example='9100088885****'),
    entranceId?: string(name='EntranceId'),
    extensions?: map[string]string(name='Extensions'),
    iconMediaId?: string(name='IconMediaId', example='abc123'),
    initMembers: [ 
      {
        appUid?: string(name='AppUid', example='8866'),
        extensions?: map[string]string(name='Extensions'),
        joinTime?: long(name='JoinTime', example='1608739200000'),
        nick?: string(name='Nick', example='Alice'),
        role?: int32(name='Role', example='3'),
      }
    ](name='InitMembers'),
    title?: string(name='Title', example='good'),
    uuid: string(name='Uuid', example='12345678998765'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model CreateGroupResponseBody = {
  code?: string(name='Code', example='Group.xxx'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    appCid?: string(name='AppCid', example='$2$111000'),
  }(name='Result'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateRoomRequest {
  request?: {
    domain?: string(name='domain', example='testAppKey'),
    ownerId?: string(name='ownerId', example='1234'),
    ownerNick?: string(name='ownerNick', example='testNick'),
    title?: string(name='title', example='testTitle'),
  }(name='Request', example='CreateRoom', position='Body'),
}

model CreateRoomResponseBody = {
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378****'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    roomId?: string(name='roomId', example='testRoomId'),
  }(name='Result'),
  errorCode?: string(name='errorCode', example='1001'),
  errorMsg?: string(name='errorMsg', example='参数错误'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRoomResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoom', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
}

model DeleteAppResponseBody = {
  code?: string(name='Code', example='50001'),
  message?: string(name='Message', example='param error'),
  requestId?: string(name='RequestId', description='Id of the request', example='wefsdfttdsfsfwaf34456456sse'),
  success?: boolean(name='Success', example='false'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', true, 'form', request);
}

model DestroyRoomRequest {
  request?: {
    domain?: string(name='domain', example='testAppKey'),
    openId?: string(name='openId', example='testOpenId'),
    roomId?: string(name='roomId', example='testRoomId'),
  }(name='Request', example='DestroyRoom', position='Body'),
}

model DestroyRoomResponseBody = {
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378****'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  errorCode?: string(name='errorCode', example='1001'),
  errorMsg?: string(name='errorMsg', example='参数错误'),
  result?: boolean(name='result', example='true'),
}

model DestroyRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DestroyRoomResponseBody(name='body'),
}

async function destroyRoom(request: DestroyRoomRequest): DestroyRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyRoom', 'POST', '/', 'json', true, 'form', request);
}

model DismissGroupRequest {
  appId: string(name='AppId', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='111000'),
    operatorAppUid?: string(name='OperatorAppUid'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model DismissGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DismissGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DismissGroupResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function dismissGroup(request: DismissGroupRequest): DismissGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DismissGroup', 'POST', '/', 'json', true, 'form', request);
}

model GetCommonConfigRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
}

model GetCommonConfigResponseBody = {
  code?: string(name='Code', example='50001'),
  message?: string(name='Message', example='param error'),
  requestId?: string(name='RequestId', description='Id of the request', example='12345678'),
  result?: {
    commonConfig?: {
      appConfigs?: [ 
        {
          appKey?: string(name='AppKey', description='appKey', example='sdfwfsefewadzsdfasd'),
          platform?: string(name='Platform', example='iOS'),
        }
      ](name='AppConfigs'),
      loginConfig?: {
        loginType?: int32(name='LoginType', example='1'),
      }(name='LoginConfig'),
    }(name='CommonConfig'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model GetCommonConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCommonConfigResponseBody(name='body'),
}

async function getCommonConfig(request: GetCommonConfigRequest): GetCommonConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommonConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetGroupByIdRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$11222333'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetGroupByIdResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    appCid?: string(name='AppCid', example='$2$111000'),
    ceateTime?: long(name='CeateTime', example='1599999999'),
    extensions?: map[string]string(name='Extensions'),
    iconMediaId?: string(name='IconMediaId', example='@$111444'),
    memberCount?: int32(name='MemberCount', example='7'),
    memberLimit?: int32(name='MemberLimit', example='100'),
    ownerAppUid?: string(name='OwnerAppUid', example='123'),
    title?: string(name='Title'),
  }(name='Result'),
}

model GetGroupByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGroupByIdResponseBody(name='body'),
}

async function getGroupById(request: GetGroupByIdRequest): GetGroupByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroupById', 'POST', '/', 'json', true, 'form', request);
}

model GetGroupMemberByIdsRequest {
  appId: string(name='AppId', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='111000'),
    appUids: [ string ](name='AppUids'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetGroupMemberByIdsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        appUid?: string(name='AppUid'),
        extensions?: map[string]string(name='Extensions'),
        joinTime?: long(name='JoinTime'),
        nick?: string(name='Nick'),
        role?: int32(name='Role'),
      }
    ](name='Members'),
  }(name='Result'),
}

model GetGroupMemberByIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGroupMemberByIdsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getGroupMemberByIds(request: GetGroupMemberByIdsRequest): GetGroupMemberByIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroupMemberByIds', 'POST', '/', 'json', true, 'form', request);
}

model GetIMConfigRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
}

model GetIMConfigResponseBody = {
  code?: string(name='Code', example='0'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  messaage?: string(name='Messaage', example='error'),
  requestId?: string(name='RequestId'),
  result?: {
    imConfig?: {
      callbackConfig?: {
        apis?: map[string]boolean(name='Apis'),
        callbackUrl?: string(name='CallbackUrl', example='http://test.com'),
        events?: map[string]boolean(name='Events'),
        signatureKey?: string(name='SignatureKey', example='apitest_0'),
        signatureValue?: string(name='SignatureValue', example='sfwefwefwef'),
        spis?: map[string]boolean(name='Spis'),
      }(name='CallbackConfig'),
      msgConfig?: {
        clientMsgRecallTimeIntervalMinute?: long(name='ClientMsgRecallTimeIntervalMinute', example='2'),
      }(name='MsgConfig'),
    }(name='ImConfig'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model GetIMConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIMConfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getIMConfig(request: GetIMConfigRequest): GetIMConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIMConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetLoginTokenRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appKey: string(name='AppKey', example='649b79ab544d737fe9e0bc6c67cf****'),
    appUid: string(name='AppUid', example='95000****'),
    deviceId: string(name='DeviceId', example='iOS_Device_F8594F51-FA81-470F-AAD9-6E254B77****'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetLoginTokenResponseBody = {
  code?: string(name='Code', example='0'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378****'),
  result?: {
    accessToken?: string(name='AccessToken', example='EwOmBL8hRycisMQOw9hZppkd1ng4styC1KYAUtzzkqRTYWIE3uOSPkc3pcqEhOPtAIS4N825n4eee29sUwkV****'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', example='86400000'),
    refreshToken?: string(name='RefreshToken', example='oauth_k1:rPIULQBrIpwxdhQCa5XPu17+t0vgwnzkJSLoc5hKe+6o/RAiuXPNQ7DfKiIL0V92I0sWZe/WOoEw9H86EqrT****'),
  }(name='Result'),
}

model GetLoginTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLoginTokenResponseBody(name='body'),
}

async function getLoginToken(request: GetLoginTokenRequest): GetLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginToken', 'POST', '/', 'json', true, 'form', request);
}

model GetMediaUploadUrlRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    mimeType: string(name='MimeType', example='jpg'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetMediaUploadUrlResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    mediaId?: string(name='MediaId', example='$iQEMAqNqcGcDAQTNAyAFzQJYBtoAIYQBpAuf1dQCqrY4aIGemoBLONIDzwAAAXazCVSoBM0NyAcACA****'),
    uploadUrl?: string(name='UploadUrl', example='http://oss-aaajff.aliyun.com/aa****'),
  }(name='Result'),
}

model GetMediaUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMediaUploadUrlResponseBody(name='body'),
}

async function getMediaUploadUrl(request: GetMediaUploadUrlRequest): GetMediaUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaUploadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetMediaUrlRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    mediaId: string(name='MediaId', example='$iQEMAqNqcGcDAQTNAyAFzQJYBtoAIYQBpAuf1dQCqrY4aIGemoBLONIDzwAAAXazCVSoBM0NyAcACA****'),
    urlExpireTime?: long(name='UrlExpireTime', example='300'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetMediaUrlResponseBody = {
  code?: string(name='Code', example='Group.xxx'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    url?: string(name='Url', example='http://wu****-file-test.aliyuncs.com/ddmedia/mediaId.type?OSSAccessKeyId=ossak&Signature=sign%3D&Expires=160983****'),
  }(name='Result'),
}

model GetMediaUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMediaUrlResponseBody(name='body'),
}

async function getMediaUrl(request: GetMediaUrlRequest): GetMediaUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetMessageByIdRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    msgId: string(name='MsgId', example='123.EAUNIT'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetMessageByIdResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    appCid?: string(name='AppCid', example='$1$125:888'),
    content?: string(name='Content', example='{"text": "hello"}'),
    contentType?: int32(name='ContentType', example='1'),
    conversationType?: int32(name='ConversationType', example='1'),
    createTime?: long(name='CreateTime', example='1588999999'),
    extensions?: map[string]string(name='Extensions'),
    msgId?: string(name='MsgId', example='12345$PNM'),
    senderId?: string(name='SenderId', example='125'),
  }(name='Result'),
}

model GetMessageByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMessageByIdResponseBody(name='body'),
}

async function getMessageById(request: GetMessageByIdRequest): GetMessageByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageById', 'POST', '/', 'json', true, 'form', request);
}

model GetRoomStatisticsRequest {
  request: {
    domain: string(name='Domain', example='7m***q'),
    roomId: string(name='RoomId', example='9645**c180a1'),
  }(name='Request', position='Body'),
}

model GetRoomStatisticsResponseBody = {
  errorCode?: string(name='ErrorCode', example='1000'),
  errorMessage?: string(name='ErrorMessage', example='internal error'),
  requestId?: string(name='RequestId', example='FE22D613-D3C6-4A58-87CA-F21FC85AA08E'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    onlineCount?: int32(name='OnlineCount', example='100'),
    pv?: int32(name='PV', example='100'),
    uv?: int32(name='UV', example='100'),
  }(name='Result'),
}

model GetRoomStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRoomStatisticsResponseBody(name='body'),
}

async function getRoomStatistics(request: GetRoomStatisticsRequest): GetRoomStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoomStatistics', 'POST', '/', 'json', true, 'form', request);
}

model GetUserMuteSettingRequest {
  appId: string(name='AppId', position='Body'),
  requestParams: {
    appUids: [ string ](name='AppUids'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model GetUserMuteSettingResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    userMuteSettings?: map[string]ResultUserMuteSettingsValue(name='UserMuteSettings'),
  }(name='Result'),
}

model GetUserMuteSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserMuteSettingResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getUserMuteSetting(request: GetUserMuteSettingRequest): GetUserMuteSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserMuteSetting', 'POST', '/', 'json', true, 'form', request);
}

model ImportGroupChatConversationRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    createTime?: long(name='CreateTime', example='1613700223555'),
    extensions?: map[string]string(name='Extensions'),
    iconMediaId?: string(name='IconMediaId', example='$iQEMAqNqcGcDAQTNAyAFzQJYBtoAIYQBpAuf1dQCqrY4aIGemoBLONIDzwAAAXazCVSoBM0NyAcACA****'),
    memberLimit?: long(name='MemberLimit', example='50'),
    ownerAppUid: string(name='OwnerAppUid', example='123'),
    silenceAll?: boolean(name='SilenceAll', example='false'),
    title?: string(name='Title', example='群标题'),
    uuid: string(name='Uuid', example='123456'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ImportGroupChatConversationResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    appCid?: string(name='AppCid', example='$2$12345'),
  }(name='Result'),
}

model ImportGroupChatConversationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportGroupChatConversationResponseBody(name='body'),
}

async function importGroupChatConversation(request: ImportGroupChatConversationRequest): ImportGroupChatConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportGroupChatConversation', 'POST', '/', 'json', true, 'form', request);
}

model ImportGroupChatMemberRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$123456'),
    groupChatMembers: [ 
      {
        appUid: string(name='AppUid', example='123'),
        extensions?: map[string]string(name='Extensions'),
        joinTime?: long(name='JoinTime', example='1613700223555'),
        modifyTime?: long(name='ModifyTime', example='1613700223555'),
        mute?: boolean(name='Mute', example='false'),
        nick?: string(name='Nick', example='bob'),
        redPoint?: long(name='RedPoint', example='1'),
        role?: long(name='Role', example='3'),
        top?: boolean(name='Top', example='false'),
        visible?: boolean(name='Visible', example='true'),
      }
    ](name='GroupChatMembers'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ImportGroupChatMemberResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model ImportGroupChatMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportGroupChatMemberResponseBody(name='body'),
}

async function importGroupChatMember(request: ImportGroupChatMemberRequest): ImportGroupChatMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportGroupChatMember', 'POST', '/', 'json', true, 'form', request);
}

model ImportMessageRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    messages: [ 
      {
        appCid: string(name='AppCid', example='$1$123:124'),
        content: string(name='Content', example='{"text": "hello"}'),
        contentType: long(name='ContentType', example='1'),
        conversationType: long(name='ConversationType', example='1'),
        createTime?: long(name='CreateTime', example='1613700223555'),
        extensions?: map[string]string(name='Extensions'),
        receiverIds?: [ string ](name='ReceiverIds', example='1'),
        senderId: string(name='SenderId', example='123'),
        uuid: string(name='Uuid', example='123999992222'),
      }
    ](name='Messages'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ImportMessageResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    importMessageResult?: map[string]ResultImportMessageResultValue(name='ImportMessageResult'),
  }(name='Result'),
}

model ImportMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportMessageResponseBody(name='body'),
}

async function importMessage(request: ImportMessageRequest): ImportMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportMessage', 'POST', '/', 'json', true, 'form', request);
}

model ImportSingleConversationRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    conversation: {
      appCid: string(name='AppCid', example='$1$123:123'),
      appUids: [ string ](name='AppUids'),
      createTime?: long(name='CreateTime', example='1613700223555'),
      extensions?: map[string]string(name='Extensions'),
    }(name='Conversation'),
    userConversations?: map[string]RequestParamsUserConversationsValue(name='UserConversations'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ImportSingleConversationResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model ImportSingleConversationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportSingleConversationResponseBody(name='body'),
}

async function importSingleConversation(request: ImportSingleConversationRequest): ImportSingleConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportSingleConversation', 'POST', '/', 'json', true, 'form', request);
}

model InitTenantRequest {
  request?: {
    domain?: string(name='domain', example='testAppKey'),
  }(name='Request', position='Body'),
}

model InitTenantResponseBody = {
  requestId?: string(name='RequestId'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='errorCode', example='1001'),
  errorMsg?: string(name='errorMsg', example='参数错误'),
  result?: boolean(name='result', example='true'),
}

model InitTenantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitTenantResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function initTenant(request: InitTenantRequest): InitTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitTenant', 'POST', '/', 'json', true, 'form', request);
}

model KickOffRequest {
  appId?: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appKeys?: [ string ](name='AppKeys'),
    appUid: string(name='AppUid', example='950000010'),
    information?: string(name='Information', example='已被系统强制下线'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model KickOffResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model KickOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KickOffResponseBody(name='body'),
}

async function kickOff(request: KickOffRequest): KickOffResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KickOff', 'POST', '/', 'json', true, 'form', request);
}

model ListAppInfosRequest {
  requestParams: {
    keyword?: string(name='Keyword', example='test'),
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='10'),
    type?: string(name='Type', example='appName'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ListAppInfosResponseBody = {
  code?: string(name='Code', description='code', example='502'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='desc', example='Success'),
  requestId?: string(name='RequestId', description='requestId', example='11134455'),
  result?: {
    appInfos?: [ 
      {
        appId?: string(name='AppId', example='aaa111'),
        appName?: string(name='AppName', example='test name'),
        appStatus?: int32(name='AppStatus', example='1'),
        createTime?: string(name='CreateTime', example='2020-10-10 22:24:09'),
        instanceId?: string(name='InstanceId', example='live-producer-public-cn_23343'),
        prodVersion?: string(name='ProdVersion', example='BasicVersion'),
      }
    ](name='AppInfos'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Result', description='result'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListAppInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppInfosResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listAppInfos(request: ListAppInfosRequest): ListAppInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInfos', 'POST', '/', 'json', true, 'form', request);
}

model ListCallbackApiIdsRequest {
}

model ListCallbackApiIdsResponseBody = {
  code?: string(name='Code', example='Portal.ParameterError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='500'),
  message?: string(name='Message', example='error'),
  requestId?: string(name='RequestId', description='Id of the request', example='1113344'),
  result?: {
    events?: map[string]boolean(name='Events'),
    spis?: map[string]boolean(name='Spis'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListCallbackApiIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCallbackApiIdsResponseBody(name='body'),
}

async function listCallbackApiIds(request: ListCallbackApiIdsRequest): ListCallbackApiIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallbackApiIds', 'POST', '/', 'json', false, 'json', request);
}

model ListDetailReportStatisticsRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
  requestParams: {
    endTime: string(name='EndTime', example='2020-01-12'),
    reportStatisticsType: string(name='ReportStatisticsType', example='user'),
    startTime: string(name='StartTime', example='2020-01-01'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ListDetailReportStatisticsResponseBody = {
  code?: string(name='Code', description='code', example='502'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='desc', example='Success'),
  requestId?: string(name='RequestId', description='requestId', example='12345'),
  result?: {
    data?: [  map[string]any ](name='Data'),
  }(name='Result', description='result'),
  success?: boolean(name='Success', description='success', example='false'),
}

model ListDetailReportStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDetailReportStatisticsResponseBody(name='body'),
}

async function listDetailReportStatistics(request: ListDetailReportStatisticsRequest): ListDetailReportStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDetailReportStatistics', 'POST', '/', 'json', true, 'form', request);
}

model ListGroupAllMembersRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$11222333'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ListGroupAllMembersResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
  result?: {
    members?: [ 
      {
        appUid?: string(name='AppUid', example='123333'),
        extensions?: map[string]string(name='Extensions'),
        joinTime?: long(name='JoinTime', example='1233333332'),
        nick?: string(name='Nick', example='testNick'),
        role?: int32(name='Role', example='1-群主；2-管理员；3-普通'),
      }
    ](name='Members'),
  }(name='Result'),
}

model ListGroupAllMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupAllMembersResponseBody(name='body'),
}

async function listGroupAllMembers(request: ListGroupAllMembersRequest): ListGroupAllMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupAllMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListGroupSilenceMembersRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='12345678'),
    operatorAppUid?: string(name='OperatorAppUid', example='123'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model ListGroupSilenceMembersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    appCid?: string(name='AppCid'),
    blacklist?: map[string]long(name='Blacklist'),
    whitelist?: [ string ](name='Whitelist'),
  }(name='Result'),
}

model ListGroupSilenceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupSilenceMembersResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listGroupSilenceMembers(request: ListGroupSilenceMembersRequest): ListGroupSilenceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupSilenceMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListRoomMessagesRequest {
  request: {
    domain: string(name='Domain', example='7m***q'),
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='100'),
    roomId: string(name='RoomId', example='9645**c180a1'),
    subType?: int32(name='SubType', example='100001'),
  }(name='Request', position='Body'),
}

model ListRoomMessagesResponseBody = {
  errorCode?: string(name='ErrorCode', example='1000'),
  errorMessage?: string(name='ErrorMessage', example='internal error'),
  requestId?: string(name='RequestId', example='FE22D613-D3C6-4A58-87CA-F21FC85AA08E'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    hasMore?: boolean(name='HasMore', example='true'),
    roomMessageList?: [ 
      {
        body?: string(name='Body', example='Hello,World'),
        messageId?: string(name='MessageId', example='0io**Fs6Q384'),
        roomId?: string(name='RoomId', example='9645**c180a1'),
        sendTimeMillis?: long(name='SendTimeMillis', example='1625125505079'),
        senderId?: string(name='SenderId', example='62***59'),
        subType?: int32(name='SubType', example='100001'),
      }
    ](name='RoomMessageList', example='testRoomId'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Result'),
}

model ListRoomMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRoomMessagesResponseBody(name='body'),
}

async function listRoomMessages(request: ListRoomMessagesRequest): ListRoomMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoomMessages', 'POST', '/', 'json', true, 'form', request);
}

model ListRoomUsersRequest {
  request: {
    domain: string(name='Domain', example='7m***q'),
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='100'),
    roomId: string(name='RoomId', example='9645**c180a1'),
  }(name='Request', position='Body'),
}

model ListRoomUsersResponseBody = {
  errorCode?: string(name='ErrorCode', example='1000'),
  errorMessage?: string(name='ErrorMessage', example='internal error'),
  requestId?: string(name='RequestId', example='FE22D613-D3C6-4A58-87CA-F21FC85AA08E'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    hasMore?: boolean(name='HasMore', example='true'),
    roomUserVOList?: [ 
      {
        nick?: string(name='Nick', example='Tom'),
        roomId?: string(name='RoomId', example='9645**c180a1'),
        userId?: string(name='UserId', example='62**59'),
      }
    ](name='RoomUserVOList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Result'),
}

model ListRoomUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRoomUsersResponseBody(name='body'),
}

async function listRoomUsers(request: ListRoomUsersRequest): ListRoomUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoomUsers', 'POST', '/', 'json', true, 'form', request);
}

model MuteUsersRequest {
  appId: string(name='AppId', position='Body'),
  requestParams: {
    appUids: [ string ](name='AppUids'),
    mute: boolean(name='Mute', example='true'),
    muteDuration?: long(name='MuteDuration', example='100'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model MuteUsersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model MuteUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MuteUsersResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function muteUsers(request: MuteUsersRequest): MuteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MuteUsers', 'POST', '/', 'json', true, 'form', request);
}

model QueryInterconnectionCidMappingRequest {
  appId: string(name='AppId', description='AppId', example='apitest', position='Body'),
  requestParams: {
    srcCid: string(name='SrcCid'),
    type: long(name='Type', example='1'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model QueryInterconnectionCidMappingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1122'),
  result?: {
    dstCid?: string(name='DstCid', example='1111'),
  }(name='Result'),
}

model QueryInterconnectionCidMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInterconnectionCidMappingResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function queryInterconnectionCidMapping(request: QueryInterconnectionCidMappingRequest): QueryInterconnectionCidMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInterconnectionCidMapping', 'POST', '/', 'json', true, 'form', request);
}

model RecallMessageRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='28017165705'),
    appUid: string(name='AppUid', example='950000010'),
    extensions?: map[string]string(name='Extensions'),
    msgId: string(name='MsgId', example='28017165705.center_daily'),
    operatorType?: int32(name='OperatorType', example='0'),
    type?: int32(name='Type', example='0'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RecallMessageResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RecallMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecallMessageResponseBody(name='body'),
}

async function recallMessage(request: RecallMessageRequest): RecallMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecallMessage', 'POST', '/', 'json', true, 'form', request);
}

model RemoveGroupExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000'),
    keys: [ string ](name='Keys'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveGroupExtensionByKeysResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveGroupExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGroupExtensionByKeysResponseBody(name='body'),
}

async function removeGroupExtensionByKeys(request: RemoveGroupExtensionByKeysRequest): RemoveGroupExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGroupExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model RemoveGroupMemberExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$11222333'),
    appUid: string(name='AppUid', example='11112'),
    keys: [ string ](name='Keys'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveGroupMemberExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveGroupMemberExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGroupMemberExtensionByKeysResponseBody(name='body'),
}

async function removeGroupMemberExtensionByKeys(request: RemoveGroupMemberExtensionByKeysRequest): RemoveGroupMemberExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGroupMemberExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model RemoveGroupMembersRequest {
  appId?: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='$2$111000'),
    appUidsRemoved: [ string ](name='AppUidsRemoved'),
    operatorAppUid: string(name='OperatorAppUid', example='888666'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveGroupMembersResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGroupMembersResponseBody(name='body'),
}

async function removeGroupMembers(request: RemoveGroupMembersRequest): RemoveGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model RemoveGroupSilenceBlacklistRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$12345678'),
    members: [ string ](name='Members'),
    operatorAppUid?: string(name='OperatorAppUid', example='123'),
  }(name='RequestParams', example='apitest', shrink='json', position='Body'),
}

model RemoveGroupSilenceBlacklistResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveGroupSilenceBlacklistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGroupSilenceBlacklistResponseBody(name='body'),
}

async function removeGroupSilenceBlacklist(request: RemoveGroupSilenceBlacklistRequest): RemoveGroupSilenceBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGroupSilenceBlacklist', 'POST', '/', 'json', true, 'form', request);
}

model RemoveGroupSilenceWhitelistRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$12345678'),
    members: [ string ](name='Members'),
    operatorAppUid?: string(name='OperatorAppUid', example='123'),
  }(name='RequestParams', example='apitest', shrink='json', position='Body'),
}

model RemoveGroupSilenceWhitelistResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveGroupSilenceWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveGroupSilenceWhitelistResponseBody(name='body'),
}

async function removeGroupSilenceWhitelist(request: RemoveGroupSilenceWhitelistRequest): RemoveGroupSilenceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGroupSilenceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model RemoveMessageExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid?: string(name='AppCid', example='$1$10010:10086****'),
    keys?: [ string ](name='Keys', example='key1'),
    msgId?: string(name='MsgId', example='123123.center_daily****'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveMessageExtensionByKeysResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='788DABCD-A3CF-48B2-9F80-E57B41A2169A'),
}

model RemoveMessageExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveMessageExtensionByKeysResponseBody(name='body'),
}

async function removeMessageExtensionByKeys(request: RemoveMessageExtensionByKeysRequest): RemoveMessageExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMessageExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model RemoveSingleChatExtensionByKeysRequest {
  appId?: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='$1$10010:10086'),
    appUid: string(name='AppUid', example='123456'),
    keys: [ string ](name='Keys'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveSingleChatExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveSingleChatExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSingleChatExtensionByKeysResponseBody(name='body'),
}

async function removeSingleChatExtensionByKeys(request: RemoveSingleChatExtensionByKeysRequest): RemoveSingleChatExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSingleChatExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model RemoveUserConversationExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='$1$10010:10086'),
    appUid: string(name='AppUid', example='123456'),
    keys: [ string ](name='Keys'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model RemoveUserConversationExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model RemoveUserConversationExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserConversationExtensionByKeysResponseBody(name='body'),
}

async function removeUserConversationExtensionByKeys(request: RemoveUserConversationExtensionByKeysRequest): RemoveUserConversationExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserConversationExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SendCustomMessageRequest {
  request: {
    body: string(name='Body', example='Hello,World'),
    domain: string(name='Domain', example='7m***q'),
    roomId: string(name='RoomId', example='9645**c180a1'),
    senderId: string(name='SenderId', example='62**59'),
    subType: int32(name='SubType', example='100001'),
  }(name='Request', position='Body'),
}

model SendCustomMessageResponseBody = {
  errorCode?: string(name='ErrorCode', example='1000'),
  errorMessage?: string(name='ErrorMessage', example='internal error'),
  requestId?: string(name='RequestId', example='FE22D613-D3C6-4A58-87CA-F21FC85AA08E'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    messageId?: string(name='MessageId', example='0io**Fs6Q384'),
  }(name='Result'),
}

model SendCustomMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCustomMessageResponseBody(name='body'),
}

async function sendCustomMessage(request: SendCustomMessageRequest): SendCustomMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCustomMessage', 'POST', '/', 'json', true, 'form', request);
}

model SendCustomMessageToRoomUsersRequest {
  receivers: [ string ](name='Receivers', position='Body'),
  request: {
    body: string(name='Body', example='Hello,World'),
    domain: string(name='Domain', example='7m***q'),
    roomId: string(name='RoomId', example='9645**c180a1'),
    senderId: string(name='SenderId', example='62**59'),
    subType: int32(name='SubType', example='100001'),
  }(name='Request', position='Body'),
}

model SendCustomMessageToRoomUsersResponseBody = {
  errorCode?: string(name='ErrorCode', example='1000'),
  errorMessage?: string(name='ErrorMessage', example='internal error'),
  requestId?: string(name='RequestId', example='FE22D613-D3C6-4A58-87CA-F21FC85AA08E'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  result?: {
    messageId?: string(name='MessageId', example='0io**Fs6Q384'),
  }(name='Result'),
}

model SendCustomMessageToRoomUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCustomMessageToRoomUsersResponseBody(name='body'),
}

async function sendCustomMessageToRoomUsers(request: SendCustomMessageToRoomUsersRequest): SendCustomMessageToRoomUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCustomMessageToRoomUsers', 'POST', '/', 'json', true, 'form', request);
}

model SendMessageRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$1$123:567'),
    content: string(name='Content', example='{"text":"hello world"}'),
    contentType: int32(name='ContentType', example='1'),
    conversationType: int32(name='ConversationType', example='1'),
    extensions?: map[string]string(name='Extensions'),
    options?: {
      receiveScopeOption?: {
        excludeReceiverIds?: [ string ](name='ExcludeReceiverIds'),
        receiveScope?: int32(name='ReceiveScope', example='0'),
        receiverIds?: [ string ](name='ReceiverIds'),
      }(name='ReceiveScopeOption'),
      redPointPolicy?: int32(name='RedPointPolicy', example='0'),
      singleChatCreateRequest?: {
        appCid?: string(name='AppCid', example='$3$123:567'),
        appUids?: [ string ](name='AppUids'),
        extensions?: map[string]string(name='Extensions'),
        userConversation?: map[string]RequestParamsOptionsSingleChatCreateRequestUserConversationValue(name='UserConversation'),
      }(name='SingleChatCreateRequest'),
    }(name='Options'),
    senderId: string(name='SenderId', example='950000010'),
    uuid: string(name='Uuid', example='8c086146-889e-4642-b3d9-17e97ae6****'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SendMessageResponseBody = {
  code?: string(name='Code', example='0'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='yiepfjeqa'),
  result?: {
    createTime?: long(name='CreateTime', example='1609763319539'),
    msgId?: string(name='MsgId', example='28017165705.center_daily'),
  }(name='Result'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessage', 'POST', '/', 'json', true, 'form', request);
}

model SetGroupExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000'),
    extensions: map[string]string(name='Extensions'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetGroupExtensionByKeysResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SetGroupExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetGroupExtensionByKeysResponseBody(name='body'),
}

async function setGroupExtensionByKeys(request: SetGroupExtensionByKeysRequest): SetGroupExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGroupExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SetGroupMemberExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$11222333'),
    appUid: string(name='AppUid', example='11112'),
    extensions: map[string]string(name='Extensions'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetGroupMemberExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SetGroupMemberExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetGroupMemberExtensionByKeysResponseBody(name='body'),
}

async function setGroupMemberExtensionByKeys(request: SetGroupMemberExtensionByKeysRequest): SetGroupMemberExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGroupMemberExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SetGroupOwnerRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$11222333'),
    newOwnerAppUid: string(name='NewOwnerAppUid', example='123123'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetGroupOwnerResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SetGroupOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetGroupOwnerResponseBody(name='body'),
}

async function setGroupOwner(request: SetGroupOwnerRequest): SetGroupOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGroupOwner', 'POST', '/', 'json', true, 'form', request);
}

model SetMessageExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid?: string(name='AppCid', example='$1$10010:10086'),
    extensions?: map[string]string(name='Extensions'),
    msgId?: string(name='MsgId', example='123123.center_daily'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetMessageExtensionByKeysResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='788DABCD-A3CF-48B2-9F80-E57B41A2169A'),
}

model SetMessageExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMessageExtensionByKeysResponseBody(name='body'),
}

async function setMessageExtensionByKeys(request: SetMessageExtensionByKeysRequest): SetMessageExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetMessageExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SetMessageReadRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appUid: string(name='AppUid', example='95****010'),
    msgId: string(name='MsgId', example='280****5705.center_daily'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetMessageReadResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='DB6426C9-B553-66A2-B5F4-0B912D39EABB'),
}

model SetMessageReadResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMessageReadResponseBody(name='body'),
}

async function setMessageRead(request: SetMessageReadRequest): SetMessageReadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetMessageRead', 'POST', '/', 'json', true, 'form', request);
}

model SetSingleChatExtensionByKeysRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='$1$111000:123'),
    appUid: string(name='AppUid', example='123456'),
    extensions: map[string]string(name='Extensions'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetSingleChatExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SetSingleChatExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSingleChatExtensionByKeysResponseBody(name='body'),
}

async function setSingleChatExtensionByKeys(request: SetSingleChatExtensionByKeysRequest): SetSingleChatExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSingleChatExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SetUserConversationExtensionByKeysRequest {
  appId?: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='$2$111000'),
    appUid: string(name='AppUid', example='123456'),
    extensions: map[string]string(name='Extensions'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SetUserConversationExtensionByKeysResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SetUserConversationExtensionByKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserConversationExtensionByKeysResponseBody(name='body'),
}

async function setUserConversationExtensionByKeys(request: SetUserConversationExtensionByKeysRequest): SetUserConversationExtensionByKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserConversationExtensionByKeys', 'POST', '/', 'json', true, 'form', request);
}

model SilenceAllGroupMembersRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$10010'),
    operatorAppUid?: string(name='OperatorAppUid', example='123123'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model SilenceAllGroupMembersResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model SilenceAllGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SilenceAllGroupMembersResponseBody(name='body'),
}

async function silenceAllGroupMembers(request: SilenceAllGroupMembersRequest): SilenceAllGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SilenceAllGroupMembers', 'POST', '/', 'json', true, 'form', request);
}

model UnbindInterconnectionUidRequest {
  appId: string(name='AppId', description='AppId', example='apitest', position='Body'),
  requestParams: {
    appUid: string(name='AppUid', example='12345'),
    dingTalkUid: string(name='DingTalkUid', example='staff#coprId'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UnbindInterconnectionUidResponseBody = {
  code?: string(name='Code', example='408'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='12224444'),
}

model UnbindInterconnectionUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindInterconnectionUidResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function unbindInterconnectionUid(request: UnbindInterconnectionUidRequest): UnbindInterconnectionUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindInterconnectionUid', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppNameRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
  requestParams: {
    appName: string(name='AppName', example='xiaohongshu'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateAppNameResponseBody = {
  code?: string(name='Code', description='code', example='503'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='desc', example='fail'),
  requestId?: string(name='RequestId', description='requestId', example='123456'),
  success?: boolean(name='Success', description='success', example='false'),
}

model UpdateAppNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppNameResponseBody(name='body'),
}

async function updateAppName(request: UpdateAppNameRequest): UpdateAppNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppName', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppStatusRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
  requestParams: {
    enable: boolean(name='Enable', example='true'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateAppStatusResponseBody = {
  code?: string(name='Code', example='50001'),
  message?: string(name='Message', example='param error'),
  requestId?: string(name='RequestId', description='Id of the request', example='11114444'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAppStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppStatusResponseBody(name='body'),
}

async function updateAppStatus(request: UpdateAppStatusRequest): UpdateAppStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCallbackConfigRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
  requestParams: {
    apis?: map[string]boolean(name='Apis'),
    callbackUrl: string(name='CallbackUrl', example='http://test.com'),
    events?: map[string]boolean(name='Events'),
    signatureKey?: string(name='SignatureKey', example='aaa111_0'),
    signatureValue?: string(name='SignatureValue', example='aaa111232434sefdf'),
    spis?: map[string]boolean(name='Spis'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateCallbackConfigResponseBody = {
  code?: string(name='Code', description='code', example='systemError'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='400'),
  message?: string(name='Message', description='desc', example='错误信息'),
  requestId?: string(name='RequestId', description='requestId', example='13456'),
  result?: {
    imConfig?: {
      callbackConfig?: {
        apiIds?: [ string ](name='ApiIds'),
        backendUrl?: string(name='BackendUrl', example='http://test.com'),
        signatureKey?: string(name='SignatureKey', example='aaa111_0'),
        signatureValue?: string(name='SignatureValue', example='3324ewfcsf34r'),
      }(name='CallbackConfig'),
      msgConfig?: {
        msgRecallTimeInterval?: long(name='MsgRecallTimeInterval', example='12000'),
      }(name='MsgConfig'),
    }(name='ImConfig'),
  }(name='Result', description='result'),
  success?: boolean(name='Success', description='success', example='false'),
}

model UpdateCallbackConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCallbackConfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function updateCallbackConfig(request: UpdateCallbackConfigRequest): UpdateCallbackConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCallbackConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateGroupIconRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000'),
    iconMediaId: string(name='IconMediaId', example='$iQEMAqNqcGcDAQTNAyAFzQJYBtoAIYQBpAuf1dQCqrY4aIGemoBLONIDzwAAAXazCVSoBM0NyAcACA****'),
    operatorAppUid?: string(name='OperatorAppUid', example='80000010'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateGroupIconResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model UpdateGroupIconResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupIconResponseBody(name='body'),
}

async function updateGroupIcon(request: UpdateGroupIconRequest): UpdateGroupIconResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupIcon', 'POST', '/', 'json', true, 'form', request);
}

model UpdateGroupMembersRoleRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams?: {
    appCid: string(name='AppCid', example='11222333'),
    appUids: [ string ](name='AppUids', example='value1'),
    operatorAppUid?: string(name='OperatorAppUid', example='123123'),
    role: int32(name='Role', example='3'),
  }(name='RequestParams', example='apitest', shrink='json', position='Body'),
}

model UpdateGroupMembersRoleResponseBody = {
  code?: string(name='Code', example='General.SystemError'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model UpdateGroupMembersRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupMembersRoleResponseBody(name='body'),
}

async function updateGroupMembersRole(request: UpdateGroupMembersRoleRequest): UpdateGroupMembersRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupMembersRole', 'POST', '/', 'json', true, 'form', request);
}

model UpdateGroupTitleRequest {
  appId: string(name='AppId', example='apitest', position='Body'),
  requestParams: {
    appCid: string(name='AppCid', example='$2$111000'),
    operatorAppUid?: string(name='OperatorAppUid', example='80000010'),
    title: string(name='Title', example='新群聊标题'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateGroupTitleResponseBody = {
  code?: string(name='Code', example='User.xxx'),
  message?: string(name='Message', example='System Error'),
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378F720'),
}

model UpdateGroupTitleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupTitleResponseBody(name='body'),
}

async function updateGroupTitle(request: UpdateGroupTitleRequest): UpdateGroupTitleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupTitle', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMsgRecallIntervalRequest {
  appId: string(name='AppId', example='aaa111', position='Body'),
  requestParams: {
    clientMsgRecallIntervalMinute: long(name='ClientMsgRecallIntervalMinute', example='12000'),
  }(name='RequestParams', shrink='json', position='Body'),
}

model UpdateMsgRecallIntervalResponseBody = {
  code?: string(name='Code', description='code', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='desc', example='error'),
  requestId?: string(name='RequestId', description='requestId', example='122-EFSDFSDFE-123'),
  result?: string(name='Result', description='result', example='null'),
  success?: boolean(name='Success', description='success', example='true'),
}

model UpdateMsgRecallIntervalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMsgRecallIntervalResponseBody(name='body'),
}

async function updateMsgRecallInterval(request: UpdateMsgRecallIntervalRequest): UpdateMsgRecallIntervalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMsgRecallInterval', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTenantStatusRequest {
  request?: {
    domain?: string(name='domain', example='testAppKey'),
    status?: long(name='status', example='0'),
  }(name='Request', position='Body'),
}

model UpdateTenantStatusResponseBody = {
  requestId?: string(name='RequestId', example='C02635EE-C867-4CC0-9DE0-E4497378****'),
  responseSuccess?: boolean(name='ResponseSuccess', example='true'),
  errorCode?: string(name='errorCode', example='1001'),
  errorMsg?: string(name='errorMsg', example='参数错误'),
  result?: boolean(name='result', example='true'),
}

model UpdateTenantStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTenantStatusResponseBody(name='body'),
}

async function updateTenantStatus(request: UpdateTenantStatusRequest): UpdateTenantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTenantStatus', 'POST', '/', 'json', true, 'form', request);
}

model ResultUserMuteSettingsValue = {
  mute?: boolean(name='Mute'),
  expireTime?: long(name='ExpireTime'),
}

model ResultImportMessageResultValue = {
  result?: long(name='result', example='0'),
  msgId?: string(name='msgId', example='111111$NT'),
}

model RequestParamsUserConversationsValue = {
  top?: boolean(name='Top', example='true'),
  redPoint?: long(name='RedPoint', example='0'),
  mute?: boolean(name='Mute', example='false'),
  visible?: boolean(name='Visible', example='1'),
  createTime?: long(name='CreateTime'),
  modifyTime?: long(name='ModifyTime'),
  userExtensions?: map[string]string(name='UserExtensions'),
}

model RequestParamsOptionsSingleChatCreateRequestUserConversationValue = {
  userExtensions?: map[string]string(name='UserExtensions'),
}

