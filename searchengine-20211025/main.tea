/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('searchengine', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ErrorResponse {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
}

model ResultClusterValue = {
  buildParallelNum?: int32(name='buildParallelNum'),
  mergeParallelNum?: int32(name='mergeParallelNum'),
}

model VariablesValue = {
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable cannot be modified.', example='false'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='false'),
  value?: string(name='value', description='The value of the variable.', example='""'),
  description?: string(name='description', description='The description about the variable.', example='""'),
  templateValue?: string(name='templateValue', description='The value of the template.', example='""'),
  type?: string(name='type', description='The type of the variable. Valid values:

*   NORMAL: a normal variable
*   FUNCTION: a function variable', example='NORMAL'),
  funcValue?: {
    funcClassName?: string(name='funcClassName', description='The class name.', example='""'),
    template?: string(name='template', description='The template of the variable.', example='""'),
  }(name='funcValue', description='The function variable.'),
}

model FilesConfigVariablesValue = {
  description?: string(name='description'),
  disableModify?: boolean(name='disableModify'),
  isModify?: boolean(name='isModify'),
  type?: string(name='type'),
  value?: string(name='value'),
}

model BuildIndexRequest {
  buildMode?: string(name='buildMode', description='The reindexing mode.', example='indexRecover'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='my_data_source'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source.', example='swift'),
  dataTimeSec?: int32(name='dataTimeSec', description='The timestamp in seconds. The value must be of the INTEGER type. This parameter is required if you specify an API data source.', example='1640867288'),
  domain?: string(name='domain', description='The data center in which the data source resides.', example='test'),
  generation?: long(name='generation', description='The data restoration version.', example='160131146'),
  partition?: string(name='partition', description='The data partition. This parameter is required if dataSourceType is set to odps.', example='20201010'),
}

model BuildIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The list of clusters', example='{}'),
}

model BuildIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuildIndexResponseBody(name='body'),
}

/**
 * @summary Triggers reindexing.
 *
 * @description ## Method
 *     POST
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/actions/build-index
 *
 * @param request BuildIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BuildIndexResponse
 */
async function buildIndexWithOptions(instanceId: string, request: BuildIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BuildIndexResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.buildMode)) {
    body['buildMode'] = request.buildMode;
  }
  if (!Util.isUnset(request.dataSourceName)) {
    body['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['dataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataTimeSec)) {
    body['dataTimeSec'] = request.dataTimeSec;
  }
  if (!Util.isUnset(request.domain)) {
    body['domain'] = request.domain;
  }
  if (!Util.isUnset(request.generation)) {
    body['generation'] = request.generation;
  }
  if (!Util.isUnset(request.partition)) {
    body['partition'] = request.partition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BuildIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/build-index`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Triggers reindexing.
 *
 * @description ## Method
 *     POST
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/actions/build-index
 *
 * @param request BuildIndexRequest
 * @return BuildIndexResponse
 */
async function buildIndex(instanceId: string, request: BuildIndexRequest): BuildIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return buildIndexWithOptions(instanceId, request, headers, runtime);
}

model CreateClusterRequest {
  autoLoad?: boolean(name='autoLoad', description='The remarks of the query node', example='true'),
  dataNode?: {
    number?: int32(name='number', description='The number of data nodes', example='2'),
    partition?: string(name='partition'),
  }(name='dataNode', description='The description of the data node'),
  description?: string(name='description', description='The description of the cluster', example='"ha-tets"'),
  name?: string(name='name', description='The name of the node', example='ha-cn-zvp2qr1sk01_qrs'),
  queryNode?: {
    number?: int32(name='number', description='The number of nodes to query', example='2'),
  }(name='queryNode', description='The description of the query node'),
}

model CreateClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
 * @summary Creates a cluster.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/clusters`
 *
 * @param request CreateClusterRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClusterResponse
 */
async function createClusterWithOptions(instanceId: string, request: CreateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoLoad)) {
    body['autoLoad'] = request.autoLoad;
  }
  if (!Util.isUnset(request.dataNode)) {
    body['dataNode'] = request.dataNode;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.queryNode)) {
    body['queryNode'] = request.queryNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a cluster.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/clusters`
 *
 * @param request CreateClusterRequest
 * @return CreateClusterResponse
 */
async function createCluster(instanceId: string, request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterWithOptions(instanceId, request, headers, runtime);
}

model CreateDataSourceRequest {
  autoBuildIndex?: boolean(name='autoBuildIndex'),
  config?: {
    accessKey?: string(name='accessKey'),
    accessSecret?: string(name='accessSecret'),
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    namespace?: string(name='namespace'),
    ossPath?: string(name='ossPath'),
    partition?: string(name='partition'),
    path?: string(name='path'),
    project?: string(name='project'),
    table?: string(name='table'),
  }(name='config'),
  domain?: string(name='domain'),
  name?: string(name='name'),
  saroConfig?: {
    namespace?: string(name='namespace'),
    tableName?: string(name='tableName'),
  }(name='saroConfig'),
  type?: string(name='type'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform a dry run. This parameter is only used to check whether the data source is valid. Valid values: true and false.', example='true'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The returned results.', example='{}'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary Creates data sources.
 *
 * @param request CreateDataSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(instanceId: string, request: CreateDataSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.autoBuildIndex)) {
    body['autoBuildIndex'] = request.autoBuildIndex;
  }
  if (!Util.isUnset(request.config)) {
    body['config'] = request.config;
  }
  if (!Util.isUnset(request.domain)) {
    body['domain'] = request.domain;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.saroConfig)) {
    body['saroConfig'] = request.saroConfig;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates data sources.
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(instanceId: string, request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataSourceWithOptions(instanceId, request, headers, runtime);
}

model CreateIndexRequest {
  buildParallelNum?: int32(name='buildParallelNum'),
  content?: string(name='content', description='The content of the index.', example='{\\\\"summarys\\\\":{\\\\"summary_fields\\\\":[\\\\"id\\\\"]},\\\\"indexs\\\\":[{\\\\"index_name\\\\":\\\\"index_id\\\\",\\\\"index_type\\\\":\\\\"PRIMARYKEY64\\\\",\\\\"index_fields\\\\":\\\\"id\\\\",\\\\"has_primary_key_attribute\\\\":true,\\\\"is_primary_key_sorted\\\\":false}],\\\\"attributes\\\\":[\\\\"id\\\\"],\\\\"fields\\\\":[{\\\\"field_name\\\\":\\\\"id\\\\",\\\\"field_type\\\\":\\\\"UINT16\\\\"}],\\\\"table_name\\\\":\\\\"index_2\\\\"}'),
  dataSource?: string(name='dataSource', description='Optional. The data source, which can be MaxCompute, Message Service (MNS), Realtime Compute for Apache Flink, or StreamCompute.', example='test1'),
  dataSourceInfo?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to enable the automatic full indexing feature.', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
      bucket?: string(name='bucket', description='oss bucket', example='test-bucket'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute or Object Storage Service (OSS) data source.', example='https://oss-cn-hangzhou.aliyuncs.com'),
      namespace?: string(name='namespace', example='test-namespace'),
      ossPath?: string(name='ossPath', example='/opensearch/oss.json'),
      partition?: string(name='partition', description='The data partition. This parameter is required if type is set to odps.', example='ds=20230114'),
      path?: string(name='path', example='test-hdfs-path'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='bbt_algo_pai'),
      table?: string(name='table', description='The name of the table.', example='bbt_rec_swing_u2i2i_score_be_v1'),
    }(name='config', description='The information about the MaxCompute data source.'),
    dataTimeSec?: int32(name='dataTimeSec', example='1709715164'),
    domain?: string(name='domain', description='The data center where the data source is deployed.', example='vpc_hz_domain_1'),
    name?: string(name='name', description='The name of the index.', example='ha-cn-35t3n1yuj0d_index_1'),
    processParallelNum?: int32(name='processParallelNum'),
    processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='4'),
    saroConfig?: {
      namespace?: string(name='namespace'),
      tableName?: string(name='tableName'),
    }(name='saroConfig'),
    type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, and oss.', example='odps'),
  }(name='dataSourceInfo', description='The information about the data source, which is required for the new version of OpenSearch Vector Search Edition.'),
  domain?: string(name='domain', description='The data center in which the data source resides.', example='vpc_hz_domain_1'),
  extend?: map[string]any(name='extend', description='The extended configurations of the field. Keys such as vector and embedding are included. Vector indicates the vector field. Embedding indicates the field that requires embedding.', example='{
        "vector":
        [
            "source_image_vector"
        ],
        "embeding":
        [
            "source_image"
        ],
        "description":
        []
    }'),
  mergeParallelNum?: int32(name='mergeParallelNum'),
  name?: string(name='name', description='The name of the index.', example='ha-cn-zvp2qr1sk01_qrs'),
  partition?: int32(name='partition', description='The data partition.', example='20211202'),
  dryRun?: boolean(name='dryRun', example='true'),
}

model CreateIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
 * @summary Creates an index.
 *
 * @description ### Method
 * ```java
 * POST
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/indexes
 * ```
 *
 * @param request CreateIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIndexResponse
 */
async function createIndexWithOptions(instanceId: string, request: CreateIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIndexResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.buildParallelNum)) {
    body['buildParallelNum'] = request.buildParallelNum;
  }
  if (!Util.isUnset(request.content)) {
    body['content'] = request.content;
  }
  if (!Util.isUnset(request.dataSource)) {
    body['dataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.dataSourceInfo)) {
    body['dataSourceInfo'] = request.dataSourceInfo;
  }
  if (!Util.isUnset(request.domain)) {
    body['domain'] = request.domain;
  }
  if (!Util.isUnset(request.extend)) {
    body['extend'] = request.extend;
  }
  if (!Util.isUnset(request.mergeParallelNum)) {
    body['mergeParallelNum'] = request.mergeParallelNum;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.partition)) {
    body['partition'] = request.partition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an index.
 *
 * @description ### Method
 * ```java
 * POST
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/indexes
 * ```
 *
 * @param request CreateIndexRequest
 * @return CreateIndexResponse
 */
async function createIndex(instanceId: string, request: CreateIndexRequest): CreateIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIndexWithOptions(instanceId, request, headers, runtime);
}

model CreateInstanceRequest {
  chargeType?: string(name='chargeType', description='The billing method of the instance. Valid values: PREPAY and POSTPAY. PREPAY indicates the instance is a subscription instance. When you set this parameter to PREPAY, make sure that your Alibaba Cloud account supports balance payment or credit card payment. Otherwise, the system returns the InvalidPayMethod error message. If you set this parameter to PREPAY, you must also specify the paymentInfo parameter. POSTPAY indicates that the instance is a pay-as-you-go instance. This billing method is not supported.', example='""'),
  components?: [ 
    {
      code?: string(name='code', description='The specification code, which must be consistent with values of the corresponding module parameters.', example='""'),
      value?: string(name='value', description='Values that you specify for the corresponding module components on the buy page.', example='""'),
    }
  ](name='components', description='A list of instance-related specifications.'),
  order?: {
    autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal. Valid values: true and false.', example='true'),
    duration?: long(name='duration', description='The billing duration. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 12.', example='29'),
    pricingCycle?: string(name='pricingCycle', description='The unit of the billing duration. Valid values: Month and Year.', example='""'),
  }(name='order', description='The billing information.'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ppr7901'),
  }(name='result', description='The result returned'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
 * @summary Creates a Havenask instance.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/api/instances?dryRun=false`
 *
 * @param request CreateInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateInstanceResponse
 */
async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.chargeType)) {
    body['chargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.components)) {
    body['components'] = request.components;
  }
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a Havenask instance.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/api/instances?dryRun=false`
 *
 * @param request CreateInstanceRequest
 * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

model CreateTableRequest {
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', example='source_image_vector'),
      operator?: string(name='operator', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', description='OSSBucket', example='test'),
          ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', example='uid'),
        }(name='srcFieldConfig'),
        vectorModal?: string(name='vectorModal', example='image'),
        vectorModel?: string(name='vectorModel', example='clip'),
      }(name='params'),
      srcField?: string(name='srcField', example='source_image'),
    }
  ](name='dataProcessConfig'),
  dataProcessorCount?: int32(name='dataProcessorCount', example='1'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    config?: {
      accessKey?: string(name='accessKey', example='ak'),
      accessSecret?: string(name='accessSecret', example='as'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-flytest-ci'),
      endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20220713'),
      project?: string(name='project', example='project_20210220122847_3218'),
      table?: string(name='table', example='test56'),
    }(name='config'),
    dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
    type?: string(name='type', example='odps'),
  }(name='dataSource'),
  fieldSchema?: map[string]string(name='fieldSchema'),
  name?: string(name='name', example='index_1'),
  partitionCount?: int32(name='partitionCount', example='1'),
  primaryKey?: string(name='primaryKey', example='id'),
  rawSchema?: string(name='rawSchema', example='{}'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', example='{}'),
      }(name='advanceParams'),
      dimension?: string(name='dimension', example='128'),
      distanceType?: string(name='distanceType', example='SquaredEuclidean'),
      indexName?: string(name='indexName', example='case_index'),
      namespace?: string(name='namespace', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', example='sparse_values'),
      vectorField?: string(name='vectorField', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', example='Qc'),
    }
  ](name='vectorIndex'),
  dryRun?: boolean(name='dryRun', example='true'),
}

model CreateTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableResponseBody(name='body'),
}

/**
 * @summary 创建索引V2
 *
 * @param request CreateTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTableResponse
 */
async function createTableWithOptions(instanceId: string, request: CreateTableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTableResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.dataProcessConfig)) {
    body['dataProcessConfig'] = request.dataProcessConfig;
  }
  if (!Util.isUnset(request.dataProcessorCount)) {
    body['dataProcessorCount'] = request.dataProcessorCount;
  }
  if (!Util.isUnset(request.dataSource)) {
    body['dataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.fieldSchema)) {
    body['fieldSchema'] = request.fieldSchema;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.partitionCount)) {
    body['partitionCount'] = request.partitionCount;
  }
  if (!Util.isUnset(request.primaryKey)) {
    body['primaryKey'] = request.primaryKey;
  }
  if (!Util.isUnset(request.rawSchema)) {
    body['rawSchema'] = request.rawSchema;
  }
  if (!Util.isUnset(request.vectorIndex)) {
    body['vectorIndex'] = request.vectorIndex;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTable',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建索引V2
 *
 * @param request CreateTableRequest
 * @return CreateTableResponse
 */
async function createTable(instanceId: string, request: CreateTableRequest): CreateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTableWithOptions(instanceId, request, headers, runtime);
}

model DeleteAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdvanceConfigResponseBody(name='body'),
}

/**
 * @summary Deletes the details about advanced configurations.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAdvanceConfigResponse
 */
async function deleteAdvanceConfigWithOptions(instanceId: string, configName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAdvanceConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAdvanceConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the details about advanced configurations.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
 *
 * @return DeleteAdvanceConfigResponse
 */
async function deleteAdvanceConfig(instanceId: string, configName: string): DeleteAdvanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAdvanceConfigWithOptions(instanceId, configName, headers, runtime);
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary Deletes a specified data source.
 *
 * @description ## Method
 * `DELETE`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(instanceId: string, dataSourceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a specified data source.
 *
 * @description ## Method
 * `DELETE`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(instanceId: string, dataSourceName: string): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDataSourceWithOptions(instanceId, dataSourceName, headers, runtime);
}

model DeleteIndexRequest {
  dataSource?: string(name='dataSource', description='The data source

This parameter is required.', example='ha-cn-pl32rf0js04_test'),
  deleteDataSource?: boolean(name='deleteDataSource'),
}

model DeleteIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

/**
 * @summary Deletes an index.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}?dataSource=xxx
 *
 * @param request DeleteIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIndexResponse
 */
async function deleteIndexWithOptions(instanceId: string, indexName: string, request: DeleteIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIndexResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dataSource)) {
    query['dataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.deleteDataSource)) {
    query['deleteDataSource'] = request.deleteDataSource;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an index.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}?dataSource=xxx
 *
 * @param request DeleteIndexRequest
 * @return DeleteIndexResponse
 */
async function deleteIndex(instanceId: string, indexName: string, request: DeleteIndexRequest): DeleteIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIndexWithOptions(instanceId, indexName, request, headers, runtime);
}

model DeleteIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model DeleteIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexVersionResponseBody(name='body'),
}

/**
 * @summary Deletes the version of an index.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIndexVersionResponse
 */
async function deleteIndexVersionWithOptions(instanceId: string, indexName: string, versionName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIndexVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteIndexVersion',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/versions/${OpenApiUtil.getEncodeParam(versionName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the version of an index.
 *
 * @description ## Method
 *     DELETE
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}
 *
 * @return DeleteIndexVersionResponse
 */
async function deleteIndexVersion(instanceId: string, indexName: string, versionName: string): DeleteIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIndexVersionWithOptions(instanceId, indexName, versionName, headers, runtime);
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
 * @summary Deletes a specified instance.
 *
 * @description ### Method
 * `DELETE`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a specified instance.
 *
 * @description ### Method
 * `DELETE`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @return DeleteInstanceResponse
 */
async function deleteInstance(instanceId: string): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(instanceId, headers, runtime);
}

model DeleteTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model DeleteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableResponseBody(name='body'),
}

/**
 * @summary 删除索引表V2
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTableResponse
 */
async function deleteTableWithOptions(instanceId: string, tableName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTable',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除索引表V2
 *
 * @return DeleteTableResponse
 */
async function deleteTable(instanceId: string, tableName: string): DeleteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTableWithOptions(instanceId, tableName, headers, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='acceptLanguage', example='zh-cn'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: [ 
    {
      endpoint?: string(name='endpoint', example='endpoint'),
      localName?: string(name='localName', example='China (Hangzhou)'),
      regionId?: string(name='regionId', example='cn-hangzhou'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @param request DescribeRegionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(request: DescribeRegionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['acceptLanguage'] = request.acceptLanguage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/regions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeRegionsRequest
 * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(request, headers, runtime);
}

model ForceSwitchResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='0B1FF998-BB8D-5182-BFC0-E471AA77095A'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ForceSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ForceSwitchResponseBody(name='body'),
}

/**
 * @summary Performs a forced switchover.
 *
 * @description \\### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/force-switch/{fsmId}
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ForceSwitchResponse
 */
async function forceSwitchWithOptions(instanceId: string, fsmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ForceSwitchResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ForceSwitch',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/force-switch/${OpenApiUtil.getEncodeParam(fsmId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Performs a forced switchover.
 *
 * @description \\### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/force-switch/{fsmId}
 * ```
 *
 * @return ForceSwitchResponse
 */
async function forceSwitch(instanceId: string, fsmId: string): ForceSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return forceSwitchWithOptions(instanceId, fsmId, headers, runtime);
}

model GetAdvanceConfigRequest {
  type?: string(name='type'),
}

model GetAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    content?: string(name='content', description='The content of the configuration that is returned.'),
    contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.'),
    desc?: string(name='desc', description='The description.', example='close alarm, chiji id 37080'),
    files?: [ 
      {
        fullPathName?: string(name='fullPathName', description='The name of the file path.', example='""'),
        isDir?: boolean(name='isDir', description='Indicates whether it is a directory.', example='True'),
        isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template.', example='True'),
        name?: string(name='name', description='The name.', example='ha-cn-2r42ostoc01_qrs'),
      }
    ](name='files', description='The information about files.'),
    name?: string(name='name', description='The name.', example='ha-cn-0ju2s170b03_qrs'),
    status?: string(name='status', description='The status.', example='0,1,3,6,8'),
    updateTime?: long(name='updateTime', description='The update time.', example='""'),
  }(name='result', description='The returned results.'),
}

model GetAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigResponseBody(name='body'),
}

/**
 * @summary Queries the information about a dictionary.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
 *
 * @param request GetAdvanceConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAdvanceConfigResponse
 */
async function getAdvanceConfigWithOptions(instanceId: string, configName: string, request: GetAdvanceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAdvanceConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAdvanceConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a dictionary.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
 *
 * @param request GetAdvanceConfigRequest
 * @return GetAdvanceConfigResponse
 */
async function getAdvanceConfig(instanceId: string, configName: string, request: GetAdvanceConfigRequest): GetAdvanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAdvanceConfigWithOptions(instanceId, configName, request, headers, runtime);
}

model GetAdvanceConfigFileRequest {
  fileName?: string(name='fileName', description='The name of the file

This parameter is required.', example='/intervene_dict/chn_ecommerce_general.dict'),
}

model GetAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    content?: string(name='content', description='The content of the file', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
  }(name='result', description='The result'),
}

model GetAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigFileResponseBody(name='body'),
}

/**
 * @summary Obtains the information in a specified advanced configuration file.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
 *
 * @param request GetAdvanceConfigFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAdvanceConfigFileResponse
 */
async function getAdvanceConfigFileWithOptions(instanceId: string, configName: string, request: GetAdvanceConfigFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAdvanceConfigFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAdvanceConfigFile',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}/file`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the information in a specified advanced configuration file.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
 *
 * @param request GetAdvanceConfigFileRequest
 * @return GetAdvanceConfigFileResponse
 */
async function getAdvanceConfigFile(instanceId: string, configName: string, request: GetAdvanceConfigFileRequest): GetAdvanceConfigFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAdvanceConfigFileWithOptions(instanceId, configName, request, headers, runtime);
}

model GetClusterResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    config?: map[string]object(name='config'),
    configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='2021-08-09 00:01:02'),
    createTime?: string(name='createTime'),
    currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced configuration version.', example='test_yyds_data1'),
    currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='test_yyds_data1'),
    dataNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of replicas.', example='1'),
      partition?: int32(name='partition', description='The number of partitions.', example='2'),
    }(name='dataNode', description='The specifications of the data node.'),
    description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
    latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='test_yyds_data1'),
    latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='test_yyds_data1'),
    name?: string(name='name', description='The name of the cluster.', example='general'),
    queryNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of nodes.', example='1'),
      partition?: int32(name='partition', description='The number of replicas.', example='2'),
    }(name='queryNode', description='The specifications of the query node.'),
    status?: string(name='status', description='The creation status of the cluster. Valid values: NEW and PUBLISH. NEW indicates that the cluster is being created. PUBLISH indicates that the cluster is created.', example='NEW'),
  }(name='result', description='The list of the cluster details.'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
 * @summary Queries the details of a cluster.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instance/{instanceId}/clusters/{clusterName}`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClusterResponse
 */
async function getClusterWithOptions(instanceId: string, clusterName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCluster',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters/${OpenApiUtil.getEncodeParam(clusterName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a cluster.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instance/{instanceId}/clusters/{clusterName}`
 *
 * @return GetClusterResponse
 */
async function getCluster(instanceId: string, clusterName: string): GetClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getClusterWithOptions(instanceId, clusterName, headers, runtime);
}

model GetClusterRunTimeInfoResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_hz_domain_1'),
      dataNodes?: [ 
        {
          configStatusList?: [ 
            {
              configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='""'),
              donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='1'),
              name?: string(name='name', description='The name of the cluster.', example='test_0704'),
              totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='0'),
            }
          ](name='configStatusList', description='The configuration status list.'),
          dataStatusList?: [ 
            {
              advanceConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version number.', example='1.0'),
              }(name='advanceConfigInfo', description='The information about advanced configurations.'),
              deployFailedWorker?: [ string ](name='deployFailedWorker', description='The name of the worker that failed because of a deployment failure.'),
              docSize?: int32(name='docSize', description='The storage capacity. Unit: GB.', example='2'),
              donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
              errorMsg?: string(name='errorMsg', description='The error message.', example='0A3B1C48006A6C0905F6375F4821EB50'),
              fullUpdateTime?: string(name='fullUpdateTime', description='The time when the full data was updated.', example='" "'),
              fullVersion?: long(name='fullVersion', description='The full version.', example='123423'),
              incUpdateTime?: string(name='incUpdateTime', description='The time when the incremental data was updated.', example='""'),
              incVersion?: long(name='incVersion', description='The incremental version.', example='123423'),
              indexConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version of the index template.', example='1.0.0'),
              }(name='indexConfigInfo', description='The configuration information of the index.'),
              indexSize?: long(name='indexSize', description='The size of the index.', example='100'),
              lackDiskWorker?: [ string ](name='lackDiskWorker', description='The name of the worker that failed because of insufficient disk space.'),
              lackMemWorker?: [ string ](name='lackMemWorker', description='The name of the worker that failed because of insufficient memory.'),
              name?: string(name='name', description='The name of the node.', example='ha-cn-c4d2rq7nt04_qrs'),
              totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='1'),
            }
          ](name='dataStatusList', description='The dataStatusList.'),
          serviceStatus?: {
            donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of nodes being processed in the cluster.', example='100'),
            name?: string(name='name', description='The name.', example='ha-cn-0ju2s170b03_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of nodes in the cluster.', example='100'),
          }(name='serviceStatus', description='The service status.'),
        }
      ](name='dataNodes', description='The information about the data node.'),
      queryNode?: {
        configStatusList?: [ 
          {
            configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='" "'),
            donePercent?: int32(name='donePercent', description='The progress.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
            name?: string(name='name', description='The name of the cluster.', example='ha-cn-zvp2qr1sk01_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='6'),
          }
        ](name='configStatusList', description='The dataStatusList.'),
        serviceStatus?: {
          donePercent?: int32(name='donePercent', description='The progress.', example='100'),
          doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
          name?: string(name='name', description='The name of the cluster.', example='ha-cn-c4d2rq7nt04_qrs'),
          totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='100'),
        }(name='serviceStatus', description='The service status.'),
      }(name='queryNode', description='The information about the query node.'),
    }
  ](name='result', description='The result set.'),
}

model GetClusterRunTimeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterRunTimeInfoResponseBody(name='body'),
}

/**
 * @summary Queries the runtime information about a specified cluster.
 *
 * @description ### Method
 * GET
 * ### URI
 * /openapi/ha3/instances/{instanceId}/cluster-run-time-info
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClusterRunTimeInfoResponse
 */
async function getClusterRunTimeInfoWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterRunTimeInfoResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetClusterRunTimeInfo',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/cluster-run-time-info`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the runtime information about a specified cluster.
 *
 * @description ### Method
 * GET
 * ### URI
 * /openapi/ha3/instances/{instanceId}/cluster-run-time-info
 *
 * @return GetClusterRunTimeInfoResponse
 */
async function getClusterRunTimeInfo(instanceId: string): GetClusterRunTimeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getClusterRunTimeInfoWithOptions(instanceId, headers, runtime);
}

model GetDataSourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    domain?: string(name='domain', description='The data center where the data source is deployed in offline mode', example='vpc_hz_domain_1'),
    indexes?: [ string ](name='indexes', description='The list of index information'),
    lastFulTime?: long(name='lastFulTime', description='The time when an index for full data was last built'),
    name?: string(name='name', description='The name of the data source', example='my_index'),
    status?: string(name='status', description='The state of the data source', example='NEW'),
    type?: string(name='type', description='The type of the data source', example='odps'),
  }(name='result', description='The list of information about the data source'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
 * @summary Obtains a data source.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceResponse
 */
async function getDataSourceWithOptions(instanceId: string, dataSourceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataSource',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains a data source.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @return GetDataSourceResponse
 */
async function getDataSource(instanceId: string, dataSourceName: string): GetDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSourceWithOptions(instanceId, dataSourceName, headers, runtime);
}

model GetDataSourceDeployResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    extend?: {
      hdfs?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
      }(name='hdfs'),
      odps?: {
        partitions?: map[string]string(name='partitions'),
      }(name='odps'),
      oss?: {
        path?: string(name='path', example='oss://opensearch'),
      }(name='oss'),
      saro?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
        version?: string(name='version', example='0.6.0'),
      }(name='saro'),
    }(name='extend'),
    processor?: {
      args?: string(name='args', example='{}'),
      resource?: string(name='resource', example='{}'),
    }(name='processor'),
    storage?: {
      accessKey?: string(name='accessKey', description='AK', example='ak'),
      accessSecret?: string(name='accessSecret', description='AS', example='as'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-miniapp-chongwen-static'),
      endpoint?: string(name='endpoint', description='odps endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      namespace?: string(name='namespace', example='lazada-campaign-flink'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20220926'),
      path?: string(name='path', example='/beiming_xobject/dwd_xobjectsandbox__list_create_action_by_new/'),
      project?: string(name='project', example='wireless_1688_personal_rec'),
      table?: string(name='table', example='behavior'),
    }(name='storage'),
    swift?: {
      topic?: string(name='topic', description='topic', example='topic'),
      zk?: string(name='zk', description='zk', example='zk'),
    }(name='swift'),
  }(name='result', description='Deploy'),
}

model GetDataSourceDeployResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceDeployResponseBody(name='body'),
}

/**
 * @summary 获取数据源部署信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceDeployResponse
 */
async function getDataSourceDeployWithOptions(instanceId: string, deployName: string, dataSourceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSourceDeployResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceDeploy',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}/deploys/${OpenApiUtil.getEncodeParam(deployName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源部署信息
 *
 * @return GetDataSourceDeployResponse
 */
async function getDataSourceDeploy(instanceId: string, deployName: string, dataSourceName: string): GetDataSourceDeployResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSourceDeployWithOptions(instanceId, deployName, dataSourceName, headers, runtime);
}

model GetDeployGraphResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    graph?: {
      indexMetas?: [ 
        {
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tableName?: string(name='tableName'),
          tag?: string(name='tag'),
          zoneName?: string(name='zoneName'),
        }
      ](name='indexMetas', description='索引元信息'),
      onlineMaster?: [ 
        {
          domainName?: string(name='domainName'),
          hippoId?: string(name='hippoId'),
          id?: long(name='id'),
          name?: string(name='name'),
        }
      ](name='onlineMaster', description='在线集群元信息'),
      tableIndexRelation?: map[string][ string ](name='tableIndexRelation', description='数据源和索引关联关系'),
      tableMetas?: [ 
        {
          buildDeployId?: long(name='buildDeployId'),
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='tableMetas', description='数据源元信息'),
      zoneIndexRelation?: map[string][ string ](name='zoneIndexRelation', description='zone和索引关联关系'),
      zoneMetas?: [ 
        {
          domainInfo?: string(name='domainInfo'),
          name?: string(name='name'),
          suezAdminName?: string(name='suezAdminName'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='zoneMetas', description='zone元信息'),
    }(name='graph'),
  }(name='result', description='The result returned', example='{}'),
}

model GetDeployGraphResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeployGraphResponseBody(name='body'),
}

/**
 * @summary Displays the overview of the deployment.
 *
 * @description ## Method
 * GET
 * ## URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/deploy-graph
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeployGraphResponse
 */
async function getDeployGraphWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeployGraphResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDeployGraph',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/deploy-graph`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Displays the overview of the deployment.
 *
 * @description ## Method
 * GET
 * ## URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/deploy-graph
 * ```
 *
 * @return GetDeployGraphResponse
 */
async function getDeployGraph(instanceId: string): GetDeployGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDeployGraphWithOptions(instanceId, headers, runtime);
}

model GetFileRequest {
  fileName?: string(name='fileName', description='The name of the file in full path

This parameter is required.', example='/schemas/automobile_vector_schema.json'),
}

model GetFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    content?: string(name='content', description='The content of the file.', example='None'),
    dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-2r42p5oi202_xijie_test'),
    fullPathName?: string(name='fullPathName', description='The name of the full path.', example='""'),
    isDir?: boolean(name='isDir', description='Indicates whether it is a directory.', example='True'),
    name?: string(name='name', description='The name of the file.', example='ha-cn-2r42ostoc01_qrs'),
    partition?: long(name='partition', description='The number of shards.', example='ds=20210828'),
  }(name='result', description='The information about the index.'),
}

model GetFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileResponseBody(name='body'),
}

/**
 * @summary Queries details about the version information of an index table.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
 *
 * @param request GetFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileResponse
 */
async function getFileWithOptions(instanceId: string, indexName: string, versionName: string, request: GetFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/versions/${OpenApiUtil.getEncodeParam(versionName)}/file`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries details about the version information of an index table.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
 *
 * @param request GetFileRequest
 * @return GetFileResponse
 */
async function getFile(instanceId: string, indexName: string, versionName: string, request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFileWithOptions(instanceId, indexName, versionName, request, headers, runtime);
}

model GetIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: {
    cluster?: map[string]ResultClusterValue(name='cluster'),
    config?: map[string]object(name='config'),
    configWhenBuild?: map[string]object(name='configWhenBuild'),
    content?: string(name='content', description='The content of the index.'),
    dataSource?: string(name='dataSource', example='ha-cn-tl32nd2nq01_00'),
    dataSourceInfo?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.'),
      config?: {
        accessKey?: string(name='accessKey'),
        accessSecret?: string(name='accessSecret'),
        bucket?: string(name='bucket'),
        endpoint?: string(name='endpoint', description='A parameter related to MaxCompute.'),
        namespace?: string(name='namespace', description='A parameter related to SARO.'),
        ossPath?: string(name='ossPath', description='A parameter related to OSS.'),
        partition?: string(name='partition'),
        path?: string(name='path', description='A parameter related to Apsara File Storage for HDFS.'),
        project?: string(name='project'),
        table?: string(name='table', description='A parameter related to SARO and MaxCompute.'),
      }(name='config', description='The configuration of MaxCompute data sources.'),
      domain?: string(name='domain', description='The offline deployment name of the data source.'),
      name?: string(name='name', description='The name of the data source.'),
      processParallelNum?: int32(name='processParallelNum'),
      processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.'),
      saroConfig?: {
        namespace?: string(name='namespace'),
        tableName?: string(name='tableName'),
      }(name='saroConfig', description='The configuration of SARO data sources.'),
      type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.'),
    }(name='dataSourceInfo', description='The information about the data source.'),
    description?: string(name='description', description='The remarks.'),
    domain?: string(name='domain'),
    fullUpdateTime?: string(name='fullUpdateTime', description='The last time when full data in the index was updated.'),
    fullVersion?: long(name='fullVersion', description='The version of the data.'),
    incUpdateTime?: string(name='incUpdateTime', description='The last time when incremental data in the index was updated.'),
    indexSize?: long(name='indexSize', description='The index size.'),
    indexStatus?: string(name='indexStatus', description='The status of the index. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, and RESTORE_USE. After a Retrieval Engine Edition instance is created, it enters the IN_USE state.'),
    name?: string(name='name', example='general'),
    partition?: int32(name='partition', description='The number of shards.'),
    versions?: [ 
      {
        desc?: string(name='desc', description='The description of the version.', example='close alarm, by 3.9.2 hotfix workflow'),
        files?: [ 
          {
            fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
            isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
            isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
            name?: string(name='name'),
          }
        ](name='files', description='The information about the files.'),
        name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
        status?: string(name='status', description='The status of the version.', example='2'),
        updateTime?: long(name='updateTime', description='The last time when the version was updated.', example='" "'),
        versionId?: int32(name='versionId', description='The ID of the version.', example='1'),
      }
    ](name='versions', description='The information about the versions.'),
  }(name='result', description='The information about the index.'),
}

model GetIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexResponseBody(name='body'),
}

/**
 * @summary Queries the information about an index version.
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIndexResponse
 */
async function getIndexWithOptions(instanceId: string, indexName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIndexResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about an index version.
 *
 * @return GetIndexResponse
 */
async function getIndex(instanceId: string, indexName: string): GetIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIndexWithOptions(instanceId, indexName, headers, runtime);
}

model GetIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    cluster?: string(name='cluster', description='The name of the cluster', example='ayoss-cn-zhangjiakou-b'),
    indexVersions?: [ 
      {
        buildDeployId?: string(name='buildDeployId', description='The ID of the index deployed in offline mode', example='" "'),
        currentVersion?: long(name='currentVersion'),
        indexName?: string(name='indexName', description='The name of the index table', example='table4'),
        versions?: [ long ](name='versions', description='The version of the index'),
      }
    ](name='indexVersions', description='The time when the cluster was updated'),
  }(name='result', description='The list of cluster details'),
}

model GetIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexVersionResponseBody(name='body'),
}

/**
 * @summary Obtains the information about index versions that the current index version can be rolled back to.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIndexVersionResponse
 */
async function getIndexVersionWithOptions(instanceId: string, clusterName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIndexVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIndexVersion',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters/${OpenApiUtil.getEncodeParam(clusterName)}/index-version`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the information about index versions that the current index version can be rolled back to.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
 *
 * @return GetIndexVersionResponse
 */
async function getIndexVersion(instanceId: string, clusterName: string): GetIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIndexVersionWithOptions(instanceId, clusterName, headers, runtime);
}

model GetInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method.', example='POSYPAY'),
    commodityCode?: string(name='commodityCode', description='The product code.', example='commodityCode'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-06-17T02:01:26Z'),
    description?: string(name='description', description='The description of the instance.', example='ha3_test'),
    expiredTime?: string(name='expiredTime', description='The expiration time.', example='1634609702'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved.', example='false'),
    instanceId?: string(name='instanceId', description='The ID of the resource.', example='ha-cn-7mz2qsgq301'),
    lockMode?: string(name='lockMode', description='The lock status.', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzjvw24el5lma'),
    status?: string(name='status', description='The status of the instance. Valid values:

*   INIT: being initialized
*   WAIT_CONFIG: to be configured
*   CONFIG_UPDATING: configuration taking effect
*   READY: normal', example='INIT'),
    tags?: [ 
      {
        key?: string(name='key', description='标签键', example='env'),
        value?: string(name='value', description='标签值', example='prod'),
      }
    ](name='tags', description='标签。'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated.', example='1634609702'),
  }(name='result', description='The result returned.'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the details of an instance based on a specified instance ID.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceResponse
 */
async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of an instance based on a specified instance ID.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @return GetInstanceResponse
 */
async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

model GetNodeConfigRequest {
  clusterName?: string(name='clusterName', description='The name of the cluster', example='vpc_sh_domain_2'),
  name?: string(name='name', description='The name of the cluster.', example='ha-cn-30174dhoz53_qrs'),
  type?: string(name='type', description='The type of the node. Valid values: qrs, search, index, and cluster. qrs indicates a query node, search indicates a data node, index indicates an index node, and cluster indicates a cluster node.', example='index'),
}

model GetNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    active?: boolean(name='active', description='Indicates whether the expression is the default one.', example='1'),
    dataDuplicateNumber?: int32(name='dataDuplicateNumber', description='The number of data replicas.', example='2'),
    dataFragmentNumber?: int32(name='dataFragmentNumber', description='The number of data shards.', example='2'),
    flowRatio?: int32(name='flowRatio', description='The traffic percentage.', example='0'),
    minServicePercent?: int32(name='minServicePercent', description='The minimum service ratio.', example='100'),
    published?: boolean(name='published', description='Indicates whether the node is associated with the cluster.', example='true'),
  }(name='result', description='The configurations of the node.'),
}

model GetNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeConfigResponseBody(name='body'),
}

/**
 * @summary Gets the configuration information of a node.
 *
 * @param request GetNodeConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeConfigResponse
 */
async function getNodeConfigWithOptions(instanceId: string, request: GetNodeConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNodeConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterName)) {
    query['clusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/node-config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Gets the configuration information of a node.
 *
 * @param request GetNodeConfigRequest
 * @return GetNodeConfigResponse
 */
async function getNodeConfig(instanceId: string, request: GetNodeConfigRequest): GetNodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getNodeConfigWithOptions(instanceId, request, headers, runtime);
}

model GetTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    dataProcessConfig?: [ 
      {
        dstField?: string(name='dstField', example='source_image_vector'),
        operator?: string(name='operator', example='vectorize'),
        params?: {
          srcFieldConfig?: {
            ossBucket?: string(name='ossBucket', description='OSS Bucket', example='test'),
            ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
            uid?: string(name='uid', example='uid'),
          }(name='srcFieldConfig'),
          vectorModal?: string(name='vectorModal', example='image'),
          vectorModel?: string(name='vectorModel', example='clip'),
        }(name='params'),
        srcField?: string(name='srcField', example='source_image'),
      }
    ](name='dataProcessConfig'),
    dataProcessorCount?: int32(name='dataProcessorCount', example='1'),
    dataSource?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
      config?: {
        accessKey?: string(name='accessKey', description='AK', example='ak'),
        accessSecret?: string(name='accessSecret', description='AS', example='as'),
        bucket?: string(name='bucket', example='heytea-ops-oss'),
        endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
        namespace?: string(name='namespace', example='namespace'),
        ossPath?: string(name='ossPath', example='/opensearch_index_data/sift_oss_test.data'),
        partition?: string(name='partition', example='ds=20220808'),
        path?: string(name='path', example='vendor/sebastian/comparator/src/exceptions'),
        project?: string(name='project', example='dp_pdm_marketing_prod'),
        table?: string(name='table', example='test_add'),
      }(name='config'),
      dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
      type?: string(name='type', example='odps'),
    }(name='dataSource'),
    fieldSchema?: map[string]string(name='fieldSchema'),
    name?: string(name='name', example='test_oss'),
    partitionCount?: int32(name='partitionCount', example='1'),
    primaryKey?: string(name='primaryKey', example='id'),
    rawSchema?: string(name='rawSchema', example='{}'),
    status?: string(name='status'),
    vectorIndex?: [ 
      {
        advanceParams?: {
          buildIndexParams?: string(name='buildIndexParams', example='{}'),
          linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
          minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
          searchIndexParams?: string(name='searchIndexParams', example='{}'),
        }(name='advanceParams'),
        dimension?: string(name='dimension', example='128'),
        distanceType?: string(name='distanceType', example='SquaredEuclidean'),
        indexName?: string(name='indexName', example='test_odps'),
        namespace?: string(name='namespace', example='namespace'),
        sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
        sparseValueField?: string(name='sparseValueField', example='sparse_values'),
        vectorField?: string(name='vectorField', example='source_image_vector'),
        vectorIndexType?: string(name='vectorIndexType', example='Qc'),
      }
    ](name='vectorIndex'),
  }(name='result'),
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableResponseBody(name='body'),
}

/**
 * @summary 获取索引表信息V2
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableResponse
 */
async function getTableWithOptions(instanceId: string, tableName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTable',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取索引表信息V2
 *
 * @return GetTableResponse
 */
async function getTable(instanceId: string, tableName: string): GetTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableWithOptions(instanceId, tableName, headers, runtime);
}

model GetTableGenerationResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    generationId?: long(name='generationId', description='generationId', example='1708674867'),
    status?: string(name='status', description='starting, building, ready, stopped, failed', example='ready'),
  }(name='result'),
}

model GetTableGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableGenerationResponseBody(name='body'),
}

/**
 * @summary 根据generationId获取某个索引版本状态V2
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableGenerationResponse
 */
async function getTableGenerationWithOptions(instanceId: string, tableName: string, generationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTableGenerationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTableGeneration',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}/index_versions/${OpenApiUtil.getEncodeParam(generationId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据generationId获取某个索引版本状态V2
 *
 * @return GetTableGenerationResponse
 */
async function getTableGeneration(instanceId: string, tableName: string, generationId: string): GetTableGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableGenerationWithOptions(instanceId, tableName, generationId, headers, runtime);
}

model ListAdvanceConfigDirRequest {
  dirName?: string(name='dirName', description='The name of the directory

This parameter is required.', example='/zones/general'),
}

model ListAdvanceConfigDirResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: [ 
    {
      fullPathName?: string(name='fullPathName', description='The name of the absolute path.', example='"/path/wpd/nae"'),
      isDir?: boolean(name='isDir', description='Indicates whether it is a directory. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
      isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template. Valid values: **true** and **false**. true indicates that it is a template, and false indicates that it is not a template.', example='true'),
      name?: string(name='name', description='The name of the cluster.', example='file_name_1'),
    }
  ](name='result', description='The file list in the advanced configuration directory.'),
}

model ListAdvanceConfigDirResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigDirResponseBody(name='body'),
}

/**
 * @summary Obtains the file list in an advanced configuration directory.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir?dirName={dirName}`
 *
 * @param request ListAdvanceConfigDirRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAdvanceConfigDirResponse
 */
async function listAdvanceConfigDirWithOptions(instanceId: string, configName: string, request: ListAdvanceConfigDirRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAdvanceConfigDirResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dirName)) {
    query['dirName'] = request.dirName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAdvanceConfigDir',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}/dir`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the file list in an advanced configuration directory.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir?dirName={dirName}`
 *
 * @param request ListAdvanceConfigDirRequest
 * @return ListAdvanceConfigDirResponse
 */
async function listAdvanceConfigDir(instanceId: string, configName: string, request: ListAdvanceConfigDirRequest): ListAdvanceConfigDirResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAdvanceConfigDirWithOptions(instanceId, configName, request, headers, runtime);
}

model ListAdvanceConfigsRequest {
  dataSourceName?: string(name='dataSourceName'),
  indexName?: string(name='indexName'),
  newMode?: boolean(name='newMode'),
  type?: string(name='type', description='The type of the advanced configurations. Valid values: online and offline. - online The default value is offline.', example='online'),
}

model ListAdvanceConfigsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      advanceConfigType?: string(name='advanceConfigType'),
      content?: string(name='content'),
      contentType?: string(name='contentType'),
      creator?: string(name='creator'),
      desc?: string(name='desc', description='The description.', example='test'),
      files?: [ 
        {
          fullPathName?: string(name='fullPathName', description='The name of the absolute path.', example='/path/wpd/nae'),
          isDir?: boolean(name='isDir', description='Indicates whether it is a directory. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
          isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
          name?: string(name='name', description='The name of the file.', example='file_name_1'),
        }
      ](name='files', description='The list of file names.'),
      name?: string(name='name', description='The name of the advanced configuration.', example='my_index'),
      status?: string(name='status', description='The state of the advanced configuration. Valid values: drafting, used, unused, and trash. drafting indicates that the advanced configuration is a draft. used indicates that the advanced configuration is in use. unused indicates that the advanced configuration is unused. trash indicates that the advanced configuration is being deleted.', example='drafting'),
      updateTime?: long(name='updateTime', description='The update time.', example='1631070464000'),
    }
  ](name='result', description='The list of advanced configurations.'),
}

model ListAdvanceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigsResponseBody(name='body'),
}

/**
 * @summary Obtains a list of advanced configurations.
 *
 * @description ## Sample requests
 * `GET /openapi/ha3/instances/ose-test1/advanced-configs`
 *
 * @param request ListAdvanceConfigsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAdvanceConfigsResponse
 */
async function listAdvanceConfigsWithOptions(instanceId: string, request: ListAdvanceConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAdvanceConfigsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dataSourceName)) {
    query['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.indexName)) {
    query['indexName'] = request.indexName;
  }
  if (!Util.isUnset(request.newMode)) {
    query['newMode'] = request.newMode;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAdvanceConfigs',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains a list of advanced configurations.
 *
 * @description ## Sample requests
 * `GET /openapi/ha3/instances/ose-test1/advanced-configs`
 *
 * @param request ListAdvanceConfigsRequest
 * @return ListAdvanceConfigsResponse
 */
async function listAdvanceConfigs(instanceId: string, request: ListAdvanceConfigsRequest): ListAdvanceConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAdvanceConfigsWithOptions(instanceId, request, headers, runtime);
}

model ListClusterNamesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: {
    description?: string(name='description', description='The description of the cluster', example='ha3_test'),
    id?: long(name='id', description='The ID of the cluster', example='25030'),
    name?: string(name='name', description='The name of the cluster', example='my_index'),
  }(name='result', description='The result set'),
}

model ListClusterNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterNamesResponseBody(name='body'),
}

/**
 * @summary Queries cluster names.
 *
 * @description ### Method
 * GET
 * ### URI
 * /openapi/ha3/instances/{instanceId}/cluster-names
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClusterNamesResponse
 */
async function listClusterNamesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterNamesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListClusterNames',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/cluster-names`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries cluster names.
 *
 * @description ### Method
 * GET
 * ### URI
 * /openapi/ha3/instances/{instanceId}/cluster-names
 *
 * @return ListClusterNamesResponse
 */
async function listClusterNames(): ListClusterNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listClusterNamesWithOptions(headers, runtime);
}

model ListClusterTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='" "'),
      field3?: string(name='field3', description='The field3 field that is passed through when you create a state machine.', example='" "'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-zvp2ljiwe01_api2@bj_vpc_domain_1@null@MANUAL-ha-cn-zvp2ljiwe01_api2@1649729867698@028315'),
      groupType?: string(name='groupType', description='Indicates whether the change is a data source task change or a cluster task change.', example='" "'),
      name?: string(name='name', description='The task name on the card.', example='ha-cn-pl32rf0js04_qrs'),
      status?: string(name='status', description='The overall status of FSM.', example='onlyPublished'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The content of the tag.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The level of the tag.', example='" "'),
        }
      ](name='tags', description='The status tag of the progress bar chart.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The date when the task was completed.', example='" "'),
          index?: long(name='index', description='The sequence number of the task.', example='100'),
          name?: string(name='name', description='The name of the task.', example='general'),
          status?: string(name='status', description='The status of the task.', example='2'),
        }
      ](name='taskNodes', description='The information about the task.'),
      time?: string(name='time', description='The timestamp of the task on the card.', example='1657610520'),
      type?: string(name='type', description='The type of the task on the card.', example='qrs'),
      user?: string(name='user', description='The user who triggered the FSM process.', example='" "'),
    }
  ](name='result', description='The information about the index.'),
}

model ListClusterTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterTasksResponseBody(name='body'),
}

/**
 * @summary Displays cluster tasks .
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/cluster-tasks
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClusterTasksResponse
 */
async function listClusterTasksWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterTasksResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListClusterTasks',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/cluster-tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Displays cluster tasks .
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/cluster-tasks
 * ```
 *
 * @return ListClusterTasksResponse
 */
async function listClusterTasks(instanceId: string): ListClusterTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listClusterTasksWithOptions(instanceId, headers, runtime);
}

model ListClustersResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: [ 
    {
      config?: map[string]object(name='config'),
      configUpdateTime?: string(name='configUpdateTime', description='The time when the configuration was updated.', example='" "'),
      createTime?: string(name='createTime'),
      currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced version.', example='" "'),
      currentOfflineDictConfigVersion?: string(name='currentOfflineDictConfigVersion', description='词典配置生效版本'),
      currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='" "'),
      currentOnlineQueryConfigVersion?: string(name='currentOnlineQueryConfigVersion', description='查询配置生效版本'),
      dataNode?: {
        name?: string(name='name', description='The name of the node.', example='ha-cn-8ed2k7brm05_qrs'),
        number?: int32(name='number', description='The number of nodes.', example='1'),
        partition?: int32(name='partition', description='The partition ID of the node.', example='dt=20220216'),
      }(name='dataNode', description='The information about the node in the cluster.'),
      description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
      latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='" "'),
      latestOfflineDictConfigVersion?: string(name='latestOfflineDictConfigVersion', description='词典配置最新版本'),
      latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='" "'),
      latestOnlineQueryConfigVersion?: string(name='latestOnlineQueryConfigVersion', description='查询配置最新版本'),
      name?: string(name='name', description='The name of the cluster.', example='ha-cn-7pp2pcna701_qrs'),
      queryNode?: {
        name?: string(name='name', description='The name of the node.', example='test_0704'),
        number?: int32(name='number', description='The number of nodes.', example='1'),
        partition?: int32(name='partition', description='The number o replicas.', example='dt=20211216'),
      }(name='queryNode', description='The query node of the cluster.'),
      status?: string(name='status', description='The status of the cluster. Valid values: running, starting, stopping, and stopped. running indicates the cluster is running, starting indicates the cluster is starting, stopping indicates the cluster is stopping, and stopped indicates the cluster has stopped.', example='"starting"'),
    }
  ](name='result', description='The list of clusters.'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
 * @summary Queries the list of clusters.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/clusters
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClustersResponse
 */
async function listClustersWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListClustersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the list of clusters.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/clusters
 * ```
 *
 * @return ListClustersResponse
 */
async function listClusters(instanceId: string): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listClustersWithOptions(instanceId, headers, runtime);
}

model ListDataSourceSchemasResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      addIndex?: boolean(name='addIndex', description='Indicates whether the index properties are added. Valid values: true and false. **true** indicates that the index properties are added, and **false** indicates that the index properties are not added.', example='false'),
      attribute?: boolean(name='attribute', description='Indicates whether it is an attribute field. Valid values: true and false. **true** indicates that it is an attribute field, and **false** indicates that it is not an attribute field.', example='false'),
      custom?: boolean(name='custom', description='Indicates whether it is a custom field. Valid values: true and false. **true** indicates that it is a custom field, and **false** indicates that it is not a custom field.', example='false'),
      name?: string(name='name', description='The name of the field.', example='test'),
      primaryKey?: {
        hasPrimaryKeyAttribute?: boolean(name='hasPrimaryKeyAttribute', description='Indicates whether it has the primary key property. **true** indicates that it has the primary key property, and **false** indicates that it does not have the primary key property.', example='false'),
        isPrimaryKey?: boolean(name='isPrimaryKey', description='Indicates whether it is the primary key. Valid values: true and false. **true** indicates that it is the primary key, and **false** indicates that it is not the primary key.', example='false'),
        isPrimaryKeySorted?: boolean(name='isPrimaryKeySorted', description='Indicates whether data is sorted based on the primary key. Valid values: true and false. **true** indicates that data is sorted based on the primary key, and **false** indicates that data is not sorted based on the primary key.', example='false'),
      }(name='primaryKey', description='The primary key.'),
      summary?: boolean(name='summary', description='Indicates whether the information can be displayed. Valid values: true and false. **true** indicates that the information can be displayed, and **false** indicates that the information cannot be displayed.', example='false'),
      type?: string(name='type', description='The type of the field.', example='STRING'),
    }
  ](name='result', description='The result returned.'),
}

model ListDataSourceSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSchemasResponseBody(name='body'),
}

/**
 * @summary Obtains the schema information of a specified data source.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceSchemasResponse
 */
async function listDataSourceSchemasWithOptions(instanceId: string, dataSourceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourceSchemasResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceSchemas',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}/schemas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the schema information of a specified data source.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas`
 *
 * @return ListDataSourceSchemasResponse
 */
async function listDataSourceSchemas(instanceId: string, dataSourceName: string): ListDataSourceSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourceSchemasWithOptions(instanceId, dataSourceName, headers, runtime);
}

model ListDataSourceTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='""'),
      field3?: string(name='field3', description='The field3 field that is passed through when you create a state machine.', example='""'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1062017779051424-ha-cn-2r42ostoc01_ecom_table@vpc_hz_domain_1@null@MANUAL-ha-cn-2r42ostoc01_ecom_table@1655974525756@006754'),
      groupType?: string(name='groupType', description='Indicates whether the change is a data source task change or a cluster task change.', example='" "'),
      name?: string(name='name', description='The task name on the card.', example='general'),
      status?: string(name='status', description='The overall status of FSM.', example='2'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The content of the tag.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The level of the tag.', example='""'),
        }
      ](name='tags', description='The status tag of the progress bar chart.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The date when the task was completed.', example='""'),
          index?: long(name='index', description='The sequence number of the task.', example='100'),
          name?: string(name='name', description='The name of the task.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The status of the task.', example='onlyPublished'),
        }
      ](name='taskNodes', description='The information about the task.'),
      time?: string(name='time', description='The timestamp of the task on the card.', example='1646279473'),
      type?: string(name='type', description='The type of the task on the card.', example='search'),
      user?: string(name='user', description='The user who triggered the finite-state machine (FSM) process.', example='""'),
    }
  ](name='result', description='The information about the index.'),
}

model ListDataSourceTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceTasksResponseBody(name='body'),
}

/**
 * @summary Displays data source tasks.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/data-source-tasks
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceTasksResponse
 */
async function listDataSourceTasksWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourceTasksResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceTasks',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-source-tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Displays data source tasks.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/data-source-tasks
 * ```
 *
 * @return ListDataSourceTasksResponse
 */
async function listDataSourceTasks(instanceId: string): ListDataSourceTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourceTasksWithOptions(instanceId, headers, runtime);
}

model ListDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: [ 
    {
      domain?: string(name='domain', description='The data center where the data source is deployed in offline mode.', example='test'),
      indexes?: [ string ](name='indexes', description='The information about indexes.'),
      lastFulTime?: long(name='lastFulTime', description='The time when an index for full data was last built.'),
      name?: string(name='name', description='The name of the data source.', example='data_source_name'),
      status?: string(name='status', description='The state of the data source.', example='new'),
      type?: string(name='type', description='The type of the data source.', example='odps'),
    }
  ](name='result', description='The result returned.'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary Obtains the list of data sources.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources`
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
async function listDataSourcesWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the list of data sources.
 *
 * @description ## Method
 * `GET`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources`
 *
 * @return ListDataSourcesResponse
 */
async function listDataSources(instanceId: string): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(instanceId, headers, runtime);
}

model ListDateSourceGenerationsRequest {
  domainName?: string(name='domainName', description='The data center where the data source is deployed.

This parameter is required.', example='bj_vpc_domain_1'),
  validStatus?: boolean(name='validStatus', description='The valid state of the data source. Valid values: true and false. The default value of this parameter is true.

1.  true indicates that the generations that have not expired and of which the tasks have been executed are returned.
2.  false indicates that all generations are returned.', example='true'),
}

model ListDateSourceGenerationsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      buildDeployId?: int32(name='buildDeployId', description='buildDeployId', example='122'),
      createTime?: long(name='createTime', description='The time to start index building.', example='1626143673'),
      dataDumpRoot?: string(name='dataDumpRoot', description='The directory where the index file created by using the dump table is saved.', example='""'),
      generation?: long(name='generation', description='The primary key of the generation.', example='1626143930'),
      partition?: map[string]int32(name='partition', description='Key indicates the name of the index. value indicates the number of shards.'),
      status?: string(name='status', description='The status.', example='STOPPED'),
      timestamp?: long(name='timestamp', description='The timestamp when the offline indexing was initiated.', example='1626143673'),
    }
  ](name='result', description='List'),
}

model ListDateSourceGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDateSourceGenerationsResponseBody(name='body'),
}

/**
 * @summary Obtains the data restoration version of a data source.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations?domainName={domainName}`
 *
 * @param request ListDateSourceGenerationsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDateSourceGenerationsResponse
 */
async function listDateSourceGenerationsWithOptions(instanceId: string, dataSourceName: string, request: ListDateSourceGenerationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDateSourceGenerationsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    query['domainName'] = request.domainName;
  }
  if (!Util.isUnset(request.validStatus)) {
    query['validStatus'] = request.validStatus;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDateSourceGenerations',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}/generations`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the data restoration version of a data source.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations?domainName={domainName}`
 *
 * @param request ListDateSourceGenerationsRequest
 * @return ListDateSourceGenerationsResponse
 */
async function listDateSourceGenerations(instanceId: string, dataSourceName: string, request: ListDateSourceGenerationsRequest): ListDateSourceGenerationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDateSourceGenerationsWithOptions(instanceId, dataSourceName, request, headers, runtime);
}

model ListIndexesRequest {
  newMode?: boolean(name='newMode', description='是否为新版本控制台页面', example='true'),
}

model ListIndexesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content', description='schema JSON', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
      dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-7mz2kvu2c01_table4'),
      dataSourceInfo?: {
        autoBuildIndex?: boolean(name='autoBuildIndex', description='是否开启自动全量', example='true'),
        config?: {
          accessKey?: string(name='accessKey', description='odps数据源ak', example='root'),
          accessSecret?: string(name='accessSecret', description='odps数据源ak secret', example='root123'),
          bucket?: string(name='bucket', description='oss命名空间', example='ha3test-oss'),
          endpoint?: string(name='endpoint', description='odps相关', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
          namespace?: string(name='namespace', description='saro相关', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          ossPath?: string(name='ossPath', description='oss数据源相关', example='/test_opensearch/sift_oss_test.data'),
          partition?: string(name='partition', description='数据分片', example='ds=12345'),
          path?: string(name='path', description='hdfs相关', example='http://test_opensearch/sift_oss_test.data'),
          project?: string(name='project', description='odps数据源项目名称', example='tisplus_dev'),
          table?: string(name='table', description='saro、odps相关', example='dump_odps_demo'),
        }(name='config', description='odps 数据源配置'),
        domain?: string(name='domain', description='离线部署', example='test'),
        name?: string(name='name', description='数据源名', example='index1'),
        processPartitionCount?: int32(name='processPartitionCount', description='数据更新资源数', example='2'),
        saroConfig?: {
          namespace?: string(name='namespace', description='saro数据源的namespace', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          tableName?: string(name='tableName', description='saro数据表名称', example='dump_odps_demo'),
        }(name='saroConfig', description='saro数据源配置'),
        type?: string(name='type', description='数据源类型 (odps, swift, saro, oss, unKnow)', example='odps'),
      }(name='dataSourceInfo', description='数据源相关信息'),
      description?: string(name='description', description='备注', example='备注'),
      domain?: string(name='domain', description='The name of the data center where the data source is deployed.', example='test'),
      fullUpdateTime?: string(name='fullUpdateTime', description='全量切换时间', example='2023-07-05 10:40:38'),
      fullVersion?: long(name='fullVersion', description='全量版本  即：索引版本', example='1688523414'),
      incUpdateTime?: string(name='incUpdateTime', description='增量更新时间', example='2023-07-05 10:58:33'),
      indexSize?: long(name='indexSize', description='索引大小', example='4689'),
      indexStatus?: string(name='indexStatus', description='NEW, PUBLISH', example='" "'),
      name?: string(name='name', description='The name of the index.', example='general'),
      partition?: int32(name='partition', description='数据分片', example='2'),
      versions?: [ 
        {
          desc?: string(name='desc', description='The description.', example='close alarm, by 3.9.2 hotfix workflow'),
          files?: [ 
            {
              fullPathName?: string(name='fullPathName', description='The name of the directory for the index.', example='" "'),
              isDir?: boolean(name='isDir', description='Indicates whether a directory exists.', example='True'),
              isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template.', example='True'),
              name?: string(name='name', description='The name of the file.', example='ha-cn-7mz2iv7sq01_qrs'),
            }
          ](name='files', description='The list of file names.'),
          name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The state of the version. Valid values: drafting, used, unused and trash. drafting indicates that the version is a draft, used indicates that the version is used online, unused indicates that the version is not used, and trash indicates that the version is being deleted.', example='2'),
          updateTime?: long(name='updateTime', description='The time when the version was updated.', example='" "'),
          versionId?: int32(name='versionId', description='The ID of the version. The value of this parameter is null for the edit version.', example='1'),
        }
      ](name='versions', description='The list of version information.'),
    }
  ](name='result', description='The index list.'),
}

model ListIndexesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexesResponseBody(name='body'),
}

/**
 * @summary Obtains the index list.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes
 *
 * @param request ListIndexesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIndexesResponse
 */
async function listIndexesWithOptions(instanceId: string, request: ListIndexesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIndexesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.newMode)) {
    query['newMode'] = request.newMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIndexes',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the index list.
 *
 * @description ## Method
 *     GET
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes
 *
 * @param request ListIndexesRequest
 * @return ListIndexesResponse
 */
async function listIndexes(instanceId: string, request: ListIndexesRequest): ListIndexesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIndexesWithOptions(instanceId, request, headers, runtime);
}

model ListInstanceSpecsRequest {
  type?: string(name='type', description='The node type. Valid values: qrs, search, index, and cluster. qrs indicates a query node, search indicates a data node, index indicates an index node, and cluster indicates a cluster.

This parameter is required.', example='search'),
}

model ListInstanceSpecsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      cpu?: int32(name='cpu', description='None', example='1'),
      maxDisk?: int32(name='maxDisk', description='单数据节点存储空间最大值'),
      mem?: int32(name='mem', description='Unit: GB', example='4'),
      minDisk?: int32(name='minDisk', description='单数据节点存储空间最小值'),
    }
  ](name='result', description='List'),
}

model ListInstanceSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceSpecsResponseBody(name='body'),
}

/**
 * @summary Queries instances.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/specs?type=qrs`
 *
 * @param request ListInstanceSpecsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceSpecsResponse
 */
async function listInstanceSpecsWithOptions(instanceId: string, request: ListInstanceSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceSpecs',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/specs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries instances.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/specs?type=qrs`
 *
 * @param request ListInstanceSpecsRequest
 * @return ListInstanceSpecsResponse
 */
async function listInstanceSpecs(instanceId: string, request: ListInstanceSpecsRequest): ListInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceSpecsWithOptions(instanceId, request, headers, runtime);
}

model ListInstancesRequest {
  description?: string(name='description', description='The description of the instance. You can use this description to filter instances. Fuzzy match is supported.', example='Havenask instance'),
  edition?: string(name='edition', description='The Instance type, vector (vector index version),engine (recall engine version)', example='vector'),
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-83570439y0n'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzgpiswzbksdi'),
  tags?: [ 
    {
      key?: string(name='key', description='The key of the tag.', example='backup'),
      value?: string(name='value', description='The value of the tag.', example='oboms-disk'),
    }
  ](name='tags', description='The tag dictionary.'),
}

model ListInstancesShrinkRequest {
  description?: string(name='description', description='The description of the instance. You can use this description to filter instances. Fuzzy match is supported.', example='Havenask instance'),
  edition?: string(name='edition', description='The Instance type, vector (vector index version),engine (recall engine version)', example='vector'),
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-83570439y0n'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzgpiswzbksdi'),
  tagsShrink?: string(name='tags', description='The tag dictionary.'),
}

model ListInstancesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', description='The billing method', example='PrePaid'),
      commodityCode?: string(name='commodityCode', description='The product code', example='""'),
      createTime?: string(name='createTime', description='The time when the instance was created', example='2022-06-04T02:03:21Z'),
      description?: string(name='description', description='The description of the instance', example='Emergency test'),
      expiredTime?: string(name='expiredTime', description='The expiration time', example='1634885083'),
      inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved', example='false'),
      instanceId?: string(name='instanceId', description='The ID of the resource', example='ha-cn-2r42n8oh001'),
      lockMode?: string(name='lockMode', description='The lock status', example='Unlock'),
      network?: {
        endpoint?: string(name='endpoint', description='The access point of the gateway', example='""'),
        vSwitchId?: string(name='vSwitchId', description='The ID of the virtual switch', example='vsw-bp11ldcf59q2nbwkqgj6z'),
        vpcId?: string(name='vpcId', description='The ID of the Virtual Private Cloud (VPC) network', example='vpc-wz9axk41d9vffoc79x0oe'),
      }(name='network', description='Information about the instance of the network search engine'),
      resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group', example='rg-aekzgpiswzbksdi'),
      status?: string(name='status', description='The status of the instance', example='2'),
      tags?: [ 
        {
          key?: string(name='key', description='The key of the tag.', example='env'),
          value?: string(name='value', description='The value of the tag.', example='oboms-disk'),
        }
      ](name='tags', description='The result returned.'),
      updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
    }
  ](name='result', description='The result returned'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned', example='5'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
 * @summary Queries instances.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/[code]/instances`
 *
 * @param tmpReq ListInstancesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstancesResponse
 */
async function listInstancesWithOptions(tmpReq: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ListInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    query['description'] = request.description;
  }
  if (!Util.isUnset(request.edition)) {
    query['edition'] = request.edition;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['instanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries instances.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/[code]/instances`
 *
 * @param request ListInstancesRequest
 * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model ListOnlineConfigsRequest {
  domain?: string(name='domain', description='The name of the domain

This parameter is required.', example='sz_vpc_domain_1'),
}

model ListOnlineConfigsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      config?: string(name='config', description='The configuration information', example='{\\\\"specItems\\\\":[{\\\\"specKey\\\\":\\\\"YQ_KEYWORD_NUMBER_PLUS\\\\",\\\\"value\\\\":\\\\"1\\\\"}]}'),
      indexName?: string(name='indexName', description='The name of the index', example='generation'),
    }
  ](name='result', description='List'),
}

model ListOnlineConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineConfigsResponseBody(name='body'),
}

/**
 * @summary Obtains the details of online configurations.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs?domain={domain}
 * ```
 *
 * @param request ListOnlineConfigsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOnlineConfigsResponse
 */
async function listOnlineConfigsWithOptions(instanceId: string, nodeName: string, request: ListOnlineConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOnlineConfigsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.domain)) {
    query['domain'] = request.domain;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOnlineConfigs',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/node/${OpenApiUtil.getEncodeParam(nodeName)}/online-configs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the details of online configurations.
 *
 * @description ### Method
 * ```java
 * GET
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs?domain={domain}
 * ```
 *
 * @param request ListOnlineConfigsRequest
 * @return ListOnlineConfigsResponse
 */
async function listOnlineConfigs(instanceId: string, nodeName: string, request: ListOnlineConfigsRequest): ListOnlineConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listOnlineConfigsWithOptions(instanceId, nodeName, request, headers, runtime);
}

model ListQueryResultRequest {
  query?: string(name='query', description='The query statement', example='query%3D1%26%26config%3Dstart%3A0%2Chit%3A10%2Cformat%3Ajson%26%26cluster%3Dgeneral'),
  sql?: string(name='sql', description='The SQL statement that is executed in the query', example='query%3Dselect%20max(content_id)%20from%20generation'),
}

model ListQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='9E5BCFAA-98B3-51D0-9188-B1BC07589337'),
}

model ListQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueryResultResponseBody(name='body'),
}

/**
 * @summary Queries the query result.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/query?query=xxxx`
 *
 * @param request ListQueryResultRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQueryResultResponse
 */
async function listQueryResultWithOptions(instanceId: string, request: ListQueryResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryResultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.sql)) {
    query['sql'] = request.sql;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueryResult',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/query`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the query result.
 *
 * @description ### Method
 * `GET`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/query?query=xxxx`
 *
 * @param request ListQueryResultRequest
 * @return ListQueryResultResponse
 */
async function listQueryResult(instanceId: string, request: ListQueryResultRequest): ListQueryResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryResultWithOptions(instanceId, request, headers, runtime);
}

model ListTableGenerationsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: [ 
    {
      generationId?: long(name='generationId', description='generationId', example='1708674867'),
    }
  ](name='result', description='List'),
}

model ListTableGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableGenerationsResponseBody(name='body'),
}

/**
 * @summary 获取索引generation列表V2
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTableGenerationsResponse
 */
async function listTableGenerationsWithOptions(instanceId: string, tableName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListTableGenerationsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListTableGenerations',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}/index_versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取索引generation列表V2
 *
 * @return ListTableGenerationsResponse
 */
async function listTableGenerations(instanceId: string, tableName: string): ListTableGenerationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTableGenerationsWithOptions(instanceId, tableName, headers, runtime);
}

model ListTablesRequest {
  newMode?: boolean(name='newMode', example='true'),
}

model ListTablesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      indexStatus?: string(name='indexStatus', example='IN_USE'),
      name?: string(name='name', example='es_test_1b'),
      status?: string(name='status'),
    }
  ](name='result', description='List'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
 * @summary 获取索引列表V2
 *
 * @param request ListTablesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTablesResponse
 */
async function listTablesWithOptions(instanceId: string, request: ListTablesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.newMode)) {
    query['newMode'] = request.newMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTables',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取索引列表V2
 *
 * @param request ListTablesRequest
 * @return ListTablesResponse
 */
async function listTables(instanceId: string, request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTablesWithOptions(instanceId, request, headers, runtime);
}

model ModifyAdvanceConfigFileRequest {
  content?: string(name='content', description='The content of the file.', example='"ha3"'),
  variables?: map[string]VariablesValue(name='variables', description='The variable.'),
  fileName?: string(name='fileName', description='The name of the file.

This parameter is required.', example='/qrs.json'),
}

model ModifyAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAdvanceConfigFileResponseBody(name='body'),
}

/**
 * @summary Modifies the advanced configurations.
 *
 * @description ## Method
 *     put
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
 *
 * @param request ModifyAdvanceConfigFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAdvanceConfigFileResponse
 */
async function modifyAdvanceConfigFileWithOptions(instanceId: string, configName: string, request: ModifyAdvanceConfigFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyAdvanceConfigFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['content'] = request.content;
  }
  if (!Util.isUnset(request.variables)) {
    body['variables'] = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAdvanceConfigFile',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}/file`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the advanced configurations.
 *
 * @description ## Method
 *     put
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
 *
 * @param request ModifyAdvanceConfigFileRequest
 * @return ModifyAdvanceConfigFileResponse
 */
async function modifyAdvanceConfigFile(instanceId: string, configName: string, request: ModifyAdvanceConfigFileRequest): ModifyAdvanceConfigFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyAdvanceConfigFileWithOptions(instanceId, configName, request, headers, runtime);
}

model ModifyClusterDescRequest {
  body?: map[string]any(name='body', description='The parameters in the request body', example='{}'),
}

model ModifyClusterDescResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterDescResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterDescResponseBody(name='body'),
}

/**
 * @summary Modifies the description of a specified cluster.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc`
 *
 * @param request ModifyClusterDescRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyClusterDescResponse
 */
async function modifyClusterDescWithOptions(instanceId: string, clusterName: string, request: ModifyClusterDescRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterDescResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterDesc',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters/${OpenApiUtil.getEncodeParam(clusterName)}/desc`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the description of a specified cluster.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc`
 *
 * @param request ModifyClusterDescRequest
 * @return ModifyClusterDescResponse
 */
async function modifyClusterDesc(instanceId: string, clusterName: string, request: ModifyClusterDescRequest): ModifyClusterDescResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterDescWithOptions(instanceId, clusterName, request, headers, runtime);
}

model ModifyClusterOfflineConfigRequest {
  buildMode?: string(name='buildMode', description='The mode of reindexing. Valid values: api and indexRecover. api indicates to push incremental data to a data source by calling the API operations. indexRecover indicates that the data source is restored from the index.', example='indexRecover'),
  config?: map[string]int32(name='config', description='The configuration name, which is stored as a key.'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source. Valid values: odps, swift, saro, and unKnow.', example='maxComputer'),
  dataTimeSec?: int32(name='dataTimeSec', description='This parameter is required when index building by using API data sources is triggered.', example='1640867288'),
  domain?: string(name='domain', description='The domain where the data source is deployed.', example='vpc_hz_domain_1'),
  generation?: long(name='generation', description='The data restoration version.', example='160142641'),
  partition?: string(name='partition', description='This parameter is required when index building for full data in a MaxCompute data source is triggered.', example='20211202'),
  pushMode?: string(name='pushMode'),
}

model ModifyClusterOfflineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyClusterOfflineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOfflineConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration information of a cluster.
 *
 * @description ## Request syntax
 *     PUT /openapi/ha3/instances/{instanceId}/cluster-offline-config
 *
 * @param request ModifyClusterOfflineConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyClusterOfflineConfigResponse
 */
async function modifyClusterOfflineConfigWithOptions(instanceId: string, request: ModifyClusterOfflineConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterOfflineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.buildMode)) {
    body['buildMode'] = request.buildMode;
  }
  if (!Util.isUnset(request.config)) {
    body['config'] = request.config;
  }
  if (!Util.isUnset(request.dataSourceName)) {
    body['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['dataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataTimeSec)) {
    body['dataTimeSec'] = request.dataTimeSec;
  }
  if (!Util.isUnset(request.domain)) {
    body['domain'] = request.domain;
  }
  if (!Util.isUnset(request.generation)) {
    body['generation'] = request.generation;
  }
  if (!Util.isUnset(request.partition)) {
    body['partition'] = request.partition;
  }
  if (!Util.isUnset(request.pushMode)) {
    body['pushMode'] = request.pushMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterOfflineConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/cluster-offline-config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration information of a cluster.
 *
 * @description ## Request syntax
 *     PUT /openapi/ha3/instances/{instanceId}/cluster-offline-config
 *
 * @param request ModifyClusterOfflineConfigRequest
 * @return ModifyClusterOfflineConfigResponse
 */
async function modifyClusterOfflineConfig(instanceId: string, request: ModifyClusterOfflineConfigRequest): ModifyClusterOfflineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterOfflineConfigWithOptions(instanceId, request, headers, runtime);
}

model ModifyClusterOnlineConfigRequest {
  clusters?: [ string ](name='clusters', description='The information about the cluster'),
  config?: map[string]int32(name='config', description='配置信息'),
}

model ModifyClusterOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOnlineConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the online configurations of a cluster.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/cluster-online-config`
 *
 * @param request ModifyClusterOnlineConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyClusterOnlineConfigResponse
 */
async function modifyClusterOnlineConfigWithOptions(instanceId: string, request: ModifyClusterOnlineConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterOnlineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clusters)) {
    body['clusters'] = request.clusters;
  }
  if (!Util.isUnset(request.config)) {
    body['config'] = request.config;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterOnlineConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/cluster-online-config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the online configurations of a cluster.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/cluster-online-config`
 *
 * @param request ModifyClusterOnlineConfigRequest
 * @return ModifyClusterOnlineConfigResponse
 */
async function modifyClusterOnlineConfig(instanceId: string, request: ModifyClusterOnlineConfigRequest): ModifyClusterOnlineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterOnlineConfigWithOptions(instanceId, request, headers, runtime);
}

model ModifyDataSourceRequest {
  body?: map[string]any(name='body', description='The request body.', example='{}'),
  dryRun?: boolean(name='dryRun', description='Specifies whether the data source is created by using the dryRun feature. This parameter only checks whether the data source is valid. Valid values: true and false. true indicates that the data source is created by using the dryRun feature, and false indicates that the data source is not created by using the dryRun feature.', example='true'),
}

model ModifyDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model ModifyDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDataSourceResponseBody(name='body'),
}

/**
 * @summary Modifies a data source.
 *
 * @description ## Method
 * `PUT`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @param request ModifyDataSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDataSourceResponse
 */
async function modifyDataSourceWithOptions(instanceId: string, dataSourceName: string, request: ModifyDataSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyDataSourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataSource',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-sources/${OpenApiUtil.getEncodeParam(dataSourceName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a data source.
 *
 * @description ## Method
 * `PUT`
 * ## URI
 * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
 *
 * @param request ModifyDataSourceRequest
 * @return ModifyDataSourceResponse
 */
async function modifyDataSource(instanceId: string, dataSourceName: string, request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyDataSourceWithOptions(instanceId, dataSourceName, request, headers, runtime);
}

model ModifyFileRequest {
  content?: string(name='content', description='The content of the file.', example='""'),
  partition?: int32(name='partition', description='This parameter is required when index building for full data in a MaxCompute data source is triggered.', example='ds=20220713'),
  fileName?: string(name='fileName', description='The name of the file in the full path

This parameter is required.', example='/schemas/generation_schema.json'),
}

model ModifyFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFileResponseBody(name='body'),
}

/**
 * @summary Modifies a file.
 *
 * @description ## Method
 *     PUT
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
 *
 * @param request ModifyFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyFileResponse
 */
async function modifyFileWithOptions(instanceId: string, indexName: string, versionName: string, request: ModifyFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['content'] = request.content;
  }
  if (!Util.isUnset(request.partition)) {
    body['partition'] = request.partition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFile',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/versions/${OpenApiUtil.getEncodeParam(versionName)}/file`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a file.
 *
 * @description ## Method
 *     PUT
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
 *
 * @param request ModifyFileRequest
 * @return ModifyFileResponse
 */
async function modifyFile(instanceId: string, indexName: string, versionName: string, request: ModifyFileRequest): ModifyFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFileWithOptions(instanceId, indexName, versionName, request, headers, runtime);
}

model ModifyIndexPartitionRequest {
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1'),
  domainName?: string(name='domainName', description='The name of the data center.', example='pre_domain_1'),
  generation?: long(name='generation', description='The primary key of generation.', example='1633293829'),
  indexInfos?: [ 
    {
      indexName?: string(name='indexName', description='The name of the index.', example='atest2'),
      parallelNum?: int32(name='parallelNum', description='The number of concurrency. The default value is 1.', example='1'),
      partitionCount?: int32(name='partitionCount', description='The number of shards of the index.', example='3'),
    }
  ](name='indexInfos', description='The information about shards of the index.'),
}

model ModifyIndexPartitionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='Map', example='[]'),
}

model ModifyIndexPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexPartitionResponseBody(name='body'),
}

/**
 * @summary Modifies the information about index partitions.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/index-partition`
 *
 * @param request ModifyIndexPartitionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyIndexPartitionResponse
 */
async function modifyIndexPartitionWithOptions(instanceId: string, request: ModifyIndexPartitionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyIndexPartitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataSourceName)) {
    body['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.domainName)) {
    body['domainName'] = request.domainName;
  }
  if (!Util.isUnset(request.generation)) {
    body['generation'] = request.generation;
  }
  if (!Util.isUnset(request.indexInfos)) {
    body['indexInfos'] = request.indexInfos;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIndexPartition',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/index-partition`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the information about index partitions.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/index-partition`
 *
 * @param request ModifyIndexPartitionRequest
 * @return ModifyIndexPartitionResponse
 */
async function modifyIndexPartition(instanceId: string, request: ModifyIndexPartitionRequest): ModifyIndexPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyIndexPartitionWithOptions(instanceId, request, headers, runtime);
}

model ModifyIndexVersionRequest {
  body?: [ 
    {
      buildDeployId?: string(name='buildDeployId', description='The ID of the index deployed in offline mode.', example='277'),
      indexName?: string(name='indexName', description='The name of the index.', example='main_index'),
      version?: string(name='version', description='The version of the index.', example='1'),
    }
  ](name='body', description='The keyword used to search for a version. Fuzzy match is supported.', example='{}'),
}

model ModifyIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='result', example='{}'),
}

model ModifyIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexVersionResponseBody(name='body'),
}

/**
 * @summary Modifies the index version of a cluster (an index version rollback).
 *
 * @description ## Method
 *     PUT
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
 *
 * @param request ModifyIndexVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyIndexVersionResponse
 */
async function modifyIndexVersionWithOptions(instanceId: string, clusterName: string, request: ModifyIndexVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyIndexVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIndexVersion',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters/${OpenApiUtil.getEncodeParam(clusterName)}/index-version`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the index version of a cluster (an index version rollback).
 *
 * @description ## Method
 *     PUT
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
 *
 * @param request ModifyIndexVersionRequest
 * @return ModifyIndexVersionResponse
 */
async function modifyIndexVersion(instanceId: string, clusterName: string, request: ModifyIndexVersionRequest): ModifyIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyIndexVersionWithOptions(instanceId, clusterName, request, headers, runtime);
}

model ModifyNodeConfigRequest {
  active?: boolean(name='active', description='Specifies whether to enable the index.', example='true'),
  dataDuplicateNumber?: int32(name='dataDuplicateNumber', description='The number of data replicas.', example='1'),
  dataFragmentNumber?: int32(name='dataFragmentNumber', description='The number of data shards.', example='1'),
  flowRatio?: int32(name='flowRatio', description='The traffic percentage.', example='-100'),
  minServicePercent?: int32(name='minServicePercent', description='The minimum service ratio.', example='10'),
  published?: boolean(name='published', description='Specifies whether to mount the cluster.', example='true'),
  clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_sh_domain_2'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source. Valid values: search and not_search. search indicates to search data. not_search indicates not to search data.', example='ha-cn-2r42ostoc01_0704'),
  name?: string(name='name', description='The original name of the node.

This parameter is required.', example='ha-cn-zvp2iv9a401_qrs'),
  type?: string(name='type', description='The type of the algorithm. Valid values: pop, cp, hot, hint, and suggest.

*   pop indicates the popularity model.
*   cp indicates the category prediction model.
*   hot indicates the top search model.
*   hint indicates the hint model.
*   suggest indicates the drop-down suggestion model.

This parameter is required.', example='" "'),
}

model ModifyNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a node.
 *
 * @description ### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node-config?type=qrs&name=test
 * ```
 *
 * @param request ModifyNodeConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNodeConfigResponse
 */
async function modifyNodeConfigWithOptions(instanceId: string, request: ModifyNodeConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyNodeConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterName)) {
    query['clusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.dataSourceName)) {
    query['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.active)) {
    body['active'] = request.active;
  }
  if (!Util.isUnset(request.dataDuplicateNumber)) {
    body['dataDuplicateNumber'] = request.dataDuplicateNumber;
  }
  if (!Util.isUnset(request.dataFragmentNumber)) {
    body['dataFragmentNumber'] = request.dataFragmentNumber;
  }
  if (!Util.isUnset(request.flowRatio)) {
    body['flowRatio'] = request.flowRatio;
  }
  if (!Util.isUnset(request.minServicePercent)) {
    body['minServicePercent'] = request.minServicePercent;
  }
  if (!Util.isUnset(request.published)) {
    body['published'] = request.published;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodeConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/node-config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a node.
 *
 * @description ### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node-config?type=qrs&name=test
 * ```
 *
 * @param request ModifyNodeConfigRequest
 * @return ModifyNodeConfigResponse
 */
async function modifyNodeConfig(instanceId: string, request: ModifyNodeConfigRequest): ModifyNodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyNodeConfigWithOptions(instanceId, request, headers, runtime);
}

model ModifyOnlineConfigRequest {
  body?: map[string]string(name='body', description='ashortdescriptionofstruct'),
}

model ModifyOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOnlineConfigResponseBody(name='body'),
}

/**
 * @summary Modifies online configurations.
 *
 * @description ### Method
 * ```java
 * put
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}
 * ```
 *
 * @param request ModifyOnlineConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyOnlineConfigResponse
 */
async function modifyOnlineConfigWithOptions(instanceId: string, nodeName: string, indexName: string, request: ModifyOnlineConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyOnlineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOnlineConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/node/${OpenApiUtil.getEncodeParam(nodeName)}/online-configs/${OpenApiUtil.getEncodeParam(indexName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies online configurations.
 *
 * @description ### Method
 * ```java
 * put
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}
 * ```
 *
 * @param request ModifyOnlineConfigRequest
 * @return ModifyOnlineConfigResponse
 */
async function modifyOnlineConfig(instanceId: string, nodeName: string, indexName: string, request: ModifyOnlineConfigRequest): ModifyOnlineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyOnlineConfigWithOptions(instanceId, nodeName, indexName, request, headers, runtime);
}

model ModifyPasswordRequest {
  password?: string(name='password', description='The password', example='******************************'),
  username?: string(name='username', description='The username', example='"username"'),
}

model ModifyPasswordResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPasswordResponseBody(name='body'),
}

/**
 * @summary 修改实例的密码
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/password`
 *
 * @param request ModifyPasswordRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPasswordResponse
 */
async function modifyPasswordWithOptions(instanceId: string, request: ModifyPasswordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyPasswordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPassword',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/password`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例的密码
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/password`
 *
 * @param request ModifyPasswordRequest
 * @return ModifyPasswordResponse
 */
async function modifyPassword(instanceId: string, request: ModifyPasswordRequest): ModifyPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyPasswordWithOptions(instanceId, request, headers, runtime);
}

model ModifyTableRequest {
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', example='source_image_vector'),
      operator?: string(name='operator', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', example='test'),
          ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', example='uid'),
        }(name='srcFieldConfig'),
        vectorModal?: string(name='vectorModal', example='image'),
        vectorModel?: string(name='vectorModel', example='clip'),
      }(name='params'),
      srcField?: string(name='srcField', example='source_image'),
    }
  ](name='dataProcessConfig'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='AK', example='AK'),
      accessSecret?: string(name='accessSecret', description='AS', example='AS'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-shujiang-osstest'),
      endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20231220'),
      project?: string(name='project', example='yw_dw_rpt'),
      table?: string(name='table', example='behavior'),
    }(name='config'),
    dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
  }(name='dataSource'),
  fieldSchema?: map[string]string(name='fieldSchema'),
  partitionCount?: int32(name='partitionCount', example='1'),
  primaryKey?: string(name='primaryKey', example='id'),
  rawSchema?: string(name='rawSchema', example='{}'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', example='{}'),
      }(name='advanceParams'),
      dimension?: string(name='dimension', example='128'),
      distanceType?: string(name='distanceType', example='SquaredEuclidean'),
      indexName?: string(name='indexName', example='test_api'),
      namespace?: string(name='namespace', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', example='sparse_values'),
      vectorField?: string(name='vectorField', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', example='Qc'),
    }
  ](name='vectorIndex'),
  dryRun?: boolean(name='dryRun', example='true'),
}

model ModifyTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTableResponseBody(name='body'),
}

/**
 * @summary 修改索引V2
 *
 * @param request ModifyTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyTableResponse
 */
async function modifyTableWithOptions(instanceId: string, tableName: string, request: ModifyTableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyTableResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.dataProcessConfig)) {
    body['dataProcessConfig'] = request.dataProcessConfig;
  }
  if (!Util.isUnset(request.dataSource)) {
    body['dataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.fieldSchema)) {
    body['fieldSchema'] = request.fieldSchema;
  }
  if (!Util.isUnset(request.partitionCount)) {
    body['partitionCount'] = request.partitionCount;
  }
  if (!Util.isUnset(request.primaryKey)) {
    body['primaryKey'] = request.primaryKey;
  }
  if (!Util.isUnset(request.rawSchema)) {
    body['rawSchema'] = request.rawSchema;
  }
  if (!Util.isUnset(request.vectorIndex)) {
    body['vectorIndex'] = request.vectorIndex;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTable',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改索引V2
 *
 * @param request ModifyTableRequest
 * @return ModifyTableResponse
 */
async function modifyTable(instanceId: string, tableName: string, request: ModifyTableRequest): ModifyTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyTableWithOptions(instanceId, tableName, request, headers, runtime);
}

model PublishAdvanceConfigRequest {
  desc?: string(name='desc'),
  files?: [ 
    {
      config?: {
        content?: string(name='content'),
        variables?: map[string]FilesConfigVariablesValue(name='variables'),
      }(name='config'),
      dirName?: string(name='dirName'),
      fileName?: string(name='fileName'),
      operateType?: string(name='operateType'),
      ossPath?: string(name='ossPath'),
      parentFullPath?: string(name='parentFullPath'),
    }
  ](name='files'),
}

model PublishAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model PublishAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishAdvanceConfigResponseBody(name='body'),
}

/**
 * @summary Publishes a version of advanced configurations.
 *
 * @description ## Method
 * ~~~
 * POST
 * ~~~
 * ## URI
 * ~~~
 * /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish
 * ~~~
 *
 * @param request PublishAdvanceConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishAdvanceConfigResponse
 */
async function publishAdvanceConfigWithOptions(instanceId: string, configName: string, request: PublishAdvanceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishAdvanceConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.desc)) {
    body['desc'] = request.desc;
  }
  if (!Util.isUnset(request.files)) {
    body['files'] = request.files;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishAdvanceConfig',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/advanced-configs/${OpenApiUtil.getEncodeParam(configName)}/actions/publish`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Publishes a version of advanced configurations.
 *
 * @description ## Method
 * ~~~
 * POST
 * ~~~
 * ## URI
 * ~~~
 * /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish
 * ~~~
 *
 * @param request PublishAdvanceConfigRequest
 * @return PublishAdvanceConfigResponse
 */
async function publishAdvanceConfig(instanceId: string, configName: string, request: PublishAdvanceConfigRequest): PublishAdvanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishAdvanceConfigWithOptions(instanceId, configName, request, headers, runtime);
}

model PublishIndexVersionRequest {
  body?: map[string]any(name='body', description='The query result', example='{}'),
}

model PublishIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model PublishIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishIndexVersionResponseBody(name='body'),
}

/**
 * @summary Publishes a specified index version.
 *
 * @description ## Method
 *     POST
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish
 *
 * @param request PublishIndexVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishIndexVersionResponse
 */
async function publishIndexVersionWithOptions(instanceId: string, indexName: string, request: PublishIndexVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishIndexVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishIndexVersion',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/actions/publish`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Publishes a specified index version.
 *
 * @description ## Method
 *     POST
 * ## URI
 *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish
 *
 * @param request PublishIndexVersionRequest
 * @return PublishIndexVersionResponse
 */
async function publishIndexVersion(instanceId: string, indexName: string, request: PublishIndexVersionRequest): PublishIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishIndexVersionWithOptions(instanceId, indexName, request, headers, runtime);
}

model RecoverIndexRequest {
  buildDeployId?: int32(name='buildDeployId', description='The ID of the index deployed in offline mode.', example='277'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source', example='ha-cn-pl32rf0js04_odps_first'),
  generation?: string(name='generation', description='The primary key of generation.', example='1653018575'),
  indexName?: string(name='indexName', description='The name of the index', example='main_index'),
}

model RecoverIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned by data search.', example='{}'),
}

model RecoverIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverIndexResponseBody(name='body'),
}

/**
 * @summary Restores data from an index.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/recover-index`
 *
 * @param request RecoverIndexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecoverIndexResponse
 */
async function recoverIndexWithOptions(instanceId: string, request: RecoverIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecoverIndexResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.buildDeployId)) {
    body['buildDeployId'] = request.buildDeployId;
  }
  if (!Util.isUnset(request.dataSourceName)) {
    body['dataSourceName'] = request.dataSourceName;
  }
  if (!Util.isUnset(request.generation)) {
    body['generation'] = request.generation;
  }
  if (!Util.isUnset(request.indexName)) {
    body['indexName'] = request.indexName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecoverIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/recover-index`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Restores data from an index.
 *
 * @description ### Method
 * `POST`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}/recover-index`
 *
 * @param request RecoverIndexRequest
 * @return RecoverIndexResponse
 */
async function recoverIndex(instanceId: string, request: RecoverIndexRequest): RecoverIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return recoverIndexWithOptions(instanceId, request, headers, runtime);
}

model ReindexRequest {
  dataTimeSec?: int32(name='dataTimeSec', example='1640867288'),
  ossDataPath?: string(name='ossDataPath', example='oss://opensearch'),
  partition?: string(name='partition', example='ds=20220713'),
}

model ReindexResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ReindexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReindexResponseBody(name='body'),
}

/**
 * @summary 索引重建V2
 *
 * @param request ReindexRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReindexResponse
 */
async function reindexWithOptions(instanceId: string, tableName: string, request: ReindexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReindexResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataTimeSec)) {
    body['dataTimeSec'] = request.dataTimeSec;
  }
  if (!Util.isUnset(request.ossDataPath)) {
    body['ossDataPath'] = request.ossDataPath;
  }
  if (!Util.isUnset(request.partition)) {
    body['partition'] = request.partition;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Reindex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}/reindex`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 索引重建V2
 *
 * @param request ReindexRequest
 * @return ReindexResponse
 */
async function reindex(instanceId: string, tableName: string, request: ReindexRequest): ReindexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return reindexWithOptions(instanceId, tableName, request, headers, runtime);
}

model RemoveClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model RemoveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveClusterResponseBody(name='body'),
}

/**
 * @summary Deletes a cluster.
 *
 * @description ### Method
 * ```java
 * DELETE
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/clusters/{clusterName}
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveClusterResponse
 */
async function removeClusterWithOptions(instanceId: string, clusterName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveCluster',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/clusters/${OpenApiUtil.getEncodeParam(clusterName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a cluster.
 *
 * @description ### Method
 * ```java
 * DELETE
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/clusters/{clusterName}
 * ```
 *
 * @return RemoveClusterResponse
 */
async function removeCluster(instanceId: string, clusterName: string): RemoveClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeClusterWithOptions(instanceId, clusterName, headers, runtime);
}

model StartIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model StartIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartIndexResponseBody(name='body'),
}

/**
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartIndexResponse
 */
async function startIndexWithOptions(instanceId: string, indexName: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartIndexResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/startIndex`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return StartIndexResponse
 */
async function startIndex(instanceId: string, indexName: string): StartIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startIndexWithOptions(instanceId, indexName, headers, runtime);
}

model StopIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model StopIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopIndexResponseBody(name='body'),
}

/**
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopIndexResponse
 */
async function stopIndexWithOptions(instanceId: string, indexName: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopIndexResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopIndex',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/indexes/${OpenApiUtil.getEncodeParam(indexName)}/stopIndex`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return StopIndexResponse
 */
async function stopIndex(instanceId: string, indexName: string): StopIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopIndexWithOptions(instanceId, indexName, headers, runtime);
}

model StopTaskResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model StopTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskResponseBody(name='body'),
}

/**
 * @summary Stops an FSM task.
 *
 * @description ### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/stop-task/{fsmId}
 * ```
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopTaskResponse
 */
async function stopTaskWithOptions(instanceId: string, fsmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopTask',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}/stop-task/${OpenApiUtil.getEncodeParam(fsmId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops an FSM task.
 *
 * @description ### Method
 * ```java
 * PUT
 * ```
 * ### URI
 * ```java
 * /openapi/ha3/instances/{instanceId}/stop-task/{fsmId}
 * ```
 *
 * @return StopTaskResponse
 */
async function stopTask(instanceId: string, fsmId: string): StopTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTaskWithOptions(instanceId, fsmId, headers, runtime);
}

model UpdateInstanceRequest {
  components?: [ 
    {
      code?: string(name='code', description='The specification code, which must be consistent with the values of the corresponding module parameters.', example='200'),
      value?: string(name='value', example='""'),
    }
  ](name='components', description='A list of instance-related specifications.'),
  description?: string(name='description', description='The description of the instance.', example='""'),
  orderType?: string(name='orderType', description='Valid values: UPGRADE and DOWNGRADE. UPGRADE indicates to upgrade the instance specifications. DOWNGRADE indicates to downgrade the instance specifications.', example='""'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The product code', example='ha3-code'),
    createTime?: string(name='createTime', description='The time when the instance was created', example='2018-12-06T11:17:49.0'),
    description?: string(name='description', description='The description of the instance', example='Test instance'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires', example='2019-01-06T16:00:00.0'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved', example='false'),
    instanceId?: string(name='instanceId', description='The ID of the resource', example='ha-cn-0ju2s170b03'),
    lockMode?: string(name='lockMode', description='The lock status', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group', example='rg-aeky6hthboewpuy'),
    status?: string(name='status', description='The status of the instance', example='Running'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
  }(name='result', description='The result returned'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration of a specified instance.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @param request UpdateInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateInstanceResponse
 */
async function updateInstanceWithOptions(instanceId: string, request: UpdateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.components)) {
    body['components'] = request.components;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.orderType)) {
    body['orderType'] = request.orderType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2021-10-25',
    protocol = 'HTTPS',
    pathname = `/openapi/ha3/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration of a specified instance.
 *
 * @description ### Method
 * `PUT`
 * ### URI
 * `/openapi/ha3/instances/{instanceId}`
 *
 * @param request UpdateInstanceRequest
 * @return UpdateInstanceResponse
 */
async function updateInstance(instanceId: string, request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceWithOptions(instanceId, request, headers, runtime);
}

