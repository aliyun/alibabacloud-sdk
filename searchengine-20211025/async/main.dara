/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'searchengine';
  @version = '2021-10-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ErrorResponse {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
}

model BuildIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2iv7sq01', position='Path'),
  buildMode?: string(name='buildMode', description='The reindexing method. Valid values: api: API data source. indexRecover: data recovery by using indexing.', example='indexRecover', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='my_data_source', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source.', example='swift', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='The timestamp in seconds. The value must be of the INTEGER type. This parameter is required if you specify an API data source.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source is deployed.', example='test', position='Body'),
  generation?: long(name='generation', description='The data restoration version.', example='160131146', position='Body'),
  partition?: string(name='partition', description='The partition in the MaxCompute table. This parameter is required if type is set to odps.', example='20201010', position='Body'),
  path?: string(name='path', position='Body'),
  tag?: string(name='tag', position='Body'),
}

model BuildIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The list of clusters', example='{}'),
}

model BuildIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuildIndexResponseBody(name='body'),
}

/**
  * @description ## Method
  *     POST
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/actions/build-index
  * @param request  the request parameters of BuildIndex  BuildIndexRequest
  * @return BuildIndexResponse
 */
async function buildIndex(request: BuildIndexRequest): BuildIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildIndex', 'POST', '/openapi/ha3/instances/{instanceId}/actions/build-index', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-pl32rf0****', position='Path'),
  newResourceGroupId?: string(name='newResourceGroupId', description='new resource group id', example='rg-acfmxr3gs*****', position='Body'),
  resourceType?: string(name='resourceType', description='The resource type.', example='instance', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/openapi/ha3/instances/{instanceId}/actions/change-resource-group', 'json', false, 'json', request);
}

model CloneSqlInstanceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='1', position='Path'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  targetFolderId: long(name='targetFolderId', description='This parameter is required.', example='1', position='Body'),
}

model CloneSqlInstanceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    id?: long(name='id', example='1'),
    instanceId?: long(name='instanceId', example='-cn-pl32rf0****'),
    isDir?: int32(name='isDir', example='True'),
    name?: string(name='name', example='general'),
    parent?: long(name='parent', example='1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='instance'),
  }(name='result', description='NodeVO'),
}

model CloneSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneSqlInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneSqlInstance  CloneSqlInstanceRequest
  * @return CloneSqlInstanceResponse
 */
async function cloneSqlInstance(request: CloneSqlInstanceRequest): CloneSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneSqlInstance', 'POST', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}/actions/clone', 'json', false, 'json', request);
}

model CreateAliasRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  alias?: string(name='alias', description='alias name', example='test', position='Body'),
  index?: string(name='index', description='index name', example='index', position='Body'),
  newMode?: boolean(name='newMode', description='Specifies whether the OpenSearch Vector Search Edition instance is of the new version.', example='true', position='Query'),
}

model CreateAliasResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model CreateAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAlias  CreateAliasRequest
  * @return CreateAliasResponse
 */
async function createAlias(request: CreateAliasRequest): CreateAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAlias', 'POST', '/openapi/ha3/instances/{instanceId}/aliases', 'json', false, 'json', request);
}

model CreateClusterRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2k3qer02', position='Path'),
  autoLoad?: boolean(name='autoLoad', description='Specifies whether to enable automatic connection.', example='true', position='Body'),
  dataNode?: {
    number?: int32(name='number', description='The number of Searcher workers.', example='2'),
    partition?: string(name='partition', description='The number of shards.', example='2'),
  }(name='dataNode', description='The details of the Searcher workers.', position='Body'),
  description?: string(name='description', description='The description of the cluster.', example='"ha-tets"', position='Body'),
  name?: string(name='name', description='The cluster name.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  queryNode?: {
    number?: int32(name='number', description='The number of QRS workers.', example='2'),
  }(name='queryNode', description='The details of the Query Result Searcher (QRS) workers.', position='Body'),
}

model CreateClusterResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * @description ### [](#method)Method
  * `POST`
  * ### [](#uri)URI
  * `/openapi/ha3/instances/{instanceId}/clusters`
  * @param request  the request parameters of CreateCluster  CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model CreateConfigDirRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2iv7sq01', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-w6lr44sf3kx@ha-cn-w6lr44sf3kx_kevintest@kevintest@index_config_edit', position='Path'),
  dirName?: string(name='dirName', description='The directory name.', example='/clusters', position='Body'),
  parentFullPath?: string(name='parentFullPath', description='The path of the parent directory.', example='/', position='Body'),
}

model CreateConfigDirResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model CreateConfigDirResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConfigDirResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConfigDir  CreateConfigDirRequest
  * @return CreateConfigDirResponse
 */
async function createConfigDir(request: CreateConfigDirRequest): CreateConfigDirResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfigDir', 'POST', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir', 'json', false, 'json', request);
}

model CreateConfigFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-wuz014xlq5o_table_ha-cn-wuz014xlq5o_test_api_edit', position='Path'),
  fileName?: string(name='fileName', description='The name of the directory.', example='/schemas/device_event_xt_schema.json', position='Body'),
  ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) URL of the file.', example='oss://xxx/xxxx/xxx', position='Body'),
  parentFullPath?: string(name='parentFullPath', description='The path of the parent directory.', example='/', position='Body'),
}

model CreateConfigFileResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model CreateConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConfigFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConfigFile  CreateConfigFileRequest
  * @return CreateConfigFileResponse
 */
async function createConfigFile(request: CreateConfigFileRequest): CreateConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfigFile', 'POST', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7e22rgfyb01', position='Path'),
  autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to automatically rebuild the index.', example='true', position='Body'),
  config?: {
    accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
    accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
    bucket?: string(name='bucket', description='The name of the OSS bucket.', example='opensearch'),
    catalog?: string(name='catalog'),
    database?: string(name='database'),
    endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute or Object Storage Service (OSS) data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    namespace?: string(name='namespace', description='The namespace.', example='aegis-ops'),
    ossPath?: string(name='ossPath', description='The path of the OSS object.', example='/opensearch/search'),
    partition?: string(name='partition', description='The partition in the MaxCompute table.', example='ds=20220713'),
    path?: string(name='path', description='The file path in the Apsara File Storage for HDFS file system.', example='test-hdfs-path'),
    project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='kubenest'),
    table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='item'),
    tag?: string(name='tag'),
  }(name='config', description='The configuration information.', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  name?: string(name='name', description='The name of the data source.', example='ha-cn-pl32rf0****_test_api', position='Body'),
  saroConfig?: {
    namespace?: string(name='namespace', description='The namespace of the SARO data source.', example='igraph-cn-x0r3e3abe02'),
    tableName?: string(name='tableName', description='The name of the SARO table.', example='index_hdfs'),
  }(name='saroConfig', description='The configurations of the SARO data source.', position='Body'),
  type?: string(name='type', description='The type of the data source. Valid values: odps, oss, and swift.', example='odps', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform a dry run. This parameter is only used to check whether the data source is valid. Valid values: true and false.', example='true', position='Query'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The returned results.', example='{}'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSource', 'POST', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model CreateFolderRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  name: string(name='name', description='This parameter is required.', example='gist_qc', position='Body'),
  parent: long(name='parent', description='This parameter is required.', example='1', position='Body'),
  type: string(name='type', description='table, instance, template, function

This parameter is required.', example='instance', position='Body'),
}

model CreateFolderResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    id?: long(name='id', example='25030'),
    instanceId?: long(name='instanceId', example='ha-cn-pl32rf0****'),
    isDir?: int32(name='isDir', example='True'),
    name?: string(name='name', example='test'),
    parent?: long(name='parent', example='-1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='instance'),
  }(name='result', description='NodeVO'),
}

model CreateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFolderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFolder  CreateFolderRequest
  * @return CreateFolderResponse
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFolder', 'POST', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/folders', 'json', false, 'json', request);
}

model CreateIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ppr7901', position='Path'),
  buildParallelNum?: int32(name='buildParallelNum', description='The maximum number of full indexes that can be concurrently built.', example='2', position='Body'),
  content?: string(name='content', description='The index schema.', example='{\\"summarys\\":{\\"summary_fields\\":[\\"id\\"]},\\"indexs\\":[{\\"index_name\\":\\"index_id\\",\\"index_type\\":\\"PRIMARYKEY64\\",\\"index_fields\\":\\"id\\",\\"has_primary_key_attribute\\":true,\\"is_primary_key_sorted\\":false}],\\"attributes\\":[\\"id\\"],\\"fields\\":[{\\"field_name\\":\\"id\\",\\"field_type\\":\\"UINT16\\"}],\\"table_name\\":\\"index_2\\"}', position='Body'),
  dataSource?: string(name='dataSource', description='The name of the data source.', example='test1', position='Body'),
  dataSourceInfo?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to enable automatic full indexing.', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
      bucket?: string(name='bucket', description='The name of the OSS bucket.', example='test-bucket'),
      catalog?: string(name='catalog'),
      database?: string(name='database'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute or Object Storage Service (OSS) data source.', example='https://oss-cn-hangzhou.aliyuncs.com'),
      format?: string(name='format'),
      namespace?: string(name='namespace', description='The namespace name.', example='test-namespace'),
      ossPath?: string(name='ossPath', description='The path of the OSS object.', example='/opensearch/oss.json'),
      partition?: string(name='partition', description='The partition in the MaxCompute table. This parameter is required if type is set to odps.', example='ds=20230114'),
      path?: string(name='path', description='The path of the Apsara File Storage for HDFS data source.', example='test-hdfs-path'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='bbt_algo_pai'),
      table?: string(name='table', description='The table name.', example='bbt_rec_swing_u2i2i_score_be_v1'),
      tableFormat?: string(name='tableFormat'),
      tag?: string(name='tag'),
    }(name='config', description='The information about the MaxCompute data source.'),
    dataTimeSec?: int32(name='dataTimeSec', description='The start timestamp from which incremental data is retrieved.', example='1709715164'),
    domain?: string(name='domain', description='The data center in which the data source is deployed.', example='vpc_hz_domain_1'),
    name?: string(name='name', description='The name of the data source.', example='ha-cn-35t3n1yuj0d_index_1'),
    processParallelNum?: int32(name='processParallelNum', description='The maximum number of full indexes that can be concurrently processed.', example='2'),
    processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='4'),
    saroConfig?: {
      namespace?: string(name='namespace', description='The namespace of the SARO data source.', example='flink-test-fjx-default'),
      tableName?: string(name='tableName', description='The name of the SARO table.', example='device_event_shy_summary_'),
    }(name='saroConfig', description='The configurations of the SARO data source.'),
    scene?: string(name='scene'),
    type?: string(name='type', description='The type of the data source. Valid values:

*   odps
*   swift
*   saro
*   oss', example='odps'),
  }(name='dataSourceInfo', description='The information about the data source. This parameter is required for an OpenSearch Vector Search Edition instance of the new version.', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  extend?: map[string]any(name='extend', description='The extended content of the field configuration. key specifies the vector field and the field that requires embedding.', example='{
        "vector":
        [
            "source_image_vector"
        ],
        "embeding":
        [
            "source_image"
        ],
        "description":
        []
    }', position='Body'),
  mergeParallelNum?: int32(name='mergeParallelNum', description='The maximum number of full indexes that can be concurrently merged.', example='2', position='Body'),
  name?: string(name='name', description='The index name.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  partition?: int32(name='partition', description='The number of data shards.', example='20211202', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform only a dry run, without performing the actual request. The system only checks the validity of the data source. Valid values:

*   true
*   false', example='true', position='Query'),
}

model CreateIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The results returned.', example='{}'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * POST
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/indexes
  * ```
  * @param request  the request parameters of CreateIndex  CreateIndexRequest
  * @return CreateIndexResponse
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  chargeType?: string(name='chargeType', description='The billing method of the instance. Valid values: PREPAY: subscription. If you set this parameter to PREPAY, make sure that your Alibaba Cloud account supports balance payment or credit card payment. Otherwise, the system returns the InvalidPayMethod error message. If you set this parameter to PREPAY, you must also specify paymentInfo. POSTPAY: pay-as-you-go. This billing method is not supported.', example='""', position='Body'),
  components?: [ 
    {
      code?: string(name='code', description='The code of the specification, which must be consistent with the value that you specify on the buy page.', example='""'),
      value?: string(name='value', description='The value of the specification.', example='""'),
    }
  ](name='components', description='The information about the instance specification.', position='Body'),
  order?: {
    autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal. Valid values: true and false.', example='true'),
    duration?: long(name='duration', description='The billing duration. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 12.', example='29'),
    pricingCycle?: string(name='pricingCycle', description='The unit of the billing duration. Valid values: Month and Year.', example='""'),
  }(name='order', description='The billing information.', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', position='Body'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags', position='Body'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: {
    instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-2r42ppr7901'),
  }(name='result', description='The results returned.'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * `POST`
  * ### [](#uri)URI
  * `/api/instances?dryRun=false`
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model CreateModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  content?: {
    dimension?: int32(name='dimension', example='128'),
    method?: string(name='method', example='POST'),
    modelType?: string(name='modelType', example='text_embedding'),
    request?: {
      header?: {
        authorization?: string(name='Authorization', example='Bearer OS-v0********6vvs'),
        contentType?: string(name='Content-Type', example='application/json'),
      }(name='header'),
      parameters?: {
        build?: {
          inputType?: string(name='input_type', example='query'),
        }(name='build'),
        search?: {
          inputType?: string(name='input_type', example='document'),
        }(name='search'),
      }(name='parameters'),
      requestBody?: string(name='requestBody', example='{\\"input\\": [\\"%{input}\\"], \\"input_type\\": \\"%{input_type}\\"}'),
      urlParams?: {
        build?: map[string]any(name='build', example='key: value'),
        search?: map[string]any(name='search', example='key: value'),
      }(name='urlParams'),
    }(name='request'),
    response?: {
      embeddings?: string(name='embeddings', example='$.result.embeddings[*].embedding'),
    }(name='response'),
    url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
  }(name='content', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  dryRun?: string(name='dryRun', example='true', position='Query'),
}

model CreateModelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModel  CreateModelRequest
  * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModel', 'POST', '/openapi/ha3/instances/{instanceId}/models', 'json', false, 'json', request);
}

model CreatePublicUrlRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0js04', position='Path'),
}

model CreatePublicUrlResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model CreatePublicUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePublicUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePublicUrl  CreatePublicUrlRequest
  * @return CreatePublicUrlResponse
 */
async function createPublicUrl(request: CreatePublicUrlRequest): CreatePublicUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePublicUrl', 'POST', '/openapi/ha3/instances/{instanceId}/public-url', 'json', false, 'json', request);
}

model CreateSqlInstanceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  parent: long(name='parent', description='This parameter is required.', example='-1', position='Body'),
}

model CreateSqlInstanceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='B43CD1BB-ABD7-59C5-B89A-6E5F6FE60A84'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719220182844'),
    gmtModified?: string(name='gmtModified', example='1719220182844'),
    id?: long(name='id', example='22'),
    instanceId?: long(name='instanceId', example='ha-cn-pl32rf0****'),
    isDir?: int32(name='isDir', example='true'),
    name?: string(name='name', example='test'),
    parent?: long(name='parent', example='-1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='instance'),
  }(name='result', description='NodeVO'),
}

model CreateSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSqlInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSqlInstance  CreateSqlInstanceRequest
  * @return CreateSqlInstanceResponse
 */
async function createSqlInstance(request: CreateSqlInstanceRequest): CreateSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSqlInstance', 'POST', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances', 'json', false, 'json', request);
}

model CreateTableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', description='The destination field.', example='source_image_vector'),
      operator?: string(name='operator', description='The method used to process the field. Valid values: copy and vectorize. A value of copy specifies that the value of the source field is copied to the destination field. A value of vectorize specifies that the value of the source field is vectorized by a vectorization model and the output vector is stored in the destination field.', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', description='The OSS bucket.', example='test'),
          ossEndpoint?: string(name='ossEndpoint', description='The OSS endpoint.', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', description='The ID of the Alibaba Cloud account.', example='uid'),
        }(name='srcFieldConfig', description='The source of the data to be vectorized.'),
        vectorModal?: string(name='vectorModal', description='The data type.', example='image'),
        vectorModel?: string(name='vectorModel', description='The vectorization model.', example='clip'),
      }(name='params', description='The information about the model.'),
      srcField?: string(name='srcField', description='The source field.', example='source_image'),
    }
  ](name='dataProcessConfig', description='The configurations about field processing.', position='Body'),
  dataProcessorCount?: int32(name='dataProcessorCount', description='The number of resources used for data update.', example='1', position='Body'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to automatically rebuild the index.', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='ak'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='as'),
      bucket?: string(name='bucket', description='The OSS bucket.', example='antsys-flytest-ci'),
      catalog?: string(name='catalog'),
      database?: string(name='database'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='oss://opensearch'),
      partition?: string(name='partition', description='The partition in the MaxCompute table. This parameter is required if type is set to odps.', example='ds=20220713'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='project_20210220122847_3218'),
      table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='test56'),
      tableFormat?: string(name='tableFormat'),
      tag?: string(name='tag'),
    }(name='config', description='The configurations of the data source.'),
    dataTimeSec?: int32(name='dataTimeSec', description='The start timestamp from which incremental data is retrieved.', example='1715160176'),
    type?: string(name='type', description='The data source type. Valid values: odps, swift, and oss.', example='odps'),
  }(name='dataSource', description='The configurations of the data source.', position='Body'),
  fieldSchema?: map[string]string(name='fieldSchema', description='The fields.', position='Body'),
  name?: string(name='name', description='The index name.', example='index_1', position='Body'),
  partitionCount?: int32(name='partitionCount', description='The number of data shards.', example='1', position='Body'),
  primaryKey?: string(name='primaryKey', description='The primary key field.', example='id', position='Body'),
  rawSchema?: string(name='rawSchema', description='The instance schema. If this parameter is specified, the parameters about the index are not required.', example='{}', position='Body'),
  scene?: string(name='scene', position='Body'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', description='The index building parameters.', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', description='The threshold for linear building.', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', description='The minimum number of retrieved candidate sets.', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', description='The index retrieval parameters.', example='{}'),
      }(name='advanceParams', description='The configurations of the index schema.'),
      dimension?: string(name='dimension', description='The dimension of the vector.', example='128'),
      distanceType?: string(name='distanceType', description='The distance type.', example='SquaredEuclidean'),
      indexName?: string(name='indexName', description='The name of the index schema.', example='case_index'),
      namespace?: string(name='namespace', description='The namespace field.', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', description='The field that stores the indexes of the elements in sparse vectors.', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', description='The field that stores the elements in sparse vectors.', example='sparse_values'),
      vectorField?: string(name='vectorField', description='The vector field.', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', description='The vector retrieval algorithm.', example='Qc'),
    }
  ](name='vectorIndex', description='The index schema.', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform only a dry run, without performing the actual request. The system only checks the validity of the data source. Valid values:

*   true
*   false', example='true', position='Query'),
}

model CreateTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTable  CreateTableRequest
  * @return CreateTableResponse
 */
async function createTable(request: CreateTableRequest): CreateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTable', 'POST', '/openapi/ha3/instances/{instanceId}/tables', 'json', false, 'json', request);
}

model DebugModelRequest {
  instanceId?: string(name='instanceId', example='ha-cn-pl32rf0****', position='Path'),
  modelName?: string(name='modelName', example='test', position='Path'),
  input?: string(name='input', position='Body'),
  isOnline?: string(name='isOnline', example='true', position='Query'),
}

model DebugModelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
}

model DebugModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DebugModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DebugModel  DebugModelRequest
  * @return DebugModelResponse
 */
async function debugModel(request: DebugModelRequest): DebugModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DebugModel', 'POST', '/openapi/ha3/instances/{instanceId}/models/{modelName}/actions/debug', 'json', false, 'json', request);
}

model DeleteAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  configName?: string(name='configName', description='The configuration name.', example='ha-cn-0ju2rps6c08_offline_adv_v1', position='Path'),
}

model DeleteAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdvanceConfigResponseBody(name='body'),
}

/**
  * @description ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  * @param request  the request parameters of DeleteAdvanceConfig  DeleteAdvanceConfigRequest
  * @return DeleteAdvanceConfigResponse
 */
async function deleteAdvanceConfig(request: DeleteAdvanceConfigRequest): DeleteAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAdvanceConfig', 'DELETE', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model DeleteAliasRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  alias: string(name='alias', description='alias

This parameter is required.', example='test', position='Path'),
}

model DeleteAliasResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model DeleteAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAlias  DeleteAliasRequest
  * @return DeleteAliasResponse
 */
async function deleteAlias(request: DeleteAliasRequest): DeleteAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlias', 'DELETE', '/openapi/ha3/instances/{instanceId}/aliases/{alias}', 'json', false, 'json', request);
}

model DeleteConfigDirRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-18qug6zlc1r', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-wuz014xlq5o_table_ha-cn-wuz014xlq5o_test_api_edit', position='Path'),
  dirName: string(name='dirName', description='The directory name.

This parameter is required.', example='/clusters', position='Query'),
  parentFullPath: string(name='parentFullPath', description='The path of the parent directory.

This parameter is required.', example='/', position='Query'),
}

model DeleteConfigDirResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteConfigDirResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConfigDirResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConfigDir  DeleteConfigDirRequest
  * @return DeleteConfigDirResponse
 */
async function deleteConfigDir(request: DeleteConfigDirRequest): DeleteConfigDirResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfigDir', 'DELETE', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir', 'json', false, 'json', request);
}

model DeleteConfigFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-lbj39bhay03@ha-cn-lbj39bhay03_api_data@vpc_sh_domain_1@api_index@index_config_edit', position='Path'),
  fileName: string(name='fileName', description='The file name.

This parameter is required.', example='/schemas/automobile_vector_schema.json', position='Query'),
  parentFullPath: string(name='parentFullPath', description='The path of the parent directory.

This parameter is required.', example='/', position='Query'),
}

model DeleteConfigFileResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConfigFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConfigFile  DeleteConfigFileRequest
  * @return DeleteConfigFileResponse
 */
async function deleteConfigFile(request: DeleteConfigFileRequest): DeleteConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfigFile', 'DELETE', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @description ## Method
  * `DELETE`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSource', 'DELETE', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='database name

This parameter is required.', example='general', position='Path'),
  folderId: long(name='folderId', description='folder id

This parameter is required.', example='-1', position='Path'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: {
    requestId?: string(name='requestId', description='The request ID.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
    result?: map[string]string(name='result', description='The result'),
  }(name='result', description='Response<Map<String, String>>'),
}

model DeleteFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFolderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFolder  DeleteFolderRequest
  * @return DeleteFolderResponse
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFolder', 'DELETE', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/folders/{folderId}', 'json', false, 'json', request);
}

model DeleteIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42p5oi202', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='generation', position='Path'),
  dataSource: string(name='dataSource', description='The data source.

This parameter is required.', example='ha-cn-pl32rf0js04_test', position='Query'),
  deleteDataSource?: boolean(name='deleteDataSource', description='Specifies whether to delete the data source.', example='true', position='Query'),
}

model DeleteIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

/**
  * @description ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}?dataSource=xxx
  * @param request  the request parameters of DeleteIndex  DeleteIndexRequest
  * @return DeleteIndexResponse
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model DeleteIndexVersionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rrogr01', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='generation', position='Path'),
  versionName: string(name='versionName', description='The name of the version.

This parameter is required.', example='ha-cn-pl32rf0js04@ha-cn-pl32rf0js04_shenzhen_test_01@sz_vpc_domain_1@api_test@index_config_v1', position='Path'),
}

model DeleteIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model DeleteIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexVersionResponseBody(name='body'),
}

/**
  * @description ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}
  * @param request  the request parameters of DeleteIndexVersion  DeleteIndexVersionRequest
  * @return DeleteIndexVersionResponse
 */
async function deleteIndexVersion(request: DeleteIndexVersionRequest): DeleteIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndexVersion', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7pp2m0ozr01', position='Path'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description ### Method
  * `DELETE`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  modelName: string(name='modelName', description='This parameter is required.', example='test', position='Path'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModel  DeleteModelRequest
  * @return DeleteModelResponse
 */
async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModel', 'DELETE', '/openapi/ha3/instances/{instanceId}/models/{modelName}', 'json', false, 'json', request);
}

model DeletePublicUrlRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32m2c4u01', position='Path'),
}

model DeletePublicUrlResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeletePublicUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePublicUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePublicUrl  DeletePublicUrlRequest
  * @return DeletePublicUrlResponse
 */
async function deletePublicUrl(request: DeletePublicUrlRequest): DeletePublicUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePublicUrl', 'DELETE', '/openapi/ha3/instances/{instanceId}/public-url', 'json', false, 'json', request);
}

model DeleteSqlInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='database name

This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='sqlInstanceId

This parameter is required.', example='1', position='Path'),
}

model DeleteSqlInstanceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
    result?: map[string]string(name='result', description='The result.'),
  }(name='result', description='Response<Map<String, String>>'),
}

model DeleteSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSqlInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSqlInstance  DeleteSqlInstanceRequest
  * @return DeleteSqlInstanceResponse
 */
async function deleteSqlInstance(request: DeleteSqlInstanceRequest): DeleteSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSqlInstance', 'DELETE', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}', 'json', false, 'json', request);
}

model DeleteTableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7e22rgfyb01', position='Path'),
  tableName: string(name='tableName', description='The name of the table.

This parameter is required.', example='test_summary', position='Path'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model DeleteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTable  DeleteTableRequest
  * @return DeleteTableResponse
 */
async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTable', 'DELETE', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='acceptLanguage', description='The language of the response. Default value: zh-cn.', example='zh-cn', position='Query'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: [ 
    {
      endpoint?: string(name='endpoint', description='The endpoint of the region.', example='endpoint'),
      localName?: string(name='localName', description='The name of the region.', example='China (Hangzhou)'),
      regionId?: string(name='regionId', description='The ID of the region. Valid values:

cn-hangzhou: China (Hangzhou)

cn-shanghai: China (Shanghai)

cn-qingdao: China (Qingdao)

cn-beijing: China (Beijing)

cn-zhangjiakou: China (Zhangjiakou)

cn-shenzhen: China (Shenzhen)

ap-southeast-1: Singapore (Singapore)

cn-internal: Internal Center

cn-zhangbei-in: Internal Center (Zhangjiakou)

us-west-1-in: Internal Center (US)

rus-west-1-in: Internal Center (Russia)

cn-daily: Daily Environment

cn-test: Joint Debugging

pre-hangzhou: China (Hangzhou)-Staging', example='cn-hangzhou'),
    }
  ](name='result', description='The result.'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/openapi/ha3/regions', 'json', false, 'json', request);
}

model ExecuteSqlInstanceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='1', position='Path'),
  combineParam?: map[string]any(name='combineParam', position='Body'),
  content: string(name='content', description='This parameter is required.', example='select * from test', position='Body'),
  domain?: string(name='domain', example='vpc_hz_domain_1', position='Body'),
  dynamicParam?: map[string]any(name='dynamicParam', position='Body'),
  kvpair?: map[string]any(name='kvpair', position='Body'),
  params?: map[string]any(name='params', position='Body'),
  staticParam?: map[string]any(name='staticParam', position='Body'),
}

model ExecuteSqlInstanceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719220182844'),
    id?: long(name='id', example='22'),
    instanceId?: long(name='instanceId', example='ha-cn-pl32rf0****'),
    isDir?: int32(name='isDir', example='true'),
    name?: string(name='name', example='test'),
    parent?: long(name='parent', example='-1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='instance'),
  }(name='result', description='NodeVO'),
}

model ExecuteSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteSqlInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteSqlInstance  ExecuteSqlInstanceRequest
  * @return ExecuteSqlInstanceResponse
 */
async function executeSqlInstance(request: ExecuteSqlInstanceRequest): ExecuteSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteSqlInstance', 'POST', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}/actions/execution', 'json', false, 'json', request);
}

model ForceSwitchRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32m2c4u01', position='Path'),
  fsmId: string(name='fsmId', description='The task ID.

This parameter is required.', example='tisplus_opensearch@roll_index_fsm@ha-cn-0ju2je4zj01@bj_vpc_domain_2@null@bj_vpc_domain_2_general_odps_false@1644312508597@934743', position='Path'),
}

model ForceSwitchResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='0B1FF998-BB8D-5182-BFC0-E471AA77095A'),
  result?: map[string]any(name='result', description='The index information.', example='{}'),
}

model ForceSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ForceSwitchResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * ```java
  * PUT
  * ```
  * ### [](#uri)URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/force-switch/{fsmId}
  * ```
  * @param request  the request parameters of ForceSwitch  ForceSwitchRequest
  * @return ForceSwitchResponse
 */
async function forceSwitch(request: ForceSwitchRequest): ForceSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ForceSwitch', 'PUT', '/openapi/ha3/instances/{instanceId}/force-switch/{fsmId}', 'json', false, 'json', request);
}

model GetAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-18qug6zlc1r', position='Path'),
  configName: string(name='configName', description='The name of the advanced configuration.

This parameter is required.', example='ha-cn-18qug6zlc1r_offline_adv_edit', position='Path'),
  type?: string(name='type', description='*   The type of the advanced configuration. Valid values: -ONLINE: online configuration
*   \\-ONLINE_CAVA: online Cava configuration
*   \\-ONLINE_PLUGIN: online plug-in configuration
*   \\-ONLINE_QUERY: query configuration
*   \\-OFFLINE_DICT: offline dictionary configuration
*   \\-OFFLINE_TABLE: offline table configuration
*   \\-OFFLINE_COMMON: offline configuration
*   \\-OFFLINE_PLUGIN: offline plug-in configuration
*   \\-OFFLINE_INDEX: index configuration', example='ONLINE', position='Query'),
}

model GetAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    content?: string(name='content', description='The content of the advanced configuration that is returned.', example='{\\"url\\":\\"http://xxxxxx.aliyuncs.com/outnet_hz/packages/xxxxx/opensearch_offline_plugins_xxxxx.tar\\"}'),
    contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.', example='FILE'),
    desc?: string(name='desc', description='The description of the advanced configuration.', example='close alarm, chiji id 37080'),
    files?: [ 
      {
        fullPathName?: string(name='fullPathName', description='The file path.', example='""'),
        isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
        isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a container.', example='True'),
        name?: string(name='name', description='The file name.', example='ha-cn-2r42ostoc01_qrs'),
      }
    ](name='files', description='The files.'),
    name?: string(name='name', description='The name of the advanced configuration.', example='ha-cn-0ju2s170b03_qrs'),
    status?: string(name='status', description='The status of the advanced configuration. Valid values: drafting: The advanced configuration is in the draft state. used: The advanced configuration is being used. unused: The advanced configuration is not used. trash: The advanced configuration is being deleted.', example='0,1,3,6,8'),
    updateTime?: long(name='updateTime', description='The time when the advanced configuration was updated.', example='""'),
  }(name='result', description='The result.'),
}

model GetAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigResponseBody(name='body'),
}

/**
  * @description ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  * @param request  the request parameters of GetAdvanceConfig  GetAdvanceConfigRequest
  * @return GetAdvanceConfigResponse
 */
async function getAdvanceConfig(request: GetAdvanceConfigRequest): GetAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfig', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model GetAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The name of the advanced configuration.

This parameter is required.', example='ha-cn-7pp2pcna701_online_config_v5', position='Path'),
  fileName: string(name='fileName', description='The name of the file

This parameter is required.', example='/intervene_dict/chn_ecommerce_general.dict', position='Query'),
}

model GetAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    content?: string(name='content', description='The file content.', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
  }(name='result', description='The result.'),
}

model GetAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigFileResponseBody(name='body'),
}

/**
  * @description ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
  * @param request  the request parameters of GetAdvanceConfigFile  GetAdvanceConfigFileRequest
  * @return GetAdvanceConfigFileResponse
 */
async function getAdvanceConfigFile(request: GetAdvanceConfigFileRequest): GetAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfigFile', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model GetClusterRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rq6610a', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='bj_vpc_domain_2', position='Path'),
}

model GetClusterResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    config?: map[string]map[string]any(name='config', description='The configuration information.'),
    configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='2021-08-09 00:01:02'),
    createTime?: string(name='createTime', description='The time when the cluster was created.', example='2024-05-21 16:05:26'),
    currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced configuration version.', example='test_yyds_data1'),
    currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='test_yyds_data1'),
    dataNode?: {
      name?: string(name='name', description='The name of the Searcher worker.', example='test'),
      number?: int32(name='number', description='The number of replicas.', example='1'),
      partition?: int32(name='partition', description='The number of partitions.', example='2'),
    }(name='dataNode', description='The specifications of Searcher workers.'),
    description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
    latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='test_yyds_data1'),
    latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='test_yyds_data1'),
    name?: string(name='name', description='The cluster name.', example='general'),
    queryNode?: {
      name?: string(name='name', description='The name of the QRS worker.', example='test'),
      number?: int32(name='number', description='The number of nodes.', example='1'),
      partition?: int32(name='partition', description='The number of replicas.', example='2'),
    }(name='queryNode', description='The specifications of Query Result Searcher (QRS) workers.'),
    status?: string(name='status', description='The creation status of the cluster. Valid values: NEW and PUBLISH. NEW indicates that the cluster is being created. PUBLISH indicates that the cluster is created.', example='NEW'),
  }(name='result', description='The clusters.'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
  * @description ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instance/{instanceId}/clusters/{clusterName}`
  * @param request  the request parameters of GetCluster  GetClusterRequest
  * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCluster', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model GetClusterRunTimeInfoRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ncw4102', position='Path'),
}

model GetClusterRunTimeInfoResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      clusterName?: string(name='clusterName', description='The cluster name.', example='vpc_hz_domain_1'),
      dataNodes?: [ 
        {
          configStatusList?: [ 
            {
              configUpdateTime?: string(name='configUpdateTime', description='The time when the configuration was last updated.', example='""'),
              donePercent?: int32(name='donePercent', description='The configuration progress. Unit: percentage.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of processed Searcher workers in the cluster.', example='1'),
              name?: string(name='name', description='The cluster name.', example='test_0704'),
              totalSize?: int32(name='totalSize', description='The total number of Searcher workers in the cluster.', example='0'),
            }
          ](name='configStatusList', description='The configuration status.'),
          dataStatusList?: [ 
            {
              advanceConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version number.', example='1.0'),
              }(name='advanceConfigInfo', description='The information about the advanced configuration.'),
              deployFailedWorker?: [ string ](name='deployFailedWorker', description='The name of the worker that failed due to a deployment failure.'),
              docSize?: int32(name='docSize', description='The storage capacity. Unit: GB.', example='2'),
              donePercent?: int32(name='donePercent', description='The configuration progress. Unit: percentage.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of processed QRS workers in the cluster.', example='100'),
              errorMsg?: string(name='errorMsg', description='The error message.', example='0A3B1C48006A6C0905F6375F4821EB50'),
              fullUpdateTime?: string(name='fullUpdateTime', description='The time when full data in the index was last updated.', example='" "'),
              fullVersion?: long(name='fullVersion', description='The time when the full index version was generated.', example='123423'),
              incUpdateTime?: string(name='incUpdateTime', description='The time when incremental data in the index was last updated.', example='""'),
              incVersion?: long(name='incVersion', description='The time when the incremental index version was generated.', example='123423'),
              indexConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version of the index template.', example='1.0.0'),
              }(name='indexConfigInfo', description='The information about the index configuration.'),
              indexSize?: long(name='indexSize', description='The index size.', example='100'),
              lackDiskWorker?: [ string ](name='lackDiskWorker', description='The name of the worker that failed due to insufficient disks.'),
              lackMemWorker?: [ string ](name='lackMemWorker', description='The name of the worker that failed due to insufficient memory.'),
              name?: string(name='name', description='The name of the QRS worker.', example='ha-cn-c4d2rq7nt04_qrs'),
              totalSize?: int32(name='totalSize', description='The total number of QRS workers in the cluster.', example='1'),
            }
          ](name='dataStatusList', description='The data of the Searcher worker.'),
          serviceStatus?: {
            donePercent?: int32(name='donePercent', description='The process progress of QRS workers in the cluster. Unit: percentage.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of processed QRS workers in the cluster.', example='100'),
            name?: string(name='name', description='The name of the QRS worker.', example='ha-cn-0ju2s170b03_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of QRS workers in the cluster.', example='100'),
          }(name='serviceStatus', description='The service status of the QRS worker.'),
        }
      ](name='dataNodes', description='The information about the Searcher workers.'),
      queryNode?: {
        configStatusList?: [ 
          {
            configUpdateTime?: string(name='configUpdateTime', description='The time when the configuration was last updated.', example='" "'),
            donePercent?: int32(name='donePercent', description='The process progress of QRS workers in the cluster. Unit: percentage.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of processed QRS workers in the cluster.', example='100'),
            name?: string(name='name', description='The cluster name.', example='ha-cn-zvp2qr1sk01_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of QRS workers in the cluster.', example='6'),
          }
        ](name='configStatusList', description='The configuration status.'),
        serviceStatus?: {
          donePercent?: int32(name='donePercent', description='The process progress of QRS workers in the cluster. Unit: percentage.', example='100'),
          doneSize?: int32(name='doneSize', description='The number of processed QRS workers in the cluster.', example='100'),
          name?: string(name='name', description='The cluster name.', example='ha-cn-c4d2rq7nt04_qrs'),
          totalSize?: int32(name='totalSize', description='The total number of QRS workers in the cluster.', example='100'),
        }(name='serviceStatus', description='The service status of the QRS worker.'),
      }(name='queryNode', description='The information about the Query Result Searcher (QRS) workers.'),
    }
  ](name='result', description='The result.'),
}

model GetClusterRunTimeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterRunTimeInfoResponseBody(name='body'),
}

/**
  * @description ### Method
  * GET
  * ### URI
  * /openapi/ha3/instances/{instanceId}/cluster-run-time-info
  * @param request  the request parameters of GetClusterRunTimeInfo  GetClusterRunTimeInfoRequest
  * @return GetClusterRunTimeInfoResponse
 */
async function getClusterRunTimeInfo(request: GetClusterRunTimeInfoRequest): GetClusterRunTimeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterRunTimeInfo', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-run-time-info', 'json', false, 'json', request);
}

model GetDataSourceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-2r42ostoc01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='ha-cn-2r42ostoc01_people_info', position='Path'),
}

model GetDataSourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    domain?: string(name='domain', description='The data center where the data source is deployed in offline mode', example='vpc_hz_domain_1'),
    indexes?: [ string ](name='indexes', description='The list of index information'),
    lastFulTime?: long(name='lastFulTime', description='The time when the full data of the data source was last queried.', example='1718787219'),
    name?: string(name='name', description='The name of the data source.', example='my_index'),
    status?: string(name='status', description='The status of the data source. Valid values: new: The data source is being created. publish: The data source is in the normal state. trash: The data source is being deleted.', example='NEW'),
    type?: string(name='type', description='The type of the data source', example='odps'),
  }(name='result', description='The information about the data source.'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
  * @description ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
  * @param request  the request parameters of GetDataSource  GetDataSourceRequest
  * @return GetDataSourceResponse
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSource', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model GetDataSourceDeployRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-uax37kni501', position='Path'),
  deployName: string(name='deployName', description='This parameter is required.', example='vpc_hz_domain_1', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-9lb34d9ee01_image_embedding', position='Path'),
}

model GetDataSourceDeployResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    extend?: {
      hdfs?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
      }(name='hdfs'),
      odps?: {
        partitions?: map[string]string(name='partitions'),
      }(name='odps'),
      oss?: {
        path?: string(name='path', example='oss://opensearch'),
      }(name='oss'),
      saro?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
        version?: string(name='version', example='0.6.0'),
      }(name='saro'),
    }(name='extend'),
    processor?: {
      args?: string(name='args', description='The startup parameters of the process.', example='{}'),
      resource?: string(name='resource', description='The resource information.', example='{}'),
    }(name='processor', description='The parameters of the process.'),
    storage?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='ak'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='as'),
      bucket?: string(name='bucket', description='The name of the OSS bucket.', example='antsys-miniapp-chongwen-static'),
      catalog?: string(name='catalog'),
      database?: string(name='database'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      namespace?: string(name='namespace', example='lazada-campaign-flink'),
      ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='oss://opensearch'),
      partition?: string(name='partition', description='The partition in the MaxCompute table. Example: ds=20180102.', example='ds=20220926'),
      path?: string(name='path', example='/beiming_xobject/dwd_xobjectsandbox__list_create_action_by_new/'),
      project?: string(name='project', example='wireless_1688_personal_rec'),
      table?: string(name='table', example='behavior'),
      tag?: string(name='tag'),
    }(name='storage', description='The information about the data source.'),
    swift?: {
      topic?: string(name='topic', description='The topic.', example='topic'),
      zk?: string(name='zk', description='zk', example='zk'),
    }(name='swift', description='The information about the incremental data source Swift.'),
  }(name='result', description='The result.'),
}

model GetDataSourceDeployResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceDeployResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataSourceDeploy  GetDataSourceDeployRequest
  * @return GetDataSourceDeployResponse
 */
async function getDataSourceDeploy(request: GetDataSourceDeployRequest): GetDataSourceDeployResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSourceDeploy', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}', 'json', false, 'json', request);
}

model GetDatabaseSchemaRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  tableName: string(name='tableName', description='This parameter is required.', example='graph_index_summary_', position='Path'),
}

model GetDatabaseSchemaResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      fieldName?: string(name='fieldName', example='id'),
      fieldType?: string(name='fieldType', example='STRING'),
      fieldTypeDetail?: map[string]any(name='fieldTypeDetail', example='FT_UINT64'),
      indexName?: string(name='indexName', example='test_tusou_v2'),
      indexType?: string(name='indexType', example='NUMBER'),
    }
  ](name='result', description='List'),
}

model GetDatabaseSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatabaseSchema  GetDatabaseSchemaRequest
  * @return GetDatabaseSchemaResponse
 */
async function getDatabaseSchema(request: GetDatabaseSchemaRequest): GetDatabaseSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatabaseSchema', 'GET', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/tables/{tableName}/schema', 'json', false, 'json', request);
}

model GetDeployGraphRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetDeployGraphResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    graph?: {
      indexMetas?: [ 
        {
          domainName?: string(name='domainName', description='The name of the data center.', example='hz_pre_vpc_domain_1'),
          name?: string(name='name', description='The index name.', example='test_api'),
          tableDeployId?: long(name='tableDeployId', description='The deployment ID of the table.', example='2409'),
          tableName?: string(name='tableName', description='The name of the data source.', example='ha-cn-pl32rf0****_test_api'),
          tag?: string(name='tag', description='The tag.', example='test_api_hz_pre_vpc_domain_1'),
          zoneName?: string(name='zoneName', description='The name of the QRS worker.', example='ha-cn-pl32rf0****_qrs'),
        }
      ](name='indexMetas', description='The index metadata.'),
      onlineMaster?: [ 
        {
          domainName?: string(name='domainName', description='The name of the data center.', example='hz_pre_vpc_domain_1'),
          hippoId?: string(name='hippoId', description='The resource ID.', example='5377'),
          id?: long(name='id', description='The ID of the data center.', example='1'),
          name?: string(name='name', description='The name of the online cluster.', example='ha-cn-pl32rf0****_hz_pre_vpc_domain_1'),
        }
      ](name='onlineMaster', description='The metadata of online clusters.'),
      tableIndexRelation?: map[string][ string ](name='tableIndexRelation', description='The association relationships between data sources and indexes.'),
      tableMetas?: [ 
        {
          buildDeployId?: long(name='buildDeployId', description='The ID of the offline deployment.', example='1'),
          domainName?: string(name='domainName', description='The name of the data center.', example='hz_pre_vpc_domain_1'),
          name?: string(name='name', description='The name of the data source.', example='ha-cn-pl32rf0****_test_api'),
          tableDeployId?: long(name='tableDeployId', description='The deployment ID of the table.', example='2177'),
          tag?: string(name='tag', description='The tag.', example='ha-cn-pl32rf0****_test_api_hz_pre_vpc_domain_1'),
          type?: string(name='type', description='The type of the data source.', example='odps'),
        }
      ](name='tableMetas', description='The metadata of data sources.'),
      zoneIndexRelation?: map[string][ string ](name='zoneIndexRelation', description='The association relationships between zones and indexes.'),
      zoneMetas?: [ 
        {
          domainInfo?: string(name='domainInfo', description='The name of the data center.', example='hz_pre_vpc_domain_1'),
          name?: string(name='name', description='The name of the Query Result Searcher (QRS) worker.', example='ha-cn-pl32rf0****_qrs'),
          suezAdminName?: string(name='suezAdminName', description='The name of the service that is used to manage the relationships between online clusters and indexes.', example='ha-cn-pl32rf0****_hz_pre_vpc_domain_1'),
          tag?: string(name='tag', description='The tag.', example='ha-cn-pl32rf0****_qrs_hz_pre_vpc_domain_1'),
          type?: string(name='type', description='The node type.', example='qrs'),
        }
      ](name='zoneMetas', description='The zone metadata.'),
    }(name='graph', description='The deployment information.'),
  }(name='result', description='The results returned.', example='{}'),
}

model GetDeployGraphResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeployGraphResponseBody(name='body'),
}

/**
  * @description ## Method
  * GET
  * ## URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/deploy-graph
  * ```
  * @param request  the request parameters of GetDeployGraph  GetDeployGraphRequest
  * @return GetDeployGraphResponse
 */
async function getDeployGraph(request: GetDeployGraphRequest): GetDeployGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployGraph', 'GET', '/openapi/ha3/instances/{instanceId}/deploy-graph', 'json', false, 'json', request);
}

model GetFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2rpzm605', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='ecmon_table_index_test', position='Path'),
  versionName: string(name='versionName', description='The version name.

This parameter is required.', example='ha-cn-tl32nd2nq01@ha-cn-tl32nd2nq01_00@bj_vpc_domain_1@point_cloud_3d@index_config_edit', position='Path'),
  fileName: string(name='fileName', description='The name of the file in full path

This parameter is required.', example='/schemas/automobile_vector_schema.json', position='Query'),
}

model GetFileResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    content?: string(name='content', description='The file content.', example='None'),
    dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-2r42p5oi202_xijie_test'),
    extend?: map[string][ string ](name='extend', description='Extended information'),
    fullPathName?: string(name='fullPathName', description='The full path of the file.', example='""'),
    isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
    name?: string(name='name', description='The file name.', example='ha-cn-2r42ostoc01_qrs'),
    partition?: long(name='partition', description='The number of shards.', example='ds=20210828'),
  }(name='result', description='The index information.'),
}

model GetFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileResponseBody(name='body'),
}

/**
  * @description ## [](#)Method
  *     GET
  * ## [](#uri)URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file
  * @param request  the request parameters of GetFile  GetFileRequest
  * @return GetFileResponse
 */
async function getFile(request: GetFileRequest): GetFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFile', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model GetIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-8ed2j834u03', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='index_jiayi_text', position='Path'),
}

model GetIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: {
    cluster?: map[string]ResultClusterValue(name='cluster', description='The cluster information.'),
    config?: map[string]map[string]any(name='config', description='The configuration information.'),
    configWhenBuild?: map[string]map[string]any(name='configWhenBuild', description='The configuration that takes effect next time.'),
    content?: string(name='content', description='The file content.', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
    createTime?: string(name='createTime'),
    dataSource?: string(name='dataSource', description='The name of the data source.', example='ha-cn-tl32nd2nq01_00'),
    dataSourceInfo?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.', example='true'),
      config?: {
        accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
        accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
        bucket?: string(name='bucket', description='The name of the OSS bucket.', example='ha3test-oss'),
        catalog?: string(name='catalog'),
        database?: string(name='database'),
        endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
        format?: string(name='format'),
        namespace?: string(name='namespace', description='The namespace. This parameter is applicable to the SARO data source used in the intranet of Alibaba Group.', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
        ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='/test_opensearch/sift_oss_test.data'),
        partition?: string(name='partition', description='The partition in the MaxCompute table. Example: ds=20180102.', example='ds=20220713'),
        path?: string(name='path', description='The file path in the Apsara File Storage for HDFS file system.', example='http://test_opensearch/sift_oss_test.data'),
        project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='tisplus_dev'),
        table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='dump_odps_demo'),
        tag?: string(name='tag'),
      }(name='config', description='The configuration of MaxCompute data sources.'),
      domain?: string(name='domain', description='The data center in which the data source is deployed.', example='vpc_hz_domain_1'),
      name?: string(name='name', description='The name of the data source.', example='ha-cn-pl32rf0****_test_api'),
      processParallelNum?: int32(name='processParallelNum', description='The maximum number of full indexes that can be concurrently processed.', example='2'),
      processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='2'),
      saroConfig?: {
        namespace?: string(name='namespace', description='The namespace of the SARO data source.', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
        tableName?: string(name='tableName', description='The name of the SARO table.', example='llm'),
      }(name='saroConfig', description='The configurations of the SARO data source.'),
      type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.', example='odps'),
    }(name='dataSourceInfo', description='The information about the data source.'),
    description?: string(name='description', description='The description of the index version.', example='test index'),
    domain?: string(name='domain', description='The deployment name of the index.', example='sz_vpc_domain_1'),
    extend?: map[string][ string ](name='extend', description='Extended information'),
    fullUpdateTime?: string(name='fullUpdateTime', description='The time when full data in the index was last updated.', example='2024-06-20 08:52:54'),
    fullVersion?: long(name='fullVersion', description='The data version.', example='1688523414'),
    incUpdateTime?: string(name='incUpdateTime', description='The time when incremental data in the index was last updated.', example='2024-06-20 08:52:54'),
    indexSize?: long(name='indexSize', description='The index size.', example='4689'),
    indexStatus?: string(name='indexStatus', description='The status of the index version. Valid values:

*   NEW: The index version is created.
*   PUBLISH: The index version is normal.
*   IN_USE: The index version is in use.
*   NOT_USE: The index version is not used.
*   STOP_USE: The index version is being stopped.
*   RESTORE_USE: The index version is being restored.
*   FAIL: The index version failed to be created.', example='IN_USE'),
    name?: string(name='name', description='The index name.', example='general'),
    partition?: int32(name='partition', description='The number of shards.', example='2'),
    updateTime?: string(name='updateTime'),
    versions?: [ 
      {
        desc?: string(name='desc', description='The description of the version.', example='close alarm, by 3.9.2 hotfix workflow'),
        files?: [ 
          {
            fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
            isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
            isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
            name?: string(name='name', description='The file name.', example='qrs.json'),
          }
        ](name='files', description='The information about the files.'),
        name?: string(name='name', description='The version name.', example='ha-cn-7pp2ngv4s02_qrs'),
        status?: string(name='status', description='The status of the index version. Valid values:

*   NEW: The index version is created.
*   PUBLISH: The index version is normal.
*   IN_USE: The index version is in use.
*   NOT_USE: The index version is not used.
*   STOP_USE: The index version is being stopped.
*   RESTORE_USE: The index version is being restored.
*   FAIL: The index version failed to be created.', example='2'),
        updateTime?: long(name='updateTime', description='The time when the index version was updated.', example='" "'),
        versionId?: int32(name='versionId', description='The version ID.', example='1'),
      }
    ](name='versions', description='The information about the versions.'),
  }(name='result', description='The index information.'),
}

model GetIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexResponseBody(name='body'),
}

/**
  * @description ## [](#)Method
  *     GET
  * ## [](#uri)URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}
  * @param request  the request parameters of GetIndex  GetIndexRequest
  * @return GetIndexResponse
 */
async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model GetIndexOnlineStrategyRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2iv7sq01', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
  deployName: string(name='deployName', description='The name of the data center in which the data source is deployed.

This parameter is required.', example='vpc_hz_domain_1', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='test_api', position='Path'),
}

model GetIndexOnlineStrategyResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    changeRate?: int32(name='changeRate', description='The index change rate.', example='20'),
  }(name='result', description='The result.'),
}

model GetIndexOnlineStrategyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexOnlineStrategyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIndexOnlineStrategy  GetIndexOnlineStrategyRequest
  * @return GetIndexOnlineStrategyResponse
 */
async function getIndexOnlineStrategy(request: GetIndexOnlineStrategyRequest): GetIndexOnlineStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexOnlineStrategy', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}/indexes/{indexName}/online-strategy', 'json', false, 'json', request);
}

model GetIndexVersionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  clusterName: string(name='clusterName', description='The name of the cluster

This parameter is required.', example='vpc_hz_domain_1', position='Path'),
}

model GetIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    cluster?: string(name='cluster', description='The cluster name.', example='ayoss-cn-zhangjiakou-b'),
    indexVersions?: [ 
      {
        buildDeployId?: string(name='buildDeployId', description='The ID of the offline deployment.', example='" "'),
        currentVersion?: long(name='currentVersion', description='The current online version number.', example='1'),
        indexName?: string(name='indexName', description='The name of the index table.', example='table4'),
        versions?: [ long ](name='versions', description='The index versions.'),
      }
    ](name='indexVersions', description='The index versions.'),
  }(name='result', description='The clusters.'),
}

model GetIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexVersionResponseBody(name='body'),
}

/**
  * @description ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
  * @param request  the request parameters of GetIndexVersion  GetIndexVersionRequest
  * @return GetIndexVersionResponse
 */
async function getIndexVersion(request: GetIndexVersionRequest): GetIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexVersion', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetInstanceResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    bsVersion?: string(name='bsVersion'),
    chargeType?: string(name='chargeType', description='The billing method.', example='POSYPAY'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the instance.', example='commodityCode'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-06-17T02:01:26Z'),
    description?: string(name='description', description='The description of the instance.', example='ha3_test'),
    edition?: string(name='edition', description='The edition of the instance. Valid values: vector and engine.', example='vector'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires.', example='1634609702'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved.', example='false'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-7mz2qsgq301'),
    lockMode?: string(name='lockMode', description='The lock status.', example='Unlock'),
    network?: {
      allow?: string(name='allow', description='The public domain name whitelist.', example='127.0.0.1'),
      endpoint?: string(name='endpoint', description='The instance endpoint.', example='ha-cn-35t3r****.ha.aliyuncs.com'),
      publicEndpoint?: string(name='publicEndpoint', description='The public endpoint.', example='ha-cn-35t3ni****.public.ha.aliyuncs.com'),
      vSwitchId?: string(name='vSwitchId', description='The vSwitch ID.', example='vsw-bp11ldcf59q2n****'),
      vpcId?: string(name='vpcId', description='The VPC ID.', example='vpc-wz9axk41d9vff****'),
    }(name='network', description='The network information of the instance.'),
    newMode?: boolean(name='newMode', description='Specifies whether the instance is of the new version.', example='true'),
    noQrs?: boolean(name='noQrs', description='Specifies whether the instance has only one node.', example='false'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzjvw24el5lma'),
    spec?: {
      qrsResource?: {
        category?: string(name='category', description='The category. Valid values: local_ssd, SSD, and cloud.', example='local_ssd'),
        cpu?: int32(name='cpu', description='The number of vCPUs.', example='2'),
        disk?: int32(name='disk', description='The storage capacity. Unit: GB.', example='100'),
        mem?: int32(name='mem', description='The memory of the instance. Unit: GB.', example='10'),
        nodeCount?: int32(name='nodeCount', description='The number of nodes.', example='1'),
      }(name='qrsResource', description='The QRS worker specifications.'),
      searchResource?: {
        category?: string(name='category', description='The category. Valid values: local_ssd, SSD, and cloud.', example='local_ssd'),
        cpu?: int32(name='cpu', description='The number of vCPUs.', example='2'),
        disk?: int32(name='disk', description='The storage capacity. Unit: GB.', example='100'),
        mem?: int32(name='mem', description='The memory of the instance. Unit: GB.', example='10'),
        nodeCount?: int32(name='nodeCount', description='The number of nodes.', example='1'),
      }(name='searchResource', description='The searcher worker specifications.'),
    }(name='spec', description='The node specifications.'),
    status?: string(name='status', description='The status of the instance. Valid values:

*   INIT: being initialized
*   WAIT_CONFIG: to be configured
*   CONFIG_UPDATING: configuration taking effect
*   READY: normal', example='INIT'),
    tags?: [ 
      {
        key?: string(name='key', description='The tag key.', example='env'),
        value?: string(name='value', description='The tag value.', example='prod'),
      }
    ](name='tags', description='The tags of the instance.'),
    updateTime?: string(name='updateTime', description='The time when the instance was updated.', example='1634609702'),
    userName?: string(name='userName', description='The username.', example='admin'),
    version?: string(name='version', description='The version of the engine.', example='ha3_3.10.0'),
    zoneCount?: int32(name='zoneCount'),
  }(name='result', description='Response parameters'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * ```java
  * GET
  * ```
  * ### [](#uri)URI
  * ```java
  * /openapi/ha3/instances/{instanceId}
  * ```
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model GetModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  modelName: string(name='modelName', description='This parameter is required.', example='test', position='Path'),
}

model GetModelResponseBody = {
  requestId?: string(name='requestId', example='38b079f1-7846-4226-8c90-3e2644b5c52b'),
  result?: {
    content?: {
      method?: string(name='method', example='POST'),
      modelName?: string(name='modelName', example='test'),
      modelType?: string(name='modelType', example='text_embedding'),
      request?: {
        header?: {
          authorization?: string(name='Authorization', example='Bearer OS-v0********6vvs'),
          contentType?: string(name='Content-Type', example='application/json'),
        }(name='header'),
        parameters?: {
          build?: {
            inputType?: string(name='input_type', example='query'),
          }(name='build'),
          search?: {
            inputType?: string(name='input_type', example='document'),
          }(name='search'),
        }(name='parameters'),
        requestBody?: string(name='requestBody', example='{\\"input\\": [\\"%{input}\\"], \\"input_type\\": \\"%{input_type}\\"}'),
        urlParams?: {
          build?: map[string]any(name='build', example='key: value'),
          search?: map[string]any(name='search', example='key: value'),
        }(name='urlParams'),
      }(name='request'),
      response?: {
        embeddings?: string(name='embeddings', example='$.result.embeddings[*].embedding'),
      }(name='response'),
      url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
    }(name='content'),
    createTime?: string(name='createTime', example='2024-05-21 16:05:26'),
    dimension?: int32(name='dimension', example='128'),
    name?: string(name='name', example='test'),
    status?: string(name='status', example='ok'),
    type?: string(name='type', example='text_embedding'),
    updateTime?: string(name='updateTime', example='2024-05-21 16:05:26'),
    url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
  }(name='result'),
}

model GetModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - 该API用于获取指定实例下的特定模型的详细信息，包括模型类型、URL、状态等。
  * - 确保提供的`instanceId`和`modelName`是有效的，否则可能返回错误或找不到资源。
  * - 返回的数据结构中包含了模型的内容（如请求头、参数等）以及创建和更新时间，有助于了解模型的具体配置及其最新状态。
  * @param request  the request parameters of GetModel  GetModelRequest
  * @return GetModelResponse
 */
async function getModel(request: GetModelRequest): GetModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModel', 'GET', '/openapi/ha3/instances/{instanceId}/models/{modelName}', 'json', false, 'json', request);
}

model GetNodeConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rewdi02', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='vpc_sh_domain_2', position='Query'),
  name?: string(name='name', description='The node name.', example='ha-cn-30174dhoz53_qrs', position='Query'),
  type?: string(name='type', description='The node type. Valid values:

*   qrs: Query Result Searcher (QRS) worker
*   search: Search worker
*   index: index
*   cluster: cluster', example='index', position='Query'),
}

model GetNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    active?: boolean(name='active', description='Indicates whether the index is effective online.', example='1'),
    dataDuplicateNumber?: int32(name='dataDuplicateNumber', description='The number of data replicas.', example='2'),
    dataFragmentNumber?: int32(name='dataFragmentNumber', description='The number of data shards.', example='2'),
    flowRatio?: int32(name='flowRatio', description='The traffic percentage.', example='0'),
    minServicePercent?: int32(name='minServicePercent', description='The minimum service ratio.', example='100'),
    published?: boolean(name='published', description='Indicates whether the cluster is mounted.', example='true'),
  }(name='result', description='The result set.'),
}

model GetNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeConfig  GetNodeConfigRequest
  * @return GetNodeConfigResponse
 */
async function getNodeConfig(request: GetNodeConfigRequest): GetNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNodeConfig', 'GET', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model GetSqlInstanceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='5978', position='Path'),
  version?: long(name='version', example='1', position='Query'),
}

model GetSqlInstanceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    combineParams?: string(name='combineParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    comment?: string(name='comment', example='init version'),
    content?: string(name='content', example='select * from test'),
    dynamicParams?: string(name='dynamicParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    gmtCreate?: string(name='gmtCreate', example='1719220182844'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    instanceId?: long(name='instanceId', example='ha-cn-pl32rf0****'),
    kvpairs?: string(name='kvpairs', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    relatedTemplateId?: long(name='relatedTemplateId', example='1'),
    staticParams?: string(name='staticParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    templateParams?: string(name='templateParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    version?: long(name='version', example='1'),
  }(name='result', description='InstanceVersionVO'),
}

model GetSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSqlInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSqlInstance  GetSqlInstanceRequest
  * @return GetSqlInstanceResponse
 */
async function getSqlInstance(request: GetSqlInstanceRequest): GetSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSqlInstance', 'GET', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}', 'json', false, 'json', request);
}

model GetTableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2k3qer02', position='Path'),
  tableName: string(name='tableName', description='This parameter is required.', example='test_summary', position='Path'),
}

model GetTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    dataProcessConfig?: [ 
      {
        dstField?: string(name='dstField', description='The destination field.', example='source_image_vector'),
        operator?: string(name='operator', description='The method used to process the field. Valid values: copy and vectorize. A value of copy indicates that the value of the source field is copied to the destination field. A value of vectorize indicates that the value of the source field is vectorized by a vectorization model and the output vector is stored in the destination field.', example='vectorize'),
        params?: {
          srcFieldConfig?: {
            ossBucket?: string(name='ossBucket', description='OSS Bucket', example='test'),
            ossEndpoint?: string(name='ossEndpoint', description='The Object Storage Service (OSS) endpoint.', example='oss-cn-hangzhou-internal.aliyuncs.com'),
            uid?: string(name='uid', description='The ID of the Alibaba Cloud account.', example='uid'),
          }(name='srcFieldConfig', description='The source of the data to be vectorized.'),
          vectorModal?: string(name='vectorModal', description='The data type.', example='image'),
          vectorModel?: string(name='vectorModel', description='The vectorization model.', example='clip'),
        }(name='params', description='The information about the model.'),
        srcField?: string(name='srcField', description='The source field.', example='source_image'),
      }
    ](name='dataProcessConfig', description='The configurations about field processing.'),
    dataProcessorCount?: int32(name='dataProcessorCount', example='1'),
    dataSource?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
      config?: {
        accessKey?: string(name='accessKey', description='AK', example='ak'),
        accessSecret?: string(name='accessSecret', description='AS', example='as'),
        bucket?: string(name='bucket', example='heytea-ops-oss'),
        endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
        namespace?: string(name='namespace', example='namespace'),
        ossPath?: string(name='ossPath', example='/opensearch_index_data/sift_oss_test.data'),
        partition?: string(name='partition', example='ds=20220808'),
        path?: string(name='path', example='vendor/sebastian/comparator/src/exceptions'),
        project?: string(name='project', example='dp_pdm_marketing_prod'),
        table?: string(name='table', example='test_add'),
      }(name='config'),
      dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
      type?: string(name='type', example='odps'),
    }(name='dataSource'),
    fieldSchema?: map[string]string(name='fieldSchema', description='The field. The value is a key-value pair in which the key indicates the field name and value indicates the field type.'),
    name?: string(name='name', example='test_oss'),
    partitionCount?: int32(name='partitionCount', example='1'),
    primaryKey?: string(name='primaryKey', example='id'),
    rawSchema?: string(name='rawSchema', example='{}'),
    status?: string(name='status', description='The state of the index table. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, RESTORE_USE, and FAIL. After an index is created in an OpenSearch Retrieval Engine Edition instance, the index enters the IN_USE state. If the first full index fails to be created in an OpenSearch Vector Search Edition instance of the new version, the index is in the FAIL state.', example='IN_USE'),
    vectorIndex?: [ 
      {
        advanceParams?: {
          buildIndexParams?: string(name='buildIndexParams', description='The index building parameters.', example='{}'),
          linearBuildThreshold?: string(name='linearBuildThreshold', description='The threshold for linear building.', example='5000'),
          minScanDocCnt?: string(name='minScanDocCnt', description='The minimum number of retrieved candidate sets.', example='20000'),
          searchIndexParams?: string(name='searchIndexParams', description='The index retrieval parameters.', example='{}'),
        }(name='advanceParams', description='The configurations of the index schema.'),
        dimension?: string(name='dimension', description='The dimension of the vector.', example='128'),
        distanceType?: string(name='distanceType', description='The distance type.', example='SquaredEuclidean'),
        indexName?: string(name='indexName', description='The name of the index schema.', example='test_odps'),
        namespace?: string(name='namespace', description='The namespace field.', example='namespace'),
        sparseIndexField?: string(name='sparseIndexField', description='The field that stores the indexes of the elements in sparse vectors.', example='sparse_indices'),
        sparseValueField?: string(name='sparseValueField', description='The field that stores the elements in sparse vectors.', example='sparse_values'),
        vectorField?: string(name='vectorField', description='The vector field.', example='source_image_vector'),
        vectorIndexType?: string(name='vectorIndexType', description='The vector retrieval algorithm.', example='Qc'),
      }
    ](name='vectorIndex', description='The index schema.'),
  }(name='result', description='The results returned.'),
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTable  GetTableRequest
  * @return GetTableResponse
 */
async function getTable(request: GetTableRequest): GetTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTable', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model GetTableGenerationRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0js04', position='Path'),
  tableName: string(name='tableName', description='The name of the table.

This parameter is required.', example='test_summary', position='Path'),
  generationId: long(name='generationId', description='The ID of the full index version.

This parameter is required.', example='1708674867', position='Path'),
}

model GetTableGenerationResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    generationId?: long(name='generationId', description='generationId', example='1708674867'),
    status?: string(name='status', description='starting, building, ready, stopped, failed', example='ready'),
  }(name='result', description='The result returned.'),
}

model GetTableGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableGeneration  GetTableGenerationRequest
  * @return GetTableGenerationResponse
 */
async function getTableGeneration(request: GetTableGenerationRequest): GetTableGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableGeneration', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/index_versions/{generationId}', 'json', false, 'json', request);
}

model ListAdvanceConfigDirRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-2r42ostoc01_online_config_v3', position='Path'),
  dirName: string(name='dirName', description='The name of the directory

This parameter is required.', example='/zones/general', position='Query'),
}

model ListAdvanceConfigDirResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: [ 
    {
      fullPathName?: string(name='fullPathName', description='The absolute path in which the file is stored.', example='"/path/wpd/nae"'),
      isDir?: boolean(name='isDir', description='Indicates whether the file is a directory. Valid values: true and false.', example='true'),
      isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template. Valid values: **true** and **false**.', example='true'),
      name?: string(name='name', description='The cluster name.', example='file_name_1'),
    }
  ](name='result', description='The advanced configuration files.'),
}

model ListAdvanceConfigDirResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigDirResponseBody(name='body'),
}

/**
  * @description ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir?dirName={dirName}`
  * @param request  the request parameters of ListAdvanceConfigDir  ListAdvanceConfigDirRequest
  * @return ListAdvanceConfigDirResponse
 */
async function listAdvanceConfigDir(request: ListAdvanceConfigDirRequest): ListAdvanceConfigDirResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigDir', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir', 'json', false, 'json', request);
}

model ListAdvanceConfigsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0js04', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='ha-cn-pl32rf0****_test_api', position='Query'),
  indexName?: string(name='indexName', description='The index name.', example='test_api', position='Query'),
  newMode?: boolean(name='newMode', description='Specifies whether the OpenSearch Vector Search Edition instance is of the new version.', example='true', position='Query'),
  pageNumber?: string(name='pageNumber', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  type?: string(name='type', description='The type of advanced configurations that you want to query. Valid values: - online -offline (default)', example='online', position='Query'),
}

model ListAdvanceConfigsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      advanceConfigType?: string(name='advanceConfigType', description='*   The type of the advanced configuration. Valid values: -ONLINE: online configuration
*   \\-ONLINE_CAVA: online Cava configuration
*   \\-ONLINE_PLUGIN: online plug-in configuration
*   \\-ONLINE_QUERY: query configuration
*   \\-OFFLINE_DICT: offline dictionary configuration
*   \\-OFFLINE_TABLE: offline table configuration
*   \\-OFFLINE_COMMON: offline configuration
*   \\-OFFLINE_PLUGIN: offline plug-in configuration
*   \\-OFFLINE_INDEX: index configuration', example='ONLINE'),
      content?: string(name='content', description='The content of the advanced configuration that is returned.', example='{\\"url\\":\\"http://xxxxxx.aliyuncs.com/outnet_hz/packages/xxxxx/opensearch_offline_plugins_xxxxx.tar\\"}'),
      contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.', example='FILE'),
      creator?: string(name='creator', description='The Alibaba Cloud account ID of the user who created the advanced configuration.', example='123456'),
      desc?: string(name='desc', description='The description of the advanced configuration.', example='test'),
      files?: [ 
        {
          fullPathName?: string(name='fullPathName', description='The absolute path in which the file is stored.', example='/path/wpd/nae'),
          isDir?: boolean(name='isDir', description='Indicates whether the file is a directory. Valid values: true and false.', example='true'),
          isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template. Valid values: true and false.', example='true'),
          name?: string(name='name', description='The file name.', example='file_name_1'),
        }
      ](name='files', description='The files.'),
      name?: string(name='name', description='The name of the advanced configuration.', example='my_index'),
      status?: string(name='status', description='The status of the advanced configuration. Valid values: drafting: The advanced configuration is in the draft state. used: The advanced configuration is being used. unused: The advanced configuration is not used. trash: The advanced configuration is being deleted.', example='drafting'),
      updateTime?: long(name='updateTime', description='The time when the advanced configuration was updated.', example='1631070464000'),
    }
  ](name='result', description='The advanced configurations.'),
}

model ListAdvanceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigsResponseBody(name='body'),
}

/**
  * @description ## Sample requests
  * `GET /openapi/ha3/instances/ose-test1/advanced-configs`
  * @param request  the request parameters of ListAdvanceConfigs  ListAdvanceConfigsRequest
  * @return ListAdvanceConfigsResponse
 */
async function listAdvanceConfigs(request: ListAdvanceConfigsRequest): ListAdvanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs', 'json', false, 'json', request);
}

model ListAliasesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
}

model ListAliasesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      alias?: string(name='alias', description='alias name', example='test'),
      index?: string(name='index', description='index name', example='index'),
    }
  ](name='result', description='List'),
}

model ListAliasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAliasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAliases  ListAliasesRequest
  * @return ListAliasesResponse
 */
async function listAliases(request: ListAliasesRequest): ListAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAliases', 'GET', '/openapi/ha3/instances/{instanceId}/aliases', 'json', false, 'json', request);
}

model ListClusterNamesRequest {
}

model ListClusterNamesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: {
    description?: string(name='description', description='The description of the cluster.', example='ha3_test'),
    id?: long(name='id', description='The cluster ID.', example='25030'),
    name?: string(name='name', description='The cluster name.', example='my_index'),
  }(name='result', description='The result set.'),
}

model ListClusterNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterNamesResponseBody(name='body'),
}

/**
  * @description ### Method
  * GET
  * ### URI
  * /openapi/ha3/instances/{instanceId}/cluster-names
  * @param request  the request parameters of ListClusterNames  ListClusterNamesRequest
  * @return ListClusterNamesResponse
 */
async function listClusterNames(request: ListClusterNamesRequest): ListClusterNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterNames', 'GET', '/openapi/ha3/cluster-names', 'json', false, 'json', request);
}

model ListClusterTasksRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2roiy504', position='Path'),
}

model ListClusterTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='" "'),
      field3?: string(name='field3', description='The field3 field that was passed when the FSM was created.', example='" "'),
      fsmId?: string(name='fsmId', description='The ID of the finite state machine (FSM).', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-zvp2ljiwe01_api2@bj_vpc_domain_1@null@MANUAL-ha-cn-zvp2ljiwe01_api2@1649729867698@028315'),
      groupType?: string(name='groupType', description='The change group type.', example='" "'),
      name?: string(name='name', description='The card name.', example='ha-cn-pl32rf0js04_qrs'),
      status?: string(name='status', description='The FSM status.', example='onlyPublished'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The tag content.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The tag level.', example='" "'),
        }
      ](name='tags', description='The tags of the progress bar.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The time when the task was complete.', example='" "'),
          index?: long(name='index', description='The ordinal number of the task.', example='100'),
          name?: string(name='name', description='The task name.', example='general'),
          status?: string(name='status', description='The task status.', example='2'),
        }
      ](name='taskNodes', description='The task information.'),
      time?: string(name='time', description='The timestamp of the card.', example='1657610520'),
      type?: string(name='type', description='The card type.', example='qrs'),
      user?: string(name='user', description='The user who triggered the generation of the FSM process.', example='" "'),
    }
  ](name='result', description='The index information.'),
}

model ListClusterTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterTasksResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/cluster-tasks
  * ```
  * @param request  the request parameters of ListClusterTasks  ListClusterTasksRequest
  * @return ListClusterTasksResponse
 */
async function listClusterTasks(request: ListClusterTasksRequest): ListClusterTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterTasks', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-tasks', 'json', false, 'json', request);
}

model ListClustersRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-zvp2jlr2g03', position='Path'),
}

model ListClustersResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: [ 
    {
      config?: map[string]map[string]any(name='config', description='The configuration information.'),
      configUpdateTime?: string(name='configUpdateTime', description='The time when the configuration was updated.', example='" "'),
      createTime?: string(name='createTime', description='The time when the cluster was created.', example='2024-05-21 16:05:26'),
      currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced configuration version.', example='" "'),
      currentOfflineDictConfigVersion?: string(name='currentOfflineDictConfigVersion', description='The effective dictionary configuration version.', example='ha-cn-pl32rf0****_offline_adv_v1'),
      currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='" "'),
      currentOnlineQueryConfigVersion?: string(name='currentOnlineQueryConfigVersion', description='The effective query configuration version.', example='ha-cn-pl32rf0****_offline_adv_v1'),
      dataNode?: {
        name?: string(name='name', description='The name of the Searcher worker.', example='ha-cn-8ed2k7brm05_qrs'),
        number?: int32(name='number', description='The number of Searcher workers.', example='1'),
        partition?: int32(name='partition', description='The ID of the partition that is stored on the Searcher worker.', example='dt=20220216'),
      }(name='dataNode', description='The information about Searcher workers.'),
      description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
      latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='" "'),
      latestOfflineDictConfigVersion?: string(name='latestOfflineDictConfigVersion', description='The latest dictionary configuration version.', example='ha-cn-pl32rf0****_offline_adv_v1'),
      latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='" "'),
      latestOnlineQueryConfigVersion?: string(name='latestOnlineQueryConfigVersion', description='The latest query configuration version.', example='ha-cn-pl32rf0****_offline_adv_v1'),
      name?: string(name='name', description='The cluster name.', example='ha-cn-7pp2pcna701_qrs'),
      queryNode?: {
        name?: string(name='name', description='The name of the QRS worker.', example='test_0704'),
        number?: int32(name='number', description='The number of QRS workers.', example='1'),
        partition?: int32(name='partition', description='The ID of the partition that is stored on the QRS worker.', example='dt=20211216'),
      }(name='queryNode', description='The information about Query Result Searcher (QRS) workers.'),
      status?: string(name='status', description='The cluster status. Valid values: running: The cluster is running. starting: The cluster is being started. stopping: The cluster is being stopped. stopped: The cluster is stopped.', example='"starting"'),
    }
  ](name='result', description='The clusters.'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/clusters
  * ```
  * @param request  the request parameters of ListClusters  ListClustersRequest
  * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusters', 'GET', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model ListDataSourceSchemasRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-zvp2s4l8f02', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-2r42ostoc01_ecom_table_test', position='Path'),
}

model ListDataSourceSchemasResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      addIndex?: boolean(name='addIndex', description='Indicates whether the field has the index attribute. Valid values: **true** and **false**.', example='false'),
      attribute?: boolean(name='attribute', description='Indicates whether the field is an attribute field. Valid values: **true** and **false**.', example='false'),
      custom?: boolean(name='custom', description='Indicates whether the field is a custom field. Valid values: **true** and **false**.', example='false'),
      name?: string(name='name', description='The field name.', example='test'),
      primaryKey?: {
        hasPrimaryKeyAttribute?: boolean(name='hasPrimaryKeyAttribute', description='Indicates whether the field has the primary key attribute. Valid values: **true** and **false**.', example='false'),
        isPrimaryKey?: boolean(name='isPrimaryKey', description='Indicates whether the field is the primary key. Valid values: **true** and **false**.', example='false'),
        isPrimaryKeySorted?: boolean(name='isPrimaryKeySorted', description='Indicates whether the field can be sorted. Valid values: **true** and **false**.', example='false'),
      }(name='primaryKey', description='The primary key field.'),
      summary?: boolean(name='summary', description='Indicates whether the field can be displayed. Valid values: **true** and **false**.', example='false'),
      type?: string(name='type', description='The field type.', example='STRING'),
    }
  ](name='result', description='The results returned.'),
}

model ListDataSourceSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSchemasResponseBody(name='body'),
}

/**
  * @description ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas`
  * @param request  the request parameters of ListDataSourceSchemas  ListDataSourceSchemasRequest
  * @return ListDataSourceSchemasResponse
 */
async function listDataSourceSchemas(request: ListDataSourceSchemasRequest): ListDataSourceSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceSchemas', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas', 'json', false, 'json', request);
}

model ListDataSourceTasksRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7e22rof5304', position='Path'),
}

model ListDataSourceTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='""'),
      field3?: string(name='field3', description='The field3 field that was passed when the FSM was created.', example='""'),
      fsmId?: string(name='fsmId', description='The ID of the finite state machine (FSM).', example='tisplus_opensearch@datasource_flow_fsm@1062017779051424-ha-cn-2r42ostoc01_ecom_table@vpc_hz_domain_1@null@MANUAL-ha-cn-2r42ostoc01_ecom_table@1655974525756@006754'),
      groupType?: string(name='groupType', description='The change group type.', example='" "'),
      name?: string(name='name', description='The card name.', example='general'),
      status?: string(name='status', description='The FSM status.', example='2'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The tag content.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The tag level.', example='""'),
        }
      ](name='tags', description='The tags of the progress bar.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The time when the task was complete.', example='""'),
          index?: long(name='index', description='The ordinal number of the task.', example='100'),
          name?: string(name='name', description='The task name.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The task status.', example='onlyPublished'),
        }
      ](name='taskNodes', description='The task information.'),
      time?: string(name='time', description='The timestamp of the card.', example='1646279473'),
      type?: string(name='type', description='The card type.', example='search'),
      user?: string(name='user', description='The user who triggered the generation of the FSM process.', example='""'),
    }
  ](name='result', description='The index information.'),
}

model ListDataSourceTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceTasksResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * ```java
  * GET
  * ```
  * ### [](#uri)URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/data-source-tasks
  * ```
  * @param request  the request parameters of ListDataSourceTasks  ListDataSourceTasksRequest
  * @return ListDataSourceTasksResponse
 */
async function listDataSourceTasks(request: ListDataSourceTasksRequest): ListDataSourceTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceTasks', 'GET', '/openapi/ha3/instances/{instanceId}/data-source-tasks', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
}

model ListDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: [ 
    {
      domain?: string(name='domain', description='The data center in which the data source is deployed.', example='test'),
      indexes?: [ string ](name='indexes', description='The indexes.'),
      lastFulTime?: long(name='lastFulTime', description='The time when the full data of the data source was last queried.', example='1718787785'),
      name?: string(name='name', description='The name of the data source.', example='data_source_name'),
      status?: string(name='status', description='The status of the data source. Valid values: new: The data source is being created. publish: The data source is in the normal state. trash: The data source is being deleted.', example='new'),
      type?: string(name='type', description='The type of the data source.', example='odps'),
    }
  ](name='result', description='The results returned.'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
  * @description ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources`
  * @param request  the request parameters of ListDataSources  ListDataSourcesRequest
  * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
}

model ListDatabasesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    databases?: [ 
      {
        database?: string(name='database', example='general'),
        functions?: map[string][ ResultDatabasesFunctionsValue         ](name='functions'),
        sqlInstances?: [ 
          {
            children?: [ any ](name='children'),
            id?: long(name='id', example='12190'),
            instanceId?: long(name='instanceId', example='1'),
            isDir?: int32(name='isDir', example='true'),
            name?: string(name='name', example='general'),
            parent?: long(name='parent', example='-1'),
            templateId?: long(name='templateId', example='1'),
            type?: string(name='type', description='table, instance, template, function', example='instance'),
          }
        ](name='sqlInstances'),
        tables?: [ 
          {
            children?: [ any ](name='children'),
            id?: long(name='id', example='56'),
            instanceId?: long(name='instanceId', example='1'),
            isDir?: int32(name='isDir', example='true'),
            name?: string(name='name', example='general'),
            parent?: long(name='parent', example='-1'),
            templateId?: long(name='templateId', example='1'),
            type?: string(name='type', description='table, instance, template, function', example='table'),
          }
        ](name='tables'),
        templates?: [ 
          {
            children?: [ any ](name='children'),
            id?: long(name='id', example='1'),
            instanceId?: long(name='instanceId', example='1'),
            isDir?: int32(name='isDir', example='true'),
            name?: string(name='name', example='c26_schema'),
            parent?: long(name='parent', example='-1'),
            templateId?: long(name='templateId', example='1'),
            type?: string(name='type', description='table, instance, template, function', example='template'),
          }
        ](name='templates'),
      }
    ](name='databases'),
  }(name='result', description='NodeTreeVO'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabases  ListDatabasesRequest
  * @return ListDatabasesResponse
 */
async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatabases', 'GET', '/openapi/ha3/instances/{instanceId}/sql-studio/databases', 'json', false, 'json', request);
}

model ListDateSourceGenerationsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-0ju2s170b03_test_api2', position='Path'),
  domainName: string(name='domainName', description='The data center where the data source is deployed.

This parameter is required.', example='bj_vpc_domain_1', position='Query'),
  validStatus?: boolean(name='validStatus', description='Specifies the index versions to be returned. Valid values:

1.  true (default): returns the index versions that are complete and not expired.
2.  false: returns all index versions.', example='true', position='Query'),
}

model ListDateSourceGenerationsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      buildDeployId?: int32(name='buildDeployId', description='The ID of the offline deployment.', example='122'),
      createTime?: long(name='createTime', description='The timestamp that was generated when the index building was started.', example='1626143673'),
      dataDumpRoot?: string(name='dataDumpRoot', description='The path of the dumped index in the Apsara File Storage for HDFS file system.', example='""'),
      generation?: long(name='generation', description='The ID of the full index version.', example='1626143930'),
      partition?: map[string]int32(name='partition', description='The shards of the index version. The value is a key-value pair in which the key indicates the index name and the value indicates the number of shards. The number of value shards.'),
      status?: string(name='status', description='The status of the index version.', example='STOPPED'),
      timestamp?: long(name='timestamp', description='The start timestamp from which incremental data is retrieved.', example='1626143673'),
    }
  ](name='result', description='List'),
}

model ListDateSourceGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDateSourceGenerationsResponseBody(name='body'),
}

/**
  * @description ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations?domainName={domainName}`
  * @param request  the request parameters of ListDateSourceGenerations  ListDateSourceGenerationsRequest
  * @return ListDateSourceGenerationsResponse
 */
async function listDateSourceGenerations(request: ListDateSourceGenerationsRequest): ListDateSourceGenerationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDateSourceGenerations', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations', 'json', false, 'json', request);
}

model ListIndexRecoverRecordsRequest {
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='index_jiayi_text', position='Path'),
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-i7m2rpzm605', position='Path'),
}

model ListIndexRecoverRecordsResponseBody = {
  desc?: string(name='desc', description='The description.', example='test'),
  finishedTime?: string(name='finishedTime', description='The time when the index version was published.', example='2024-06-07 16:43:00'),
  generationId?: string(name='generationId', description='The ID of the full index version.', example='1708674867'),
}

model ListIndexRecoverRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexRecoverRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIndexRecoverRecords  ListIndexRecoverRecordsRequest
  * @return ListIndexRecoverRecordsResponse
 */
async function listIndexRecoverRecords(request: ListIndexRecoverRecordsRequest): ListIndexRecoverRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexRecoverRecords', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/list-recover-records', 'json', false, 'json', request);
}

model ListIndexesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  catalog?: string(name='catalog', position='Query'),
  database?: string(name='database', position='Query'),
  newMode?: boolean(name='newMode', description='Specifies whether the OpenSearch Vector Search Edition instance is of the new version.', example='true', position='Query'),
  table?: string(name='table', position='Query'),
}

model ListIndexesResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content', description='The index schema, which is a JSON string.', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
      createTime?: string(name='createTime'),
      dataSource?: string(name='dataSource', description='The name of the data source.', example='ha-cn-7mz2kvu2c01_table4'),
      dataSourceInfo?: {
        autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.', example='true'),
        config?: {
          accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='root'),
          accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='root123'),
          bucket?: string(name='bucket', description='The OSS bucket.', example='ha3test-oss'),
          catalog?: string(name='catalog'),
          database?: string(name='database'),
          endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
          format?: string(name='format'),
          namespace?: string(name='namespace', description='The namespace. This parameter is applicable to the SARO data source used in the intranet of Alibaba Group.', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='/test_opensearch/sift_oss_test.data'),
          partition?: string(name='partition', description='The shard name.', example='ds=12345'),
          path?: string(name='path', description='The file path in the Apsara File Storage for HDFS file system.', example='http://test_opensearch/sift_oss_test.data'),
          project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='tisplus_dev'),
          table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='dump_odps_demo'),
          tag?: string(name='tag'),
        }(name='config', description='The configuration of MaxCompute data sources.'),
        domain?: string(name='domain', description='The data center in which the data source is deployed.', example='test'),
        name?: string(name='name', description='The name of the data source.', example='index1'),
        processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='2'),
        saroConfig?: {
          namespace?: string(name='namespace', description='The namespace of the SARO data source.', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          tableName?: string(name='tableName', description='The name of the SARO table.', example='dump_odps_demo'),
        }(name='saroConfig', description='The configurations of the SARO data source.'),
        type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.', example='odps'),
      }(name='dataSourceInfo', description='The information about the data source.'),
      description?: string(name='description', description='The description.', example='Description'),
      domain?: string(name='domain', description='The deployment name of the index.', example='test'),
      fullUpdateTime?: string(name='fullUpdateTime', description='The time when full data in the index was last updated.', example='2023-07-05 10:40:38'),
      fullVersion?: long(name='fullVersion', description='The full version of the index.', example='1688523414'),
      incUpdateTime?: string(name='incUpdateTime', description='The time when incremental data in the index was last updated.', example='2023-07-05 10:58:33'),
      indexSize?: long(name='indexSize', description='The index size.', example='4689'),
      indexStatus?: string(name='indexStatus', description='The index ststus. Valid values: NEW and PUBLISH.', example='" "'),
      name?: string(name='name', description='The index name.', example='general'),
      partition?: int32(name='partition', description='The number of shards.', example='2'),
      updateTime?: string(name='updateTime'),
      versions?: [ 
        {
          desc?: string(name='desc', description='The description of the index version.', example='close alarm, by 3.9.2 hotfix workflow'),
          files?: [ 
            {
              fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
              isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
              isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
              name?: string(name='name', description='The file name.', example='ha-cn-7mz2iv7sq01_qrs'),
            }
          ](name='files', description='The files.'),
          name?: string(name='name', description='The name of the index version.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The status of the index version. Valid values:

*   NEW: The index version is created.
*   PUBLISH: The index version is normal.
*   IN_USE: The index version is in use.
*   NOT_USE: The index version is not used.
*   STOP_USE: The index version is being stopped.
*   RESTORE_USE: The index version is being restored.
*   FAIL: The index version failed to be created.', example='2'),
          updateTime?: long(name='updateTime', description='The time when the index version was updated.', example='" "'),
          versionId?: int32(name='versionId', description='The ID of the index version. If the index version is modified, the returned value is null.', example='1'),
        }
      ](name='versions', description='The index versions.'),
    }
  ](name='result', description='The details of indexes.'),
}

model ListIndexesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexesResponseBody(name='body'),
}

/**
  * @description ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes
  * @param request  the request parameters of ListIndexes  ListIndexesRequest
  * @return ListIndexesResponse
 */
async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexes', 'GET', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model ListInstanceSpecsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  type: string(name='type', description='The node type. Valid values:

*   qrs: Query Result Searcher (QRS) Worker
*   search: Searcher Worker
*   index: index node
*   cluster: cluster

This parameter is required.', example='search', position='Query'),
}

model ListInstanceSpecsResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      cpu?: int32(name='cpu', description='The number of vCPUs.', example='1'),
      maxDisk?: int32(name='maxDisk', description='The maximum storage of a single data node. Unit: GB.', example='600'),
      mem?: int32(name='mem', description='The memory of the instance. Unit: GB.', example='4'),
      minDisk?: int32(name='minDisk', description='The minimum storage of a single data node. Unit: GB.', example='100'),
    }
  ](name='result', description='The instance types.'),
}

model ListInstanceSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceSpecsResponseBody(name='body'),
}

/**
  * @description ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/specs?type=qrs`
  * @param request  the request parameters of ListInstanceSpecs  ListInstanceSpecsRequest
  * @return ListInstanceSpecsResponse
 */
async function listInstanceSpecs(request: ListInstanceSpecsRequest): ListInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSpecs', 'GET', '/openapi/ha3/instances/{instanceId}/specs', 'json', false, 'json', request);
}

model ListInstancesRequest {
  catalog?: string(name='catalog', position='Query'),
  dataSourceType?: string(name='dataSourceType', position='Query'),
  database?: string(name='database', position='Query'),
  description?: string(name='description', description='The description of the instance. You can use this description to filter instances. Fuzzy match is supported.', example='Havenask instance', position='Query'),
  edition?: string(name='edition', description='The instance type. Valid values: vector: OpenSearch Vector Search Edition instance. engine: OpenSearch Retrieval Engine Edition instance.', example='vector', position='Query'),
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-83570439y0n', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzgpiswzbksdi', position='Query'),
  table?: string(name='table', position='Query'),
  tags?: [ 
    {
      key?: string(name='key', description='The tag key.', example='backup'),
      value?: string(name='value', description='The tag value.', example='oboms-disk'),
    }
  ](name='tags', description='The tags of the instance.', shrink='json', position='Query'),
}

model ListInstancesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', description='The billing method.', example='PrePaid'),
      commodityCode?: string(name='commodityCode', description='The commodity code of the instance.', example='""'),
      createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-06-04T02:03:21Z'),
      dataSourceDetails?: [ 
        {
          config?: {
            accessKey?: string(name='accessKey'),
            bucket?: string(name='bucket'),
            catalog?: string(name='catalog'),
            database?: string(name='database'),
            endpoint?: string(name='endpoint'),
            namespace?: string(name='namespace'),
            ossPath?: string(name='ossPath'),
            partition?: string(name='partition'),
            path?: string(name='path'),
            project?: string(name='project'),
            table?: string(name='table'),
            tag?: string(name='tag'),
          }(name='config'),
          indexName?: string(name='indexName'),
          type?: string(name='type'),
        }
      ](name='dataSourceDetails'),
      description?: string(name='description', description='The description of the instance.', example='Emergency test'),
      edition?: string(name='edition'),
      expiredTime?: string(name='expiredTime', description='The time when the instance expires.', example='1634885083'),
      inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved.', example='false'),
      instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-2r42n8oh001'),
      lockMode?: string(name='lockMode', description='The lock state of the instance.', example='Unlock'),
      network?: {
        allow?: string(name='allow'),
        endpoint?: string(name='endpoint', description='The instance endpoint.', example='""'),
        publicEndpoint?: string(name='publicEndpoint'),
        vSwitchId?: string(name='vSwitchId', description='The vSwitch ID.', example='vsw-bp11ldcf59q2nbwkqgj6z'),
        vpcId?: string(name='vpcId', description='The ID of the virtual private cloud (VPC) in which the instance is deployed.', example='vpc-wz9axk41d9vffoc79x0oe'),
      }(name='network', description='The network information of the instance.'),
      noQrs?: boolean(name='noQrs'),
      resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzgpiswzbksdi'),
      spec?: {
        qrsResource?: {
          category?: string(name='category'),
          cpu?: int32(name='cpu'),
          disk?: int32(name='disk'),
          mem?: int32(name='mem'),
          nodeCount?: int32(name='nodeCount'),
        }(name='qrsResource'),
        searchResource?: {
          category?: string(name='category'),
          cpu?: int32(name='cpu'),
          disk?: int32(name='disk'),
          mem?: int32(name='mem'),
          nodeCount?: int32(name='nodeCount'),
        }(name='searchResource'),
      }(name='spec'),
      status?: string(name='status', description='The instance status.', example='2'),
      tags?: [ 
        {
          key?: string(name='key', description='The tag key.', example='env'),
          value?: string(name='value', description='The tag value.', example='oboms-disk'),
        }
      ](name='tags', description='The tags of the instance.'),
      updateTime?: string(name='updateTime', description='The time when the instance was updated.', example='2018-12-06T11:17:49.0'),
      userName?: string(name='userName'),
      version?: string(name='version'),
    }
  ](name='result', description='The results returned.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned', example='5'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * `GET`
  * ### [](#uri)URI
  * `/openapi/ha3/instances`
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model ListLogsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2roiy504', position='Path'),
  endTime?: string(name='endTime', description='The end tim. The value is a timestamp in seconds.', example='1710432000', position='Query'),
  pageNum?: string(name='pageNum', description='The number of entries per num. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='pageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  query?: string(name='query', description='The query statement', example='status: 200 AND totalTime > 0.01', position='Query'),
  startTime?: string(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1706340600', position='Query'),
  type?: string(name='type', description='-push   -select', example='push', position='Query'),
}

model ListLogsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: {
    result?: [ any ](name='result', description='The result.'),
    totalCount?: int32(name='totalCount', description='The total number of entries returned', example='5'),
  }(name='result', description='ListResult'),
}

model ListLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogs  ListLogsRequest
  * @return ListLogsResponse
 */
async function listLogs(request: ListLogsRequest): ListLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogs', 'GET', '/openapi/ha3/instances/{instanceId}/logs', 'json', false, 'json', request);
}

model ListModelsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-test', position='Path'),
  name?: string(name='name', example='test1', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  type?: string(name='type', example='text_embedding', position='Query'),
}

model ListModelsResponseBody = {
  requestId?: string(name='requestId', example='38b079f1-7846-4226-8c90-3e2644b5c52b'),
  result?: [ 
    {
      content?: {
        method?: string(name='method', example='POST'),
        modelName?: string(name='modelName', example='test'),
        modelType?: string(name='modelType', example='text_embedding'),
        request?: {
          header?: {
            authorization?: string(name='Authorization', example='Bearer OS-v0********6vvs'),
            contentType?: string(name='Content-Type', example='application/json'),
          }(name='header'),
          parameters?: {
            build?: {
              inputType?: string(name='input_type', example='query'),
            }(name='build'),
            search?: {
              inputType?: string(name='input_type', example='document'),
            }(name='search'),
          }(name='parameters'),
          requestBody?: string(name='requestBody', example='{\\"input\\": [\\"%{input}\\"], \\"input_type\\": \\"%{input_type}\\"}'),
          urlParams?: {
            build?: map[string]any(name='build', example='key: value'),
            search?: map[string]any(name='search', example='key: value'),
          }(name='urlParams'),
        }(name='request'),
        response?: {
          embeddings?: string(name='embeddings', example='$.result.embeddings[*].embedding'),
        }(name='response'),
        url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
      }(name='content'),
      createTime?: string(name='createTime', example='2024-05-21 16:05:26'),
      dimension?: int32(name='dimension', example='128'),
      name?: string(name='name', example='test'),
      status?: string(name='status', example='ok'),
      type?: string(name='type', example='text_embedding'),
      updateTime?: string(name='updateTime', example='2024-05-21 16:05:26'),
      url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount', example='14'),
}

model ListModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelsResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * 本API用于从指定实例中获取模型列表，支持通过模型名称、类型以及分页参数进行筛选。请求时需提供实例ID作为路径参数，其他筛选条件为可选的查询参数。
  * @param request  the request parameters of ListModels  ListModelsRequest
  * @return ListModelsResponse
 */
async function listModels(request: ListModelsRequest): ListModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModels', 'GET', '/openapi/ha3/instances/{instanceId}/models', 'json', false, 'json', request);
}

model ListOnlineConfigsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2s170b03', position='Path'),
  nodeName: string(name='nodeName', description='The name of the Query Result Searcher (QRS) worker.

This parameter is required.', example='ha-cn-2r42ostoc01_qrs', position='Path'),
  domain: string(name='domain', description='The name of the domain

This parameter is required.', example='sz_vpc_domain_1', position='Query'),
}

model ListOnlineConfigsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      config?: string(name='config', description='The configuration information', example='{\\"specItems\\":[{\\"specKey\\":\\"YQ_KEYWORD_NUMBER_PLUS\\",\\"value\\":\\"1\\"}]}'),
      indexName?: string(name='indexName', description='The name of the index', example='generation'),
    }
  ](name='result', description='List'),
}

model ListOnlineConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineConfigsResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs?domain={domain}
  * ```
  * @param request  the request parameters of ListOnlineConfigs  ListOnlineConfigsRequest
  * @return ListOnlineConfigsResponse
 */
async function listOnlineConfigs(request: ListOnlineConfigsRequest): ListOnlineConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs', 'json', false, 'json', request);
}

model ListPausePolicysRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2roiy504', position='Path'),
}

model ListPausePolicysResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]ResultValue(name='result', description='The result.'),
}

model ListPausePolicysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPausePolicysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPausePolicys  ListPausePolicysRequest
  * @return ListPausePolicysResponse
 */
async function listPausePolicys(request: ListPausePolicysRequest): ListPausePolicysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPausePolicys', 'GET', '/openapi/ha3/instances/{instanceId}/pause-policies', 'json', false, 'json', request);
}

model ListPostQueryResultRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ppr7901', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
  type?: string(name='type', description='The query type. Valid values: sql: SQL query. ha3: Havenask query.', example='ha3', position='Query'),
}

model ListPostQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ListPostQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPostQueryResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPostQueryResult  ListPostQueryResultRequest
  * @return ListPostQueryResultResponse
 */
async function listPostQueryResult(request: ListPostQueryResultRequest): ListPostQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPostQueryResult', 'POST', '/openapi/ha3/instances/{instanceId}/query', 'json', false, 'json', request);
}

model ListQueryResultRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2olkw201', position='Path'),
  query?: string(name='query', description='The query statement', example='query%3D1%26%26config%3Dstart%3A0%2Chit%3A10%2Cformat%3Ajson%26%26cluster%3Dgeneral', position='Query'),
  sql?: string(name='sql', description='The SQL statement that is executed in the query', example='query%3Dselect%20max(content_id)%20from%20generation', position='Query'),
}

model ListQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='9E5BCFAA-98B3-51D0-9188-B1BC07589337'),
}

model ListQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueryResultResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * `GET`
  * ### [](#uri)URI
  * `/openapi/ha3/instances/{instanceId}/query?query=xxxx`
  * @param request  the request parameters of ListQueryResult  ListQueryResultRequest
  * @return ListQueryResultResponse
 */
async function listQueryResult(request: ListQueryResultRequest): ListQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryResult', 'GET', '/openapi/ha3/instances/{instanceId}/query', 'json', false, 'json', request);
}

model ListRestQueryResultRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  indexName?: string(name='indexName', description='The name of the index table.', example='main_index', position='Body'),
  query?: map[string]any(name='query', description='The rest query statement.', example='query%3Drelation_id%3A%221151274675_2%22%26%26cluster%3Dgeneral%26%26config%3Dstart%3A0%2Chit%3A10%2Cformat%3Ajson', position='Body'),
}

model ListRestQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ListRestQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRestQueryResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRestQueryResult  ListRestQueryResultRequest
  * @return ListRestQueryResultResponse
 */
async function listRestQueryResult(request: ListRestQueryResultRequest): ListRestQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRestQueryResult', 'POST', '/openapi/ha3/instances/{instanceId}/rest-query', 'json', false, 'json', request);
}

model ListSchemasRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rq6610a', position='Path'),
  accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='ak', position='Query'),
  accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='as', position='Query'),
  endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api', position='Query'),
  namespace?: string(name='namespace', description='The namespace of the SARO data source.', example='igraph-cn-tl32wnrhi04', position='Query'),
  partition?: string(name='partition', description='The shard name.', example='dt=20230520', position='Query'),
  project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='start-flask-v3-obcc', position='Query'),
  table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='item', position='Query'),
  type: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.

This parameter is required.', example='odps', position='Query'),
}

model ListSchemasResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ListSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSchemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSchemas  ListSchemasRequest
  * @return ListSchemasResponse
 */
async function listSchemas(request: ListSchemasRequest): ListSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSchemas', 'GET', '/openapi/ha3/instances/{instanceId}/schemas', 'json', false, 'json', request);
}

model ListTableGenerationsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  tableName: string(name='tableName', description='The name of the table.

This parameter is required.', example='test_summary', position='Path'),
}

model ListTableGenerationsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: [ 
    {
      generationId?: long(name='generationId', description='The ID of the full index version.', example='1708674867'),
    }
  ](name='result', description='The result.'),
}

model ListTableGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableGenerationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTableGenerations  ListTableGenerationsRequest
  * @return ListTableGenerationsResponse
 */
async function listTableGenerations(request: ListTableGenerationsRequest): ListTableGenerationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableGenerations', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/index_versions', 'json', false, 'json', request);
}

model ListTablesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rewdi02', position='Path'),
  newMode?: boolean(name='newMode', description='Specifies whether the OpenSearch Vector Search Edition instance is of the new version.', example='true', position='Query'),
}

model ListTablesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      indexStatus?: string(name='indexStatus', description='The state of the index table. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, RESTORE_USE, and FAIL. After an index is created in an OpenSearch Retrieval Engine Edition instance, the index enters the IN_USE state. If the first full index fails to be created in an OpenSearch Vector Search Edition instance of the new version, the index is in the FAIL state.', example='IN_USE'),
      name?: string(name='name', description='The index name.', example='es_test_1b'),
      status?: string(name='status', description='The state of the index table. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, RESTORE_USE, and FAIL. After an index is created in an OpenSearch Retrieval Engine Edition instance, the index enters the IN_USE state. If the first full index fails to be created in an OpenSearch Vector Search Edition instance of the new version, the index is in the FAIL state.', example='IN_USE'),
    }
  ](name='result', description='The result.'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTables  ListTablesRequest
  * @return ListTablesResponse
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/openapi/ha3/instances/{instanceId}/tables', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='nextToken', example='600********33', position='Query'),
  resourceId?: [ string ](name='resourceId', shrink='json', position='Query'),
  resourceType: string(name='resourceType', description='This parameter is required.', example='instance', position='Query'),
  tag?: [ 
    {
      key?: string(name='key', example='opensearch'),
      value?: string(name='value', example='opensearch'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', example='b56*******de4a7eca'),
  requestId?: string(name='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', example='rmq-cn-jeo3mn55j01'),
      resourceType?: string(name='resourceType', example='instance'),
      tagKey?: string(name='tagKey', example='opensearch'),
      tagValue?: string(name='tagValue', example='opensearch'),
    }
  ](name='tagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/openapi/ha3/resource-tags', 'json', false, 'json', request);
}

model ListTasksRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  end?: long(name='end', description='The timestamp that indicates the end of the time range to query.', example='1690423741577', position='Query'),
  start?: long(name='start', description='The timestamp that indicates the beginning of the time range to query.', example='1687238865434', position='Query'),
}

model ListTasksResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTasks  ListTasksRequest
  * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/openapi/ha3/instances/{instanceId}/tasks', 'json', false, 'json', request);
}

model ListVectorQueryResultRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
  path?: string(name='path', position='Query'),
  queryType?: string(name='queryType', description='The query type. Valid values: vector, primary_key, and vector_text.', example='primary_key', position='Query'),
  vectorQueryType?: string(name='vectorQueryType', description='The vector query type. Valid values: vector, image, and text.', example='image', position='Query'),
}

model ListVectorQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ListVectorQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVectorQueryResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVectorQueryResult  ListVectorQueryResultRequest
  * @return ListVectorQueryResultResponse
 */
async function listVectorQueryResult(request: ListVectorQueryResultRequest): ListVectorQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVectorQueryResult', 'POST', '/openapi/ha3/instances/{instanceId}/vector-query', 'json', false, 'json', request);
}

model ModifyAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32m2c4u01', position='Path'),
  configName: string(name='configName', description='The name of the advanced configuration.

This parameter is required.', example='ha-cn-18qug6zlc1r_offline_adv_edit', position='Path'),
  content?: string(name='content', description='The content of the advanced configuration that is returned.', example='""', position='Body'),
  contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.', example='FILE', position='Body'),
  desc?: string(name='desc', description='The description of the advanced configuration.', example='test', position='Body'),
  files?: [ 
    {
      fullPathName?: string(name='fullPathName', description='The full path of the file.', example='/cluster.json'),
      isDir?: boolean(name='isDir', description='Specifies whether the file is a directory.', example='true'),
      isTemplate?: boolean(name='isTemplate', description='Specifies whether the file is a template.', example='true'),
      name?: string(name='name', description='The node name.', example='general'),
    }
  ](name='files', description='The files.', position='Body'),
  name?: string(name='name', description='The name of the advanced configuration.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  status?: string(name='status', description='The status of the advanced configuration. Valid values: drafting: The advanced configuration is in the draft state. used: The advanced configuration is being used. unused: The advanced configuration is not used. trash: The advanced configuration is being deleted.', example='used', position='Body'),
  updateTime?: long(name='updateTime', description='The time when the advanced configuration was updated.', example='2024-02-27T07:50:55Z', position='Body'),
}

model ModifyAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAdvanceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAdvanceConfig  ModifyAdvanceConfigRequest
  * @return ModifyAdvanceConfigResponse
 */
async function modifyAdvanceConfig(request: ModifyAdvanceConfigRequest): ModifyAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAdvanceConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model ModifyAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-zvp2ou1h801_online_config_edit', position='Path'),
  content?: string(name='content', description='The file content.', example='"ha3"', position='Body'),
  variables?: map[string]VariablesValue(name='variables', description='The variables.', position='Body'),
  fileName: string(name='fileName', description='The name of the file.

This parameter is required.', example='/qrs.json', position='Query'),
}

model ModifyAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAdvanceConfigFileResponseBody(name='body'),
}

/**
  * @description ## Method
  *     put
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
  * @param request  the request parameters of ModifyAdvanceConfigFile  ModifyAdvanceConfigFileRequest
  * @return ModifyAdvanceConfigFileResponse
 */
async function modifyAdvanceConfigFile(request: ModifyAdvanceConfigFileRequest): ModifyAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAdvanceConfigFile', 'PUT', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model ModifyAliasRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2re****', position='Path'),
  alias: string(name='alias', description='alias name

This parameter is required.', example='test', position='Path,Body'),
  index?: string(name='index', description='index name', example='index', position='Body'),
}

model ModifyAliasResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAlias  ModifyAliasRequest
  * @return ModifyAliasResponse
 */
async function modifyAlias(request: ModifyAliasRequest): ModifyAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAlias', 'PUT', '/openapi/ha3/instances/{instanceId}/aliases/{alias}', 'json', false, 'json', request);
}

model ModifyClusterDescRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-c4d2rq7nt04', position='Path'),
  clusterName: string(name='clusterName', description='The name of the cluster

This parameter is required.', example='sz_vpc_domain_1', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
}

model ModifyClusterDescResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyClusterDescResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterDescResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * `PUT`
  * ### [](#uri)URI
  * `/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc`
  * @param request  the request parameters of ModifyClusterDesc  ModifyClusterDescRequest
  * @return ModifyClusterDescResponse
 */
async function modifyClusterDesc(request: ModifyClusterDescRequest): ModifyClusterDescResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterDesc', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc', 'json', false, 'json', request);
}

model ModifyClusterOfflineConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2oy0bg01', position='Path'),
  buildMode?: string(name='buildMode', description='The reindexing method. Valid values: api: API data source. indexRecover: data recovery by using indexing.', example='indexRecover', position='Body'),
  config?: map[string]int32(name='config', description='The configuration name, which is stored as a key.', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source. Valid values: odps: MaxCompute. swift: Swift. unKnow: unknown type.', example='maxComputer', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='This parameter is required when index building by using API data sources is triggered.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  generation?: long(name='generation', description='The ID of the full index version.', example='160142641', position='Body'),
  partition?: string(name='partition', description='This parameter is required when index building for full data in a MaxCompute data source is triggered.', example='20211202', position='Body'),
  pushMode?: string(name='pushMode', description='The push mode of the configuration. By default, only the configuration is pushed.', example='PUSH_ONLY', position='Body'),
}

model ModifyClusterOfflineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyClusterOfflineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOfflineConfigResponseBody(name='body'),
}

/**
  * @description ## Request syntax
  *     PUT /openapi/ha3/instances/{instanceId}/cluster-offline-config
  * @param request  the request parameters of ModifyClusterOfflineConfig  ModifyClusterOfflineConfigRequest
  * @return ModifyClusterOfflineConfigResponse
 */
async function modifyClusterOfflineConfig(request: ModifyClusterOfflineConfigRequest): ModifyClusterOfflineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOfflineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-offline-config', 'json', false, 'json', request);
}

model ModifyClusterOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2ougaw02', position='Path'),
  clusters?: [ string ](name='clusters', description='The cluster information.', position='Body'),
  config?: map[string]int32(name='config', description='The configuration information.', position='Body'),
}

model ModifyClusterOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOnlineConfigResponseBody(name='body'),
}

/**
  * @description ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/cluster-online-config`
  * @param request  the request parameters of ModifyClusterOnlineConfig  ModifyClusterOnlineConfigRequest
  * @return ModifyClusterOnlineConfigResponse
 */
async function modifyClusterOnlineConfig(request: ModifyClusterOnlineConfigRequest): ModifyClusterOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-online-config', 'json', false, 'json', request);
}

model ModifyDataSourceDeployRequest {
  instanceId: string(name='instanceId', description='The cluster ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  deployName: string(name='deployName', description='The name of the data center.

This parameter is required.', example='vpc_hz_domain_1', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
  autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to enable the automatic full indexing feature.', example='true', position='Body'),
  extend?: {
    hdfs?: {
      path?: string(name='path', description='The path of the Apsara File Storage for HDFS data source.', example='ymsh-service/src/main/java/cn/ymsh/util/jd'),
    }(name='hdfs', description='The information about the Apsara File Storage for HDFS data source.'),
    odps?: {
      partitions?: map[string]string(name='partitions', description='The partitions in the MaxCompute table.'),
    }(name='odps', description='The information about the MaxCompute data source.'),
    oss?: {
      path?: string(name='path', description='The path of the OSS data source.', example='oss://test'),
    }(name='oss', description='The information about the OSS data source.'),
    saro?: {
      path?: string(name='path', description='The path of the SARO data source.', example='/'),
      version?: string(name='version', description='The version number of the SARO data source.', example='1'),
    }(name='saro', description='The information about the SARO data source. This parameter is applicable to the SARO data source used in the intranet of Alibaba Group.'),
  }(name='extend', description='The extended information.', position='Body'),
  processor?: {
    args?: string(name='args', description='The startup parameters of the process.', example='{}'),
    resource?: string(name='resource', description='The resource information.', example='{}'),
  }(name='processor', description='The parameters of the process.', position='Body'),
  storage?: {
    accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='ak'),
    accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='as'),
    bucket?: string(name='bucket', description='The name of the OSS bucket.', example='test-bucket'),
    catalog?: string(name='catalog'),
    database?: string(name='database'),
    endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    namespace?: string(name='namespace', description='The namespace. This parameter is applicable to the SARO data source used in the intranet of Alibaba Group.', example='dp-dev'),
    ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='/opensearch'),
    partition?: string(name='partition', description='The partition in the MaxCompute table.', example='ds=20220713'),
    path?: string(name='path', description='The file path in the Apsara File Storage for HDFS file system.', example='/ude_jobs/iflow_offline_data_access'),
    project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='kubenest'),
    table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='item'),
    tableFormat?: string(name='tableFormat'),
    tag?: string(name='tag'),
  }(name='storage', description='The information about the data source.', position='Body'),
  swift?: {
    topic?: string(name='topic', description='The topic.', example='ha-cn-0ju2rps6c08_api'),
    zk?: string(name='zk', description='zk', example='zk'),
  }(name='swift', description='The information about the incremental data source Swift.', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform only a dry run, without performing the actual request. The system only checks the validity of the data source. Valid values: true and false.', example='true', position='Query'),
  generationId?: long(name='generationId', description='The ID of the full index version.', example='1708674867', position='Query'),
}

model ModifyDataSourceDeployResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyDataSourceDeployResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDataSourceDeployResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDataSourceDeploy  ModifyDataSourceDeployRequest
  * @return ModifyDataSourceDeployResponse
 */
async function modifyDataSourceDeploy(request: ModifyDataSourceDeployRequest): ModifyDataSourceDeployResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDataSourceDeploy', 'PUT', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}', 'json', false, 'json', request);
}

model ModifyFileRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-i7m2ne76e02', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='automobile_vector', position='Path'),
  versionName: string(name='versionName', description='The version name.

This parameter is required.', example='ha-cn-tl32m2c4u01@ha-cn-tl32m2c4u01_00@bj_vpc_domain_1@automobile_vector@index_config_edit', position='Path'),
  content?: string(name='content', description='The file content.', example='""', position='Body'),
  partition?: int32(name='partition', description='The number of shards.', example='ds=20220713', position='Body'),
  fileName: string(name='fileName', description='The name of the file in the full path

This parameter is required.', example='/schemas/generation_schema.json', position='Query'),
}

model ModifyFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFileResponseBody(name='body'),
}

/**
  * @description ## Method
  *     PUT
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
  * @param request  the request parameters of ModifyFile  ModifyFileRequest
  * @return ModifyFileResponse
 */
async function modifyFile(request: ModifyFileRequest): ModifyFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFile', 'PUT', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model ModifyIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rq6610a', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='test_api', position='Path'),
  buildParallelNum?: int32(name='buildParallelNum', description='The maximum number of full indexes that can be concurrently built.', example='2', position='Body'),
  cluster?: map[string]map[string]any(name='cluster', description='The cluster information.', position='Body'),
  clusterConfigName?: string(name='clusterConfigName', description='The name of the configuration file.', example='ha-cn-35t3r02iq03@ha-cn-35t3r02iq03_test_api@hz_pre_vpc_domain_1@test_api@index_config_v1', position='Body'),
  config?: map[string]ConfigValue(name='config', description='The information about the offline configuration.', position='Body'),
  content?: string(name='content', description='The file content.', example='{\\"summarys\\":{\\"summary_fields\\":[\\"id\\"]},\\"indexs\\":[{\\"index_name\\":\\"index_id\\",\\"index_type\\":\\"PRIMARYKEY64\\",\\"index_fields\\":\\"id\\",\\"has_primary_key_attribute\\":true,\\"is_primary_key_sorted\\":false}],\\"attributes\\":[\\"id\\"],\\"fields\\":[{\\"field_name\\":\\"id\\",\\"field_type\\":\\"UINT16\\"}],\\"table_name\\":\\"index_2\\"}', position='Body'),
  dataSource?: string(name='dataSource', description='The name of the data source.', example='ha-cn-35t3n1yuj0d_index_1', position='Body'),
  dataSourceInfo?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to enable the automatic full indexing feature.', example='true'),
    buildMode?: string(name='buildMode', description='The reindexing method. Valid values: api: API data source. indexRecover: data recovery by using indexing.', example='api'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
      bucket?: string(name='bucket', description='The name of the OSS bucket.', example='test-bucket'),
      catalog?: string(name='catalog'),
      database?: string(name='database'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      format?: string(name='format'),
      namespace?: string(name='namespace', description='The namespace. This parameter is applicable to the SARO data source used in the intranet of Alibaba Group.', example='test-namespace'),
      ossPath?: string(name='ossPath', description='The Object Storage Service (OSS) path.', example='/opensearch/oss.json'),
      partition?: string(name='partition', description='The partition in the MaxCompute table. Example: ds=20180102.', example='ds=20230114'),
      path?: string(name='path', description='The file path in the Apsara File Storage for HDFS file system.', example='test-hdfs-path'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='bbt_algo_pai'),
      table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='item'),
      tableFormat?: string(name='tableFormat'),
      tag?: string(name='tag'),
    }(name='config', description='The configurations of the MaxCompute data source.'),
    dataTimeSec?: int32(name='dataTimeSec', description='The start timestamp from which incremental data is retrieved.', example='1709715164'),
    domain?: string(name='domain', description='The offline deployment name of the data source.', example='vpc_hz_domain_1'),
    generation?: long(name='generation', description='The ID of the index version from which data is restored.', example='4'),
    name?: string(name='name', description='The name of the data source.', example='ha-cn-35t3n1yuj0d_index_1'),
    ossDataPath?: string(name='ossDataPath'),
    partition?: string(name='partition'),
    processParallelNum?: int32(name='processParallelNum', description='The maximum number of full indexes that can be concurrently processed.', example='2'),
    processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='4'),
    saroConfig?: {
      namespace?: string(name='namespace', description='The namespace to which the SARO data source belongs.', example='flink-test-fjx-default'),
      tableName?: string(name='tableName', description='The name of the SARO table.', example='device_event_shy_summary_'),
    }(name='saroConfig', description='The configurations of the SARO data source.'),
    type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.', example='odps'),
  }(name='dataSourceInfo', description='The information about the data source, which is required for the new version of OpenSearch Vector Search Edition.', position='Body'),
  description?: string(name='description', description='The description of the data source.', example='test', position='Body'),
  domain?: string(name='domain', description='The name of the data center in which the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  extend?: map[string]any(name='extend', position='Body'),
  mergeParallelNum?: int32(name='mergeParallelNum', description='The maximum number of full indexes that can be concurrently merged.', example='2', position='Body'),
  partition?: int32(name='partition', description='The number of shards.', example='2', position='Body'),
  pushMode?: string(name='pushMode', description='The push mode of the configuration. By default, only the configuration is pushed.', example='PUSH_ONLY', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to check the validity of input parameters. Default value: false.

Valid values:

*   **true**: checks only the validity of input parameters.
*   **false**: checks the validity of input parameters and creates an attribution configuration.', example='true', position='Query'),
}

model ModifyIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: any(name='result', description='The result.', example='{}'),
}

model ModifyIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIndex  ModifyIndexRequest
  * @return ModifyIndexResponse
 */
async function modifyIndex(request: ModifyIndexRequest): ModifyIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndex', 'PUT', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model ModifyIndexOnlineStrategyRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
  deployName: string(name='deployName', description='The name of the data center in which the data source is deployed.

This parameter is required.', example='vpc_hz_domain_1', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='test_tusou_v2', position='Path'),
  changeRate?: int32(name='changeRate', description='The index change rate.', example='20', position='Body'),
}

model ModifyIndexOnlineStrategyResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyIndexOnlineStrategyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexOnlineStrategyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIndexOnlineStrategy  ModifyIndexOnlineStrategyRequest
  * @return ModifyIndexOnlineStrategyResponse
 */
async function modifyIndexOnlineStrategy(request: ModifyIndexOnlineStrategyRequest): ModifyIndexOnlineStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexOnlineStrategy', 'PUT', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}/indexes/{indexName}/online-strategy', 'json', false, 'json', request);
}

model ModifyIndexPartitionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1', position='Body'),
  domainName?: string(name='domainName', description='The data center.', example='pre_domain_1', position='Body'),
  generation?: long(name='generation', description='The primary key.', example='1633293829', position='Body'),
  indexInfos?: [ 
    {
      indexName?: string(name='indexName', description='The index name.', example='atest2'),
      parallelNum?: int32(name='parallelNum', description='The concurrency. Default value: 1.', example='1'),
      partitionCount?: int32(name='partitionCount', description='The number of shards.', example='3'),
    }
  ](name='indexInfos', description='The index information.', position='Body'),
}

model ModifyIndexPartitionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='Map', example='[]'),
}

model ModifyIndexPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexPartitionResponseBody(name='body'),
}

/**
  * @description ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/index-partition`
  * @param request  the request parameters of ModifyIndexPartition  ModifyIndexPartitionRequest
  * @return ModifyIndexPartitionResponse
 */
async function modifyIndexPartition(request: ModifyIndexPartitionRequest): ModifyIndexPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexPartition', 'PUT', '/openapi/ha3/instances/{instanceId}/index-partition', 'json', false, 'json', request);
}

model ModifyIndexVersionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2j2off06', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_hz_domain_2', position='Path'),
  body?: [ 
    {
      buildDeployId?: string(name='buildDeployId', description='The deployment ID of the data source.', example='277'),
      indexName?: string(name='indexName', description='The index name.', example='main_index'),
      version?: string(name='version', description='The index version.', example='1'),
    }
  ](name='body', description='The request body.', example='{}', position='Body'),
}

model ModifyIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='result', example='{}'),
}

model ModifyIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexVersionResponseBody(name='body'),
}

/**
  * @description ## [](#)Method
  *     PUT
  * ## [](#uri)URI
  *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
  * @param request  the request parameters of ModifyIndexVersion  ModifyIndexVersionRequest
  * @return ModifyIndexVersionResponse
 */
async function modifyIndexVersion(request: ModifyIndexVersionRequest): ModifyIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexVersion', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model ModifyModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  modelName: string(name='modelName', description='This parameter is required.', example='test', position='Path'),
  content?: {
    dimension?: int32(name='dimension', example='128'),
    method?: string(name='method', example='POST'),
    modelType?: string(name='modelType', example='text_embedding'),
    request?: {
      header?: {
        authorization?: string(name='Authorization', example='Bearer OS-v0********6vvs'),
        contentType?: string(name='Content-Type', example='application/json'),
      }(name='header'),
      parameters?: {
        build?: {
          inputType?: string(name='input_type', example='query'),
        }(name='build'),
        search?: {
          inputType?: string(name='input_type', example='document'),
        }(name='search'),
      }(name='parameters'),
      requestBody?: string(name='requestBody', example='{\\"input\\": [\\"%{input}\\"], \\"input_type\\": \\"%{input_type}\\"}'),
      urlParams?: {
        build?: map[string]any(name='build', example='key: value'),
        search?: map[string]any(name='search', example='key: value'),
      }(name='urlParams'),
    }(name='request'),
    response?: {
      embeddings?: string(name='embeddings', example='$.result.embeddings[*].embedding'),
    }(name='response'),
    url?: string(name='url', example='http://***.platform-cn-shanghai.opensearch.aliyuncs.com/v3/openapi/workspaces/default/text-embedding/ops-text-embedding-001'),
  }(name='content', position='Body'),
  status?: string(name='status', example='ok', position='Body'),
  dryRun?: string(name='dryRun', example='true', position='Query'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
}

model ModifyModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyModel  ModifyModelRequest
  * @return ModifyModelResponse
 */
async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyModel', 'PUT', '/openapi/ha3/instances/{instanceId}/models/{modelName}', 'json', false, 'json', request);
}

model ModifyNodeConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42p5oi202', position='Path'),
  active?: boolean(name='active', description='Specifies whether to enable the index.', example='true', position='Body'),
  dataDuplicateNumber?: int32(name='dataDuplicateNumber', description='The number of data replicas.', example='1', position='Body'),
  dataFragmentNumber?: int32(name='dataFragmentNumber', description='The number of data shards.', example='1', position='Body'),
  flowRatio?: int32(name='flowRatio', description='The traffic percentage.', example='-100', position='Body'),
  minServicePercent?: int32(name='minServicePercent', description='The minimum service ratio.', example='10', position='Body'),
  published?: boolean(name='published', description='Specifies whether to mount the cluster.', example='true', position='Body'),
  clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_sh_domain_2', position='Query'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source. Valid values: -search: search for data. -not_search: do not search for data.', example='ha-cn-2r42ostoc01_0704', position='Query'),
  name: string(name='name', description='The name of the configuration before the modification.

This parameter is required.', example='ha-cn-zvp2iv9a401_qrs', position='Query'),
  type: string(name='type', description='The type of the algorithm. Valid values:

*   pop: a popularity model.
*   cp: a category prediction model.
*   hot: a top search model.
*   hint: a hint model.
*   suggest: a drop-down suggestions model.

This parameter is required.', example='" "', position='Query'),
}

model ModifyNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeConfigResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * PUT
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node-config?type=qrs&name=test
  * ```
  * @param request  the request parameters of ModifyNodeConfig  ModifyNodeConfigRequest
  * @return ModifyNodeConfigResponse
 */
async function modifyNodeConfig(request: ModifyNodeConfigRequest): ModifyNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model ModifyOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2ougaw02', position='Path'),
  nodeName: string(name='nodeName', description='The node name.

This parameter is required.', example='general', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='adsfasd', position='Path'),
  body?: map[string]string(name='body', description='The request body.', position='Body'),
}

model ModifyOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOnlineConfigResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * put
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}
  * ```
  * @param request  the request parameters of ModifyOnlineConfig  ModifyOnlineConfigRequest
  * @return ModifyOnlineConfigResponse
 */
async function modifyOnlineConfig(request: ModifyOnlineConfigRequest): ModifyOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}', 'json', false, 'json', request);
}

model ModifyPasswordRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7pp2pcna701', position='Path'),
  password?: string(name='password', description='The password.', example='******************************', position='Body'),
  username?: string(name='username', description='The username.', example='"username"', position='Body'),
}

model ModifyPasswordResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPasswordResponseBody(name='body'),
}

/**
  * @description ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/password`
  * @param request  the request parameters of ModifyPassword  ModifyPasswordRequest
  * @return ModifyPasswordResponse
 */
async function modifyPassword(request: ModifyPasswordRequest): ModifyPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPassword', 'PUT', '/openapi/ha3/instances/{instanceId}/password', 'json', false, 'json', request);
}

model ModifyPausePolicyRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-zvp2jlr2g03', position='Path'),
  body?: map[string]BodyValue(name='body', description='The request body.', position='Body'),
}

model ModifyPausePolicyResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='0B1FF998-BB8D-5182-BFC0-E471AA77095A'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyPausePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPausePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPausePolicy  ModifyPausePolicyRequest
  * @return ModifyPausePolicyResponse
 */
async function modifyPausePolicy(request: ModifyPausePolicyRequest): ModifyPausePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPausePolicy', 'PUT', '/openapi/ha3/instances/{instanceId}/pause-policies', 'json', false, 'json', request);
}

model ModifyPublicUrlIpListRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rq6610a', position='Path'),
  body?: map[string]string(name='body', description='The request body.', position='Body'),
}

model ModifyPublicUrlIpListResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyPublicUrlIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPublicUrlIpListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPublicUrlIpList  ModifyPublicUrlIpListRequest
  * @return ModifyPublicUrlIpListResponse
 */
async function modifyPublicUrlIpList(request: ModifyPublicUrlIpListRequest): ModifyPublicUrlIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPublicUrlIpList', 'PUT', '/openapi/ha3/instances/{instanceId}/public-url-ip-list', 'json', false, 'json', request);
}

model ModifySearcherReplicaRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-test', position='Path'),
  partition?: int32(name='partition', example='2', position='Body'),
  replica?: int32(name='replica', example='2', position='Body'),
}

model ModifySearcherReplicaResponseBody = {
  requestId?: string(name='requestId', example='e1eef569-1ff7-4bf8-acf7-1cecca9894ce'),
  result?: map[string]any(name='result'),
}

model ModifySearcherReplicaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySearcherReplicaResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * 本API允许用户修改特定实例下的数据节点副本数或分片数。请求时，需提供实例ID，并在请求体中指定要修改的`replica`（副本数）或`partition`（分片数）。请注意，这两个参数都是可选的，但至少需要提供其中一个以执行更新操作。
  * @param request  the request parameters of ModifySearcherReplica  ModifySearcherReplicaRequest
  * @return ModifySearcherReplicaResponse
 */
async function modifySearcherReplica(request: ModifySearcherReplicaRequest): ModifySearcherReplicaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifySearcherReplica', 'PUT', '/openapi/ha3/instances/{instanceId}/replica', 'json', false, 'json', request);
}

model ModifyTableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32n3iu801', position='Path'),
  tableName: string(name='tableName', description='The name of the table.

This parameter is required.', example='index_hdfs', position='Path'),
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', description='The destination field.', example='source_image_vector'),
      operator?: string(name='operator', description='The method used to process the field. Valid values: copy and vectorize. A value of copy specifies that the value of the source field is copied to the destination field. A value of vectorize specifies that the value of the source field is vectorized by a vectorization model and the output vector is stored in the destination field.', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', description='The name of the OSS bucket.', example='test'),
          ossEndpoint?: string(name='ossEndpoint', description='The OSS endpoint.', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', description='The ID of the Alibaba Cloud account.', example='uid'),
        }(name='srcFieldConfig', description='The source of the data to be vectorized.'),
        vectorModal?: string(name='vectorModal', description='The data type.', example='image'),
        vectorModel?: string(name='vectorModel', description='The vectorization model.', example='clip'),
      }(name='params', description='The information about the model.'),
      srcField?: string(name='srcField', description='The source field.', example='source_image'),
    }
  ](name='dataProcessConfig', description='The configurations about field processing.', position='Body'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to automatically rebuild the index.', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='AK'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='AS'),
      bucket?: string(name='bucket', description='The name of the OSS bucket.', example='antsys-shujiang-osstest'),
      catalog?: string(name='catalog'),
      database?: string(name='database'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute data source.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', description='The path of the Object Storage Service (OSS) object.', example='oss://opensearch'),
      partition?: string(name='partition', description='The partition in the MaxCompute table.', example='ds=20231220'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='yw_dw_rpt'),
      table?: string(name='table', description='The name of the MaxCompute table that is used as the data source.', example='behavior'),
      tableFormat?: string(name='tableFormat'),
      tag?: string(name='tag'),
    }(name='config', description='The configurations of the data source.'),
    dataTimeSec?: int32(name='dataTimeSec', description='The start timestamp from which incremental data is retrieved.', example='1715160176'),
  }(name='dataSource', description='The configurations of the data source.', position='Body'),
  fieldSchema?: map[string]string(name='fieldSchema', description='The fields.', position='Body'),
  partitionCount?: int32(name='partitionCount', description='The number of data shards.', example='1', position='Body'),
  primaryKey?: string(name='primaryKey', description='The primary key field.', example='id', position='Body'),
  rawSchema?: string(name='rawSchema', description='The instance schema. If this parameter is specified, the parameters about the index are not required.', example='{}', position='Body'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', description='The index building parameters.', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', description='The threshold for linear building.', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', description='The minimum number of retrieved candidate sets.', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', description='The index retrieval parameters.', example='{}'),
      }(name='advanceParams', description='The configurations of the index schema.'),
      dimension?: string(name='dimension', description='The dimension of the vector.', example='128'),
      distanceType?: string(name='distanceType', description='The distance type.', example='SquaredEuclidean'),
      indexName?: string(name='indexName', description='The name of the index schema.', example='test_api'),
      namespace?: string(name='namespace', description='The namespace field.', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', description='The field that stores the indexes of the elements in sparse vectors.', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', description='The field that stores the elements in sparse vectors.', example='sparse_values'),
      vectorField?: string(name='vectorField', description='The vector field.', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', description='The vector retrieval algorithm.', example='Qc'),
    }
  ](name='vectorIndex', description='The index schema.', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform only a dry run, without performing the actual request. The system only checks the validity of the data source. Valid values:

*   true
*   false', example='true', position='Query'),
}

model ModifyTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTable  ModifyTableRequest
  * @return ModifyTableResponse
 */
async function modifyTable(request: ModifyTableRequest): ModifyTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyTable', 'PUT', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model PublishAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7e22rof5304', position='Path'),
  configName: string(name='configName', description='The configuration name.

This parameter is required.', example='ha-cn-0ju2rrogr01_online_config_v3', position='Path'),
  desc?: string(name='desc', description='The description of the advanced configuration.', example='Custom configuration', position='Body'),
  files?: [ 
    {
      config?: {
        content?: string(name='content', description='The file content.', example='{\\"url\\":\\"http://xxxxxx.aliyuncs.com/outnet_hz/packages/xxxxx/opensearch_offline_plugins_xxxxx.tar\\"}'),
        variables?: map[string]FilesConfigVariablesValue(name='variables', description='The variables.'),
      }(name='config', description='The information about the advanced configuration.'),
      dirName?: string(name='dirName', description='The directory name.', example='/clusters'),
      fileName?: string(name='fileName', description='The file name.', example='vector_question_schema.json'),
      operateType?: string(name='operateType', description='The operation type. Valid values: UPDATE and DELETE. Default value: UPDATE.', example='UPDATE'),
      ossPath?: string(name='ossPath', description='The path of the Object Storage Service (OSS) object.', example='oss://opensearch/test.json'),
      parentFullPath?: string(name='parentFullPath', description='The path of the parent directory.', example='/'),
    }
  ](name='files', description='The files.', position='Body'),
}

model PublishAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model PublishAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishAdvanceConfigResponseBody(name='body'),
}

/**
  * @description ## Method
  * ~~~
  * POST
  * ~~~
  * ## URI
  * ~~~
  * /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish
  * ~~~
  * @param request  the request parameters of PublishAdvanceConfig  PublishAdvanceConfigRequest
  * @return PublishAdvanceConfigResponse
 */
async function publishAdvanceConfig(request: PublishAdvanceConfigRequest): PublishAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishAdvanceConfig', 'POST', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish', 'json', false, 'json', request);
}

model PublishIndexVersionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-tl32m2c4u01', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='automobile_2d', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
}

model PublishIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model PublishIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishIndexVersionResponseBody(name='body'),
}

/**
  * @description ## Method
  *     POST
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish
  * @param request  the request parameters of PublishIndexVersion  PublishIndexVersionRequest
  * @return PublishIndexVersionResponse
 */
async function publishIndexVersion(request: PublishIndexVersionRequest): PublishIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishIndexVersion', 'POST', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish', 'json', false, 'json', request);
}

model PushDocumentsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2iv7sq01', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.

This parameter is required.', example='ha-cn-2r42ostoc01_ecom_table_test', position='Path'),
  body?: [ any ](name='body', description='The request body.', position='Body'),
  pkField?: string(name='pkField', description='The primary key field.', example='id', position='Query'),
}

model PushDocumentsResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model PushDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushDocuments  PushDocumentsRequest
  * @return PushDocumentsResponse
 */
async function pushDocuments(request: PushDocumentsRequest): PushDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushDocuments', 'POST', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/actions/bulk', 'json', false, 'json', request);
}

model RecoverIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-zvp2jlr2g03', position='Path'),
  buildDeployId?: int32(name='buildDeployId', description='The deployment ID of the data source.', example='277', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='ha-cn-pl32rf0js04_odps_first', position='Body'),
  generation?: string(name='generation', description='The ID of the full index version.', example='1653018575', position='Body'),
  indexName?: string(name='indexName', description='The index name.', example='main_index', position='Body'),
}

model RecoverIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned by data search.', example='{}'),
}

model RecoverIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverIndexResponseBody(name='body'),
}

/**
  * @description ### Method
  * `POST`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/recover-index`
  * @param request  the request parameters of RecoverIndex  RecoverIndexRequest
  * @return RecoverIndexResponse
 */
async function recoverIndex(request: RecoverIndexRequest): RecoverIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverIndex', 'POST', '/openapi/ha3/instances/{instanceId}/recover-index', 'json', false, 'json', request);
}

model ReindexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-2r42ppr7901', position='Path'),
  tableName: string(name='tableName', description='The name of the table.

This parameter is required.', example='test_summary', position='Path'),
  dataTimeSec?: int32(name='dataTimeSec', description='The timestamp in seconds. The value must be of the INTEGER type. This parameter is required if you specify an API data source.', example='1640867288', position='Body'),
  ossDataPath?: string(name='ossDataPath', description='oss data path', example='oss://opensearch', position='Body'),
  partition?: string(name='partition', description='The partition in the MaxCompute table. This parameter is required if type is set to odps.', example='ds=20220713', position='Body'),
}

model ReindexResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ReindexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReindexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Reindex  ReindexRequest
  * @return ReindexResponse
 */
async function reindex(request: ReindexRequest): ReindexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Reindex', 'POST', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/reindex', 'json', false, 'json', request);
}

model RemoveClusterRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2iv7sq01', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='bj_vpc_domain_2', position='Path'),
}

model RemoveClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model RemoveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveClusterResponseBody(name='body'),
}

/**
  * @description ### Method
  * ```java
  * DELETE
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/clusters/{clusterName}
  * ```
  * @param request  the request parameters of RemoveCluster  RemoveClusterRequest
  * @return RemoveClusterResponse
 */
async function removeCluster(request: RemoveClusterRequest): RemoveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveCluster', 'DELETE', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model RenameFolderRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  folderId: long(name='folderId', description='This parameter is required.', example='-1', position='Path'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
}

model RenameFolderResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    id?: long(name='id', example='1'),
    instanceId?: long(name='instanceId', example='1'),
    isDir?: int32(name='isDir', example='True'),
    name?: string(name='name', example='test'),
    parent?: long(name='parent', example='-1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='template'),
  }(name='result', description='NodeVO'),
}

model RenameFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFolderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameFolder  RenameFolderRequest
  * @return RenameFolderResponse
 */
async function renameFolder(request: RenameFolderRequest): RenameFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenameFolder', 'PUT', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/folders/{folderId}/name', 'json', false, 'json', request);
}

model StartIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7e22rgfyb01', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='table_se_index', position='Path'),
}

model StartIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='The index map.', example='{}'),
}

model StartIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartIndex  StartIndexRequest
  * @return StartIndexResponse
 */
async function startIndex(request: StartIndexRequest): StartIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartIndex', 'POST', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/startIndex', 'json', false, 'json', request);
}

model StopIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-0ju2rps6c08', position='Path'),
  indexName: string(name='indexName', description='The index name.

This parameter is required.', example='test_api', position='Path'),
}

model StopIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The index map.', example='{}'),
}

model StopIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopIndex  StopIndexRequest
  * @return StopIndexResponse
 */
async function stopIndex(request: StopIndexRequest): StopIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopIndex', 'POST', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/stopIndex', 'json', false, 'json', request);
}

model StopTaskRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='ha-cn-7mz2nx41h01', position='Path'),
  fsmId: string(name='fsmId', description='The ID of the finite state machine (FSM).

This parameter is required.', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-0ju2rrogr01_test_api_2@sz_vpc_domain_1@null@MANUAL-ha-cn-0ju2rrogr01_test_api_2@1657511220772@165343', position='Path'),
}

model StopTaskResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model StopTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskResponseBody(name='body'),
}

/**
  * @description ### [](#)Method
  * ```java
  * PUT
  * ```
  * ### [](#uri)URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/stop-task/{fsmId}
  * ```
  * @param request  the request parameters of StopTask  StopTaskRequest
  * @return StopTaskResponse
 */
async function stopTask(request: StopTaskRequest): StopTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTask', 'PUT', '/openapi/ha3/instances/{instanceId}/stop-task/{fsmId}', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='resourceId', description='This parameter is required.', position='Body'),
  resourceType: string(name='resourceType', description='This parameter is required.', example='instance', position='Body'),
  tag: [ 
    {
      key?: string(name='key', example='opensearch'),
      value?: string(name='value', example='opensearch'),
    }
  ](name='tag', description='This parameter is required.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/openapi/ha3/resource-tags', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='true', position='Query'),
  resourceId: [ string ](name='resourceId', description='This parameter is required.', shrink='json', position='Query'),
  resourceType: string(name='resourceType', description='This parameter is required.', example='instance', position='Query'),
  tagKey?: [ string ](name='tagKey', shrink='json', position='Query'),
}

model UntagResourcesResponseBody = {
  tequestId?: string(name='tequestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'DELETE', '/openapi/ha3/resource-tags', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-2r42mu9xi01', position='Path'),
  components?: [ 
    {
      code?: string(name='code', description='The code of the specification, which must be consistent with the value that you specify on the buy page.', example='200'),
      value?: string(name='value', description='The value of the specification.', example='""'),
    }
  ](name='components', description='The information about the instance specification.', position='Body'),
  description?: string(name='description', description='The description of the instance.', example='""', position='Body'),
  orderType?: string(name='orderType', description='The type of the order. Valid values: UPGRADE and DOWNGRADE. UPGRADE upgrades the instance specifications. DOWNGRADE: downgrades the instance specifications.', example='""', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method.', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the instance.', example='ha3-code'),
    createTime?: string(name='createTime', description='The time when the instance was created', example='2018-12-06T11:17:49.0'),
    description?: string(name='description', description='The description of the instance', example='Test instance'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires', example='2019-01-06T16:00:00.0'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved', example='false'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='ha-cn-0ju2s170b03'),
    lockMode?: string(name='lockMode', description='The lock status', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aeky6hthboewpuy'),
    status?: string(name='status', description='The instance status.', example='Running'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
  }(name='result', description='The results returned.'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @description ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model UpdateSqlInstanceContentRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='5975', position='Path'),
  content: string(name='content', description='This parameter is required.', example='select * from test', position='Body'),
}

model UpdateSqlInstanceContentResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    combineParams?: string(name='combineParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    comment?: string(name='comment'),
    content?: string(name='content', example='select * from test'),
    dynamicParams?: string(name='dynamicParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    instanceId?: long(name='instanceId', example='1'),
    kvpairs?: string(name='kvpairs', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    relatedTemplateId?: long(name='relatedTemplateId', example='1'),
    staticParams?: string(name='staticParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    templateParams?: string(name='templateParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    version?: long(name='version', example='1'),
  }(name='result', description='InstanceVersionVO'),
}

model UpdateSqlInstanceContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSqlInstanceContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSqlInstanceContent  UpdateSqlInstanceContentRequest
  * @return UpdateSqlInstanceContentResponse
 */
async function updateSqlInstanceContent(request: UpdateSqlInstanceContentRequest): UpdateSqlInstanceContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSqlInstanceContent', 'PUT', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}/content', 'json', false, 'json', request);
}

model UpdateSqlInstanceNameRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='1', position='Path'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
}

model UpdateSqlInstanceNameResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='1719220182844'),
    gmtModified?: string(name='gmtModified', example='1719221186114'),
    id?: long(name='id', example='22'),
    instanceId?: long(name='instanceId', example='1'),
    isDir?: int32(name='isDir', example='true'),
    name?: string(name='name', example='general'),
    parent?: long(name='parent', example='-1'),
    templateId?: long(name='templateId', example='1'),
    type?: string(name='type', description='table, instance, template, function', example='instance'),
  }(name='result', description='NodeVO'),
}

model UpdateSqlInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSqlInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSqlInstanceName  UpdateSqlInstanceNameRequest
  * @return UpdateSqlInstanceNameResponse
 */
async function updateSqlInstanceName(request: UpdateSqlInstanceNameRequest): UpdateSqlInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSqlInstanceName', 'PUT', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}/name', 'json', false, 'json', request);
}

model UpdateSqlInstanceParamsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='ha-cn-pl32rf0****', position='Path'),
  database: string(name='database', description='This parameter is required.', example='general', position='Path'),
  sqlInstanceId: long(name='sqlInstanceId', description='This parameter is required.', example='1', position='Path'),
  combineParam?: map[string]any(name='combineParam', position='Body'),
  dynamicParam?: map[string]any(name='dynamicParam', position='Body'),
  kvpair?: map[string]any(name='kvpair', position='Body'),
  params?: map[string]any(name='params', position='Body'),
  staticParam?: map[string]any(name='staticParam', position='Body'),
}

model UpdateSqlInstanceParamsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: {
    combineParams?: string(name='combineParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    comment?: string(name='comment'),
    content?: string(name='content', example='select * from test'),
    dynamicParams?: string(name='dynamicParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    gmtCreate?: string(name='gmtCreate', example='1719221186114'),
    gmtModified?: string(name='gmtModified', example='1719220182844'),
    instanceId?: long(name='instanceId', example='1'),
    kvpairs?: string(name='kvpairs', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    relatedTemplateId?: long(name='relatedTemplateId', example='1'),
    staticParams?: string(name='staticParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    templateParams?: string(name='templateParams', example='{\\"trace\\":\\"INFO\\",\\"databaseName\\":\\"general\\",\\"iquan.plan.cache.enable\\":true,\\"iquan.plan.prepare.level\\":\\"jni.post.optimize\\",\\"urlencode_data\\":false,\\"formatType\\":\\"string\\",\\"timeout\\":1000}'),
    version?: long(name='version', example='1'),
  }(name='result', description='InstanceVersionVO'),
}

model UpdateSqlInstanceParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSqlInstanceParamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSqlInstanceParams  UpdateSqlInstanceParamsRequest
  * @return UpdateSqlInstanceParamsResponse
 */
async function updateSqlInstanceParams(request: UpdateSqlInstanceParamsRequest): UpdateSqlInstanceParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSqlInstanceParams', 'PUT', '/openapi/ha3/instances/{instanceId}/sql-studio/databases/{database}/sql-instances/{sqlInstanceId}/params', 'json', false, 'json', request);
}

model ResultClusterValue = {
  buildParallelNum?: int32(name='buildParallelNum', description='The maximum number of full indexes that can be concurrently built.', example='2'),
  mergeParallelNum?: int32(name='mergeParallelNum', description='The maximum number of full indexes that can be concurrently merged.', example='2'),
}

model ResultDatabasesFunctionsValue = {
  name?: string(name='name', example='test'),
  signatures?: string(name='signatures', example='gfasdds2****2wfrkv'),
}

model ResultValue = {
  pauseAll?: boolean(name='pauseAll', description='Indicates whether all pushes are suspended.', example='true'),
  pauseIndex?: boolean(name='pauseIndex', description='Indicates whether the push is suspended for the new full index version.', example='true'),
  pauseIndexBatch?: boolean(name='pauseIndexBatch', description='Indicates whether the push is suspended for the incremental indexes.', example='true'),
  pauseBiz?: boolean(name='pauseBiz', description='Indicates whether the push is suspended for the configuration.', example='true'),
  pauseRuntime?: boolean(name='pauseRuntime', description='Indicates whether the push is suspended for the real-time incremental indexes.', example='true'),
}

model VariablesValue = {
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable is not allowed to be modified.', example='false'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='false'),
  value?: string(name='value', description='The variable value.', example='""'),
  description?: string(name='description', description='The description of the variable.', example='""'),
  templateValue?: string(name='templateValue', description='The template value of the variable.', example='""'),
  type?: string(name='type', description='The variable type. Valid values:

*   NORMAL: common variable
*   FUNCTION: function variable', example='NORMAL'),
  funcValue?: {
    funcClassName?: string(name='funcClassName', description='The class name of the function variable.', example='""'),
    template?: string(name='template', description='The template of the function variable.', example='""'),
  }(name='funcValue', description='The function variables.'),
}

model ConfigValue = {
  desc?: string(name='desc', description='The description of the offline configuration.', example='test'),
  files?: [ 
    {
      operateType?: string(name='operateType', description='The operation type. Valid values: UPDATE and DELETE. Default value: UPDATE.', example='UPDATE'),
      parentFullPath?: string(name='parentFullPath', description='The path of the parent directory.', example='/'),
      fileName?: string(name='fileName', description='The file name.', example='/intervene_dict/中文-通用分析器.dict'),
      config?: {
        content?: string(name='content', description='The file content.', example='$dictContent'),
        variables?: map[string]ConfigValueFilesConfigVariablesValue(name='variables', description='The variables.'),
      }(name='config', description='The configuration to be modified.'),
      dirName?: string(name='dirName', description='The directory name.', example='/test'),
    }
  ](name='files', description='The files to be modified.'),
}

model BodyValue = {
  pauseAll?: boolean(name='pauseAll', description='Specifies whether to suspend all pushes.', example='true'),
  pauseIndex?: boolean(name='pauseIndex', description='Specifies whether to suspend the push for the new full index version.', example='true'),
  pauseIndexBatch?: boolean(name='pauseIndexBatch', description='Specifies whether to suspend the push for the incremental indexes.', example='true'),
  pauseBiz?: boolean(name='pauseBiz', description='Specifies whether to suspend the push for the configuration.', example='true'),
  pauseRuntime?: boolean(name='pauseRuntime', description='Specifies whether to suspend the push for the real-time incremental indexes.', example='true'),
}

model FilesConfigVariablesValue = {
  description?: string(name='description', description='The description of the variable.', example='Custom variable'),
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable is not allowed to be modified.', example='true'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='true'),
  type?: string(name='type', description='The variable type. Valid values: NORMAL: common variable. FUNCTION: function variable.', example='NORMAL'),
  value?: string(name='value', description='The variable value.', example='test'),
}

model ConfigValueFilesConfigVariablesValue = {
  description?: string(name='description', description='The description of the variable.', example='test'),
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable is not allowed to be modified.', example='true'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='false'),
  type?: string(name='type', description='The variable type. Valid values: NORMAL: common variable. FUNCTION: function variable.', example='NORMAL'),
  value?: string(name='value', description='The variable value.', example='test'),
}

