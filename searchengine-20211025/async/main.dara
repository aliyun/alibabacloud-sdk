/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'searchengine';
  @version = '2021-10-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ErrorResponse {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
}

model BuildIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2iv7sq01', position='Path'),
  buildMode?: string(name='buildMode', description='The mode in which reindexing is performed.', example='indexRecover', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='my_data_source', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source.', example='swift', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='The timestamp in seconds. This parameter is required if you import data from the data source by calling API operations.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source resides.', example='test', position='Body'),
  generation?: long(name='generation', description='The ID of the generation.', example='160131146', position='Body'),
  partition?: string(name='partition', description='The data partition. This parameter is required if the dataSourceType parameter is set to odps.', example='20201010', position='Body'),
}

model BuildIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The result returned.', example='{}'),
}

model BuildIndexResponse = {
  headers: map[string]string(name='headers'),
  body: BuildIndexResponseBody(name='body'),
}

/**
  * ## Method
  *     POST
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/actions/build-index
  *
 */
async function buildIndex(request: BuildIndexRequest): BuildIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildIndex', 'POST', '/openapi/ha3/instances/{instanceId}/actions/build-index', 'json', false, 'json', request);
}

model CreateClusterRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-0ju2k3qer02', position='Path'),
  autoLoad?: boolean(name='autoLoad', description='Specifies whether to automatically balance the load between QRS workers.', example='true', position='Body'),
  dataNode?: {
    number?: int32(name='number', description='The number of Searcher workers.', example='2'),
  }(name='dataNode', description='The information about Searcher workers.', position='Body'),
  description?: string(name='description', description='The description of the cluster.', example='"ha-tets"', position='Body'),
  name?: string(name='name', description='The name of the cluster.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  queryNode?: {
    number?: int32(name='number', description='The number of QRS workers.', example='2'),
  }(name='queryNode', description='The information about Query Result Searcher (QRS) workers.', position='Body'),
}

model CreateClusterResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned.', example='{}'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

/**
  * ### Method
  * `POST`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/clusters`
  *
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.', example='ha-cn-7e22rgfyb01', position='Path'),
  autoBuildIndex?: boolean(name='autoBuildIndex', position='Body'),
  config?: {
    accessKey?: string(name='accessKey'),
    accessSecret?: string(name='accessSecret'),
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    namespace?: string(name='namespace'),
    ossPath?: string(name='ossPath'),
    partition?: string(name='partition'),
    path?: string(name='path'),
    project?: string(name='project'),
    table?: string(name='table'),
  }(name='config', position='Body'),
  domain?: string(name='domain', position='Body'),
  name?: string(name='name', position='Body'),
  saroConfig?: {
    namespace?: string(name='namespace'),
    tableName?: string(name='tableName'),
  }(name='saroConfig', position='Body'),
  type?: string(name='type', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform a dry run. This parameter is only used to check whether the data source is valid. Valid values: true and false.', example='true', position='Query'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The returned results.', example='{}'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataSourceResponseBody(name='body'),
}

/**
  * The result returned
  *
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSource', 'POST', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model CreateIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ppr7901', position='Path'),
  content?: string(name='content', description='The content of the index.', example='{\\"summarys\\":{\\"summary_fields\\":[\\"id\\"]},\\"indexs\\":[{\\"index_name\\":\\"index_id\\",\\"index_type\\":\\"PRIMARYKEY64\\",\\"index_fields\\":\\"id\\",\\"has_primary_key_attribute\\":true,\\"is_primary_key_sorted\\":false}],\\"attributes\\":[\\"id\\"],\\"fields\\":[{\\"field_name\\":\\"id\\",\\"field_type\\":\\"UINT16\\"}],\\"table_name\\":\\"index_2\\"}', position='Body'),
  dataSource?: string(name='dataSource', description='Optional. The data source, which can be MaxCompute, Message Service (MNS), Realtime Compute for Apache Flink, or StreamCompute.', example='test1', position='Body'),
  dataSourceInfo?: {
    autoBuildIndex?: boolean(name='autoBuildIndex'),
    config?: {
      accessKey?: string(name='accessKey'),
      accessSecret?: string(name='accessSecret'),
      endpoint?: string(name='endpoint'),
      partition?: string(name='partition'),
      project?: string(name='project'),
      table?: string(name='table'),
    }(name='config'),
    processPartitionCount?: int32(name='processPartitionCount'),
    type?: string(name='type'),
  }(name='dataSourceInfo', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source resides.', example='vpc_hz_domain_1', position='Body'),
  extend?: map[string]any(name='extend', position='Body'),
  name?: string(name='name', description='The name of the index.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  partition?: int32(name='partition', description='The data partition.', example='2', position='Body'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The information about the index.', example='{}'),
}

model CreateIndexResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIndexResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * POST
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/indexes
  * ```
  *
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  chargeType?: string(name='chargeType', description='The billing method of the instance. Valid values: PREPAY and POSTPAY. PREPAY: subscription. If you set this parameter to PREPAY, make sure that your Alibaba Cloud account supports balance payment or credit payment. Otherwise, the system returns the InvalidPayMethod error message. In addition, you must specify the paymentInfo parameter. POSTPAY: pay-as-you-go. This billing method is not supported.', example='""', position='Body'),
  components?: [ 
    {
      code?: string(name='code', description='The name of the specification. The value must be the same as the name of a parameter on the buy page.', example='""'),
      value?: string(name='value', description='The value of the specification.', example='""'),
    }
  ](name='components', description='The specifications of the instance.', position='Body'),
  order?: {
    autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal. Valid values: true and false.', example='true'),
    duration?: long(name='duration', description='The billing cycle. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 12.', example='29'),
    pricingCycle?: string(name='pricingCycle', description='The unit of the billing cycle. Valid values: Month and Year.', example='""'),
  }(name='order', description='The information about billing.', position='Body'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ppr7901'),
  }(name='result', description='The result returned.'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `POST`
  * ### URI
  * `/api/instances?dryRun=false`
  *
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model DeleteAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-0ju2rps6c08', position='Path'),
  configName?: string(name='configName', description='The configuration name.', example='ha-cn-0ju2rps6c08_offline_adv_v1', position='Path'),
}

model DeleteAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteAdvanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  *
 */
async function deleteAdvanceConfig(request: DeleteAdvanceConfigRequest): DeleteAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAdvanceConfig', 'DELETE', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  instanceId: string(name='instanceId', description='WB01240825', example='ha-cn-0ju2rps6c08', position='Path'),
  dataSourceName: string(name='dataSourceName', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', example='{}'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

/**
  * The result returned
  *
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSource', 'DELETE', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model DeleteIndexRequest {
  instanceId: string(name='instanceId', description='WB01240825', example='ha-cn-2r42p5oi202', position='Path'),
  indexName: string(name='indexName', example='generation', position='Path'),
  dataSource: string(name='dataSource', example='ha-cn-pl32rf0js04_test', position='Query'),
  deleteDataSource?: boolean(name='deleteDataSource', position='Query'),
}

model DeleteIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', example='{}'),
}

model DeleteIndexResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIndexResponseBody(name='body'),
}

/**
  * The information about the index
  *
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model DeleteIndexVersionRequest {
  instanceId: string(name='instanceId', description='WB01240825', example='ha-cn-0ju2rrogr01', position='Path'),
  indexName: string(name='indexName', example='generation', position='Path'),
  versionName: string(name='versionName', example='ha-cn-pl32rf0js04@ha-cn-pl32rf0js04_shenzhen_test_01@sz_vpc_domain_1@api_test@index_config_v1', position='Path'),
}

model DeleteIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', example='{}'),
}

model DeleteIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIndexVersionResponseBody(name='body'),
}

/**
  * The result
  *
 */
async function deleteIndexVersion(request: DeleteIndexVersionRequest): DeleteIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndexVersion', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', example='ha-cn-7pp2m0ozr01', position='Path'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', example='{}'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * The result returned
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model ForceSwitchRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-tl32m2c4u01', position='Path'),
  fsmId: string(name='fsmId', description='The ID of the task.', example='tisplus_opensearch@roll_index_fsm@ha-cn-0ju2je4zj01@bj_vpc_domain_2@null@bj_vpc_domain_2_general_odps_false@1644312508597@934743', position='Path'),
}

model ForceSwitchResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='0B1FF998-BB8D-5182-BFC0-E471AA77095A'),
  result?: map[string]any(name='result', description='The index information.', example='{}'),
}

model ForceSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ForceSwitchResponseBody(name='body'),
}

/**
  * \\### Method
  * ```java
  * PUT
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/force-switch/{fsmId}
  * ```
  *
 */
async function forceSwitch(request: ForceSwitchRequest): ForceSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ForceSwitch', 'PUT', '/openapi/ha3/instances/{instanceId}/force-switch/{fsmId}', 'json', false, 'json', request);
}

model GetAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-18qug6zlc1r', position='Path'),
  configName: string(name='configName', description='The configuration name.', example='ha-cn-18qug6zlc1r_offline_adv_edit', position='Path'),
  type?: string(name='type', position='Query'),
}

model GetAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    content?: string(name='content', description='The content of the configuration that is returned.'),
    contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.'),
    desc?: string(name='desc', description='The description.', example='close alarm, chiji id 37080'),
    files?: [ 
      {
        fullPathName?: string(name='fullPathName', description='The name of the file path.', example='""'),
        isDir?: boolean(name='isDir', description='Indicates whether it is a directory.', example='True'),
        isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template.', example='True'),
        name?: string(name='name', description='The name.', example='ha-cn-2r42ostoc01_qrs'),
      }
    ](name='files', description='The information about files.'),
    name?: string(name='name', description='The name.', example='ha-cn-0ju2s170b03_qrs'),
    status?: string(name='status', description='The status.', example='0,1,3,6,8'),
    updateTime?: long(name='updateTime', description='The update time.', example='""'),
  }(name='result', description='The returned results.'),
}

model GetAdvanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  *
 */
async function getAdvanceConfig(request: GetAdvanceConfigRequest): GetAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfig', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model GetAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='Obtains the information in a specified advanced configuration file.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', example='ha-cn-7pp2pcna701_online_config_v5', position='Path'),
  fileName: string(name='fileName', example='/intervene_dict/chn_ecommerce_general.dict', position='Query'),
}

model GetAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    content?: string(name='content'),
  }(name='result'),
}

model GetAdvanceConfigFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetAdvanceConfigFileResponseBody(name='body'),
}

async function getAdvanceConfigFile(request: GetAdvanceConfigFileRequest): GetAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfigFile', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model GetClusterRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2rq6610a', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='bj_vpc_domain_2', position='Path'),
}

model GetClusterResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='2021-08-09 00:01:02'),
    currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced configuration version.', example='test_yyds_data1'),
    currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='test_yyds_data1'),
    dataNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of replicas.', example='1'),
      partition?: int32(name='partition', description='The number of partitions.', example='2'),
    }(name='dataNode', description='The specifications of the data node.'),
    description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
    latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='test_yyds_data1'),
    latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='test_yyds_data1'),
    name?: string(name='name', description='The name of the cluster.', example='general'),
    queryNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of nodes.', example='1'),
      partition?: int32(name='partition', description='The number of replicas.', example='2'),
    }(name='queryNode', description='The specifications of the query node.'),
    status?: string(name='status', description='The creation status of the cluster. Valid values: NEW and PUBLISH. NEW indicates that the cluster is being created. PUBLISH indicates that the cluster is created.', example='NEW'),
  }(name='result', description='The list of the cluster details.'),
}

model GetClusterResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instance/{instanceId}/clusters/{clusterName}`
  *
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCluster', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model GetClusterRunTimeInfoRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ncw4102', position='Path'),
}

model GetClusterRunTimeInfoResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      clusterName?: string(name='clusterName', description='The name of the cluster', example='vpc_hz_domain_1'),
      dataNodes?: [ 
        {
          configStatusList?: [ 
            {
              configUpdateTime?: string(name='configUpdateTime'),
              donePercent?: int32(name='donePercent'),
              doneSize?: int32(name='doneSize'),
              name?: string(name='name'),
              totalSize?: int32(name='totalSize'),
            }
          ](name='configStatusList'),
          dataStatusList?: [ 
            {
              advanceConfigInfo?: {
                configMetaName?: string(name='configMetaName'),
                version?: long(name='version'),
              }(name='advanceConfigInfo'),
              deployFailedWorker?: [ string ](name='deployFailedWorker'),
              docSize?: int32(name='docSize'),
              donePercent?: int32(name='donePercent'),
              doneSize?: int32(name='doneSize'),
              errorMsg?: string(name='errorMsg'),
              fullUpdateTime?: string(name='fullUpdateTime'),
              fullVersion?: long(name='fullVersion'),
              incUpdateTime?: string(name='incUpdateTime'),
              incVersion?: long(name='incVersion'),
              indexConfigInfo?: {
                configMetaName?: string(name='configMetaName'),
                version?: long(name='version'),
              }(name='indexConfigInfo'),
              indexSize?: long(name='indexSize'),
              lackDiskWorker?: [ string ](name='lackDiskWorker'),
              lackMemWorker?: [ string ](name='lackMemWorker'),
              name?: string(name='name'),
              totalSize?: int32(name='totalSize'),
            }
          ](name='dataStatusList'),
          serviceStatus?: {
            donePercent?: int32(name='donePercent'),
            doneSize?: int32(name='doneSize'),
            name?: string(name='name'),
            totalSize?: int32(name='totalSize'),
          }(name='serviceStatus'),
        }
      ](name='dataNodes', description='dataNodes', example='{}'),
      queryNode?: {
        configStatusList?: [ 
          {
            configUpdateTime?: string(name='configUpdateTime', description='configUpdateTime', example='" "'),
            donePercent?: int32(name='donePercent', description='donePercent', example='100'),
            doneSize?: int32(name='doneSize', description='doneSize', example='100'),
            name?: string(name='name', description='name', example='ha-cn-zvp2qr1sk01_qrs'),
            totalSize?: int32(name='totalSize', description='totalSize', example='6'),
          }
        ](name='configStatusList', description='configStatusList'),
        serviceStatus?: {
          donePercent?: int32(name='donePercent', description='donePercent', example='100'),
          doneSize?: int32(name='doneSize', description='doneSize', example='100'),
          name?: string(name='name', description='The name of the cluster.', example='ha-cn-c4d2rq7nt04_qrs'),
          totalSize?: int32(name='totalSize', description='totalSize', example='100'),
        }(name='serviceStatus', description='serviceStatus'),
      }(name='queryNode', description='The specifications of the query node.'),
    }
  ](name='result', description='The configuration progress. Unit: percentage.'),
}

model GetClusterRunTimeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterRunTimeInfoResponseBody(name='body'),
}

async function getClusterRunTimeInfo(request: GetClusterRunTimeInfoRequest): GetClusterRunTimeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterRunTimeInfo', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-run-time-info', 'json', false, 'json', request);
}

model GetDataSourceRequest {
  instanceId?: string(name='instanceId', description='### Sample requests

`GET /openapi/ha3/instances/ha3_instances_id/data-sources/my_data_source`', example='ha-cn-2r42ostoc01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='### Sample responses

    {
      "requestId": "0A6EB64B-B4C8-CF02-810F-E660812972FF",
      "result": {
        "name": "data_source_name",
        "type": "odps",
        "domain": "test",  // The data center of the data source that is deployed in offline mode    
        "indexes": [
          "index1",
          "index2"
        ],
        "partitions": [
          "ds=2020",
          "ds=2021"
        ],
        "lastFulTime": 1628502036000,
        "config":{
          "accessKey": "xxx",
          "accessSecret": "xxxs",
          "project":"xxxx",
          "table":"xxx",
          "partition":"xxxx"
        },
        "autoBuildIndex": true,
        "status": "new"	   // The state of the data source. new indicates that the data source is being created, publish indicates that the data source is normal, and trash indicates that the data source is being deleted.
       
      }
    }', example='ha-cn-2r42ostoc01_people_info', position='Path'),
}

model GetDataSourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    domain?: string(name='domain', example='vpc_hz_domain_1'),
    indexes?: [ string ](name='indexes'),
    lastFulTime?: long(name='lastFulTime'),
    name?: string(name='name', example='my_index'),
    status?: string(name='status', example='NEW'),
    type?: string(name='type', description='The type of the data source.', example='odps'),
  }(name='result', description='The information about the data source.'),
}

model GetDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSourceResponseBody(name='body'),
}

async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSource', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model GetDataSourceDeployRequest {
  instanceId: string(name='instanceId', position='Path'),
  deployName: string(name='deployName', position='Path'),
  dataSourceName: string(name='dataSourceName', position='Path'),
}

model GetDataSourceDeployResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    autoBuildIndex?: boolean(name='autoBuildIndex'),
    extend?: {
      hdfs?: {
        path?: string(name='path'),
      }(name='hdfs'),
      odps?: {
        partitions?: map[string]string(name='partitions'),
      }(name='odps'),
      oss?: {
        path?: string(name='path'),
      }(name='oss'),
      saro?: {
        path?: string(name='path'),
        version?: string(name='version'),
      }(name='saro'),
    }(name='extend'),
    processor?: {
      args?: string(name='args'),
      resource?: string(name='resource'),
    }(name='processor'),
    storage?: {
      accessKey?: string(name='accessKey'),
      accessSecret?: string(name='accessSecret'),
      bucket?: string(name='bucket'),
      endpoint?: string(name='endpoint'),
      namespace?: string(name='namespace'),
      ossPath?: string(name='ossPath'),
      partition?: string(name='partition'),
      path?: string(name='path'),
      project?: string(name='project'),
      table?: string(name='table'),
    }(name='storage'),
    swift?: {
      topic?: string(name='topic'),
      zk?: string(name='zk'),
    }(name='swift'),
  }(name='result'),
}

model GetDataSourceDeployResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSourceDeployResponseBody(name='body'),
}

async function getDataSourceDeploy(request: GetDataSourceDeployRequest): GetDataSourceDeployResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSourceDeploy', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}', 'json', false, 'json', request);
}

model GetDeployGraphRequest {
  instanceId?: string(name='instanceId', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetDeployGraphResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    graph?: {
      indexMetas?: [ 
        {
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tableName?: string(name='tableName'),
          tag?: string(name='tag'),
          zoneName?: string(name='zoneName'),
        }
      ](name='indexMetas'),
      onlineMaster?: [ 
        {
          domainName?: string(name='domainName'),
          hippoId?: string(name='hippoId'),
          id?: long(name='id'),
          name?: string(name='name'),
        }
      ](name='onlineMaster'),
      tableIndexRelation?: map[string][ string ](name='tableIndexRelation'),
      tableMetas?: [ 
        {
          buildDeployId?: long(name='buildDeployId'),
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='tableMetas'),
      zoneIndexRelation?: map[string][ string ](name='zoneIndexRelation'),
      zoneMetas?: [ 
        {
          domainInfo?: string(name='domainInfo'),
          name?: string(name='name'),
          suezAdminName?: string(name='suezAdminName'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='zoneMetas'),
    }(name='graph'),
  }(name='result', example='{}'),
}

model GetDeployGraphResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeployGraphResponseBody(name='body'),
}

/**
  * ### Sample requests
  * ```java
  * GET /openapi/ha3/instances/{instanceId}/deploy-graph
  * ```
  *
 */
async function getDeployGraph(request: GetDeployGraphRequest): GetDeployGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployGraph', 'GET', '/openapi/ha3/instances/{instanceId}/deploy-graph', 'json', false, 'json', request);
}

model GetFileRequest {
  instanceId: string(name='instanceId', description='## Method

    GET

## URI

    /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt', example='ha-cn-i7m2rpzm605', position='Path'),
  indexName: string(name='indexName', description='## Sample responses

Success responses

    {
      "requestId": "e1eef569-1ff7-4bf8-acf7-1cecca9894ce",
      "result": {
        "name":"version1",  // The file name
        "fullPathName": "/root/version1",   // The name of the full path
        "dataSource": "odps1", // The data source
        "partition": 1,  // The number of shards
        "isDir": false, // Indicates whether it is a directory.
        "content": ""
      }
    }', example='ecmon_table_index_test', position='Path'),
  versionName: string(name='versionName', example='ha-cn-tl32nd2nq01@ha-cn-tl32nd2nq01_00@bj_vpc_domain_1@point_cloud_3d@index_config_edit', position='Path'),
  fileName: string(name='fileName', example='/schemas/automobile_vector_schema.json', position='Query'),
}

model GetFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    content?: string(name='content', example='None'),
    dataSource?: string(name='dataSource', example='ha-cn-2r42p5oi202_xijie_test'),
    fullPathName?: string(name='fullPathName', example='""'),
    isDir?: boolean(name='isDir', example='True'),
    name?: string(name='name', example='ha-cn-2r42ostoc01_qrs'),
    partition?: long(name='partition', example='ds=20210828'),
  }(name='result'),
}

model GetFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileResponseBody(name='body'),
}

async function getFile(request: GetFileRequest): GetFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFile', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model GetIndexRequest {
  instanceId: string(name='instanceId', description='## Sample requests

    GET  /openapi/ha3/instances/ose-test1/indexes/index1?dataSource=xxx', example='ha-cn-8ed2j834u03', position='Path'),
  indexName: string(name='indexName', description='## Sample responses

Success responses

    {
      "requestId": "e1eef569-1ff7-4bf8-acf7-1cecca9894ce",
      "result": {
        "name": "index1",
        "dataSource": "test_yyds_data1",
        "versions": [
          {
            "name": "my_index_1",
            "versionId": 1,
            "status": "drafting",
            "updateTime": "1631070464000",
            "desc": "test",
            "files": [
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              },
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              }
            ]
          },
          {
            "name": "my_index_2",
            "versionId": 1,
            "status": "drafting",
            "updateTime": "1631070464000",
            "desc": "test",
            "files": [
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              },
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              }
            ]        
          }
        ]
      }
    }', example='index_jiayi_text', position='Path'),
}

model GetIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: {
    content?: string(name='content', description='The content of the index.'),
    dataSource?: string(name='dataSource', example='ha-cn-tl32nd2nq01_00'),
    dataSourceInfo?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.'),
      config?: {
        accessKey?: string(name='accessKey'),
        accessSecret?: string(name='accessSecret'),
        bucket?: string(name='bucket'),
        endpoint?: string(name='endpoint', description='A parameter related to MaxCompute.'),
        namespace?: string(name='namespace', description='A parameter related to SARO.'),
        ossPath?: string(name='ossPath', description='A parameter related to OSS.'),
        partition?: string(name='partition'),
        path?: string(name='path', description='A parameter related to Apsara File Storage for HDFS.'),
        project?: string(name='project'),
        table?: string(name='table', description='A parameter related to SARO and MaxCompute.'),
      }(name='config', description='The configuration of MaxCompute data sources.'),
      domain?: string(name='domain', description='The offline deployment name of the data source.'),
      name?: string(name='name', description='The name of the data source.'),
      processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.'),
      saroConfig?: {
        namespace?: string(name='namespace'),
        tableName?: string(name='tableName'),
      }(name='saroConfig', description='The configuration of SARO data sources.'),
      type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.'),
    }(name='dataSourceInfo', description='The information about the data source.'),
    description?: string(name='description', description='The remarks.'),
    domain?: string(name='domain'),
    fullUpdateTime?: string(name='fullUpdateTime', description='The last time when full data in the index was updated.'),
    fullVersion?: long(name='fullVersion', description='The version of the data.'),
    incUpdateTime?: string(name='incUpdateTime', description='The last time when incremental data in the index was updated.'),
    indexSize?: long(name='indexSize', description='The index size.'),
    indexStatus?: string(name='indexStatus', description='The status of the index. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, and RESTORE_USE. After a Retrieval Engine Edition instance is created, it enters the IN_USE state.'),
    name?: string(name='name', example='general'),
    partition?: int32(name='partition', description='The number of shards.'),
    versions?: [ 
      {
        desc?: string(name='desc', description='The description of the version.', example='close alarm, by 3.9.2 hotfix workflow'),
        files?: [ 
          {
            fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
            isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
            isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
            name?: string(name='name'),
          }
        ](name='files', description='The information about the files.'),
        name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
        status?: string(name='status', description='The status of the version.', example='2'),
        updateTime?: long(name='updateTime', description='The last time when the version was updated.', example='" "'),
        versionId?: int32(name='versionId', description='The ID of the version.', example='1'),
      }
    ](name='versions', description='The information about the versions.'),
  }(name='result', description='The information about the index.'),
}

model GetIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndexResponseBody(name='body'),
}

async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model GetIndexVersionRequest {
  instanceId: string(name='instanceId', example='ha-cn-2r42ostoc01', position='Path'),
  clusterName: string(name='clusterName', example='vpc_hz_domain_1', position='Path'),
}

model GetIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    cluster?: string(name='cluster', example='ayoss-cn-zhangjiakou-b'),
    indexVersions?: [ 
      {
        buildDeployId?: string(name='buildDeployId', example='" "'),
        currentVersion?: long(name='currentVersion'),
        indexName?: string(name='indexName', example='table4'),
        versions?: [ long ](name='versions'),
      }
    ](name='indexVersions'),
  }(name='result'),
}

model GetIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndexVersionResponseBody(name='body'),
}

/**
  * ## Examples
  * Sample requests
  *     GET  /openapi/ha3/instances/ha3_instance_id_1/clusters/cluster1/index-version
  *
 */
async function getIndexVersion(request: GetIndexVersionRequest): GetIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexVersion', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='The lock status.', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetInstanceResponseBody = {
  requestId?: string(name='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    chargeType?: string(name='chargeType', description='付费类型', example='POSYPAY'),
    commodityCode?: string(name='commodityCode', description='商品code', example='commodityCode'),
    createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='2022-06-17T02:01:26Z'),
    description?: string(name='description', description='The ID of the request.', example='ha3_test'),
    expiredTime?: string(name='expiredTime', description='WB01240825', example='1634609702'),
    inDebt?: boolean(name='inDebt', description='是否欠费', example='false'),
    instanceId?: string(name='instanceId', description='代表资源一级ID的资源属性字段', example='ha-cn-7mz2qsgq301'),
    lockMode?: string(name='lockMode', description='锁定状态', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='### Sample responses

**Sample success responses**

    {
      "requestId": "90D6B8F5-FE97-4509-9AAB-367836C51818",
      "result": 
      {
        "instanceId":"fadsfsafs",
        "inDebt":true,
        "lockMode":"Unlock",
        "expiredTime":"asdfas",
        "updateTime":"dfasf",
        "createTime":"dfasf",
        "resourceGroupId":"resourceGroupID",
        "commodityCode":"commodityCode",
        "chargeType":"POSYPAY",
        "description":"this is description",
        "apiVersion": "tisplus/v1",
        "network": {
          "vSwitchId": "vswitch_id_xxx",
          "vpcId": "vpc_id_xxx",	  
        },
        "userName": "user",
        "spec": {
          "searchResource": {
            "disk": 50,
            "mem": 8,
            "cpu": 2,
            "nodeCount": 2
          },
          "qrsResource": {
            "disk": 50,
            "mem": 8,
            "cpu": 2,
            "nodeCount": 2
          }
        },
       "status": "INIT",
      }
    }

**Sample error responses**

    {
      "requestId": "BD1EA715-DF6F-06C2-004C-C1FA0D3A9820",
      "httpCode": 404,
      "code": "App.NotFound",
      "message": "App not found"
    }', example='rg-aekzjvw24el5lma'),
    status?: string(name='status', example='INIT'),
    tags?: [ 
      {
        key?: string(name='key', example='env'),
        value?: string(name='value', example='prod'),
      }
    ](name='tags'),
    updateTime?: string(name='updateTime', description='更新时间', example='1634609702'),
  }(name='result', description='The description of the instance.'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

/**
  * The billing method.
  *
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model GetNodeConfigRequest {
  instanceId: string(name='instanceId', description='### Sample responses

Success responses ﻿

```java
{
﻿
  "requestId": "0A6EB64B-B4C8-CF02-810F-E660812972FF",
﻿
  "result": {
﻿
    "dataFragmentNumber":1,
﻿
    "dataDuplicateNumber":1,
﻿
    "minServicePercent":20,
﻿
    "published":true,
﻿
    "active": true  // Indicates whether the online configurations have taken effect.
﻿
  }
﻿
}
```', example='ha-cn-0ju2rewdi02', position='Path'),
  clusterName?: string(name='clusterName', example='vpc_sh_domain_2', position='Query'),
  name?: string(name='name', example='ha-cn-30174dhoz53_qrs', position='Query'),
  type?: string(name='type', example='index', position='Query'),
}

model GetNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    active?: boolean(name='active'),
    dataDuplicateNumber?: int32(name='dataDuplicateNumber'),
    dataFragmentNumber?: int32(name='dataFragmentNumber'),
    minServicePercent?: int32(name='minServicePercent'),
    published?: boolean(name='published'),
  }(name='result'),
}

model GetNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeConfigResponseBody(name='body'),
}

async function getNodeConfig(request: GetNodeConfigRequest): GetNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNodeConfig', 'GET', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model ListAdvanceConfigDirRequest {
  instanceId: string(name='instanceId', example='ha-cn-tl32n3iu801', position='Path'),
  configName: string(name='configName', example='ha-cn-2r42ostoc01_online_config_v3', position='Path'),
  dirName: string(name='dirName', example='/zones/general', position='Query'),
}

model ListAdvanceConfigDirResponseBody = {
  requestId?: string(name='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: [ 
    {
      fullPathName?: string(name='fullPathName', example='"/path/wpd/nae"'),
      isDir?: boolean(name='isDir', example='true'),
      isTemplate?: boolean(name='isTemplate', example='true'),
      name?: string(name='name', example='file_name_1'),
    }
  ](name='result'),
}

model ListAdvanceConfigDirResponse = {
  headers: map[string]string(name='headers'),
  body: ListAdvanceConfigDirResponseBody(name='body'),
}

/**
  * ## Sample requests
  * `GET /openapi/ha3/instances/ose-test1/advanced-configs`
  *
 */
async function listAdvanceConfigDir(request: ListAdvanceConfigDirRequest): ListAdvanceConfigDirResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigDir', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir', 'json', false, 'json', request);
}

model ListAdvanceConfigsRequest {
  instanceId: string(name='instanceId', description='Obtains a list of advanced configurations.', example='ha-cn-pl32rf0js04', position='Path'),
  dataSourceName?: string(name='dataSourceName', position='Query'),
  indexName?: string(name='indexName', position='Query'),
  type?: string(name='type', example='online', position='Query'),
}

model ListAdvanceConfigsResponseBody = {
  requestId?: string(name='requestId', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content', description='配置内容 http，git 请求时不为空'),
      contentType?: string(name='contentType', description='配置内容的类型 (FILE, GIT, HTTP, ODPS)'),
      desc?: string(name='desc', example='test'),
      files?: [ 
        {
          fullPathName?: string(name='fullPathName', example='/path/wpd/nae'),
          isDir?: boolean(name='isDir', example='true'),
          isTemplate?: boolean(name='isTemplate', example='true'),
          name?: string(name='name', example='file_name_1'),
        }
      ](name='files'),
      name?: string(name='name', example='my_index'),
      status?: string(name='status', example='drafting'),
      updateTime?: long(name='updateTime', example='1631070464000'),
    }
  ](name='result'),
}

model ListAdvanceConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAdvanceConfigsResponseBody(name='body'),
}

/**
  * http
  *
 */
async function listAdvanceConfigs(request: ListAdvanceConfigsRequest): ListAdvanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs', 'json', false, 'json', request);
}

model ListClusterNamesRequest {
  instanceId: string(name='instanceId', example='ha-cn-i7m2rpzm605', position='Path'),
}

model ListClusterNamesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: {
    description?: string(name='description', example='ha3_test'),
    id?: long(name='id', example='25030'),
    name?: string(name='name', example='my_index'),
  }(name='result'),
}

model ListClusterNamesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterNamesResponseBody(name='body'),
}

/**
  * ### Sample requests
  * ```java
  * GET /openapi/ha3/instances/ha3_instance_name/cluster-names
  * ```
  *
 */
async function listClusterNames(request: ListClusterNamesRequest): ListClusterNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterNames', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-names', 'json', false, 'json', request);
}

model ListClusterTasksRequest {
  instanceId: string(name='instanceId', description='The sequence number of the task.', example='ha-cn-i7m2roiy504', position='Path'),
}

model ListClusterTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', example='" "'),
      field3?: string(name='field3', example='" "'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-zvp2ljiwe01_api2@bj_vpc_domain_1@null@MANUAL-ha-cn-zvp2ljiwe01_api2@1649729867698@028315'),
      groupType?: string(name='groupType', description='### Method

```java
GET
```

### URI

```java
/openapi/ha3/instances/{instanceId}/cluster-tasks
```', example='" "'),
      name?: string(name='name', description='Displays cluster tasks .', example='ha-cn-pl32rf0js04_qrs'),
      status?: string(name='status', example='onlyPublished'),
      tags?: [ 
        {
          msg?: string(name='msg', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', example='" "'),
        }
      ](name='tags'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', example='" "'),
          index?: long(name='index', example='100'),
          name?: string(name='name', example='general'),
          status?: string(name='status', example='2'),
        }
      ](name='taskNodes'),
      time?: string(name='time', example='1657610520'),
      type?: string(name='type', example='qrs'),
      user?: string(name='user', example='" "'),
    }
  ](name='result', description='The date when the task was completed.'),
}

model ListClusterTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterTasksResponseBody(name='body'),
}

async function listClusterTasks(request: ListClusterTasksRequest): ListClusterTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterTasks', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-tasks', 'json', false, 'json', request);
}

model ListClustersRequest {
  instanceId: string(name='instanceId', description='Queries the list of clusters.', example='ha-cn-zvp2jlr2g03', position='Path'),
}

model ListClustersResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: [ 
    {
      configUpdateTime?: string(name='configUpdateTime', example='" "'),
      currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', example='" "'),
      currentOfflineDictConfigVersion?: string(name='currentOfflineDictConfigVersion', description='词典配置生效版本'),
      currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', example='" "'),
      currentOnlineQueryConfigVersion?: string(name='currentOnlineQueryConfigVersion', description='查询配置生效版本'),
      dataNode?: {
        name?: string(name='name', example='ha-cn-8ed2k7brm05_qrs'),
        number?: int32(name='number', example='1'),
        partition?: int32(name='partition', example='dt=20220216'),
      }(name='dataNode'),
      description?: string(name='description', example='fzz_test'),
      latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', example='" "'),
      latestOfflineDictConfigVersion?: string(name='latestOfflineDictConfigVersion', description='词典配置最新版本'),
      latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', example='" "'),
      latestOnlineQueryConfigVersion?: string(name='latestOnlineQueryConfigVersion', description='查询配置最新版本'),
      name?: string(name='name', example='ha-cn-7pp2pcna701_qrs'),
      queryNode?: {
        name?: string(name='name', example='test_0704'),
        number?: int32(name='number', example='1'),
        partition?: int32(name='partition', example='dt=20211216'),
      }(name='queryNode'),
      status?: string(name='status', example='"starting"'),
    }
  ](name='result'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

/**
  * http
  *
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusters', 'GET', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model ListDataSourceSchemasRequest {
  instanceId: string(name='instanceId', example='ha-cn-zvp2s4l8f02', position='Path'),
  dataSourceName: string(name='dataSourceName', example='ha-cn-2r42ostoc01_ecom_table_test', position='Path'),
}

model ListDataSourceSchemasResponseBody = {
  requestId?: string(name='requestId', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      addIndex?: boolean(name='addIndex', example='false'),
      attribute?: boolean(name='attribute', example='false'),
      custom?: boolean(name='custom', example='false'),
      name?: string(name='name', example='test'),
      primaryKey?: {
        hasPrimaryKeyAttribute?: boolean(name='hasPrimaryKeyAttribute', example='false'),
        isPrimaryKey?: boolean(name='isPrimaryKey', example='false'),
        isPrimaryKeySorted?: boolean(name='isPrimaryKeySorted', example='false'),
      }(name='primaryKey'),
      summary?: boolean(name='summary', example='false'),
      type?: string(name='type', example='STRING'),
    }
  ](name='result'),
}

model ListDataSourceSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceSchemasResponseBody(name='body'),
}

/**
  * Obtains the schema information of a specified data source.
  *
 */
async function listDataSourceSchemas(request: ListDataSourceSchemasRequest): ListDataSourceSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceSchemas', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas', 'json', false, 'json', request);
}

model ListDataSourceTasksRequest {
  instanceId: string(name='instanceId', description='The sequence number of the task.', example='ha-cn-7e22rof5304', position='Path'),
}

model ListDataSourceTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', example='""'),
      field3?: string(name='field3', example='""'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1062017779051424-ha-cn-2r42ostoc01_ecom_table@vpc_hz_domain_1@null@MANUAL-ha-cn-2r42ostoc01_ecom_table@1655974525756@006754'),
      groupType?: string(name='groupType', description='### Method

```java
GET
```

### URI

```java
/openapi/ha3/instances/{instanceId}/data-source-tasks
```', example='" "'),
      name?: string(name='name', description='Displays data source tasks.', example='general'),
      status?: string(name='status', example='2'),
      tags?: [ 
        {
          msg?: string(name='msg', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', example='""'),
        }
      ](name='tags'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', example='""'),
          index?: long(name='index', example='100'),
          name?: string(name='name', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', example='onlyPublished'),
        }
      ](name='taskNodes'),
      time?: string(name='time', example='1646279473'),
      type?: string(name='type', example='search'),
      user?: string(name='user', example='""'),
    }
  ](name='result', description='The date when the task was completed.'),
}

model ListDataSourceTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceTasksResponseBody(name='body'),
}

async function listDataSourceTasks(request: ListDataSourceTasksRequest): ListDataSourceTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceTasks', 'GET', '/openapi/ha3/instances/{instanceId}/data-source-tasks', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  instanceId: string(name='instanceId', description='auditing', example='ha-cn-2r42ostoc01', position='Path'),
}

model ListDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='## Method

`GET`

## URI

`/openapi/ha3/instances/{instanceId}/data-sources`', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: [ 
    {
      domain?: string(name='domain', description='The data sources deployed in offline mode.', example='test'),
      indexes?: [ string ](name='indexes', description='The indexes.'),
      lastFulTime?: long(name='lastFulTime', description='The time when the full data of the data source was last queried.'),
      name?: string(name='name', description='The name of the data source.', example='data_source_name'),
      status?: string(name='status', description='The status of the data source.', example='new'),
      type?: string(name='type', description='The type of the data source.', example='odps'),
    }
  ](name='result', description='The returned results.'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model ListDateSourceGenerationsRequest {
  instanceId: string(name='instanceId', description='### Sample requests

`GET /openapi/ha3/instances/ha3_instances_id/data-sources/my_data_source/generations??domainName=pre_domain_1`', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName: string(name='dataSourceName', description='### Sample responses

    {
      "requestId": "0A6EB64B-B4C8-CF02-810F-E660812972FF",
      "result": [
        {
          "generationId":1626143930,
          "timestamp":16261436737,
          "createTime":1626143673,
          "status":"STOPPED",
          "partition":{
            "index1":1
          },
          "buildDeployId":122
        },{
          "generationId":1626143930,
          "timestamp":16261435453,
          "createTime":1626143673,
          "status":"STOPPED",
          "partition":{
            "index1":1
          },
          "buildDeployId":122
        }
      ]
    }', example='ha-cn-0ju2s170b03_test_api2', position='Path'),
  domainName: string(name='domainName', example='bj_vpc_domain_1', position='Query'),
  validStatus?: boolean(name='validStatus', description='Obtains the data restoration version of a data source.', example='true', position='Query'),
}

model ListDateSourceGenerationsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      buildDeployId?: int32(name='buildDeployId', description='buildDeployId', example='122'),
      createTime?: long(name='createTime', example='1626143673'),
      dataDumpRoot?: string(name='dataDumpRoot', example='""'),
      generation?: long(name='generation', example='1626143930'),
      partition?: map[string]int32(name='partition'),
      status?: string(name='status', example='STOPPED'),
      timestamp?: long(name='timestamp', example='1626143673'),
    }
  ](name='result', description='List'),
}

model ListDateSourceGenerationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDateSourceGenerationsResponseBody(name='body'),
}

async function listDateSourceGenerations(request: ListDateSourceGenerationsRequest): ListDateSourceGenerationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDateSourceGenerations', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations', 'json', false, 'json', request);
}

model ListIndexesRequest {
  instanceId: string(name='instanceId', description='Indicates whether it is a template.', example='ha-cn-2r42ostoc01', position='Path'),
  newMode?: boolean(name='newMode', position='Query'),
}

model ListIndexesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content', description='The content of the index.'),
      dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-7mz2kvu2c01_table4'),
      dataSourceInfo?: {
        autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.'),
        config?: {
          accessKey?: string(name='accessKey'),
          accessSecret?: string(name='accessSecret'),
          bucket?: string(name='bucket'),
          endpoint?: string(name='endpoint', description='A parameter related to MaxCompute.'),
          namespace?: string(name='namespace', description='A parameter related to SARO.'),
          ossPath?: string(name='ossPath', description='A parameter related to OSS.'),
          partition?: string(name='partition'),
          path?: string(name='path', description='A parameter related to Apsara File Storage for HDFS.'),
          project?: string(name='project'),
          table?: string(name='table', description='A parameter related to SARO and MaxCompute.'),
        }(name='config', description='The configuration of MaxCompute data sources.'),
        domain?: string(name='domain', description='The offline deployment name of the data source.'),
        name?: string(name='name', description='The name of the data source.'),
        processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.'),
        saroConfig?: {
          namespace?: string(name='namespace'),
          tableName?: string(name='tableName'),
        }(name='saroConfig', description='The configuration of SARO data sources.'),
        type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.'),
      }(name='dataSourceInfo', description='The information about the data source.'),
      description?: string(name='description', description='The remarks.'),
      domain?: string(name='domain', description='The deployment name of the index.', example='test'),
      fullUpdateTime?: string(name='fullUpdateTime', description='The last time when full data in the index was updated.'),
      fullVersion?: long(name='fullVersion', description='The version of the data.'),
      incUpdateTime?: string(name='incUpdateTime', description='The last time when incremental data in the index was updated.'),
      indexSize?: long(name='indexSize', description='The index size.'),
      indexStatus?: string(name='indexStatus', description='The status of the index. Valid values: NEW and PUBLISH.', example='" "'),
      name?: string(name='name', description='The name of the index.', example='general'),
      partition?: int32(name='partition', description='The number of shards.'),
      versions?: [ 
        {
          desc?: string(name='desc', description='The description of the version.', example='close alarm, by 3.9.2 hotfix workflow'),
          files?: [ 
            {
              fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
              isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
              isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
              name?: string(name='name', description='The name of the file.', example='ha-cn-7mz2iv7sq01_qrs'),
            }
          ](name='files', description='The information about the files.'),
          name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The status of the version. Valid values: drafting, used, unused, and trash.', example='2'),
          updateTime?: long(name='updateTime', description='The last time when the version was updated.', example='" "'),
          versionId?: int32(name='versionId', description='The ID of the version. The value is null for an edit version.', example='1'),
        }
      ](name='versions', description='The information about the versions.'),
    }
  ](name='result', description='The information about the indexes.'),
}

model ListIndexesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIndexesResponseBody(name='body'),
}

async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexes', 'GET', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model ListInstanceSpecsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
  type: string(name='type', description='The node type. Valid values: qrs, search, index, and cluster. qrs specifies an Query Result Searcher (QRS) worker, search specifies a searcher worker, index specifies an index node, and cluster specifies a cluster.', example='search', position='Query'),
}

model ListInstanceSpecsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      cpu?: int32(name='cpu', description='The number of CPU cores.', example='1'),
      maxDisk?: int32(name='maxDisk', description='The maximum storage space of a searcher worker.'),
      mem?: int32(name='mem', description='The memory size. Unit: GB.', example='4'),
      minDisk?: int32(name='minDisk', description='The minimum storage space of a searcher worker.'),
    }
  ](name='result', description='The specifications of the instances.'),
}

model ListInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceSpecsResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/specs?type=qrs`
  *
 */
async function listInstanceSpecs(request: ListInstanceSpecsRequest): ListInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSpecs', 'GET', '/openapi/ha3/instances/{instanceId}/specs', 'json', false, 'json', request);
}

model ListInstancesRequest {
  description?: string(name='description', description='The description of the instance', example='The product code', position='Query'),
  edition?: string(name='edition', description='实例类型，vector(向量索引版)，engine(召回引擎版)', example='vector', position='Query'),
  instanceId?: string(name='instanceId', description='The time when the instance was created', example='ha-cn-83570439y0n', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The status of the instance', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The description of the instance. You can use this description to filter instances. Fuzzy match is supported.', example='10', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='The number of the page to return. Default value: 1.', example='rg-aekzgpiswzbksdi', position='Query'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags', shrink='json', position='Query'),
}

model ListInstancesResponseBody = {
  requestId?: string(name='requestId', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', description='The ID of the resource group to which the instance belongs.', example='PrePaid'),
      commodityCode?: string(name='commodityCode', description='The total number of entries returned', example='""'),
      createTime?: string(name='createTime', description='Havenask instance', example='2022-06-04T02:03:21Z'),
      description?: string(name='description', description='The ID of the virtual switch', example='The billing method'),
      expiredTime?: string(name='expiredTime', description='The ID of the Virtual Private Cloud (VPC) network', example='1634885083'),
      inDebt?: boolean(name='inDebt', description='The ID of the request', example='false'),
      instanceId?: string(name='instanceId', description='The access point of the gateway', example='ha-cn-2r42n8oh001'),
      lockMode?: string(name='lockMode', description='Emergency test', example='Unlock'),
      network?: {
        endpoint?: string(name='endpoint', description='353490', example='""'),
        vSwitchId?: string(name='vSwitchId', description='### Sample responses

**Sample success responses**

    {
        "requestId": "90D6B8F5-FE97-4509-9AAB-367836C51818",
        "result": [
            {
                "instanceId": "igraph-cn-xxxxxx1",
                "spec": {
                    "password": "passwd",
                    "searchResource": {
                        "disk": 50,
                        "mem": 8,
                        "cpu": 2,
                        "nodeCount": 2
                    },
                    "instanceName": "testInstance",
                    "vSwitchId": "vswitch_id_xxx",
                    "vpcId": "vpc_id_xxx",
                    "qrsResource": {
                        "disk": 50,
                        "mem": 8,
                        "cpu": 2,
                        "nodeCount": 2
                    },
                    "region": "cn-hangzhou",
                    "userName": "user"
                },
                "status": {
                    "phase": "PENDING",
                    "instancePhase": "INIT",
                    "createSuccess": false
                }
            },
            {
                "instanceId": "igraph-cn-xxxxxx2",
                "spec": {
                    "password": "passwd",
                    "searchResource": {
                        "disk": 50,
                        "mem": 8,
                        "cpu": 2,
                        "nodeCount": 2
                    },
                    "instanceName": "testInstance",
                    "vSwitchId": "vswitch_id_xxx",
                    "vpcId": "vpc_id_xxx",
                    "qrsResource": {
                        "disk": 50,
                        "mem": 8,
                        "cpu": 2,
                        "nodeCount": 2
                    },
                    "region": "cn-hangzhou",
                    "userName": "user"
                },
                "status": {
                    "phase": "PENDING",
                    "instancePhase": "INIT",
                    "createSuccess": false
                }
            }
        ],
        "totalCount": 20
    }

**Sample error responses**

    {
      "requestId": "BD1EA715-DF6F-06C2-004C-C1FA0D3A9820",
      "httpCode": 404,
      "code": "App.NotFound",
      "message": "App not found"
    }', example='vsw-bp11ldcf59q2nbwkqgj6z'),
        vpcId?: string(name='vpcId', description='Queries instances.', example='vpc-wz9axk41d9vffoc79x0oe'),
      }(name='network', description='The lock status'),
      resourceGroupId?: string(name='resourceGroupId', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='rg-aekzgpiswzbksdi'),
      status?: string(name='status', description='The expiration time', example='2'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
    }
  ](name='result', description='The result returned'),
  totalCount?: int32(name='totalCount', example='5'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * Indicates whether an overdue payment is involved
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model ListOnlineConfigsRequest {
  instanceId: string(name='instanceId', example='ha-cn-0ju2s170b03', position='Path'),
  nodeName: string(name='nodeName', example='ha-cn-2r42ostoc01_qrs', position='Path'),
  domain: string(name='domain', example='sz_vpc_domain_1', position='Query'),
}

model ListOnlineConfigsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      config?: string(name='config', example='{\\"specItems\\":[{\\"specKey\\":\\"YQ_KEYWORD_NUMBER_PLUS\\",\\"value\\":\\"1\\"}]}'),
      indexName?: string(name='indexName', example='generation'),
    }
  ](name='result', description='List'),
}

model ListOnlineConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOnlineConfigsResponseBody(name='body'),
}

/**
  * \\### Sample requests
  * ```java
  * GET  /openapi/ha3/instances/ha-test1/node/ihome_searcher/online-configs?domain=pre_ea120
  * ```
  *
 */
async function listOnlineConfigs(request: ListOnlineConfigsRequest): ListOnlineConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs', 'json', false, 'json', request);
}

model ListQueryResultRequest {
  instanceId: string(name='instanceId', description='Queries the query result.', example='ha-cn-i7m2olkw201', position='Path'),
  query?: string(name='query', description='353490', example='query%3D1%26%26config%3Dstart%3A0%2Chit%3A10%2Cformat%3Ajson%26%26cluster%3Dgeneral', position='Query'),
  sql?: string(name='sql', example='query%3Dselect%20max(content_id)%20from%20generation', position='Query'),
}

model ListQueryResultResponseBody = {
  requestId?: string(name='requestId', example='9E5BCFAA-98B3-51D0-9188-B1BC07589337'),
}

model ListQueryResultResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryResultResponseBody(name='body'),
}

/**
  * The ID of the instance
  *
 */
async function listQueryResult(request: ListQueryResultRequest): ListQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryResult', 'GET', '/openapi/ha3/instances/{instanceId}/query', 'json', false, 'json', request);
}

model ModifyAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The name of the configuration.', example='ha-cn-zvp2ou1h801_online_config_edit', position='Path'),
  content?: string(name='content', description='The content of the file.', example='"ha3"', position='Body'),
  variables?: map[string]VariablesValue(name='variables', description='The variable.', position='Body'),
  fileName: string(name='fileName', description='The name of the file.', example='/qrs.json', position='Query'),
}

model ModifyAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyAdvanceConfigFileResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAdvanceConfigFileResponseBody(name='body'),
}

/**
  * ## Method
  *     put
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
  *
 */
async function modifyAdvanceConfigFile(request: ModifyAdvanceConfigFileRequest): ModifyAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAdvanceConfigFile', 'PUT', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model ModifyClusterDescRequest {
  instanceId: string(name='instanceId', description='WB01240825', example='ha-cn-c4d2rq7nt04', position='Path'),
  clusterName: string(name='clusterName', example='sz_vpc_domain_1', position='Path'),
  body?: map[string]any(name='body', example='{}', position='Body'),
}

model ModifyClusterDescResponseBody = {
  requestId?: string(name='requestId', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='Map'),
}

model ModifyClusterDescResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterDescResponseBody(name='body'),
}

/**
  * The name of the cluster
  *
 */
async function modifyClusterDesc(request: ModifyClusterDescRequest): ModifyClusterDescResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterDesc', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc', 'json', false, 'json', request);
}

model ModifyClusterOfflineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2oy0bg01', position='Path'),
  buildMode?: string(name='buildMode', description='The reindexing method. Valid values: api: API data source. indexRecover: data recovery through indexing.', example='indexRecover', position='Body'),
  config?: map[string]int32(name='config', description='The configuration name, which is stored as a key.', position='Body'),
  dataSourceName?: string(name='dataSourceName', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source. Valid values: odps: MaxCompute. swift: Swift. unKnow: unknown type.', example='odps', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='This parameter is required if the API data source experiences full indexing.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The domain in which the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  generation?: long(name='generation', description='The ID of the backward data delivery.', example='160142641', position='Body'),
  partition?: string(name='partition', description='This parameter is required if the MaxCompute data source experiences full indexing.', example='20211202', position='Body'),
  pushMode?: string(name='pushMode', position='Body'),
}

model ModifyClusterOfflineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result of the request.', example='{}'),
}

model ModifyClusterOfflineConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterOfflineConfigResponseBody(name='body'),
}

/**
  * ## Request syntax
  *     PUT /openapi/ha3/instances/{instanceId}/cluster-offline-config
  *     ...
  *
 */
async function modifyClusterOfflineConfig(request: ModifyClusterOfflineConfigRequest): ModifyClusterOfflineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOfflineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-offline-config', 'json', false, 'json', request);
}

model ModifyClusterOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7mz2ougaw02', position='Path'),
  clusters?: [ string ](name='clusters', description='The information about the cluster', position='Body'),
  config?: map[string]int32(name='config', description='配置信息', position='Body'),
}

model ModifyClusterOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterOnlineConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterOnlineConfigResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/cluster-online-config`
  *
 */
async function modifyClusterOnlineConfig(request: ModifyClusterOnlineConfigRequest): ModifyClusterOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-online-config', 'json', false, 'json', request);
}

model ModifyDataSourceRequest {
  instanceId: string(name='instanceId', description='## Sample responses

### Success responses

```json
{
	"requestId": "0A6EB64B-B4C8-CF02-810F-E660812972FF",
    "result": []
}
```

For more information, see [Response struct](~~465311~~).', example='ha-cn-tl32n3iu801', position='Path'),
  dataSourceName: string(name='dataSourceName', description='WB01240825', example='ha-cn-pl32rf0js04_test', position='Path'),
  body?: map[string]any(name='body', description='The information about the index', example='{}', position='Body'),
  dryRun?: boolean(name='dryRun', description='The ID of the request', example='true', position='Query'),
}

model ModifyDataSourceResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='The schema information.', example='{}'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataSourceResponseBody(name='body'),
}

/**
  * The result returned
  *
 */
async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDataSource', 'PUT', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model ModifyFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-i7m2ne76e02', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='automobile_vector', position='Path'),
  versionName: string(name='versionName', description='The name of the version', example='version1', position='Path'),
  content?: string(name='content', description='The parameters in the request body', example='""', position='Body'),
  partition?: int32(name='partition', description='auditing', example='1', position='Body'),
  fileName: string(name='fileName', description='ha-cn-tl32m2c4u01@ha-cn-tl32m2c4u01_00@bj_vpc_domain_1@automobile_vector@index_config_edit', example='/schemas/generation_schema.json', position='Query'),
}

model ModifyFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyFileResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFileResponseBody(name='body'),
}

/**
  * ### Method
  * ~~~
  * PUT
  * ~~~
  * ### URI
  * ~~~
  * /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
  * ~~~
  *
 */
async function modifyFile(request: ModifyFileRequest): ModifyFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFile', 'PUT', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model ModifyIndexPartitionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1', position='Body'),
  domainName?: string(name='domainName', description='The information about each index.', example='pre_domain_1', position='Body'),
  generation?: long(name='generation', description='The name of the data center.', example='1633293829', position='Body'),
  indexInfos?: [ 
    {
      indexName?: string(name='indexName', description='auditing', example='atest2'),
      parallelNum?: int32(name='parallelNum', description='The parameters in the request body.', example='1'),
      partitionCount?: int32(name='partitionCount', description='The number of shards of the index.', example='3'),
    }
  ](name='indexInfos', description='The number of shards of the index.', position='Body'),
}

model ModifyIndexPartitionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='Map', example='[]'),
}

model ModifyIndexPartitionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIndexPartitionResponseBody(name='body'),
}

/**
  * The information about each index.
  *
 */
async function modifyIndexPartition(request: ModifyIndexPartitionRequest): ModifyIndexPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexPartition', 'PUT', '/openapi/ha3/instances/{instanceId}/index-partition', 'json', false, 'json', request);
}

model ModifyIndexVersionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2j2off06', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the index.', example='vpc_hz_domain_2', position='Path'),
  body?: [ 
    {
      buildDeployId?: string(name='buildDeployId', example='277'),
      indexName?: string(name='indexName', description='WB01240825', example='main_index'),
      version?: string(name='version', example='1'),
    }
  ](name='body', description='## Sample requests

﻿

    PUT /openapi/ha3/instances/ha3_instance_nameclusters/test_cluster/index-version

﻿

    [
    ﻿
      {
    ﻿
        "indexName": "index1",
    ﻿
        "version": "123456",
    ﻿
        "buildDeployId": "20201010"
    ﻿
      },
    ﻿
      {
    ﻿
        "indexName": "index1",
    ﻿
        "version": "123456",
    ﻿
        "buildDeployId": "20201010"
    ﻿
      }
    ﻿
    ]', example='{}', position='Body'),
}

model ModifyIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='result', example='{}'),
}

model ModifyIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIndexVersionResponseBody(name='body'),
}

/**
  * ## Method
  *     PUT
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
  *
 */
async function modifyIndexVersion(request: ModifyIndexVersionRequest): ModifyIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexVersion', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model ModifyNodeConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42p5oi202', position='Path'),
  active?: boolean(name='active', position='Body'),
  dataDuplicateNumber?: int32(name='dataDuplicateNumber', position='Body'),
  dataFragmentNumber?: int32(name='dataFragmentNumber', position='Body'),
  minServicePercent?: int32(name='minServicePercent', position='Body'),
  published?: boolean(name='published', position='Body'),
  clusterName?: string(name='clusterName', description='The ID of the cluster.', example='vpc_sh_domain_2', position='Query'),
  dataSourceName?: string(name='dataSourceName', description='The parameters in the request body.', example='ha-cn-2r42ostoc01_0704', position='Query'),
  name: string(name='name', description='The name of the cluster.', example='ha-cn-zvp2iv9a401_qrs', position='Query'),
  type: string(name='type', description='The original name of the node.', example='" "', position='Query'),
}

model ModifyNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='auditing', example='{}'),
}

model ModifyNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodeConfigResponseBody(name='body'),
}

/**
  * ### Method
  *  ~~~
  * PUT
  * ~~~
  * ### URI
  * ~~~
  * /openapi/ha3/instances/{instanceId}/node-config?type=qrs&name=test
  * ~~~
  *
 */
async function modifyNodeConfig(request: ModifyNodeConfigRequest): ModifyNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model ModifyOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the edge instance', example='ha-cn-7mz2ougaw02', position='Path'),
  nodeName: string(name='nodeName', description='The name of the document', example='general', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='adsfasd', position='Path'),
  body?: map[string]string(name='body', description='ashortdescriptionofstruct', position='Body'),
}

model ModifyOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyOnlineConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOnlineConfigResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * put
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}
  * ```
  *
 */
async function modifyOnlineConfig(request: ModifyOnlineConfigRequest): ModifyOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}', 'json', false, 'json', request);
}

model ModifyPasswordRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7pp2pcna701', position='Path'),
  password?: string(name='password', description='The password', example='******************************', position='Body'),
  username?: string(name='username', description='The username', example='"username"', position='Body'),
}

model ModifyPasswordResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPasswordResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/password`
  *
 */
async function modifyPassword(request: ModifyPasswordRequest): ModifyPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPassword', 'PUT', '/openapi/ha3/instances/{instanceId}/password', 'json', false, 'json', request);
}

model PublishAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7e22rof5304', position='Path'),
  configName: string(name='configName', description='The name of the configuration', example='ha-cn-0ju2rrogr01_online_config_v3', position='Path'),
  body?: map[string]any(name='body', description='The structure of the request', example='{\\"desc\\":\\"new version\\"}', position='Body'),
}

model PublishAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model PublishAdvanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PublishAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  * ~~~
  * POST
  * ~~~
  * ## URI
  * ~~~
  * /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish
  * ~~~
  *
 */
async function publishAdvanceConfig(request: PublishAdvanceConfigRequest): PublishAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishAdvanceConfig', 'POST', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish', 'json', false, 'json', request);
}

model PublishIndexVersionRequest {
  instanceId: string(name='instanceId', description='Publishes a specified index version.', example='ha-cn-tl32m2c4u01', position='Path'),
  indexName: string(name='indexName', description='WB01240825', example='automobile_2d', position='Path'),
  body?: map[string]any(name='body', example='{}', position='Body'),
}

model PublishIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', example='{}'),
}

model PublishIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishIndexVersionResponseBody(name='body'),
}

/**
  * The information about the index
  *
 */
async function publishIndexVersion(request: PublishIndexVersionRequest): PublishIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishIndexVersion', 'POST', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish', 'json', false, 'json', request);
}

model RecoverIndexRequest {
  instanceId: string(name='instanceId', description='Restores data from an index.', example='ha-cn-zvp2jlr2g03', position='Path'),
  buildDeployId?: int32(name='buildDeployId', description='buildDeployId', example='277', position='Body'),
  dataSourceName?: string(name='dataSourceName', example='ha-cn-pl32rf0js04_odps_first', position='Body'),
  generation?: string(name='generation', description='generation', example='1653018575', position='Body'),
  indexName?: string(name='indexName', example='main_index', position='Body'),
}

model RecoverIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model RecoverIndexResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverIndexResponseBody(name='body'),
}

/**
  * The name of the index
  *
 */
async function recoverIndex(request: RecoverIndexRequest): RecoverIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverIndex', 'POST', '/openapi/ha3/instances/{instanceId}/recover-index', 'json', false, 'json', request);
}

model RemoveClusterRequest {
  instanceId: string(name='instanceId', example='ha-cn-7mz2iv7sq01', position='Path'),
  clusterName?: string(name='clusterName', example='bj_vpc_domain_2', position='Path'),
}

model RemoveClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', example='{}'),
}

model RemoveClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveClusterResponseBody(name='body'),
}

/**
  * The result
  *
 */
async function removeCluster(request: RemoveClusterRequest): RemoveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveCluster', 'DELETE', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model StopTaskRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7mz2nx41h01', position='Path'),
  fsmId: string(name='fsmId', description='The ID of the device that has stopped', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-0ju2rrogr01_test_api_2@sz_vpc_domain_1@null@MANUAL-ha-cn-0ju2rrogr01_test_api_2@1657511220772@165343', position='Path'),
}

model StopTaskResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model StopTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopTaskResponseBody(name='body'),
}

/**
  * The information about the index
  *
 */
async function stopTask(request: StopTaskRequest): StopTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTask', 'PUT', '/openapi/ha3/instances/{instanceId}/stop-task/{fsmId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42mu9xi01', position='Path'),
  components?: [ 
    {
      code?: string(name='code', description='The name of the specification. The value must be the same as the name of a parameter on the buy page.', example='200'),
      value?: string(name='value', description='The value of the specification.', example='""'),
    }
  ](name='components', description='The information about the instance type.', position='Body'),
  description?: string(name='description', description='The description of the instance.', example='""', position='Body'),
  orderType?: string(name='orderType', description='The type of the order. Valid values: UPGRADE and DOWNGRADE. UPGRADE indicates the instance type is to be upgraded. DOWNGRADE indicates the instance type is to be downgraded.', example='""', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method of the instance.', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The service code.', example='ha3-code'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2018-12-06T11:17:49.0'),
    description?: string(name='description', description='The description of the instance.', example='Test instance'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires.', example='2019-01-06T16:00:00.0'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved.', example='false'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-0ju2s170b03'),
    lockMode?: string(name='lockMode', description='The lock mode of the instance.', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aeky6hthboewpuy'),
    status?: string(name='status', description='The state of the instance.', example='Running'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated.', example='2018-12-06T11:17:49.0'),
  }(name='result', description='The result returned.'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  *
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model VariablesValue = {
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable cannot be modified.', example='false'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='false'),
  value?: string(name='value', description='The value of the variable.', example='""'),
  description?: string(name='description', description='The description about the variable.', example='""'),
  templateValue?: string(name='templateValue', description='The value of the template.', example='""'),
  type?: string(name='type', description='The type of the variable. Valid values:

*   NORMAL: a normal variable
*   FUNCTION: a function variable', example='NORMAL'),
  funcValue?: {
    funcClassName?: string(name='funcClassName', description='The class name.', example='""'),
    template?: string(name='template', description='The template of the variable.', example='""'),
  }(name='funcValue', description='The function variable.'),
}

