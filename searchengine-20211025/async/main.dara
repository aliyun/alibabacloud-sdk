/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'searchengine';
  @version = '2021-10-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ErrorResponse {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
}

model BuildIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2iv7sq01', position='Path'),
  buildMode?: string(name='buildMode', description='The reindexing mode.', example='indexRecover', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='my_data_source', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source.', example='swift', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='The timestamp in seconds. It is of the INT type. This parameter is required for the API-pushed data source.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The data center where the data source is deployed.', example='test', position='Body'),
  generation?: long(name='generation', description='The data restoration version.', example='160131146', position='Body'),
  partition?: string(name='partition', description='This parameter is required for the odps data source.', example='20201010', position='Body'),
}

model BuildIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The list of clusters', example='{}'),
}

model BuildIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuildIndexResponseBody(name='body'),
}

/**
  * ## Method
  *     POST
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/actions/build-index
  *
 */
async function buildIndex(request: BuildIndexRequest): BuildIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildIndex', 'POST', '/openapi/ha3/instances/{instanceId}/actions/build-index', 'json', false, 'json', request);
}

model CreateClusterRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2k3qer02', position='Path'),
  autoLoad?: boolean(name='autoLoad', description='The remarks of the query node', example='true', position='Body'),
  dataNode?: {
    number?: int32(name='number', description='The number of data nodes', example='2'),
  }(name='dataNode', description='The description of the data node', position='Body'),
  description?: string(name='description', description='The description of the cluster', example='"ha-tets"', position='Body'),
  name?: string(name='name', description='The name of the node', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  queryNode?: {
    number?: int32(name='number', description='The number of nodes to query', example='2'),
  }(name='queryNode', description='The description of the query node', position='Body'),
}

model CreateClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * ### Method
  * `POST`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/clusters`
  *
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.', example='ha-cn-7e22rgfyb01', position='Path'),
  autoBuildIndex?: boolean(name='autoBuildIndex', position='Body'),
  config?: {
    accessKey?: string(name='accessKey'),
    accessSecret?: string(name='accessSecret'),
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    namespace?: string(name='namespace'),
    ossPath?: string(name='ossPath'),
    partition?: string(name='partition'),
    path?: string(name='path'),
    project?: string(name='project'),
    table?: string(name='table'),
  }(name='config', position='Body'),
  domain?: string(name='domain', position='Body'),
  name?: string(name='name', position='Body'),
  saroConfig?: {
    namespace?: string(name='namespace'),
    tableName?: string(name='tableName'),
  }(name='saroConfig', position='Body'),
  type?: string(name='type', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform a dry run. This parameter is only used to check whether the data source is valid. Valid values: true and false.', example='true', position='Query'),
}

model CreateDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The returned results.', example='{}'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSource', 'POST', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model CreateIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ppr7901', position='Path'),
  content?: string(name='content', description='The content of the index.', example='{\\"summarys\\":{\\"summary_fields\\":[\\"id\\"]},\\"indexs\\":[{\\"index_name\\":\\"index_id\\",\\"index_type\\":\\"PRIMARYKEY64\\",\\"index_fields\\":\\"id\\",\\"has_primary_key_attribute\\":true,\\"is_primary_key_sorted\\":false}],\\"attributes\\":[\\"id\\"],\\"fields\\":[{\\"field_name\\":\\"id\\",\\"field_type\\":\\"UINT16\\"}],\\"table_name\\":\\"index_2\\"}', position='Body'),
  dataSource?: string(name='dataSource', description='Optional. The data source, which can be MaxCompute, Message Service (MNS), Realtime Compute for Apache Flink, or StreamCompute.', example='test1', position='Body'),
  dataSourceInfo?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', description='Specifies whether to enable the automatic full indexing feature.', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='The AccessKey ID of the MaxCompute data source.', example='L***p'),
      accessSecret?: string(name='accessSecret', description='The AccessKey secret of the MaxCompute data source.', example='5**9a6'),
      bucket?: string(name='bucket', description='oss bucket', example='test-bucket'),
      endpoint?: string(name='endpoint', description='The endpoint of the MaxCompute or Object Storage Service (OSS) data source.', example='https://oss-cn-hangzhou.aliyuncs.com'),
      namespace?: string(name='namespace', example='test-namespace'),
      ossPath?: string(name='ossPath', example='/opensearch/oss.json'),
      partition?: string(name='partition', description='The data partition. This parameter is required if type is set to odps.', example='ds=20230114'),
      path?: string(name='path', example='test-hdfs-path'),
      project?: string(name='project', description='The name of the MaxCompute project that is used as the data source.', example='bbt_algo_pai'),
      table?: string(name='table', description='The name of the table.', example='bbt_rec_swing_u2i2i_score_be_v1'),
    }(name='config', description='The information about the MaxCompute data source.'),
    dataTimeSec?: int32(name='dataTimeSec', example='1709715164'),
    domain?: string(name='domain', description='The data center where the data source is deployed.', example='vpc_hz_domain_1'),
    name?: string(name='name', description='The name of the index.', example='ha-cn-35t3n1yuj0d_index_1'),
    processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.', example='4'),
    saroConfig?: {
      namespace?: string(name='namespace'),
      tableName?: string(name='tableName'),
    }(name='saroConfig'),
    type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, and oss.', example='odps'),
  }(name='dataSourceInfo', description='The information about the data source, which is required for the new version of OpenSearch Vector Search Edition.', position='Body'),
  domain?: string(name='domain', description='The data center in which the data source resides.', example='vpc_hz_domain_1', position='Body'),
  extend?: map[string]any(name='extend', description='The extended configurations of the field. Keys such as vector and embedding are included. Vector indicates the vector field. Embedding indicates the field that requires embedding.', example='{
        "vector":
        [
            "source_image_vector"
        ],
        "embeding":
        [
            "source_image"
        ],
        "description":
        []
    }', position='Body'),
  name?: string(name='name', description='The name of the index.', example='ha-cn-zvp2qr1sk01_qrs', position='Body'),
  partition?: int32(name='partition', description='The data partition.', example='20211202', position='Body'),
  dryRun?: boolean(name='dryRun', example='true', position='Query'),
}

model CreateIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIndexResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * POST
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/indexes
  * ```
  *
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  chargeType?: string(name='chargeType', description='The billing method of the instance. Valid values: PREPAY and POSTPAY. PREPAY indicates the instance is a subscription instance. When you set this parameter to PREPAY, make sure that your Alibaba Cloud account supports balance payment or credit card payment. Otherwise, the system returns the InvalidPayMethod error message. If you set this parameter to PREPAY, you must also specify the paymentInfo parameter. POSTPAY indicates that the instance is a pay-as-you-go instance. This billing method is not supported.', example='""', position='Body'),
  components?: [ 
    {
      code?: string(name='code', description='The specification code, which must be consistent with values of the corresponding module parameters.', example='""'),
      value?: string(name='value', description='Values that you specify for the corresponding module components on the buy page.', example='""'),
    }
  ](name='components', description='A list of instance-related specifications.', position='Body'),
  order?: {
    autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal. Valid values: true and false.', example='true'),
    duration?: long(name='duration', description='The billing duration. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 12.', example='29'),
    pricingCycle?: string(name='pricingCycle', description='The unit of the billing duration. Valid values: Month and Year.', example='""'),
  }(name='order', description='The billing information.', position='Body'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ppr7901'),
  }(name='result', description='The result returned'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `POST`
  * ### URI
  * `/api/instances?dryRun=false`
  *
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model CreateTableRequest {
  instanceId: string(name='instanceId', example='ha-cn-tl32n3iu801', position='Path'),
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', example='source_image_vector'),
      operator?: string(name='operator', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', description='OSSBucket', example='test'),
          ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', example='uid'),
        }(name='srcFieldConfig'),
        vectorModal?: string(name='vectorModal', example='image'),
        vectorModel?: string(name='vectorModel', example='clip'),
      }(name='params'),
      srcField?: string(name='srcField', example='source_image'),
    }
  ](name='dataProcessConfig', position='Body'),
  dataProcessorCount?: int32(name='dataProcessorCount', example='1', position='Body'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    config?: {
      accessKey?: string(name='accessKey', example='ak'),
      accessSecret?: string(name='accessSecret', example='as'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-flytest-ci'),
      endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20220713'),
      project?: string(name='project', example='project_20210220122847_3218'),
      table?: string(name='table', example='test56'),
    }(name='config'),
    dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
    type?: string(name='type', example='odps'),
  }(name='dataSource', position='Body'),
  fieldSchema?: map[string]string(name='fieldSchema', position='Body'),
  name?: string(name='name', example='index_1', position='Body'),
  partitionCount?: int32(name='partitionCount', example='1', position='Body'),
  primaryKey?: string(name='primaryKey', example='id', position='Body'),
  rawSchema?: string(name='rawSchema', example='{}', position='Body'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', example='{}'),
      }(name='advanceParams'),
      dimension?: string(name='dimension', example='128'),
      distanceType?: string(name='distanceType', example='SquaredEuclidean'),
      indexName?: string(name='indexName', example='case_index'),
      namespace?: string(name='namespace', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', example='sparse_values'),
      vectorField?: string(name='vectorField', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', example='Qc'),
    }
  ](name='vectorIndex', position='Body'),
  dryRun?: boolean(name='dryRun', example='true', position='Query'),
}

model CreateTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableResponseBody(name='body'),
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTable', 'POST', '/openapi/ha3/instances/{instanceId}/tables', 'json', false, 'json', request);
}

model DeleteAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-0ju2rps6c08', position='Path'),
  configName?: string(name='configName', description='The configuration name.', example='ha-cn-0ju2rps6c08_offline_adv_v1', position='Path'),
}

model DeleteAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model DeleteAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  *
 */
async function deleteAdvanceConfig(request: DeleteAdvanceConfigRequest): DeleteAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAdvanceConfig', 'DELETE', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2rps6c08', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source', example='ha-cn-0ju2rps6c08_api_test', position='Path'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * ## Method
  * `DELETE`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
  *
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSource', 'DELETE', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model DeleteIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42p5oi202', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='generation', position='Path'),
  dataSource: string(name='dataSource', description='The data source', example='ha-cn-pl32rf0js04_test', position='Query'),
  deleteDataSource?: boolean(name='deleteDataSource', position='Query'),
}

model DeleteIndexResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexResponseBody(name='body'),
}

/**
  * ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}?dataSource=xxx
  *
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model DeleteIndexVersionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2rrogr01', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='generation', position='Path'),
  versionName: string(name='versionName', description='The name of the version', example='ha-cn-pl32rf0js04@ha-cn-pl32rf0js04_shenzhen_test_01@sz_vpc_domain_1@api_test@index_config_v1', position='Path'),
}

model DeleteIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model DeleteIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIndexVersionResponseBody(name='body'),
}

/**
  * ## Method
  *     DELETE
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}
  *
 */
async function deleteIndexVersion(request: DeleteIndexVersionRequest): DeleteIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndexVersion', 'DELETE', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7pp2m0ozr01', position='Path'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `DELETE`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteTableRequest {
  instanceId: string(name='instanceId', example='ha-cn-7e22rgfyb01', position='Path'),
  tableName: string(name='tableName', example='test_summary', position='Path'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model DeleteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableResponseBody(name='body'),
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTable', 'DELETE', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='acceptLanguage', example='zh-cn', position='Query'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: [ 
    {
      endpoint?: string(name='endpoint', example='endpoint'),
      localName?: string(name='localName', example='China (Hangzhou)'),
      regionId?: string(name='regionId', example='cn-hangzhou'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/openapi/ha3/regions', 'json', false, 'json', request);
}

model ForceSwitchRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-tl32m2c4u01', position='Path'),
  fsmId: string(name='fsmId', description='The ID of the FSM task', example='tisplus_opensearch@roll_index_fsm@ha-cn-0ju2je4zj01@bj_vpc_domain_2@null@bj_vpc_domain_2_general_odps_false@1644312508597@934743', position='Path'),
}

model ForceSwitchResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='0B1FF998-BB8D-5182-BFC0-E471AA77095A'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ForceSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ForceSwitchResponseBody(name='body'),
}

/**
  * \\### Method
  * ```java
  * PUT
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/force-switch/{fsmId}
  * ```
  *
 */
async function forceSwitch(request: ForceSwitchRequest): ForceSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ForceSwitch', 'PUT', '/openapi/ha3/instances/{instanceId}/force-switch/{fsmId}', 'json', false, 'json', request);
}

model GetAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-18qug6zlc1r', position='Path'),
  configName: string(name='configName', description='The configuration name.', example='ha-cn-18qug6zlc1r_offline_adv_edit', position='Path'),
  type?: string(name='type', position='Query'),
}

model GetAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: {
    content?: string(name='content', description='The content of the configuration that is returned.'),
    contentType?: string(name='contentType', description='The type of the configuration content. Valid values: FILE, GIT, HTTP, and ODPS.'),
    desc?: string(name='desc', description='The description.', example='close alarm, chiji id 37080'),
    files?: [ 
      {
        fullPathName?: string(name='fullPathName', description='The name of the file path.', example='""'),
        isDir?: boolean(name='isDir', description='Indicates whether it is a directory.', example='True'),
        isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template.', example='True'),
        name?: string(name='name', description='The name.', example='ha-cn-2r42ostoc01_qrs'),
      }
    ](name='files', description='The information about files.'),
    name?: string(name='name', description='The name.', example='ha-cn-0ju2s170b03_qrs'),
    status?: string(name='status', description='The status.', example='0,1,3,6,8'),
    updateTime?: long(name='updateTime', description='The update time.', example='""'),
  }(name='result', description='The returned results.'),
}

model GetAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}
  *
 */
async function getAdvanceConfig(request: GetAdvanceConfigRequest): GetAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfig', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}', 'json', false, 'json', request);
}

model GetAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The name of the configuration', example='ha-cn-7pp2pcna701_online_config_v5', position='Path'),
  fileName: string(name='fileName', description='The name of the file', example='/intervene_dict/chn_ecommerce_general.dict', position='Query'),
}

model GetAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: {
    content?: string(name='content', description='The content of the file', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
  }(name='result', description='The result'),
}

model GetAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAdvanceConfigFileResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
  *
 */
async function getAdvanceConfigFile(request: GetAdvanceConfigFileRequest): GetAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAdvanceConfigFile', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model GetClusterRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2rq6610a', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='bj_vpc_domain_2', position='Path'),
}

model GetClusterResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='2021-08-09 00:01:02'),
    currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced configuration version.', example='test_yyds_data1'),
    currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='test_yyds_data1'),
    dataNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of replicas.', example='1'),
      partition?: int32(name='partition', description='The number of partitions.', example='2'),
    }(name='dataNode', description='The specifications of the data node.'),
    description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
    latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='test_yyds_data1'),
    latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='test_yyds_data1'),
    name?: string(name='name', description='The name of the cluster.', example='general'),
    queryNode?: {
      name?: string(name='name', description='The name of the node.', example='test'),
      number?: int32(name='number', description='The number of nodes.', example='1'),
      partition?: int32(name='partition', description='The number of replicas.', example='2'),
    }(name='queryNode', description='The specifications of the query node.'),
    status?: string(name='status', description='The creation status of the cluster. Valid values: NEW and PUBLISH. NEW indicates that the cluster is being created. PUBLISH indicates that the cluster is created.', example='NEW'),
  }(name='result', description='The list of the cluster details.'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instance/{instanceId}/clusters/{clusterName}`
  *
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCluster', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model GetClusterRunTimeInfoRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ncw4102', position='Path'),
}

model GetClusterRunTimeInfoResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_hz_domain_1'),
      dataNodes?: [ 
        {
          configStatusList?: [ 
            {
              configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='""'),
              donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='1'),
              name?: string(name='name', description='The name of the cluster.', example='test_0704'),
              totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='0'),
            }
          ](name='configStatusList', description='The configuration status list.'),
          dataStatusList?: [ 
            {
              advanceConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version number.', example='1.0'),
              }(name='advanceConfigInfo', description='The information about advanced configurations.'),
              deployFailedWorker?: [ string ](name='deployFailedWorker', description='The name of the worker that failed because of a deployment failure.'),
              docSize?: int32(name='docSize', description='The storage capacity. Unit: GB.', example='2'),
              donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
              doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
              errorMsg?: string(name='errorMsg', description='The error message.', example='0A3B1C48006A6C0905F6375F4821EB50'),
              fullUpdateTime?: string(name='fullUpdateTime', description='The time when the full data was updated.', example='" "'),
              fullVersion?: long(name='fullVersion', description='The full version.', example='123423'),
              incUpdateTime?: string(name='incUpdateTime', description='The time when the incremental data was updated.', example='""'),
              incVersion?: long(name='incVersion', description='The incremental version.', example='123423'),
              indexConfigInfo?: {
                configMetaName?: string(name='configMetaName', description='The name of the index configuration.', example='index_meta_name'),
                version?: long(name='version', description='The version of the index template.', example='1.0.0'),
              }(name='indexConfigInfo', description='The configuration information of the index.'),
              indexSize?: long(name='indexSize', description='The size of the index.', example='100'),
              lackDiskWorker?: [ string ](name='lackDiskWorker', description='The name of the worker that failed because of insufficient disk space.'),
              lackMemWorker?: [ string ](name='lackMemWorker', description='The name of the worker that failed because of insufficient memory.'),
              name?: string(name='name', description='The name of the node.', example='ha-cn-c4d2rq7nt04_qrs'),
              totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='1'),
            }
          ](name='dataStatusList', description='The dataStatusList.'),
          serviceStatus?: {
            donePercent?: int32(name='donePercent', description='The overall progress.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of nodes being processed in the cluster.', example='100'),
            name?: string(name='name', description='The name.', example='ha-cn-0ju2s170b03_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of nodes in the cluster.', example='100'),
          }(name='serviceStatus', description='The service status.'),
        }
      ](name='dataNodes', description='The information about the data node.'),
      queryNode?: {
        configStatusList?: [ 
          {
            configUpdateTime?: string(name='configUpdateTime', description='The time when the cluster was updated.', example='" "'),
            donePercent?: int32(name='donePercent', description='The progress.', example='100'),
            doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
            name?: string(name='name', description='The name of the cluster.', example='ha-cn-zvp2qr1sk01_qrs'),
            totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='6'),
          }
        ](name='configStatusList', description='The dataStatusList.'),
        serviceStatus?: {
          donePercent?: int32(name='donePercent', description='The progress.', example='100'),
          doneSize?: int32(name='doneSize', description='The number of nodes that are configured.', example='100'),
          name?: string(name='name', description='The name of the cluster.', example='ha-cn-c4d2rq7nt04_qrs'),
          totalSize?: int32(name='totalSize', description='The total number of nodes that you specify when you create the cluster.', example='100'),
        }(name='serviceStatus', description='The service status.'),
      }(name='queryNode', description='The information about the query node.'),
    }
  ](name='result', description='The result set.'),
}

model GetClusterRunTimeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterRunTimeInfoResponseBody(name='body'),
}

/**
  * ### Method
  * GET
  * ### URI
  * /openapi/ha3/instances/{instanceId}/cluster-run-time-info
  *
 */
async function getClusterRunTimeInfo(request: GetClusterRunTimeInfoRequest): GetClusterRunTimeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterRunTimeInfo', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-run-time-info', 'json', false, 'json', request);
}

model GetDataSourceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source', example='ha-cn-2r42ostoc01_people_info', position='Path'),
}

model GetDataSourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: {
    domain?: string(name='domain', description='The data center where the data source is deployed in offline mode', example='vpc_hz_domain_1'),
    indexes?: [ string ](name='indexes', description='The list of index information'),
    lastFulTime?: long(name='lastFulTime', description='The time when an index for full data was last built'),
    name?: string(name='name', description='The name of the data source', example='my_index'),
    status?: string(name='status', description='The state of the data source', example='NEW'),
    type?: string(name='type', description='The type of the data source', example='odps'),
  }(name='result', description='The list of information about the data source'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
  *
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSource', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model GetDataSourceDeployRequest {
  instanceId: string(name='instanceId', example='ha-cn-uax37kni501', position='Path'),
  deployName: string(name='deployName', example='vpc_hz_domain_1', position='Path'),
  dataSourceName: string(name='dataSourceName', example='ha-cn-9lb34d9ee01_image_embedding', position='Path'),
}

model GetDataSourceDeployResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    extend?: {
      hdfs?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
      }(name='hdfs'),
      odps?: {
        partitions?: map[string]string(name='partitions'),
      }(name='odps'),
      oss?: {
        path?: string(name='path', example='oss://opensearch'),
      }(name='oss'),
      saro?: {
        path?: string(name='path', example='dist-dmj-job/src/main/java'),
        version?: string(name='version', example='0.6.0'),
      }(name='saro'),
    }(name='extend'),
    processor?: {
      args?: string(name='args', example='{}'),
      resource?: string(name='resource', example='{}'),
    }(name='processor'),
    storage?: {
      accessKey?: string(name='accessKey', description='AK', example='ak'),
      accessSecret?: string(name='accessSecret', description='AS', example='as'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-miniapp-chongwen-static'),
      endpoint?: string(name='endpoint', description='odps endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      namespace?: string(name='namespace', example='lazada-campaign-flink'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20220926'),
      path?: string(name='path', example='/beiming_xobject/dwd_xobjectsandbox__list_create_action_by_new/'),
      project?: string(name='project', example='wireless_1688_personal_rec'),
      table?: string(name='table', example='behavior'),
    }(name='storage'),
    swift?: {
      topic?: string(name='topic', description='topic', example='topic'),
      zk?: string(name='zk', description='zk', example='zk'),
    }(name='swift'),
  }(name='result', description='Deploy'),
}

model GetDataSourceDeployResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceDeployResponseBody(name='body'),
}

async function getDataSourceDeploy(request: GetDataSourceDeployRequest): GetDataSourceDeployResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataSourceDeploy', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/deploys/{deployName}', 'json', false, 'json', request);
}

model GetDeployGraphRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetDeployGraphResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    graph?: {
      indexMetas?: [ 
        {
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tableName?: string(name='tableName'),
          tag?: string(name='tag'),
          zoneName?: string(name='zoneName'),
        }
      ](name='indexMetas', description='索引元信息'),
      onlineMaster?: [ 
        {
          domainName?: string(name='domainName'),
          hippoId?: string(name='hippoId'),
          id?: long(name='id'),
          name?: string(name='name'),
        }
      ](name='onlineMaster', description='在线集群元信息'),
      tableIndexRelation?: map[string][ string ](name='tableIndexRelation', description='数据源和索引关联关系'),
      tableMetas?: [ 
        {
          buildDeployId?: long(name='buildDeployId'),
          domainName?: string(name='domainName'),
          name?: string(name='name'),
          tableDeployId?: long(name='tableDeployId'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='tableMetas', description='数据源元信息'),
      zoneIndexRelation?: map[string][ string ](name='zoneIndexRelation', description='zone和索引关联关系'),
      zoneMetas?: [ 
        {
          domainInfo?: string(name='domainInfo'),
          name?: string(name='name'),
          suezAdminName?: string(name='suezAdminName'),
          tag?: string(name='tag'),
          type?: string(name='type'),
        }
      ](name='zoneMetas', description='zone元信息'),
    }(name='graph'),
  }(name='result', description='The result returned', example='{}'),
}

model GetDeployGraphResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeployGraphResponseBody(name='body'),
}

/**
  * ## Method
  * GET
  * ## URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/deploy-graph
  * ```
  *
 */
async function getDeployGraph(request: GetDeployGraphRequest): GetDeployGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeployGraph', 'GET', '/openapi/ha3/instances/{instanceId}/deploy-graph', 'json', false, 'json', request);
}

model GetFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-i7m2rpzm605', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='ecmon_table_index_test', position='Path'),
  versionName: string(name='versionName', description='The name of the version', example='ha-cn-tl32nd2nq01@ha-cn-tl32nd2nq01_00@bj_vpc_domain_1@point_cloud_3d@index_config_edit', position='Path'),
  fileName: string(name='fileName', description='The name of the file in full path', example='/schemas/automobile_vector_schema.json', position='Query'),
}

model GetFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    content?: string(name='content', description='The content of the file.', example='None'),
    dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-2r42p5oi202_xijie_test'),
    fullPathName?: string(name='fullPathName', description='The name of the full path.', example='""'),
    isDir?: boolean(name='isDir', description='Indicates whether it is a directory.', example='True'),
    name?: string(name='name', description='The name of the file.', example='ha-cn-2r42ostoc01_qrs'),
    partition?: long(name='partition', description='The number of shards.', example='ds=20210828'),
  }(name='result', description='The information about the index.'),
}

model GetFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
  *
 */
async function getFile(request: GetFileRequest): GetFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFile', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model GetIndexRequest {
  instanceId: string(name='instanceId', description='## Sample requests

    GET  /openapi/ha3/instances/ose-test1/indexes/index1?dataSource=xxx', example='ha-cn-8ed2j834u03', position='Path'),
  indexName: string(name='indexName', description='## Sample responses

Success responses

    {
      "requestId": "e1eef569-1ff7-4bf8-acf7-1cecca9894ce",
      "result": {
        "name": "index1",
        "dataSource": "test_yyds_data1",
        "versions": [
          {
            "name": "my_index_1",
            "versionId": 1,
            "status": "drafting",
            "updateTime": "1631070464000",
            "desc": "test",
            "files": [
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              },
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              }
            ]
          },
          {
            "name": "my_index_2",
            "versionId": 1,
            "status": "drafting",
            "updateTime": "1631070464000",
            "desc": "test",
            "files": [
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              },
              {
                "fullPathName": "/",
                "isDir": true,
                "isTemplate": true,
                "name": "cava"
              }
            ]        
          }
        ]
      }
    }', example='index_jiayi_text', position='Path'),
}

model GetIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: {
    content?: string(name='content', description='The content of the index.'),
    dataSource?: string(name='dataSource', example='ha-cn-tl32nd2nq01_00'),
    dataSourceInfo?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', description='Indicates whether the automatic full indexing feature is enabled.'),
      config?: {
        accessKey?: string(name='accessKey'),
        accessSecret?: string(name='accessSecret'),
        bucket?: string(name='bucket'),
        endpoint?: string(name='endpoint', description='A parameter related to MaxCompute.'),
        namespace?: string(name='namespace', description='A parameter related to SARO.'),
        ossPath?: string(name='ossPath', description='A parameter related to OSS.'),
        partition?: string(name='partition'),
        path?: string(name='path', description='A parameter related to Apsara File Storage for HDFS.'),
        project?: string(name='project'),
        table?: string(name='table', description='A parameter related to SARO and MaxCompute.'),
      }(name='config', description='The configuration of MaxCompute data sources.'),
      domain?: string(name='domain', description='The offline deployment name of the data source.'),
      name?: string(name='name', description='The name of the data source.'),
      processPartitionCount?: int32(name='processPartitionCount', description='The number of resources used for data update.'),
      saroConfig?: {
        namespace?: string(name='namespace'),
        tableName?: string(name='tableName'),
      }(name='saroConfig', description='The configuration of SARO data sources.'),
      type?: string(name='type', description='The type of the data source. Valid values: odps, swift, saro, oss, and unKnow.'),
    }(name='dataSourceInfo', description='The information about the data source.'),
    description?: string(name='description', description='The remarks.'),
    domain?: string(name='domain'),
    fullUpdateTime?: string(name='fullUpdateTime', description='The last time when full data in the index was updated.'),
    fullVersion?: long(name='fullVersion', description='The version of the data.'),
    incUpdateTime?: string(name='incUpdateTime', description='The last time when incremental data in the index was updated.'),
    indexSize?: long(name='indexSize', description='The index size.'),
    indexStatus?: string(name='indexStatus', description='The status of the index. Valid values: NEW, PUBLISH, IN_USE, NOT_USE, STOP_USE, and RESTORE_USE. After a Retrieval Engine Edition instance is created, it enters the IN_USE state.'),
    name?: string(name='name', example='general'),
    partition?: int32(name='partition', description='The number of shards.'),
    versions?: [ 
      {
        desc?: string(name='desc', description='The description of the version.', example='close alarm, by 3.9.2 hotfix workflow'),
        files?: [ 
          {
            fullPathName?: string(name='fullPathName', description='The full path of the file.', example='" "'),
            isDir?: boolean(name='isDir', description='Indicates whether the file is a directory.', example='True'),
            isTemplate?: boolean(name='isTemplate', description='Indicates whether the file is a template.', example='True'),
            name?: string(name='name'),
          }
        ](name='files', description='The information about the files.'),
        name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
        status?: string(name='status', description='The status of the version.', example='2'),
        updateTime?: long(name='updateTime', description='The last time when the version was updated.', example='" "'),
        versionId?: int32(name='versionId', description='The ID of the version.', example='1'),
      }
    ](name='versions', description='The information about the versions.'),
  }(name='result', description='The information about the index.'),
}

model GetIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexResponseBody(name='body'),
}

async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}', 'json', false, 'json', request);
}

model GetIndexVersionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
  clusterName: string(name='clusterName', description='The name of the cluster', example='vpc_hz_domain_1', position='Path'),
}

model GetIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    cluster?: string(name='cluster', description='The name of the cluster', example='ayoss-cn-zhangjiakou-b'),
    indexVersions?: [ 
      {
        buildDeployId?: string(name='buildDeployId', description='The ID of the index deployed in offline mode', example='" "'),
        currentVersion?: long(name='currentVersion'),
        indexName?: string(name='indexName', description='The name of the index table', example='table4'),
        versions?: [ long ](name='versions', description='The version of the index'),
      }
    ](name='indexVersions', description='The time when the cluster was updated'),
  }(name='result', description='The list of cluster details'),
}

model GetIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexVersionResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
  *
 */
async function getIndexVersion(request: GetIndexVersionRequest): GetIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndexVersion', 'GET', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7pp2pcna701', position='Path'),
}

model GetInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method.', example='POSYPAY'),
    commodityCode?: string(name='commodityCode', description='The product code.', example='commodityCode'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-06-17T02:01:26Z'),
    description?: string(name='description', description='The description of the instance.', example='ha3_test'),
    expiredTime?: string(name='expiredTime', description='The expiration time.', example='1634609702'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved.', example='false'),
    instanceId?: string(name='instanceId', description='The ID of the resource.', example='ha-cn-7mz2qsgq301'),
    lockMode?: string(name='lockMode', description='The lock status.', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzjvw24el5lma'),
    status?: string(name='status', description='The status of the instance. Valid values:

*   INIT: being initialized
*   WAIT_CONFIG: to be configured
*   CONFIG_UPDATING: configuration taking effect
*   READY: normal', example='INIT'),
    tags?: [ 
      {
        key?: string(name='key', description='标签键', example='env'),
        value?: string(name='value', description='标签值', example='prod'),
      }
    ](name='tags', description='标签。'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated.', example='1634609702'),
  }(name='result', description='The result returned.'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  *
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model GetNodeConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2rewdi02', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='vpc_sh_domain_2', position='Query'),
  name?: string(name='name', description='The name of the cluster.', example='ha-cn-30174dhoz53_qrs', position='Query'),
  type?: string(name='type', description='The type of the node. Valid values: qrs, search, index, and cluster. qrs indicates a query node, search indicates a data node, index indicates an index node, and cluster indicates a cluster node.', example='index', position='Query'),
}

model GetNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    active?: boolean(name='active', description='Indicates whether the expression is the default one.', example='1'),
    dataDuplicateNumber?: int32(name='dataDuplicateNumber', description='The number of data replicas.', example='2'),
    dataFragmentNumber?: int32(name='dataFragmentNumber', description='The number of data shards.', example='2'),
    flowRatio?: int32(name='flowRatio'),
    minServicePercent?: int32(name='minServicePercent', description='The minimum service ratio.', example='100'),
    published?: boolean(name='published', description='Indicates whether the node is associated with the cluster.', example='true'),
  }(name='result', description='The result set.'),
}

model GetNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeConfigResponseBody(name='body'),
}

async function getNodeConfig(request: GetNodeConfigRequest): GetNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNodeConfig', 'GET', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model GetTableRequest {
  instanceId: string(name='instanceId', example='ha-cn-0ju2k3qer02', position='Path'),
  tableName: string(name='tableName', example='test_summary', position='Path'),
}

model GetTableResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: {
    dataProcessConfig?: [ 
      {
        dstField?: string(name='dstField', example='source_image_vector'),
        operator?: string(name='operator', example='vectorize'),
        params?: {
          srcFieldConfig?: {
            ossBucket?: string(name='ossBucket', description='OSS Bucket', example='test'),
            ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
            uid?: string(name='uid', example='uid'),
          }(name='srcFieldConfig'),
          vectorModal?: string(name='vectorModal', example='image'),
          vectorModel?: string(name='vectorModel', example='clip'),
        }(name='params'),
        srcField?: string(name='srcField', example='source_image'),
      }
    ](name='dataProcessConfig'),
    dataProcessorCount?: int32(name='dataProcessorCount', example='1'),
    dataSource?: {
      autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
      config?: {
        accessKey?: string(name='accessKey', description='AK', example='ak'),
        accessSecret?: string(name='accessSecret', description='AS', example='as'),
        bucket?: string(name='bucket', example='heytea-ops-oss'),
        endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
        namespace?: string(name='namespace', example='namespace'),
        ossPath?: string(name='ossPath', example='/opensearch_index_data/sift_oss_test.data'),
        partition?: string(name='partition', example='ds=20220808'),
        path?: string(name='path', example='vendor/sebastian/comparator/src/exceptions'),
        project?: string(name='project', example='dp_pdm_marketing_prod'),
        table?: string(name='table', example='test_add'),
      }(name='config'),
      dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
      type?: string(name='type', example='odps'),
    }(name='dataSource'),
    fieldSchema?: map[string]string(name='fieldSchema'),
    name?: string(name='name', example='test_oss'),
    partitionCount?: int32(name='partitionCount', example='1'),
    primaryKey?: string(name='primaryKey', example='id'),
    rawSchema?: string(name='rawSchema', example='{}'),
    status?: string(name='status'),
    vectorIndex?: [ 
      {
        advanceParams?: {
          buildIndexParams?: string(name='buildIndexParams', example='{}'),
          linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
          minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
          searchIndexParams?: string(name='searchIndexParams', example='{}'),
        }(name='advanceParams'),
        dimension?: string(name='dimension', example='128'),
        distanceType?: string(name='distanceType', example='SquaredEuclidean'),
        indexName?: string(name='indexName', example='test_odps'),
        namespace?: string(name='namespace', example='namespace'),
        sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
        sparseValueField?: string(name='sparseValueField', example='sparse_values'),
        vectorField?: string(name='vectorField', example='source_image_vector'),
        vectorIndexType?: string(name='vectorIndexType', example='Qc'),
      }
    ](name='vectorIndex'),
  }(name='result'),
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableResponseBody(name='body'),
}

async function getTable(request: GetTableRequest): GetTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTable', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model GetTableGenerationRequest {
  instanceId: string(name='instanceId', example='ha-cn-pl32rf0js04', position='Path'),
  tableName: string(name='tableName', example='test_summary', position='Path'),
  generationId: long(name='generationId', description='generationId', example='1708674867', position='Path'),
}

model GetTableGenerationResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: {
    generationId?: long(name='generationId', description='generationId', example='1708674867'),
    status?: string(name='status', description='starting, building, ready, stopped, failed', example='ready'),
  }(name='result'),
}

model GetTableGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableGenerationResponseBody(name='body'),
}

async function getTableGeneration(request: GetTableGenerationRequest): GetTableGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableGeneration', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/index_versions/{generationId}', 'json', false, 'json', request);
}

model ListAdvanceConfigDirRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-tl32n3iu801', position='Path'),
  configName: string(name='configName', description='The name of the configuration', example='ha-cn-2r42ostoc01_online_config_v3', position='Path'),
  dirName: string(name='dirName', description='The name of the directory', example='/zones/general', position='Query'),
}

model ListAdvanceConfigDirResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: [ 
    {
      fullPathName?: string(name='fullPathName', description='The name of the absolute path.', example='"/path/wpd/nae"'),
      isDir?: boolean(name='isDir', description='Indicates whether it is a directory. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
      isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template. Valid values: **true** and **false**. true indicates that it is a template, and false indicates that it is not a template.', example='true'),
      name?: string(name='name', description='The name of the cluster.', example='file_name_1'),
    }
  ](name='result', description='The file list in the advanced configuration directory.'),
}

model ListAdvanceConfigDirResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigDirResponseBody(name='body'),
}

/**
  * ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir?dirName={dirName}`
  *
 */
async function listAdvanceConfigDir(request: ListAdvanceConfigDirRequest): ListAdvanceConfigDirResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigDir', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/dir', 'json', false, 'json', request);
}

model ListAdvanceConfigsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-pl32rf0js04', position='Path'),
  dataSourceName?: string(name='dataSourceName', position='Query'),
  indexName?: string(name='indexName', position='Query'),
  type?: string(name='type', description='The type of the advanced configurations. Valid values: online and offline. - online The default value is offline.', example='online', position='Query'),
}

model ListAdvanceConfigsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content'),
      contentType?: string(name='contentType'),
      desc?: string(name='desc', description='The description.', example='test'),
      files?: [ 
        {
          fullPathName?: string(name='fullPathName', description='The name of the absolute path.', example='/path/wpd/nae'),
          isDir?: boolean(name='isDir', description='Indicates whether it is a directory. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
          isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template. Valid values: true and false. true indicates that it is a directory, and false indicates that it is not a directory.', example='true'),
          name?: string(name='name', description='The name of the file.', example='file_name_1'),
        }
      ](name='files', description='The list of file names.'),
      name?: string(name='name', description='The name of the advanced configuration.', example='my_index'),
      status?: string(name='status', description='The state of the advanced configuration. Valid values: drafting, used, unused, and trash. drafting indicates that the advanced configuration is a draft. used indicates that the advanced configuration is in use. unused indicates that the advanced configuration is unused. trash indicates that the advanced configuration is being deleted.', example='drafting'),
      updateTime?: long(name='updateTime', description='The update time.', example='1631070464000'),
    }
  ](name='result', description='The list of advanced configurations.'),
}

model ListAdvanceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdvanceConfigsResponseBody(name='body'),
}

/**
  * ## Sample requests
  * `GET /openapi/ha3/instances/ose-test1/advanced-configs`
  *
 */
async function listAdvanceConfigs(request: ListAdvanceConfigsRequest): ListAdvanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAdvanceConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/advanced-configs', 'json', false, 'json', request);
}

model ListClusterNamesRequest {
}

model ListClusterNamesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: {
    description?: string(name='description', description='The description of the cluster', example='ha3_test'),
    id?: long(name='id', description='The ID of the cluster', example='25030'),
    name?: string(name='name', description='The name of the cluster', example='my_index'),
  }(name='result', description='The result set'),
}

model ListClusterNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterNamesResponseBody(name='body'),
}

/**
  * ### Method
  * GET
  * ### URI
  * /openapi/ha3/instances/{instanceId}/cluster-names
  *
 */
async function listClusterNames(request: ListClusterNamesRequest): ListClusterNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterNames', 'GET', '/openapi/ha3/cluster-names', 'json', false, 'json', request);
}

model ListClusterTasksRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-i7m2roiy504', position='Path'),
}

model ListClusterTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='" "'),
      field3?: string(name='field3', description='The field3 field that is passed through when you create a state machine.', example='" "'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-zvp2ljiwe01_api2@bj_vpc_domain_1@null@MANUAL-ha-cn-zvp2ljiwe01_api2@1649729867698@028315'),
      groupType?: string(name='groupType', description='Indicates whether the change is a data source task change or a cluster task change.', example='" "'),
      name?: string(name='name', description='The task name on the card.', example='ha-cn-pl32rf0js04_qrs'),
      status?: string(name='status', description='The overall status of FSM.', example='onlyPublished'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The content of the tag.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The level of the tag.', example='" "'),
        }
      ](name='tags', description='The status tag of the progress bar chart.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The date when the task was completed.', example='" "'),
          index?: long(name='index', description='The sequence number of the task.', example='100'),
          name?: string(name='name', description='The name of the task.', example='general'),
          status?: string(name='status', description='The status of the task.', example='2'),
        }
      ](name='taskNodes', description='The information about the task.'),
      time?: string(name='time', description='The timestamp of the task on the card.', example='1657610520'),
      type?: string(name='type', description='The type of the task on the card.', example='qrs'),
      user?: string(name='user', description='The user who triggered the FSM process.', example='" "'),
    }
  ](name='result', description='The information about the index.'),
}

model ListClusterTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterTasksResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/cluster-tasks
  * ```
  *
 */
async function listClusterTasks(request: ListClusterTasksRequest): ListClusterTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterTasks', 'GET', '/openapi/ha3/instances/{instanceId}/cluster-tasks', 'json', false, 'json', request);
}

model ListClustersRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-zvp2jlr2g03', position='Path'),
}

model ListClustersResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: [ 
    {
      configUpdateTime?: string(name='configUpdateTime', description='The time when the configuration was updated.', example='" "'),
      currentAdvanceConfigVersion?: string(name='currentAdvanceConfigVersion', description='The effective advanced version.', example='" "'),
      currentOfflineDictConfigVersion?: string(name='currentOfflineDictConfigVersion', description='词典配置生效版本'),
      currentOnlineConfigVersion?: string(name='currentOnlineConfigVersion', description='The effective online configuration version.', example='" "'),
      currentOnlineQueryConfigVersion?: string(name='currentOnlineQueryConfigVersion', description='查询配置生效版本'),
      dataNode?: {
        name?: string(name='name', description='The name of the node.', example='ha-cn-8ed2k7brm05_qrs'),
        number?: int32(name='number', description='The number of nodes.', example='1'),
        partition?: int32(name='partition', description='The partition ID of the node.', example='dt=20220216'),
      }(name='dataNode', description='The information about the node in the cluster.'),
      description?: string(name='description', description='The description of the cluster.', example='fzz_test'),
      latestAdvanceConfigVersion?: string(name='latestAdvanceConfigVersion', description='The latest advanced configuration version.', example='" "'),
      latestOfflineDictConfigVersion?: string(name='latestOfflineDictConfigVersion', description='词典配置最新版本'),
      latestOnlineConfigVersion?: string(name='latestOnlineConfigVersion', description='The latest online configuration version.', example='" "'),
      latestOnlineQueryConfigVersion?: string(name='latestOnlineQueryConfigVersion', description='查询配置最新版本'),
      name?: string(name='name', description='The name of the cluster.', example='ha-cn-7pp2pcna701_qrs'),
      queryNode?: {
        name?: string(name='name', description='The name of the node.', example='test_0704'),
        number?: int32(name='number', description='The number of nodes.', example='1'),
        partition?: int32(name='partition', description='The number o replicas.', example='dt=20211216'),
      }(name='queryNode', description='The query node of the cluster.'),
      status?: string(name='status', description='The status of the cluster. Valid values: running, starting, stopping, and stopped. running indicates the cluster is running, starting indicates the cluster is starting, stopping indicates the cluster is stopping, and stopped indicates the cluster has stopped.', example='"starting"'),
    }
  ](name='result', description='The list of clusters.'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/clusters
  * ```
  *
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusters', 'GET', '/openapi/ha3/instances/{instanceId}/clusters', 'json', false, 'json', request);
}

model ListDataSourceSchemasRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-zvp2s4l8f02', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source', example='ha-cn-2r42ostoc01_ecom_table_test', position='Path'),
}

model ListDataSourceSchemasResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      addIndex?: boolean(name='addIndex', description='Indicates whether the index properties are added. Valid values: true and false. **true** indicates that the index properties are added, and **false** indicates that the index properties are not added.', example='false'),
      attribute?: boolean(name='attribute', description='Indicates whether it is an attribute field. Valid values: true and false. **true** indicates that it is an attribute field, and **false** indicates that it is not an attribute field.', example='false'),
      custom?: boolean(name='custom', description='Indicates whether it is a custom field. Valid values: true and false. **true** indicates that it is a custom field, and **false** indicates that it is not a custom field.', example='false'),
      name?: string(name='name', description='The name of the field.', example='test'),
      primaryKey?: {
        hasPrimaryKeyAttribute?: boolean(name='hasPrimaryKeyAttribute', description='Indicates whether it has the primary key property. **true** indicates that it has the primary key property, and **false** indicates that it does not have the primary key property.', example='false'),
        isPrimaryKey?: boolean(name='isPrimaryKey', description='Indicates whether it is the primary key. Valid values: true and false. **true** indicates that it is the primary key, and **false** indicates that it is not the primary key.', example='false'),
        isPrimaryKeySorted?: boolean(name='isPrimaryKeySorted', description='Indicates whether data is sorted based on the primary key. Valid values: true and false. **true** indicates that data is sorted based on the primary key, and **false** indicates that data is not sorted based on the primary key.', example='false'),
      }(name='primaryKey', description='The primary key.'),
      summary?: boolean(name='summary', description='Indicates whether the information can be displayed. Valid values: true and false. **true** indicates that the information can be displayed, and **false** indicates that the information cannot be displayed.', example='false'),
      type?: string(name='type', description='The type of the field.', example='STRING'),
    }
  ](name='result', description='The result returned.'),
}

model ListDataSourceSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSchemasResponseBody(name='body'),
}

/**
  * ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas`
  *
 */
async function listDataSourceSchemas(request: ListDataSourceSchemasRequest): ListDataSourceSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceSchemas', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/schemas', 'json', false, 'json', request);
}

model ListDataSourceTasksRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7e22rof5304', position='Path'),
}

model ListDataSourceTasksResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='CC5EC8FA-5C0D-56AF-BEF4-6FCCEABD0511'),
  result?: [ 
    {
      extraAttribute?: string(name='extraAttribute', description='The additional attributes of the card.', example='""'),
      field3?: string(name='field3', description='The field3 field that is passed through when you create a state machine.', example='""'),
      fsmId?: string(name='fsmId', description='fsmId', example='tisplus_opensearch@datasource_flow_fsm@1062017779051424-ha-cn-2r42ostoc01_ecom_table@vpc_hz_domain_1@null@MANUAL-ha-cn-2r42ostoc01_ecom_table@1655974525756@006754'),
      groupType?: string(name='groupType', description='Indicates whether the change is a data source task change or a cluster task change.', example='" "'),
      name?: string(name='name', description='The task name on the card.', example='general'),
      status?: string(name='status', description='The overall status of FSM.', example='2'),
      tags?: [ 
        {
          msg?: string(name='msg', description='The content of the tag.', example='succeed in handling request'),
          tagLevel?: string(name='tagLevel', description='The level of the tag.', example='""'),
        }
      ](name='tags', description='The status tag of the progress bar chart.'),
      taskNodes?: [ 
        {
          finishDate?: string(name='finishDate', description='The date when the task was completed.', example='""'),
          index?: long(name='index', description='The sequence number of the task.', example='100'),
          name?: string(name='name', description='The name of the task.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The status of the task.', example='onlyPublished'),
        }
      ](name='taskNodes', description='The information about the task.'),
      time?: string(name='time', description='The timestamp of the task on the card.', example='1646279473'),
      type?: string(name='type', description='The type of the task on the card.', example='search'),
      user?: string(name='user', description='The user who triggered the finite-state machine (FSM) process.', example='""'),
    }
  ](name='result', description='The information about the index.'),
}

model ListDataSourceTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceTasksResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/data-source-tasks
  * ```
  *
 */
async function listDataSourceTasks(request: ListDataSourceTasksRequest): ListDataSourceTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceTasks', 'GET', '/openapi/ha3/instances/{instanceId}/data-source-tasks', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
}

model ListDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: [ 
    {
      domain?: string(name='domain', description='The data center where the data source is deployed in offline mode.', example='test'),
      indexes?: [ string ](name='indexes', description='The information about indexes.'),
      lastFulTime?: long(name='lastFulTime', description='The time when an index for full data was last built.'),
      name?: string(name='name', description='The name of the data source.', example='data_source_name'),
      status?: string(name='status', description='The state of the data source.', example='new'),
      type?: string(name='type', description='The type of the data source.', example='odps'),
    }
  ](name='result', description='The result returned.'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
  * ## Method
  * `GET`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources`
  *
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources', 'json', false, 'json', request);
}

model ListDateSourceGenerationsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.', example='ha-cn-0ju2s170b03_test_api2', position='Path'),
  domainName: string(name='domainName', description='The data center where the data source is deployed.', example='bj_vpc_domain_1', position='Query'),
  validStatus?: boolean(name='validStatus', description='The valid state of the data source. Valid values: true and false. The default value of this parameter is true.

1.  true indicates that the generations that have not expired and of which the tasks have been executed are returned.
2.  false indicates that all generations are returned.', example='true', position='Query'),
}

model ListDateSourceGenerationsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='022F36C7-9FB4-5D67-BEBC-3D14B0984463'),
  result?: [ 
    {
      buildDeployId?: int32(name='buildDeployId', description='buildDeployId', example='122'),
      createTime?: long(name='createTime', description='The time to start index building.', example='1626143673'),
      dataDumpRoot?: string(name='dataDumpRoot', description='The directory where the index file created by using the dump table is saved.', example='""'),
      generation?: long(name='generation', description='The primary key of the generation.', example='1626143930'),
      partition?: map[string]int32(name='partition', description='Key indicates the name of the index. value indicates the number of shards.'),
      status?: string(name='status', description='The status.', example='STOPPED'),
      timestamp?: long(name='timestamp', description='The timestamp when the offline indexing was initiated.', example='1626143673'),
    }
  ](name='result', description='List'),
}

model ListDateSourceGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDateSourceGenerationsResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations?domainName={domainName}`
  *
 */
async function listDateSourceGenerations(request: ListDateSourceGenerationsRequest): ListDateSourceGenerationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDateSourceGenerations', 'GET', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}/generations', 'json', false, 'json', request);
}

model ListIndexesRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-2r42ostoc01', position='Path'),
  newMode?: boolean(name='newMode', description='是否为新版本控制台页面', example='true', position='Query'),
}

model ListIndexesResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='4FB0325E-8C37-5525-96AC-0333523170A3'),
  result?: [ 
    {
      content?: string(name='content', description='schema JSON', example='{"summarys":{"parameter":{"file_compressor":"zstd"},"summary_fields":["id"]},"file_compress":[{"name":"file_compressor","type":"zstd"},{"name":"no_compressor","type":""}],"indexs":[{"index_fields":"name","index_name":"ids","index_type":"STRING"},{"has_primary_key_attribute":true,"index_fields":"id","is_primary_key_sorted":false,"index_name":"id","index_type":"PRIMARYKEY64"}],"attributes":[{"file_compress":"no_compressor","field_name":"id"}],"fields":[{"user_defined_param":{},"compress_type":"uniq","field_type":"STRING","field_name":"id"},{"compress_type":"uniq","field_type":"STRING","field_name":"name"}],"table_name":"api"}'),
      dataSource?: string(name='dataSource', description='The data source.', example='ha-cn-7mz2kvu2c01_table4'),
      dataSourceInfo?: {
        autoBuildIndex?: boolean(name='autoBuildIndex', description='是否开启自动全量', example='true'),
        config?: {
          accessKey?: string(name='accessKey', description='odps数据源ak', example='root'),
          accessSecret?: string(name='accessSecret', description='odps数据源ak secret', example='root123'),
          bucket?: string(name='bucket', description='oss命名空间', example='ha3test-oss'),
          endpoint?: string(name='endpoint', description='odps相关', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
          namespace?: string(name='namespace', description='saro相关', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          ossPath?: string(name='ossPath', description='oss数据源相关', example='/test_opensearch/sift_oss_test.data'),
          partition?: string(name='partition', description='数据分片', example='ds=12345'),
          path?: string(name='path', description='hdfs相关', example='http://test_opensearch/sift_oss_test.data'),
          project?: string(name='project', description='odps数据源项目名称', example='tisplus_dev'),
          table?: string(name='table', description='saro、odps相关', example='dump_odps_demo'),
        }(name='config', description='odps 数据源配置'),
        domain?: string(name='domain', description='离线部署', example='test'),
        name?: string(name='name', description='数据源名', example='index1'),
        processPartitionCount?: int32(name='processPartitionCount', description='数据更新资源数', example='2'),
        saroConfig?: {
          namespace?: string(name='namespace', description='saro数据源的namespace', example='TEST_dump_demo_sj_na61hunbu2_share_holo'),
          tableName?: string(name='tableName', description='saro数据表名称', example='dump_odps_demo'),
        }(name='saroConfig', description='saro数据源配置'),
        type?: string(name='type', description='数据源类型 (odps, swift, saro, oss, unKnow)', example='odps'),
      }(name='dataSourceInfo', description='数据源相关信息'),
      description?: string(name='description', description='备注', example='备注'),
      domain?: string(name='domain', description='The name of the data center where the data source is deployed.', example='test'),
      fullUpdateTime?: string(name='fullUpdateTime', description='全量切换时间', example='2023-07-05 10:40:38'),
      fullVersion?: long(name='fullVersion', description='全量版本  即：索引版本', example='1688523414'),
      incUpdateTime?: string(name='incUpdateTime', description='增量更新时间', example='2023-07-05 10:58:33'),
      indexSize?: long(name='indexSize', description='索引大小', example='4689'),
      indexStatus?: string(name='indexStatus', description='NEW, PUBLISH', example='" "'),
      name?: string(name='name', description='The name of the index.', example='general'),
      partition?: int32(name='partition', description='数据分片', example='2'),
      versions?: [ 
        {
          desc?: string(name='desc', description='The description.', example='close alarm, by 3.9.2 hotfix workflow'),
          files?: [ 
            {
              fullPathName?: string(name='fullPathName', description='The name of the directory for the index.', example='" "'),
              isDir?: boolean(name='isDir', description='Indicates whether a directory exists.', example='True'),
              isTemplate?: boolean(name='isTemplate', description='Indicates whether it is a template.', example='True'),
              name?: string(name='name', description='The name of the file.', example='ha-cn-7mz2iv7sq01_qrs'),
            }
          ](name='files', description='The list of file names.'),
          name?: string(name='name', description='The name of the version.', example='ha-cn-7pp2ngv4s02_qrs'),
          status?: string(name='status', description='The state of the version. Valid values: drafting, used, unused and trash. drafting indicates that the version is a draft, used indicates that the version is used online, unused indicates that the version is not used, and trash indicates that the version is being deleted.', example='2'),
          updateTime?: long(name='updateTime', description='The time when the version was updated.', example='" "'),
          versionId?: int32(name='versionId', description='The ID of the version. The value of this parameter is null for the edit version.', example='1'),
        }
      ](name='versions', description='The list of version information.'),
    }
  ](name='result', description='The index list.'),
}

model ListIndexesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexesResponseBody(name='body'),
}

/**
  * ## Method
  *     GET
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes
  *
 */
async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexes', 'GET', '/openapi/ha3/instances/{instanceId}/indexes', 'json', false, 'json', request);
}

model ListInstanceSpecsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ostoc01', position='Path'),
  type: string(name='type', description='The node type. Valid values: qrs, search, index, and cluster. qrs indicates a query node, search indicates a data node, index indicates an index node, and cluster indicates a cluster.', example='search', position='Query'),
}

model ListInstanceSpecsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      cpu?: int32(name='cpu', description='None', example='1'),
      maxDisk?: int32(name='maxDisk', description='单数据节点存储空间最大值'),
      mem?: int32(name='mem', description='Unit: GB', example='4'),
      minDisk?: int32(name='minDisk', description='单数据节点存储空间最小值'),
    }
  ](name='result', description='List'),
}

model ListInstanceSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceSpecsResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/specs?type=qrs`
  *
 */
async function listInstanceSpecs(request: ListInstanceSpecsRequest): ListInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceSpecs', 'GET', '/openapi/ha3/instances/{instanceId}/specs', 'json', false, 'json', request);
}

model ListInstancesRequest {
  description?: string(name='description', description='The description of the instance. You can use this description to filter instances. Fuzzy match is supported.', example='Havenask instance', position='Query'),
  edition?: string(name='edition', description='The Instance type, vector (vector index version),engine (recall engine version)', example='vector', position='Query'),
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-83570439y0n', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzgpiswzbksdi', position='Query'),
  tags?: [ 
    {
      key?: string(name='key', description='The key of the tag.', example='backup'),
      value?: string(name='value', description='The value of the tag.', example='oboms-disk'),
    }
  ](name='tags', description='The tag dictionary.', shrink='json', position='Query'),
}

model ListInstancesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', description='The billing method', example='PrePaid'),
      commodityCode?: string(name='commodityCode', description='The product code', example='""'),
      createTime?: string(name='createTime', description='The time when the instance was created', example='2022-06-04T02:03:21Z'),
      description?: string(name='description', description='The description of the instance', example='Emergency test'),
      expiredTime?: string(name='expiredTime', description='The expiration time', example='1634885083'),
      inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved', example='false'),
      instanceId?: string(name='instanceId', description='The ID of the resource', example='ha-cn-2r42n8oh001'),
      lockMode?: string(name='lockMode', description='The lock status', example='Unlock'),
      network?: {
        endpoint?: string(name='endpoint', description='The access point of the gateway', example='""'),
        vSwitchId?: string(name='vSwitchId', description='The ID of the virtual switch', example='vsw-bp11ldcf59q2nbwkqgj6z'),
        vpcId?: string(name='vpcId', description='The ID of the Virtual Private Cloud (VPC) network', example='vpc-wz9axk41d9vffoc79x0oe'),
      }(name='network', description='Information about the instance of the network search engine'),
      resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group', example='rg-aekzgpiswzbksdi'),
      status?: string(name='status', description='The status of the instance', example='2'),
      tags?: [ 
        {
          key?: string(name='key', description='The key of the tag.', example='env'),
          value?: string(name='value', description='The value of the tag.', example='oboms-disk'),
        }
      ](name='tags', description='The result returned.'),
      updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
    }
  ](name='result', description='The result returned'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned', example='5'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/[code]/instances`
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/openapi/ha3/instances', 'json', false, 'json', request);
}

model ListOnlineConfigsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-0ju2s170b03', position='Path'),
  nodeName: string(name='nodeName', description='The name of the node', example='ha-cn-2r42ostoc01_qrs', position='Path'),
  domain: string(name='domain', description='The name of the domain', example='sz_vpc_domain_1', position='Query'),
}

model ListOnlineConfigsResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: [ 
    {
      config?: string(name='config', description='The configuration information', example='{\\"specItems\\":[{\\"specKey\\":\\"YQ_KEYWORD_NUMBER_PLUS\\",\\"value\\":\\"1\\"}]}'),
      indexName?: string(name='indexName', description='The name of the index', example='generation'),
    }
  ](name='result', description='List'),
}

model ListOnlineConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineConfigsResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * GET
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs?domain={domain}
  * ```
  *
 */
async function listOnlineConfigs(request: ListOnlineConfigsRequest): ListOnlineConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineConfigs', 'GET', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs', 'json', false, 'json', request);
}

model ListQueryResultRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-i7m2olkw201', position='Path'),
  query?: string(name='query', description='The query statement', example='query%3D1%26%26config%3Dstart%3A0%2Chit%3A10%2Cformat%3Ajson%26%26cluster%3Dgeneral', position='Query'),
  sql?: string(name='sql', description='The SQL statement that is executed in the query', example='query%3Dselect%20max(content_id)%20from%20generation', position='Query'),
}

model ListQueryResultResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='9E5BCFAA-98B3-51D0-9188-B1BC07589337'),
}

model ListQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueryResultResponseBody(name='body'),
}

/**
  * ### Method
  * `GET`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/query?query=xxxx`
  *
 */
async function listQueryResult(request: ListQueryResultRequest): ListQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryResult', 'GET', '/openapi/ha3/instances/{instanceId}/query', 'json', false, 'json', request);
}

model ListTableGenerationsRequest {
  instanceId: string(name='instanceId', example='ha-cn-tl32n3iu801', position='Path'),
  tableName: string(name='tableName', example='test_summary', position='Path'),
}

model ListTableGenerationsResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='F6E3D968-529C-5C40-AFDD-133A8B8FD930'),
  result?: [ 
    {
      generationId?: long(name='generationId', description='generationId', example='1708674867'),
    }
  ](name='result', description='List'),
}

model ListTableGenerationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableGenerationsResponseBody(name='body'),
}

async function listTableGenerations(request: ListTableGenerationsRequest): ListTableGenerationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTableGenerations', 'GET', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/index_versions', 'json', false, 'json', request);
}

model ListTablesRequest {
  instanceId: string(name='instanceId', example='ha-cn-0ju2rewdi02', position='Path'),
  newMode?: boolean(name='newMode', example='true', position='Query'),
}

model ListTablesResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: [ 
    {
      indexStatus?: string(name='indexStatus', example='IN_USE'),
      name?: string(name='name', example='es_test_1b'),
      status?: string(name='status'),
    }
  ](name='result', description='List'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/openapi/ha3/instances/{instanceId}/tables', 'json', false, 'json', request);
}

model ModifyAdvanceConfigFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42ostoc01', position='Path'),
  configName: string(name='configName', description='The name of the configuration.', example='ha-cn-zvp2ou1h801_online_config_edit', position='Path'),
  content?: string(name='content', description='The content of the file.', example='"ha3"', position='Body'),
  variables?: map[string]VariablesValue(name='variables', description='The variable.', position='Body'),
  fileName: string(name='fileName', description='The name of the file.', example='/qrs.json', position='Query'),
}

model ModifyAdvanceConfigFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='The result.', example='{}'),
}

model ModifyAdvanceConfigFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAdvanceConfigFileResponseBody(name='body'),
}

/**
  * ## Method
  *     put
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file?fileName={fileName}
  *
 */
async function modifyAdvanceConfigFile(request: ModifyAdvanceConfigFileRequest): ModifyAdvanceConfigFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAdvanceConfigFile', 'PUT', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/file', 'json', false, 'json', request);
}

model ModifyClusterDescRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-c4d2rq7nt04', position='Path'),
  clusterName: string(name='clusterName', description='The name of the cluster', example='sz_vpc_domain_1', position='Path'),
  body?: map[string]any(name='body', description='The parameters in the request body', example='{}', position='Body'),
}

model ModifyClusterDescResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterDescResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterDescResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc`
  *
 */
async function modifyClusterDesc(request: ModifyClusterDescRequest): ModifyClusterDescResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterDesc', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/desc', 'json', false, 'json', request);
}

model ModifyClusterOfflineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2oy0bg01', position='Path'),
  buildMode?: string(name='buildMode', description='The mode of reindexing. Valid values: api and indexRecover. api indicates to push incremental data to a data source by calling the API operations. indexRecover indicates that the data source is restored from the index.', example='indexRecover', position='Body'),
  config?: map[string]int32(name='config', description='The configuration name, which is stored as a key.', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1', position='Body'),
  dataSourceType?: string(name='dataSourceType', description='The type of the data source. Valid values: odps, swift, saro, and unKnow.', example='maxComputer', position='Body'),
  dataTimeSec?: int32(name='dataTimeSec', description='This parameter is required when index building by using API data sources is triggered.', example='1640867288', position='Body'),
  domain?: string(name='domain', description='The domain where the data source is deployed.', example='vpc_hz_domain_1', position='Body'),
  generation?: long(name='generation', description='The data restoration version.', example='160142641', position='Body'),
  partition?: string(name='partition', description='This parameter is required when index building for full data in a MaxCompute data source is triggered.', example='20211202', position='Body'),
  pushMode?: string(name='pushMode', position='Body'),
}

model ModifyClusterOfflineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyClusterOfflineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOfflineConfigResponseBody(name='body'),
}

/**
  * ## Request syntax
  *     PUT /openapi/ha3/instances/{instanceId}/cluster-offline-config
  *
 */
async function modifyClusterOfflineConfig(request: ModifyClusterOfflineConfigRequest): ModifyClusterOfflineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOfflineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-offline-config', 'json', false, 'json', request);
}

model ModifyClusterOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7mz2ougaw02', position='Path'),
  clusters?: [ string ](name='clusters', description='The information about the cluster', position='Body'),
  config?: map[string]int32(name='config', description='配置信息', position='Body'),
}

model ModifyClusterOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='E7B7D598-B080-5C8E-AA35-D43EC0D5F886'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyClusterOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterOnlineConfigResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/cluster-online-config`
  *
 */
async function modifyClusterOnlineConfig(request: ModifyClusterOnlineConfigRequest): ModifyClusterOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/cluster-online-config', 'json', false, 'json', request);
}

model ModifyDataSourceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-tl32n3iu801', position='Path'),
  dataSourceName: string(name='dataSourceName', description='The name of the data source.', example='ha-cn-pl32rf0js04_test', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
  dryRun?: boolean(name='dryRun', description='Specifies whether the data source is created by using the dryRun feature. This parameter only checks whether the data source is valid. Valid values: true and false. true indicates that the data source is created by using the dryRun feature, and false indicates that the data source is not created by using the dryRun feature.', example='true', position='Query'),
}

model ModifyDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model ModifyDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDataSourceResponseBody(name='body'),
}

/**
  * ## Method
  * `PUT`
  * ## URI
  * `/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}`
  *
 */
async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDataSource', 'PUT', '/openapi/ha3/instances/{instanceId}/data-sources/{dataSourceName}', 'json', false, 'json', request);
}

model ModifyFileRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-i7m2ne76e02', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='automobile_vector', position='Path'),
  versionName: string(name='versionName', description='The name of the version', example='ha-cn-tl32m2c4u01@ha-cn-tl32m2c4u01_00@bj_vpc_domain_1@automobile_vector@index_config_edit', position='Path'),
  content?: string(name='content', description='The content of the file.', example='""', position='Body'),
  partition?: int32(name='partition', description='The data partition. This parameter is required if the dataSourceType parameter is set to odps.', example='1', position='Body'),
  fileName: string(name='fileName', description='The name of the file in the full path', example='/schemas/generation_schema.json', position='Query'),
}

model ModifyFileResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='89B968E6-1E41-58DF-BB25-5F98ECC759CE'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFileResponseBody(name='body'),
}

/**
  * ## Method
  *     PUT
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file?fileName=/root/test.txt
  *
 */
async function modifyFile(request: ModifyFileRequest): ModifyFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFile', 'PUT', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/versions/{versionName}/file', 'json', false, 'json', request);
}

model ModifyIndexPartitionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2ttxta01', position='Path'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source.', example='test1', position='Body'),
  domainName?: string(name='domainName', description='The name of the data center.', example='pre_domain_1', position='Body'),
  generation?: long(name='generation', description='The primary key of generation.', example='1633293829', position='Body'),
  indexInfos?: [ 
    {
      indexName?: string(name='indexName', description='The name of the index.', example='atest2'),
      parallelNum?: int32(name='parallelNum', description='The number of concurrency. The default value is 1.', example='1'),
      partitionCount?: int32(name='partitionCount', description='The number of shards of the index.', example='3'),
    }
  ](name='indexInfos', description='The information about shards of the index.', position='Body'),
}

model ModifyIndexPartitionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='93A9E542-8CF8-5BA6-99AB-94C0FE520429'),
  result?: map[string]any(name='result', description='Map', example='[]'),
}

model ModifyIndexPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexPartitionResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/index-partition`
  *
 */
async function modifyIndexPartition(request: ModifyIndexPartitionRequest): ModifyIndexPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexPartition', 'PUT', '/openapi/ha3/instances/{instanceId}/index-partition', 'json', false, 'json', request);
}

model ModifyIndexVersionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-7mz2j2off06', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_hz_domain_2', position='Path'),
  body?: [ 
    {
      buildDeployId?: string(name='buildDeployId', description='The ID of the index deployed in offline mode.', example='277'),
      indexName?: string(name='indexName', description='The name of the index.', example='main_index'),
      version?: string(name='version', description='The version of the index.', example='1'),
    }
  ](name='body', description='The keyword used to search for a version. Fuzzy match is supported.', example='{}', position='Body'),
}

model ModifyIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='F43E8AB4-419C-5F4C-90D6-615590DFAA3C'),
  result?: map[string]any(name='result', description='result', example='{}'),
}

model ModifyIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIndexVersionResponseBody(name='body'),
}

/**
  * ## Method
  *     PUT
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version
  *
 */
async function modifyIndexVersion(request: ModifyIndexVersionRequest): ModifyIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyIndexVersion', 'PUT', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}/index-version', 'json', false, 'json', request);
}

model ModifyNodeConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42p5oi202', position='Path'),
  active?: boolean(name='active', position='Body'),
  dataDuplicateNumber?: int32(name='dataDuplicateNumber', position='Body'),
  dataFragmentNumber?: int32(name='dataFragmentNumber', position='Body'),
  flowRatio?: int32(name='flowRatio', position='Body'),
  minServicePercent?: int32(name='minServicePercent', position='Body'),
  published?: boolean(name='published', position='Body'),
  clusterName?: string(name='clusterName', description='The name of the cluster.', example='vpc_sh_domain_2', position='Query'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source. Valid values: search and not_search. search indicates to search data. not_search indicates not to search data.', example='ha-cn-2r42ostoc01_0704', position='Query'),
  name: string(name='name', description='The original name of the node.', example='ha-cn-zvp2iv9a401_qrs', position='Query'),
  type: string(name='type', description='The type of the algorithm. Valid values: pop, cp, hot, hint, and suggest.

*   pop indicates the popularity model.
*   cp indicates the category prediction model.
*   hot indicates the top search model.
*   hint indicates the hint model.
*   suggest indicates the drop-down suggestion model.', example='" "', position='Query'),
}

model ModifyNodeConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='D39EE0F1-D7EF-5F46-B781-6BF4185308B0'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model ModifyNodeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeConfigResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * PUT
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node-config?type=qrs&name=test
  * ```
  *
 */
async function modifyNodeConfig(request: ModifyNodeConfigRequest): ModifyNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node-config', 'json', false, 'json', request);
}

model ModifyOnlineConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the edge instance', example='ha-cn-7mz2ougaw02', position='Path'),
  nodeName: string(name='nodeName', description='The name of the document', example='general', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='adsfasd', position='Path'),
  body?: map[string]string(name='body', description='ashortdescriptionofstruct', position='Body'),
}

model ModifyOnlineConfigResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='2AE63638-5420-56DC-BF59-37D8174039A0'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyOnlineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOnlineConfigResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * put
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}
  * ```
  *
 */
async function modifyOnlineConfig(request: ModifyOnlineConfigRequest): ModifyOnlineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyOnlineConfig', 'PUT', '/openapi/ha3/instances/{instanceId}/node/{nodeName}/online-configs/{indexName}', 'json', false, 'json', request);
}

model ModifyPasswordRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7pp2pcna701', position='Path'),
  password?: string(name='password', description='The password', example='******************************', position='Body'),
  username?: string(name='username', description='The username', example='"username"', position='Body'),
}

model ModifyPasswordResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='407BFD91-DE7D-50BA-8F88-CDE52A3B5E46'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model ModifyPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPasswordResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/password`
  *
 */
async function modifyPassword(request: ModifyPasswordRequest): ModifyPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPassword', 'PUT', '/openapi/ha3/instances/{instanceId}/password', 'json', false, 'json', request);
}

model ModifyTableRequest {
  instanceId: string(name='instanceId', example='ha-cn-tl32n3iu801', position='Path'),
  tableName: string(name='tableName', example='index_hdfs', position='Path'),
  dataProcessConfig?: [ 
    {
      dstField?: string(name='dstField', example='source_image_vector'),
      operator?: string(name='operator', example='vectorize'),
      params?: {
        srcFieldConfig?: {
          ossBucket?: string(name='ossBucket', example='test'),
          ossEndpoint?: string(name='ossEndpoint', example='oss-cn-hangzhou-internal.aliyuncs.com'),
          uid?: string(name='uid', example='uid'),
        }(name='srcFieldConfig'),
        vectorModal?: string(name='vectorModal', example='image'),
        vectorModel?: string(name='vectorModel', example='clip'),
      }(name='params'),
      srcField?: string(name='srcField', example='source_image'),
    }
  ](name='dataProcessConfig', position='Body'),
  dataSource?: {
    autoBuildIndex?: boolean(name='autoBuildIndex', example='true'),
    config?: {
      accessKey?: string(name='accessKey', description='AK', example='AK'),
      accessSecret?: string(name='accessSecret', description='AS', example='AS'),
      bucket?: string(name='bucket', description='oss bucket', example='antsys-shujiang-osstest'),
      endpoint?: string(name='endpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
      ossPath?: string(name='ossPath', example='oss://opensearch'),
      partition?: string(name='partition', example='ds=20231220'),
      project?: string(name='project', example='yw_dw_rpt'),
      table?: string(name='table', example='behavior'),
    }(name='config'),
    dataTimeSec?: int32(name='dataTimeSec', example='1715160176'),
  }(name='dataSource', position='Body'),
  fieldSchema?: map[string]string(name='fieldSchema', position='Body'),
  partitionCount?: int32(name='partitionCount', example='1', position='Body'),
  primaryKey?: string(name='primaryKey', example='id', position='Body'),
  rawSchema?: string(name='rawSchema', example='{}', position='Body'),
  vectorIndex?: [ 
    {
      advanceParams?: {
        buildIndexParams?: string(name='buildIndexParams', example='{}'),
        linearBuildThreshold?: string(name='linearBuildThreshold', example='5000'),
        minScanDocCnt?: string(name='minScanDocCnt', example='20000'),
        searchIndexParams?: string(name='searchIndexParams', example='{}'),
      }(name='advanceParams'),
      dimension?: string(name='dimension', example='128'),
      distanceType?: string(name='distanceType', example='SquaredEuclidean'),
      indexName?: string(name='indexName', example='test_api'),
      namespace?: string(name='namespace', example='namespace'),
      sparseIndexField?: string(name='sparseIndexField', example='sparse_indices'),
      sparseValueField?: string(name='sparseValueField', example='sparse_values'),
      vectorField?: string(name='vectorField', example='source_image_vector'),
      vectorIndexType?: string(name='vectorIndexType', example='Qc'),
    }
  ](name='vectorIndex', position='Body'),
  dryRun?: boolean(name='dryRun', example='true', position='Query'),
}

model ModifyTableResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ModifyTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTableResponseBody(name='body'),
}

async function modifyTable(request: ModifyTableRequest): ModifyTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyTable', 'PUT', '/openapi/ha3/instances/{instanceId}/tables/{tableName}', 'json', false, 'json', request);
}

model PublishAdvanceConfigRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7e22rof5304', position='Path'),
  configName: string(name='configName', description='The name of the configuration', example='ha-cn-0ju2rrogr01_online_config_v3', position='Path'),
  body?: map[string]any(name='body', description='The structure of the request', example='{\\"desc\\":\\"new version\\"}', position='Body'),
}

model PublishAdvanceConfigResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned', example='{}'),
}

model PublishAdvanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishAdvanceConfigResponseBody(name='body'),
}

/**
  * ## Method
  * ~~~
  * POST
  * ~~~
  * ## URI
  * ~~~
  * /openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish
  * ~~~
  *
 */
async function publishAdvanceConfig(request: PublishAdvanceConfigRequest): PublishAdvanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishAdvanceConfig', 'POST', '/openapi/ha3/instances/{instanceId}/advanced-configs/{configName}/actions/publish', 'json', false, 'json', request);
}

model PublishIndexVersionRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-tl32m2c4u01', position='Path'),
  indexName: string(name='indexName', description='The name of the index', example='automobile_2d', position='Path'),
  body?: map[string]any(name='body', description='The query result', example='{}', position='Body'),
}

model PublishIndexVersionResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model PublishIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishIndexVersionResponseBody(name='body'),
}

/**
  * ## Method
  *     POST
  * ## URI
  *     /openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish
  *
 */
async function publishIndexVersion(request: PublishIndexVersionRequest): PublishIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishIndexVersion', 'POST', '/openapi/ha3/instances/{instanceId}/indexes/{indexName}/actions/publish', 'json', false, 'json', request);
}

model RecoverIndexRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-zvp2jlr2g03', position='Path'),
  buildDeployId?: int32(name='buildDeployId', description='The ID of the index deployed in offline mode.', example='277', position='Body'),
  dataSourceName?: string(name='dataSourceName', description='The name of the data source', example='ha-cn-pl32rf0js04_odps_first', position='Body'),
  generation?: string(name='generation', description='The primary key of generation.', example='1653018575', position='Body'),
  indexName?: string(name='indexName', description='The name of the index', example='main_index', position='Body'),
}

model RecoverIndexResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='The result returned by data search.', example='{}'),
}

model RecoverIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverIndexResponseBody(name='body'),
}

/**
  * ### Method
  * `POST`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}/recover-index`
  *
 */
async function recoverIndex(request: RecoverIndexRequest): RecoverIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverIndex', 'POST', '/openapi/ha3/instances/{instanceId}/recover-index', 'json', false, 'json', request);
}

model ReindexRequest {
  instanceId: string(name='instanceId', example='ha-cn-2r42ppr7901', position='Path'),
  tableName: string(name='tableName', example='test_summary', position='Path'),
  dataTimeSec?: int32(name='dataTimeSec', example='1640867288', position='Body'),
  ossDataPath?: string(name='ossDataPath', example='oss://opensearch', position='Body'),
  partition?: string(name='partition', example='ds=20220713', position='Body'),
}

model ReindexResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10D5E615-69F7-5F49-B850-00169ADE513C'),
  result?: map[string]any(name='result', description='Map', example='{}'),
}

model ReindexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReindexResponseBody(name='body'),
}

async function reindex(request: ReindexRequest): ReindexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Reindex', 'POST', '/openapi/ha3/instances/{instanceId}/tables/{tableName}/reindex', 'json', false, 'json', request);
}

model RemoveClusterRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7mz2iv7sq01', position='Path'),
  clusterName?: string(name='clusterName', description='The name of the cluster', example='bj_vpc_domain_2', position='Path'),
}

model RemoveClusterResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='E45380E8-994A-5402-9806-F114B3295FCF'),
  result?: map[string]any(name='result', description='The result', example='{}'),
}

model RemoveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveClusterResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * DELETE
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/clusters/{clusterName}
  * ```
  *
 */
async function removeCluster(request: RemoveClusterRequest): RemoveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveCluster', 'DELETE', '/openapi/ha3/instances/{instanceId}/clusters/{clusterName}', 'json', false, 'json', request);
}

model StopTaskRequest {
  instanceId: string(name='instanceId', description='The ID of the instance', example='ha-cn-7mz2nx41h01', position='Path'),
  fsmId: string(name='fsmId', description='The ID of the device that has stopped', example='tisplus_opensearch@datasource_flow_fsm@1865410598556969-ha-cn-0ju2rrogr01_test_api_2@sz_vpc_domain_1@null@MANUAL-ha-cn-0ju2rrogr01_test_api_2@1657511220772@165343', position='Path'),
}

model StopTaskResponseBody = {
  requestId?: string(name='requestId', description='id of request', example='FE03180A-0E29-5474-8A86-33F0683294A4'),
  result?: map[string]any(name='result', description='The information about the index', example='{}'),
}

model StopTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskResponseBody(name='body'),
}

/**
  * ### Method
  * ```java
  * PUT
  * ```
  * ### URI
  * ```java
  * /openapi/ha3/instances/{instanceId}/stop-task/{fsmId}
  * ```
  *
 */
async function stopTask(request: StopTaskRequest): StopTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTask', 'PUT', '/openapi/ha3/instances/{instanceId}/stop-task/{fsmId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='ha-cn-2r42mu9xi01', position='Path'),
  components?: [ 
    {
      code?: string(name='code', description='The specification code, which must be consistent with the values of the corresponding module parameters.', example='200'),
      value?: string(name='value', example='""'),
    }
  ](name='components', description='A list of instance-related specifications.', position='Body'),
  description?: string(name='description', description='The description of the instance.', example='""', position='Body'),
  orderType?: string(name='orderType', description='Valid values: UPGRADE and DOWNGRADE. UPGRADE indicates to upgrade the instance specifications. DOWNGRADE indicates to downgrade the instance specifications.', example='""', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The product code', example='ha3-code'),
    createTime?: string(name='createTime', description='The time when the instance was created', example='2018-12-06T11:17:49.0'),
    description?: string(name='description', description='The description of the instance', example='Test instance'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires', example='2019-01-06T16:00:00.0'),
    inDebt?: boolean(name='inDebt', description='Indicates whether an overdue payment is involved', example='false'),
    instanceId?: string(name='instanceId', description='The ID of the resource', example='ha-cn-0ju2s170b03'),
    lockMode?: string(name='lockMode', description='The lock status', example='Unlock'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group', example='rg-aeky6hthboewpuy'),
    status?: string(name='status', description='The status of the instance', example='Running'),
    updateTime?: string(name='updateTime', description='The time when the instance was last updated', example='2018-12-06T11:17:49.0'),
  }(name='result', description='The result returned'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * ### Method
  * `PUT`
  * ### URI
  * `/openapi/ha3/instances/{instanceId}`
  *
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PUT', '/openapi/ha3/instances/{instanceId}', 'json', false, 'json', request);
}

model VariablesValue = {
  disableModify?: boolean(name='disableModify', description='Specifies whether the variable cannot be modified.', example='false'),
  isModify?: boolean(name='isModify', description='Specifies whether the variable is modified.', example='false'),
  value?: string(name='value', description='The value of the variable.', example='""'),
  description?: string(name='description', description='The description about the variable.', example='""'),
  templateValue?: string(name='templateValue', description='The value of the template.', example='""'),
  type?: string(name='type', description='The type of the variable. Valid values:

*   NORMAL: a normal variable
*   FUNCTION: a function variable', example='NORMAL'),
  funcValue?: {
    funcClassName?: string(name='funcClassName', description='The class name.', example='""'),
    template?: string(name='template', description='The template of the variable.', example='""'),
  }(name='funcValue', description='The function variable.'),
}

