/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dm';
  @version = '2015-11-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddIpfilterRequest {
  ipAddress: string(name='IpAddress', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddIpfilterResponseBody = {
  ipFilterId?: string(name='IpFilterId', example='10795'),
  requestId?: string(name='RequestId', example='0E9282E8-DC08-5445-8FB0-B9F0CA28B249'),
}

model AddIpfilterResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpfilterResponseBody(name='body'),
}

async function addIpfilter(request: AddIpfilterRequest): AddIpfilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpfilter', 'POST', '/', 'json', false, 'json', request);
}

model ApproveReplyMailAddressRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ticket: string(name='Ticket', position='Query'),
}

model ApproveReplyMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ApproveReplyMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveReplyMailAddressResponseBody(name='body'),
}

async function approveReplyMailAddress(request: ApproveReplyMailAddressRequest): ApproveReplyMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveReplyMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model BatchSendMailRequest {
  accountName: string(name='AccountName', example='test@example.com', position='Query'),
  addressType: int32(name='AddressType', example='1', minimum=0, maximum=1, position='Query'),
  clickTrace?: string(name='ClickTrace', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiversName: string(name='ReceiversName', example='test2', position='Query'),
  replyAddress?: string(name='ReplyAddress', position='Query'),
  replyAddressAlias?: string(name='ReplyAddressAlias', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagName?: string(name='TagName', example='test3', position='Query'),
  templateName: string(name='TemplateName', example='test1', position='Query'),
}

model BatchSendMailResponseBody = {
  envId?: string(name='EnvId', example='xxx'),
  requestId?: string(name='RequestId', example='12D086F6-8F31-4658-84C1-006DED011A85'),
}

model BatchSendMailResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSendMailResponseBody(name='body'),
}

async function batchSendMail(request: BatchSendMailRequest): BatchSendMailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSendMail', 'POST', '/', 'json', false, 'json', request);
}

model CheckDomainRequest {
  domainId: int32(name='DomainId', description='The ID of the domain name.', example='153345', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckDomainResponseBody = {
  domainStatus?: int32(name='DomainStatus', description='The status of the domain name. Indicates whether the domain name is verified and available.

*   0: indicates that the domain name is verified and available.
*   1: indicates that the domain name fails to be verified and is unavailable.
*   2: indicates that the domain name is available, but not filed or configured with a CNAME record.
*   3: indicates that the domain name is available but not filed.
*   4: indicates that the domain name is available but not configured with a CNAME record.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0B82E83-A1D9-4FE6-97D2-F4B231F80B02'),
}

model CheckDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDomainResponseBody(name='body'),
}

async function checkDomain(request: CheckDomainRequest): CheckDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDomain', 'POST', '/', 'json', false, 'json', request);
}

model CheckReplyToMailAddressRequest {
  lang?: string(name='Lang', position='Query'),
  mailAddressId: int32(name='MailAddressId', example='126545', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckReplyToMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model CheckReplyToMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CheckReplyToMailAddressResponseBody(name='body'),
}

async function checkReplyToMailAddress(request: CheckReplyToMailAddressRequest): CheckReplyToMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckReplyToMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  domainName: string(name='DomainName', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDomainResponseBody = {
  domainId?: string(name='DomainId', example='158910'),
  requestId?: string(name='RequestId', example='B49AD828-25D1-488C-90B7-8853C1944486'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateMailAddressRequest {
  accountName: string(name='AccountName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='reply@aliyun.com', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendtype: string(name='Sendtype', example='batch', position='Query'),
}

model CreateMailAddressResponseBody = {
  mailAddressId?: string(name='MailAddressId', example='xxx'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
}

model CreateMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMailAddressResponseBody(name='body'),
}

async function createMailAddress(request: CreateMailAddressRequest): CreateMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateReceiverRequest {
  desc?: string(name='Desc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiversAlias: string(name='ReceiversAlias', example='vme', position='Query'),
  receiversName: string(name='ReceiversName', example='xme', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateReceiverResponseBody = {
  receiverId?: string(name='ReceiverId', example='xxxx'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model CreateReceiverResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReceiverResponseBody(name='body'),
}

async function createReceiver(request: CreateReceiverRequest): CreateReceiverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReceiver', 'POST', '/', 'json', false, 'json', request);
}

model CreateTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagName: string(name='TagName', example='vme', position='Query'),
}

model CreateTagResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  tagId?: string(name='TagId', example='xxxx'),
}

model CreateTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResponseBody(name='body'),
}

async function createTag(request: CreateTagRequest): CreateTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTag', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domainId: int32(name='DomainId', example='326***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', example='E3DFF97B-00CF-5333-8125-3D6819471984'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpfilterByEdmIdRequest {
  fromType?: int32(name='FromType', minimum=1, maximum=2, position='Query'),
  id?: string(name='Id', example='10120', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpfilterByEdmIdResponseBody = {
  requestId?: string(name='RequestId', example='E3DFF97B-00CF-5333-8125-3D6819471984'),
}

model DeleteIpfilterByEdmIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpfilterByEdmIdResponseBody(name='body'),
}

async function deleteIpfilterByEdmId(request: DeleteIpfilterByEdmIdRequest): DeleteIpfilterByEdmIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpfilterByEdmId', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMailAddressRequest {
  mailAddressId: int32(name='MailAddressId', example='23457', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMailAddressResponseBody(name='body'),
}

async function deleteMailAddress(request: DeleteMailAddressRequest): DeleteMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteReceiverRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', description='The ID of the recipient list.', example='1453', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteReceiverResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteReceiverResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReceiverResponseBody(name='body'),
}

async function deleteReceiver(request: DeleteReceiverRequest): DeleteReceiverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReceiver', 'POST', '/', 'json', false, 'json', request);
}

model DeleteReceiverDetailRequest {
  email?: string(name='Email', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', example='123534', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteReceiverDetailResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReceiverDetailResponseBody(name='body'),
}

async function deleteReceiverDetail(request: DeleteReceiverDetailRequest): DeleteReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId: int32(name='TagId', description='The ID of the tag.', example='123', position='Query'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTag', 'POST', '/', 'json', false, 'json', request);
}

model DescAccountSummaryRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescAccountSummaryResponseBody = {
  dailyQuota?: int32(name='DailyQuota', example='2000'),
  dayuStatus?: int32(name='DayuStatus', example='0'),
  domains?: int32(name='Domains', example='1'),
  enableTimes?: int32(name='EnableTimes', example='0'),
  mailAddresses?: int32(name='MailAddresses', example='0'),
  maxQuotaLevel?: int32(name='MaxQuotaLevel', example='10'),
  monthQuota?: int32(name='MonthQuota', example='60000'),
  quotaLevel?: int32(name='QuotaLevel', example='2'),
  receivers?: int32(name='Receivers', example='0'),
  requestId?: string(name='RequestId', example='82B295BB-7E69-491F-9896-ECEAFF09E1A4'),
  smsRecord?: int32(name='SmsRecord', example='0'),
  smsSign?: int32(name='SmsSign', example='0'),
  smsTemplates?: int32(name='SmsTemplates', example='0'),
  tags?: int32(name='Tags', example='0'),
  templates?: int32(name='Templates', example='1'),
  userStatus?: int32(name='UserStatus', example='0'),
}

model DescAccountSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescAccountSummaryResponseBody(name='body'),
}

async function descAccountSummary(request: DescAccountSummaryRequest): DescAccountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescAccountSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescDomainRequest {
  domainId: int32(name='DomainId', example='13464', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescDomainResponseBody = {
  cnameAuthStatus?: string(name='CnameAuthStatus', example='1'),
  cnameConfirmStatus?: string(name='CnameConfirmStatus', example='0'),
  cnameRecord?: string(name='CnameRecord', example='dmtrace'),
  createTime?: string(name='CreateTime', example='2019-09-29T12:49Z'),
  defaultDomain?: string(name='DefaultDomain', example='0'),
  dnsMx?: string(name='DnsMx', example='abc-com.xxxx.com'),
  dnsSpf?: string(name='DnsSpf', example='v=xxxx'),
  dnsTxt?: string(name='DnsTxt', example='121309ohdsa'),
  domainId?: string(name='DomainId', example='158910'),
  domainName?: string(name='DomainName', example='abc.com'),
  domainStatus?: string(name='DomainStatus', example='1'),
  domainType?: string(name='DomainType', example='0c40d5f125af4e42892a'),
  icpStatus?: string(name='IcpStatus', example='1'),
  mxAuthStatus?: string(name='MxAuthStatus', example='1'),
  mxRecord?: string(name='MxRecord', example='mx01.dm.aliyun.com'),
  requestId?: string(name='RequestId', example='51B74264-46B4-43C8-A9A0-6B8E8BC04F34'),
  spfAuthStatus?: string(name='SpfAuthStatus', example='1'),
  spfRecord?: string(name='SpfRecord', example='include:spf1.dm.aliyun.com'),
  tlDomainName?: string(name='TlDomainName', example='abc.com'),
  tracefRecord?: string(name='TracefRecord', example='tracedm.aliyuncs.com'),
}

model DescDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescDomainResponseBody(name='body'),
}

async function descDomain(request: DescDomainRequest): DescDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetIpProtectionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpProtectionResponseBody = {
  ipProtection?: string(name='IpProtection', example='0'),
  requestId?: string(name='RequestId', example='B30E5A62-2E64-577D-A70E-8C6781D6C975'),
}

model GetIpProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpProtectionResponseBody(name='body'),
}

async function getIpProtection(request: GetIpProtectionRequest): GetIpProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpProtection', 'POST', '/', 'json', false, 'json', request);
}

model GetIpfilterListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpfilterListResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='84DD77C7-A091-5139-9530-2D1F7CCE59E0'),
  totalCount?: int32(name='TotalCount', example='1'),
  data?: {
    ipfilters?: [ 
    {
      createTime?: string(name='CreateTime', example='1653547140'),
      id?: string(name='Id', example='10083'),
      ipAddress?: string(name='IpAddress'),
    }
  ](name='ipfilters')
  }(name='data'),
}

model GetIpfilterListResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpfilterListResponseBody(name='body'),
}

async function getIpfilterList(request: GetIpfilterListRequest): GetIpfilterListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpfilterList', 'POST', '/', 'json', false, 'json', request);
}

model GetTrackListRequest {
  endTime: string(name='EndTime', example='2019-09-29', position='Query'),
  offset?: string(name='Offset', position='Query'),
  offsetCreateTime?: string(name='OffsetCreateTime', position='Query'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='2019-09-29', position='Query'),
  total?: string(name='Total', position='Query'),
}

model GetTrackListResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  total?: int32(name='Total', example='100'),
  data?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      rcptClickCount?: string(name='RcptClickCount', example='0'),
      rcptClickRate?: string(name='RcptClickRate', example='0'),
      rcptOpenCount?: string(name='RcptOpenCount', example='0'),
      rcptOpenRate?: string(name='RcptOpenRate', example='0'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount', example='0'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate', example='0'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount', example='0'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate', example='0'),
      totalNumber?: string(name='TotalNumber', example='0'),
    }
  ](name='stat')
  }(name='data'),
}

model GetTrackListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrackListResponseBody(name='body'),
}

async function getTrackList(request: GetTrackListRequest): GetTrackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrackList', 'POST', '/', 'json', false, 'json', request);
}

model GetTrackListByMailFromAndTagNameRequest {
  accountName?: string(name='AccountName', example='e-service@amegroups.cn', position='Query'),
  endTime: string(name='EndTime', example='2019-09-29', position='Query'),
  offset?: string(name='Offset', position='Query'),
  offsetCreateTime?: string(name='OffsetCreateTime', position='Query'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='2019-09-29', position='Query'),
  tagName?: string(name='TagName', example='Subscription', position='Query'),
  total?: string(name='Total', position='Query'),
}

model GetTrackListByMailFromAndTagNameResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  total?: int32(name='Total', example='4'),
  trackList?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-11T10:11Z'),
      rcptClickCount?: string(name='RcptClickCount', example='0'),
      rcptClickRate?: string(name='RcptClickRate', example='0'),
      rcptOpenCount?: string(name='RcptOpenCount', example='0'),
      rcptOpenRate?: string(name='RcptOpenRate', example='0'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount', example='0'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate', example='0'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount', example='0'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate', example='0'),
      totalNumber?: string(name='TotalNumber', example='0'),
    }
  ](name='Stat')
  }(name='TrackList'),
}

model GetTrackListByMailFromAndTagNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrackListByMailFromAndTagNameResponseBody(name='body'),
}

async function getTrackListByMailFromAndTagName(request: GetTrackListByMailFromAndTagNameRequest): GetTrackListByMailFromAndTagNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrackListByMailFromAndTagName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMailAddressRequest {
  mailAddressId: int32(name='MailAddressId', example='1344565', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', example='pwd129WDCft9', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='a***@example.net', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ModifyMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMailAddressResponseBody(name='body'),
}

async function modifyMailAddress(request: ModifyMailAddressRequest): ModifyMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPWByDomainRequest {
  domainName: string(name='DomainName', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password: string(name='Password', example='pwd', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyPWByDomainResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='02B2A890-CBD8-4806-9BCA-C93190CE7EF6'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPWByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPWByDomainResponseBody(name='body'),
}

async function modifyPWByDomain(request: ModifyPWByDomainRequest): ModifyPWByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPWByDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId: int32(name='TagId', description='The ID of the tag.', example='123', position='Query'),
  tagName: string(name='TagName', description='The name of the tag.', example='vme', position='Query'),
}

model ModifyTagResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ModifyTagResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTagResponseBody(name='body'),
}

async function modifyTag(request: ModifyTagRequest): ModifyTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTag', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainByParamRequest {
  keyWord?: string(name='KeyWord', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='0', minimum=0, maximum=2, position='Query'),
}

model QueryDomainByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='8C90CCD3-627C-4F87-AD8C-2F03146071EB'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    domain?: [ 
    {
      cnameAuthStatus?: string(name='CnameAuthStatus', example='0'),
      confirmStatus?: string(name='ConfirmStatus', example='0'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      domainId?: string(name='DomainId', example='158923'),
      domainName?: string(name='DomainName', example='vmeixme.com'),
      domainRecord?: string(name='DomainRecord', example='6bd86901b9fe4618a046'),
      domainStatus?: string(name='DomainStatus', example='0'),
      icpStatus?: string(name='IcpStatus', example='1'),
      mxAuthStatus?: string(name='MxAuthStatus', example='0'),
      spfAuthStatus?: string(name='SpfAuthStatus', example='0'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='domain')
  }(name='data'),
}

model QueryDomainByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDomainByParamResponseBody(name='body'),
}

async function queryDomainByParam(request: QueryDomainByParamRequest): QueryDomainByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryInvalidAddressRequest {
  endTime?: string(name='EndTime', example='2019-09-29', position='Query'),
  keyWord?: string(name='KeyWord', example='info', position='Query'),
  length?: int32(name='Length', example='100', minimum=1, maximum=100, position='Query'),
  nextStart?: string(name='NextStart', example='***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2019-09-29', position='Query'),
}

model QueryInvalidAddressResponseBody = {
  nextStart?: string(name='NextStart', example='2'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
  totalCount?: int32(name='TotalCount', example='3'),
  data?: {
    mailDetail?: [ 
    {
      lastUpdateTime?: string(name='LastUpdateTime', example='2021-04-28T17:11Z'),
      toAddress?: string(name='ToAddress', example='toaddress@test.com'),
      utcLastUpdateTime?: long(name='UtcLastUpdateTime', example='1619601108'),
    }
  ](name='mailDetail')
  }(name='data'),
}

model QueryInvalidAddressResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInvalidAddressResponseBody(name='body'),
}

async function queryInvalidAddress(request: QueryInvalidAddressRequest): QueryInvalidAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInvalidAddress', 'POST', '/', 'json', false, 'json', request);
}

model QueryMailAddressByParamRequest {
  keyWord?: string(name='KeyWord', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=500, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendtype?: string(name='Sendtype', example='batch', position='Query'),
}

model QueryMailAddressByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    mailAddress?: [ 
    {
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus', example='0'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      dailyCount?: string(name='DailyCount', example='10000'),
      dailyReqCount?: string(name='DailyReqCount', example='100'),
      domainStatus?: string(name='DomainStatus', example='0'),
      mailAddressId?: string(name='MailAddressId', example='12122'),
      monthCount?: string(name='MonthCount', example='300000'),
      monthReqCount?: string(name='MonthReqCount', example='20000'),
      replyAddress?: string(name='ReplyAddress', example='112@aliyun.com'),
      replyStatus?: string(name='ReplyStatus', example='0'),
      sendtype?: string(name='Sendtype', example='batch'),
    }
  ](name='mailAddress')
  }(name='data'),
}

model QueryMailAddressByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMailAddressByParamResponseBody(name='body'),
}

async function queryMailAddressByParam(request: QueryMailAddressByParamRequest): QueryMailAddressByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMailAddressByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryReceiverByParamRequest {
  keyWord?: string(name='KeyWord', example='mesh-notification', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='1', minimum=0, maximum=2, position='Query'),
}

model QueryReceiverByParamResponseBody = {
  nextStart?: string(name='NextStart', example='6aec200853#102#1638894326#rdwilbur@verizon.net'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='15'),
  data?: {
    receiver?: [ 
    {
      count?: string(name='Count', example='3'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      desc?: string(name='Desc'),
      receiverId?: string(name='ReceiverId', example='0c910a7143044b1e116719eb678907b3'),
      receiversAlias?: string(name='ReceiversAlias', example='10***@163.com'),
      receiversName?: string(name='ReceiversName', example='TKP000442-333'),
      receiversStatus?: string(name='ReceiversStatus', example='0'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='receiver')
  }(name='data'),
}

model QueryReceiverByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReceiverByParamResponseBody(name='body'),
}

async function queryReceiverByParam(request: QueryReceiverByParamRequest): QueryReceiverByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReceiverByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryReceiverDetailRequest {
  keyWord?: string(name='KeyWord', example='b***@example.net', position='Query'),
  nextStart?: string(name='NextStart', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  receiverId: string(name='ReceiverId', example='1235', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryReceiverDetailResponseBody = {
  dataSchema?: string(name='DataSchema', example='UserName,NickName,Gender,Birthday,Mobile'),
  nextStart?: string(name='NextStart', example='90f0243616#401#b68c2af70b9664b2843f90fd3630b1a3-1650779410#xxx@demo.aliyun.com'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='361'),
  data?: {
    detail?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      data?: string(name='Data', example='{\\"Domains\\": [\\"a.example.net\\", \\"b.example.net\\", \\"c.example.net\\", \\"d.example.net\\"]}'),
      email?: string(name='Email', example='a***@example.net'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='detail')
  }(name='data'),
}

model QueryReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReceiverDetailResponseBody(name='body'),
}

async function queryReceiverDetail(request: QueryReceiverDetailRequest): QueryReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagByParamRequest {
  keyWord?: string(name='KeyWord', example='1aTag', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=500, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTagByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='5'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    tag?: [ 
    {
      tagId?: string(name='TagId', example='52366'),
      tagName?: string(name='TagName', example='hellopal'),
    }
  ](name='tag')
  }(name='data'),
}

model QueryTagByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTagByParamResponseBody(name='body'),
}

async function queryTagByParam(request: QueryTagByParamRequest): QueryTagByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskByParamRequest {
  keyWord?: string(name='KeyWord', example='mesh-notification-788717', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='0', minimum=0, maximum=2, position='Query'),
}

model QueryTaskByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='3'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='15'),
  data?: {
    task?: [ 
    {
      addressType?: string(name='AddressType'),
      createTime?: string(name='CreateTime'),
      receiversName?: string(name='ReceiversName', example='TKP000442-333'),
      requestCount?: string(name='RequestCount', example='1'),
      tagName?: string(name='TagName', example='202201'),
      taskId?: string(name='TaskId', example='1054296'),
      taskStatus?: string(name='TaskStatus', example='1'),
      templateName?: string(name='TemplateName', example='Short Simple'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='task')
  }(name='data'),
}

model QueryTaskByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskByParamResponseBody(name='body'),
}

async function queryTaskByParam(request: QueryTaskByParamRequest): QueryTaskByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskByParam', 'POST', '/', 'json', false, 'json', request);
}

model SaveReceiverDetailRequest {
  detail: string(name='Detail', example='[{“b”:” birthday”,”e”:”xxx@alibaba-inc.com”,”g”:” gender”,”m”:” mobile “,”n”:” nickname “,”u”:”name “}]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', example='34642', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SaveReceiverDetailResponseBody = {
  data?: {
    detail?: [ 
    {
      email?: string(name='Email', example='test@mail.com'),
    }
  ](name='Detail')
  }(name='Data'),
  errorCount?: int32(name='ErrorCount', example='638'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  successCount?: int32(name='SuccessCount', example='274'),
}

model SaveReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: SaveReceiverDetailResponseBody(name='body'),
}

async function saveReceiverDetail(request: SaveReceiverDetailRequest): SaveReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model SendTestByTemplateRequest {
  accountName: string(name='AccountName', position='Query'),
  birthday?: string(name='Birthday', example='2000/01/01', position='Query'),
  email: string(name='Email', position='Query'),
  gender?: string(name='Gender', position='Query'),
  mobile?: string(name='Mobile', example='1380000****', position='Query'),
  nickName?: string(name='NickName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateId: int32(name='TemplateId', example='123', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model SendTestByTemplateResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model SendTestByTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: SendTestByTemplateResponseBody(name='body'),
}

async function sendTestByTemplate(request: SendTestByTemplateRequest): SendTestByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTestByTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SenderStatisticsByTagNameAndBatchIDRequest {
  accountName?: string(name='AccountName', example='xxx', position='Query'),
  endTime: string(name='EndTime', example='2019-09-29', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='2019-09-29', position='Query'),
  tagName?: string(name='TagName', example='xxx', position='Query'),
}

model SenderStatisticsByTagNameAndBatchIDResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='1'),
  data?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-07-02'),
      faildCount?: string(name='faildCount', example='0'),
      requestCount?: string(name='requestCount', example='4'),
      succeededPercent?: string(name='succeededPercent', example='100.00%'),
      successCount?: string(name='successCount', example='4'),
      unavailableCount?: string(name='unavailableCount', example='0'),
      unavailablePercent?: string(name='unavailablePercent', example='0%'),
    }
  ](name='stat')
  }(name='data'),
}

model SenderStatisticsByTagNameAndBatchIDResponse = {
  headers: map[string]string(name='headers'),
  body: SenderStatisticsByTagNameAndBatchIDResponseBody(name='body'),
}

async function senderStatisticsByTagNameAndBatchID(request: SenderStatisticsByTagNameAndBatchIDRequest): SenderStatisticsByTagNameAndBatchIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SenderStatisticsByTagNameAndBatchID', 'POST', '/', 'json', false, 'json', request);
}

model SenderStatisticsDetailByParamRequest {
  accountName?: string(name='AccountName', example='s***@example.net', position='Query'),
  endTime?: string(name='EndTime', example='2021-04-29 00:00', position='Query'),
  length?: int32(name='Length', example='5', minimum=1, maximum=100, position='Query'),
  nextStart?: string(name='NextStart', example='90f0243616#203#a***@example.net-1658817837#a***@example.net.247475288187', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2021-04-28 00:00', position='Query'),
  status?: int32(name='Status', example='0', minimum=0, maximum=4, position='Query'),
  tagName?: string(name='TagName', example='EmailQuestionnaireHelioscam', position='Query'),
  toAddress?: string(name='ToAddress', example='b***@example.net', position='Query'),
}

model SenderStatisticsDetailByParamResponseBody = {
  nextStart?: string(name='NextStart', example='90f0243616#203#a***@example.net-1658817689#a***@example.net.247141122178'),
  requestId?: string(name='RequestId', example='B5AB8EBB-EE64-4BB2-B085-B92CC5DEDC41'),
  data?: {
    mailDetail?: [ 
    {
      accountName?: string(name='AccountName', example='s***@example.net'),
      lastUpdateTime?: string(name='LastUpdateTime', example='2021-04-28T17:11Z'),
      message?: string(name='Message', example='250 Send Mail OK'),
      status?: int32(name='Status', example='0'),
      toAddress?: string(name='ToAddress', example='b***@example.net'),
      utcLastUpdateTime?: string(name='UtcLastUpdateTime', example='1619601108'),
    }
  ](name='mailDetail')
  }(name='data'),
}

model SenderStatisticsDetailByParamResponse = {
  headers: map[string]string(name='headers'),
  body: SenderStatisticsDetailByParamResponseBody(name='body'),
}

async function senderStatisticsDetailByParam(request: SenderStatisticsDetailByParamRequest): SenderStatisticsDetailByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SenderStatisticsDetailByParam', 'POST', '/', 'json', false, 'json', request);
}

model SingleSendMailRequest {
  accountName: string(name='AccountName', example='test@example.com', position='Query'),
  addressType: int32(name='AddressType', example='1', minimum=0, maximum=1, position='Query'),
  clickTrace?: string(name='ClickTrace', example='0', position='Query'),
  fromAlias?: string(name='FromAlias', position='Query'),
  htmlBody?: string(name='HtmlBody', example='body', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='111@aliyun.com', position='Query'),
  replyAddressAlias?: string(name='ReplyAddressAlias', position='Query'),
  replyToAddress: boolean(name='ReplyToAddress', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subject: string(name='Subject', example='Subject', position='Query'),
  tagName?: string(name='TagName', example='test', position='Query'),
  textBody?: string(name='TextBody', example='12121', position='Query'),
  toAddress: string(name='ToAddress', example='test1@example.com', position='Query'),
}

model SingleSendMailResponseBody = {
  envId?: string(name='EnvId', example='xxxxxx'),
  requestId?: string(name='RequestId', example='2D086F6-8F31-4658-84C1-006DED011A85'),
}

model SingleSendMailResponse = {
  headers: map[string]string(name='headers'),
  body: SingleSendMailResponseBody(name='body'),
}

async function singleSendMail(request: SingleSendMailRequest): SingleSendMailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleSendMail', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpProtectionRequest {
  ipProtection?: string(name='IpProtection', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpProtectionResponseBody = {
  requestId?: string(name='RequestId', example='B653A6FC-D1AD-5936-A262-F50994ED2574'),
}

model UpdateIpProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpProtectionResponseBody(name='body'),
}

async function updateIpProtection(request: UpdateIpProtectionRequest): UpdateIpProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpProtection', 'POST', '/', 'json', false, 'json', request);
}

