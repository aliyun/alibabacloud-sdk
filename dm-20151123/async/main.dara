/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dm';
  @version = '2015-11-23';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddIpfilterRequest {
  ipAddress: string(name='IpAddress', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddIpfilterResponseBody = {
  ipFilterId?: string(name='IpFilterId', example='10795'),
  requestId?: string(name='RequestId', example='0E9282E8-DC08-5445-8FB0-B9F0CA28B249'),
}

model AddIpfilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIpfilterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddIpfilter  AddIpfilterRequest
  * @return AddIpfilterResponse
 */
async function addIpfilter(request: AddIpfilterRequest): AddIpfilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpfilter', 'POST', '/', 'json', false, 'json', request);
}

model ApproveReplyMailAddressRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ticket: string(name='Ticket', description='This parameter is required.', position='Query'),
}

model ApproveReplyMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ApproveReplyMailAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveReplyMailAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApproveReplyMailAddress  ApproveReplyMailAddressRequest
  * @return ApproveReplyMailAddressResponse
 */
async function approveReplyMailAddress(request: ApproveReplyMailAddressRequest): ApproveReplyMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveReplyMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model BatchSendMailRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test@example.com', position='Query'),
  addressType: int32(name='AddressType', description='This parameter is required.', example='1', minimum=0, maximum=1, position='Query'),
  clickTrace?: string(name='ClickTrace', example='0', position='Query'),
  headers?: string(name='Headers', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiversName: string(name='ReceiversName', description='This parameter is required.', example='test2', position='Query'),
  replyAddress?: string(name='ReplyAddress', position='Query'),
  replyAddressAlias?: string(name='ReplyAddressAlias', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagName?: string(name='TagName', example='test3', position='Query'),
  templateName: string(name='TemplateName', description='This parameter is required.', example='test1', position='Query'),
  unSubscribeFilterLevel?: string(name='UnSubscribeFilterLevel', position='Query'),
  unSubscribeLinkType?: string(name='UnSubscribeLinkType', position='Query'),
}

model BatchSendMailResponseBody = {
  envId?: string(name='EnvId', example='xxx'),
  requestId?: string(name='RequestId', example='12D086F6-8F31-4658-84C1-006DED011A85'),
}

model BatchSendMailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSendMailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchSendMail  BatchSendMailRequest
  * @return BatchSendMailResponse
 */
async function batchSendMail(request: BatchSendMailRequest): BatchSendMailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSendMail', 'POST', '/', 'json', false, 'json', request);
}

model CheckDomainRequest {
  domainId: int32(name='DomainId', description='The ID of the domain name.

This parameter is required.', example='153345', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckDomainResponseBody = {
  domainStatus?: int32(name='DomainStatus', description='The status of the domain name. Indicates whether the domain name is verified and available.

*   0: indicates that the domain name is verified and available.
*   1: indicates that the domain name fails to be verified and is unavailable.
*   2: indicates that the domain name is available, but not filed or configured with a CNAME record.
*   3: indicates that the domain name is available but not filed.
*   4: indicates that the domain name is available but not configured with a CNAME record.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0B82E83-A1D9-4FE6-97D2-F4B231F80B02'),
}

model CheckDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDomain  CheckDomainRequest
  * @return CheckDomainResponse
 */
async function checkDomain(request: CheckDomainRequest): CheckDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDomain', 'POST', '/', 'json', false, 'json', request);
}

model CheckReplyToMailAddressRequest {
  lang?: string(name='Lang', position='Query'),
  mailAddressId: int32(name='MailAddressId', description='This parameter is required.', example='126545', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckReplyToMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model CheckReplyToMailAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckReplyToMailAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckReplyToMailAddress  CheckReplyToMailAddressRequest
  * @return CheckReplyToMailAddressResponse
 */
async function checkReplyToMailAddress(request: CheckReplyToMailAddressRequest): CheckReplyToMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckReplyToMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDomainResponseBody = {
  domainId?: string(name='DomainId', example='158910'),
  requestId?: string(name='RequestId', example='B49AD828-25D1-488C-90B7-8853C1944486'),
}

model CreateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDomain  CreateDomainRequest
  * @return CreateDomainResponse
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateMailAddressRequest {
  accountName: string(name='AccountName', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='reply@aliyun.com', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendtype: string(name='Sendtype', description='This parameter is required.', example='batch', position='Query'),
}

model CreateMailAddressResponseBody = {
  mailAddressId?: string(name='MailAddressId', example='xxx'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
}

model CreateMailAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMailAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMailAddress  CreateMailAddressRequest
  * @return CreateMailAddressResponse
 */
async function createMailAddress(request: CreateMailAddressRequest): CreateMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateReceiverRequest {
  desc?: string(name='Desc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiversAlias: string(name='ReceiversAlias', description='This parameter is required.', example='vme', position='Query'),
  receiversName: string(name='ReceiversName', description='This parameter is required.', example='xme', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateReceiverResponseBody = {
  receiverId?: string(name='ReceiverId', example='xxxx'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model CreateReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReceiverResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateReceiver  CreateReceiverRequest
  * @return CreateReceiverResponse
 */
async function createReceiver(request: CreateReceiverRequest): CreateReceiverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReceiver', 'POST', '/', 'json', false, 'json', request);
}

model CreateTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagDescription?: string(name='TagDescription', position='Query'),
  tagName: string(name='TagName', description='This parameter is required.', example='vme', position='Query'),
}

model CreateTagResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  tagId?: string(name='TagId', example='xxxx'),
}

model CreateTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTag  CreateTagRequest
  * @return CreateTagResponse
 */
async function createTag(request: CreateTagRequest): CreateTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTag', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserSuppressionRequest {
  address?: string(name='Address', description='Email address or domain name', example='test@example.net', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateUserSuppressionResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='1A846D66-5EC7-551B-9687-5BF1963DCFC1'),
  suppressionId?: string(name='SuppressionId', description='Invalid address number', example='59511'),
}

model CreateUserSuppressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserSuppressionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserSuppression  CreateUserSuppressionRequest
  * @return CreateUserSuppressionResponse
 */
async function createUserSuppression(request: CreateUserSuppressionRequest): CreateUserSuppressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserSuppression', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domainId: int32(name='DomainId', description='This parameter is required.', example='326***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', example='E3DFF97B-00CF-5333-8125-3D6819471984'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDomain  DeleteDomainRequest
  * @return DeleteDomainResponse
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInvalidAddressRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  toAddress?: string(name='ToAddress', example='test1***@example.net', position='Query'),
}

model DeleteInvalidAddressResponseBody = {
  requestId?: string(name='RequestId', example='2D086F6-xxxx-xxxx-xxxx-006DED011A85'),
}

model DeleteInvalidAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInvalidAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInvalidAddress  DeleteInvalidAddressRequest
  * @return DeleteInvalidAddressResponse
 */
async function deleteInvalidAddress(request: DeleteInvalidAddressRequest): DeleteInvalidAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInvalidAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpfilterByEdmIdRequest {
  fromType?: int32(name='FromType', minimum=1, maximum=2, position='Query'),
  id?: string(name='Id', example='10120', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpfilterByEdmIdResponseBody = {
  requestId?: string(name='RequestId', example='E3DFF97B-00CF-5333-8125-3D6819471984'),
}

model DeleteIpfilterByEdmIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpfilterByEdmIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIpfilterByEdmId  DeleteIpfilterByEdmIdRequest
  * @return DeleteIpfilterByEdmIdResponse
 */
async function deleteIpfilterByEdmId(request: DeleteIpfilterByEdmIdRequest): DeleteIpfilterByEdmIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpfilterByEdmId', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMailAddressRequest {
  mailAddressId: int32(name='MailAddressId', description='This parameter is required.', example='23457', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteMailAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMailAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMailAddress  DeleteMailAddressRequest
  * @return DeleteMailAddressResponse
 */
async function deleteMailAddress(request: DeleteMailAddressRequest): DeleteMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteReceiverRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', description='The ID of the recipient list.

This parameter is required.', example='1453', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteReceiverResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReceiverResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteReceiver  DeleteReceiverRequest
  * @return DeleteReceiverResponse
 */
async function deleteReceiver(request: DeleteReceiverRequest): DeleteReceiverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReceiver', 'POST', '/', 'json', false, 'json', request);
}

model DeleteReceiverDetailRequest {
  email?: string(name='Email', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', description='This parameter is required.', example='123534', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteReceiverDetailResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteReceiverDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReceiverDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteReceiverDetail  DeleteReceiverDetailRequest
  * @return DeleteReceiverDetailResponse
 */
async function deleteReceiverDetail(request: DeleteReceiverDetailRequest): DeleteReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagId: int32(name='TagId', description='The ID of the tag.

This parameter is required.', example='123', position='Query'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model DeleteTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTag  DeleteTagRequest
  * @return DeleteTagResponse
 */
async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTag', 'POST', '/', 'json', false, 'json', request);
}

model DescAccountSummaryRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescAccountSummaryResponseBody = {
  dailyQuota?: int32(name='DailyQuota', description='Daily quota', example='2000'),
  dailyRemainFreeQuota?: int32(name='DailyRemainFreeQuota', description='remaining amount of daily free quota', example='100'),
  dayuStatus?: int32(name='DayuStatus', description='Dayu status (deprecated, retained for compatibility reasons.)', example='0'),
  domains?: int32(name='Domains', description='Number of domains', example='1'),
  enableTimes?: int32(name='EnableTimes', description='Effective time', example='0'),
  mailAddresses?: int32(name='MailAddresses', description='Number of sending addresses', example='0'),
  maxQuotaLevel?: int32(name='MaxQuotaLevel', description='Maximum level', example='10'),
  monthQuota?: int32(name='MonthQuota', description='Monthly quota', example='60000'),
  quotaLevel?: int32(name='QuotaLevel', description='Credit level', example='2'),
  receivers?: int32(name='Receivers', description='Number of recipients', example='0'),
  remainFreeQuota?: int32(name='RemainFreeQuota', description='Remaining amount of total free quota', example='1910'),
  requestId?: string(name='RequestId', description='Request ID', example='82B295BB-7E69-491F-9896-ECEAFF09E1A4'),
  smsRecord?: int32(name='SmsRecord', description='Deprecated, retained for compatibility reasons.', example='0'),
  smsSign?: int32(name='SmsSign', description='Deprecated, retained for compatibility reasons.', example='0'),
  smsTemplates?: int32(name='SmsTemplates', description='Deprecated, retained for compatibility reasons.', example='0'),
  tags?: int32(name='Tags', description='Number of tags', example='0'),
  templates?: int32(name='Templates', description='Number of templates', example='1'),
  userStatus?: int32(name='UserStatus', description='User status:
1 Frozen
2 In arrears
4 Restricted from sending
8 Logically deleted', example='0'),
}

model DescAccountSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescAccountSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescAccountSummary  DescAccountSummaryRequest
  * @return DescAccountSummaryResponse
 */
async function descAccountSummary(request: DescAccountSummaryRequest): DescAccountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescAccountSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescDomainRequest {
  domainId: int32(name='DomainId', description='The ID of the domain name.

This parameter is required.', example='13464', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  requireRealTimeDnsRecords?: boolean(name='RequireRealTimeDnsRecords', description='Determine whether to perform real-time DNS resolution', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescDomainResponseBody = {
  cnameAuthStatus?: string(name='CnameAuthStatus', description='Track verification', example='1'),
  cnameConfirmStatus?: string(name='CnameConfirmStatus', description='CName verification flag, success: 0, failure: 1.', example='0'),
  cnameRecord?: string(name='CnameRecord', description='CNAME records', example='dmtrace'),
  createTime?: string(name='CreateTime', description='Creation time', example='2019-09-29T12:49Z'),
  defaultDomain?: string(name='DefaultDomain', description='Default domain name', example='0'),
  dkimAuthStatus?: string(name='DkimAuthStatus', description='DKIM validation flag, success: 0, failure: 1.', example='0'),
  dkimPublicKey?: string(name='DkimPublicKey', description='DKIM public key', example='v=DKIM1; k=rsa; p=MIGfMA0GCSqGSI...'),
  dkimRR?: string(name='DkimRR', description='DKIM HostRecord', example='aliyun-cn-hangzhou._domainkey.hangzhou26'),
  dmarcAuthStatus?: int32(name='DmarcAuthStatus', description='DMARC validation flag, success: 0, failure: 1.', example='1'),
  dmarcHostRecord?: string(name='DmarcHostRecord', description='DMARC host record', example='_dmarc.xxx'),
  dmarcRecord?: string(name='DmarcRecord', description='DMARC record', example='v=DMARC1;p=none;rua=mailto:dmarc_report@service.aliyun.com'),
  dnsDmarc?: string(name='DnsDmarc', description='dmarc record value resolved through public DNS', example='v=DMARC1;p=none;rua=mailto:dmarc_report@service.aliyun.com'),
  dnsMx?: string(name='DnsMx', description='MX record value resolved through public DNS', example='abc-com.xxxx.com'),
  dnsSpf?: string(name='DnsSpf', description='SPF record value resolved through public DNS', example='v=xxxx'),
  dnsTxt?: string(name='DnsTxt', description='TXT record value resolved through public DNS.', example='121309ohdsa'),
  domainId?: string(name='DomainId', description='The ID of the domain name.', example='158910'),
  domainName?: string(name='DomainName', description='domain', example='example.net'),
  domainStatus?: string(name='DomainStatus', description='The status of the domain name. Indicates whether the domain name is verified and available. Valid values:

0: indicates that the domain name is verified and available.

1: indicates that the domain name fails to be verified and is unavailable.

2: indicates that the domain name is available, but not filed or configured with a CNAME record.

3: indicates that the domain name is available but not filed.

4: indicates that the domain name is available but not configured with a CNAME record.', example='1'),
  domainType?: string(name='DomainType', description='TXT records provided by the Direct Mail console.', example='0c40d5f125af4e42892a'),
  hostRecord?: string(name='HostRecord', description='host record', example='xxx'),
  icpStatus?: string(name='IcpStatus', description='Filing status. 1 indicates that it has been filed, and 0 indicates that it has not been filed.', example='1'),
  mxAuthStatus?: string(name='MxAuthStatus', description='MX validation flag, success: 0, failure: 1.', example='1'),
  mxRecord?: string(name='MxRecord', description='MX record', example='mx01.dm.aliyun.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51B74264-46B4-43C8-A9A0-6B8E8BC04F34'),
  spfAuthStatus?: string(name='SpfAuthStatus', description='SPF validation flag, success: 0, failure: 1.', example='1'),
  spfRecord?: string(name='SpfRecord', description='Spf record', example='include:spf1.dm.aliyun.com'),
  spfRecordV2?: string(name='SpfRecordV2', description='SpfRecord', example='v=spf1 include:spf1.dm.aliyun.com -all'),
  tlDomainName?: string(name='TlDomainName', description='The primary domain name.', example='example.net'),
  tracefRecord?: string(name='TracefRecord', description='The CNAME verification record provided by the Direct Mail console.', example='tracedm.aliyuncs.com'),
}

model DescDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescDomain  DescDomainRequest
  * @return DescDomainResponse
 */
async function descDomain(request: DescDomainRequest): DescDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetIpProtectionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpProtectionResponseBody = {
  ipProtection?: string(name='IpProtection', example='0'),
  requestId?: string(name='RequestId', example='B30E5A62-2E64-577D-A70E-8C6781D6C975'),
}

model GetIpProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIpProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIpProtection  GetIpProtectionRequest
  * @return GetIpProtectionResponse
 */
async function getIpProtection(request: GetIpProtectionRequest): GetIpProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpProtection', 'POST', '/', 'json', false, 'json', request);
}

model GetIpfilterListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpfilterListResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='84DD77C7-A091-5139-9530-2D1F7CCE59E0'),
  totalCount?: int32(name='TotalCount', example='1'),
  data?: {
    ipfilters?: [ 
    {
      createTime?: string(name='CreateTime', example='1653547140'),
      id?: string(name='Id', example='10083'),
      ipAddress?: string(name='IpAddress'),
    }
  ](name='ipfilters')
  }(name='data'),
}

model GetIpfilterListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIpfilterListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIpfilterList  GetIpfilterListRequest
  * @return GetIpfilterListResponse
 */
async function getIpfilterList(request: GetIpfilterListRequest): GetIpfilterListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpfilterList', 'POST', '/', 'json', false, 'json', request);
}

model GetSuppressionListLevelRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetSuppressionListLevelResponseBody = {
  requestId?: string(name='RequestId'),
  suppressionListLevel?: string(name='SuppressionListLevel'),
}

model GetSuppressionListLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuppressionListLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSuppressionListLevel  GetSuppressionListLevelRequest
  * @return GetSuppressionListLevelResponse
 */
async function getSuppressionListLevel(request: GetSuppressionListLevelRequest): GetSuppressionListLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuppressionListLevel', 'POST', '/', 'json', false, 'json', request);
}

model GetTrackListRequest {
  accountName?: string(name='AccountName', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  offset?: string(name='Offset', position='Query'),
  offsetCreateTime?: string(name='OffsetCreateTime', position='Query'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  tagName?: string(name='TagName', position='Query'),
  total?: string(name='Total', position='Query'),
}

model GetTrackListResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  total?: int32(name='Total', example='100'),
  data?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      rcptClickCount?: string(name='RcptClickCount', example='0'),
      rcptClickRate?: string(name='RcptClickRate', example='0'),
      rcptOpenCount?: string(name='RcptOpenCount', example='0'),
      rcptOpenRate?: string(name='RcptOpenRate', example='0'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount', example='0'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate', example='0'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount', example='0'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate', example='0'),
      totalNumber?: string(name='TotalNumber', example='0'),
    }
  ](name='stat')
  }(name='data'),
}

model GetTrackListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrackListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrackList  GetTrackListRequest
  * @return GetTrackListResponse
 */
async function getTrackList(request: GetTrackListRequest): GetTrackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrackList', 'POST', '/', 'json', false, 'json', request);
}

model GetTrackListByMailFromAndTagNameRequest {
  accountName?: string(name='AccountName', example='e-service@amegroups.cn', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  offset?: string(name='Offset', position='Query'),
  offsetCreateTime?: string(name='OffsetCreateTime', position='Query'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  tagName?: string(name='TagName', example='Subscription', position='Query'),
  total?: string(name='Total', position='Query'),
}

model GetTrackListByMailFromAndTagNameResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  total?: int32(name='Total', example='4'),
  trackList?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-11T10:11Z'),
      rcptClickCount?: string(name='RcptClickCount', example='0'),
      rcptClickRate?: string(name='RcptClickRate', example='0'),
      rcptOpenCount?: string(name='RcptOpenCount', example='0'),
      rcptOpenRate?: string(name='RcptOpenRate', example='0'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount', example='0'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate', example='0'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount', example='0'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate', example='0'),
      totalNumber?: string(name='TotalNumber', example='0'),
    }
  ](name='Stat')
  }(name='TrackList'),
}

model GetTrackListByMailFromAndTagNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrackListByMailFromAndTagNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrackListByMailFromAndTagName  GetTrackListByMailFromAndTagNameRequest
  * @return GetTrackListByMailFromAndTagNameResponse
 */
async function getTrackListByMailFromAndTagName(request: GetTrackListByMailFromAndTagNameRequest): GetTrackListByMailFromAndTagNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrackListByMailFromAndTagName', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetUserResponseBody = {
  data?: {
    enableEventbridge?: boolean(name='EnableEventbridge', description='Whether EventBridge is enabled', example='true'),
  }(name='Data', description='Returned Content'),
  requestId?: string(name='RequestId', description='Request ID', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'GET', '/', 'json', false, 'json', request);
}

model ListUserSuppressionRequest {
  regionId?: string(name='RegionId', position='Host'),
  address?: string(name='Address', description='Email address or domain name', example='test@example.net', position='Query'),
  endBounceTime?: int32(name='EndBounceTime', description='End time of the last bounce hit, timestamp, accurate to the second. The span between start and end times cannot exceed 7 days.', example='1715669077', position='Query'),
  endCreateTime?: int32(name='EndCreateTime', description='End creation time, timestamp, accurate to the second. The span between start and end times cannot exceed 7 days.', example='1715669077', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', description='Current page number', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Page size', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startBounceTime?: int32(name='StartBounceTime', description='Start time of the last bounce hit, timestamp, accurate to the second.', example='1715668852', position='Query'),
  startCreateTime?: int32(name='StartCreateTime', description='Start creation time, timestamp, accurate to the second.', example='1715668852', position='Query'),
}

model ListUserSuppressionResponseBody = {
  data?: {
    userSuppressions?: [ 
    {
      address?: string(name='Address', description='Email address or domain name', example='test@example.net'),
      createTime?: int32(name='CreateTime', description='Creation time, timestamp, accurate to the second.', example='1715667435'),
      lastBounceTime?: int32(name='LastBounceTime', description='Last bounce hit time, timestamp, accurate to the second.', example='1715667451'),
      suppressionId?: int32(name='SuppressionId', description='Invalid address ID', example='59511'),
      type?: string(name='Type', description='Source of entry, invalid address type
- system
- user', example='user'),
    }
  ](name='UserSuppressions')
  }(name='Data', description='Returned results.'),
  pageNumber?: int32(name='PageNumber', description='Page number', example='1'),
  pageSize?: int32(name='PageSize', description='Page size', example='10'),
  requestId?: string(name='RequestId', description='Request ID', example='1A846D66-5EC7-551B-9687-5BF1963DCFC1'),
  totalCount?: int32(name='TotalCount', description='Total count', example='2'),
}

model ListUserSuppressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserSuppressionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserSuppression  ListUserSuppressionRequest
  * @return ListUserSuppressionResponse
 */
async function listUserSuppression(request: ListUserSuppressionRequest): ListUserSuppressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserSuppression', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMailAddressRequest {
  mailAddressId: int32(name='MailAddressId', description='This parameter is required.', example='1344565', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', example='pwd129WDCft9', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='a***@example.net', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyMailAddressResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ModifyMailAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyMailAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyMailAddress  ModifyMailAddressRequest
  * @return ModifyMailAddressResponse
 */
async function modifyMailAddress(request: ModifyMailAddressRequest): ModifyMailAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMailAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPWByDomainRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='pwd', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyPWByDomainResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='02B2A890-CBD8-4806-9BCA-C93190CE7EF6'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPWByDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPWByDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPWByDomain  ModifyPWByDomainRequest
  * @return ModifyPWByDomainResponse
 */
async function modifyPWByDomain(request: ModifyPWByDomainRequest): ModifyPWByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPWByDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTagRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagDescription?: string(name='TagDescription', position='Query'),
  tagId: int32(name='TagId', description='The ID of the tag.

This parameter is required.', example='123', position='Query'),
  tagName: string(name='TagName', description='The name of the tag.

This parameter is required.', example='vme', position='Query'),
}

model ModifyTagResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model ModifyTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTag  ModifyTagRequest
  * @return ModifyTagResponse
 */
async function modifyTag(request: ModifyTagRequest): ModifyTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTag', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainByParamRequest {
  keyWord?: string(name='KeyWord', example='abc.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='0', minimum=0, maximum=2, position='Query'),
}

model QueryDomainByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='8C90CCD3-627C-4F87-AD8C-2F03146071EB'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    domain?: [ 
    {
      cnameAuthStatus?: string(name='CnameAuthStatus', example='0'),
      confirmStatus?: string(name='ConfirmStatus', example='0'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      domainId?: string(name='DomainId', example='158923'),
      domainName?: string(name='DomainName', example='vmeixme.com'),
      domainRecord?: string(name='DomainRecord', example='6bd86901b9fe4618a046'),
      domainStatus?: string(name='DomainStatus', example='0'),
      icpStatus?: string(name='IcpStatus', example='1'),
      mxAuthStatus?: string(name='MxAuthStatus', example='0'),
      spfAuthStatus?: string(name='SpfAuthStatus', example='0'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='domain')
  }(name='data'),
}

model QueryDomainByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDomainByParam  QueryDomainByParamRequest
  * @return QueryDomainByParamResponse
 */
async function queryDomainByParam(request: QueryDomainByParamRequest): QueryDomainByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryInvalidAddressRequest {
  endTime?: string(name='EndTime', example='2019-09-29', position='Query'),
  keyWord?: string(name='KeyWord', example='info', position='Query'),
  length?: int32(name='Length', example='100', minimum=1, maximum=100, position='Query'),
  nextStart?: string(name='NextStart', example='***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', example='2019-09-29', position='Query'),
}

model QueryInvalidAddressResponseBody = {
  nextStart?: string(name='NextStart', example='2'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
  totalCount?: int32(name='TotalCount', example='3'),
  data?: {
    mailDetail?: [ 
    {
      lastUpdateTime?: string(name='LastUpdateTime', example='2021-04-28T17:11Z'),
      toAddress?: string(name='ToAddress', example='toaddress@test.com'),
      utcLastUpdateTime?: long(name='UtcLastUpdateTime', example='1619601108'),
    }
  ](name='mailDetail')
  }(name='data'),
}

model QueryInvalidAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInvalidAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryInvalidAddress  QueryInvalidAddressRequest
  * @return QueryInvalidAddressResponse
 */
async function queryInvalidAddress(request: QueryInvalidAddressRequest): QueryInvalidAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInvalidAddress', 'POST', '/', 'json', false, 'json', request);
}

model QueryMailAddressByParamRequest {
  keyWord?: string(name='KeyWord', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=500, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendtype?: string(name='Sendtype', example='batch', position='Query'),
}

model QueryMailAddressByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='95A7D497-F8DD-4834-B81E-C1783236E55F'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    mailAddress?: [ 
    {
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus', example='0'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      dailyCount?: string(name='DailyCount', example='10000'),
      dailyReqCount?: string(name='DailyReqCount', example='100'),
      domainStatus?: string(name='DomainStatus', example='0'),
      mailAddressId?: string(name='MailAddressId', example='12122'),
      monthCount?: string(name='MonthCount', example='300000'),
      monthReqCount?: string(name='MonthReqCount', example='20000'),
      replyAddress?: string(name='ReplyAddress', example='112@aliyun.com'),
      replyStatus?: string(name='ReplyStatus', example='0'),
      sendtype?: string(name='Sendtype', example='batch'),
    }
  ](name='mailAddress')
  }(name='data'),
}

model QueryMailAddressByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMailAddressByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMailAddressByParam  QueryMailAddressByParamRequest
  * @return QueryMailAddressByParamResponse
 */
async function queryMailAddressByParam(request: QueryMailAddressByParamRequest): QueryMailAddressByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMailAddressByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryReceiverByParamRequest {
  keyWord?: string(name='KeyWord', example='mesh-notification', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='1', minimum=0, maximum=2, position='Query'),
}

model QueryReceiverByParamResponseBody = {
  nextStart?: string(name='NextStart', example='6aec200853#102#1638894326#rdwilbur@verizon.net'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='15'),
  data?: {
    receiver?: [ 
    {
      count?: string(name='Count', example='3'),
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      desc?: string(name='Desc'),
      receiverId?: string(name='ReceiverId', example='0c910a7143044b1e116719eb678907b3'),
      receiversAlias?: string(name='ReceiversAlias', example='10***@163.com'),
      receiversName?: string(name='ReceiversName', example='TKP000442-333'),
      receiversStatus?: string(name='ReceiversStatus', example='0'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='receiver')
  }(name='data'),
}

model QueryReceiverByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReceiverByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryReceiverByParam  QueryReceiverByParamRequest
  * @return QueryReceiverByParamResponse
 */
async function queryReceiverByParam(request: QueryReceiverByParamRequest): QueryReceiverByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReceiverByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryReceiverDetailRequest {
  keyWord?: string(name='KeyWord', example='b***@example.net', position='Query'),
  nextStart?: string(name='NextStart', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  receiverId: string(name='ReceiverId', description='This parameter is required.', example='1235', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryReceiverDetailResponseBody = {
  dataSchema?: string(name='DataSchema', example='UserName,NickName,Gender,Birthday,Mobile'),
  nextStart?: string(name='NextStart', example='90f0243616#401#b68c2af70b9664b2843f90fd3630b1a3-1650779410#xxx@demo.aliyun.com'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='361'),
  data?: {
    detail?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-09-29T13:28Z'),
      data?: string(name='Data', example='{\\"Domains\\": [\\"a.example.net\\", \\"b.example.net\\", \\"c.example.net\\", \\"d.example.net\\"]}'),
      email?: string(name='Email', example='a***@example.net'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='detail')
  }(name='data'),
}

model QueryReceiverDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReceiverDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryReceiverDetail  QueryReceiverDetailRequest
  * @return QueryReceiverDetailResponse
 */
async function queryReceiverDetail(request: QueryReceiverDetailRequest): QueryReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagByParamRequest {
  keyWord?: string(name='KeyWord', example='1aTag', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=500, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTagByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='5'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='2'),
  data?: {
    tag?: [ 
    {
      tagDescription?: string(name='TagDescription'),
      tagId?: string(name='TagId', example='52366'),
      tagName?: string(name='TagName', example='hellopal'),
    }
  ](name='tag')
  }(name='data'),
}

model QueryTagByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTagByParam  QueryTagByParamRequest
  * @return QueryTagByParamResponse
 */
async function queryTagByParam(request: QueryTagByParamRequest): QueryTagByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagByParam', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskByParamRequest {
  keyWord?: string(name='KeyWord', example='mesh-notification-788717', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='0', minimum=0, maximum=2, position='Query'),
}

model QueryTaskByParamResponseBody = {
  pageNumber?: int32(name='PageNumber', example='3'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='15'),
  data?: {
    task?: [ 
    {
      addressType?: string(name='AddressType'),
      createTime?: string(name='CreateTime'),
      receiversName?: string(name='ReceiversName', example='TKP000442-333'),
      requestCount?: string(name='RequestCount', example='1'),
      tagName?: string(name='TagName', example='202201'),
      taskId?: string(name='TaskId', example='1054296'),
      taskStatus?: string(name='TaskStatus', example='1'),
      templateName?: string(name='TemplateName', example='Short Simple'),
      utcCreateTime?: long(name='UtcCreateTime', example='1569734892'),
    }
  ](name='task')
  }(name='data'),
}

model QueryTaskByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTaskByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTaskByParam  QueryTaskByParamRequest
  * @return QueryTaskByParamResponse
 */
async function queryTaskByParam(request: QueryTaskByParamRequest): QueryTaskByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskByParam', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserSuppressionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  suppressionIds?: string(name='SuppressionIds', example='59511', position='Query'),
}

model RemoveUserSuppressionResponseBody = {
  requestId?: string(name='RequestId', example='1A846D66-5EC7-551B-9687-5BF1963DCFC1'),
}

model RemoveUserSuppressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserSuppressionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserSuppression  RemoveUserSuppressionRequest
  * @return RemoveUserSuppressionResponse
 */
async function removeUserSuppression(request: RemoveUserSuppressionRequest): RemoveUserSuppressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserSuppression', 'POST', '/', 'json', false, 'json', request);
}

model SaveReceiverDetailRequest {
  detail: string(name='Detail', description='This parameter is required.', example='[{“b”:” birthday”,”e”:”xxx@alibaba-inc.com”,”g”:” gender”,”m”:” mobile “,”n”:” nickname “,”u”:”name “}]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  receiverId: string(name='ReceiverId', description='This parameter is required.', example='34642', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SaveReceiverDetailResponseBody = {
  data?: {
    detail?: [ 
    {
      email?: string(name='Email', example='test@mail.com'),
    }
  ](name='Detail')
  }(name='Data'),
  errorCount?: int32(name='ErrorCount', example='638'),
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  successCount?: int32(name='SuccessCount', example='274'),
}

model SaveReceiverDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveReceiverDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveReceiverDetail  SaveReceiverDetailRequest
  * @return SaveReceiverDetailResponse
 */
async function saveReceiverDetail(request: SaveReceiverDetailRequest): SaveReceiverDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveReceiverDetail', 'POST', '/', 'json', false, 'json', request);
}

model SendTestByTemplateRequest {
  accountName: string(name='AccountName', description='This parameter is required.', position='Query'),
  birthday?: string(name='Birthday', example='2000/01/01', position='Query'),
  email: string(name='Email', description='This parameter is required.', position='Query'),
  gender?: string(name='Gender', position='Query'),
  mobile?: string(name='Mobile', example='1380000****', position='Query'),
  nickName?: string(name='NickName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateId: int32(name='TemplateId', description='This parameter is required.', example='123', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model SendTestByTemplateResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
}

model SendTestByTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTestByTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendTestByTemplate  SendTestByTemplateRequest
  * @return SendTestByTemplateResponse
 */
async function sendTestByTemplate(request: SendTestByTemplateRequest): SendTestByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTestByTemplate', 'POST', '/', 'json', false, 'json', request);
}

model SenderStatisticsByTagNameAndBatchIDRequest {
  accountName?: string(name='AccountName', example='xxx', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2019-09-29', position='Query'),
  tagName?: string(name='TagName', example='xxx', position='Query'),
}

model SenderStatisticsByTagNameAndBatchIDResponseBody = {
  requestId?: string(name='RequestId', example='10A1AD70-E48E-476D-98D9-39BD92193837'),
  totalCount?: int32(name='TotalCount', example='1'),
  data?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-07-02'),
      faildCount?: string(name='faildCount', example='0'),
      requestCount?: string(name='requestCount', example='4'),
      succeededPercent?: string(name='succeededPercent', example='100.00%'),
      successCount?: string(name='successCount', example='4'),
      unavailableCount?: string(name='unavailableCount', example='0'),
      unavailablePercent?: string(name='unavailablePercent', example='0%'),
    }
  ](name='stat')
  }(name='data'),
}

model SenderStatisticsByTagNameAndBatchIDResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SenderStatisticsByTagNameAndBatchIDResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SenderStatisticsByTagNameAndBatchID  SenderStatisticsByTagNameAndBatchIDRequest
  * @return SenderStatisticsByTagNameAndBatchIDResponse
 */
async function senderStatisticsByTagNameAndBatchID(request: SenderStatisticsByTagNameAndBatchIDRequest): SenderStatisticsByTagNameAndBatchIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SenderStatisticsByTagNameAndBatchID', 'POST', '/', 'json', false, 'json', request);
}

model SenderStatisticsDetailByParamRequest {
  accountName?: string(name='AccountName', description='Sending address. Not filled in represents all addresses.', example='s***@example.net', position='Query'),
  endTime?: string(name='EndTime', description='The end time. The difference between the start time and the end time cannot exceed 30 days. Format: yyyy-MM-dd.', example='2021-04-29 00:00', position='Query'),
  length?: int32(name='Length', description='The number of entries to return in the request. Valid values: 1 to 100.', example='5', minimum=1, maximum=100, position='Query'),
  nextStart?: string(name='NextStart', description='The start position of the next page. The offset for the request. If you want to obtain more records, specify the return value of the NextStart parameter for this parameter.', example='90f0243616#203#a***@example.net-1658817837#a***@example.net.247475288187', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The start time. The start time can be up to 30 days earlier than the current time. Format: yyyy-MM-dd.', example='2021-04-28 00:00', position='Query'),
  status?: int32(name='Status', description='The delivery status. If you leave this parameter empty, all states are included. Valid values: 0: successful, 2 invalid email address, 3: spam, and 4: failed.', example='0', minimum=0, maximum=4, position='Query'),
  tagName?: string(name='TagName', description='The email tag. If you leave this parameter empty, all email tags are included.', example='EmailQuestionnaireHelioscam', position='Query'),
  toAddress?: string(name='ToAddress', description='The recipient address. If you leave this parameter empty, all recipient addresses are included.', example='b***@example.net', position='Query'),
}

model SenderStatisticsDetailByParamResponseBody = {
  nextStart?: string(name='NextStart', description='The start position of the next page. The return value of the NextStart parameter indicates the start position of the next page. If you want to obtain more records, specify the return value in the next request.', example='90f0243616#203#a***@example.net-1658817689#a***@example.net.247141122178'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B5AB8EBB-EE64-4BB2-B085-B92CC5DEDC41'),
  data?: {
    mailDetail?: [ 
    {
      accountName?: string(name='AccountName', description='The sender address.', example='s***@example.net'),
      errorClassification?: string(name='ErrorClassification', description='Detailed classification of error causes:

- SendOk
- SmtpNxBox

etc.', example='SendOk'),
      lastUpdateTime?: string(name='LastUpdateTime', description='The most recent update time.', example='2021-04-28T17:11Z'),
      message?: string(name='Message', description='The details of the email.', example='250 Send Mail OK'),
      status?: int32(name='Status', description='The delivery status. Valid values: 0: successful, 2 invalid email address, 3: spam, and 4: failed.', example='0'),
      subject?: string(name='Subject', description='the subject of email.', example='test subject'),
      toAddress?: string(name='ToAddress', description='The recipient address.', example='b***@example.net'),
      utcLastUpdateTime?: string(name='UtcLastUpdateTime', description='The most recent update time (timestamp format)', example='1619601108'),
    }
  ](name='mailDetail')
  }(name='data', description='The response parameters.'),
}

model SenderStatisticsDetailByParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SenderStatisticsDetailByParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SenderStatisticsDetailByParam  SenderStatisticsDetailByParamRequest
  * @return SenderStatisticsDetailByParamResponse
 */
async function senderStatisticsDetailByParam(request: SenderStatisticsDetailByParamRequest): SenderStatisticsDetailByParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SenderStatisticsDetailByParam', 'POST', '/', 'json', false, 'json', request);
}

model SetSuppressionListLevelRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  suppressionListLevel?: string(name='SuppressionListLevel', position='Query'),
}

model SetSuppressionListLevelResponseBody = {
  requestId?: string(name='RequestId'),
  suppressionListLevel?: string(name='SuppressionListLevel'),
}

model SetSuppressionListLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSuppressionListLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSuppressionListLevel  SetSuppressionListLevelRequest
  * @return SetSuppressionListLevelResponse
 */
async function setSuppressionListLevel(request: SetSuppressionListLevelRequest): SetSuppressionListLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSuppressionListLevel', 'POST', '/', 'json', false, 'json', request);
}

model SingleSendMailRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test@example.com', position='Query'),
  addressType: int32(name='AddressType', description='This parameter is required.', example='1', minimum=0, maximum=1, position='Query'),
  clickTrace?: string(name='ClickTrace', example='0', position='Query'),
  fromAlias?: string(name='FromAlias', position='Query'),
  headers?: string(name='Headers', position='Query'),
  htmlBody?: string(name='HtmlBody', example='body', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replyAddress?: string(name='ReplyAddress', example='111@aliyun.com', position='Query'),
  replyAddressAlias?: string(name='ReplyAddressAlias', position='Query'),
  replyToAddress: boolean(name='ReplyToAddress', description='This parameter is required.', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subject: string(name='Subject', description='This parameter is required.', example='Subject', position='Query'),
  tagName?: string(name='TagName', example='test', position='Query'),
  textBody?: string(name='TextBody', example='12121', position='Query'),
  toAddress: string(name='ToAddress', description='This parameter is required.', example='test1@example.com', position='Query'),
  unSubscribeFilterLevel?: string(name='UnSubscribeFilterLevel', position='Query'),
  unSubscribeLinkType?: string(name='UnSubscribeLinkType', position='Query'),
}

model SingleSendMailResponseBody = {
  envId?: string(name='EnvId', example='xxxxxx'),
  requestId?: string(name='RequestId', example='2D086F6-8F31-4658-84C1-006DED011A85'),
}

model SingleSendMailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleSendMailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SingleSendMail  SingleSendMailRequest
  * @return SingleSendMailResponse
 */
async function singleSendMail(request: SingleSendMailRequest): SingleSendMailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SingleSendMail', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpProtectionRequest {
  ipProtection?: string(name='IpProtection', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpProtectionResponseBody = {
  requestId?: string(name='RequestId', example='B653A6FC-D1AD-5936-A262-F50994ED2574'),
}

model UpdateIpProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateIpProtection  UpdateIpProtectionRequest
  * @return UpdateIpProtectionResponse
 */
async function updateIpProtection(request: UpdateIpProtectionRequest): UpdateIpProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpProtection', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  user?: {
    enableEventbridge?: boolean(name='EnableEventbridge', description='Whether EventBridge is enabled', example='true'),
  }(name='User', description='User Information', shrink='json', position='Body'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7BC346F6-1092-5852-B6E2-CCE2E5AAE51F'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUser  UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', true, 'form', request);
}

