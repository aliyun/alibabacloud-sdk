/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('dm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddIpfilterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ipAddress?: string(name='IpAddress'),
}

model AddIpfilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddIpfilterResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpfilterResponseBody(name='body'),
}

async function addIpfilterWithOptions(request: AddIpfilterRequest, runtime: Util.RuntimeOptions): AddIpfilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddIpfilter', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addIpfilter(request: AddIpfilterRequest): AddIpfilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpfilterWithOptions(request, runtime);
}

model ApproveMailTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  fromType?: int32(name='FromType'),
}

model ApproveMailTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApproveMailTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveMailTemplateResponseBody(name='body'),
}

async function approveMailTemplateWithOptions(request: ApproveMailTemplateRequest, runtime: Util.RuntimeOptions): ApproveMailTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveMailTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveMailTemplate(request: ApproveMailTemplateRequest): ApproveMailTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveMailTemplateWithOptions(request, runtime);
}

model ApproveReplyMailAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ticket?: string(name='Ticket'),
}

model ApproveReplyMailAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApproveReplyMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveReplyMailAddressResponseBody(name='body'),
}

async function approveReplyMailAddressWithOptions(request: ApproveReplyMailAddressRequest, runtime: Util.RuntimeOptions): ApproveReplyMailAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveReplyMailAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveReplyMailAddress(request: ApproveReplyMailAddressRequest): ApproveReplyMailAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveReplyMailAddressWithOptions(request, runtime);
}

model ApproveSmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  fromType?: int32(name='FromType'),
}

model ApproveSmsTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApproveSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveSmsTemplateResponseBody(name='body'),
}

async function approveSmsTemplateWithOptions(request: ApproveSmsTemplateRequest, runtime: Util.RuntimeOptions): ApproveSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveSmsTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveSmsTemplate(request: ApproveSmsTemplateRequest): ApproveSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveSmsTemplateWithOptions(request, runtime);
}

model ApproveTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  fromType?: int32(name='FromType'),
}

model ApproveTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApproveTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveTemplateResponseBody(name='body'),
}

async function approveTemplateWithOptions(request: ApproveTemplateRequest, runtime: Util.RuntimeOptions): ApproveTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveTemplate(request: ApproveTemplateRequest): ApproveTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveTemplateWithOptions(request, runtime);
}

model BatchSendMailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
  accountName?: string(name='AccountName'),
  receiversName?: string(name='ReceiversName'),
  addressType?: int32(name='AddressType'),
  tagName?: string(name='TagName'),
  replyAddress?: string(name='ReplyAddress'),
  replyAddressAlias?: string(name='ReplyAddressAlias'),
  clickTrace?: string(name='ClickTrace'),
}

model BatchSendMailResponseBody = {
  requestId?: string(name='RequestId'),
  envId?: string(name='EnvId'),
}

model BatchSendMailResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSendMailResponseBody(name='body'),
}

async function batchSendMailWithOptions(request: BatchSendMailRequest, runtime: Util.RuntimeOptions): BatchSendMailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSendMail', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSendMail(request: BatchSendMailRequest): BatchSendMailResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSendMailWithOptions(request, runtime);
}

model CheckDomainRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  domainId?: int32(name='DomainId'),
}

model CheckDomainResponseBody = {
  requestId?: string(name='RequestId'),
  domainStatus?: int32(name='DomainStatus'),
}

model CheckDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDomainResponseBody(name='body'),
}

async function checkDomainWithOptions(request: CheckDomainRequest, runtime: Util.RuntimeOptions): CheckDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDomain', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDomain(request: CheckDomainRequest): CheckDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDomainWithOptions(request, runtime);
}

model CheckInvalidAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  toAddress?: string(name='ToAddress'),
}

model CheckInvalidAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckInvalidAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CheckInvalidAddressResponseBody(name='body'),
}

async function checkInvalidAddressWithOptions(request: CheckInvalidAddressRequest, runtime: Util.RuntimeOptions): CheckInvalidAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckInvalidAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkInvalidAddress(request: CheckInvalidAddressRequest): CheckInvalidAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkInvalidAddressWithOptions(request, runtime);
}

model CheckReplyToMailAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  lang?: string(name='Lang'),
  region?: string(name='Region'),
  mailAddressId?: int32(name='MailAddressId'),
}

model CheckReplyToMailAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckReplyToMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CheckReplyToMailAddressResponseBody(name='body'),
}

async function checkReplyToMailAddressWithOptions(request: CheckReplyToMailAddressRequest, runtime: Util.RuntimeOptions): CheckReplyToMailAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckReplyToMailAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkReplyToMailAddress(request: CheckReplyToMailAddressRequest): CheckReplyToMailAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkReplyToMailAddressWithOptions(request, runtime);
}

model CreateDayuRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accountType?: int32(name='AccountType'),
}

model CreateDayuResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDayuResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDayuResponseBody(name='body'),
}

async function createDayuWithOptions(request: CreateDayuRequest, runtime: Util.RuntimeOptions): CreateDayuResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDayu', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDayu(request: CreateDayuRequest): CreateDayuResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDayuWithOptions(request, runtime);
}

model CreateDomainRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  domainName?: string(name='DomainName'),
}

model CreateDomainResponseBody = {
  domainId?: string(name='DomainId'),
  requestId?: string(name='RequestId'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomainWithOptions(request: CreateDomainRequest, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDomain', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainWithOptions(request, runtime);
}

model CreateMailAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accountName?: string(name='AccountName'),
  replyAddress?: string(name='ReplyAddress'),
  sendtype?: string(name='Sendtype'),
}

model CreateMailAddressResponseBody = {
  requestId?: string(name='RequestId'),
  mailAddressId?: string(name='MailAddressId'),
}

model CreateMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMailAddressResponseBody(name='body'),
}

async function createMailAddressWithOptions(request: CreateMailAddressRequest, runtime: Util.RuntimeOptions): CreateMailAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMailAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMailAddress(request: CreateMailAddressRequest): CreateMailAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMailAddressWithOptions(request, runtime);
}

model CreateReceiverRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  receiversName?: string(name='ReceiversName'),
  receiversAlias?: string(name='ReceiversAlias'),
  desc?: string(name='Desc'),
}

model CreateReceiverResponseBody = {
  receiverId?: string(name='ReceiverId'),
  requestId?: string(name='RequestId'),
}

model CreateReceiverResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReceiverResponseBody(name='body'),
}

async function createReceiverWithOptions(request: CreateReceiverRequest, runtime: Util.RuntimeOptions): CreateReceiverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateReceiver', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createReceiver(request: CreateReceiverRequest): CreateReceiverResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReceiverWithOptions(request, runtime);
}

model CreateSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  remark?: string(name='Remark'),
  signType?: int32(name='SignType'),
  fileNames?: string(name='FileNames'),
  fromType?: int32(name='FromType'),
}

model CreateSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSignResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignResponseBody(name='body'),
}

async function createSignWithOptions(request: CreateSignRequest, runtime: Util.RuntimeOptions): CreateSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSign', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSign(request: CreateSignRequest): CreateSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignWithOptions(request, runtime);
}

model CreateTagRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagName?: string(name='TagName'),
}

model CreateTagResponseBody = {
  requestId?: string(name='RequestId'),
  tagId?: string(name='TagId'),
}

model CreateTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResponseBody(name='body'),
}

async function createTagWithOptions(request: CreateTagRequest, runtime: Util.RuntimeOptions): CreateTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTag', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTag(request: CreateTagRequest): CreateTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTagWithOptions(request, runtime);
}

model CreateTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateType?: int32(name='TemplateType'),
  templateName?: string(name='TemplateName'),
  templateSubject?: string(name='TemplateSubject'),
  templateNickName?: string(name='TemplateNickName'),
  templateText?: string(name='TemplateText'),
  smsType?: int32(name='SmsType'),
  smsContent?: string(name='SmsContent'),
  remark?: string(name='Remark'),
  fromType?: int32(name='FromType'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: int32(name='TemplateId'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model DeleteDomainRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  domainId?: int32(name='DomainId'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomain', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteInvalidAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  toAddress?: string(name='ToAddress'),
}

model DeleteInvalidAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInvalidAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInvalidAddressResponseBody(name='body'),
}

async function deleteInvalidAddressWithOptions(request: DeleteInvalidAddressRequest, runtime: Util.RuntimeOptions): DeleteInvalidAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInvalidAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInvalidAddress(request: DeleteInvalidAddressRequest): DeleteInvalidAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInvalidAddressWithOptions(request, runtime);
}

model DeleteIpfilterByEdmIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  fromType?: int32(name='FromType'),
  id?: string(name='Id'),
}

model DeleteIpfilterByEdmIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpfilterByEdmIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpfilterByEdmIdResponseBody(name='body'),
}

async function deleteIpfilterByEdmIdWithOptions(request: DeleteIpfilterByEdmIdRequest, runtime: Util.RuntimeOptions): DeleteIpfilterByEdmIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIpfilterByEdmId', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIpfilterByEdmId(request: DeleteIpfilterByEdmIdRequest): DeleteIpfilterByEdmIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpfilterByEdmIdWithOptions(request, runtime);
}

model DeleteMailAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  mailAddressId?: int32(name='MailAddressId'),
}

model DeleteMailAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMailAddressResponseBody(name='body'),
}

async function deleteMailAddressWithOptions(request: DeleteMailAddressRequest, runtime: Util.RuntimeOptions): DeleteMailAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMailAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMailAddress(request: DeleteMailAddressRequest): DeleteMailAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMailAddressWithOptions(request, runtime);
}

model DeleteReceiverRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  receiverId?: string(name='ReceiverId'),
}

model DeleteReceiverResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteReceiverResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReceiverResponseBody(name='body'),
}

async function deleteReceiverWithOptions(request: DeleteReceiverRequest, runtime: Util.RuntimeOptions): DeleteReceiverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteReceiver', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteReceiver(request: DeleteReceiverRequest): DeleteReceiverResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteReceiverWithOptions(request, runtime);
}

model DeleteReceiverDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  receiverId?: string(name='ReceiverId'),
  email?: string(name='Email'),
}

model DeleteReceiverDetailResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReceiverDetailResponseBody(name='body'),
}

async function deleteReceiverDetailWithOptions(request: DeleteReceiverDetailRequest, runtime: Util.RuntimeOptions): DeleteReceiverDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteReceiverDetail', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteReceiverDetail(request: DeleteReceiverDetailRequest): DeleteReceiverDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteReceiverDetailWithOptions(request, runtime);
}

model DeleteSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signId?: long(name='SignId'),
  fromType?: int32(name='FromType'),
}

model DeleteSignResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSignResponseBody(name='body'),
}

async function deleteSignWithOptions(request: DeleteSignRequest, runtime: Util.RuntimeOptions): DeleteSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSign', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSign(request: DeleteSignRequest): DeleteSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSignWithOptions(request, runtime);
}

model DeleteTagRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagId?: int32(name='TagId'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTagWithOptions(request: DeleteTagRequest, runtime: Util.RuntimeOptions): DeleteTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTag', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  fromType?: int32(name='FromType'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DescAccountSummaryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescAccountSummaryResponseBody = {
  dayuStatus?: int32(name='DayuStatus'),
  smsRecord?: int32(name='SmsRecord'),
  monthQuota?: int32(name='MonthQuota'),
  requestId?: string(name='RequestId'),
  receivers?: int32(name='Receivers'),
  smsTemplates?: int32(name='SmsTemplates'),
  templates?: int32(name='Templates'),
  dailyQuota?: int32(name='DailyQuota'),
  userStatus?: int32(name='UserStatus'),
  domains?: int32(name='Domains'),
  quotaLevel?: int32(name='QuotaLevel'),
  smsSign?: int32(name='SmsSign'),
  maxQuotaLevel?: int32(name='MaxQuotaLevel'),
  enableTimes?: int32(name='EnableTimes'),
  tags?: int32(name='Tags'),
  mailAddresses?: int32(name='MailAddresses'),
}

model DescAccountSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescAccountSummaryResponseBody(name='body'),
}

async function descAccountSummaryWithOptions(request: DescAccountSummaryRequest, runtime: Util.RuntimeOptions): DescAccountSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescAccountSummary', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function descAccountSummary(request: DescAccountSummaryRequest): DescAccountSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return descAccountSummaryWithOptions(request, runtime);
}

model DescAccountSummary2Request {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  fromType?: int32(name='FromType'),
}

model DescAccountSummary2ResponseBody = {
  requestId?: string(name='RequestId'),
  mnsForceMigrating?: int32(name='MnsForceMigrating'),
  mnsBag?: int32(name='MnsBag'),
  mnsMigrating?: int32(name='MnsMigrating'),
}

model DescAccountSummary2Response = {
  headers: map[string]string(name='headers'),
  body: DescAccountSummary2ResponseBody(name='body'),
}

async function descAccountSummary2WithOptions(request: DescAccountSummary2Request, runtime: Util.RuntimeOptions): DescAccountSummary2Response {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescAccountSummary2', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function descAccountSummary2(request: DescAccountSummary2Request): DescAccountSummary2Response {
  var runtime = new Util.RuntimeOptions{};
  return descAccountSummary2WithOptions(request, runtime);
}

model DescDomainRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  domainId?: int32(name='DomainId'),
}

model DescDomainResponseBody = {
  spfRecord?: string(name='SpfRecord'),
  spfAuthStatus?: string(name='SpfAuthStatus'),
  cnameAuthStatus?: string(name='CnameAuthStatus'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dnsMx?: string(name='DnsMx'),
  createTime?: string(name='CreateTime'),
  cnameRecord?: string(name='CnameRecord'),
  dnsTxt?: string(name='DnsTxt'),
  cnameConfirmStatus?: string(name='CnameConfirmStatus'),
  icpStatus?: string(name='IcpStatus'),
  defaultDomain?: string(name='DefaultDomain'),
  dnsSpf?: string(name='DnsSpf'),
  mxRecord?: string(name='MxRecord'),
  domainId?: string(name='DomainId'),
  domainType?: string(name='DomainType'),
  mxAuthStatus?: string(name='MxAuthStatus'),
  tlDomainName?: string(name='TlDomainName'),
  tracefRecord?: string(name='TracefRecord'),
  domainStatus?: string(name='DomainStatus'),
}

model DescDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescDomainResponseBody(name='body'),
}

async function descDomainWithOptions(request: DescDomainRequest, runtime: Util.RuntimeOptions): DescDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescDomain', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function descDomain(request: DescDomainRequest): DescDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return descDomainWithOptions(request, runtime);
}

model DescTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  fromType?: int32(name='FromType'),
}

model DescTemplateResponseBody = {
  smsType?: string(name='SmsType'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  templateText?: string(name='TemplateText'),
  smsContent?: string(name='SmsContent'),
  templateName?: string(name='TemplateName'),
  templateNickName?: string(name='TemplateNickName'),
  templateType?: string(name='TemplateType'),
  templateSubject?: string(name='TemplateSubject'),
  remark?: string(name='Remark'),
  templateStatus?: string(name='TemplateStatus'),
}

model DescTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DescTemplateResponseBody(name='body'),
}

async function descTemplateWithOptions(request: DescTemplateRequest, runtime: Util.RuntimeOptions): DescTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function descTemplate(request: DescTemplateRequest): DescTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return descTemplateWithOptions(request, runtime);
}

model EnableAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model EnableAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableAccountResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAccountResponseBody(name='body'),
}

async function enableAccountWithOptions(request: EnableAccountRequest, runtime: Util.RuntimeOptions): EnableAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableAccount', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableAccount(request: EnableAccountRequest): EnableAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAccountWithOptions(request, runtime);
}

model GetAccountListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  total?: string(name='Total'),
  offset?: string(name='Offset'),
  pageSize?: string(name='PageSize'),
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNumber?: string(name='PageNumber'),
}

model GetAccountListResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    accountNotificationInfo?: [ 
    {
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      region?: string(name='Region'),
    }
  ](name='accountNotificationInfo')
  }(name='data'),
  total?: int32(name='Total'),
  pageNo?: int32(name='PageNo'),
}

model GetAccountListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountListResponseBody(name='body'),
}

async function getAccountListWithOptions(request: GetAccountListRequest, runtime: Util.RuntimeOptions): GetAccountListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAccountList', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAccountList(request: GetAccountListRequest): GetAccountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountListWithOptions(request, runtime);
}

model GetIpfilterListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetIpfilterListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    ipfilters?: [ 
    {
      ipAddress?: string(name='IpAddress'),
      createTime?: string(name='CreateTime'),
      id?: string(name='Id'),
    }
  ](name='ipfilters')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model GetIpfilterListResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpfilterListResponseBody(name='body'),
}

async function getIpfilterListWithOptions(request: GetIpfilterListRequest, runtime: Util.RuntimeOptions): GetIpfilterListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetIpfilterList', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getIpfilterList(request: GetIpfilterListRequest): GetIpfilterListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpfilterListWithOptions(request, runtime);
}

model GetIpProtectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetIpProtectionResponseBody = {
  requestId?: string(name='RequestId'),
  ipProtection?: string(name='IpProtection'),
}

model GetIpProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpProtectionResponseBody(name='body'),
}

async function getIpProtectionWithOptions(request: GetIpProtectionRequest, runtime: Util.RuntimeOptions): GetIpProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetIpProtection', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getIpProtection(request: GetIpProtectionRequest): GetIpProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpProtectionWithOptions(request, runtime);
}

model GetMailAddressMsgCallBackUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  mailFrom?: string(name='MailFrom'),
}

model GetMailAddressMsgCallBackUrlResponseBody = {
  notifyUrlStatus?: int32(name='NotifyUrlStatus'),
  requestId?: string(name='RequestId'),
  notifyUrl?: int32(name='NotifyUrl'),
}

model GetMailAddressMsgCallBackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetMailAddressMsgCallBackUrlResponseBody(name='body'),
}

async function getMailAddressMsgCallBackUrlWithOptions(request: GetMailAddressMsgCallBackUrlRequest, runtime: Util.RuntimeOptions): GetMailAddressMsgCallBackUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMailAddressMsgCallBackUrl', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMailAddressMsgCallBackUrl(request: GetMailAddressMsgCallBackUrlRequest): GetMailAddressMsgCallBackUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMailAddressMsgCallBackUrlWithOptions(request, runtime);
}

model GetRegionListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  total?: string(name='Total'),
  offset?: string(name='Offset'),
  pageSize?: string(name='PageSize'),
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNumber?: string(name='PageNumber'),
}

model GetRegionListResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    regionList?: [ 
    {
      regionDesc?: string(name='RegionDesc'),
      region?: string(name='Region'),
    }
  ](name='regionList')
  }(name='data'),
  total?: int32(name='Total'),
  pageNo?: int32(name='PageNo'),
}

model GetRegionListResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegionListResponseBody(name='body'),
}

async function getRegionListWithOptions(request: GetRegionListRequest, runtime: Util.RuntimeOptions): GetRegionListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRegionList', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRegionList(request: GetRegionListRequest): GetRegionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRegionListWithOptions(request, runtime);
}

model GetSenderAddressListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  total?: string(name='Total'),
  offset?: string(name='Offset'),
  pageSize?: string(name='PageSize'),
  pageNo?: string(name='PageNo'),
  keyword?: string(name='Keyword'),
  notifyUrl?: string(name='NotifyUrl'),
}

model GetSenderAddressListResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    senderAddressNotificationInfo?: [ 
    {
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      senderAddress?: string(name='SenderAddress'),
      region?: string(name='Region'),
      senderAddressId?: string(name='SenderAddressId'),
    }
  ](name='senderAddressNotificationInfo')
  }(name='data'),
  total?: int32(name='Total'),
  pageNo?: int32(name='PageNo'),
}

model GetSenderAddressListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSenderAddressListResponseBody(name='body'),
}

async function getSenderAddressListWithOptions(request: GetSenderAddressListRequest, runtime: Util.RuntimeOptions): GetSenderAddressListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSenderAddressList', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSenderAddressList(request: GetSenderAddressListRequest): GetSenderAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSenderAddressListWithOptions(request, runtime);
}

model GetTrackListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  total?: string(name='Total'),
  offset?: string(name='Offset'),
  pageSize?: string(name='PageSize'),
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNumber?: string(name='PageNumber'),
}

model GetTrackListResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  data?: {
    stat?: [ 
    {
      rcptClickRate?: string(name='RcptClickRate'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount'),
      rcptClickCount?: string(name='RcptClickCount'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount'),
      createTime?: string(name='CreateTime'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate'),
      totalNumber?: string(name='TotalNumber'),
      rcptOpenRate?: string(name='RcptOpenRate'),
      rcptOpenCount?: string(name='RcptOpenCount'),
    }
  ](name='stat')
  }(name='data'),
  total?: int32(name='Total'),
  pageNo?: int32(name='PageNo'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
}

model GetTrackListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrackListResponseBody(name='body'),
}

async function getTrackListWithOptions(request: GetTrackListRequest, runtime: Util.RuntimeOptions): GetTrackListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrackList', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrackList(request: GetTrackListRequest): GetTrackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrackListWithOptions(request, runtime);
}

model GetTrackListByMailFromAndTagNameRequest {
  total?: string(name='Total'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  offset?: string(name='Offset'),
  pageSize?: string(name='PageSize'),
  offsetCreateTime?: string(name='OffsetCreateTime'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
  pageNumber?: string(name='PageNumber'),
  accountName?: string(name='AccountName'),
  tagName?: string(name='TagName'),
}

model GetTrackListByMailFromAndTagNameResponseBody = {
  offsetCreateTime?: string(name='OffsetCreateTime'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  total?: int32(name='Total'),
  trackList?: {
    stat?: [ 
    {
      rcptClickRate?: string(name='RcptClickRate'),
      rcptUniqueOpenCount?: string(name='RcptUniqueOpenCount'),
      rcptClickCount?: string(name='RcptClickCount'),
      rcptUniqueClickCount?: string(name='RcptUniqueClickCount'),
      createTime?: string(name='CreateTime'),
      rcptUniqueOpenRate?: string(name='RcptUniqueOpenRate'),
      rcptUniqueClickRate?: string(name='RcptUniqueClickRate'),
      totalNumber?: string(name='TotalNumber'),
      rcptOpenRate?: string(name='RcptOpenRate'),
      rcptOpenCount?: string(name='RcptOpenCount'),
    }
  ](name='Stat')
  }(name='TrackList'),
  pageNo?: int32(name='PageNo'),
  offsetCreateTimeDesc?: string(name='OffsetCreateTimeDesc'),
}

model GetTrackListByMailFromAndTagNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrackListByMailFromAndTagNameResponseBody(name='body'),
}

async function getTrackListByMailFromAndTagNameWithOptions(request: GetTrackListByMailFromAndTagNameRequest, runtime: Util.RuntimeOptions): GetTrackListByMailFromAndTagNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrackListByMailFromAndTagName', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrackListByMailFromAndTagName(request: GetTrackListByMailFromAndTagNameRequest): GetTrackListByMailFromAndTagNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrackListByMailFromAndTagNameWithOptions(request, runtime);
}

model MigrateMarketRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  version?: string(name='Version'),
  fromType?: int32(name='FromType'),
}

model MigrateMarketResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateMarketResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateMarketResponseBody(name='body'),
}

async function migrateMarketWithOptions(request: MigrateMarketRequest, runtime: Util.RuntimeOptions): MigrateMarketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateMarket', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateMarket(request: MigrateMarketRequest): MigrateMarketResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateMarketWithOptions(request, runtime);
}

model ModifyAccountNotificationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  region?: string(name='Region'),
  status?: string(name='Status'),
}

model ModifyAccountNotificationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountNotificationResponseBody(name='body'),
}

async function modifyAccountNotificationWithOptions(request: ModifyAccountNotificationRequest, runtime: Util.RuntimeOptions): ModifyAccountNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountNotification', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountNotification(request: ModifyAccountNotificationRequest): ModifyAccountNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountNotificationWithOptions(request, runtime);
}

model ModifyMailAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  mailAddressId?: int32(name='MailAddressId'),
  replyAddress?: string(name='ReplyAddress'),
  password?: string(name='Password'),
}

model ModifyMailAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMailAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMailAddressResponseBody(name='body'),
}

async function modifyMailAddressWithOptions(request: ModifyMailAddressRequest, runtime: Util.RuntimeOptions): ModifyMailAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyMailAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyMailAddress(request: ModifyMailAddressRequest): ModifyMailAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMailAddressWithOptions(request, runtime);
}

model ModifyPWByDomainRequest {
  domainName?: string(name='DomainName'),
  password?: string(name='Password'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model ModifyPWByDomainResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyPWByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPWByDomainResponseBody(name='body'),
}

async function modifyPWByDomainWithOptions(request: ModifyPWByDomainRequest, runtime: Util.RuntimeOptions): ModifyPWByDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPWByDomain', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPWByDomain(request: ModifyPWByDomainRequest): ModifyPWByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPWByDomainWithOptions(request, runtime);
}

model ModifySenderAddressNotificationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  senderAddressId?: string(name='SenderAddressId'),
  senderAddress?: string(name='SenderAddress'),
  region?: string(name='Region'),
  status?: string(name='Status'),
}

model ModifySenderAddressNotificationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySenderAddressNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySenderAddressNotificationResponseBody(name='body'),
}

async function modifySenderAddressNotificationWithOptions(request: ModifySenderAddressNotificationRequest, runtime: Util.RuntimeOptions): ModifySenderAddressNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySenderAddressNotification', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySenderAddressNotification(request: ModifySenderAddressNotificationRequest): ModifySenderAddressNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySenderAddressNotificationWithOptions(request, runtime);
}

model ModifyTagRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagId?: int32(name='TagId'),
  tagName?: string(name='TagName'),
}

model ModifyTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTagResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTagResponseBody(name='body'),
}

async function modifyTagWithOptions(request: ModifyTagRequest, runtime: Util.RuntimeOptions): ModifyTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTag', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTag(request: ModifyTagRequest): ModifyTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTagWithOptions(request, runtime);
}

model ModifyTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  templateSubject?: string(name='TemplateSubject'),
  templateNickName?: string(name='TemplateNickName'),
  templateText?: string(name='TemplateText'),
  smsType?: int32(name='SmsType'),
  smsContent?: string(name='SmsContent'),
  remark?: string(name='Remark'),
  fromType?: int32(name='FromType'),
}

model ModifyTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTemplateResponseBody(name='body'),
}

async function modifyTemplateWithOptions(request: ModifyTemplateRequest, runtime: Util.RuntimeOptions): ModifyTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTemplate(request: ModifyTemplateRequest): ModifyTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTemplateWithOptions(request, runtime);
}

model QueryDomainByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  status?: int32(name='Status'),
}

model QueryDomainByParamResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    domain?: [ 
    {
      domainRecord?: string(name='DomainRecord'),
      spfAuthStatus?: string(name='SpfAuthStatus'),
      mxAuthStatus?: string(name='MxAuthStatus'),
      createTime?: string(name='CreateTime'),
      cnameAuthStatus?: string(name='CnameAuthStatus'),
      confirmStatus?: string(name='ConfirmStatus'),
      icpStatus?: string(name='IcpStatus'),
      utcCreateTime?: long(name='UtcCreateTime'),
      domainStatus?: string(name='DomainStatus'),
      domainName?: string(name='DomainName'),
      domainId?: string(name='DomainId'),
    }
  ](name='domain')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model QueryDomainByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDomainByParamResponseBody(name='body'),
}

async function queryDomainByParamWithOptions(request: QueryDomainByParamRequest, runtime: Util.RuntimeOptions): QueryDomainByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDomainByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDomainByParam(request: QueryDomainByParamRequest): QueryDomainByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDomainByParamWithOptions(request, runtime);
}

model QueryInvalidAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  keyWord?: string(name='KeyWord'),
  length?: int32(name='Length'),
  nextStart?: string(name='NextStart'),
}

model QueryInvalidAddressResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  data?: {
    mailDetail?: [ 
    {
      lastUpdateTime?: string(name='LastUpdateTime'),
      toAddress?: string(name='ToAddress'),
      utcLastUpdateTime?: long(name='UtcLastUpdateTime'),
    }
  ](name='mailDetail')
  }(name='data'),
  nextStart?: int32(name='NextStart'),
}

model QueryInvalidAddressResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInvalidAddressResponseBody(name='body'),
}

async function queryInvalidAddressWithOptions(request: QueryInvalidAddressRequest, runtime: Util.RuntimeOptions): QueryInvalidAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryInvalidAddress', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryInvalidAddress(request: QueryInvalidAddressRequest): QueryInvalidAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInvalidAddressWithOptions(request, runtime);
}

model QueryReceiverByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  status?: int32(name='Status'),
}

model QueryReceiverByParamResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    receiver?: [ 
    {
      receiversAlias?: string(name='ReceiversAlias'),
      receiversName?: string(name='ReceiversName'),
      createTime?: string(name='CreateTime'),
      receiverId?: string(name='ReceiverId'),
      utcCreateTime?: long(name='UtcCreateTime'),
      receiversStatus?: string(name='ReceiversStatus'),
      count?: string(name='Count'),
      desc?: string(name='Desc'),
    }
  ](name='receiver')
  }(name='data'),
  nextStart?: string(name='NextStart'),
}

model QueryReceiverByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReceiverByParamResponseBody(name='body'),
}

async function queryReceiverByParamWithOptions(request: QueryReceiverByParamRequest, runtime: Util.RuntimeOptions): QueryReceiverByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryReceiverByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryReceiverByParam(request: QueryReceiverByParamRequest): QueryReceiverByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryReceiverByParamWithOptions(request, runtime);
}

model QueryReceiverDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  receiverId?: string(name='ReceiverId'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  nextStart?: string(name='NextStart'),
}

model QueryReceiverDetailResponseBody = {
  dataSchema?: string(name='DataSchema'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  data?: {
    detail?: [ 
    {
      data?: string(name='Data'),
      email?: string(name='Email'),
      createTime?: string(name='CreateTime'),
      utcCreateTime?: long(name='UtcCreateTime'),
    }
  ](name='detail')
  }(name='data'),
  nextStart?: string(name='NextStart'),
}

model QueryReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReceiverDetailResponseBody(name='body'),
}

async function queryReceiverDetailWithOptions(request: QueryReceiverDetailRequest, runtime: Util.RuntimeOptions): QueryReceiverDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryReceiverDetail', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryReceiverDetail(request: QueryReceiverDetailRequest): QueryReceiverDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryReceiverDetailWithOptions(request, runtime);
}

model QuerySignByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  fromType?: int32(name='FromType'),
}

model QuerySignByParamResponseBody = {
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  data?: {
    sign?: [ 
    {
      remark?: string(name='Remark'),
      auditState?: string(name='AuditState'),
      gmtCreate?: string(name='GmtCreate'),
      signId?: long(name='SignId'),
      signName?: string(name='SignName'),
      orderId?: string(name='OrderId'),
      rejectInfo?: string(name='RejectInfo'),
      signType?: string(name='SignType'),
    }
  ](name='sign')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model QuerySignByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySignByParamResponseBody(name='body'),
}

async function querySignByParamWithOptions(request: QuerySignByParamRequest, runtime: Util.RuntimeOptions): QuerySignByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySignByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySignByParam(request: QuerySignByParamRequest): QuerySignByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySignByParamWithOptions(request, runtime);
}

model QuerySmsStatisticsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  fromType?: int32(name='FromType'),
}

model QuerySmsStatisticsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  data?: {
    stat?: [ 
    {
      createTime?: string(name='CreateTime'),
      faildCount?: string(name='faildCount'),
      successCount?: string(name='successCount'),
      requestCount?: string(name='requestCount'),
    }
  ](name='stat')
  }(name='data'),
}

model QuerySmsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsStatisticsResponseBody(name='body'),
}

async function querySmsStatisticsWithOptions(request: QuerySmsStatisticsRequest, runtime: Util.RuntimeOptions): QuerySmsStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySmsStatistics', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySmsStatistics(request: QuerySmsStatisticsRequest): QuerySmsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsStatisticsWithOptions(request, runtime);
}

model QueryTagByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
}

model QueryTagByParamResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    tag?: [ 
    {
      tagName?: string(name='TagName'),
      tagId?: string(name='TagId'),
    }
  ](name='tag')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model QueryTagByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTagByParamResponseBody(name='body'),
}

async function queryTagByParamWithOptions(request: QueryTagByParamRequest, runtime: Util.RuntimeOptions): QueryTagByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTagByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTagByParam(request: QueryTagByParamRequest): QueryTagByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagByParamWithOptions(request, runtime);
}

model QueryTaskByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  status?: int32(name='Status'),
}

model QueryTaskByParamResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    task?: [ 
    {
      receiversName?: string(name='ReceiversName'),
      tagName?: string(name='TagName'),
      taskStatus?: string(name='TaskStatus'),
      createTime?: string(name='CreateTime'),
      requestCount?: string(name='RequestCount'),
      addressType?: string(name='AddressType'),
      utcCreateTime?: long(name='UtcCreateTime'),
      templateName?: string(name='TemplateName'),
      taskId?: string(name='TaskId'),
    }
  ](name='task')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model QueryTaskByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskByParamResponseBody(name='body'),
}

async function queryTaskByParamWithOptions(request: QueryTaskByParamRequest, runtime: Util.RuntimeOptions): QueryTaskByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTaskByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTaskByParam(request: QueryTaskByParamRequest): QueryTaskByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskByParamWithOptions(request, runtime);
}

model QueryTemplateByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  status?: int32(name='Status'),
  fromType?: int32(name='FromType'),
}

model QueryTemplateByParamResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  data?: {
    template?: [ 
    {
      templateComment?: string(name='TemplateComment'),
      utcCreatetime?: long(name='UtcCreatetime'),
      smsrejectinfo?: int32(name='Smsrejectinfo'),
      smsTemplateCode?: int32(name='SmsTemplateCode'),
      createTime?: string(name='CreateTime'),
      templateStatus?: string(name='TemplateStatus'),
      templateType?: int32(name='TemplateType'),
      templateName?: string(name='TemplateName'),
      smsStatus?: int32(name='SmsStatus'),
      templateId?: string(name='TemplateId'),
    }
  ](name='template')
  }(name='data'),
  pageNumber?: int32(name='PageNumber'),
}

model QueryTemplateByParamResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTemplateByParamResponseBody(name='body'),
}

async function queryTemplateByParamWithOptions(request: QueryTemplateByParamRequest, runtime: Util.RuntimeOptions): QueryTemplateByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTemplateByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTemplateByParam(request: QueryTemplateByParamRequest): QueryTemplateByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTemplateByParamWithOptions(request, runtime);
}

model SaveReceiverDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  receiverId?: string(name='ReceiverId'),
  detail?: string(name='Detail'),
}

model SaveReceiverDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    detail?: [ 
    {
      email?: string(name='Email'),
    }
  ](name='Detail')
  }(name='Data'),
  errorCount?: int32(name='ErrorCount'),
  successCount?: int32(name='SuccessCount'),
}

model SaveReceiverDetailResponse = {
  headers: map[string]string(name='headers'),
  body: SaveReceiverDetailResponseBody(name='body'),
}

async function saveReceiverDetailWithOptions(request: SaveReceiverDetailRequest, runtime: Util.RuntimeOptions): SaveReceiverDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveReceiverDetail', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveReceiverDetail(request: SaveReceiverDetailRequest): SaveReceiverDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveReceiverDetailWithOptions(request, runtime);
}

model SenderStatisticsByTagNameAndBatchIDRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accountName?: string(name='AccountName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  tagName?: string(name='TagName'),
}

model SenderStatisticsByTagNameAndBatchIDResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  data?: {
    stat?: [ 
    {
      unavailablePercent?: string(name='unavailablePercent'),
      createTime?: string(name='CreateTime'),
      succeededPercent?: string(name='succeededPercent'),
      faildCount?: string(name='faildCount'),
      unavailableCount?: string(name='unavailableCount'),
      successCount?: string(name='successCount'),
      requestCount?: string(name='requestCount'),
    }
  ](name='stat')
  }(name='data'),
}

model SenderStatisticsByTagNameAndBatchIDResponse = {
  headers: map[string]string(name='headers'),
  body: SenderStatisticsByTagNameAndBatchIDResponseBody(name='body'),
}

async function senderStatisticsByTagNameAndBatchIDWithOptions(request: SenderStatisticsByTagNameAndBatchIDRequest, runtime: Util.RuntimeOptions): SenderStatisticsByTagNameAndBatchIDResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SenderStatisticsByTagNameAndBatchID', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function senderStatisticsByTagNameAndBatchID(request: SenderStatisticsByTagNameAndBatchIDRequest): SenderStatisticsByTagNameAndBatchIDResponse {
  var runtime = new Util.RuntimeOptions{};
  return senderStatisticsByTagNameAndBatchIDWithOptions(request, runtime);
}

model SenderStatisticsDetailByParamRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accountName?: string(name='AccountName'),
  toAddress?: string(name='ToAddress'),
  status?: int32(name='Status'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  tagName?: string(name='TagName'),
  length?: int32(name='Length'),
  nextStart?: string(name='NextStart'),
}

model SenderStatisticsDetailByParamResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    mailDetail?: [ 
    {
      status?: int32(name='Status'),
      lastUpdateTime?: string(name='LastUpdateTime'),
      message?: string(name='Message'),
      toAddress?: string(name='ToAddress'),
      utcLastUpdateTime?: string(name='UtcLastUpdateTime'),
      accountName?: string(name='AccountName'),
    }
  ](name='mailDetail')
  }(name='data'),
  nextStart?: int32(name='NextStart'),
}

model SenderStatisticsDetailByParamResponse = {
  headers: map[string]string(name='headers'),
  body: SenderStatisticsDetailByParamResponseBody(name='body'),
}

async function senderStatisticsDetailByParamWithOptions(request: SenderStatisticsDetailByParamRequest, runtime: Util.RuntimeOptions): SenderStatisticsDetailByParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SenderStatisticsDetailByParam', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function senderStatisticsDetailByParam(request: SenderStatisticsDetailByParamRequest): SenderStatisticsDetailByParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return senderStatisticsDetailByParamWithOptions(request, runtime);
}

model SendTestByTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: int32(name='TemplateId'),
  accountName?: string(name='AccountName'),
  userName?: string(name='UserName'),
  nickName?: string(name='NickName'),
  birthday?: string(name='Birthday'),
  gender?: string(name='Gender'),
  mobile?: string(name='Mobile'),
  email?: string(name='Email'),
}

model SendTestByTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendTestByTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: SendTestByTemplateResponseBody(name='body'),
}

async function sendTestByTemplateWithOptions(request: SendTestByTemplateRequest, runtime: Util.RuntimeOptions): SendTestByTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendTestByTemplate', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendTestByTemplate(request: SendTestByTemplateRequest): SendTestByTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendTestByTemplateWithOptions(request, runtime);
}

model SingleSendMailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  accountName?: string(name='AccountName'),
  addressType?: int32(name='AddressType'),
  tagName?: string(name='TagName'),
  replyToAddress?: boolean(name='ReplyToAddress'),
  toAddress?: string(name='ToAddress'),
  subject?: string(name='Subject'),
  htmlBody?: string(name='HtmlBody'),
  textBody?: string(name='TextBody'),
  fromAlias?: string(name='FromAlias'),
  replyAddress?: string(name='ReplyAddress'),
  replyAddressAlias?: string(name='ReplyAddressAlias'),
  clickTrace?: string(name='ClickTrace'),
}

model SingleSendMailResponseBody = {
  requestId?: string(name='RequestId'),
  envId?: string(name='EnvId'),
}

model SingleSendMailResponse = {
  headers: map[string]string(name='headers'),
  body: SingleSendMailResponseBody(name='body'),
}

async function singleSendMailWithOptions(request: SingleSendMailRequest, runtime: Util.RuntimeOptions): SingleSendMailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SingleSendMail', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function singleSendMail(request: SingleSendMailRequest): SingleSendMailResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleSendMailWithOptions(request, runtime);
}

model SingleSendSmsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  templateCode?: string(name='TemplateCode'),
  recNum?: string(name='RecNum'),
  paramString?: string(name='ParamString'),
  version?: string(name='Version'),
}

model SingleSendSmsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SingleSendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SingleSendSmsResponseBody(name='body'),
}

async function singleSendSmsWithOptions(request: SingleSendSmsRequest, runtime: Util.RuntimeOptions): SingleSendSmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SingleSendSms', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function singleSendSms(request: SingleSendSmsRequest): SingleSendSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleSendSmsWithOptions(request, runtime);
}

model UpdateDomainTrackNameRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  domainId?: int32(name='DomainId'),
  cnameTrackRecord?: string(name='CnameTrackRecord'),
}

model UpdateDomainTrackNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDomainTrackNameResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDomainTrackNameResponseBody(name='body'),
}

async function updateDomainTrackNameWithOptions(request: UpdateDomainTrackNameRequest, runtime: Util.RuntimeOptions): UpdateDomainTrackNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDomainTrackName', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDomainTrackName(request: UpdateDomainTrackNameRequest): UpdateDomainTrackNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainTrackNameWithOptions(request, runtime);
}

model UpdateIpProtectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ipProtection?: string(name='IpProtection'),
}

model UpdateIpProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateIpProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpProtectionResponseBody(name='body'),
}

async function updateIpProtectionWithOptions(request: UpdateIpProtectionRequest, runtime: Util.RuntimeOptions): UpdateIpProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateIpProtection', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateIpProtection(request: UpdateIpProtectionRequest): UpdateIpProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIpProtectionWithOptions(request, runtime);
}

model UpdateMailAddressMsgCallBackUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  mailFrom?: string(name='MailFrom'),
  notifyUrl?: string(name='NotifyUrl'),
}

model UpdateMailAddressMsgCallBackUrlResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateMailAddressMsgCallBackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMailAddressMsgCallBackUrlResponseBody(name='body'),
}

async function updateMailAddressMsgCallBackUrlWithOptions(request: UpdateMailAddressMsgCallBackUrlRequest, runtime: Util.RuntimeOptions): UpdateMailAddressMsgCallBackUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMailAddressMsgCallBackUrl', '2015-11-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMailAddressMsgCallBackUrl(request: UpdateMailAddressMsgCallBackUrlRequest): UpdateMailAddressMsgCallBackUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMailAddressMsgCallBackUrlWithOptions(request, runtime);
}

