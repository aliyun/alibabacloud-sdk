/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'docmind-api.aliyuncs.com',
    'ap-northeast-2-pop' = 'docmind-api.aliyuncs.com',
    'ap-south-1' = 'docmind-api.aliyuncs.com',
    'ap-southeast-1' = 'docmind-api.aliyuncs.com',
    'ap-southeast-2' = 'docmind-api.aliyuncs.com',
    'ap-southeast-3' = 'docmind-api.aliyuncs.com',
    'ap-southeast-5' = 'docmind-api.aliyuncs.com',
    'cn-beijing' = 'docmind-api.aliyuncs.com',
    'cn-beijing-finance-1' = 'docmind-api.aliyuncs.com',
    'cn-beijing-finance-pop' = 'docmind-api.aliyuncs.com',
    'cn-beijing-gov-1' = 'docmind-api.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'docmind-api.aliyuncs.com',
    'cn-chengdu' = 'docmind-api.aliyuncs.com',
    'cn-edge-1' = 'docmind-api.aliyuncs.com',
    'cn-fujian' = 'docmind-api.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-finance' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'docmind-api.aliyuncs.com',
    'cn-hangzhou-test-306' = 'docmind-api.aliyuncs.com',
    'cn-hongkong' = 'docmind-api.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'docmind-api.aliyuncs.com',
    'cn-huhehaote' = 'docmind-api.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'docmind-api.aliyuncs.com',
    'cn-north-2-gov-1' = 'docmind-api.aliyuncs.com',
    'cn-qingdao' = 'docmind-api.aliyuncs.com',
    'cn-qingdao-nebula' = 'docmind-api.aliyuncs.com',
    'cn-shanghai' = 'docmind-api.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'docmind-api.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'docmind-api.aliyuncs.com',
    'cn-shanghai-finance-1' = 'docmind-api.aliyuncs.com',
    'cn-shanghai-inner' = 'docmind-api.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'docmind-api.aliyuncs.com',
    'cn-shenzhen' = 'docmind-api.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'docmind-api.aliyuncs.com',
    'cn-shenzhen-inner' = 'docmind-api.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'docmind-api.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'docmind-api.aliyuncs.com',
    'cn-wuhan' = 'docmind-api.aliyuncs.com',
    'cn-wulanchabu' = 'docmind-api.aliyuncs.com',
    'cn-yushanfang' = 'docmind-api.aliyuncs.com',
    'cn-zhangbei' = 'docmind-api.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'docmind-api.aliyuncs.com',
    'cn-zhangjiakou' = 'docmind-api.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'docmind-api.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'docmind-api.aliyuncs.com',
    'eu-central-1' = 'docmind-api.aliyuncs.com',
    'eu-west-1' = 'docmind-api.aliyuncs.com',
    'eu-west-1-oxs' = 'docmind-api.aliyuncs.com',
    'me-east-1' = 'docmind-api.aliyuncs.com',
    'rus-west-1-pop' = 'docmind-api.aliyuncs.com',
    'us-east-1' = 'docmind-api.aliyuncs.com',
    'us-west-1' = 'docmind-api.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('docmind-api', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AyncTradeDocumentPackageExtractSmartAppRequest {
  customExtractionRange?: [ string ](name='CustomExtractionRange'),
  fileName?: string(name='FileName'),
  fileUrl?: string(name='FileUrl', description='This parameter is required.'),
  option?: string(name='Option'),
  templateName?: string(name='TemplateName'),
}

model AyncTradeDocumentPackageExtractSmartAppShrinkRequest {
  customExtractionRangeShrink?: string(name='CustomExtractionRange'),
  fileName?: string(name='FileName'),
  fileUrl?: string(name='FileUrl', description='This parameter is required.'),
  option?: string(name='Option'),
  templateName?: string(name='TemplateName'),
}

model AyncTradeDocumentPackageExtractSmartAppResponseBody = {
  completed?: boolean(name='Completed'),
  createTime?: string(name='CreateTime'),
  data?: any(name='Data'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model AyncTradeDocumentPackageExtractSmartAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AyncTradeDocumentPackageExtractSmartAppResponseBody(name='body'),
}

/**
 * @summary 整票识别
 *
 * @param tmpReq AyncTradeDocumentPackageExtractSmartAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AyncTradeDocumentPackageExtractSmartAppResponse
 */
@context("ayncTradeDocumentPackageExtractSmartAppWithContext")
async function ayncTradeDocumentPackageExtractSmartAppWithOptions(tmpReq: AyncTradeDocumentPackageExtractSmartAppRequest, runtime: $RuntimeOptions): AyncTradeDocumentPackageExtractSmartAppResponse {
  tmpReq.validate();
  var request = new AyncTradeDocumentPackageExtractSmartAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.customExtractionRange)) {
    request.customExtractionRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customExtractionRange, 'CustomExtractionRange', 'json');
  }
  var query = {};
  if (!$isNull(request.customExtractionRangeShrink)) {
    query['CustomExtractionRange'] = request.customExtractionRangeShrink;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AyncTradeDocumentPackageExtractSmartApp',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 整票识别
 *
 * @param request AyncTradeDocumentPackageExtractSmartAppRequest
 * @return AyncTradeDocumentPackageExtractSmartAppResponse
 */
async function ayncTradeDocumentPackageExtractSmartApp(request: AyncTradeDocumentPackageExtractSmartAppRequest): AyncTradeDocumentPackageExtractSmartAppResponse {
  var runtime = new $RuntimeOptions{};
  return ayncTradeDocumentPackageExtractSmartAppWithOptions(request, runtime);
}

model GetDocParserResultRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
  layoutNum?: int32(name='LayoutNum'),
  layoutStepSize?: int32(name='LayoutStepSize'),
}

model GetDocParserResultResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDocParserResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocParserResultResponseBody(name='body'),
}

/**
 * @summary 文档结构化流式接口
 *
 * @param request GetDocParserResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocParserResultResponse
 */
@context("getDocParserResultWithContext")
async function getDocParserResultWithOptions(request: GetDocParserResultRequest, runtime: $RuntimeOptions): GetDocParserResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.layoutNum)) {
    query['LayoutNum'] = request.layoutNum;
  }
  if (!$isNull(request.layoutStepSize)) {
    query['LayoutStepSize'] = request.layoutStepSize;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDocParserResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档结构化流式接口
 *
 * @param request GetDocParserResultRequest
 * @return GetDocParserResultResponse
 */
async function getDocParserResult(request: GetDocParserResultRequest): GetDocParserResultResponse {
  var runtime = new $RuntimeOptions{};
  return getDocParserResultWithOptions(request, runtime);
}

model GetDocStructureResultRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
  imageStrategy?: string(name='ImageStrategy'),
  revealMarkdown?: boolean(name='RevealMarkdown'),
  useUrlResponseBody?: boolean(name='UseUrlResponseBody'),
}

model GetDocStructureResultResponseBody = {
  code?: string(name='Code', example='noPermission'),
  completed?: boolean(name='Completed'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', example='Success'),
}

model GetDocStructureResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocStructureResultResponseBody(name='body'),
}

/**
 * @summary 文档智能解析结果查询
 *
 * @param request GetDocStructureResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocStructureResultResponse
 */
@context("getDocStructureResultWithContext")
async function getDocStructureResultWithOptions(request: GetDocStructureResultRequest, runtime: $RuntimeOptions): GetDocStructureResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.imageStrategy)) {
    query['ImageStrategy'] = request.imageStrategy;
  }
  if (!$isNull(request.revealMarkdown)) {
    query['RevealMarkdown'] = request.revealMarkdown;
  }
  if (!$isNull(request.useUrlResponseBody)) {
    query['UseUrlResponseBody'] = request.useUrlResponseBody;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDocStructureResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档智能解析结果查询
 *
 * @param request GetDocStructureResultRequest
 * @return GetDocStructureResultResponse
 */
async function getDocStructureResult(request: GetDocStructureResultRequest): GetDocStructureResultResponse {
  var runtime = new $RuntimeOptions{};
  return getDocStructureResultWithOptions(request, runtime);
}

model GetDocumentCompareResultRequest {
  id?: string(name='Id'),
}

model GetDocumentCompareResultResponseBody = {
  code?: string(name='Code', example='noPermission'),
  completed?: boolean(name='Completed'),
  data?: any(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', example='Success'),
}

model GetDocumentCompareResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentCompareResultResponseBody(name='body'),
}

/**
 * @summary 文档对比结果查询
 *
 * @param request GetDocumentCompareResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentCompareResultResponse
 */
@context("getDocumentCompareResultWithContext")
async function getDocumentCompareResultWithOptions(request: GetDocumentCompareResultRequest, runtime: $RuntimeOptions): GetDocumentCompareResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDocumentCompareResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档对比结果查询
 *
 * @param request GetDocumentCompareResultRequest
 * @return GetDocumentCompareResultResponse
 */
async function getDocumentCompareResult(request: GetDocumentCompareResultRequest): GetDocumentCompareResultResponse {
  var runtime = new $RuntimeOptions{};
  return getDocumentCompareResultWithOptions(request, runtime);
}

model GetDocumentConvertResultRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
}

model GetDocumentConvertResultResponseBody = {
  code?: string(name='Code', example='noPermission'),
  completed?: boolean(name='Completed', description='This parameter is required.'),
  data?: [ 
    {
      md5?: string(name='Md5', example='e6d83e55df218650b9a296bfbc300076'),
      size?: long(name='Size', example='2355965'),
      type?: string(name='Type', example='pdf'),
      url?: string(name='Url', example='http://example.png'),
    }
  ](name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', description='This parameter is required.', example='Success'),
}

model GetDocumentConvertResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentConvertResultResponseBody(name='body'),
}

/**
 * @summary 文档转换结果查询
 *
 * @param request GetDocumentConvertResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentConvertResultResponse
 */
@context("getDocumentConvertResultWithContext")
async function getDocumentConvertResultWithOptions(request: GetDocumentConvertResultRequest, runtime: $RuntimeOptions): GetDocumentConvertResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDocumentConvertResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档转换结果查询
 *
 * @param request GetDocumentConvertResultRequest
 * @return GetDocumentConvertResultResponse
 */
async function getDocumentConvertResult(request: GetDocumentConvertResultRequest): GetDocumentConvertResultResponse {
  var runtime = new $RuntimeOptions{};
  return getDocumentConvertResultWithOptions(request, runtime);
}

model GetDocumentExtractResultRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
}

model GetDocumentExtractResultResponseBody = {
  code?: string(name='Code', example='noPermission'),
  completed?: boolean(name='Completed'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', example='Success'),
}

model GetDocumentExtractResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentExtractResultResponseBody(name='body'),
}

/**
 * @summary 文档抽取结果查询
 *
 * @param request GetDocumentExtractResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentExtractResultResponse
 */
@context("getDocumentExtractResultWithContext")
async function getDocumentExtractResultWithOptions(request: GetDocumentExtractResultRequest, runtime: $RuntimeOptions): GetDocumentExtractResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDocumentExtractResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档抽取结果查询
 *
 * @param request GetDocumentExtractResultRequest
 * @return GetDocumentExtractResultResponse
 */
async function getDocumentExtractResult(request: GetDocumentExtractResultRequest): GetDocumentExtractResultResponse {
  var runtime = new $RuntimeOptions{};
  return getDocumentExtractResultWithOptions(request, runtime);
}

model GetPageNumRequest {
  bizId?: string(name='BizId'),
}

model GetPageNumResponseBody = {
  data?: {
    pageNum?: int32(name='PageNum'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpCode?: string(name='HttpCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPageNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPageNumResponseBody(name='body'),
}

/**
 * @summary openmind
 *
 * @param request GetPageNumRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPageNumResponse
 */
@context("getPageNumWithContext")
async function getPageNumWithOptions(request: GetPageNumRequest, runtime: $RuntimeOptions): GetPageNumResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPageNum',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary openmind
 *
 * @param request GetPageNumRequest
 * @return GetPageNumResponse
 */
async function getPageNum(request: GetPageNumRequest): GetPageNumResponse {
  var runtime = new $RuntimeOptions{};
  return getPageNumWithOptions(request, runtime);
}

model GetTableUnderstandingResultRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
}

model GetTableUnderstandingResultResponseBody = {
  code?: string(name='Code', example='noPermission'),
  completed?: boolean(name='Completed'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', example='Success'),
}

model GetTableUnderstandingResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableUnderstandingResultResponseBody(name='body'),
}

/**
 * @summary 表格智能解析结果查询
 *
 * @param request GetTableUnderstandingResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableUnderstandingResultResponse
 */
@context("getTableUnderstandingResultWithContext")
async function getTableUnderstandingResultWithOptions(request: GetTableUnderstandingResultRequest, runtime: $RuntimeOptions): GetTableUnderstandingResultResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableUnderstandingResult',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 表格智能解析结果查询
 *
 * @param request GetTableUnderstandingResultRequest
 * @return GetTableUnderstandingResultResponse
 */
async function getTableUnderstandingResult(request: GetTableUnderstandingResultRequest): GetTableUnderstandingResultResponse {
  var runtime = new $RuntimeOptions{};
  return getTableUnderstandingResultWithOptions(request, runtime);
}

model QueryDocParserStatusRequest {
  id?: string(name='Id', example='docmind-20220816-1e89d65c'),
}

model QueryDocParserStatusResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    imageCount?: int32(name='ImageCount'),
    numberOfSuccessfulParsing?: int32(name='NumberOfSuccessfulParsing'),
    pageCountEstimate?: int32(name='PageCountEstimate'),
    paragraphCount?: int32(name='ParagraphCount'),
    processing?: float(name='Processing'),
    status?: string(name='Status'),
    tableCount?: int32(name='TableCount'),
    tokens?: long(name='Tokens'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model QueryDocParserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDocParserStatusResponseBody(name='body'),
}

/**
 * @summary 获取文档智能解析处理状态
 *
 * @param request QueryDocParserStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDocParserStatusResponse
 */
@context("queryDocParserStatusWithContext")
async function queryDocParserStatusWithOptions(request: QueryDocParserStatusRequest, runtime: $RuntimeOptions): QueryDocParserStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDocParserStatus',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文档智能解析处理状态
 *
 * @param request QueryDocParserStatusRequest
 * @return QueryDocParserStatusResponse
 */
async function queryDocParserStatus(request: QueryDocParserStatusRequest): QueryDocParserStatusResponse {
  var runtime = new $RuntimeOptions{};
  return queryDocParserStatusWithOptions(request, runtime);
}

model SubmitConvertImageToExcelJobRequest {
  forceMergeExcel?: boolean(name='ForceMergeExcel'),
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNames?: [ string ](name='ImageNames'),
  imageUrls?: [ string ](name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToExcelJobShrinkRequest {
  forceMergeExcel?: boolean(name='ForceMergeExcel'),
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNamesShrink?: string(name='ImageNames'),
  imageUrlsShrink?: string(name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToExcelJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToExcelJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertImageToExcelJobResponseBody(name='body'),
}

/**
 * @summary 图片转excel
 *
 * @param tmpReq SubmitConvertImageToExcelJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertImageToExcelJobResponse
 */
@context("submitConvertImageToExcelJobWithContext")
async function submitConvertImageToExcelJobWithOptions(tmpReq: SubmitConvertImageToExcelJobRequest, runtime: $RuntimeOptions): SubmitConvertImageToExcelJobResponse {
  tmpReq.validate();
  var request = new SubmitConvertImageToExcelJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.imageNames)) {
    request.imageNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageNames, 'ImageNames', 'simple');
  }
  if (!$isNull(tmpReq.imageUrls)) {
    request.imageUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageUrls, 'ImageUrls', 'simple');
  }
  var query = {};
  if (!$isNull(request.forceMergeExcel)) {
    query['ForceMergeExcel'] = request.forceMergeExcel;
  }
  if (!$isNull(request.imageNameExtension)) {
    query['ImageNameExtension'] = request.imageNameExtension;
  }
  if (!$isNull(request.imageNamesShrink)) {
    query['ImageNames'] = request.imageNamesShrink;
  }
  if (!$isNull(request.imageUrlsShrink)) {
    query['ImageUrls'] = request.imageUrlsShrink;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertImageToExcelJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片转excel
 *
 * @param request SubmitConvertImageToExcelJobRequest
 * @return SubmitConvertImageToExcelJobResponse
 */
async function submitConvertImageToExcelJob(request: SubmitConvertImageToExcelJobRequest): SubmitConvertImageToExcelJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertImageToExcelJobWithOptions(request, runtime);
}

model SubmitConvertImageToMarkdownJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNames?: [ string ](name='ImageNames'),
  imageUrls?: [ string ](name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToMarkdownJobShrinkRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNamesShrink?: string(name='ImageNames'),
  imageUrlsShrink?: string(name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToMarkdownJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToMarkdownJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertImageToMarkdownJobResponseBody(name='body'),
}

/**
 * @summary 图片转markdown
 *
 * @param tmpReq SubmitConvertImageToMarkdownJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertImageToMarkdownJobResponse
 */
@context("submitConvertImageToMarkdownJobWithContext")
async function submitConvertImageToMarkdownJobWithOptions(tmpReq: SubmitConvertImageToMarkdownJobRequest, runtime: $RuntimeOptions): SubmitConvertImageToMarkdownJobResponse {
  tmpReq.validate();
  var request = new SubmitConvertImageToMarkdownJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.imageNames)) {
    request.imageNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageNames, 'ImageNames', 'simple');
  }
  if (!$isNull(tmpReq.imageUrls)) {
    request.imageUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageUrls, 'ImageUrls', 'simple');
  }
  var query = {};
  if (!$isNull(request.imageNameExtension)) {
    query['ImageNameExtension'] = request.imageNameExtension;
  }
  if (!$isNull(request.imageNamesShrink)) {
    query['ImageNames'] = request.imageNamesShrink;
  }
  if (!$isNull(request.imageUrlsShrink)) {
    query['ImageUrls'] = request.imageUrlsShrink;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertImageToMarkdownJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片转markdown
 *
 * @param request SubmitConvertImageToMarkdownJobRequest
 * @return SubmitConvertImageToMarkdownJobResponse
 */
async function submitConvertImageToMarkdownJob(request: SubmitConvertImageToMarkdownJobRequest): SubmitConvertImageToMarkdownJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertImageToMarkdownJobWithOptions(request, runtime);
}

model SubmitConvertImageToPdfJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='JPG'),
  imageNames?: [ string ](name='ImageNames'),
  imageUrls?: [ string ](name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToPdfJobShrinkRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='JPG'),
  imageNamesShrink?: string(name='ImageNames'),
  imageUrlsShrink?: string(name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToPdfJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToPdfJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertImageToPdfJobResponseBody(name='body'),
}

/**
 * @summary 图片转pdf
 *
 * @param tmpReq SubmitConvertImageToPdfJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertImageToPdfJobResponse
 */
@context("submitConvertImageToPdfJobWithContext")
async function submitConvertImageToPdfJobWithOptions(tmpReq: SubmitConvertImageToPdfJobRequest, runtime: $RuntimeOptions): SubmitConvertImageToPdfJobResponse {
  tmpReq.validate();
  var request = new SubmitConvertImageToPdfJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.imageNames)) {
    request.imageNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageNames, 'ImageNames', 'simple');
  }
  if (!$isNull(tmpReq.imageUrls)) {
    request.imageUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageUrls, 'ImageUrls', 'simple');
  }
  var query = {};
  if (!$isNull(request.imageNameExtension)) {
    query['ImageNameExtension'] = request.imageNameExtension;
  }
  if (!$isNull(request.imageNamesShrink)) {
    query['ImageNames'] = request.imageNamesShrink;
  }
  if (!$isNull(request.imageUrlsShrink)) {
    query['ImageUrls'] = request.imageUrlsShrink;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertImageToPdfJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片转pdf
 *
 * @param request SubmitConvertImageToPdfJobRequest
 * @return SubmitConvertImageToPdfJobResponse
 */
async function submitConvertImageToPdfJob(request: SubmitConvertImageToPdfJobRequest): SubmitConvertImageToPdfJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertImageToPdfJobWithOptions(request, runtime);
}

model SubmitConvertImageToWordJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNames?: [ string ](name='ImageNames'),
  imageUrls?: [ string ](name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToWordJobShrinkRequest {
  imageNameExtension?: string(name='ImageNameExtension', example='jpg'),
  imageNamesShrink?: string(name='ImageNames'),
  imageUrlsShrink?: string(name='ImageUrls'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertImageToWordJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToWordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertImageToWordJobResponseBody(name='body'),
}

/**
 * @summary 图片转word
 *
 * @param tmpReq SubmitConvertImageToWordJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertImageToWordJobResponse
 */
@context("submitConvertImageToWordJobWithContext")
async function submitConvertImageToWordJobWithOptions(tmpReq: SubmitConvertImageToWordJobRequest, runtime: $RuntimeOptions): SubmitConvertImageToWordJobResponse {
  tmpReq.validate();
  var request = new SubmitConvertImageToWordJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.imageNames)) {
    request.imageNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageNames, 'ImageNames', 'simple');
  }
  if (!$isNull(tmpReq.imageUrls)) {
    request.imageUrlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imageUrls, 'ImageUrls', 'simple');
  }
  var query = {};
  if (!$isNull(request.imageNameExtension)) {
    query['ImageNameExtension'] = request.imageNameExtension;
  }
  if (!$isNull(request.imageNamesShrink)) {
    query['ImageNames'] = request.imageNamesShrink;
  }
  if (!$isNull(request.imageUrlsShrink)) {
    query['ImageUrls'] = request.imageUrlsShrink;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertImageToWordJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片转word
 *
 * @param request SubmitConvertImageToWordJobRequest
 * @return SubmitConvertImageToWordJobResponse
 */
async function submitConvertImageToWordJob(request: SubmitConvertImageToWordJobRequest): SubmitConvertImageToWordJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertImageToWordJobWithOptions(request, runtime);
}

model SubmitConvertPdfToExcelJobRequest {
  fileName?: string(name='FileName', example='convertPdfToExcel.pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  forceExportInnerImage?: boolean(name='ForceExportInnerImage'),
  forceMergeExcel?: boolean(name='ForceMergeExcel'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToExcelJobAdvanceRequest {
  fileName?: string(name='FileName', example='convertPdfToExcel.pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  forceExportInnerImage?: boolean(name='ForceExportInnerImage'),
  forceMergeExcel?: boolean(name='ForceMergeExcel'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToExcelJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertPdfToExcelJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertPdfToExcelJobResponseBody(name='body'),
}

/**
 * @summary pdf转excel
 *
 * @param request SubmitConvertPdfToExcelJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertPdfToExcelJobResponse
 */
@context("submitConvertPdfToExcelJobWithContext")
async function submitConvertPdfToExcelJobWithOptions(request: SubmitConvertPdfToExcelJobRequest, runtime: $RuntimeOptions): SubmitConvertPdfToExcelJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.forceExportInnerImage)) {
    query['ForceExportInnerImage'] = request.forceExportInnerImage;
  }
  if (!$isNull(request.forceMergeExcel)) {
    query['ForceMergeExcel'] = request.forceMergeExcel;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertPdfToExcelJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary pdf转excel
 *
 * @param request SubmitConvertPdfToExcelJobRequest
 * @return SubmitConvertPdfToExcelJobResponse
 */
async function submitConvertPdfToExcelJob(request: SubmitConvertPdfToExcelJobRequest): SubmitConvertPdfToExcelJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertPdfToExcelJobWithOptions(request, runtime);
}

async function submitConvertPdfToExcelJobAdvance(request: SubmitConvertPdfToExcelJobAdvanceRequest, runtime: $RuntimeOptions): SubmitConvertPdfToExcelJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitConvertPdfToExcelJobReq = new SubmitConvertPdfToExcelJobRequest{};
  OpenApiUtil.convert(request, submitConvertPdfToExcelJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitConvertPdfToExcelJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitConvertPdfToExcelJobResp = submitConvertPdfToExcelJobWithOptions(submitConvertPdfToExcelJobReq, runtime);
  return submitConvertPdfToExcelJobResp;
}

model SubmitConvertPdfToImageJobRequest {
  fileName?: string(name='FileName', example='convertPdfToImage.pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToImageJobAdvanceRequest {
  fileName?: string(name='FileName', example='convertPdfToImage.pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToImageJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertPdfToImageJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertPdfToImageJobResponseBody(name='body'),
}

/**
 * @summary pdf转图片
 *
 * @param request SubmitConvertPdfToImageJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertPdfToImageJobResponse
 */
@context("submitConvertPdfToImageJobWithContext")
async function submitConvertPdfToImageJobWithOptions(request: SubmitConvertPdfToImageJobRequest, runtime: $RuntimeOptions): SubmitConvertPdfToImageJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertPdfToImageJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary pdf转图片
 *
 * @param request SubmitConvertPdfToImageJobRequest
 * @return SubmitConvertPdfToImageJobResponse
 */
async function submitConvertPdfToImageJob(request: SubmitConvertPdfToImageJobRequest): SubmitConvertPdfToImageJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertPdfToImageJobWithOptions(request, runtime);
}

async function submitConvertPdfToImageJobAdvance(request: SubmitConvertPdfToImageJobAdvanceRequest, runtime: $RuntimeOptions): SubmitConvertPdfToImageJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitConvertPdfToImageJobReq = new SubmitConvertPdfToImageJobRequest{};
  OpenApiUtil.convert(request, submitConvertPdfToImageJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitConvertPdfToImageJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitConvertPdfToImageJobResp = submitConvertPdfToImageJobWithOptions(submitConvertPdfToImageJobReq, runtime);
  return submitConvertPdfToImageJobResp;
}

model SubmitConvertPdfToMarkdownJobRequest {
  fileName?: string(name='FileName', example='convertPdfToExcel.pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToMarkdownJobAdvanceRequest {
  fileName?: string(name='FileName', example='convertPdfToExcel.pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToMarkdownJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertPdfToMarkdownJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertPdfToMarkdownJobResponseBody(name='body'),
}

/**
 * @summary pdf转markdown
 *
 * @param request SubmitConvertPdfToMarkdownJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertPdfToMarkdownJobResponse
 */
@context("submitConvertPdfToMarkdownJobWithContext")
async function submitConvertPdfToMarkdownJobWithOptions(request: SubmitConvertPdfToMarkdownJobRequest, runtime: $RuntimeOptions): SubmitConvertPdfToMarkdownJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertPdfToMarkdownJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary pdf转markdown
 *
 * @param request SubmitConvertPdfToMarkdownJobRequest
 * @return SubmitConvertPdfToMarkdownJobResponse
 */
async function submitConvertPdfToMarkdownJob(request: SubmitConvertPdfToMarkdownJobRequest): SubmitConvertPdfToMarkdownJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertPdfToMarkdownJobWithOptions(request, runtime);
}

async function submitConvertPdfToMarkdownJobAdvance(request: SubmitConvertPdfToMarkdownJobAdvanceRequest, runtime: $RuntimeOptions): SubmitConvertPdfToMarkdownJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitConvertPdfToMarkdownJobReq = new SubmitConvertPdfToMarkdownJobRequest{};
  OpenApiUtil.convert(request, submitConvertPdfToMarkdownJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitConvertPdfToMarkdownJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitConvertPdfToMarkdownJobResp = submitConvertPdfToMarkdownJobWithOptions(submitConvertPdfToMarkdownJobReq, runtime);
  return submitConvertPdfToMarkdownJobResp;
}

model SubmitConvertPdfToWordJobRequest {
  fileName?: string(name='FileName', example='covertPdfToWord.pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  forceExportInnerImage?: boolean(name='ForceExportInnerImage'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  option?: string(name='Option'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToWordJobAdvanceRequest {
  fileName?: string(name='FileName', example='covertPdfToWord.pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  forceExportInnerImage?: boolean(name='ForceExportInnerImage'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  option?: string(name='Option'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitConvertPdfToWordJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertPdfToWordJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitConvertPdfToWordJobResponseBody(name='body'),
}

/**
 * @summary pdf转word
 *
 * @param request SubmitConvertPdfToWordJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitConvertPdfToWordJobResponse
 */
@context("submitConvertPdfToWordJobWithContext")
async function submitConvertPdfToWordJobWithOptions(request: SubmitConvertPdfToWordJobRequest, runtime: $RuntimeOptions): SubmitConvertPdfToWordJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.forceExportInnerImage)) {
    query['ForceExportInnerImage'] = request.forceExportInnerImage;
  }
  if (!$isNull(request.formulaEnhancement)) {
    query['FormulaEnhancement'] = request.formulaEnhancement;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitConvertPdfToWordJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary pdf转word
 *
 * @param request SubmitConvertPdfToWordJobRequest
 * @return SubmitConvertPdfToWordJobResponse
 */
async function submitConvertPdfToWordJob(request: SubmitConvertPdfToWordJobRequest): SubmitConvertPdfToWordJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitConvertPdfToWordJobWithOptions(request, runtime);
}

async function submitConvertPdfToWordJobAdvance(request: SubmitConvertPdfToWordJobAdvanceRequest, runtime: $RuntimeOptions): SubmitConvertPdfToWordJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitConvertPdfToWordJobReq = new SubmitConvertPdfToWordJobRequest{};
  OpenApiUtil.convert(request, submitConvertPdfToWordJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitConvertPdfToWordJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitConvertPdfToWordJobResp = submitConvertPdfToWordJobWithOptions(submitConvertPdfToWordJobReq, runtime);
  return submitConvertPdfToWordJobResp;
}

model SubmitDigitalDocStructureJobRequest {
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  imageStrategy?: string(name='ImageStrategy'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  revealMarkdown?: boolean(name='RevealMarkdown'),
  useUrlResponseBody?: boolean(name='UseUrlResponseBody'),
}

model SubmitDigitalDocStructureJobAdvanceRequest {
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  imageStrategy?: string(name='ImageStrategy'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  revealMarkdown?: boolean(name='RevealMarkdown'),
  useUrlResponseBody?: boolean(name='UseUrlResponseBody'),
}

model SubmitDigitalDocStructureJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: any(name='Data'),
  id?: string(name='Id'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status'),
}

model SubmitDigitalDocStructureJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDigitalDocStructureJobResponseBody(name='body'),
}

/**
 * @summary 电子解析
 *
 * @param request SubmitDigitalDocStructureJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDigitalDocStructureJobResponse
 */
@context("submitDigitalDocStructureJobWithContext")
async function submitDigitalDocStructureJobWithOptions(request: SubmitDigitalDocStructureJobRequest, runtime: $RuntimeOptions): SubmitDigitalDocStructureJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileNameExtension)) {
    query['FileNameExtension'] = request.fileNameExtension;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.imageStrategy)) {
    query['ImageStrategy'] = request.imageStrategy;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!$isNull(request.revealMarkdown)) {
    query['RevealMarkdown'] = request.revealMarkdown;
  }
  if (!$isNull(request.useUrlResponseBody)) {
    query['UseUrlResponseBody'] = request.useUrlResponseBody;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitDigitalDocStructureJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 电子解析
 *
 * @param request SubmitDigitalDocStructureJobRequest
 * @return SubmitDigitalDocStructureJobResponse
 */
async function submitDigitalDocStructureJob(request: SubmitDigitalDocStructureJobRequest): SubmitDigitalDocStructureJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitDigitalDocStructureJobWithOptions(request, runtime);
}

async function submitDigitalDocStructureJobAdvance(request: SubmitDigitalDocStructureJobAdvanceRequest, runtime: $RuntimeOptions): SubmitDigitalDocStructureJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitDigitalDocStructureJobReq = new SubmitDigitalDocStructureJobRequest{};
  OpenApiUtil.convert(request, submitDigitalDocStructureJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitDigitalDocStructureJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitDigitalDocStructureJobResp = submitDigitalDocStructureJobWithOptions(submitDigitalDocStructureJobReq, runtime);
  return submitDigitalDocStructureJobResp;
}

model SubmitDocParserJobRequest {
  enhancementMode?: string(name='EnhancementMode'),
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  llmEnhancement?: boolean(name='LlmEnhancement'),
  multimediaParameters?: {
    enableSynopsisParse?: boolean(name='EnableSynopsisParse'),
    vlParsePrompt?: string(name='VlParsePrompt'),
  }(name='MultimediaParameters'),
  option?: string(name='Option'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  outputHtmlTable?: boolean(name='OutputHtmlTable'),
  pageIndex?: string(name='PageIndex'),
}

model SubmitDocParserJobAdvanceRequest {
  enhancementMode?: string(name='EnhancementMode'),
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  llmEnhancement?: boolean(name='LlmEnhancement'),
  multimediaParameters?: {
    enableSynopsisParse?: boolean(name='EnableSynopsisParse'),
    vlParsePrompt?: string(name='VlParsePrompt'),
  }(name='MultimediaParameters'),
  option?: string(name='Option'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  outputHtmlTable?: boolean(name='OutputHtmlTable'),
  pageIndex?: string(name='PageIndex'),
}

model SubmitDocParserJobShrinkRequest {
  enhancementMode?: string(name='EnhancementMode'),
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  llmEnhancement?: boolean(name='LlmEnhancement'),
  multimediaParametersShrink?: string(name='MultimediaParameters'),
  option?: string(name='Option'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  outputHtmlTable?: boolean(name='OutputHtmlTable'),
  pageIndex?: string(name='PageIndex'),
}

model SubmitDocParserJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitDocParserJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDocParserJobResponseBody(name='body'),
}

/**
 * @summary 文档智能解析流式输出
 *
 * @param tmpReq SubmitDocParserJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDocParserJobResponse
 */
@context("submitDocParserJobWithContext")
async function submitDocParserJobWithOptions(tmpReq: SubmitDocParserJobRequest, runtime: $RuntimeOptions): SubmitDocParserJobResponse {
  tmpReq.validate();
  var request = new SubmitDocParserJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.multimediaParameters)) {
    request.multimediaParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.multimediaParameters, 'MultimediaParameters', 'json');
  }
  var query = {};
  if (!$isNull(request.enhancementMode)) {
    query['EnhancementMode'] = request.enhancementMode;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileNameExtension)) {
    query['FileNameExtension'] = request.fileNameExtension;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.formulaEnhancement)) {
    query['FormulaEnhancement'] = request.formulaEnhancement;
  }
  if (!$isNull(request.llmEnhancement)) {
    query['LlmEnhancement'] = request.llmEnhancement;
  }
  if (!$isNull(request.multimediaParametersShrink)) {
    query['MultimediaParameters'] = request.multimediaParametersShrink;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!$isNull(request.outputHtmlTable)) {
    query['OutputHtmlTable'] = request.outputHtmlTable;
  }
  if (!$isNull(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitDocParserJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档智能解析流式输出
 *
 * @param request SubmitDocParserJobRequest
 * @return SubmitDocParserJobResponse
 */
async function submitDocParserJob(request: SubmitDocParserJobRequest): SubmitDocParserJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitDocParserJobWithOptions(request, runtime);
}

async function submitDocParserJobAdvance(request: SubmitDocParserJobAdvanceRequest, runtime: $RuntimeOptions): SubmitDocParserJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitDocParserJobReq = new SubmitDocParserJobRequest{};
  OpenApiUtil.convert(request, submitDocParserJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitDocParserJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitDocParserJobResp = submitDocParserJobWithOptions(submitDocParserJobReq, runtime);
  return submitDocParserJobResp;
}

model SubmitDocStructureJobRequest {
  allowPptFormat?: boolean(name='AllowPptFormat'),
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  pageIndex?: string(name='PageIndex'),
  structureType?: string(name='StructureType'),
}

model SubmitDocStructureJobAdvanceRequest {
  allowPptFormat?: boolean(name='AllowPptFormat'),
  fileName?: string(name='FileName', example='docStructure.pdf'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  formulaEnhancement?: boolean(name='FormulaEnhancement'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  pageIndex?: string(name='PageIndex'),
  structureType?: string(name='StructureType'),
}

model SubmitDocStructureJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitDocStructureJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDocStructureJobResponseBody(name='body'),
}

/**
 * @summary 文档智能解析
 *
 * @param request SubmitDocStructureJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDocStructureJobResponse
 */
@context("submitDocStructureJobWithContext")
async function submitDocStructureJobWithOptions(request: SubmitDocStructureJobRequest, runtime: $RuntimeOptions): SubmitDocStructureJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.allowPptFormat)) {
    query['AllowPptFormat'] = request.allowPptFormat;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileNameExtension)) {
    query['FileNameExtension'] = request.fileNameExtension;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.formulaEnhancement)) {
    query['FormulaEnhancement'] = request.formulaEnhancement;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  if (!$isNull(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!$isNull(request.structureType)) {
    query['StructureType'] = request.structureType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitDocStructureJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档智能解析
 *
 * @param request SubmitDocStructureJobRequest
 * @return SubmitDocStructureJobResponse
 */
async function submitDocStructureJob(request: SubmitDocStructureJobRequest): SubmitDocStructureJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitDocStructureJobWithOptions(request, runtime);
}

async function submitDocStructureJobAdvance(request: SubmitDocStructureJobAdvanceRequest, runtime: $RuntimeOptions): SubmitDocStructureJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitDocStructureJobReq = new SubmitDocStructureJobRequest{};
  OpenApiUtil.convert(request, submitDocStructureJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitDocStructureJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitDocStructureJobResp = submitDocStructureJobWithOptions(submitDocStructureJobReq, runtime);
  return submitDocStructureJobResp;
}

model SubmitDocumentExtractJobRequest {
  fileName?: string(name='FileName'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitDocumentExtractJobAdvanceRequest {
  fileName?: string(name='FileName'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitDocumentExtractJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitDocumentExtractJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDocumentExtractJobResponseBody(name='body'),
}

/**
 * @summary 文档抽取
 *
 * @param request SubmitDocumentExtractJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDocumentExtractJobResponse
 */
@context("submitDocumentExtractJobWithContext")
async function submitDocumentExtractJobWithOptions(request: SubmitDocumentExtractJobRequest, runtime: $RuntimeOptions): SubmitDocumentExtractJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileNameExtension)) {
    query['FileNameExtension'] = request.fileNameExtension;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitDocumentExtractJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档抽取
 *
 * @param request SubmitDocumentExtractJobRequest
 * @return SubmitDocumentExtractJobResponse
 */
async function submitDocumentExtractJob(request: SubmitDocumentExtractJobRequest): SubmitDocumentExtractJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitDocumentExtractJobWithOptions(request, runtime);
}

async function submitDocumentExtractJobAdvance(request: SubmitDocumentExtractJobAdvanceRequest, runtime: $RuntimeOptions): SubmitDocumentExtractJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitDocumentExtractJobReq = new SubmitDocumentExtractJobRequest{};
  OpenApiUtil.convert(request, submitDocumentExtractJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitDocumentExtractJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitDocumentExtractJobResp = submitDocumentExtractJobWithOptions(submitDocumentExtractJobReq, runtime);
  return submitDocumentExtractJobResp;
}

model SubmitTableUnderstandingJobRequest {
  fileName?: string(name='FileName'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrl?: string(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitTableUnderstandingJobAdvanceRequest {
  fileName?: string(name='FileName'),
  fileNameExtension?: string(name='FileNameExtension', example='pdf'),
  fileUrlObject?: readable(name='FileUrl', example='https://gw.alipayobjects.com/os/basement_prod/598b9edf-5287-4065-9e36-464305c60698.pdf'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
}

model SubmitTableUnderstandingJobResponseBody = {
  code?: string(name='Code', example='noPermission'),
  data?: {
    id?: string(name='Id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitTableUnderstandingJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTableUnderstandingJobResponseBody(name='body'),
}

/**
 * @summary 表格智能解析
 *
 * @param request SubmitTableUnderstandingJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitTableUnderstandingJobResponse
 */
@context("submitTableUnderstandingJobWithContext")
async function submitTableUnderstandingJobWithOptions(request: SubmitTableUnderstandingJobRequest, runtime: $RuntimeOptions): SubmitTableUnderstandingJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileNameExtension)) {
    query['FileNameExtension'] = request.fileNameExtension;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!$isNull(request.ossEndpoint)) {
    query['OssEndpoint'] = request.ossEndpoint;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitTableUnderstandingJob',
    version = '2022-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 表格智能解析
 *
 * @param request SubmitTableUnderstandingJobRequest
 * @return SubmitTableUnderstandingJobResponse
 */
async function submitTableUnderstandingJob(request: SubmitTableUnderstandingJobRequest): SubmitTableUnderstandingJobResponse {
  var runtime = new $RuntimeOptions{};
  return submitTableUnderstandingJobWithOptions(request, runtime);
}

async function submitTableUnderstandingJobAdvance(request: SubmitTableUnderstandingJobAdvanceRequest, runtime: $RuntimeOptions): SubmitTableUnderstandingJobResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'docmind-api',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var submitTableUnderstandingJobReq = new SubmitTableUnderstandingJobRequest{};
  OpenApiUtil.convert(request, submitTableUnderstandingJobReq);

  if(!$isNull(request.fileUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    submitTableUnderstandingJobReq.fileUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var submitTableUnderstandingJobResp = submitTableUnderstandingJobWithOptions(submitTableUnderstandingJobReq, runtime);
  return submitTableUnderstandingJobResp;
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
