/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'docmind-api';
  @version = '2022-07-11';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'docmind-api.aliyuncs.com',
    ap-northeast-2-pop = 'docmind-api.aliyuncs.com',
    ap-south-1 = 'docmind-api.aliyuncs.com',
    ap-southeast-1 = 'docmind-api.aliyuncs.com',
    ap-southeast-2 = 'docmind-api.aliyuncs.com',
    ap-southeast-3 = 'docmind-api.aliyuncs.com',
    ap-southeast-5 = 'docmind-api.aliyuncs.com',
    cn-beijing = 'docmind-api.aliyuncs.com',
    cn-beijing-finance-1 = 'docmind-api.aliyuncs.com',
    cn-beijing-finance-pop = 'docmind-api.aliyuncs.com',
    cn-beijing-gov-1 = 'docmind-api.aliyuncs.com',
    cn-beijing-nu16-b01 = 'docmind-api.aliyuncs.com',
    cn-chengdu = 'docmind-api.aliyuncs.com',
    cn-edge-1 = 'docmind-api.aliyuncs.com',
    cn-fujian = 'docmind-api.aliyuncs.com',
    cn-haidian-cm12-c01 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-finance = 'docmind-api.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'docmind-api.aliyuncs.com',
    cn-hangzhou-test-306 = 'docmind-api.aliyuncs.com',
    cn-hongkong = 'docmind-api.aliyuncs.com',
    cn-hongkong-finance-pop = 'docmind-api.aliyuncs.com',
    cn-huhehaote = 'docmind-api.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'docmind-api.aliyuncs.com',
    cn-north-2-gov-1 = 'docmind-api.aliyuncs.com',
    cn-qingdao = 'docmind-api.aliyuncs.com',
    cn-qingdao-nebula = 'docmind-api.aliyuncs.com',
    cn-shanghai = 'docmind-api.aliyuncs.com',
    cn-shanghai-et15-b01 = 'docmind-api.aliyuncs.com',
    cn-shanghai-et2-b01 = 'docmind-api.aliyuncs.com',
    cn-shanghai-finance-1 = 'docmind-api.aliyuncs.com',
    cn-shanghai-inner = 'docmind-api.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'docmind-api.aliyuncs.com',
    cn-shenzhen = 'docmind-api.aliyuncs.com',
    cn-shenzhen-finance-1 = 'docmind-api.aliyuncs.com',
    cn-shenzhen-inner = 'docmind-api.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'docmind-api.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'docmind-api.aliyuncs.com',
    cn-wuhan = 'docmind-api.aliyuncs.com',
    cn-wulanchabu = 'docmind-api.aliyuncs.com',
    cn-yushanfang = 'docmind-api.aliyuncs.com',
    cn-zhangbei = 'docmind-api.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'docmind-api.aliyuncs.com',
    cn-zhangjiakou = 'docmind-api.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'docmind-api.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'docmind-api.aliyuncs.com',
    eu-central-1 = 'docmind-api.aliyuncs.com',
    eu-west-1 = 'docmind-api.aliyuncs.com',
    eu-west-1-oxs = 'docmind-api.aliyuncs.com',
    me-east-1 = 'docmind-api.aliyuncs.com',
    rus-west-1-pop = 'docmind-api.aliyuncs.com',
    us-east-1 = 'docmind-api.aliyuncs.com',
    us-west-1 = 'docmind-api.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model GetDocStructureResultRequest {
  id?: string(name='Id', description='业务id', example='docmind-20220816-1e89d65c', position='Query'),
}

model GetDocStructureResultResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消', example='Success'),
}

model GetDocStructureResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocStructureResultResponseBody(name='body'),
}

async function getDocStructureResult(request: GetDocStructureResultRequest): GetDocStructureResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocStructureResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentCompareResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetDocumentCompareResultResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  completed?: boolean(name='Completed'),
  data?: any(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', example='Success'),
}

model GetDocumentCompareResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentCompareResultResponseBody(name='body'),
}

async function getDocumentCompareResult(request: GetDocumentCompareResultRequest): GetDocumentCompareResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentCompareResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentConvertResultRequest {
  id?: string(name='Id', description='业务id', example='docmind-20220816-1e89d65c', position='Query'),
}

model GetDocumentConvertResultResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  completed: boolean(name='Completed'),
  data?: [ 
    {
      md5?: string(name='Md5', example='e6d83e55df218650b9a296bfbc300076'),
      size?: long(name='Size', example='2355965'),
      type?: string(name='Type', example='pdf'),
      url?: string(name='Url', description='url地址', example='http://docmind-api-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/convert/docmind-20220816-15bc7965/0.pdf?Expires=1660722412&OSSAccessKeyId=LTAI5tFEK2uEApeeYzxNMEci&Signature=f%2FKluINWMuuVyA5w22Z1wkoRjEg%3D'),
    }
  ](name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status: string(name='Status', example='Success'),
}

model GetDocumentConvertResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentConvertResultResponseBody(name='body'),
}

async function getDocumentConvertResult(request: GetDocumentConvertResultRequest): GetDocumentConvertResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentConvertResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentExtractResultRequest {
  id?: string(name='Id', description='业务id', example='docmind-20220816-1e89d65c', position='Query'),
}

model GetDocumentExtractResultResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消', example='Success'),
}

model GetDocumentExtractResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentExtractResultResponseBody(name='body'),
}

async function getDocumentExtractResult(request: GetDocumentExtractResultRequest): GetDocumentExtractResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentExtractResult', 'POST', '/', 'json', false, 'json', request);
}

model GetTableUnderstandingResultRequest {
  id?: string(name='Id', description='业务id', example='docmind-20220816-1e89d65c', position='Query'),
}

model GetTableUnderstandingResultResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消', example='Success'),
}

model GetTableUnderstandingResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableUnderstandingResultResponseBody(name='body'),
}

async function getTableUnderstandingResult(request: GetTableUnderstandingResultRequest): GetTableUnderstandingResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableUnderstandingResult', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToExcelJobRequest {
  forceMergeExcel?: boolean(name='ForceMergeExcel', position='Query'),
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', example='jpg', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToExcelJobResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  data?: {
    id?: string(name='Id', description='业务id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToExcelJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToExcelJobResponseBody(name='body'),
}

async function submitConvertImageToExcelJob(request: SubmitConvertImageToExcelJobRequest): SubmitConvertImageToExcelJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToExcelJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToPdfJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', example='JPG', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToPdfJobResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  data?: {
    id?: string(name='Id', description='业务id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToPdfJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToPdfJobResponseBody(name='body'),
}

async function submitConvertImageToPdfJob(request: SubmitConvertImageToPdfJobRequest): SubmitConvertImageToPdfJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToPdfJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToWordJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', example='jpg', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToWordJobResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  data?: {
    id?: string(name='Id', description='业务id', example='docmind-20220810-7c5f9dd4'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitConvertImageToWordJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToWordJobResponseBody(name='body'),
}

async function submitConvertImageToWordJob(request: SubmitConvertImageToWordJobRequest): SubmitConvertImageToWordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToWordJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDocumentCompareJobRequest {
  compareFileName?: string(name='CompareFileName', description='待对比文件名称', position='Query'),
  compareFileUrl?: string(name='CompareFileUrl', description='待对比文件的url', position='Query'),
  originFileName?: string(name='OriginFileName', description='源文件名称', position='Query'),
  originFileUrl?: string(name='OriginFileUrl', description='源文件url地址', position='Query'),
}

model SubmitDocumentCompareJobResponseBody = {
  code?: string(name='Code', description='错误码', example='noPermission'),
  data?: {
    id?: string(name='Id', description='业务id', example='docmind-20220816-15bc7965'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='请求唯一 ID', example='43A29C77-405E-4CC0-BC55-EE694AD00655'),
}

model SubmitDocumentCompareJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDocumentCompareJobResponseBody(name='body'),
}

async function submitDocumentCompareJob(request: SubmitDocumentCompareJobRequest): SubmitDocumentCompareJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDocumentCompareJob', 'POST', '/', 'json', false, 'json', request);
}

