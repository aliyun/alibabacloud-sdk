/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'docmind-api';
  @version = '2022-07-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetDocStructureResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetDocStructureResultResponseBody = {
  code?: string(name='Code', description='错误码'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: any(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消'),
}

model GetDocStructureResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocStructureResultResponseBody(name='body'),
}

async function getDocStructureResult(request: GetDocStructureResultRequest): GetDocStructureResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocStructureResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentCompareResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetDocumentCompareResultResponseBody = {
  code?: string(name='Code', description='错误码'),
  completed?: boolean(name='Completed'),
  data?: any(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  status?: string(name='Status'),
}

model GetDocumentCompareResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentCompareResultResponseBody(name='body'),
}

async function getDocumentCompareResult(request: GetDocumentCompareResultRequest): GetDocumentCompareResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentCompareResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentConvertResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetDocumentConvertResultResponseBody = {
  code?: string(name='Code', description='错误码'),
  completed: boolean(name='Completed'),
  data?: [ 
    {
      md5?: string(name='Md5'),
      size?: long(name='Size'),
      type?: string(name='Type'),
      url?: string(name='Url', description='url地址'),
    }
  ](name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  status: string(name='Status'),
}

model GetDocumentConvertResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentConvertResultResponseBody(name='body'),
}

async function getDocumentConvertResult(request: GetDocumentConvertResultRequest): GetDocumentConvertResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentConvertResult', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentExtractResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetDocumentExtractResultResponseBody = {
  code?: string(name='Code', description='错误码'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: any(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消'),
}

model GetDocumentExtractResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocumentExtractResultResponseBody(name='body'),
}

async function getDocumentExtractResult(request: GetDocumentExtractResultRequest): GetDocumentExtractResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentExtractResult', 'POST', '/', 'json', false, 'json', request);
}

model GetTableUnderstandingResultRequest {
  id?: string(name='Id', description='业务id', position='Query'),
}

model GetTableUnderstandingResultResponseBody = {
  code?: string(name='Code', description='错误码'),
  completed?: boolean(name='Completed', description='操作是否完成
True：当前Job已经执行完成。 False：当前Job还在执行中。'),
  data?: any(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
  status?: string(name='Status', description='操作完成后的状态
Success：成功 Fail：失败 * Cancel：被服务端主动取消'),
}

model GetTableUnderstandingResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableUnderstandingResultResponseBody(name='body'),
}

async function getTableUnderstandingResult(request: GetTableUnderstandingResultRequest): GetTableUnderstandingResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableUnderstandingResult', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToExcelJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToExcelJobResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    id?: string(name='Id', description='业务id'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model SubmitConvertImageToExcelJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToExcelJobResponseBody(name='body'),
}

async function submitConvertImageToExcelJob(request: SubmitConvertImageToExcelJobRequest): SubmitConvertImageToExcelJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToExcelJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToPdfJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToPdfJobResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    id?: string(name='Id', description='业务id'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model SubmitConvertImageToPdfJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToPdfJobResponseBody(name='body'),
}

async function submitConvertImageToPdfJob(request: SubmitConvertImageToPdfJobRequest): SubmitConvertImageToPdfJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToPdfJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitConvertImageToWordJobRequest {
  imageNameExtension?: string(name='ImageNameExtension', description='图片扩展名。与imageName二选一
支持类型:JPG、JPEG、PNG、BMP、GIF', position='Query'),
  imageNames?: [ string ](name='ImageNames', description='图片名称。文件名称需包含后缀。与imageNameExtension二选一', shrink='simple', position='Query'),
  imageUrls?: [ string ](name='ImageUrls', description='图片url地址.最多支持30个url地址', shrink='simple', position='Query'),
}

model SubmitConvertImageToWordJobResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    id?: string(name='Id', description='业务id'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model SubmitConvertImageToWordJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitConvertImageToWordJobResponseBody(name='body'),
}

async function submitConvertImageToWordJob(request: SubmitConvertImageToWordJobRequest): SubmitConvertImageToWordJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitConvertImageToWordJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDocumentCompareJobRequest {
  compareFileName?: string(name='CompareFileName', description='待对比文件名称', position='Query'),
  compareFileUrl?: string(name='CompareFileUrl', description='待对比文件的url', position='Query'),
  originFileName?: string(name='OriginFileName', description='源文件名称', position='Query'),
  originFileUrl?: string(name='OriginFileUrl', description='源文件url地址', position='Query'),
}

model SubmitDocumentCompareJobResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    id?: string(name='Id', description='业务id'),
  }(name='Data'),
  message?: string(name='Message', description='错误提示'),
  requestId?: string(name='RequestId', description='请求唯一 ID'),
}

model SubmitDocumentCompareJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDocumentCompareJobResponseBody(name='body'),
}

async function submitDocumentCompareJob(request: SubmitDocumentCompareJobRequest): SubmitDocumentCompareJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDocumentCompareJob', 'POST', '/', 'json', false, 'json', request);
}

