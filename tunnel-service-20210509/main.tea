/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('tunnel-service', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DeleteSessionResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function deleteSession(sessionId: string): DeleteSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSessionWithOptions(sessionId, headers, runtime);
}

async function deleteSessionWithOptions(sessionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSessionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteSession', '2021-05-09', 'HTTPS', 'DELETE', 'AK', `/v1/sessions/${sessionId}`, 'string', req, runtime);
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetInstance', '2021-05-09', 'HTTPS', 'GET', 'AK', `/v1/instances/${instanceId}`, 'string', req, runtime);
}

model HeartBeatRequest {
  instanceId?: string(name='instanceId'),
  instanceType?: string(name='instanceType'),
  sessionStatus?: string(name='sessionStatus'),
}

model HeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function heartBeat(request: HeartBeatRequest): HeartBeatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return heartBeatWithOptions(request, headers, runtime);
}

async function heartBeatWithOptions(request: HeartBeatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): HeartBeatResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceId)) {
    body.instanceId = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body.instanceType = request.instanceType;
  }
  if (!Util.isUnset(request.sessionStatus)) {
    body.sessionStatus = request.sessionStatus;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('HeartBeat', '2021-05-09', 'HTTPS', 'PUT', 'AK', `/v1/sessions/`, 'string', req, runtime);
}

model UnRegisterInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function unRegisterInstance(instanceId: string): UnRegisterInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unRegisterInstanceWithOptions(instanceId, headers, runtime);
}

async function unRegisterInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UnRegisterInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('UnRegisterInstance', '2021-05-09', 'HTTPS', 'PUT', 'AK', `/v1/instances/${instanceId}`, 'string', req, runtime);
}

model CreateSessionRequest {
  sessionName?: string(name='sessionName'),
}

model CreateSessionResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function createSession(request: CreateSessionRequest): CreateSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSessionWithOptions(request, headers, runtime);
}

async function createSessionWithOptions(request: CreateSessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSessionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.sessionName)) {
    body.sessionName = request.sessionName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateSession', '2021-05-09', 'HTTPS', 'POST', 'AK', `/v1/sessions/`, 'string', req, runtime);
}

model RegisterInstanceRequest {
  instanceId?: string(name='instanceId'),
  sessionId?: string(name='sessionId'),
  instanceType?: string(name='instanceType'),
  source?: string(name='source'),
  description?: string(name='description'),
  params?: string(name='params'),
}

model RegisterInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function registerInstance(request: RegisterInstanceRequest): RegisterInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return registerInstanceWithOptions(request, headers, runtime);
}

async function registerInstanceWithOptions(request: RegisterInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceId)) {
    body.instanceId = request.instanceId;
  }
  if (!Util.isUnset(request.sessionId)) {
    body.sessionId = request.sessionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body.instanceType = request.instanceType;
  }
  if (!Util.isUnset(request.source)) {
    body.source = request.source;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.params)) {
    body.params = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RegisterInstance', '2021-05-09', 'HTTPS', 'POST', 'AK', `/v1/instances/`, 'string', req, runtime);
}

model GetSessionResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function getSession(sessionId: string): GetSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSessionWithOptions(sessionId, headers, runtime);
}

async function getSessionWithOptions(sessionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSessionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetSession', '2021-05-09', 'HTTPS', 'GET', 'AK', `/v1/sessions/${sessionId}`, 'string', req, runtime);
}

model ListSessionsRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
}

model ListSessionsResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function listSessions(request: ListSessionsRequest): ListSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSessionsWithOptions(request, headers, runtime);
}

async function listSessionsWithOptions(request: ListSessionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSessionsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNum)) {
    query.pageNum = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSessions', '2021-05-09', 'HTTPS', 'GET', 'AK', `/v1/sessions/`, 'string', req, runtime);
}

