/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('lingmou', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChatSessionInfo {
  createdAt?: long(name='createdAt'),
  mainAccountId?: long(name='mainAccountId'),
  sessionId?: string(name='sessionId'),
}

model CloseChatInstanceSessionsRequest {
  sessionIds?: [ string ](name='sessionIds', example='["8C9F2D4E-7A6B-4F1C-9E53-0B2C8D3F9A4B"]', nullable=true),
}

model CloseChatInstanceSessionsShrinkRequest {
  sessionIdsShrink?: string(name='sessionIds', example='["8C9F2D4E-7A6B-4F1C-9E53-0B2C8D3F9A4B"]', nullable=true),
}

model CloseChatInstanceSessionsResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: [
    ChatSessionInfo
  ](name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='SUCCESS'),
  requestId?: string(name='requestId', example='7239F9E5-A4DB-55BA-B701-0CE47DBDB0A8'),
  success?: boolean(name='success', example='True'),
}

model CloseChatInstanceSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseChatInstanceSessionsResponseBody(name='body'),
}

/**
 * @summary 关闭会话实例session
 *
 * @param tmpReq CloseChatInstanceSessionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloseChatInstanceSessionsResponse
 */
async function closeChatInstanceSessionsWithOptions(instanceId: string, tmpReq: CloseChatInstanceSessionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseChatInstanceSessionsResponse {
  Util.validateModel(tmpReq);
  var request = new CloseChatInstanceSessionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sessionIds)) {
    request.sessionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sessionIds, 'sessionIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sessionIdsShrink)) {
    body['sessionIds'] = request.sessionIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseChatInstanceSessions',
    version = '2025-05-27',
    protocol = 'HTTPS',
    pathname = `/openapi/chat/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sessions/close`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 关闭会话实例session
 *
 * @param request CloseChatInstanceSessionsRequest
 * @return CloseChatInstanceSessionsResponse
 */
async function closeChatInstanceSessions(instanceId: string, request: CloseChatInstanceSessionsRequest): CloseChatInstanceSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return closeChatInstanceSessionsWithOptions(instanceId, request, headers, runtime);
}

model CreateChatSessionRequest {
  instanceId?: string(name='instanceId', description='This parameter is required.', example='rmq-cn-9t946y43m1d'),
  license?: string(name='license', example='b9be4b25c2d38c409c376ffd2372be1'),
  platform?: string(name='platform', example='Web | Android | iOS'),
}

model CreateChatSessionResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    avatarAssets?: {
      md5?: string(name='md5', example='5B83BE2114489274BB88BADE7EBC9BC0'),
      minRequiredVersion?: string(name='minRequiredVersion', example='0.0.1'),
      secret?: string(name='secret', example='J562PNqJBZDhzOQpLBgIcIW8+rHQoM7P6IONGMP7P5vGxrWLxT7VtRenFnMY+wg/zpA2qwpFBmJYO2rVexnlCQ2WE4kvYOH/OKmlTzpQddY34U5jS9KaS3b3ulpq4xnKDjWJ+sLZSRMhuPDdlq8ZPfcfEPhJhF3zPO8Hu4QOSu+D/pAIDJUoixOTo9Q14DXFKGFuuVRQOQ7f/VxJcoSLIWIusV917pLtph/IYBaLd27gzbrTZBEVD8qrucR+WOQPY1g67PGAdafkhJWrs/+coM7+5dc3HEUC+KgI9JN4X4Akelc94aJcy78RZ6tRdr73hBzN83/cMZdzt2hxnjzg=='),
      type?: string(name='type', example='AVATAR_3D_TRADITIONAL'),
      url?: string(name='url', example='https://daily-avatar-property.oss-cn-beijing.aliyuncs.com/avatar-share-property/AVATAR_3D_TRADITIONAL/Mt.CNMU6BO4RBYU2/secret_assets_web.zip?Expires=1752637519&OSSAccessKeyId=STS.NZULzwLRx8thHDHQxem94dWdN&Signature=Oni3%2Be8dY8Xrv3iRGDyzn7uReVc%3D&security-token=CAISzAJ1q6Ft5B2yfSjIr5ngB8DDoY1Zj7aDSmL5tXgwYbYYi5LPrDz2IHhMfnloB%2BEcsfU3nmxT6vkZlrp6SJtIXleCZtF94oxN9h2gb4fb4093DEHt08%2FLI3OaLjKm9u2wCryLYbGwU%2FOpbE%2B%2B5U0X6LDmdDKkckW4OJmS8%2FBOZcgWWQ%2FKBlgvRq0hRG1YpdQdKGHaONu0LxfumRCwNkdzvRdmgm4NgsbWgO%2Fks0KA1QSml7ZP%2B9WuesH0M%2FMBZskvD42Hu8VtbbfE3SJq7BxHybx7lqQs%2B02c5onHUwEPsk%2FZYrKOroYzc1RjAbM%2FErRY6fP8nOE9ovbUm5RXHpT05CrMOs62ZPdDoKOscIvBXr6yZaP7JmcGC6iQLG%2FznQkSc081IsK2C7Xq0pe54O3lg9Ab41ZGNYEjq%2BpCIUP%2Fs97dqXEelD2e%2Bh8UezDnKxqAAXuAiYRY7Ox3cf6h2MlmRsK5yywg45O%2FizjiK2k8Z8p6WeOA54W3pfbg6ElV4d8TMWCVZ7tuAbSgRCKBg3q5YYrdS2ENqDu6njIea1pxG4LT4ydGxDBkYpjwcUxutDd0aAhFjsypSK%2Feuk0%2FDCfKMrWzCmkr1AtPpcNfJ8LPj58qIA'),
    }(name='avatarAssets'),
    rtcParams?: {
      appId?: string(name='appId', example='895cbf3b'),
      avatarUserId?: string(name='avatarUserId', example='E7enIvjUos'),
      channel?: string(name='channel', example='pPltqR3FovNCK3hNQc8eHUL3Ztq1wY'),
      clientUserId?: string(name='clientUserId', example='aw0tqpFlP4'),
      gslb?: string(name='gslb', example='https://gw.rtn.aliyuncs.com'),
      nonce?: string(name='nonce', example='f8b0ef02c5da778f4488e2470c'),
      serverUserId?: string(name='serverUserId', example='YzZtSQP8QX'),
      timestamp?: long(name='timestamp', example='1560588594'),
      token?: string(name='token', example='PtGgv2dM9F8tEuAtda50c0VNNFjn0WUbyTDRPa1im4cUBEcxlo'),
    }(name='rtcParams'),
    sessionId?: string(name='sessionId', example='9827f4bd-5008-4d34-98fb-62598f3ad3b5'),
  }(name='data'),
  httpStatusCode?: long(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='7239F9E5-A4DB-55BA-B701-0CE47DBDB0A8'),
  success?: boolean(name='success', example='True'),
}

model CreateChatSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatSessionResponseBody(name='body'),
}

/**
 * @summary 创建数字人会话
 *
 * @param request CreateChatSessionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatSessionResponse
 */
async function createChatSessionWithOptions(id: string, request: CreateChatSessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChatSessionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['instanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.license)) {
    query['license'] = request.license;
  }
  if (!Util.isUnset(request.platform)) {
    query['platform'] = request.platform;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatSession',
    version = '2025-05-27',
    protocol = 'HTTPS',
    pathname = `/openapi/chat/init/${OpenApiUtil.getEncodeParam(id)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数字人会话
 *
 * @param request CreateChatSessionRequest
 * @return CreateChatSessionResponse
 */
async function createChatSession(id: string, request: CreateChatSessionRequest): CreateChatSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createChatSessionWithOptions(id, request, headers, runtime);
}

model QueryChatInstanceSessionsRequest {
  sessionIds?: [ string ](name='sessionIds', example='["8C9F2D4E-7A6B-4F1C-9E53-0B2C8D3F9A4B"]', nullable=true),
}

model QueryChatInstanceSessionsShrinkRequest {
  sessionIdsShrink?: string(name='sessionIds', example='["8C9F2D4E-7A6B-4F1C-9E53-0B2C8D3F9A4B"]', nullable=true),
}

model QueryChatInstanceSessionsResponseBody = {
  code?: string(name='code', example='200'),
  data?: [
    ChatSessionInfo
  ](name='data'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='7239F9E5-A4DB-55BA-B701-0CE47DBDB0A8'),
  success?: boolean(name='success', example='True'),
}

model QueryChatInstanceSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChatInstanceSessionsResponseBody(name='body'),
}

/**
 * @summary 查询会话实例session
 *
 * @param tmpReq QueryChatInstanceSessionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryChatInstanceSessionsResponse
 */
async function queryChatInstanceSessionsWithOptions(instanceId: string, tmpReq: QueryChatInstanceSessionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChatInstanceSessionsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryChatInstanceSessionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sessionIds)) {
    request.sessionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sessionIds, 'sessionIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.sessionIdsShrink)) {
    query['sessionIds'] = request.sessionIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatInstanceSessions',
    version = '2025-05-27',
    protocol = 'HTTPS',
    pathname = `/openapi/chat/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sessions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询会话实例session
 *
 * @param request QueryChatInstanceSessionsRequest
 * @return QueryChatInstanceSessionsResponse
 */
async function queryChatInstanceSessions(instanceId: string, request: QueryChatInstanceSessionsRequest): QueryChatInstanceSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryChatInstanceSessionsWithOptions(instanceId, request, headers, runtime);
}

