/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ARMS';
  @version = '2018-12-19';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'arms.aliyuncs.com',
    cn-beijing-finance-1 = 'arms.aliyuncs.com',
    cn-beijing-finance-pop = 'arms.aliyuncs.com',
    cn-beijing-gov-1 = 'arms.aliyuncs.com',
    cn-beijing-nu16-b01 = 'arms.aliyuncs.com',
    cn-edge-1 = 'arms.aliyuncs.com',
    cn-fujian = 'arms.aliyuncs.com',
    cn-haidian-cm12-c01 = 'arms.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'arms.aliyuncs.com',
    cn-hangzhou-test-306 = 'arms.aliyuncs.com',
    cn-hongkong-finance-pop = 'arms.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'arms.aliyuncs.com',
    cn-qingdao-nebula = 'arms.aliyuncs.com',
    cn-shanghai-et15-b01 = 'arms.aliyuncs.com',
    cn-shanghai-et2-b01 = 'arms.aliyuncs.com',
    cn-shanghai-inner = 'arms.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'arms.aliyuncs.com',
    cn-shenzhen-inner = 'arms.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'arms.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'arms.aliyuncs.com',
    cn-wuhan = 'arms.aliyuncs.com',
    cn-yushanfang = 'arms.aliyuncs.com',
    cn-zhangbei = 'arms.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'arms.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'arms.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'arms.aliyuncs.com',
    eu-west-1-oxs = 'arms.aliyuncs.com',
    me-east-1 = 'arms.aliyuncs.com',
    rus-west-1-pop = 'arms.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ARMSQueryDataSetRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId: long(name='DatasetId', position='Query'),
  dateStr?: string(name='DateStr', position='Query'),
  dimensions?: [ 
    {
      key?: string(name='Key'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Dimensions', position='Query'),
  hungryMode?: boolean(name='HungryMode', position='Query'),
  intervalInSec: int32(name='IntervalInSec', position='Query'),
  isDrillDown?: boolean(name='IsDrillDown', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  maxTime: long(name='MaxTime', position='Query'),
  measures?: [ string ](name='Measures', position='Query'),
  minTime: long(name='MinTime', position='Query'),
  optionalDims?: [ 
    {
      key?: string(name='Key'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='OptionalDims', position='Query'),
  orderByKey?: string(name='OrderByKey', position='Query'),
  reduceTail?: boolean(name='ReduceTail', position='Query'),
  requiredDims?: [ 
    {
      key?: string(name='Key'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='RequiredDims', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ARMSQueryDataSetResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ARMSQueryDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ARMSQueryDataSetResponseBody(name='body'),
}

async function aRMSQueryDataSet(request: ARMSQueryDataSetRequest): ARMSQueryDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ARMSQueryDataSet', 'POST', '/', 'json', false, 'json', request);
}

model GetServicesRequest {
  appType?: string(name='AppType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetServicesResponseBody = {
  data?: {
    details?: {
      details?: [ 
      {
        pid?: string(name='Pid'),
        regionId?: string(name='RegionId'),
        serviceName?: string(name='ServiceName'),
      }
    ](name='Details')
    }(name='Details'),
    services?: {
      services?: [ string ](name='Services')
    }(name='Services'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServicesResponseBody(name='body'),
}

async function getServices(request: GetServicesRequest): GetServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServices', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceRequest {
  appType?: string(name='AppType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  traceID: string(name='TraceID', position='Query'),
}

model GetTraceResponseBody = {
  data?: {
    callChainInfo?: [ 
    {
      duration?: int32(name='Duration'),
      haveStack?: boolean(name='HaveStack'),
      logEventList?: {
        logEvent?: [ 
        {
          tagEntryList?: {
            tagEntry?: [ 
            {
              key?: string(name='Key'),
              value?: string(name='Value'),
            }
          ](name='TagEntry')
          }(name='TagEntryList'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='LogEvent')
      }(name='LogEventList'),
      operationName?: string(name='OperationName'),
      resultCode?: string(name='ResultCode'),
      rpcId?: string(name='RpcId'),
      serviceIp?: string(name='ServiceIp'),
      serviceName?: string(name='ServiceName'),
      tagEntryList?: {
        tagEntry?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagEntry')
      }(name='TagEntryList'),
      timestamp?: long(name='Timestamp'),
      traceID?: string(name='TraceID'),
    }
  ](name='CallChainInfo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTraceResponseBody(name='body'),
}

async function getTrace(request: GetTraceRequest): GetTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrace', 'POST', '/', 'json', false, 'json', request);
}

model MetricQueryRequest {
  regionId?: string(name='RegionId', position='Host'),
  dimensions?: [ string ](name='Dimensions', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters', position='Query'),
  iintervalInSec?: int32(name='IintervalInSec', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  measures: [ string ](name='Measures', position='Query'),
  metric: string(name='Metric', position='Query'),
  order?: string(name='Order', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model MetricQueryResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model MetricQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MetricQueryResponseBody(name='body'),
}

async function metricQuery(request: MetricQueryRequest): MetricQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MetricQuery', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesRequest {
  appType?: string(name='AppType', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  minDuration?: long(name='MinDuration', position='Query'),
  operationName?: string(name='OperationName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  tag1?: string(name='Tag1', position='Query'),
  tag2?: string(name='Tag2', position='Query'),
}

model SearchTracesResponseBody = {
  data?: {
    traceInfo?: [ 
    {
      duration?: int32(name='Duration'),
      operationName?: string(name='OperationName'),
      serviceIp?: string(name='ServiceIp'),
      serviceName?: string(name='ServiceName'),
      timestamp?: long(name='Timestamp'),
      traceID?: string(name='TraceID'),
    }
  ](name='TraceInfo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model SearchTracesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchTracesResponseBody(name='body'),
}

async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraces', 'POST', '/', 'json', false, 'json', request);
}

