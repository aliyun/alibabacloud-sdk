/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adb';
  @version = '2019-03-15';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'adb.aliyuncs.com',
    cn-beijing = 'adb.aliyuncs.com',
    cn-hangzhou = 'adb.aliyuncs.com',
    cn-shanghai = 'adb.aliyuncs.com',
    cn-shenzhen = 'adb.aliyuncs.com',
    cn-hongkong = 'adb.aliyuncs.com',
    ap-southeast-1 = 'adb.aliyuncs.com',
    us-west-1 = 'adb.aliyuncs.com',
    us-east-1 = 'adb.aliyuncs.com',
    cn-hangzhou-finance = 'adb.aliyuncs.com',
    cn-north-2-gov-1 = 'adb.aliyuncs.com',
    ap-northeast-2-pop = 'adb.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'adb.aliyuncs.com',
    cn-beijing-finance-pop = 'adb.aliyuncs.com',
    cn-beijing-gov-1 = 'adb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'adb.aliyuncs.com',
    cn-edge-1 = 'adb.aliyuncs.com',
    cn-fujian = 'adb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'adb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'adb.aliyuncs.com',
    cn-hangzhou-test-306 = 'adb.aliyuncs.com',
    cn-hongkong-finance-pop = 'adb.aliyuncs.com',
    cn-qingdao-nebula = 'adb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'adb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'adb.aliyuncs.com',
    cn-shanghai-finance-1 = 'adb.aliyuncs.com',
    cn-shanghai-inner = 'adb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'adb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'adb.aliyuncs.com',
    cn-shenzhen-inner = 'adb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'adb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'adb.aliyuncs.com',
    cn-wuhan = 'adb.aliyuncs.com',
    cn-yushanfang = 'adb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'adb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'adb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'adb.aliyuncs.com',
    eu-west-1-oxs = 'adb.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'adb.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'adb.ap-northeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model BindDBResourceGroupWithUserRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  groupUser: string(name='GroupUser', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BindDBResourceGroupWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindDBResourceGroupWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindDBResourceGroupWithUserResponseBody(name='body'),
}

async function bindDBResourceGroupWithUser(request: BindDBResourceGroupWithUserRequest): BindDBResourceGroupWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDBResourceGroupWithUser', 'POST', '/', 'json', false, 'json', request);
}

model BindDBResourcePoolWithUserRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  poolUser: string(name='PoolUser', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindDBResourcePoolWithUserResponseBody(name='body'),
}

async function bindDBResourcePoolWithUser(request: BindDBResourcePoolWithUserRequest): BindDBResourcePoolWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDBResourcePoolWithUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterRequest {
  backupSetID?: string(name='BackupSetID', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  computeResource?: string(name='ComputeResource', position='Query'),
  DBClusterCategory: string(name='DBClusterCategory', position='Query'),
  DBClusterClass?: string(name='DBClusterClass', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', position='Query'),
  DBClusterVersion: string(name='DBClusterVersion', position='Query'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount', position='Query'),
  DBNodeStorage?: string(name='DBNodeStorage', position='Query'),
  elasticIOResource?: string(name='ElasticIOResource', position='Query'),
  executorCount?: string(name='ExecutorCount', position='Query'),
  mode?: string(name='Mode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  restoreType?: string(name='RestoreType', position='Query'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', position='Query'),
  storageResource?: string(name='StorageResource', position='Query'),
  storageType?: string(name='StorageType', position='Query'),
  usedTime?: string(name='UsedTime', position='Query'),
  VPCId?: string(name='VPCId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  groupType?: string(name='GroupType', position='Query'),
  nodeNum?: int32(name='NodeNum', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResourceGroupResponseBody(name='body'),
}

async function createDBResourceGroup(request: CreateDBResourceGroupRequest): CreateDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  nodeNum?: int32(name='NodeNum', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResourcePoolResponseBody(name='body'),
}

async function createDBResourcePool(request: CreateDBResourcePoolRequest): CreateDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model CreateElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', position='Query'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', position='Query'),
  elasticPlanNodeNum: int32(name='ElasticPlanNodeNum', minimum=1, maximum=10000, position='Query'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay', position='Query'),
  elasticPlanTimeEnd: string(name='ElasticPlanTimeEnd', position='Query'),
  elasticPlanTimeStart: string(name='ElasticPlanTimeStart', position='Query'),
  elasticPlanWeeklyRepeat: string(name='ElasticPlanWeeklyRepeat', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName: string(name='ResourcePoolName', position='Query'),
}

model CreateElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateElasticPlanResponseBody(name='body'),
}

async function createElasticPlan(request: CreateElasticPlanRequest): CreateElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResourceGroupResponseBody(name='body'),
}

async function deleteDBResourceGroup(request: DeleteDBResourceGroupRequest): DeleteDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResourcePoolResponseBody(name='body'),
}

async function deleteDBResourcePool(request: DeleteDBResourcePoolRequest): DeleteDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model DeleteElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteElasticPlanResponseBody(name='body'),
}

async function deleteElasticPlan(request: DeleteElasticPlanRequest): DeleteElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accountList?: {
    DBAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus'),
      accountType?: string(name='AccountType'),
    }
  ](name='DBAccount')
  }(name='AccountList'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllAccountsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAllAccountsResponseBody = {
  accountList?: [ 
    {
      user?: string(name='User'),
    }
  ](name='AccountList'),
  requestId?: string(name='RequestId'),
}

model DescribeAllAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllAccountsResponseBody(name='body'),
}

async function describeAllAccounts(request: DescribeAllAccountsRequest): DescribeAllAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      columnName?: string(name='ColumnName'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      type?: string(name='Type'),
    }
  ](name='Column')
  }(name='Columns'),
  requestId?: string(name='RequestId'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Table')
  }(name='Tables'),
}

model DescribeAllDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogConfigRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAuditLogConfigResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  hostAddress?: string(name='HostAddress', position='Query'),
  order?: string(name='Order', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=10, maximum=100, position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sqlType?: string(name='SqlType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  succeed?: string(name='Succeed', position='Query'),
  user?: string(name='User', position='Query'),
}

model DescribeAuditLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      connId?: string(name='ConnId'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      hostAddress?: string(name='HostAddress'),
      processID?: string(name='ProcessID'),
      SQLText?: string(name='SQLText'),
      SQLType?: string(name='SQLType'),
      succeed?: string(name='Succeed'),
      totalTime?: string(name='TotalTime'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeAuditLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogRecordsResponseBody(name='body'),
}

async function describeAuditLogRecords(request: DescribeAuditLogRecordsRequest): DescribeAuditLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoRenewAttributeRequest {
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAutoRenewAttributeResponseBody = {
  items?: {
    autoRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
      DBClusterId?: string(name='DBClusterId'),
      duration?: int32(name='Duration'),
      periodUnit?: string(name='PeriodUnit'),
      regionId?: string(name='RegionId'),
      renewalStatus?: string(name='RenewalStatus'),
    }
  ](name='AutoRenewAttribute')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoRenewAttributeResponseBody(name='body'),
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZoneList?: [ 
    {
      supportedMode?: [ 
        {
          mode?: string(name='Mode'),
          supportedSerialList?: [ 
            {
              serial?: string(name='Serial'),
              supportedFlexibleResource?: [ 
                {
                  storageType?: string(name='StorageType'),
                  supportedComputeResource?: [ string ](name='SupportedComputeResource'),
                  supportedElasticIOResource?: {
                    maxCount?: string(name='MaxCount'),
                    minCount?: string(name='MinCount'),
                    step?: string(name='Step'),
                  }(name='SupportedElasticIOResource'),
                  supportedStorageResource?: [ string ](name='SupportedStorageResource'),
                }
              ](name='SupportedFlexibleResource'),
              supportedInstanceClassList?: [ 
                {
                  instanceClass?: string(name='InstanceClass'),
                  supportedExecutorList?: [ 
                    {
                      nodeCount?: {
                        maxCount?: string(name='MaxCount'),
                        minCount?: string(name='MinCount'),
                        step?: string(name='Step'),
                      }(name='NodeCount'),
                    }
                  ](name='SupportedExecutorList'),
                  supportedNodeCountList?: [ 
                    {
                      nodeCount?: {
                        maxCount?: string(name='MaxCount'),
                        minCount?: string(name='MinCount'),
                        step?: string(name='Step'),
                      }(name='NodeCount'),
                      storageSize?: [ string ](name='StorageSize'),
                    }
                  ](name='SupportedNodeCountList'),
                  tips?: string(name='Tips'),
                }
              ](name='SupportedInstanceClassList'),
            }
          ](name='SupportedSerialList'),
        }
      ](name='SupportedMode'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableZoneList'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  enableBackupLog?: string(name='EnableBackupLog'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
      backupSize?: int32(name='BackupSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupType?: string(name='BackupType'),
      DBClusterId?: string(name='DBClusterId'),
    }
  ](name='Backup')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColumnsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model DescribeColumnsResponseBody = {
  items?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      columnName?: string(name='ColumnName'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      type?: string(name='Type'),
    }
  ](name='Column')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColumns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConnectionCountRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeConnectionCountRecordsResponseBody = {
  accessIpRecords?: [ 
    {
      accessIp?: string(name='AccessIp'),
      count?: long(name='Count'),
    }
  ](name='AccessIpRecords'),
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  userRecords?: [ 
    {
      count?: long(name='Count'),
      user?: string(name='User'),
    }
  ](name='UserRecords'),
}

model DescribeConnectionCountRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionCountRecordsResponseBody(name='body'),
}

async function describeConnectionCountRecords(request: DescribeConnectionCountRecordsRequest): DescribeConnectionCountRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConnectionCountRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAccessWhiteListRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  items?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
      securityIPList?: string(name='SecurityIPList'),
    }
  ](name='IPArray')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAttributeResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category'),
      commodityCode?: string(name='CommodityCode'),
      computeResource?: string(name='ComputeResource'),
      connectionString?: string(name='ConnectionString'),
      creationTime?: string(name='CreationTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBClusterType?: string(name='DBClusterType'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeCount?: long(name='DBNodeCount'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBVersion?: string(name='DBVersion'),
      diskType?: string(name='DiskType'),
      dtsJobId?: string(name='DtsJobId'),
      elasticIOResource?: int32(name='ElasticIOResource'),
      enableAirflow?: boolean(name='EnableAirflow'),
      enableSpark?: boolean(name='EnableSpark'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      executorCount?: string(name='ExecutorCount'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      kmsId?: string(name='KmsId'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      maintainTime?: string(name='MaintainTime'),
      mode?: string(name='Mode'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstanceId?: string(name='RdsInstanceId'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storageResource?: string(name='StorageResource'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      userENIStatus?: boolean(name='UserENIStatus'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterForecastRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  metricType?: string(name='MetricType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterForecastResponseBody = {
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: string(name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterForecastResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterForecastResponseBody(name='body'),
}

async function describeDBClusterForecast(request: DescribeDBClusterForecastRequest): DescribeDBClusterForecastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterForecast', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterHealthReportRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterHealthReportResponseBody = {
  items?: [ 
    {
      avg?: string(name='Avg'),
      key?: string(name='Key'),
      max?: string(name='Max'),
      name?: string(name='Name'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterHealthReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterHealthReportResponseBody(name='body'),
}

async function describeDBClusterHealthReport(request: DescribeDBClusterHealthReportRequest): DescribeDBClusterHealthReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterHealthReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterNetInfoRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterNetInfoResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType'),
  items?: {
    address?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      connectionStringPrefix?: string(name='ConnectionStringPrefix'),
      IPAddress?: string(name='IPAddress'),
      netType?: string(name='NetType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='Address')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNetInfoResponseBody(name='body'),
}

async function describeDBClusterNetInfo(request: DescribeDBClusterNetInfoRequest): DescribeDBClusterNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key?: string(name='Key', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterResourcePoolPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key?: string(name='Key', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePools?: string(name='ResourcePools', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterResourcePoolPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      resourcePoolPerformances?: [ 
        {
          resourcePoolName?: string(name='ResourcePoolName'),
          resourcePoolSeries?: [ 
            {
              name?: string(name='Name'),
              values?: [ string ](name='Values'),
            }
          ](name='ResourcePoolSeries'),
        }
      ](name='ResourcePoolPerformances'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterResourcePoolPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterResourcePoolPerformanceResponseBody(name='body'),
}

async function describeDBClusterResourcePoolPerformance(request: DescribeDBClusterResourcePoolPerformanceRequest): DescribeDBClusterResourcePoolPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterResourcePoolPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDBClustersResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category'),
      commodityCode?: string(name='CommodityCode'),
      computeResource?: string(name='ComputeResource'),
      connectionString?: string(name='ConnectionString'),
      createTime?: string(name='CreateTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBClusterType?: string(name='DBClusterType'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeCount?: long(name='DBNodeCount'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBVersion?: string(name='DBVersion'),
      diskType?: string(name='DiskType'),
      dtsJobId?: string(name='DtsJobId'),
      elasticIOResource?: int32(name='ElasticIOResource'),
      engine?: string(name='Engine'),
      executorCount?: string(name='ExecutorCount'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      mode?: string(name='Mode'),
      payType?: string(name='PayType'),
      port?: string(name='Port'),
      rdsInstanceId?: string(name='RdsInstanceId'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storageResource?: string(name='StorageResource'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBResourceGroupResponseBody = {
  groupsInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      groupName?: string(name='GroupName'),
      groupType?: string(name='GroupType'),
      groupUsers?: string(name='GroupUsers'),
      nodeNum?: int32(name='NodeNum'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='GroupsInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBResourceGroupResponseBody(name='body'),
}

async function describeDBResourceGroup(request: DescribeDBResourceGroupRequest): DescribeDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName?: string(name='PoolName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBResourcePoolResponseBody = {
  poolsInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      nodeNum?: int32(name='NodeNum'),
      poolName?: string(name='PoolName'),
      poolUsers?: string(name='PoolUsers'),
      queryType?: string(name='QueryType'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='PoolsInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBResourcePoolResponseBody(name='body'),
}

async function describeDBResourcePool(request: DescribeDBResourcePoolRequest): DescribeDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisDimensionsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  queryCondition: string(name='QueryCondition', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  clientIps?: [ string ](name='ClientIps'),
  databases?: [ string ](name='Databases'),
  requestId?: string(name='RequestId'),
  resourceGroups?: [ string ](name='ResourceGroups'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisDimensions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  database?: string(name='Database', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  maxPeakMemory?: long(name='MaxPeakMemory', position='Query'),
  maxScanSize?: long(name='MaxScanSize', position='Query'),
  minPeakMemory?: long(name='MinPeakMemory', position='Query'),
  minScanSize?: long(name='MinScanSize', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patternId?: long(name='PatternId', position='Query'),
  queryCondition: string(name='QueryCondition', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroup?: string(name='ResourceGroup', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DescribeDiagnosisRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  querys?: [ 
    {
      clientIp?: string(name='ClientIp'),
      cost?: long(name='Cost'),
      database?: string(name='Database'),
      etlWriteRows?: long(name='EtlWriteRows'),
      executionTime?: long(name='ExecutionTime'),
      outputDataSize?: long(name='OutputDataSize'),
      outputRows?: long(name='OutputRows'),
      peakMemory?: long(name='PeakMemory'),
      processId?: string(name='ProcessId'),
      queueTime?: long(name='QueueTime'),
      rcHost?: string(name='RcHost'),
      resourceCostRank?: int32(name='ResourceCostRank'),
      resourceGroup?: string(name='ResourceGroup'),
      SQL?: string(name='SQL'),
      SQLTruncated?: boolean(name='SQLTruncated'),
      SQLTruncatedThreshold?: long(name='SQLTruncatedThreshold'),
      scanRows?: long(name='ScanRows'),
      scanSize?: long(name='ScanSize'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalPlanningTime?: long(name='TotalPlanningTime'),
      totalStages?: int32(name='TotalStages'),
      userName?: string(name='UserName'),
    }
  ](name='Querys'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId'),
      exceptionMsg?: string(name='ExceptionMsg'),
      fileName?: string(name='FileName'),
      status?: string(name='Status'),
      url?: string(name='Url'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticDailyPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  elasticDailyPlanDay?: string(name='ElasticDailyPlanDay', position='Query'),
  elasticDailyPlanStatusList?: string(name='ElasticDailyPlanStatusList', position='Query'),
  elasticPlanName?: string(name='ElasticPlanName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName?: string(name='ResourcePoolName', position='Query'),
}

model DescribeElasticDailyPlanResponseBody = {
  elasticDailyPlanList?: [ 
    {
      day?: string(name='Day'),
      elasticNodeNum?: int32(name='ElasticNodeNum'),
      endTs?: string(name='EndTs'),
      planEndTs?: string(name='PlanEndTs'),
      planName?: string(name='PlanName'),
      planStartTs?: string(name='PlanStartTs'),
      resourcePoolName?: string(name='ResourcePoolName'),
      startTs?: string(name='StartTs'),
      status?: int32(name='Status'),
    }
  ](name='ElasticDailyPlanList'),
  requestId?: string(name='RequestId'),
}

model DescribeElasticDailyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticDailyPlanResponseBody(name='body'),
}

async function describeElasticDailyPlan(request: DescribeElasticDailyPlanRequest): DescribeElasticDailyPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticDailyPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', position='Query'),
  elasticPlanName?: string(name='ElasticPlanName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName?: string(name='ResourcePoolName', position='Query'),
}

model DescribeElasticPlanResponseBody = {
  elasticPlanList?: [ 
    {
      elasticNodeNum?: int32(name='ElasticNodeNum'),
      enable?: boolean(name='Enable'),
      endDay?: string(name='EndDay'),
      endTime?: string(name='EndTime'),
      planName?: string(name='PlanName'),
      resourcePoolName?: string(name='ResourcePoolName'),
      startDay?: string(name='StartDay'),
      startTime?: string(name='StartTime'),
      weeklyRepeat?: string(name='WeeklyRepeat'),
    }
  ](name='ElasticPlanList'),
  requestId?: string(name='RequestId'),
}

model DescribeElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticPlanResponseBody(name='body'),
}

async function describeElasticPlan(request: DescribeElasticPlanRequest): DescribeElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInclinedTablesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tableType: string(name='TableType', position='Query'),
}

model DescribeInclinedTablesResponseBody = {
  items?: {
    table?: [ 
    {
      isIncline?: boolean(name='IsIncline'),
      name?: string(name='Name'),
      schema?: string(name='Schema'),
      size?: long(name='Size'),
      type?: string(name='Type'),
    }
  ](name='Table')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeInclinedTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInclinedTablesResponseBody(name='body'),
}

async function describeInclinedTables(request: DescribeInclinedTablesRequest): DescribeInclinedTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInclinedTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadTasksRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  state?: string(name='State', position='Query'),
}

model DescribeLoadTasksRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  loadTasksRecords?: [ 
    {
      createTime?: string(name='CreateTime'),
      DBName?: string(name='DBName'),
      jobName?: string(name='JobName'),
      processID?: string(name='ProcessID'),
      processRows?: long(name='ProcessRows'),
      sql?: string(name='Sql'),
      state?: string(name='State'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='LoadTasksRecords'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeLoadTasksRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadTasksRecordsResponseBody(name='body'),
}

async function describeLoadTasksRecords(request: DescribeLoadTasksRecordsRequest): DescribeLoadTasksRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadTasksRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMaintenanceActionRequest {
  isHistory?: int32(name='IsHistory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region: string(name='Region', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskType: string(name='TaskType', position='Query'),
}

model DescribeMaintenanceActionResponseBody = {
  items?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      DBClusterId?: string(name='DBClusterId'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      deadline?: string(name='Deadline'),
      id?: int32(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      prepareInterval?: string(name='PrepareInterval'),
      region?: string(name='Region'),
      resultInfo?: string(name='ResultInfo'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      switchTime?: string(name='SwitchTime'),
      taskType?: string(name='TaskType'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMaintenanceActionResponseBody(name='body'),
}

async function describeMaintenanceAction(request: DescribeMaintenanceActionRequest): DescribeMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeOperatorPermissionResponseBody = {
  createdTime?: string(name='CreatedTime'),
  DBClusterId?: string(name='DBClusterId'),
  expiredTime?: string(name='ExpiredTime'),
  privileges?: string(name='Privileges'),
  requestId?: string(name='RequestId'),
}

model DescribeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOperatorPermissionResponseBody(name='body'),
}

async function describeOperatorPermission(request: DescribeOperatorPermissionRequest): DescribeOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribePatternPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  patternId: string(name='PatternId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribePatternPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribePatternPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePatternPerformanceResponseBody(name='body'),
}

async function describePatternPerformance(request: DescribePatternPerformanceRequest): DescribePatternPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePatternPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProcessListRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  runningTime?: int32(name='RunningTime', position='Query'),
  showFull?: boolean(name='ShowFull', position='Query'),
  user?: string(name='User', position='Query'),
}

model DescribeProcessListResponseBody = {
  items?: {
    process?: [ 
    {
      command?: string(name='Command'),
      db?: string(name='DB'),
      host?: string(name='Host'),
      id?: int32(name='Id'),
      info?: string(name='Info'),
      processId?: string(name='ProcessId'),
      startTime?: string(name='StartTime'),
      time?: int32(name='Time'),
      user?: string(name='User'),
    }
  ](name='Process')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeProcessListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProcessListResponseBody(name='body'),
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          localName?: string(name='LocalName'),
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPatternAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  patternId: long(name='PatternId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSQLPatternAttributeResponseBody = {
  patternDetail?: {
    averageMemory?: string(name='AverageMemory'),
    averageQueryTime?: string(name='AverageQueryTime'),
    queryCount?: long(name='QueryCount'),
    SQLPattern?: string(name='SQLPattern'),
    totalQueryTime?: string(name='TotalQueryTime'),
  }(name='PatternDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLPatternAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPatternAttributeResponseBody(name='body'),
}

async function describeSQLPatternAttribute(request: DescribeSQLPatternAttributeRequest): DescribeSQLPatternAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPatternAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPatternsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  order: string(name='Order', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSQLPatternsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  patternDetails?: [ 
    {
      accessIp?: string(name='AccessIp'),
      averageExecutionTime?: double(name='AverageExecutionTime'),
      averagePeakMemory?: double(name='AveragePeakMemory'),
      averageQueryTime?: double(name='AverageQueryTime'),
      averageScanSize?: double(name='AverageScanSize'),
      blockable?: boolean(name='Blockable'),
      failedCount?: long(name='FailedCount'),
      maxExecutionTime?: long(name='MaxExecutionTime'),
      maxPeakMemory?: long(name='MaxPeakMemory'),
      maxQueryTime?: long(name='MaxQueryTime'),
      maxScanSize?: long(name='MaxScanSize'),
      patternCreationTime?: string(name='PatternCreationTime'),
      patternId?: string(name='PatternId'),
      queryCount?: long(name='QueryCount'),
      SQLPattern?: string(name='SQLPattern'),
      tables?: string(name='Tables'),
      user?: string(name='User'),
    }
  ](name='PatternDetails'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPatternsResponseBody(name='body'),
}

async function describeSQLPatterns(request: DescribeSQLPatternsRequest): DescribeSQLPatternsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPatterns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId: string(name='ProcessId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSQLPlanResponseBody = {
  detail?: {
    CPUTime?: long(name='CPUTime'),
    clientIP?: string(name='ClientIP'),
    database?: string(name='Database'),
    outputRows?: long(name='OutputRows'),
    outputSize?: long(name='OutputSize'),
    peakMemory?: long(name='PeakMemory'),
    planningTime?: long(name='PlanningTime'),
    queuedTime?: long(name='QueuedTime'),
    SQL?: string(name='SQL'),
    startTime?: string(name='StartTime'),
    state?: string(name='State'),
    totalStage?: long(name='TotalStage'),
    totalTask?: long(name='TotalTask'),
    totalTime?: long(name='TotalTime'),
    user?: string(name='User'),
  }(name='Detail'),
  originInfo?: string(name='OriginInfo'),
  requestId?: string(name='RequestId'),
  stageList?: [ 
    {
      CPUTimeAvg?: long(name='CPUTimeAvg'),
      CPUTimeMax?: long(name='CPUTimeMax'),
      CPUTimeMin?: long(name='CPUTimeMin'),
      inputSizeAvg?: long(name='InputSizeAvg'),
      inputSizeMax?: long(name='InputSizeMax'),
      inputSizeMin?: long(name='InputSizeMin'),
      operatorCost?: long(name='OperatorCost'),
      peakMemory?: long(name='PeakMemory'),
      scanSizeAvg?: long(name='ScanSizeAvg'),
      scanSizeMax?: long(name='ScanSizeMax'),
      scanSizeMin?: long(name='ScanSizeMin'),
      scanTimeAvg?: long(name='ScanTimeAvg'),
      scanTimeMax?: long(name='ScanTimeMax'),
      scanTimeMin?: long(name='ScanTimeMin'),
      stageId?: int32(name='StageId'),
      state?: string(name='State'),
    }
  ](name='StageList'),
}

model DescribeSQLPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanResponseBody(name='body'),
}

async function describeSQLPlan(request: DescribeSQLPlanRequest): DescribeSQLPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPlanTaskRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId: string(name='ProcessId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  stageId: string(name='StageId', position='Query'),
}

model DescribeSQLPlanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      elapsedTime?: long(name='ElapsedTime'),
      inputRows?: long(name='InputRows'),
      inputSize?: long(name='InputSize'),
      operatorCost?: long(name='OperatorCost'),
      outputRows?: long(name='OutputRows'),
      outputSize?: long(name='OutputSize'),
      peakMemory?: long(name='PeakMemory'),
      scanCost?: long(name='ScanCost'),
      scanRows?: long(name='ScanRows'),
      scanSize?: long(name='ScanSize'),
      state?: string(name='State'),
      taskId?: int32(name='TaskId'),
    }
  ](name='TaskList'),
}

model DescribeSQLPlanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanTaskResponseBody(name='body'),
}

async function describeSQLPlanTask(request: DescribeSQLPlanTaskRequest): DescribeSQLPlanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlanTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchemasRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSchemasResponseBody = {
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchemasResponseBody(name='body'),
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  processID?: string(name='ProcessID', position='Query'),
  range?: string(name='Range', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  state?: string(name='State', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    slowLogRecord?: [ 
    {
      DBName?: string(name='DBName'),
      executionStartTime?: string(name='ExecutionStartTime'),
      hostAddress?: string(name='HostAddress'),
      outputSize?: string(name='OutputSize'),
      parseRowCounts?: long(name='ParseRowCounts'),
      peakMemoryUsage?: string(name='PeakMemoryUsage'),
      planningTime?: long(name='PlanningTime'),
      processID?: string(name='ProcessID'),
      queryTime?: long(name='QueryTime'),
      queueTime?: long(name='QueueTime'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLText?: string(name='SQLText'),
      scanRows?: long(name='ScanRows'),
      scanSize?: string(name='ScanSize'),
      scanTime?: long(name='ScanTime'),
      state?: string(name='State'),
      userName?: string(name='UserName'),
      wallTime?: long(name='WallTime'),
    }
  ](name='SlowLogRecord')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogTrendRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogTrendResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  items?: {
    slowLogTrendItem?: [ 
    {
      key?: string(name='Key'),
      series?: {
        seriesItem?: [ 
        {
          name?: string(name='Name'),
          values?: string(name='Values'),
        }
      ](name='SeriesItem')
      }(name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='SlowLogTrendItem')
  }(name='Items'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeSlowLogTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogTrendResponseBody(name='body'),
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSqlPatternRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sqlPattern?: string(name='SqlPattern', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeSqlPatternResponseBody = {
  items?: [ 
    {
      accessIP?: string(name='AccessIP'),
      avgCpuTime?: string(name='AvgCpuTime'),
      avgPeakMemory?: string(name='AvgPeakMemory'),
      avgScanSize?: string(name='AvgScanSize'),
      avgStageCount?: string(name='AvgStageCount'),
      avgTaskCount?: string(name='AvgTaskCount'),
      instanceName?: string(name='InstanceName'),
      maxCpuTime?: string(name='MaxCpuTime'),
      maxPeakMemory?: string(name='MaxPeakMemory'),
      maxScanSize?: string(name='MaxScanSize'),
      maxStageCount?: string(name='MaxStageCount'),
      maxTaskCount?: string(name='MaxTaskCount'),
      pattern?: string(name='Pattern'),
      queryCount?: string(name='QueryCount'),
      reportDate?: string(name='ReportDate'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSqlPatternResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlPatternResponseBody(name='body'),
}

async function describeSqlPattern(request: DescribeSqlPatternRequest): DescribeSqlPatternResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSqlPattern', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableAccessCountRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  order?: string(name='Order', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeTableAccessCountResponseBody = {
  items?: [ 
    {
      accessCount?: string(name='AccessCount'),
      instanceName?: string(name='InstanceName'),
      reportDate?: string(name='ReportDate'),
      tableName?: string(name='TableName'),
      tableSchema?: string(name='TableSchema'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTableAccessCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableAccessCountResponseBody(name='body'),
}

async function describeTableAccessCount(request: DescribeTableAccessCountRequest): DescribeTableAccessCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableAccessCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableDetailRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model DescribeTableDetailResponseBody = {
  avgSize?: long(name='AvgSize'),
  items?: {
    shard?: [ 
    {
      id?: int32(name='Id'),
      size?: long(name='Size'),
    }
  ](name='Shard')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeTableDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableDetailResponseBody(name='body'),
}

async function describeTableDetail(request: DescribeTableDetailRequest): DescribeTableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablePartitionDiagnoseRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTablePartitionDiagnoseResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      partitionDetail?: string(name='PartitionDetail'),
      partitionNumber?: int32(name='PartitionNumber'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  suggestMaxRecordsPerPartition?: long(name='SuggestMaxRecordsPerPartition'),
  suggestMinRecordsPerPartition?: long(name='SuggestMinRecordsPerPartition'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTablePartitionDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablePartitionDiagnoseResponseBody(name='body'),
}

async function describeTablePartitionDiagnose(request: DescribeTablePartitionDiagnoseRequest): DescribeTablePartitionDiagnoseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTablePartitionDiagnose', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableStatisticsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTableStatisticsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    tableStatisticRecords?: [ 
    {
      coldDataSize?: long(name='ColdDataSize'),
      dataSize?: long(name='DataSize'),
      indexSize?: long(name='IndexSize'),
      partitionCount?: long(name='PartitionCount'),
      primaryKeyIndexSize?: long(name='PrimaryKeyIndexSize'),
      rowCount?: long(name='RowCount'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='TableStatisticRecords')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeTableStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableStatisticsResponseBody(name='body'),
}

async function describeTableStatistics(request: DescribeTableStatisticsRequest): DescribeTableStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
}

model DescribeTablesResponseBody = {
  items?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Table')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskInfoRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: int32(name='TaskId', position='Query'),
}

model DescribeTaskInfoResponseBody = {
  requestId?: string(name='RequestId'),
  taskInfo?: {
    beginTime?: string(name='BeginTime'),
    finishTime?: string(name='FinishTime'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
    taskId?: int32(name='TaskId'),
  }(name='TaskInfo'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model DownloadDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  database?: string(name='Database', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  lang?: string(name='Lang', position='Query'),
  maxPeakMemory?: long(name='MaxPeakMemory', position='Query'),
  maxScanSize?: long(name='MaxScanSize', position='Query'),
  minPeakMemory?: long(name='MinPeakMemory', position='Query'),
  minScanSize?: long(name='MinScanSize', position='Query'),
  queryCondition: string(name='QueryCondition', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroup?: string(name='ResourceGroup', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DownloadDiagnosisRecordsResponseBody = {
  downloadId?: int32(name='DownloadId'),
  requestId?: string(name='RequestId'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model GrantOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  expiredTime: string(name='ExpiredTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privileges: string(name='Privileges', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantOperatorPermissionResponseBody(name='body'),
}

async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model KillProcessRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId?: string(name='ProcessId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model KillProcessResponse = {
  headers: map[string]string(name='headers'),
  body: KillProcessResponseBody(name='body'),
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcess', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAuditLogConfigRequest {
  auditLogStatus: string(name='AuditLogStatus', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  updateSucceed?: boolean(name='UpdateSucceed'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoRenewAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  duration?: string(name='Duration', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoRenewAttributeResponseBody(name='body'),
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  enableBackupLog?: string(name='EnableBackupLog', position='Query'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod', minimum=7, maximum=730, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterConnectionStringRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', position='Query'),
  currentConnectionString: string(name='CurrentConnectionString', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyClusterConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterConnectionStringResponseBody(name='body'),
}

async function modifyClusterConnectionString(request: ModifyClusterConnectionStringRequest): ModifyClusterConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterRequest {
  computeResource?: string(name='ComputeResource', position='Query'),
  DBClusterCategory?: string(name='DBClusterCategory', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeClass?: string(name='DBNodeClass', position='Query'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount', position='Query'),
  DBNodeStorage?: string(name='DBNodeStorage', position='Query'),
  elasticIOResource?: int32(name='ElasticIOResource', minimum=0, maximum=200, position='Query'),
  executorCount?: string(name='ExecutorCount', position='Query'),
  mode?: string(name='Mode', position='Query'),
  modifyType?: string(name='ModifyType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageResource?: string(name='StorageResource', position='Query'),
}

model ModifyDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', position='Query'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  modifyMode?: string(name='ModifyMode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIps: string(name='SecurityIps', position='Query'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  maintainTime: string(name='MaintainTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterPayTypeRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  usedTime?: string(name='UsedTime', minimum=1, maximum=9, position='Query'),
}

model ModifyDBClusterPayTypeResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  payType?: string(name='PayType'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDBClusterPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterPayTypeResponseBody(name='body'),
}

async function modifyDBClusterPayType(request: ModifyDBClusterPayTypeRequest): ModifyDBClusterPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterPayType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResourceGroupResponseBody(name='body'),
}

async function modifyDBClusterResourceGroup(request: ModifyDBClusterResourceGroupRequest): ModifyDBClusterResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  groupType?: string(name='GroupType', position='Query'),
  nodeNum?: int32(name='NodeNum', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBResourceGroupResponseBody(name='body'),
}

async function modifyDBResourceGroup(request: ModifyDBResourceGroupRequest): ModifyDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  nodeNum?: int32(name='NodeNum', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBResourcePoolResponseBody(name='body'),
}

async function modifyDBResourcePool(request: ModifyDBResourcePoolRequest): ModifyDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', position='Query'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', position='Query'),
  elasticPlanNodeNum?: int32(name='ElasticPlanNodeNum', minimum=1, maximum=10000, position='Query'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay', position='Query'),
  elasticPlanTimeEnd?: string(name='ElasticPlanTimeEnd', position='Query'),
  elasticPlanTimeStart?: string(name='ElasticPlanTimeStart', position='Query'),
  elasticPlanWeeklyRepeat?: string(name='ElasticPlanWeeklyRepeat', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName: string(name='ResourcePoolName', position='Query'),
}

model ModifyElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticPlanResponseBody(name='body'),
}

async function modifyElasticPlan(request: ModifyElasticPlanRequest): ModifyElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  enableBackupLog: string(name='EnableBackupLog', position='Query'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyLogBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogBackupPolicyResponseBody(name='body'),
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMaintenanceActionRequest {
  ids: string(name='Ids', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime: string(name='SwitchTime', position='Query'),
}

model ModifyMaintenanceActionResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId'),
}

model ModifyMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMaintenanceActionResponseBody(name='body'),
}

async function modifyMaintenanceAction(request: ModifyMaintenanceActionRequest): ModifyMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RevokeOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeOperatorPermissionResponseBody(name='body'),
}

async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDBResourceGroupWithUserRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  groupUser: string(name='GroupUser', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnbindDBResourceGroupWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindDBResourceGroupWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDBResourceGroupWithUserResponseBody(name='body'),
}

async function unbindDBResourceGroupWithUser(request: UnbindDBResourceGroupWithUserRequest): UnbindDBResourceGroupWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDBResourceGroupWithUser', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDBResourcePoolWithUserRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  poolUser: string(name='PoolUser', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnbindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDBResourcePoolWithUserResponseBody(name='body'),
}

async function unbindDBResourcePoolWithUser(request: UnbindDBResourcePoolWithUserRequest): UnbindDBResourcePoolWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDBResourcePoolWithUser', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

