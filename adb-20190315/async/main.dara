/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adb';
  @version = '2019-03-15';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'adb.aliyuncs.com',
    cn-beijing = 'adb.aliyuncs.com',
    cn-hangzhou = 'adb.aliyuncs.com',
    cn-shanghai = 'adb.aliyuncs.com',
    cn-shenzhen = 'adb.aliyuncs.com',
    cn-hongkong = 'adb.aliyuncs.com',
    ap-southeast-1 = 'adb.aliyuncs.com',
    us-west-1 = 'adb.aliyuncs.com',
    us-east-1 = 'adb.aliyuncs.com',
    cn-hangzhou-finance = 'adb.aliyuncs.com',
    cn-north-2-gov-1 = 'adb.aliyuncs.com',
    ap-northeast-2-pop = 'adb.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'adb.aliyuncs.com',
    cn-beijing-finance-pop = 'adb.aliyuncs.com',
    cn-beijing-gov-1 = 'adb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'adb.aliyuncs.com',
    cn-edge-1 = 'adb.aliyuncs.com',
    cn-fujian = 'adb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'adb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'adb.aliyuncs.com',
    cn-hangzhou-test-306 = 'adb.aliyuncs.com',
    cn-hongkong-finance-pop = 'adb.aliyuncs.com',
    cn-qingdao-nebula = 'adb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'adb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'adb.aliyuncs.com',
    cn-shanghai-finance-1 = 'adb.aliyuncs.com',
    cn-shanghai-inner = 'adb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'adb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'adb.aliyuncs.com',
    cn-shenzhen-inner = 'adb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'adb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'adb.aliyuncs.com',
    cn-wuhan = 'adb.aliyuncs.com',
    cn-yushanfang = 'adb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'adb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'adb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'adb.aliyuncs.com',
    eu-west-1-oxs = 'adb.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'adb.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'adb.ap-northeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the public endpoint.

*   The prefix must contain lowercase letters, digits, and hyphens (-). It must start with a lowercase letter.
*   The prefix can be up to 30 characters in length.
*   By default, the cluster name is used as the prefix of the public endpoint.', example='am-bp278jg9****.ads.aliyuncs.com', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp278jg9****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ApplyAdviceByIdRequest {
  adviceDate?: long(name='AdviceDate', description='The date when the suggestion is generated. Specify the date in the yyyyMMdd format. The date must be in UTC.', example='20221101', position='Query'),
  adviceId?: string(name='AdviceId', description='The suggestion ID.', example='0baf1f52-53df-487f-8292-99a03716****', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-uf6g8w25jacm7****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ApplyAdviceByIdResponseBody = {
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **SUCCESS** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5DC10091-348D-12B1-906D-AB49D658012E'),
}

model ApplyAdviceByIdResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAdviceByIdResponseBody(name='body'),
}

async function applyAdviceById(request: ApplyAdviceByIdRequest): ApplyAdviceByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAdviceById', 'POST', '/', 'json', false, 'json', request);
}

model AttachUserENIRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query cluster IDs.', example='am-bp11q28kvl688****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachUserENIResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model AttachUserENIResponse = {
  headers: map[string]string(name='headers'),
  body: AttachUserENIResponseBody(name='body'),
}

/**
  * You can call this operation only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition.
  *
 */
async function attachUserENI(request: AttachUserENIRequest): AttachUserENIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachUserENI', 'POST', '/', 'json', false, 'json', request);
}

model BatchApplyAdviceByIdListRequest {
  adviceDate?: long(name='AdviceDate', example='20221115', position='Query'),
  adviceIdList?: string(name='AdviceIdList', example='c2589ff3-e86c-4f19-80c8-2aeb7dd9****,53414470-ebf4-4a53-a312-8a1ad8fd****,6e8dce84-fec8-4b0b-9c04-b0cea12c****,b3b9703d-55ca-47e0-96dd-6a4a9dbf****', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The message returned for the operation. Valid values:

*   **SUCCESS** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='am-uf6g8w25jacm7****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou', position='Query'),
}

model BatchApplyAdviceByIdListResponseBody = {
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='86F92D26-B774-5FA1-8E53-82CBEEEBB012'),
}

model BatchApplyAdviceByIdListResponse = {
  headers: map[string]string(name='headers'),
  body: BatchApplyAdviceByIdListResponseBody(name='body'),
}

async function batchApplyAdviceByIdList(request: BatchApplyAdviceByIdListRequest): BatchApplyAdviceByIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchApplyAdviceByIdList', 'POST', '/', 'json', false, 'json', request);
}

model BindDBResourceGroupWithUserRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName: string(name='GroupName', description='The name of the resource group.', example='test', position='Query'),
  groupUser: string(name='GroupUser', description='The database account with which to associate the resource group. It can be a standard account or a privileged account.', example='accout', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BindDBResourceGroupWithUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model BindDBResourceGroupWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindDBResourceGroupWithUserResponseBody(name='body'),
}

/**
  * ## Precautions
  * *   This operation is applicable only for elastic clusters of 32 cores or more.
  * *   The default resource group USER_DEFAULT cannot be associated with a database account.
  *
 */
async function bindDBResourceGroupWithUser(request: BindDBResourceGroupWithUserRequest): BindDBResourceGroupWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDBResourceGroupWithUser', 'POST', '/', 'json', false, 'json', request);
}

model BindDBResourcePoolWithUserRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', description='The name of the resource group.', example='test', position='Query'),
  poolUser: string(name='PoolUser', description='The database account with which to associate the resource group. It can be a standard account or a privileged account.', example='accout', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model BindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindDBResourcePoolWithUserResponseBody(name='body'),
}

/**
  * *   This operation is available only for AnalyticDB for MySQL clusters in elastic mode for Cluster Edition that have 32 cores or more.
  * *   The default resource group USER_DEFAULT cannot be associated with a database account.
  *
 */
async function bindDBResourcePoolWithUser(request: BindDBResourcePoolWithUserRequest): BindDBResourcePoolWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDBResourcePoolWithUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the database account.

*   The description cannot start with `http://` or `https://`.
*   The description can be up to 256 characters in length.', example='Test account', position='Query'),
  accountName: string(name='AccountName', description='The name of the database account.

*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must be 2 to 16 characters in length.
*   Reserved account names such as root, admin, and opsadmin cannot be used.', example='test_accout', position='Query'),
  accountPassword: string(name='AccountPassword', description='The password of the database account.

*   The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
*   Special characters include `! @ # $ % ^ & * ( ) _ + - =`
*   The password must be 8 to 32 characters in length.', example='Test_accout1', position='Query'),
  accountType?: string(name='AccountType', description='The type of the database account. Valid values:

*   **Normal**: standard account. Up to 256 standard accounts can be created for a cluster.
*   **Super** (default): privileged account. Only a single privileged account can be created for a cluster.

>  If a cluster does not have accounts, you can specify this parameter to create a privileged account or standard account. If a cluster has a privileged account, you must set this parameter to Normal to create a standard account. Otherwise, the operation fails. After an account is created, the privileged account has permissions on all databases of the cluster. The standard account does not have permissions and must be granted permissions on specific databases by the privileged account. For more information, see GRANT.', example='Normal', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to view cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1r053byu48p****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
  taskId?: int32(name='TaskId', description='The task ID.', example='1564657730'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterRequest {
  backupSetID?: string(name='BackupSetID', description='A reserved parameter.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value is case-sensitive and can contain a maximum of 64 ASCII characters in length.', example='123e4567-e89b-12d3-a456-t7241****', position='Query'),
  computeResource?: string(name='ComputeResource', description='The computing resources of the cluster. This parameter is required if the Mode parameter is set to **Flexible**.

>  You can call the [DescribeAvailableResource](~~190632~~) operation to query the computing resources that are available within a specific region.', example='32Core128GB', position='Query'),
  DBClusterCategory: string(name='DBClusterCategory', description='The edition of the cluster. Valid values:

*   **Cluster**: reserved mode for Cluster Edition

<!---->

*   **MixedStorage**: elastic mode for Cluster Edition

>  If the DBClusterCategory parameter is set to Cluster, you must set the Mode parameter to Reserver. If the DBClusterCategory parameter is set to MixedStorage, you must set the Mode parameter to Flexible. Otherwise, the cluster fails to be created.', example='Cluster', position='Query'),
  DBClusterClass?: string(name='DBClusterClass', description='The specification of the cluster. Valid values:

*   **C8**
*   **C32**

>  This parameter is required if the Mode parameter is set to Reserver.', example='C8', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.

*   The description cannot start with `http://` or `https`.
*   The description must be 2 to 256 characters in length.', example='test', position='Query'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', description='The network type of the cluster. Set the value to **VPC**.', example='VPC', position='Query'),
  DBClusterVersion: string(name='DBClusterVersion', description='The version of the cluster. Set the value to **3.0**.', example='3.0', position='Query'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount', description='The number of node groups. Valid values: 1 to 200 (integer).

>  This parameter is required if the Mode parameter is set to Reserver.', example='2', position='Query'),
  DBNodeStorage?: string(name='DBNodeStorage', description='The storage capacity of the cluster. Unit: GB.

*   Valid values when DBClusterClass is set to C8: 100 to 1000
*   Valid values when DBClusterClass is set to C32: 100 to 8000

> * This parameter is required if the Mode parameter is set to Reserver.
> * 1000 The storage capacity less than 1,000 GB increases in 100 GB increments. The storage capacity greater than 1,000 GB increases in 1,000 GB increments.', example='200', position='Query'),
  elasticIOResource?: string(name='ElasticIOResource', description='The number of elastic I/O units (EIUs). For more information, see [Use EIUs to scale up storage resources](~~189505~~).', example='0', position='Query'),
  executorCount?: string(name='ExecutorCount', description='A reserved parameter.', position='Query'),
  mode?: string(name='Mode', description='The mode of the cluster. Valid values:

*   **Reserver**: the reserved mode
*   **Flexible**: the elastic mode

>  If you do not specify this parameter, the cluster is in reserved mode.', example='Reserver', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The subscription type of the subscription cluster. Valid values:

*   **Year**: subscription on a yearly basis
*   **Month**: subscription on a monthly basis

>  This parameter is required if the PayType parameter is set to Prepaid.', example='Year', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the cluster belongs.', example='rg-4690g37929****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='A reserved parameter.', position='Query'),
  restoreType?: string(name='RestoreType', description='A reserved parameter.', position='Query'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='A reserved parameter.', position='Query'),
  storageResource?: string(name='StorageResource', description='A reserved parameter.', position='Query'),
  storageType?: string(name='StorageType', description='A reserved parameter.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription period of the subscription cluster.

*   Valid values when Period is set to Year: 1, 2, 3, and 5 (integer)
*   Valid values when Period is set to Month: 1 to 11 (integer)

> * This parameter is required if the PayType parameter is set to Prepaid.
> * Longer subscription periods offer more savings. Purchasing a cluster for one year is more cost-effective than purchasing the cluster for 10 or 11 months.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The virtual private cloud (VPC) ID of the cluster.', example='vpc-bp1at5ze0t5u3xtqn****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the cluster.', example='vsw-bp1aadw9k19x6cis9****', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent zone list.', example='cn-hangzhou-h', position='Query'),
}

model CreateDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1r053byu48p****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='202353278****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the cluster belongs.', example='rg-4690g37929****'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterResponseBody(name='body'),
}

/**
  * After you create a cluster, you are billed for the cluster specifications that you select. For more information about the billable items and pricing for Data Warehouse Edition (V3.0) clusters, see [Billable items of Data Warehouse Edition (V3.0)](~~303131~~) and [Pricing for Data Warehouse Edition (V3.0)](~~135229~~).
  *
 */
async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName: string(name='GroupName', description='The name of the resource group.

*   The name can be up to 255 characters in length.
*   The name must start with a letter or a digit.
*   The name can contain letters, digits, hyphens (\\_), and underscores (\\_).', example='test_group', position='Query'),
  groupType?: string(name='GroupType', description='The query execution mode. Default value: batch. Valid values:

*   **interactive**
*   **batch**', example='interactive', position='Query'),
  nodeNum?: int32(name='NodeNum', description='The number of nodes. Default value: 0.

*   Each node is configured with the resources of 16 cores and 64 GB memory.
*   Make sure that the amount of resources of the nodes (Number of nodes × 16 cores and 64 GB memory) is less than or equal to the amount of unused resources of the cluster.', example='2', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A8F6106-6AFD-5A34-9C80-8DE2C42D06E8'),
}

model CreateDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResourceGroupResponseBody(name='body'),
}

/**
  * ## Precautions
  * This operation is applicable only for elastic clusters of 32 cores or more.
  *
 */
async function createDBResourceGroup(request: CreateDBResourceGroupRequest): CreateDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp11q28kvl688****', position='Query'),
  nodeNum?: int32(name='NodeNum', description='The number of nodes. Default value: 0.

*   Each node provides 16 cores and 64 GB memory.
*   The total amount of resources provided by the nodes (number of nodes × 16 cores, number of nodes × 64 GB memory) cannot exceed the total amount of resources in the cluster. Set this parameter to a proper value.', example='2', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', description='The name of the resource group.

*   The name can be up to 255 characters in length.
*   The name must start with a letter or a digit.
*   The name can contain letters, digits, hyphens (\\_), and underscores (\\_).', example='test', position='Query'),
  queryType?: string(name='QueryType', description='The mode in which to execute SQL statements.

*   **batch**

*   **interactive**

> For more information, see [Query execution modes](~~189502~~).', example='interactive', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model CreateDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResourcePoolResponseBody(name='body'),
}

/**
  * This operation is applicable only for elastic clusters of 32 cores or more.
  *
 */
async function createDBResourcePool(request: CreateDBResourcePoolRequest): CreateDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model CreateElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp1d8lbdj22rx****', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', description='Specifies whether the scaling plan takes effect. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay', description='The end date of the scaling plan. Specify the date in the yyyy-MM-dd format.', example='2022-12-09', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', description='The name of the scaling plan.

*   The name must be 2 to 30 characters in length.
*   The name can contain letters, digits, and underscores (\\_).', example='test', position='Query'),
  elasticPlanNodeNum?: int32(name='ElasticPlanNodeNum', description='The number of nodes that are involved in the scaling plan.

*   If ElasticPlanType is set to **worker**, you can set this parameter to 0 or leave this parameter empty.
*   If ElasticPlanType is set to **executorcombineworker** or **executor**, you must set this parameter to a value that is greater than 0.', example='0', position='Query'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay', description='The start date of the scaling plan. Specify the date in the yyyy-MM-dd format.', example='2022-12-02', position='Query'),
  elasticPlanTimeEnd: string(name='ElasticPlanTimeEnd', description='The restoration time of the scaling plan. Specify the time on the hour in the HH:mm:ss format. The interval between the scale-up time and the restoration time cannot be more than 24 hours.', example='10:00:00', position='Query'),
  elasticPlanTimeStart: string(name='ElasticPlanTimeStart', description='The scale-up time of the scaling plan. Specify the time on the hour in the HH:mm:ss format.', example='08:00:00', position='Query'),
  elasticPlanType?: string(name='ElasticPlanType', description='The type of the scaling plan. Valid values:

*   **worker**: scales only elastic I/O resources.
*   **executor**: scales only computing resources.
*   **executorcombineworker** (default): scales both elastic I/O resources and computing resources by proportion.

> 

*   If you want to set this parameter to **executorcombineworker**, make sure that the cluster runs a minor version of 3.1.3.2 or later.

*   If you want to set this parameter to **worker** or **executor**, make sure that the cluster runs a minor version of 3.1.6.1 or later and a ticket is submitted. After your request is approved, you can set this parameter to **worker** or **executor**.', example='worker', position='Query'),
  elasticPlanWeeklyRepeat?: string(name='ElasticPlanWeeklyRepeat', description='The days of the week when you want to execute the scaling plan. Valid values: 0 to 6, which indicates Sunday to Saturday. Separate multiple values with commas (,).', example='1,2,3,4,5', position='Query'),
  elasticPlanWorkerSpec?: string(name='ElasticPlanWorkerSpec', description='The resource specifications that can be scaled up by the scaling plan. Valid values:

*   8 Core 64 GB (default)
*   16 Core 64 GB
*   32 Core 64 GB
*   64 Core 128 GB
*   12 Core 96 GB
*   24 Core 96 GB
*   52 Core 86 GB', example='32 Core 64 GB', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName: string(name='ResourcePoolName', description='The name of the resource group.

> You can call the [DescribeDBResourceGroup](~~466685~~) operation to query the resource group name.', example='realtime', position='Query'),
}

model CreateElasticPlanResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model CreateElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateElasticPlanResponseBody(name='body'),
}

/**
  * ###
  * You can call this operation only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition that have 32 cores or more.
  *
 */
async function createElasticPlan(request: CreateElasticPlanRequest): CreateElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', description='The account of the database.', example='test_accout', position='Query'),
  accountType?: string(name='AccountType', description='*   Normal: standard account
*   Super: privileged account', example='Normal', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1u8c0mgfg58****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1u8c0mgfg58****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: int32(name='TaskId', description='The task ID.', example='421693038'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

/**
  * *   Subscription clusters cannot be deleted by using API operations. After expiration, subscription clusters are automatically released. If you no longer need a cluster, you can submit a request to unsubscribe from the cluster in the Billing Management console. For more information about cluster refunds, see [Refund policy](~~471477~~).
  * *   After you delete a cluster, resources of the cluster are immediately released, and data of the cluster is no longer retained and cannot be recovered. Proceed with caution.
  *
 */
async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName: string(name='GroupName', description='The name of the resource group.', example='test_group', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResourceGroupResponseBody(name='body'),
}

/**
  * ## Precautions
  * *   This operation is applicable only for elastic clusters of 32 cores or more.
  * *   The default resource group USER_DEFAULT cannot be deleted.
  *
 */
async function deleteDBResourceGroup(request: DeleteDBResourceGroupRequest): DeleteDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1r053byu48p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', description='The name of the resource group.', example='test_group', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResourcePoolResponseBody(name='body'),
}

/**
  * **Precautions**
  * *   This operation is available only for AnalyticDB for MySQL clusters in elastic mode for Cluster Edition that have 32 cores or more.
  * *   The default resource group USER_DEFAULT cannot be deleted.
  *
 */
async function deleteDBResourcePool(request: DeleteDBResourcePoolRequest): DeleteDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model DeleteElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', description='The name of the elastic plan.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteElasticPlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteElasticPlanResponseBody(name='body'),
}

async function deleteElasticPlan(request: DeleteElasticPlanRequest): DeleteElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', description='The account of the database.', example='test_accout', position='Query'),
  accountType?: string(name='AccountType', description='*   Normal: standard account
*   Super: privileged account', example='Normal', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accountList?: {
    DBAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription', description='The description of the account.'),
      accountName?: string(name='AccountName', description='The name of the account.', example='test1'),
      accountStatus?: string(name='AccountStatus', description='The status of the account.

*   Creating: The account is being created.
*   Available: The account is available.
*   Deleting: The account is being deleted.', example='Available'),
      accountType?: string(name='AccountType', description='*   Normal: standard account
*   Super: privileged account', example='Normal'),
    }
  ](name='DBAccount')
  }(name='AccountList', description='The list of database accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64E37E6F-C363-41F3-867A-70EF5DC60EA4'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdviceServiceEnabledRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-2ze0vp0j6t3to****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeAdviceServiceEnabledResponseBody = {
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **Success** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='[Advisor] Advisor feature is not available for instance: am-2ze0vp0j6t3to****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E031AABF-BD56-5966-A063-4283EF18DB45'),
  result?: boolean(name='Result', description='Indicates whether the suggestion feature is enabled. Valid values:

*   **True**: The suggestion feature is enabled.
*   **False**: The suggestion feature is disabled.', example='False'),
}

model DescribeAdviceServiceEnabledResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAdviceServiceEnabledResponseBody(name='body'),
}

async function describeAdviceServiceEnabled(request: DescribeAdviceServiceEnabledRequest): DescribeAdviceServiceEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdviceServiceEnabled', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllAccountsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAllAccountsResponseBody = {
  accountList?: [ 
    {
      user?: string(name='User', description='The name of the account.', example='rdsdt_dts_adb'),
    }
  ](name='AccountList', description='The list of accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeAllAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllAccountsResponseBody(name='body'),
}

async function describeAllAccounts(request: DescribeAllAccountsRequest): DescribeAllAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database.', example='adb_demo', position='Query'),
  tableName: string(name='TableName', description='The name of the table.', example='test', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**
*   **false**', example='true'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='id'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1xxxxxxxx47'),
      primaryKey?: boolean(name='PrimaryKey', description='Indicates whether the column is the primary key of the table. Valid values:

*   **true**
*   **false**', example='false'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
      type?: string(name='Type', description='The data type of the column.', example='bigint'),
    }
  ](name='Column')
  }(name='Columns', description='The queried columns.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1xxxxxxxx47'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
    }
  ](name='Schema')
  }(name='Schemas', description='The queried databases.'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1xxxxxxxx47'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
    }
  ](name='Table')
  }(name='Tables', description='The queried tables.'),
}

model DescribeAllDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppliedAdvicesRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-uf6g8w25jacm7****', position='Query'),
  endTime?: long(name='EndTime', description='The end date of the time range to query. Specify the date in the yyyyMMdd format. The date must be in UTC.', example='20220824', position='Query'),
  lang?: string(name='Lang', description='The display language of the suggestion. Default value: zh. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The start date of the time range to query. Specify the date in the yyyyMMdd format. The date must be in UTC.', example='20220811', position='Query'),
}

model DescribeAppliedAdvicesResponseBody = {
  items?: [ 
    {
      adviceId?: string(name='AdviceId', description='The suggestion ID.', example='7417db9c-914d-43f3-a123-4d0e448f****'),
      benefit?: string(name='Benefit', description='The benefit of the suggestion.'),
      buildSQL?: string(name='BuildSQL', description='The SQL statement used to execute the BUILD task.', example='build table `schema1`.`table1`'),
      jobStatus?: string(name='JobStatus', description='The state of the suggestion execution task.

Valid values:

*   **SUCCEED**
*   **FAILED**', example='SUCCEED'),
      pageNumber?: long(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
      pageSize?: long(name='PageSize', description='The number of entries returned per page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30'),
      rollbackSQL?: string(name='RollbackSQL', description='The SQL statement used to roll back the suggestion.', example='alter table `schema1`.`table1` add key col1_1_idx(col1)'),
      SQL?: string(name='SQL', description='The SQL statement used to apply the suggestion.', example='alter table `schema1`.`table1` drop key col1_1_idx'),
      submitStatus?: string(name='SubmitStatus', description='The submission state of the suggestion.

Valid values:

*   **SUCCEED**
*   **FAILED**', example='SUCCEED'),
      submitTime?: string(name='SubmitTime', description='The time when the suggestion was submitted. The time follows the yyMMddHHmm format. The time is displayed in UTC.', example='2208131600'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned. The value must be an integer that is greater than or equal to 0. Default value: 0.', example='1'),
    }
  ](name='Items', description='Details of the suggestions.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='84489769-3065-5A28-A4CB-977CD426F1C3'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The value must be an integer that is greater than or equal to 0. Default value: 0.', example='1'),
}

model DescribeAppliedAdvicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppliedAdvicesResponseBody(name='body'),
}

async function describeAppliedAdvices(request: DescribeAppliedAdvicesRequest): DescribeAppliedAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppliedAdvices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogConfigRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-t4nj8619bz2w3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAuditLogConfigResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus', description='The status of SQL audit. Valid values:

*   **on**: SQL audit is enabled.
*   **off**: SQL audit is disabled.', example='on'),
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-t4nj8619bz2w3****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0983B43-B2EC-536A-8791-142B5CF1E9B6'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL clusters within a region.', example='am-t4nj8619bz2w3****', position='Query'),
  DBName?: string(name='DBName', description='The name of the database on which you want to execute the SQL statement.', example='adb_demo', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

> 

*   The end time must be later than the start time.

*   The maximum time range that can be specified is 24 hours.', example='2022-01-23T22:18Z', position='Query'),
  hostAddress?: string(name='HostAddress', description='The IP address and port number of the client that is used to execute the SQL statement.', example='100.104.XX.XX:43908', position='Query'),
  order?: string(name='Order', description='The order in which specified fields are sorted. Specify this parameter as an ordered JSON array that consists of the Field and Type fields.

*   Field specifies the field that is used to sort the retrieved entries. Valid values:

    *   HostAddress: the IP address of the client that is used to connect to the database.
    *   Succeed: specifies whether the SQL statement is successfully executed.
    *   TotalTime: the total amount of time that is consumed to execute the SQL statement.
    *   DBName: the name of the database on which the SQL statement is executed.
    *   SQLType: the type of the SQL statement.
    *   User: the username that is used to execute the SQL statement.
    *   ExecuteTime: the time to start executing the SQL statement.

*   Type specifies the sorting order. Valid values:

    *   Desc: descending order.
    *   Asc: ascending order.', example='[{"Field":"ExecuteTime","Type":"Desc"},{"Field":"HostAddress","Type":"Asc"}]', position='Query'),
  orderType?: string(name='OrderType', description='The sorting order of the retrieved entries. Valid values:

*   **asc**: sorts the retrieved entries by time in ascending order.
*   **desc**: sorts the retrieved entries by time in descending order.', example='asc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value is an integer that is greater than 0. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **10**
*   **30**
*   **50**
*   **100**

> If you do not specify this parameter, the value 10 is used.', example='10', minimum=10, maximum=100, position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keywords that are included in the SQL statement to query.', example='adb', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values:

*   **DELETE**
*   **SELECT**
*   **UPDATE**
*   **INSERT_INTO_SELECT**
*   **ALTER**
*   **DROP**
*   **INSERT**

> You can query only a single type of SQL statements at a time. If this parameter is left empty, the **SELECT** SQL statements are queried.', example='SELECT', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

> SQL audit logs can be queried only when SQL audit is enabled. Only SQL audit logs within the last 30 days can be queried. If SQL audit was disabled and re-enabled, only SQL audit logs from the time when SQL audit was re-enabled can be queried.', example='2022-01-23T02:18Z', position='Query'),
  succeed?: string(name='Succeed', description='Specifies whether the execution of the SQL statement succeeds. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  user?: string(name='User', description='The name of the user who executed the SQL statement.', example='test_user', position='Query'),
}

model DescribeAuditLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-t4nj8619bz2w3****'),
  items?: [ 
    {
      connId?: string(name='ConnId', description='This parameter is unavailable.', example='None'),
      DBName?: string(name='DBName', description='The name of the database on which the SQL statement was executed.', example='adb_test'),
      executeTime?: string(name='ExecuteTime', description='The start time of the execution of the SQL statement. The time is displayed in the ISO 8601 standard in the yyyy-MM-dd HH:mm:ss format. The time must be in UTC.', example='2022-01-23 16:05:08'),
      hostAddress?: string(name='HostAddress', description='The IP address and port number of the client that is used to execute the SQL statement.', example='100.104.XX.XX:43908'),
      processID?: string(name='ProcessID', description='The task ID.', example='202106081752021720161662490345362390'),
      SQLText?: string(name='SQLText', description='Details of the SQL statement.', example='SELECT * FROM tb_courses'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement.', example='SELECT'),
      succeed?: string(name='Succeed', description='Indicates whether the SQL statement was successfully executed. Valid values:

*   **true**
*   **false**', example='true'),
      totalTime?: string(name='TotalTime', description='The amount of time that is consumed to execute the SQL statement. Unit: milliseconds.', example='216'),
      user?: string(name='User', description='The name of the user who executed the SQL statement.', example='test_user'),
    }
  ](name='Items', description='The queried SQL audit logs.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='8A564B7F-8C00-43C0-8EC5-919FBB70573'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeAuditLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogRecordsResponseBody(name='body'),
}

/**
  * Before you call the DescribeAuditLogRecords operation to query the SQL audit logs of an AnalyticDB for MySQL cluster, you must enable SQL audit for the cluster. You can call the [DescribeAuditLogConfig](~~190628~~) operation to query the status of SQL audit. If SQL audit is disabled, you can call the [ModifyAuditLogConfig](~~190629~~) operation to enable SQL audit.
  * SQL audit logs can be queried only when SQL audit is enabled. Only SQL audit logs within the last 30 days can be queried. If SQL audit was disabled and re-enabled, only SQL audit logs from the time when SQL audit was re-enabled can be queried.
  *
 */
async function describeAuditLogRecords(request: DescribeAuditLogRecordsRequest): DescribeAuditLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoRenewAttributeRequest {
  DBClusterIds: string(name='DBClusterIds', description='The ID of the cluster.

Separate multiple clusters with commas (,).', example='am-bp11q28kvl688****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0.

Default value: 1', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30
*   50
*   100

Default value: 30', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-4690g37929****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAutoRenewAttributeResponseBody = {
  items?: {
    autoRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Indicates whether auto-renewal is enabled for the cluster. Valid values:

*   **true**: Auto-renewal is enabled.
*   **false**: Auto-renewal is disabled.', example='true'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp11q28kvl688****'),
      duration?: int32(name='Duration', description='The renewal period.', example='1'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Valid values:

*   **Year**
*   **Month**', example='Year'),
      regionId?: string(name='RegionId', description='The region ID of the cluster.', example='cn-hangzhou'),
      renewalStatus?: string(name='RenewalStatus', description='The renewal status of the cluster. Valid values:

*   **AutoRenewal**: The cluster is automatically renewed.
*   **Normal**: The cluster is manually renewed. Before the cluster expires, the system sends you a reminder by SMS message.
*   **NotRenewal**: The cluster is not renewed. Three days before the cluster expires, the system sends you a reminder by SMS message to remind you that the cluster is not renewed. However, the system does not send you a reminder when the cluster expires.', example='AutoRenewal'),
    }
  ](name='AutoRenewAttribute')
  }(name='Items', description='The renewal information of the cluster.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='20'),
}

model DescribeAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoRenewAttributeResponseBody(name='body'),
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableAdvicesRequest {
  adviceDate: long(name='AdviceDate', description='The date when the suggestion is generated. Specify the date in the yyyyMMdd format. The date must be in UTC.', example='20221124', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-bp198m028ih55****', position='Query'),
  lang: string(name='Lang', description='The display language of the suggestion. Default value: zh. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh', position='Query'),
  pageNumber: long(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries to return on each page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeAvailableAdvicesResponseBody = {
  items?: [ 
    {
      adviceDate?: string(name='AdviceDate', description='The date when the suggestion was generated. The date follows the yyyyMMdd format. The date is displayed in UTC.', example='20221124'),
      adviceId?: string(name='AdviceId', description='The suggestion ID.', example='dcd04135-0925-4aed-a5a7-e7d92cb1****'),
      adviceType?: string(name='AdviceType', description='The type of the suggestion. Valid values:

*   **Index**: index optimization
*   **Tiering**: hot and cold data optimization', example='Index'),
      benefit?: string(name='Benefit', description='The benefit of the suggestion.'),
      pageNumber?: long(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
      pageSize?: long(name='PageSize', description='The number of entries returned per page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30'),
      reason?: string(name='Reason', description='The reason why the suggestion was generated.'),
      SQL?: string(name='SQL', description='The SQL statement used to apply the suggestion.', example='alter table `schema1`.`table1` drop key col1_1_idx'),
      totalCount?: long(name='TotalCount', description='The total number of entries returned. The value must be an integer that is greater than or equal to 0. Default value: 0.', example='30'),
    }
  ](name='Items', description='Details of the suggestions.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='96A55627-28E9-5E47-B8F6-D786BE551349'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The value must be an integer that is greater than or equal to 0. Default value: 0.', example='30'),
}

model DescribeAvailableAdvicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableAdvicesResponseBody(name='body'),
}

async function describeAvailableAdvices(request: DescribeAvailableAdvicesRequest): DescribeAvailableAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableAdvices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported mode. Valid values:

*   **flexible**: elastic mode
*   **reserver**: reserved mode', example='zh-CN', position='Query'),
  chargeType?: string(name='ChargeType', description='The resources available in the supported modes.', example='PostPaid', position='Query'),
  DBClusterVersion?: string(name='DBClusterVersion', example='3.0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The resources available in the zones.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZoneList?: [ 
    {
      supportedComputeResource?: [ string ](name='SupportedComputeResource'),
      supportedMode?: [ 
        {
          mode?: string(name='Mode', description='N/A', example='flexible'),
          supportedSerialList?: [ 
            {
              serial?: string(name='Serial', description='The step size.', example='mixed_storage'),
              supportedFlexibleResource?: [ 
                {
                  storageType?: string(name='StorageType', description='The maximum number of EIUs.', example='hdd'),
                  supportedComputeResource?: [ string ](name='SupportedComputeResource'),
                  supportedElasticIOResource?: {
                    maxCount?: string(name='MaxCount', example='200'),
                    minCount?: string(name='MinCount', example='0'),
                    step?: string(name='Step', example='1'),
                  }(name='SupportedElasticIOResource'),
                  supportedStorageResource?: [ string ](name='SupportedStorageResource'),
                }
              ](name='SupportedFlexibleResource', description='The minimum number of EIUs.'),
              supportedInstanceClassList?: [ 
                {
                  instanceClass?: string(name='InstanceClass', example='C32'),
                  supportedExecutorList?: [ 
                    {
                      nodeCount?: {
                        maxCount?: string(name='MaxCount'),
                        minCount?: string(name='MinCount'),
                        step?: string(name='Step'),
                      }(name='NodeCount'),
                    }
                  ](name='SupportedExecutorList'),
                  supportedNodeCountList?: [ 
                    {
                      nodeCount?: {
                        maxCount?: string(name='MaxCount', example='200'),
                        minCount?: string(name='MinCount', example='1'),
                        step?: string(name='Step', example='1'),
                      }(name='NodeCount'),
                      storageSize?: [ string ](name='StorageSize'),
                    }
                  ](name='SupportedNodeCountList'),
                  tips?: string(name='Tips', example='C32'),
                }
              ](name='SupportedInstanceClassList'),
            }
          ](name='SupportedSerialList', description='The available elastic I/O units (EIUs).'),
        }
      ](name='SupportedMode', description='The available computing resources.'),
      supportedStorageResource?: [ string ](name='SupportedStorageResource'),
      zoneId?: string(name='ZoneId', description='The storage type. Valid values:

*   **hdd**
*   **ssd**', example='cn-hangzhou-h'),
    }
  ](name='AvailableZoneList', description='The resources available in elastic mode.'),
  regionId?: string(name='RegionId', description='The resources available in the supported editions.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The supported edition. Valid values:

*   **basic**: Basic Edition
*   **cluster**: Cluster Edition
*   **mixed_storage**: elastic mode for Cluster Edition', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained.', example='7'),
  enableBackupLog?: string(name='EnableBackupLog', description='Specifies whether to enable the origin protocol policy.

*   true: enabled
*   false: disabled', example='true'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod', description='The number of days for which log backup files are retained.', example='7'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:

*   Monday
*   Tuesday
*   Wednesday
*   Thursday
*   Friday
*   Saturday
*   Sunday', example='Tuesday,Friday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup time. Specify the time in the HH:mmZ-HH:mmZ format.', example='15:00Z-16:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set.', example='32732****', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp18934i73vb5****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC. The end time must be later than the start time.', example='2022-06-02T16:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2022-06-01T16:00Z', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', description='The end time of the backup.', example='2022-06-02T16:00Z'),
      backupId?: string(name='BackupId', description='The ID of the backup set.', example='32732****'),
      backupMethod?: string(name='BackupMethod', description='The backup method. Only Snapshot is returned.', example='Snapshot'),
      backupSize?: int32(name='BackupSize', description='The backup size. Unit: bytes.', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', description='The start time of the backup.', example='2022-06-01T16:00Z'),
      backupType?: string(name='BackupType', description='The backup type. Valid values:

*   **FullBackup**
*   **IncrementalBackup**', example='FullBackup'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp18934i73vb5****'),
    }
  ](name='Backup')
  }(name='Items', description='The queried backup sets.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='300'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColumnsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database.', example='adb_demo', position='Query'),
  tableName: string(name='TableName', description='The name of the table.', example='test', position='Query'),
}

model DescribeColumnsResponseBody = {
  items?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn', description='Indicates whether the columns are auto-incremented.', example='true'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='id'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47'),
      primaryKey?: boolean(name='PrimaryKey', description='Indicates whether the column is a primary key.', example='false'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
      type?: string(name='Type', description='The data type of the column.', example='bigint'),
    }
  ](name='Column')
  }(name='Items', description='The list of columns.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColumns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeComputeResourceRequest {
  DBClusterId?: string(name='DBClusterId', position='Query'),
  DBClusterVersion?: string(name='DBClusterVersion', position='Query'),
  migrate?: boolean(name='Migrate', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeComputeResourceResponseBody = {
  computeResource?: [ 
    {
      displayValue?: string(name='DisplayValue', description='The specifications of computing resources displayed in the console.'),
      realValue?: string(name='RealValue', description='The actual specifications of computing resources.', example='8 Core 32 GB'),
    }
  ](name='ComputeResource', description='Details of computing resource specifications.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEAW'),
}

model DescribeComputeResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeComputeResourceResponseBody(name='body'),
}

async function describeComputeResource(request: DescribeComputeResourceRequest): DescribeComputeResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeComputeResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConnectionCountRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the details of all AnalyticDB for MySQL clusters within a specific region, including cluster IDs.', example='am-bp1jj9xqft1po****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeConnectionCountRecordsResponseBody = {
  accessIpRecords?: [ 
    {
      accessIp?: string(name='AccessIp', description='The IP address of the client used to connect to the cluster.', example='42.120.XX.XX'),
      count?: long(name='Count', description='The number of connections.', example='1'),
    }
  ](name='AccessIpRecords', description='Details of the client IP addresses.'),
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1jj9xqft1po****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='562C7F89-FBE6-4A04-AAAA-7EBC25******'),
  userRecords?: [ 
    {
      count?: long(name='Count', description='The number of connections.', example='1'),
      user?: string(name='User', description='The name of the user used to connect to the cluster.', example='test'),
    }
  ](name='UserRecords', description='Details of the users.'),
}

model DescribeConnectionCountRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionCountRecordsResponseBody(name='body'),
}

async function describeConnectionCountRecords(request: DescribeConnectionCountRecordsRequest): DescribeConnectionCountRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConnectionCountRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAccessWhiteListRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  items?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', description='The attribute of the whitelist group. It is empty by default.

>  The groups with hidden attribute are not displayed in the console. The groups with hidden attribute are used to access DTS and PolarDB-X.', example='hidden'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName', description='The name of the IP address whitelist.

*   The name of the IP address whitelist group must be 2 to 32 characters in length and can contain lowercase letters, digits, and underscores (\\_). The name must start with a lowercase letter and end with a digit or lowercase letter.
*   You can create up to 50 whitelists for a cluster.', example='test'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses in an IP address whitelist. A maximum of 1,000 IP addresses can be returned. These addresses are separated with commas (,).', example='127.0.0.1'),
    }
  ](name='IPArray')
  }(name='Items', description='An array that consists of the information of IP whitelists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp111m2cfrdl1****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAttributeResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category', description='The edition of the cluster. Valid values:

*   **BASIC**: reserved mode for Basic Edition.
*   **CLUSTER**: reserved mode for Cluster Edition.
*   **MIXED_STORAGE**: elastic mode for Cluster Edition.

> For more information about cluster editions, see [Editions](~~205001~~).', example='MIXED_STORAGE'),
      commodityCode?: string(name='CommodityCode', description='The billing method of the cluster. Valid values:

*   **ads**: pay-as-you-go.
*   **ads_pre**: subscription.', example='ads'),
      computeResource?: string(name='ComputeResource', description='The specifications of computing resources that are used by the cluster in elastic mode. The increase of computing resources can speed up queries. You can adjust the value of this parameter to scale the cluster.', example='8Core32GB'),
      connectionString?: string(name='ConnectionString', description='The Virtual Private Cloud (VPC) endpoint of the cluster.', example='am-bp111m2cfrdl1****.ads.aliyuncs.com'),
      creationTime?: string(name='CreationTime', description='The time when the cluster was created. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-04-01T09:50:18Z'),
      DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='adb_test'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp111m2cfrdl1****'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType', description='The network type of the cluster. **VPC** is returned.', example='vpc'),
      DBClusterStatus?: string(name='DBClusterStatus', description='The state of the cluster. For more information, see [Cluster states](~~143075~~).', example='Running'),
      DBClusterType?: string(name='DBClusterType', description='The type of the cluster. Valid values:

*   **Common**: common cluster.
*   **RDS_ANALYSIS**: MySQL analytic instance.', example='Common'),
      DBNodeClass?: string(name='DBNodeClass', description='The instance type of the cluster.', example='E8'),
      DBNodeCount?: long(name='DBNodeCount', description='The number of node groups.', example='1'),
      DBNodeStorage?: long(name='DBNodeStorage', description='The storage capacity of the cluster. Unit: GB.', example='300'),
      DBVersion?: string(name='DBVersion', description='The version of the database engine. **3.0** is returned.', example='3.0'),
      diskPerformanceLevel?: string(name='DiskPerformanceLevel', description='The ESSD performance level.', example='PL1'),
      diskType?: string(name='DiskType', description='The disk type of the cluster. Valid values:

*   **local_ssd**: local disk.
*   **cloud**: basic disk.
*   **cloud_ssd**: standard SSD.
*   **cloud_efficiency**: ultra disk.
*   **cloud_essd**: PL1 enhanced SSD (ESSD).
*   **cloud_essd2**: PL2 ESSD.
*   **cloud_essd3**: PL3 ESSD.

> For more information about ESSDs, see [ESSD specifications](~~122389~~).', example='cloud_essd'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the Data Transmission Service (DTS) synchronization task. This parameter is returned only for MySQL analytic instances.', example='dtsb1hp3790****'),
      elasticIOResource?: int32(name='ElasticIOResource', description='The number of elastic I/O units (EIUs).', example='2'),
      elasticIOResourceSize?: string(name='ElasticIOResourceSize', description='The single-node specifications of an EIU. Valid values:

*   8Core64GB: If this value is returned, an EIU of the cluster has 24 cores and 192 GB memory.
*   12Core96GB: If this value is returned, an EIU of the cluster has 36 cores and 288 GB memory.', example='8Core64GB'),
      enableAirflow?: boolean(name='EnableAirflow', description='Indicates whether an Airflow cluster was created. Valid values:

*   **true**
*   **false**', example='true'),
      enableSpark?: boolean(name='EnableSpark', description='Indicates whether a Spark cluster was created. Valid values:

*   **true**
*   **false**', example='false'),
      engine?: string(name='Engine', description='The engine of the cluster. **AnalyticDB** is returned.', example='AnalyticDB'),
      engineVersion?: string(name='EngineVersion', description='The minor version of the cluster.', example='3.1.1.9'),
      executorCount?: string(name='ExecutorCount', description='The number of compute nodes that are used by the cluster in elastic mode.', example='1'),
      expireTime?: string(name='ExpireTime', description='The time when the cluster expires. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC. Example: *2999-09-08T16:00:00Z*.

> 

*   If the billing method of the cluster is subscription, the actual expiration time is returned.

*   If the billing method of the cluster is pay-as-you-go, **2999-09-08T16:00:00Z** is returned.', example='2999-09-08T16:00:00Z'),
      expired?: string(name='Expired', description='Indicates whether the cluster has expired. Valid values:

*   **true**
*   **false**', example='false'),
      innerIp?: string(name='InnerIp', description='The public IP address.', example='10.1.XX.XX'),
      innerPort?: string(name='InnerPort', description='The public port number.', example='3306'),
      kmsId?: string(name='KmsId', description='The ID of the key that is used to encrypt disk data.

> This parameter is returned only when disk encryption is enabled.', example='e1935511-cf88-1123-a0f8-1be8d251****'),
      lockMode?: string(name='LockMode', description='The lock mode of the cluster. Valid values:

*   **Unlock**: The cluster is not locked.
*   **ManualLock**: The cluster is manually locked.
*   **LockByExpiration**: The cluster is automatically locked due to cluster expiration.
*   **LockByRestoration**: The cluster is automatically locked due to cluster restoration.
*   **LockByDiskQuota**: The cluster is automatically locked when it has used 90% of its storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the cluster is locked.

> This parameter is returned only when the cluster was locked. The value is **instance_expire**.', example='instance_expired'),
      maintainTime?: string(name='MaintainTime', description='The maintenance window of the cluster. The window is in the *HH:mmZ-HH:mmZ* format. The time is displayed in UTC. Example: *04:00Z-05:00Z*, which indicates that routine maintenance can be performed from 04:00 to 05:00.

> For more information about maintenance windows, see [Configure a maintenance window](~~122569~~).', example='04:00Z-05:00Z'),
      mode?: string(name='Mode', description='The mode of the cluster. Valid values:

*   **flexible**: elastic mode.
*   **reserver**: reserved mode.

> For more information about cluster modes, see [Editions](~~205001~~).', example='flexible'),
      payType?: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid'),
      port?: int32(name='Port', description='The port number that is used to connect to the cluster.', example='3306'),
      rdsInstanceId?: string(name='RdsInstanceId', description='The ID of the ApsaraDB RDS instance from which data is synchronized to the cluster. This parameter is returned only for MySQL analytic instances.', example='rm-bp837jsdp2****'),
      regionId?: string(name='RegionId', description='The region ID of the cluster.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyiu4ekp****'),
      storageResource?: string(name='StorageResource', description='The specifications of storage resources that are used by the cluster in elastic mode. These resources are used to read and write data. You can increase the value of this parameter to improve the read and write performance of the cluster.', example='8Core32GB'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.

> You can call the [TagResources](~~179253~~) operation to add a tag to the cluster.', example='tag1'),
          value?: string(name='Value', description='The value of the tag.', example='test1'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the cluster.'),
      userENIStatus?: boolean(name='UserENIStatus', description='Indicates whether Elastic Network Interface (ENI) is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId', description='The ID of the cluster that resides in the VPC.', example='am-bp111m2cfrdl1****-controller'),
      VPCId?: string(name='VPCId', description='The VPC ID of the cluster.', example='vpc-bp13h7uzhulpuxvnp****'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the cluster.', example='vsw-bp1syh8vvw8yech7n****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the cluster.', example='cn-hangzhou-h'),
    }
  ](name='DBCluster')
  }(name='Items', description='The information about the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2895BB82-B2C1-408E-AA73-DB8D59******'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterHealthStatusRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1d8lbdj22rx****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeDBClusterHealthStatusResponseBody = {
  cs?: {
    activeCount?: long(name='ActiveCount', description='The number of healthy access nodes.', example='2'),
    expectedCount?: long(name='ExpectedCount', description='The total number of access nodes.', example='2'),
    riskCount?: long(name='RiskCount', description='The number of risky access nodes.', example='0'),
    status?: string(name='Status', description='The health state of access nodes. Valid values:

*   **RISK**: risky
*   **NORMAL**: healthy
*   **UNAVAILABLE**: unavailable', example='NORMAL'),
    unavailableCount?: long(name='UnavailableCount', description='The number of unavailable access nodes.', example='0'),
  }(name='CS', description='Health state details of access nodes.'),
  executor?: {
    activeCount?: long(name='ActiveCount', description='The number of healthy compute node groups.', example='2'),
    expectedCount?: long(name='ExpectedCount', description='The total number of compute node groups.', example='2'),
    riskCount?: long(name='RiskCount', description='The number of risky compute node groups.', example='0'),
    status?: string(name='Status', description='The health state of compute node groups. Valid values:

*   **RISK**: risky
*   **NORMAL**: healthy
*   **UNAVAILABLE**: unavailable', example='NORMAL'),
    unavailableCount?: long(name='UnavailableCount', description='The number of unavailable compute node groups.', example='0'),
  }(name='Executor', description='Health state details of compute node groups.'),
  instanceStatus?: string(name='InstanceStatus', description='The health state of the cluster. Valid values:

*   **RISK**: risky

*   **NORMAL**: healthy

*   **UNAVAILABLE**: unavailable

> If the health states of access nodes, compute node groups, and storage node groups are all **healthy** and the cluster is detected to be alive, the health state of the cluster is **healthy**. If the preceding three health states include **risky**, the health state of the cluster is **risky**. If the preceding three health states include **unavailable**, the health state of the cluster is **unavailable**.', example='NORMAL'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEA'),
  worker?: {
    activeCount?: long(name='ActiveCount', description='The number of healthy storage node groups.', example='2'),
    expectedCount?: long(name='ExpectedCount', description='The total number of storage node groups.', example='2'),
    riskCount?: long(name='RiskCount', description='The number of risky storage node groups.', example='0'),
    status?: string(name='Status', description='The health state of storage node groups. Valid values:

*   **RISK**: risky
*   **NORMAL**: healthy
*   **UNAVAILABLE**: unavailable', example='NORMAL'),
    unavailableCount?: long(name='UnavailableCount', description='The number of unavailable storage node groups.', example='0'),
  }(name='Worker', description='Health state details of storage node groups.'),
}

model DescribeDBClusterHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterHealthStatusResponseBody(name='body'),
}

async function describeDBClusterHealthStatus(request: DescribeDBClusterHealthStatusRequest): DescribeDBClusterHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterNetInfoRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterNetInfoResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType', description='The network type of the cluster.', example='VPC'),
  items?: {
    address?: [ 
    {
      connectionString?: string(name='ConnectionString', description='The endpoint of the cluster.', example='am-bpxxxxxxxx.ads.aliyuncs.com'),
      connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the cluster endpoint.', example='am-bpxxxxxxxx89k51380'),
      IPAddress?: string(name='IPAddress', description='The IP address.', example='192.168.x.x'),
      netType?: string(name='NetType', description='The network type of the endpoint. Valid values:

*   **Public**: public endpoint
*   **VPC**: Virtual Private Cloud (VPC) endpoint', example='VPC'),
      port?: string(name='Port', description='The port number that is used to connect to the cluster.', example='3306'),
      VPCId?: string(name='VPCId', description='The ID of the VPC.

>  This parameter is empty when Public is returned for NetType.', example='vpc-xxxxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

>  This parameter is empty when Public is returned for NetType.', example='vsw-xxxxxx'),
    }
  ](name='Address')
  }(name='Items', description='The network information of the cluster.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeDBClusterNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNetInfoResponseBody(name='body'),
}

async function describeDBClusterNetInfo(request: DescribeDBClusterNetInfoRequest): DescribeDBClusterNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL Data Lakehouse Edition (V3.0) clusters within a region, including cluster IDs.', example='am-************', position='Query'),
  endTime: string(name='EndTime', description='The end time of the query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

> The end time must be later than the start time. The maximum time range that can be specified is two days.', example='2021-05-03T15:01Z', position='Query'),
  key?: string(name='Key', description='The performance metrics to be queried. Separate multiple values with commas (,). Valid values:

*   CPU

    *   **AnalyticDB_CPU**: the average CPU utilization.

*   Connections

    *   **AnalyticDB_Connections**: the number of database connections.

*   Write

    *   **AnalyticDB_TPS**: the write transactions per second (TPS).
    *   **AnalyticDB_InsertRT**: the write response time.
    *   **AnalyticDB_InsertBytes**: the write throughout.

*   Update

    *   **AnalyticDB_UpdateRT**: the update response time.

*   Delete

    *   **AnalyticDB_DeleteRT**: the delete response time.

*   Query

    *   **AnalyticDB_QPS**: the queries per second (QPS).
    *   **AnalyticDB_QueryRT**: the query response time.
    *   **AnalyticDB_QueryWaitTime**: the query wait time.

*   Disk

    *   **AnalyticDB_IO**: the disk I/O throughput.
    *   **AnalyticDB_IO_UTIL**: the I/O utilization.
    *   **AnalyticDB_IO_WAIT**: the I/O wait time.
    *   **AnalyticDB_IOPS**: the disk input/output operations per second (IOPS).
    *   **AnalyticDB_DiskUsage**: the disk usage.
    *   **AnalyticDB_HotDataDiskUsage**: the disk usage of hot data.
    *   **AnalyticDB_ColdDataDiskUsage**: the disk usage of cold data.

> If you leave this parameter empty, the values of all the preceding performance metrics are returned.', example='AnalyticDB_CPU', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The start time of the query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2021-05-03T15:00Z', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-************'),
  endTime?: string(name='EndTime', description='The end time of the query. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-05-03T15:01:00Z'),
  performances?: [ 
    {
      key?: string(name='Key', description='The name of the performance metric.', example='AnalyticDB_CPU'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the performance metric.', example='worker_avg_cpu_used'),
          values?: [ string ](name='Values', description='The values of the queried performance metrics.'),
        }
      ](name='Series', description='The queried performance metric data.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='%'),
    }
  ](name='Performances', description='The queried performance metrics.'),
  requestId?: string(name='RequestId', description='The request ID.', example='25B56BC7-4978-40B3-9E48-4B7067******'),
  startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-05-03T15:00:00Z'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

/**
  * You can call this operation to query the performance data of a cluster over a time range based on its performance metrics. The data is collected every 30 seconds. This operation allows you to query information about slow queries, such as the SQL query duration, number of scanned rows, and amount of scanned data.
  *
 */
async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterResourcePoolPerformanceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters within a region, including cluster IDs.', example='am-****************', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to monitor the resource group. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2021-06-10T07:01Z', position='Query'),
  key?: string(name='Key', description='The metrics of the resource group. You can enter multiple metrics at the same time to query the monitoring information. Separate multiple metrics with commas (,). Valid values:

*   **AnalyticDB_RP_CPU**: the average CPU utilization. Unit: %.
*   **AnalyticDB_RP_RT**: the query response time (RT). Unit: milliseconds.
*   **AnalyticDB_RP_QPS**: the queries per second (QPS). The value of this parameter must be a numeric value.
*   **AnalyticDB_RP_WaitTime**: the query waiting time. Unit: milliseconds.
*   **AnalyticDB_RP_OriginalNode**: the number of basic nodes in the resource group.
*   **AnalyticDB_RP_ActualNode**: the number of scheduled nodes that are scaled out in the resource group.
*   **AnalyticDB_RP_PlanNode**: the number of scheduled nodes to be scaled out in the resource group.
*   **AnalyticDB_RP_TotalNode**: the total number of nodes in the resource group. Total number of nodes = Number of basic nodes + Number of scheduled nodes that are scaled out.

> 

*   If you leave this parameter empty, the monitoring information about all metrics is returned.

*   For more information about scaling plans, see [Create a resource scaling plan](~~189507~~).', example='AnalyticDB_RP_CPU', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePools?: string(name='ResourcePools', description='The names of the resource groups that you want to query. You can enter multiple names of resource groups. Separate multiple names with commas (,).

> 

*   The value of this parameter is case-insensitive. For example, `USER_DEFAULT` and `user_default` specify the same resource group.

*   If you leave this parameter empty, the monitoring information about the `USER_DEFAULT` resource group is returned.', example='TEST_POOL', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to monitor the resource group. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

> You can view only the monitoring information about the resource groups within the last two days.', example='2021-06-10T07:00Z', position='Query'),
}

model DescribeDBClusterResourcePoolPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-****************'),
  endTime?: string(name='EndTime', description='The end of the time range for monitoring the resource group. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-06-10T07:01:00Z'),
  performances?: [ 
    {
      key?: string(name='Key', description='The metric of the resource group.', example='AnalyticDB_RP_CPU'),
      resourcePoolPerformances?: [ 
        {
          resourcePoolName?: string(name='ResourcePoolName', description='The name of the resource group.', example='test_pool'),
          resourcePoolSeries?: [ 
            {
              name?: string(name='Name', description='The name of the metric.', example='cpu'),
              values?: [ string ](name='Values', description='The value of the metric.'),
            }
          ](name='ResourcePoolSeries', description='The sequential monitoring information about the resource groups.'),
        }
      ](name='ResourcePoolPerformances', description='The queried monitoring information about the resource groups.'),
      unit?: string(name='Unit', description='The unit of the metric value.', example='%'),
    }
  ](name='Performances', description='The queried monitoring information about the metrics.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C7EDB8E4-9769-4233-88C7-DCA4C9******'),
  startTime?: string(name='StartTime', description='The beginning of the time range for monitoring the resource group. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-06-10T07:00:00'),
}

model DescribeDBClusterResourcePoolPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterResourcePoolPerformanceResponseBody(name='body'),
}

/**
  * > You can also view the monitoring information about resource groups within an AnalyticDB for MySQL cluster in elastic mode for Cluster Edition in the form of graphs in the console. For more information, see [View monitoring information](~~188721~~).
  *
 */
async function describeDBClusterResourcePoolPerformance(request: DescribeDBClusterResourcePoolPerformanceRequest): DescribeDBClusterResourcePoolPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterResourcePoolPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterStatusRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call [DescribeRegions](~~143074~~) to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEAU'),
  status?: [ string ](name='Status', description='The states of clusters. Valid values:

*   **Preparing**: The cluster is being prepared.
*   **Creating**: The cluster is being created.
*   **Restoring**: The cluster is being restored from a backup.
*   **Running**: The cluster is running.
*   **Deleting**: The cluster is being deleted.
*   **ClassChanging**: The cluster configurations are being changed.
*   **NetAddressCreating**: A network connection is being created.
*   **NetAddressDeleting**: A network connection is being released.
*   **NetAddressModifying**: A network connection is being modified.
*   **EngineVersionUpgrading**: The engine version is being updated.'),
}

model DescribeDBClusterStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterStatusResponseBody(name='body'),
}

async function describeDBClusterStatus(request: DescribeDBClusterStatusRequest): DescribeDBClusterStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.

*   The description cannot start with `http://` or `https://`.
*   The description must be 2 to 256 characters in length', example='test', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', description='The cluster IDs.

> You can specify the ID of one cluster or IDs of more clusters within the preceding region.', example='am-bp1r053byu48p****', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', description='The state of the cluster. Valid values:

*   **Preparing**: The cluster is being prepared.
*   **Creating**: The cluster is being created.
*   **Restoring**: The cluster is being restored from a backup.
*   **Running**: The cluster is running.
*   **Deleting**: The cluster is being deleted.
*   **ClassChanging**: The cluster specifications are being changed.
*   **NetAddressCreating**: A network connection is being created.
*   **NetAddressDeleting**: A network connection is being deleted.', example='Running', position='Query'),
  DBVersion?: string(name='DBVersion', description='The version of the cluster. Set the value to **3.0**.', example='3.0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the clusters.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-4690g37929XXXX', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N that is added to the cluster. You can use tags to filter clusters. A tag is a key-value pair. You can specify up to 20 tags in one request. The letter N specifies the sequence number of each key-value pair and must be unique. The values of N must be consecutive integers that start from 1. Each value of `Tag.N.Key` is paired with a value of `Tag.N.Value`.

> The tag key can be up to 64 characters in length and cannot start with `aliyun`, `acs:`, `http://`, or `https://`.', example='tag1'),
      value?: string(name='Value', description='The value of tag N that is added to the cluster. You can use tags to filter clusters. A tag is a key-value pair. You can specify up to 20 tags in one request. The letter N specifies the sequence number of each key-value pair and must be unique. The values of N must be consecutive integers that start from 1. Each value of `Tag.N.Key` is paired with a value of `Tag.N.Value`.

> The tag key can be up to 64 characters in length and cannot start with `aliyun`, `acs:`, `http://`, or `https://`.', example='test1'),
    }
  ](name='Tag', description='The tags that are added to the cluster.', position='Query'),
}

model DescribeDBClustersResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category', description='The edition of the cluster. Valid values:

*   **BASIC**: reserved mode for Basic Edition.
*   **CLUSTER**: reserved mode for Cluster Edition.
*   **MIXED_STORAGE**: elastic mode for Cluster Edition.

> For more information about cluster editions, see [Editions](~~205001~~).', example='MIXED_STORAGE'),
      commodityCode?: string(name='CommodityCode', description='The commodity code. **ads** is returned.', example='ads'),
      computeResource?: string(name='ComputeResource', description='The specifications of computing resources that are used in the cluster in elastic mode. The increase of computing resources can speed up queries. You can adjust the value of this parameter to scale the cluster.', example='8Core32GB'),
      connectionString?: string(name='ConnectionString', description='The public endpoint that is used to connect to the cluster.', example='am-bp163885f8q21****.ads.aliyuncs.com'),
      createTime?: string(name='CreateTime', description='The time when the cluster was created. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC. Example: *2021-04-01T09:50:18Z*.', example='2021-04-01T09:50:18Z'),
      DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='adb_test'),
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-bp163885f8q21****'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType', description='The network type of the cluster. **VPC** is returned.', example='vpc'),
      DBClusterStatus?: string(name='DBClusterStatus', description='The state of the cluster. For more information, see [Cluster states](~~143075~~).', example='Running'),
      DBClusterType?: string(name='DBClusterType', description='The type of the cluster. Valid values:

*   **Common**: common cluster.
*   **RDS_ANALYSIS**: MySQL analytic instance.', example='Common'),
      DBNodeClass?: string(name='DBNodeClass', description='The instance type of the cluster.', example='E8'),
      DBNodeCount?: long(name='DBNodeCount', description='The number of node groups.', example='1'),
      DBNodeStorage?: long(name='DBNodeStorage', description='The storage capacity of the cluster. Unit: GB.', example='300'),
      DBVersion?: string(name='DBVersion', description='The version of the database engine. **3.0** is returned.', example='3.0'),
      diskType?: string(name='DiskType', description='The disk type of the cluster. Valid values:

*   **local_ssd**: local disk.
*   **cloud**: basic disk.
*   **cloud_ssd**: standard SSD.
*   **cloud_efficiency**: ultra disk.
*   **cloud_essd**: PL1 enhanced SSD (ESSD).
*   **cloud_essd2**: PL2 ESSD.
*   **cloud_essd3**: PL3 ESSD.

> For more information, see [ESSDs](~~122389~~).', example='cloud_essd'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the Data Transmission Service (DTS) synchronization task. This parameter is returned only for MySQL analytic instances.', example='dtsb1578j90XXXX'),
      elasticIOResource?: int32(name='ElasticIOResource', description='The number of elastic I/O units (EIUs). For more information, see [Use EIUs to scale up storage resources](~~189505~~).

> This parameter is returned only for clusters in elastic mode.', example='0'),
      engine?: string(name='Engine', description='The engine of the cluster. **AnalyticDB** is returned.', example='AnalyticDB'),
      executorCount?: string(name='ExecutorCount', description='The number of compute nodes that are used by the cluster in elastic mode.', example='1'),
      expireTime?: string(name='ExpireTime', description='The time when the cluster expires. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC. Example: *2999-09-08T16:00:00Z*.

> 

*   If the billing method of the cluster is subscription, the actual expiration time is returned.

*   If the billing method of the cluster is pay-as-you-go, **2999-09-08T16:00:00Z** is returned.', example='2999-09-08T16:00:00Z'),
      expired?: string(name='Expired', description='Indicates whether the cluster has expired. Valid values:

*   **true**
*   **false**', example='false'),
      innerIp?: string(name='InnerIp', description='The public IP address of the cluster.', example='10.1.xx.xx'),
      innerPort?: string(name='InnerPort', description='The port number that is used to connect to the cluster.', example='3306'),
      lockMode?: string(name='LockMode', description='The lock mode of the cluster. Valid values:

*   **Unlock**: The cluster is not locked.
*   **ManualLock**: The cluster is manually locked.
*   **LockByExpiration**: The cluster is automatically locked due to cluster expiration.
*   **LockByRestoration**: The cluster is automatically locked due to cluster restoration.
*   **LockByDiskQuota**: The cluster is automatically locked when it has used 90% of its storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the cluster is locked.

> This parameter is returned only when the cluster was locked. **instance_expire** is returned.', example='instance_expired'),
      mode?: string(name='Mode', description='The mode of the cluster. Valid values:

*   **flexible**: elastic mode.
*   **reserver**: reserved mode.

> 

*   For more information about cluster modes, see [Editions](~~205001~~).', example='flexible'),
      payType?: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid'),
      port?: string(name='Port', description='The port number that is used to connect to the cluster. Default value: 3306.', example='3306'),
      rdsInstanceId?: string(name='RdsInstanceId', description='The ID of the ApsaraDB RDS instance from which data is synchronized to the cluster. This parameter is returned only for MySQL analytic instances.', example='rm-bp11q28kvl688****'),
      regionId?: string(name='RegionId', description='The region ID of the cluster.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyiu4ekp****'),
      storageResource?: string(name='StorageResource', description='The specifications of storage resources that are used in the cluster in elastic mode. These resources are used to read and write data. You can increase the value of this parameter to improve the read and write performance of the cluster.', example='8Core32GB'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.

> You can call the [TagResources](~~179253~~) operation to add tags to a cluster.', example='tag1'),
          value?: string(name='Value', description='The tag value.', example='test1'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the cluster.'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId', description='The ID of the cluster that is deployed in the VPC.', example='am-bp163885f8q21****-controller'),
      VPCId?: string(name='VPCId', description='The virtual private cloud (VPC) ID of the cluster.', example='vpc-bp13h7uzhulpuxvnpXXXX'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the cluster.', example='vsw-bp1syh8vvw8yech7nXXXX'),
      zoneId?: string(name='ZoneId', description='The zone ID of the cluster.', example='cn-hangzhou-h'),
    }
  ](name='DBCluster')
  }(name='Items', description='The queried clusters.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the resource group.', example='USER_DEFAULT', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBResourceGroupResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1ub9grke1****'),
  groupsInfo?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the resource group was created.', example='2022-10-09 16:57:35.241'),
      groupName?: string(name='GroupName', description='The name of the resource group.', example='USER_DEFAULT'),
      groupType?: string(name='GroupType', description='The query execution mode. Valid values:

*   **interactive**
*   **batch**

>  For more information, see [Query execution modes](~~189502~~).', example='interactive'),
      groupUsers?: string(name='GroupUsers', description='The database accounts that are associated with the resource group.', example='testb,testc'),
      nodeNum?: int32(name='NodeNum', description='The number of nodes. Each node consumes 16 cores and 64 GB memory.', example='2'),
      updateTime?: string(name='UpdateTime', description='The time when the resource group was updated.', example='2022-11-09 16:57:35.241'),
    }
  ](name='GroupsInfo', description='Details of the resource group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBResourceGroupResponseBody(name='body'),
}

/**
  * ## Precautions
  * This operation is available only for AnalyticDB for MySQL clusters in elastic mode for Cluster Edition that have 32 cores or more.
  *
 */
async function describeDBResourceGroup(request: DescribeDBResourceGroupRequest): DescribeDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp11q28kvl688****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName?: string(name='PoolName', description='The name of the resource group.', example='USER_DEFAULT', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBResourcePoolResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp11q28kvl688****'),
  poolsInfo?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the resource group was created.', example='2022-03-09 16:57:35.241'),
      nodeNum?: int32(name='NodeNum', description='The number of nodes.

>  Each node consumes 16 cores and 64 GB memory.', example='2'),
      poolName?: string(name='PoolName', description='The name of the resource group.', example='USER_DEFAULT'),
      poolUsers?: string(name='PoolUsers', description='The database accounts that are associated with the resource group.', example='testb,testc'),
      queryType?: string(name='QueryType', description='The mode in which SQL statements are executed.

*   **batch**
*   **interactive**

>  For more information, see [Query execution modes](~~189502~~).', example='default_type'),
      updateTime?: string(name='UpdateTime', description='The time when the resource group was updated.', example='2022-03-09 16:57:35.241'),
    }
  ](name='PoolsInfo', description='Details of the resource group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBResourcePoolResponseBody(name='body'),
}

/**
  * This operation is applicable only for elastic clusters of 32 cores or more.
  *
 */
async function describeDBResourcePool(request: DescribeDBResourcePoolRequest): DescribeDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisDimensionsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bt6u59zcmd945****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> 

*   The end time must be later than the start time.

*   The maximum time range that can be specified is 24 hours.', example='1625220213000', position='Query'),
  lang?: string(name='Lang', description='The language of file titles and error messages. Valid values:

*   **zh** (default): simplified Chinese.
*   **en**: English.
*   **ja**: Japanese.
*   **zh-tw**: traditional Chinese.', example='zh', position='Query'),
  queryCondition: string(name='QueryCondition', description='The query condition for SQL statements, which can contain the `Type`, `Value`, and `Min` or `Max` fields. Specify the condition in the JSON format. `Type` specifies the query dimension. Valid values for Type: `maxCost`, `status`, and `cost`. `Value`, `Min`, or `Max` specifies the query range for the dimension. Valid values:

*   `{"Type":"maxCost","Value":"100"}`: queries the top 100 most time-consuming SQL statements. Set `Value` to 100.
*   `{"Type":"status","Value":"finished"}`: queries executed SQL statements. You can set `Value` to `running` to query SQL statements that are being executed. You can also set Value to `failed` to query SQL statements that failed to be executed.
*   `{"Type":"cost","Min":"10","Max":"200"}`: queries SQL statements whose execution durations are in the range of 10 to 200 milliseconds. You can also customize the maximum and minimum execution durations.', example='{"Type":"maxCost","Value":"100"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> Only data within the last 14 days can be queried. If you call this operation to query data that is earlier than 14 days, an empty string is returned.', example='1625220210000', position='Query'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  clientIps?: [ string ](name='ClientIps', description='The source IP addresses.'),
  databases?: [ string ](name='Databases', description='The databases.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E0B56BCD-1BED-30EC-8CAF-1D1E5F******'),
  resourceGroups?: [ string ](name='ResourceGroups', description='The resource groups.'),
  userNames?: [ string ](name='UserNames', description='The usernames.'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisDimensions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisMonitorPerformanceRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp108q1py5r78****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.', example='1671687948000', position='Query'),
  lang?: string(name='Lang', description='The language of file titles and error messages. Default value: zh. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh', position='Query'),
  queryCondition: string(name='QueryCondition', description='The query conditions for SQL statements, which can be a combination of the `Type` and `Value` fields or a combination of the Type, `Min`, and `Max` fields. Specify the conditions in the JSON format. `Type` specifies the query dimension. Valid values for Type: `maxCost`, `status`, and `cost`. `Value`, `Min`, or `Max` specifies the query range for the dimension. Valid values:

*   `{"Type":"maxCost","Value":"100"}`: queries the top 100 most time-consuming SQL statements. Set `Value` to 100.
*   `{"Type":"status","Value":"finished"}`: queries executed SQL statements. You can set `Value` to `running` to query SQL statements that are being executed. You can also set Value to `failed` to query SQL statements that failed to be executed.
*   `{"Type":"cost","Min":"10","Max":"200"}`: queries SQL statements whose execution durations are in the range of 10 to 200 milliseconds. You can also customize the maximum and minimum execution durations.', example='{\\"Type\\":\\"maxCost\\",\\"Value\\":\\"100\\"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-beijing', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.', example='1671684348000', position='Query'),
}

model DescribeDiagnosisMonitorPerformanceResponseBody = {
  performances?: [ 
    {
      cost?: long(name='Cost', description='The total amount of time consumed by the query. Unit: milliseconds.

>  This parameter indicates the sum of `QueuedTime`, `TotalPlanningTime`, and `ExecutionTime`.', example='252'),
      peakMemory?: long(name='PeakMemory', description='The peak memory of the query. Unit: bytes.', example='123'),
      processId?: string(name='ProcessId', description='The ID of the query.

>  You can call the [DescribeProcessList](~~143382~~) operation to query the IDs of queries that are being executed.', example='202210311015270330101470300315153****'),
      rcHost?: string(name='RcHost', description='The IP address of the AnalyticDB for MySQL frontend node on which the SQL statement is executed.', example='192.168.XX.XX'),
      scanRows?: long(name='ScanRows', description='The number of entries scanned.', example='2345'),
      scanSize?: long(name='ScanSize', description='The amount of scanned data. Unit: bytes.', example='123'),
      startTime?: long(name='StartTime', description='The execution start time of the SQL statement. The time is in the UNIX timestamp format. Unit: milliseconds.', example='1669011260000'),
      status?: string(name='Status', description='The state of the SQL statement. Valid values:

*   **running**
*   **finished**
*   **failed**', example='running'),
      userName?: string(name='UserName', description='The database account that is used to submit the query.', example='rpt'),
    }
  ](name='Performances', description='The monitoring information of queries displayed in Gantt charts.'),
  performancesThreshold?: int32(name='PerformancesThreshold', description='The threshold for the number of queries displayed in a Gantt chart. The default value is 10000.

>  A maximum of 10,000 queries can be displayed in a Gantt chart even if more queries exist.', example='10000'),
  performancesTruncated?: boolean(name='PerformancesTruncated', description='Indicates whether all queries are returned. Valid values:

*   true: All queries are returned.
*   false: Only a specified number of queries are returned.', example='false'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0F1AC5FD-16E9-5399-B81F-5AC434B1D9F8'),
}

model DescribeDiagnosisMonitorPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisMonitorPerformanceResponseBody(name='body'),
}

async function describeDiagnosisMonitorPerformance(request: DescribeDiagnosisMonitorPerformanceRequest): DescribeDiagnosisMonitorPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisMonitorPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp', description='The source IP address.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='59.82.xx.xx', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters within a region, including cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  database?: string(name='Database', description='The database on which the SQL statements are executed.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='adb_demo', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> 

*   The end time must be later than the start time.

*   The maximum time range that can be specified is 24 hours.', example='1633017540000', position='Query'),
  keyword?: string(name='Keyword', description='The keyword for the query.', example='select', position='Query'),
  lang?: string(name='Lang', description='The language of file titles and error messages. Valid values:

*   **zh** (default): simplified Chinese.
*   **en**: English.
*   **ja**: Japanese.
*   **zh-tw**: traditional Chinese.', example='zh', position='Query'),
  maxPeakMemory?: long(name='MaxPeakMemory', description='The maximum peak memory of the SQL statements. Unit: bytes.', example='89000000', position='Query'),
  maxScanSize?: long(name='MaxScanSize', description='The maximum scan size of the SQL statements. Unit: bytes.', example='104428198', position='Query'),
  minPeakMemory?: long(name='MinPeakMemory', description='The minimum peak memory of the SQL statements. Unit: bytes.', example='0', position='Query'),
  minScanSize?: long(name='MinScanSize', description='The minimum scan size of the SQL statements. Unit: bytes.', example='0', position='Query'),
  order?: string(name='Order', description='The order in which to sort the retrieved SQL statements by field. Specify this value in the JSON format. The value is an ordered array that uses the order of the input array and contains the `Field` and `Type` fields. Example: `[{"Field":"StartTime", "Type": "desc" }]`. Fields:

*   `Field` specifies the field that is used to sort the retrieved SQL statements. Valid values:

    *   `StartTime`: the start time of the execution.
    *   `Status`: the execution state.
    *   `UserName`: the username.
    *   `Cost`: the execution duration.
    *   `PeakMemory`: the peak memory.
    *   `ScanSize`: the amount of data to be scanned.
    *   `Database`: the name of the database.
    *   `ClientIp`: the source IP address.
    *   `ResourceGroup`: the name of the resource group.
    *   `QueueTime`: the amount of time that is consumed for queuing.
    *   `OutputRows`: the number of output rows.
    *   `OutputDataSize`: the amount of output data.
    *   `ResourceCostRank`: the execution duration rank of operators that are used in the SQL statements. This field takes effect only when `QueryCondition` is set to `{"Type":"status","Value":"running"}`.

*   `Type` specifies the sorting order. Valid values (case-insensitive):

    *   `Desc`: descending order.
    *   `Asc`: ascending order.', example='[{"Field":"StartTime", "Type": "desc" }]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **30**, **50**, and **100**. Default value: 30.', example='30', position='Query'),
  patternId?: string(name='PatternId', description='The ID of the SQL pattern.[](~~321868~~)', example='5575924945138******', position='Query'),
  queryCondition: string(name='QueryCondition', description='The query condition for SQL statements, which can contain the `Type`, `Value`, and `Min` or `Max` fields. Specify the condition in the JSON format. `Type` specifies the query dimension. Valid values for Type: `maxCost`, `status`, and `cost`. `Value`, `Min`, or `Max` specifies the query range for the dimension. Valid values:

*   `{"Type":"maxCost","Value":"100"}`: queries the top 100 most time-consuming SQL statements. Set `Value` to 100.
*   `{"Type":"status","Value":"finished"}`: queries executed SQL statements. You can set `Value` to `running` to query SQL statements that are being executed. You can also set Value to `failed` to query SQL statements that failed to be executed.
*   `{"Type":"cost","Min":"10","Max":"200"}`: queries SQL statements whose execution durations are in the range of 10 to 200 milliseconds. You can also customize the maximum and minimum execution durations.', example='{"Type":"status","Value":"finished"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroup?: string(name='ResourceGroup', description='The resource group to which the SQL statements belong.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='user_default', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> Only data within the last 14 days can be queried.', example='1632931200000', position='Query'),
  userName?: string(name='UserName', description='The username that is used to execute the SQL statements.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='test_user', position='Query'),
}

model DescribeDiagnosisRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  querys?: [ 
    {
      clientIp?: string(name='ClientIp', description='The source IP address.', example='59.82.xx.xx'),
      cost?: long(name='Cost', description='The total execution duration. Unit: milliseconds.

>  This value is the cumulative value of the `QueuedTime`, `TotalPlanningTime`, and `ExecutionTime` parameters.', example='10'),
      database?: string(name='Database', description='The name of the database on which the SQL statement is executed.', example='adb_demo'),
      etlWriteRows?: long(name='EtlWriteRows', description='The number of rows written to the table by an extract, transform, and load (ETL) task.', example='0'),
      executionTime?: long(name='ExecutionTime', description='The execution duration. Unit: milliseconds.', example='6'),
      outputDataSize?: long(name='OutputDataSize', description='The amount of returned data. Unit: bytes.', example='9'),
      outputRows?: long(name='OutputRows', description='The number of rows returned.', example='1'),
      peakMemory?: long(name='PeakMemory', description='The peak memory. Unit: bytes.', example='16648'),
      processId?: string(name='ProcessId', description='The query ID.', example='2021093000414401000000023503151******'),
      queueTime?: long(name='QueueTime', description='The amount of time that is consumed for queuing. Unit: milliseconds.', example='0'),
      rcHost?: string(name='RcHost', description='The IP address and port number of the AnalyticDB for MySQL frontend node on which the SQL statement is executed.', example='10.0.xx.xx:3004'),
      resourceCostRank?: int32(name='ResourceCostRank', description='The execution duration rank of operators that are used in the SQL statement.

> This field is returned only for SQL statements that have the `Status` parameter set to `running`.', example='1'),
      resourceGroup?: string(name='ResourceGroup', description='The resource group to which the SQL statement belongs.', example='user_default'),
      SQL?: string(name='SQL', description='The SQL statement.

> For performance considerations, an SQL statement cannot exceed 5,120 characters in length. Otherwise, the SQL statement is truncated. You can call the [DownloadDiagnosisRecords](~~308212~~) operation to download the diagnostic information about SQL statements that meet a condition in an AnalyticDB for MySQL cluster, including the complete SQL statements.', example='SELECT count(*)\\nFROM nation'),
      SQLTruncated?: boolean(name='SQLTruncated', description='Indicates whether the SQL statement is truncated. Valid values:

*   **true**
*   **false**', example='false'),
      SQLTruncatedThreshold?: long(name='SQLTruncatedThreshold', description='The maximum length of the SQL statement. 5120 is returned. Unit: character. SQL statements that exceed this limit are truncated.', example='5120'),
      scanRows?: long(name='ScanRows', description='The number of entries scanned.', example='1'),
      scanSize?: long(name='ScanSize', description='The amount of scanned data. Unit: bytes.', example='9'),
      startTime?: long(name='StartTime', description='The beginning of the time range in which the SQL statement is executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1632933704000'),
      status?: string(name='Status', description='The state of the SQL statement. Valid values:

*   **running**
*   **finished**
*   **failed**', example='finished'),
      totalPlanningTime?: long(name='TotalPlanningTime', description='The amount of time that is consumed to generate an execution plan. Unit: milliseconds.', example='4'),
      totalStages?: int32(name='TotalStages', description='The total number of stages generated.', example='2'),
      userName?: string(name='UserName', description='The username that is used to execute the SQL statement.', example='test_user'),
    }
  ](name='Querys', description='The queried SQL statements.'),
  requestId?: string(name='RequestId', description='The request ID.', example='109462AF-B5FA-3D5A-9377-B27E5B******'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisSQLInfoRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition clusters within a specific region.', example='am-bp1r053byu48p****', position='Query'),
  lang: string(name='Lang', description='The language of file titles and error messages. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh', position='Query'),
  processId: string(name='ProcessId', description='The ID of the query.

>  You can call the [DescribeDiagnosisRecords](~~308207~~) operation to query the SQL summary information of a specified AnalyticDB for MySQL cluster, including the query ID.', example='2021070216432217201616806503453******', position='Query'),
  processRcHost: string(name='ProcessRcHost', description='The IP address and port number of the AnalyticDB for MySQL frontend node on which the SQL statement is executed.

>  You can call the [DescribeDiagnosisRecords](~~308207~~) operation to query the SQL summary information of a specified AnalyticDB for MySQL cluster, including the IP address and port number of the frontend node.', example='192.45.***.***:3145', position='Query'),
  processStartTime?: long(name='ProcessStartTime', description='The execution start time of the SQL statement. Specify the time in the UNIX timestamp format. Unit: milliseconds.

>  You can call the [DescribeDiagnosisRecords](~~308207~~) operation to query the SQL summary information of a specified AnalyticDB for MySQL cluster, including the execution start time of the SQL statement.', example='1625215402000', position='Query'),
  processState?: string(name='ProcessState', description='The state of the SQL statement. Valid values:

*   **running**

*   **finished**

*   **failed**

> You can call the [DescribeDiagnosisRecords](~~308207~~) operation to query the SQL summary information of a specified AnalyticDB for MySQL cluster, including the state of the SQL statement.', example='running', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  diagnosisSQLInfo?: string(name='DiagnosisSQLInfo', description='Execution details of the SQL statement, including the SQL statement text, statistics, execution plan, and operator information.', example='{     "DiagnosisSQLInfo": {         "hasSharedStage": false,         "resourceGroup": "user_default",         "cost": 274,         "queuedTime": 0,         "outputDataSize": 9,         "scheduled": true,         "query": "/*+display=tpch_q14*/SELECT 100.00 * SUM(CASE WHEN p_type LIKE \\"PROMO%\\" THEN l_extendedprice * (1 - l_discount) ELSE 0 END) / SUM(l_extendedprice * (1 - l_discount)) AS promo_revenue FROM lineitem l, part p WHERE l_partkey = p_partkey AND l_shipdate &gt;= DATE \\"1995-09-01\\" AND l_shipdate &lt; DATE \\"1995-09-01\\" + INTERVAL \\"1\\" MONTH",         "outputRows": 1,         "userName": "test_user",         "parentId": 0,         "maxOutputRows": 200000,         "scanSize": 8247470,         "peakMemory": 13188295,         "startTime": 1626330527632,         "state": "FINISHED",         "endTime": 1626330527905,         "writeTableRows": 0,         "scanRows": 351966     } }'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1'),
  stageInfos?: [ 
    {
      inputDataSize?: long(name='InputDataSize', description='The total amount of input data in the stage. Unit: bytes.', example='2341'),
      inputRows?: long(name='InputRows', description='The total number of input rows in the stage.', example='123'),
      operatorCost?: long(name='OperatorCost', description='The total amount of time consumed by all operators in the stage. Unit: milliseconds.', example='2341'),
      outputDataSize?: long(name='OutputDataSize', description='The total amount of output data in the stage. Unit: bytes.', example='12344'),
      outputRows?: long(name='OutputRows', description='The total number of output rows in the stage.', example='231'),
      peakMemory?: long(name='PeakMemory', description='The total peak memory of the stage. Unit: bytes.', example='3421'),
      progress?: double(name='Progress', description='The execution progress of the stage.', example='0.3'),
      stageId?: string(name='StageId', description='The ID of the stage.', example='Stage[26]'),
      state?: string(name='State', description='The state of the stage.', example='RUNNING'),
    }
  ](name='StageInfos', description='Execution details of the query by stage.'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisSQLInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisTasksRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp1r053byu48p****', position='Query'),
  host?: string(name='Host', description='The IP address from which the query was initiated.', example='192.168.XX.XX', position='Query'),
  order?: string(name='Order', description='The order in which to sort the tasks by field. Specify the value in the JSON format. Example: `[{"Field":"CreateTime", "Type":"desc"}]`.

> 

*   `Field` indicates the field that is used to sort the tasks. Valid values of Field: `State`, `CreateTime`, `DBName`, `ProcessID`, `UpdateTime`, `JobName`, and `ProcessRows`.

*   `Type` indicates the sort type. Valid values of Type: `Desc` and `Asc`. The values are case-insensitive.', example='[{"Field":"StartTime", "Type": "desc" }]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   30 (default)
*   50
*   100', example='30', position='Query'),
  processId: string(name='ProcessId', description='The query ID.

> You can call the [DescribeProcessList](~~190092~~) operation to query the IDs of queries that are being executed.', example='202011191048151921681492420315100****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  stageId: string(name='StageId', description='The ID of a stage in the query that is specified by the `ProcessId` parameter.', example='Stage[26]', position='Query'),
  state?: string(name='State', description='The state of the asynchronous import or export task to be queried. Valid values:

*   **RUNNING**
*   **FINISHED**
*   **FAILED**', example='RUNNING', position='Query'),
}

model DescribeDiagnosisTasksResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F0983B43-B2EC-536A-8791-142B5CF1E9B6'),
  taskList?: [ 
    {
      computeTimeRatio?: string(name='ComputeTimeRatio', description='The compute time ratio, which can be used to determine whether the task is really time-consuming. This parameter can be calculated by using the following formula: OperatorCost/Drivers/ElapsedTime. A greater value indicates that the task was executed for computing for most of the task time. A less value indicates that the task was waiting for scheduling or blocked due to other reasons for most of the task time.', example='0.89'),
      drivers?: string(name='Drivers', description='The number of tasks that can be executed concurrently.', example='16'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time that elapsed from when the task was created to when the task was completed. Unit: milliseconds.', example='456'),
      inputDataSize?: long(name='InputDataSize', description='The amount of input data in the task. Unit: bytes.', example='123'),
      inputRows?: long(name='InputRows', description='The number of input rows in the task.', example='105'),
      operatorCost?: long(name='OperatorCost', description='The total amount of time that is consumed by all operators in the task on a node. This parameter can be used to determine whether long tails occur in computing. Unit: milliseconds.', example='3'),
      outputDataSize?: long(name='OutputDataSize', description='The amount of output data in the task. Unit: bytes.', example='123'),
      outputRows?: long(name='OutputRows', description='The number of output rows in the task.', example='105'),
      peakMemory?: long(name='PeakMemory', description='The peak memory of the task. Unit: bytes.', example='234'),
      queuedTime?: string(name='QueuedTime', description='The queuing duration of the task. Unit: milliseconds.', example='12'),
      scanCost?: long(name='ScanCost', description='The amount of time that is consumed to scan data from a data source in the task. Unit: milliseconds.', example='0'),
      scanDataSize?: long(name='ScanDataSize', description='The amount of scanned data in the task. Unit: bytes.', example='123'),
      scanRows?: long(name='ScanRows', description='The number of rows that are scanned from a data source in the task.', example='0'),
      state?: string(name='State', description='The final execution state of the task. Valid values:

*   FINISHED
*   CANCELED
*   ABORTED
*   FAILED', example='FINISHED'),
      taskCreateTime?: long(name='TaskCreateTime', description='The timestamp when the task was created.', example='2022-12-12 00:00:12'),
      taskEndTime?: long(name='TaskEndTime', description='The timestamp when the task ends.', example='2022-12-22 00:00:00'),
      taskHost?: string(name='TaskHost', description='The IP address of the host where the task was executed.', example='192.168.XX.XX'),
      taskId?: string(name='TaskId', description='The task ID.', example='22568****'),
    }
  ](name='TaskList', description='The queried tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of tasks in the stage.', example='33'),
}

model DescribeDiagnosisTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisTasksResponseBody(name='body'),
}

async function describeDiagnosisTasks(request: DescribeDiagnosisTasksRequest): DescribeDiagnosisTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisTasks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDownloadRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the detailed information of all AnalyticDB for MySQL clusters within a specific region, including cluster IDs.', example='am-****************', position='Query'),
  lang?: string(name='Lang', description='The languages available for file titles and some error messages. Default value: zh. Valid values:

*   **zh**: Simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: Traditional Chinese', example='zh', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including region IDs.', example='cn-hangzhou', position='Query'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', description='The ID of the download task.', example='69'),
      exceptionMsg?: string(name='ExceptionMsg', description='The error message returned when the download task has failed.', example='The query result is empty.'),
      fileName?: string(name='FileName', description='The name of the downloaded file.', example='20210806094635-20210806095135'),
      status?: string(name='Status', description='The status of the download task.

*   **running**: The download task is currently in progress.
*   **finished**: The download task is complete.
*   **failed**: The download task has failed.', example='finished'),
      url?: string(name='Url', description='The download URL of the file.', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/adbmysql/query-sql-logs/am-**************/20210805104301-20210805164302.xlsx?Expires=1943514161&OSSAccessKeyId=*********&Signature=******"'),
    }
  ](name='Records', description='Details about the download tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='987F51BE-C4CB-332A-B159-63CE87******'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEIURangeRequest {
  computeResource: string(name='ComputeResource', example='{
      "RealValue": "32Core128GBNEW",
      "DisplayValue": "32Core128GB"
    }', position='Query'),
  DBClusterId?: string(name='DBClusterId', example='am-bp16t5ci7r74s****', position='Query'),
  DBClusterVersion?: string(name='DBClusterVersion', example='3.0', position='Query'),
  operation: string(name='Operation', example='Buy', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model DescribeEIURangeResponseBody = {
  EIUInfo?: {
    defaultValue?: string(name='DefaultValue', example='2'),
    EIURange?: [ long ](name='EIURange'),
    storageResourceRange?: [ string ](name='StorageResourceRange'),
  }(name='EIUInfo'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model DescribeEIURangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEIURangeResponseBody(name='body'),
}

async function describeEIURange(request: DescribeEIURangeRequest): DescribeEIURangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEIURange', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticDailyPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp11q28kvl688****', position='Query'),
  elasticDailyPlanDay?: string(name='ElasticDailyPlanDay', description='The start date of the current-day scaling plan. Specify the date in the yyyy-MM-dd format.', example='2022-12-02', position='Query'),
  elasticDailyPlanStatusList?: string(name='ElasticDailyPlanStatusList', description='The execution state of the current-day scaling plan. Separate multiple values with commas (,). Valid values:

*   **1**: The scaling plan is not executed.
*   **2**: The scaling plan is being executed.
*   **3**: The scaling plan is executed.
*   **4**: The scaling plan fails to be executed.', example='3', position='Query'),
  elasticPlanName?: string(name='ElasticPlanName', description='The name of the scaling plan. Valid values:

*   The name must be 2 to 30 characters in length.
*   The name can contain letters, digits, and underscores (\\_).', example='realtimeplan', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName?: string(name='ResourcePoolName', description='The name of the resource group.

>  You can call the [DescribeDBResourceGroup](~~466685~~) operation to query the resource group name.', example='test', position='Query'),
}

model DescribeElasticDailyPlanResponseBody = {
  elasticDailyPlanList?: [ 
    {
      day?: string(name='Day', description='The start date of the current-day scaling plan. The date is in the yyyy-MM-dd format.', example='2022-12-02'),
      elasticNodeNum?: int32(name='ElasticNodeNum', description='The number of nodes involved in the scaling plan.

*   If ElasticPlanType is set to **worker**, a value of 0 or null is returned.
*   If ElasticPlanType is set to **executorcombineworker** or **executor**, a value greater than 0 is returned.', example='0'),
      elasticPlanType?: string(name='ElasticPlanType', description='The type of the scaling plan. Default value: executorcombineworker. Valid values:

*   **worker**: scales only elastic I/O resources.
*   **executor**: scales only computing resources.
*   **executorcombineworker**: scales both elastic I/O resources and computing resources by proportion.', example='worker'),
      elasticPlanWorkerSpec?: string(name='ElasticPlanWorkerSpec', description='The resource specifications that can be scaled up by the scaling plan. Default value: 8 Core 64 GB. Valid values:

*   8 Core 64 GB
*   16 Core 64 GB
*   32 Core 64 GB
*   64 Core 128 GB
*   12 Core 96 GB
*   24 Core 96 GB
*   52 Core 86 GB', example='16 Core 64 GB'),
      endTs?: string(name='EndTs', description='The actual restoration time. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2022-12-02 16:00:00'),
      planEndTs?: string(name='PlanEndTs', description='The scheduled restoration time. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2022-12-02 16:00:00'),
      planName?: string(name='PlanName', description='The name of the scaling plan.', example='realtimeplan'),
      planStartTs?: string(name='PlanStartTs', description='The scheduled scale-up time. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2022-12-02 15:00:00'),
      resourcePoolName?: string(name='ResourcePoolName', description='The name of the resource group.', example='test'),
      startTs?: string(name='StartTs', description='The actual scale-up time. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2022-12-02 16:00:00'),
      status?: int32(name='Status', description='The execution state of the current-day scaling plan. Multiple values are separated by commas (,). Valid values:

*   **1**: The scaling plan is not executed.
*   **2**: The scaling plan is being executed.
*   **3**: The scaling plan is executed.
*   **4**: The scaling plan fails to be executed.', example='3'),
    }
  ](name='ElasticDailyPlanList', description='Details of the current-day scaling plans.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeElasticDailyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticDailyPlanResponseBody(name='body'),
}

/**
  * This operation is available only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition that have 32 cores or more.
  *
 */
async function describeElasticDailyPlan(request: DescribeElasticDailyPlanRequest): DescribeElasticDailyPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticDailyPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp278jg9****', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', description='Specifies whether the scaling plan takes effect. Default value: true. Valid values:

*   **true**: The scaling plan takes effect.
*   **false**: The scaling plan does not take effect.', example='true', position='Query'),
  elasticPlanName?: string(name='ElasticPlanName', description='The name of the scaling plan.

*   The name must be 2 to 30 characters in length.

*   The name can contain letters, digits, and underscores (\\_).

>  If you do not specify this parameter, the details of all scaling plans for the specified cluster are returned.', example='realtime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName?: string(name='ResourcePoolName', description='The name of the resource group.

> *   You can call the [DescribeDBResourceGroup](~~466685~~) operation to query the resource group name.', example='USER_DEFAULT', position='Query'),
}

model DescribeElasticPlanResponseBody = {
  elasticPlanList?: [ 
    {
      elasticNodeNum?: int32(name='ElasticNodeNum', description='The number of nodes involved in the scaling plan.

*   If ElasticPlanType is set to **worker**, a value of 0 or null is returned.
*   If ElasticPlanType is set to **executorcombineworker** or **executor**, a value greater than 0 is returned.', example='0'),
      elasticPlanType?: string(name='ElasticPlanType', description='The type of the scaling plan. Default value: executorcombineworker. Valid values:

*   **worker**: scales only elastic I/O resources.
*   **executor**: scales only computing resources.
*   **executorcombineworker**: scales both elastic I/O resources and computing resources by proportion.', example='worker'),
      elasticPlanWorkerSpec?: string(name='ElasticPlanWorkerSpec', description='The resource specifications that can be scaled up by the scaling plan. Default value: 8 Core 64 GB. Valid values:

*   8 Core 64 GB
*   16 Core 64 GB
*   32 Core 64 GB
*   64 Core 128 GB
*   12 Core 96 GB
*   24 Core 96 GB
*   52 Core 86 GB', example='16 Core 64 GB'),
      enable?: boolean(name='Enable', description='Specifies whether the scaling plan takes effect. Default value: true. Valid values:

*   **true**: The scaling plan takes effect.
*   **false**: The scaling plan does not take effect.', example='true'),
      endDay?: string(name='EndDay', description='The end date of the scaling plan. This parameter is returned only if the end date of the scaling plan is set. The date is in the yyyy-MM-dd format.', example='2022-12-09'),
      endTime?: string(name='EndTime', description='The restoration time of the scaling plan. The interval between the scale-up time and the restoration time cannot be more than 24 hours. The time is in the HH:mm:ss format.', example='10:00:00'),
      planName?: string(name='PlanName', description='The name of the scaling plan.', example='realtime'),
      resourcePoolName?: string(name='ResourcePoolName', description='The name of the resource group.', example='USER_DEFAULT'),
      startDay?: string(name='StartDay', description='The start date of the scaling plan. This parameter is returned only if the start date of the scaling plan is set. The date is in the yyyy-MM-dd format.', example='2022-12-02'),
      startTime?: string(name='StartTime', description='The scale-up time of the scaling plan. The time is in the HH:mm:ss format.', example='08:00:00'),
      weeklyRepeat?: string(name='WeeklyRepeat', description='The days of the week when you want to execute the scaling plan. Valid values: 0 to 6, which indicate Sunday to Saturday. Multiple values are separated by commas (,).', example='3,4,5,6'),
    }
  ](name='ElasticPlanList', description='Details of the scaling plans.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticPlanResponseBody(name='body'),
}

/**
  * This operation is available only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition that have 32 cores or more.
  *
 */
async function describeElasticPlan(request: DescribeElasticPlanRequest): DescribeElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInclinedTablesRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bpxxxxxxxx47', position='Query'),
  order?: string(name='Order', description='The order in which queries are sorted in the JSON format based on the specified fields. Specify the fields used to sort the queries and the order type.

Example:

```

[

    {

        "Field":"Name",

        "Type":"Asc"

    }

]
```

In the preceding code, Field indicates the field used to sort queries. Set the value of Field to Name.

Type indicates the order type. Valid values of Type: Desc and Asc. A value of Desc indicates a descending order. A value of Asc indicates an ascending order.

Both fields are not case-sensitive.', example='[      {          "Field":"Name",          "Type":"Asc"      }  ]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30
*   50
*   100

Default value: 30.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tableType: string(name='TableType', description='The type of the table. Valid values:

*   FactTable
*   DimensionTable', example='FactTable', position='Query'),
}

model DescribeInclinedTablesResponseBody = {
  items?: {
    table?: [ 
    {
      isIncline?: boolean(name='IsIncline', description='Indicates whether data is skewed in partitions of the table. Valid values:

*   **true**
*   **false**', example='true'),
      name?: string(name='Name', description='The name of the table.', example='test'),
      schema?: string(name='Schema', description='The name of the database.', example='adb_demo'),
      size?: long(name='Size', description='The number of rows in the table.', example='2'),
      type?: string(name='Type', description='The type of the table. Valid values:

*   **FactTable**
*   **DimensionTable**', example='FactTable'),
    }
  ](name='Table')
  }(name='Items', description='The monitoring information about tables.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeInclinedTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInclinedTablesResponseBody(name='body'),
}

async function describeInclinedTables(request: DescribeInclinedTablesRequest): DescribeInclinedTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInclinedTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadTasksRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters in a region, including cluster IDs.', example='am-bp2590j****', position='Query'),
  DBName?: string(name='DBName', description='The name of the database that is involved in the import or export task.', example='adb_demo', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.', example='2021-05-18T06:30:00Z', position='Query'),
  order?: string(name='Order', description='The order in which to sort the tasks by field. Specify the field and the sort order in the JSON format. Example: `[{"Field":"CreateTime", "Type":"desc"}]`.

> 

*   `Field` specifies the field that is used to sort the tasks. Valid values of Field: `State`, `CreateTime`, `DBName`, `ProcessID`, `UpdateTime`, `JobName`, and `ProcessRows`.

*   `Type` specifies the sort order. Valid values of Type: `Desc` and `Asc`. The values are case-insensitive.', example='[{"Field":"CreateTime", "Type":"desc"}]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', minimum=30, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

> We recommend that you set the query start time to any point in time within 30 days.', example='2021-05-18T06:00:00Z', position='Query'),
  state?: string(name='State', description='The state of the asynchronous import or export task to be queried. Valid values:

*   **INIT**: The task is being initialized.
*   **RUNNING**: The task is running.
*   **FINISH**: The task is successful.
*   **FAILED**: The task fails.', example='FINISH', position='Query'),
}

model DescribeLoadTasksRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-bp2590j****'),
  loadTasksRecords?: [ 
    {
      createTime?: string(name='CreateTime', description='The start time of the task. The time is accurate to milliseconds. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ss.SSSZ* format. The time is displayed in UTC.', example='2021-05-18 18:47:27.0'),
      DBName?: string(name='DBName', description='The name of the database that is involved in the import or export task.', example='adb_demo'),
      jobName?: string(name='JobName', description='The task ID.', example='2021051818472717201616624903453******'),
      processID?: string(name='ProcessID', description='The process ID.', example='2021051818472717201616624903453******'),
      processRows?: long(name='ProcessRows', description='The number of rows that are processed in the asynchronous import or export task.', example='6'),
      sql?: string(name='Sql', description='The SQL statement that is used in the asynchronous import or export task.', example='insert overwrite into courses_external_table\\nselect * from courses'),
      state?: string(name='State', description='The state of the task.', example='FINISH'),
      updateTime?: string(name='UpdateTime', description='The time when the task state was updated. The time is accurate to milliseconds. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ss.SSSZ* format. The time is displayed in UTC.', example='2021-05-18 18:47:31.0'),
    }
  ](name='LoadTasksRecords', description='The queried asynchronous import and export tasks.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='C60B05DB-2B77-421A-98E9-92C20E******'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeLoadTasksRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadTasksRecordsResponseBody(name='body'),
}

/**
  * For information about how to asynchronously submit import and export tasks, see [Asynchronously submit an import or export task](~~160291~~).
  *
 */
async function describeLoadTasksRecords(request: DescribeLoadTasksRecordsRequest): DescribeLoadTasksRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadTasksRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMaintenanceActionRequest {
  isHistory?: int32(name='IsHistory', description='Specifies whether to return the details of pending or historical O\\&M events. Valid values:

*   **0**: returns the details of pending O\\&M event.
*   **1**: returns the details of historical O\\&M event.

If you do not specify this parameter, the details of pending O\\&M event are returned.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: 30.', example='30', position='Query'),
  region: string(name='Region', description='The ID of the region where the O\\&M event occurs. Valid values:

*   The ID of the region where the O\\&M event occurs. Example: `cn-hangzhou`. You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including the region IDs.
*   You can also set Region to `all` to view all the O\\&M events in all regions. If `Region` is set to `all`, `TaskType` must be set to `all`.', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the O\\&M event occurs.

>  You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including the region IDs.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskType: string(name='TaskType', description='The type of the O\\&M event. Valid values:

*   **rds_apsaradb_upgrade**: indicates database software upgrades.
*   **all**: indicates all the O\\&M events in all regions within the current account. If `Region` is set to `all`, `TaskType` must be set to `all`.', example='rds_apsaradb_upgrade', position='Query'),
}

model DescribeMaintenanceActionResponseBody = {
  items?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the O\\&M event was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-06-30T02:44:27Z'),
      DBClusterId?: string(name='DBClusterId', description='The ID of the cluster involved in the O\\&M event.', example='am-****************'),
      DBType?: string(name='DBType', description='The database engine.', example='analyticdb'),
      DBVersion?: string(name='DBVersion', description='The version of the database engine.', example='3.0'),
      deadline?: string(name='Deadline', description='The deadline before which the event can be executed. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-07-04T15:59:59Z'),
      id?: int32(name='Id', description='The ID of the event.', example='11111'),
      modifiedTime?: string(name='ModifiedTime', description='The point in time at which the O\\&M event was switched. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-07-03T06:33:00Z'),
      prepareInterval?: string(name='PrepareInterval', description='The preparation time that is required before the pending O\\&M event can be switched. The time is in the `HH:mm:ss` format.', example='02:00:00'),
      region?: string(name='Region', description='The ID of the region where the O\\&M event occurs.', example='cn-hangzhou'),
      resultInfo?: string(name='ResultInfo', description='The execution result of the O\\&M event.

>  This parameter is valid only when `Status` is set to **FAILED** or **CANCEL**.', example='autoCancel'),
      startTime?: string(name='StartTime', description='The time when the task was executed in the backend. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-07-03T04:00:00Z'),
      status?: string(name='Status', description='The state of the event.

*   If you set `IsHistory` to **0**, the state of the pending O\\&M event is returned. Valid values:

    *   **WAITING_MODIFY**: The start time of the O\\&M event is waiting to be set.
    *   **WAITING**: The O\\&M event is waiting to be processed.
    *   **PROCESSING**: The O\\&M event is being processed. The switching time of an event in this state cannot be changed.

*   If you set `IsHistory` to **1**, the state of the historical O\\&M event is returned. Valid values:

    *   **SUCCESS**: The event ended and the execution succeeded.
    *   **FAILED**: The event ended but the execution failed.
    *   **CANCEL**: The event was canceled.', example='SUCCESS'),
      switchTime?: string(name='SwitchTime', description='The time when the pending event was switched. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-07-03T06:00:00Z'),
      taskType?: string(name='TaskType', description='The type of the O&M event.', example='rds_apsaradb_upgrade'),
    }
  ](name='Items', description='The list of events.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E774C8A9-8819-4A09-9E91-07C078******'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='2'),
}

model DescribeMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMaintenanceActionResponseBody(name='body'),
}

async function describeMaintenanceAction(request: DescribeMaintenanceActionRequest): DescribeMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeOperatorPermissionResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the authorization takes effect.', example='2019-05-20T05:41:19Z'),
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx'),
  expiredTime?: string(name='ExpiredTime', description='The time when the authorization expires.', example='2019-05-20T07:41:19Z'),
  privileges?: string(name='Privileges', description='The type of authorization. Valid values: Control | Data.', example='Control,Data'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOperatorPermissionResponseBody(name='body'),
}

async function describeOperatorPermission(request: DescribeOperatorPermissionRequest): DescribeOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribePatternPerformanceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters within a region, including cluster IDs.', example='am-****************', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

> The end time must be later than the start time.', example='2021-11-18T18:05:00Z', position='Query'),
  patternId: string(name='PatternId', description='The SQL pattern ID.

> You can call the [DescribeSQLPatterns](~~321868~~) operation to query the information about all SQL patterns in an AnalyticDB for MySQL cluster within a period of time, including SQL pattern IDs.', example='3847585356974******', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

> 

*   Only data within the last 14 days can be queried. For example, if the current date is November 22 (UTC+8), you can query data on a day as early as November 9 by setting StartTime to 2021-11-08T16:00:00Z. If you set StartTime to a value earlier than 2021-11-08T16:00:00Z, the Performances parameter is empty.

*   The maximum time range that can be specified is 24 hours.', example='2021-11-18T00:00:00Z', position='Query'),
}

model DescribePatternPerformanceResponseBody = {
  endTime?: string(name='EndTime', description='The end time of the query. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-11-18T18:05Z'),
  performances?: [ 
    {
      key?: string(name='Key', description='The performance metric that was queried. Valid values:

*   **AnalyticDB_PatternQueryCount**: the total number of queries executed in association with the SQL pattern.
*   **AnalyticDB_PatternQueryTime**: the total amount of time consumed by the queries executed in association with the SQL pattern.
*   **AnalyticDB_PatternExecutionTime**: the total execution duration of the queries executed in association with the SQL pattern.
*   **AnalyticDB_PatternPeakMemory**: the peak memory usage of the queries executed in association with the SQL pattern.
*   **AnalyticDB_PatternScanSize**: the amount of data scanned in the queries executed in association with the SQL pattern.', example='AnalyticDB_PatternQueryCount'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the performance metric value. Valid values:

*   When the `Key` parameter is set to `AnalyticDB_PatternQueryCount`, `pattern_query_count` is returned, which indicates the number of executions of the SQL statements in association with the SQL pattern.

*   When the `Key` parameter is set to `AnalyticDB_PatternQueryTime`, the following values are returned:

    *   `average_query_time`, which indicates the average total amount of time consumed by the SQL statements in association with the SQL pattern.
    *   `max_query_time`, which indicates the maximum total amount of time consumed by the SQL statements in association with the SQL pattern.

*   When the `Key` parameter is set to `AnalyticDB_PatternExecutionTime`, the following values are returned:

    *   `average_execution_time`, which indicates the average execution duration of the SQL statements in association with the SQL pattern.
    *   `max_execution_time`, which indicates the maximum execution duration of the SQL statements in association with the SQL pattern.

*   When the `Key` parameter is set to `AnalyticDB_PatternPeakMemory`, the following values are returned:

    *   `average_peak_memory`, which indicates the average peak memory usage of the SQL statements in association with the SQL pattern.
    *   `max_peak_memory`, which indicates the maximum peak memory usage of the SQL statements in association with the SQL pattern.

*   When the `Key` parameter is set `AnalyticDB_PatternScanSize`, the following values are returned:

    *   `average_scan_size`, which indicates the average amount of data scanned by the SQL statements in association with the SQL pattern.
    *   `max_scan_size`, which indicates the maximum amount of data scanned by the SQL statements in association with the SQL pattern.', example='max_query_time'),
          values?: [ string ](name='Values', description='The queried performance metrics.'),
        }
      ](name='Series', description='The queried performance metrics.'),
      unit?: string(name='Unit', description='The unit of the performance metric. Valid values:

*   When the performance metric is related to the query duration (the `Key` value is `AnalyticDB_PatternQueryTime` or `AnalyticDB_PatternExecutionTime`), **ms** is returned.
*   When the performance metric is related to the memory usage (the `Key` value is `AnalyticDB_PatternPeakMemory`), **MB** is returned.
*   When the performance metric is related to the amount of data scanned (the `Key` value is `AnalyticDB_PatternScanSize`), **MB** is returned.
*   When the performance metric is related to the number of queries (the `Key` value is `AnalyticDB_PatternQueryCount`), this parameter is empty.', example='ms'),
    }
  ](name='Performances', description='The queried performance metrics.'),
  requestId?: string(name='RequestId', description='The request ID.', example='210f47011634026610213529******'),
  startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-11-18T00:00Z'),
}

model DescribePatternPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePatternPerformanceResponseBody(name='body'),
}

async function describePatternPerformance(request: DescribePatternPerformanceRequest): DescribePatternPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePatternPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProcessListRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp11q28kvl688****', position='Query'),
  keyword?: string(name='Keyword', description='The keyword in an SQL statement, which is used to filter queries. Set the value to **SELECT**.', example='SELECT', position='Query'),
  order?: string(name='Order', description='The order in which queries are sorted based on the specified fields. Specify this parameter as an ordered JSON array in the `[{"Field":"Time","Type":"Desc" },{ "Field":"User", "Type":"Asc" }]` format.

*   **Field** specifies the field used to sort queries. Valid values: Time, User, Host, and DB.
*   **Type** specifies the sorting sequence. Valid values: **Desc** and **Asc**.', example='[ { "Field":"Time","Type":"Desc" },  { "Field":"User", "Type":"Asc" }]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 30. Valid values:

*   **30**
*   **50**
*   **100**', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  runningTime?: int32(name='RunningTime', description='The execution duration used to filter queries. Queries that take a longer time than the specified execution duration are displayed. Unit: seconds.', example='5', position='Query'),
  showFull?: boolean(name='ShowFull', description='Specifies whether to show a complete SQL statement. Valid values:

*   **True**: shows a complete SQL statement.
*   **False**: shows only the first 100 characters of an SQL statement.

>  The default value is False.', example='True', position='Query'),
  user?: string(name='User', description='The name of the user used to filter queries.', example='test', position='Query'),
}

model DescribeProcessListResponseBody = {
  items?: {
    process?: [ 
    {
      command?: string(name='Command', description='The type of the statement. Only SELECT can be returned.', example='SELECT'),
      db?: string(name='DB', description='The name of the database.', example='adb_demo'),
      host?: string(name='Host', description='The IP address from which the query was initiated.', example='192.168.XX.XX:12308'),
      id?: int32(name='Id', description='The ID of the worker thread.', example='49104'),
      info?: string(name='Info', description='The SQL statement that is being executed. By default, the first 100 characters of the SQL statement are returned. If the ShowFull parameter is set to True, the complete SQL statement is returned.', example='select * from sbtest1,sbtest2,sbtest3,sbtest4'),
      processId?: string(name='ProcessId', description='The unique ID of the query. You must specify this parameter when you use the KILL PROCESS statement.', example='202011191048151921681492420315100****'),
      startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-11-19T02:48:15Z'),
      time?: int32(name='Time', description='The amount of time that has elapsed from the start time of the query. Unit: seconds.', example='11'),
      user?: string(name='User', description='The username.', example='test'),
    }
  ](name='Process')
  }(name='Items', description='Details of the queries.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The total number of pages returned.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeProcessListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProcessListResponseBody(name='body'),
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language used for the region and zone names specified by the `LocalName` parameter. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English
*   **ja**: Japanese

>  If this parameter is left empty, Chinese is used.', example='en-US', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='adb.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          localName?: string(name='LocalName', description='The name of the region.', example='Hangzhou Zone H'),
          vpcEnabled?: boolean(name='VpcEnabled', description='Indicates whether Virtual Private Cloud (VPC) is available in the zone that you want to select. Valid values:

*   **true**: VPC is available.
*   **false**: VPC is unavailable.', example='true'),
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
        }
      ](name='Zone')
      }(name='Zones', description='The list of zones.'),
    }
  ](name='Region')
  }(name='Regions', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='421794A3-72A5-5D27-9E8B-A75A4C503E17'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPatternAttributeRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the detailed information of all AnalyticDB for MySQL clusters within a specific region, including cluster IDs.', example='am-****************', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

>  The end time must be later than the start time.', example='2021-09-30T00:15Z', position='Query'),
  lang?: string(name='Lang', description='The languages available for file titles and some error messages. Default value: zh. Valid values:

*   **zh**: Simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: Traditional Chinese', example='zh', position='Query'),
  patternId: long(name='PatternId', description='The ID of the SQL pattern.

>  You can call the [DescribeSQLPatterns](~~321868~~) operation to query the list of SQL patterns within an AnalyticDB for MySQL cluster for a specific period of time, including SQL pattern IDs.', example='5575924945138******', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including region IDs.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

>  Only data generated within the last 15 days can be viewed.', example='2021-09-30T00:10Z', position='Query'),
}

model DescribeSQLPatternAttributeResponseBody = {
  patternDetail?: {
    averageMemory?: string(name='AverageMemory', description='The average memory consumption associated with the SQL pattern. Unit: MB.', example='0'),
    averageQueryTime?: string(name='AverageQueryTime', description='The average query time associated with the SQL pattern. Unit: milliseconds.', example='4'),
    queryCount?: long(name='QueryCount', description='The number of queries performed based on the SQL pattern.', example='2'),
    SQLPattern?: string(name='SQLPattern', description='The statement of the SQL pattern.', example='SELECT * FROM KEPLER_META_NODE_STATIC_INFO WHERE elastic_node = ? OR (elastic_node = ? AND enable = ?)'),
    totalQueryTime?: string(name='TotalQueryTime', description='The total query time associated with the SQL pattern. Unit: milliseconds.', example='8'),
  }(name='PatternDetail', description='The detailed information of the SQL pattern.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A318054-6815-528A-AA94-8AC921******'),
}

model DescribeSQLPatternAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPatternAttributeResponseBody(name='body'),
}

async function describeSQLPatternAttribute(request: DescribeSQLPatternAttributeRequest): DescribeSQLPatternAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPatternAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPatternsRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters in a region, including cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

> The end time must be later than the start time.', example='2021-09-30T00:15:00Z', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is used for the query.', example='SELECT', position='Query'),
  lang?: string(name='Lang', description='The language of file titles and error messages. Valid values:

*   **zh** (default): simplified Chinese.
*   **en**: English.
*   **ja**: Japanese.
*   **zh-tw**: traditional Chinese.', example='zh', position='Query'),
  order: string(name='Order', description='The order by which to sort query results. Specify the parameter value in the JSON format. Example: `[{"Field":"AverageQueryTime","Type":"Asc"}]`.

*   `Field` specifies the field by which to sort the query results. Valid values:

    *   `PatternCreationTime`: the earliest commit time of the SQL pattern within the time range to query.
    *   `AverageQueryTime`: the average total amount of time consumed by the SQL pattern within the time range to query.
    *   `MaxQueryTime`: the maximum total amount of time consumed by the SQL pattern within the time range to query.
    *   `AverageExecutionTime`: the average execution duration of the SQL pattern within the time range to query.
    *   `MaxExecutionTime`: the maximum execution duration of the SQL pattern within the time range to query.
    *   `AveragePeakMemory`: the average peak memory usage of the SQL pattern within the time range to query.
    *   `MaxPeakMemory`: the maximum peak memory usage of the SQL pattern within the time range to query.
    *   `AverageScanSize`: the average amount of data scanned based on the SQL pattern within the time range to query.
    *   `MaxScanSize`: the maximum amount of data scanned based on the SQL pattern within the time range to query.
    *   `QueryCount`: the number of queries performed in association with the SQL pattern within the time range to query.
    *   `FailedCount`: the number of failed queries performed in association with the SQL pattern within the time range to query.

*   `Type` specifies the sorting order. Valid values (case-insensitive):

    *   `Asc`: ascending order.
    *   `Desc`: descending order.', example='[{"Field":"AverageQueryTime","Type":"Asc"}]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

> If you do not specify this parameter, the value **1** is used.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

> If you do not specify this parameter, the value **30** is used.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

> 

*   Only data within the last 14 days can be queried. For example, if the current time is 2021-11-22T12:00:00Z, you can query SQL patterns at a point in time as early as 2021-11-09T12:00:00Z.

*   The maximum time range that can be specified is 24 hours.', example='2021-09-30T00:10:00Z', position='Query'),
}

model DescribeSQLPatternsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  patternDetails?: [ 
    {
      accessIp?: string(name='AccessIp', description='The IP address of the SQL client that commits the SQL pattern.', example='192.168.xx.xx'),
      averageExecutionTime?: double(name='AverageExecutionTime', description='The average execution duration of the SQL pattern within the query time range. Unit: milliseconds.', example='234.78'),
      averagePeakMemory?: double(name='AveragePeakMemory', description='The average peak memory usage of the SQL pattern within the query time range. Unit: bytes.', example='234.22'),
      averageQueryTime?: double(name='AverageQueryTime', description='The average total amount of time consumed by the SQL pattern within the query time range. Unit: milliseconds.', example='4'),
      averageScanSize?: double(name='AverageScanSize', description='The average amount of data scanned based on the SQL pattern within the query time range. Unit: bytes.', example='234149.23'),
      blockable?: boolean(name='Blockable', description='Indicates whether the execution of the SQL pattern can be blocked. Valid values:

*   **true**
*   **false**

> Only SELECT and INSERT statements can be blocked.', example='true'),
      failedCount?: long(name='FailedCount', description='The number of failed queries executed in association with the SQL pattern within the query time range.', example='234'),
      maxExecutionTime?: long(name='MaxExecutionTime', description='The maximum execution duration of the SQL pattern within the query time range. Unit: milliseconds.', example='2142'),
      maxPeakMemory?: long(name='MaxPeakMemory', description='The maximum peak memory usage of the SQL pattern within the query time range. Unit: bytes.', example='234149'),
      maxQueryTime?: long(name='MaxQueryTime', description='The maximum total amount of time consumed by the SQL pattern within the query time range. Unit: milliseconds.', example='2341'),
      maxScanSize?: long(name='MaxScanSize', description='The maximum amount of data scanned based on the SQL pattern within the query time range. Unit: bytes.', example='234149'),
      patternCreationTime?: string(name='PatternCreationTime', description='The earliest commit time of the SQL pattern within the query time range. Unit: milliseconds.', example='2021-11-12 03:06:00'),
      patternId?: string(name='PatternId', description='The ID of the SQL pattern.', example='5575924945138******'),
      queryCount?: long(name='QueryCount', description='The number of queries executed in association with the SQL pattern within the query time range.', example='345'),
      SQLPattern?: string(name='SQLPattern', description='The statement of the SQL pattern.', example='SELECT * FROM KEPLER_META_NODE_STATIC_INFO WHERE elastic_node = ? OR (elastic_node = ? AND enable = ?)'),
      tables?: string(name='Tables', description='The tables scanned based on the SQL pattern.', example='tpch.orders'),
      user?: string(name='User', description='The database username that is used to commit the SQL pattern.', example='reporter'),
    }
  ](name='PatternDetails', description='The queried SQL patterns.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6BE0EDD1-0DE6-3EB6-81BF-BFE4F2******'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPatternsResponseBody(name='body'),
}

async function describeSQLPatterns(request: DescribeSQLPatternsRequest): DescribeSQLPatternsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPatterns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query details about all AnalyticDB for MySQL clusters in a specific region, including cluster IDs.', example='am-****************', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId: string(name='ProcessId', description='The ID of the task.

>  You can call the [DescribeSlowLogRecords](~~143382~~) operation to query the task ID of the SQL statement.', example='202105271604431720161662490345*******', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSQLPlanResponseBody = {
  detail?: {
    CPUTime?: long(name='CPUTime', description='The total CPU time consumed by all operators on multithreaded servers when the SQL statement is executed. Unit: milliseconds.', example='6100'),
    clientIP?: string(name='ClientIP', description='The IP address of the client that is used to execute the SQL statement.', example='172.16.***.***'),
    database?: string(name='Database', description='The name of the database on which the SQL statement is executed.', example='adb_demo'),
    outputRows?: long(name='OutputRows', description='The total number of rows generated by the SQL statement.', example='1'),
    outputSize?: long(name='OutputSize', description='The total amount of data generated by the SQL statement. Unit: byte.', example='9'),
    peakMemory?: long(name='PeakMemory', description='The maximum memory usage when the SQL statement is executed. Unit: byte.', example='441802'),
    planningTime?: long(name='PlanningTime', description='The time when the execution plan of the SQL statement is generated. Unit: milliseconds.', example='86'),
    queuedTime?: long(name='QueuedTime', description='The amount of time that the SQL statement is queued before it is executed. Unit: milliseconds.', example='0'),
    SQL?: string(name='SQL', description='The SQL statement.', example='INSERT OVERWRITE INTO hdfs_import_external\\nSELECT *\\nFROM adb_hdfs_import_source'),
    startTime?: string(name='StartTime', description='The beginning of the time range in which the SQL statement is executed. The time is in the UNIX timestamp format. Unit: milliseconds.', example='1622102683243'),
    state?: string(name='State', description='The final execution state of the SQL statement. Valid values:

*   FINISHED
*   FAILED', example='FINISHED'),
    totalStage?: long(name='TotalStage', description='The total number of stages in the SQL statement.', example='4'),
    totalTask?: long(name='TotalTask', description='The total number of tasks in the SQL statement.', example='4'),
    totalTime?: long(name='TotalTime', description='The time consumed to execute the SQL statement. Unit: milliseconds.', example='2340'),
    user?: string(name='User', description='The name of the user who submitted the SQL statement.', example='test_acc'),
  }(name='Detail', description='Details about the execution of the SQL statement.'),
  originInfo?: string(name='OriginInfo', description='The original details of the SQL statement.', example='{\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"session\\":{\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"hasSharedStage\\":false,\\"parentId\\":0}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='22D6DEF0-CBC7-4388-A41C-D5FD62******'),
  stageList?: [ 
    {
      CPUTimeAvg?: long(name='CPUTimeAvg', description='The average `CPU Time` value on each compute node in the stage. Unit: milliseconds.', example='5984'),
      CPUTimeMax?: long(name='CPUTimeMax', description='The maximum `CPU Time` value on each compute node in the stage. Unit: milliseconds.', example='5984'),
      CPUTimeMin?: long(name='CPUTimeMin', description='The minimum `CPU Time` value on each compute node in the stage. Unit: milliseconds.', example='47'),
      inputSizeAvg?: long(name='InputSizeAvg', description='The average amount of input data on each compute node in the stage. Unit: byte.', example='173'),
      inputSizeMax?: long(name='InputSizeMax', description='The maximum amount of input data on each compute node in the stage. Unit: byte.', example='173'),
      inputSizeMin?: long(name='InputSizeMin', description='The minimum amount of input data on each compute node in the stage. Unit: byte.', example='173'),
      operatorCost?: long(name='OperatorCost', description='The total CPU time consumed by all operators in the stage, which is equivalent to the total CPU time of the stage. You can use this parameter to determine which parts of the stage consume a large amount of computing resources. Unit: milliseconds.', example='5984'),
      peakMemory?: long(name='PeakMemory', description='The maximum memory usage when the SQL statement is executed. Unit: byte.', example='74208'),
      scanSizeAvg?: long(name='ScanSizeAvg', description='The average amount of data scanned by a scan operator on each storage node in the stage. Unit: byte.', example='0'),
      scanSizeMax?: long(name='ScanSizeMax', description='The maximum amount of data scanned by a scan operator on each storage node in the stage. Unit: byte.', example='0'),
      scanSizeMin?: long(name='ScanSizeMin', description='The minimum amount of data scanned by a scan operator on each storage node in the stage. Unit: byte.', example='0'),
      scanTimeAvg?: long(name='ScanTimeAvg', description='The average amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.', example='0'),
      scanTimeMax?: long(name='ScanTimeMax', description='The maximum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.', example='0'),
      scanTimeMin?: long(name='ScanTimeMin', description='The minimum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.', example='0'),
      stageId?: int32(name='StageId', description='The ID of the stage.', example='1'),
      state?: string(name='State', description='The final execution state of the stage. Valid values:

*   FINISHED
*   CANCELED
*   ABORTED
*   FAILED', example='FINISHED'),
    }
  ](name='StageList', description='Details about the plan stages.'),
}

model DescribeSQLPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanResponseBody(name='body'),
}

async function describeSQLPlan(request: DescribeSQLPlanRequest): DescribeSQLPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLPlanTaskRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId: string(name='ProcessId', description='The ID of the task.', example='201907241445301720211111570315107****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  stageId: string(name='StageId', description='The stage of the task.', example='1785135913****', position='Query'),
}

model DescribeSQLPlanTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskList?: [ 
    {
      elapsedTime?: long(name='ElapsedTime', description='The time elapsed from when the task was created to when the task was complete. Unit: milliseconds.', example='10'),
      inputRows?: long(name='InputRows', description='The number of input rows in the task.', example='105'),
      inputSize?: long(name='InputSize', description='The amount of input data in the task. Unit: bytes.', example='3763'),
      operatorCost?: long(name='OperatorCost', description='The total amount of time consumed by operators in the task on a specific node. This parameter can be used to determine whether long tails occur in computing. Unit: milliseconds.', example='3'),
      outputRows?: long(name='OutputRows', description='The number of output rows in the task.', example='105'),
      outputSize?: long(name='OutputSize', description='The amount of output data in the task. Unit: bytes.', example='945'),
      peakMemory?: long(name='PeakMemory', description='The peak memory of the task on a specific node. Unit: bytes.', example='898576'),
      scanCost?: long(name='ScanCost', description='The time consumed to scan data from a data source in the task. Unit: milliseconds.', example='0'),
      scanRows?: long(name='ScanRows', description='The number of rows scanned from a data source in the task.', example='0'),
      scanSize?: long(name='ScanSize', description='The amount of data scanned from a data source in the task. Unit: bytes.', example='0'),
      state?: string(name='State', description='The final execution status of the task. Valid values:

*   FINISHED
*   CANCELED
*   ABORTED
*   FAILED', example='FINISHED'),
      taskId?: int32(name='TaskId', description='The ID of the task.', example='198877623'),
    }
  ](name='TaskList', description='The list of tasks.'),
}

model DescribeSQLPlanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanTaskResponseBody(name='body'),
}

async function describeSQLPlanTask(request: DescribeSQLPlanTaskRequest): DescribeSQLPlanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLPlanTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchemasRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSchemasResponseBody = {
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
    }
  ](name='Schema')
  }(name='Items', description='The databases.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchemasResponseBody(name='body'),
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1rqvm70uh2****', position='Query'),
  DBName?: string(name='DBName', description='The name of the database.', example='adb_demo', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.

>  The end time must be later than the start time. The specified time range must be less than seven days.', example='2021-05-27T16:00:00Z', position='Query'),
  order?: string(name='Order', description='The order in which to sort the retrieved entries by field. Specify this parameter in the JSON format. The value is an ordered array that uses the order of the input array and contains `Field` and `Type`. Example: `[{"Field":"ExecutionStartTime","Type":"Desc"},{"Field":"ScanRows","Type":"Asc"}]`.

*   `Field`: the field that is used to sort the retrieved entries. Valid values:

    *   **HostAddress**: the IP address of the client that is used to connect to the database.
    *   **UserName**: the username.
    *   **ExecutionStartTime**: the start time of the query execution.
    *   **QueryTime**: the amount of time consumed to execute the SQL statement.
    *   **PeakMemoryUsage**: the maximum memory usage when the SQL statement is executed.
    *   **ScanRows**: the number of rows to be scanned from a data source in the task.
    *   **ScanSize**: the amount of data to be scanned.
    *   **ScanTime**: the total amount of time consumed to scan data.
    *   **PlanningTime**: the amount of time consumed to generate execution plans.
    *   **WallTime**: the accumulated CPU Time values of all operators in the query on each node.
    *   **ProcessID**: the ID of the process.

*   `Type`: the sorting type of the retrieved entries. Valid values:

    *   **Desc**: descending order
    *   **Asc**: ascending order', example='[{"Field":"ExecutionStartTime","Type":"Desc"},{"Field":"ScanRows","Type":"Asc"}]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: 30.', example='30', minimum=30, maximum=100, position='Query'),
  processID?: string(name='ProcessID', description='The ID of the process.', example='2021052716044317201616624903453******', position='Query'),
  range?: string(name='Range', description='The range conditions used to filter specified fields, including `Max` and `Min`. Specify this parameter in the JSON format. Example: `[{"Field":"ScanSize","Min":"1000000","Max":"10000000"},{"Field":"QueryTime","Min":"1000","Max":"10000"}]`.

`Field`: the field to be filtered. Valid values:

*   **ScanSize**: the amount of data to be scanned. Unit: KB.
*   **QueryTime**: the amount of time consumed to execute the statement. Unit: milliseconds.
*   **PeakMemoryUsage**: the maximum memory usage when the SQL statement is executed. Unit: KB.

>  `Min` indicates the minimum value of the query range (left operand). `Max` indicates the maximum value of the query range (right operand). Max and Min are both of the String type.', example='[{"Field":"ScanSize","Min":"1000000","Max":"10000000"},{"Field":"QueryTime","Min":"1000","Max":"10000"}]', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time must be in UTC.', example='2021-05-20T16:00:00Z', position='Query'),
  state?: string(name='State', description='The state of the query. Valid values:

*   **Successed**: successful
*   **Failed**: failed', example='Successed', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1rqvm70uh2****'),
  items?: {
    slowLogRecord?: [ 
    {
      DBName?: string(name='DBName', description='The name of the database.', example='adb_demo'),
      executionStartTime?: string(name='ExecutionStartTime', description='The time when the execution started. The time follows the ISO 8601 standard in the *yyyy-MM-ddTHH:mm:ssZ* format. The time is displayed in UTC.', example='2021-05-27T08:04:43Z'),
      hostAddress?: string(name='HostAddress', description='The IP address of the client that is used to connect to the database.', example='172.16.**.**'),
      outputSize?: string(name='OutputSize', description='The amount of output data in the task. Unit: bytes.', example='0.009'),
      parseRowCounts?: long(name='ParseRowCounts', description='The number of rows parsed by the SQL statement.', example='0'),
      peakMemoryUsage?: string(name='PeakMemoryUsage', description='The maximum memory usage when the SQL statement is executed. Unit: KB.', example='431.447'),
      planningTime?: long(name='PlanningTime', description='The amount of time consumed to generate execution plans. Unit: milliseconds.', example='12'),
      processID?: string(name='ProcessID', description='The ID of the process.', example='2021052716044317201616624903453******'),
      queryTime?: long(name='QueryTime', description='The time consumed to execute the SQL statement. Unit: milliseconds.', example='2344'),
      queueTime?: long(name='QueueTime', description='The queuing duration before the query is executed. Unit: milliseconds.', example='0'),
      returnRowCounts?: long(name='ReturnRowCounts', description='The number of rows returned by the SQL statement.', example='1'),
      SQLText?: string(name='SQLText', description='Details of the SQL statement.', example='INSERT OVERWRITE INTO hdfs_import_external\\nSELECT *\\nFROM adb_hdfs_import_source'),
      scanRows?: long(name='ScanRows', description='The number of rows scanned from a data source in the task.', example='3'),
      scanSize?: string(name='ScanSize', description='The amount of scanned data. Unit: KB.', example='0.035'),
      scanTime?: long(name='ScanTime', description='The total amount of time consumed to scan data. It is an accumulated value collected from multiple TableScanNode nodes. Unit: milliseconds.', example='10'),
      state?: string(name='State', description='The execution state of the SQL statement.', example='SUCCESSED'),
      userName?: string(name='UserName', description='The username.', example='test'),
      wallTime?: long(name='WallTime', description='The accumulated CPU Time value of all operators collected from all nodes. Unit: milliseconds.', example='6100'),
    }
  ](name='SlowLogRecord')
  }(name='Items', description='Details of the slow query logs.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7559209-7EC3-41E1-8F78-156990******'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogTrendRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.', example='am-uf6wjk5xxxxxxxxxx', position='Query'),
  DBName?: string(name='DBName', description='The name of the database.', example='test_db', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The maximum time range that can be specified is seven days. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-06-20T16:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-06-01T16:00:00Z', position='Query'),
}

model DescribeSlowLogTrendResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-uf6wjk5xxxxxxxxxx'),
  endTime?: string(name='EndTime', description='The end time of the query. The end time must be later than the start time. The maximum time range that can be specified is seven days. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-20T16:00:00Z'),
  items?: {
    slowLogTrendItem?: [ 
    {
      key?: string(name='Key', description='The trend of slow query logs. The value is AnalyticDB_SlowLogTrend.', example='AnalyticDB_SlowLogTrend'),
      series?: {
        seriesItem?: [ 
        {
          name?: string(name='Name', description='The name of the performance metric.', example='slow_log_trend'),
          values?: string(name='Values', description='The values of the performance metric.', example='[ [ "2019-05-06T05:17:46.487Z", 5 ], [ "2019-05-06T05:18:20.784Z", 5 ] ]'),
        }
      ](name='SeriesItem')
      }(name='Series', description='The performance metrics.'),
      unit?: string(name='Unit', description='The unit of performance metrics.', example='%'),
    }
  ](name='SlowLogTrendItem')
  }(name='Items', description='The information about the trend of slow query logs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-01T16:00:00Z'),
}

model DescribeSlowLogTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogTrendResponseBody(name='body'),
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSqlPatternRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the details of all AnalyticDB for MySQL clusters within a specified region, including cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  order?: string(name='Order', description='The order by which to sort query results. Specify the parameter value in the JSON string format. Example: `[{"Field":"Pattern","Type":"Asc"}]`.

*   `Field` indicates the field that is used to sort the retrieved entries. Valid values:

    *   `Pattern` : the SQL pattern.
    *   `AccessIP`: the IP address of the client.
    *   `User`: the username.
    *   `QueryCount`: the total number of queries.
    *   `AvgPeakMemory`: the average peak memory. Unit: KB.
    *   `MaxPeakMemory`: the maximum peak memory. Unit: KB.
    *   `AvgCpuTime`: the average CPU time. Unit: milliseconds.
    *   `MaxCpuTime`: the maximum CPU time. Unit: milliseconds.
    *   `AvgStageCount`: the average number of stages.
    *   `MaxStageCount`: the maximum number of stages.
    *   `AvgTaskCount`: the average number of tasks.
    *   `MaxTaskCount`: the maximum number of tasks.
    *   `AvgScanSize`: the average scan size. Unit: KB.
    *   `MaxScanSize`: the maximum scan size. Unit: KB.

*   `Type` indicates the sorting method. Valid values:

    *   `Asc`: ascending order.
    *   `Desc`: descending order.

> *   If this parameter is not specified, query results are sorted in ascending order of `Pattern`.
> *   If you need to sort query results by `AccessIP`, you must set the `Type` parameter to `accessip`. If you need to sort query results by `User`, you must leave the `Type` parameter empty or set it to `user`.', example='[{"Field":"Pattern","Type":"Asc"}]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value must be a positive integer. Default value: **30**.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including region IDs.', example='cn-hangzhou', position='Query'),
  sqlPattern?: string(name='SqlPattern', description='The keyword contained in the SQL pattern.

>  If this parameter is not specified, all SQL patterns within an AnalyticDB for MySQL cluster for a date specified by `StartTime` are returned.', example='SELECT', position='Query'),
  startTime: string(name='StartTime', description='The date to query. Specify the time in the *yyyy-MM-dd* format. The time must be in UTC.

>  Only data for the last 30 days can be queried.', example='2021-08-30', position='Query'),
  type?: string(name='Type', description='The dimension by which to aggregate the SQL pattern. Valid values:

*   `user`: the user.
*   `accessip`: the IP address of the client.

>  If this parameter is not specified, the SQL pattern is aggregated by `user`.', example='user', position='Query'),
}

model DescribeSqlPatternResponseBody = {
  items?: [ 
    {
      accessIP?: string(name='AccessIP', description='The IP address of the client.

>  This parameter is returned only when the `Type` parameter is set to `accessip`.', example='100.104.***.***'),
      avgCpuTime?: string(name='AvgCpuTime', description='The average CPU time. Unit: milliseconds.', example='1.0625'),
      avgPeakMemory?: string(name='AvgPeakMemory', description='The average peak memory. Unit: KB.', example='240048'),
      avgScanSize?: string(name='AvgScanSize', description='The average scan size. Unit: KB.', example='0'),
      avgStageCount?: string(name='AvgStageCount', description='The average number of stages.', example='2'),
      avgTaskCount?: string(name='AvgTaskCount', description='The average number of tasks.', example='2'),
      instanceName?: string(name='InstanceName', description='The ID of the cluster.', example='am-bp1r053byu48p****'),
      maxCpuTime?: string(name='MaxCpuTime', description='The maximum CPU time. Unit: milliseconds.', example='17'),
      maxPeakMemory?: string(name='MaxPeakMemory', description='The maximum peak memory. Unit: KB.', example='480096'),
      maxScanSize?: string(name='MaxScanSize', description='The maximum scan size. Unit: KB.', example='0'),
      maxStageCount?: string(name='MaxStageCount', description='The maximum number of stages.', example='2'),
      maxTaskCount?: string(name='MaxTaskCount', description='The maximum number of tasks.', example='2'),
      pattern?: string(name='Pattern', description='The SQL pattern.', example='SELECT table_name, table_schema AS schema_name, create_time, create_time AS last_ddl_time, table_comment AS description , ceil((data_length + index_length) / ? / ?) AS store_capacity , data_length AS data_bytes, index_length AS index_bytes, table_collation AS collation, auto_increment, table_rows AS num_rows , engine FROM information_schema.tables WHERE table_type != ? AND table_schema = ? AND table_name IN (?) ORDER BY 1'),
      queryCount?: string(name='QueryCount', description='The total number of queries.', example='16'),
      reportDate?: string(name='ReportDate', description='The query date.', example='2021-08-30'),
      user?: string(name='User', description='The username.

>  This parameter is returned only when the `Type` parameter is left empty or set to `user`.', example='test_acc'),
    }
  ](name='Items', description='Details about the SQL pattern.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B6F2D1B4-2C9F-5622-B424-5E7965******'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeSqlPatternResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlPatternResponseBody(name='body'),
}

async function describeSqlPattern(request: DescribeSqlPatternRequest): DescribeSqlPatternResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSqlPattern', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableAccessCountRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the details of all AnalyticDB for MySQL clusters within a specified region, including cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  order?: string(name='Order', description='The order by which to sort query results. Specify the parameter value in the JSON string format. Example: `[{"Field":"TableSchema","Type":"Asc"}]`.

*   `Field` indicates the field that is used to sort the retrieved entries. Valid values:

    *   `TableSchema`: the name of the database to which the table belongs.
    *   `TableName`: the name of the table.
    *   `AccessCount`: the number of accesses to the table.

*   `Type` indicates the sorting method. Valid values:

    *   `Asc`: ascending order.
    *   `Desc`: descending order.

>  If this parameter is not specified, query results are sorted in ascending order of the database to which a specific table belongs.', example='[{"Field":"TableSchema","Type":"Asc"}]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value must be a positive integer. Default value: **30**.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~143074~~) operation to query the regions and zones supported by AnalyticDB for MySQL, including region IDs.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The date to query. Specify the time in the *yyyy-MM-dd* format. The time must be in UTC.

>  Only data for the last 30 days can be queried.', example='2021-08-30', position='Query'),
  tableName?: string(name='TableName', description='The name of the specific table.

>  If this parameter is not specified, the number of accesses to all tables within the specified cluster for a specified date is returned.', example='CUSTOMER', position='Query'),
}

model DescribeTableAccessCountResponseBody = {
  items?: [ 
    {
      accessCount?: string(name='AccessCount', description='The number of accesses to the table.', example='6'),
      instanceName?: string(name='InstanceName', description='The ID of the cluster to which the table belongs.', example='am-bp1r053byu48p****'),
      reportDate?: string(name='ReportDate', description='The date when the table was used.', example='2021-08-30'),
      tableName?: string(name='TableName', description='The name of the table.', example='CUSTOMER'),
      tableSchema?: string(name='TableSchema', description='The database to which the table belongs.', example='tpch'),
    }
  ](name='Items', description='Details about the table usage.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C242707A-01D1-54DA-A5F6-671557******'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeTableAccessCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableAccessCountResponseBody(name='body'),
}

async function describeTableAccessCount(request: DescribeTableAccessCountRequest): DescribeTableAccessCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableAccessCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableDetailRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database.', example='adb_demo', position='Query'),
  tableName: string(name='TableName', description='The name of the table.', example='test', position='Query'),
}

model DescribeTableDetailResponseBody = {
  avgSize?: long(name='AvgSize', description='The average number of rows in partitions.', example='0'),
  items?: {
    shard?: [ 
    {
      id?: int32(name='Id', description='The ID of the partition. Only the numeric part of the partition name is returned.', example='1'),
      size?: long(name='Size', description='The number of rows in the table.', example='0'),
    }
  ](name='Shard')
  }(name='Items', description='The list of partitions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeTableDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableDetailResponseBody(name='body'),
}

async function describeTableDetail(request: DescribeTableDetailRequest): DescribeTableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablePartitionDiagnoseRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 30. Valid values:

*   30
*   50
*   100', example='30', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTablePartitionDiagnoseResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47'),
  items?: [ 
    {
      partitionDetail?: string(name='PartitionDetail', description='Details of the inappropriate partitions.', example='202005,202006'),
      partitionNumber?: int32(name='PartitionNumber', description='The number of partitions.', example='2'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      tableName?: string(name='TableName', description='The table name.', example='test_table'),
    }
  ](name='Items', description='The information of tables.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  suggestMaxRecordsPerPartition?: long(name='SuggestMaxRecordsPerPartition', description='The recommended maximum number of rows in each list partition.', example='640000000'),
  suggestMinRecordsPerPartition?: long(name='SuggestMinRecordsPerPartition', description='The recommended minimum number of rows in each list partition.', example='64000000'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeTablePartitionDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablePartitionDiagnoseResponseBody(name='body'),
}

async function describeTablePartitionDiagnose(request: DescribeTablePartitionDiagnoseRequest): DescribeTablePartitionDiagnoseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTablePartitionDiagnose', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableStatisticsRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query details about all AnalyticDB for MySQL clusters in a specific region, including cluster IDs.', example='am-****************', position='Query'),
  order?: string(name='Order', description='The order in which to sort the retrieved records by field. Specify this value in the JSON format. The value is an ordered array that uses the order of the input array and contains `Field` and `Type`. Example: `[{ "Field":"TableName", "Type":"Asc" }]`.

*   In the example, `Field` indicates the field that is used to sort the retrieved records. Set the value of Field to `TableName`.

*   `Type` indicates the sort type. Valid values (case-insensitive):

    *   **Desc**: The entries are sorted in descending order.
    *   **Asc**: The entries are sorted in ascending order.', example='[ { "Field":"TableName", "Type":"Asc" } ]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: 30.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTableStatisticsResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-****************'),
  items?: {
    tableStatisticRecords?: [ 
    {
      coldDataSize?: long(name='ColdDataSize', description='The total amount of cold data. Unit: byte.

>  The parameter is returned only when the engine version of the cluster is 3.1.3.4 or later.', example='0'),
      dataSize?: long(name='DataSize', description='The amount of data in the table. Unit: byte.', example='15592'),
      indexSize?: long(name='IndexSize', description='The amount of data in indexes. Unit: byte.', example='3076'),
      partitionCount?: long(name='PartitionCount', description='The number of partitions.', example='1'),
      primaryKeyIndexSize?: long(name='PrimaryKeyIndexSize', description='The amount of data in primary key indexes. Unit: byte.', example='16340'),
      rowCount?: long(name='RowCount', description='The number of rows in the table.', example='3'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_schema'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
    }
  ](name='TableStatisticRecords')
  }(name='Items', description='Details about table statistics.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C4433FF-5D3A-4C3E-A19C-6D93B2******'),
  totalCount?: string(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeTableStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableStatisticsResponseBody(name='body'),
}

/**
  * >  For more information about table statistics, see [View monitoring information of resource pools](~~188721~~).
  *
 */
async function describeTableStatistics(request: DescribeTableStatisticsRequest): DescribeTableStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database.', example='adb_demo', position='Query'),
}

model DescribeTablesResponseBody = {
  items?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='adb_demo'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
    }
  ](name='Table')
  }(name='Items', description='The list of tables.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskInfoRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: int32(name='TaskId', description='The ID of the task.', example='225685759', position='Query'),
}

model DescribeTaskInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskInfo?: {
    beginTime?: string(name='BeginTime', description='The start time of the task. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.', example='2020-01-07T07:39:56Z'),
    finishTime?: string(name='FinishTime', description='The end time of the task. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.', example='2020-01-07T08:08:50Z'),
    progress?: string(name='Progress', description='The progress of the task. Unit: %.', example='100'),
    status?: string(name='Status', description='The status of the task.

*   Waiting
*   Running
*   Finished
*   Failed
*   Closed
*   Cancel
*   Retry
*   Pause
*   Stop', example='Finished'),
    taskId?: int32(name='TaskId', description='The ID of the task.', example='225685759'),
  }(name='TaskInfo', description='The description of the task.'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model DetachUserENIRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query cluster IDs.', example='am-bp11q28kvl688****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachUserENIResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DetachUserENIResponse = {
  headers: map[string]string(name='headers'),
  body: DetachUserENIResponseBody(name='body'),
}

/**
  * You can call this operation only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition.
  *
 */
async function detachUserENI(request: DetachUserENIRequest): DetachUserENIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachUserENI', 'POST', '/', 'json', false, 'json', request);
}

model DisableAdviceServiceRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-uf67culrr26q2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-shanghai', position='Query'),
}

model DisableAdviceServiceResponseBody = {
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **Success** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='57EC6CCA-A582-572C-A33D-F61845CBC03C'),
}

model DisableAdviceServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAdviceServiceResponseBody(name='body'),
}

async function disableAdviceService(request: DisableAdviceServiceRequest): DisableAdviceServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAdviceService', 'POST', '/', 'json', false, 'json', request);
}

model DownloadDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp', description='The source IP addresses.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='106.11.XX.XX', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters within a region, including cluster IDs.', example='am-bp1r053byu48p****', position='Query'),
  database?: string(name='Database', description='The name of the database on which the SQL statements are executed.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='adb_demo', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> 

*   The end time must be later than the start time.

*   The maximum time range that can be specified is 24 hours.', example='1625220213000', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is used for the query.', example='select', position='Query'),
  lang?: string(name='Lang', description='The language of file titles and error messages. Valid values:

*   **zh** (default): simplified Chinese.
*   **en**: English.
*   **ja**: Japanese.
*   **zh-tw**: traditional Chinese.', example='zh', position='Query'),
  maxPeakMemory?: long(name='MaxPeakMemory', description='The maximum peak memory of the SQL statements. Unit: bytes.', example='88000000', position='Query'),
  maxScanSize?: long(name='MaxScanSize', description='The maximum scan size of the SQL statements. Unit: bytes.', example='110000000', position='Query'),
  minPeakMemory?: long(name='MinPeakMemory', description='The minimum peak memory of the SQL statements. Unit: bytes.', example='88000000', position='Query'),
  minScanSize?: long(name='MinScanSize', description='The minimum scan size of the SQL statements. Unit: bytes.', example='100000000', position='Query'),
  queryCondition: string(name='QueryCondition', description='The SQL query condition, which can be a combination of the `Type` and `Value` fields or a combination of the Type, `Min`, and `Max` fields. Specify the condition in the JSON format. `Type` specifies the SQL query dimension. Valid values for Type: `maxCost`, `status`, and `cost`. `Value`, `Min`, or `Max` specifies the SQL query range for the dimension. Valid values:

*   `{"Type":"maxCost","Value":"100"}`: queries the top 100 most time-consuming SQL statements. Set `Value` to 100.
*   `{"Type":"status","Value":"finished"}`: queries executed SQL statements. You can set `Value` to `running` to query SQL statements that are being executed. You can also set Value to `failed` to query SQL statements that failed to be executed.
*   `{"Type":"cost","Min":"10","Max":"200"}`: queries SQL statements whose execution durations are in the range of 10 to 200 milliseconds. You can also customize the maximum and minimum execution durations.', example='{"Type":"status","Value":"finished"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroup?: string(name='ResourceGroup', description='The resource group to which the SQL statements belong.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='user_default', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> Only data within the last 14 days can be queried.', example='1625220210000', position='Query'),
  userName?: string(name='UserName', description='The username that is used to execute the SQL statements.

> You can call the [DescribeDiagnosisDimensions](~~308210~~) operation to query the resource group, database name, username, and source IP address of the SQL statements to be queried.', example='test_user', position='Query'),
}

model DownloadDiagnosisRecordsResponseBody = {
  downloadId?: int32(name='DownloadId', description='The ID of the download task.', example='68'),
  requestId?: string(name='RequestId', description='The request ID.', example='D4ACF4E0-2952-3A87-9A2C-474058******'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model DryRunClusterRequest {
  computeResource: string(name='ComputeResource', description='The specifications of computing resources.

> You can call the [DescribeComputeResource](~~469002~~) operation to query the specifications of computing resources.', example='32 Core 128 GB', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.

*   The description cannot start with `http://` or `https://`.
*   The description must be 2 to 256 characters in length', example='test', position='Query'),
  DBClusterId?: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

*   You can leave this parameter empty when you set Operation to **Buy**.
*   This parameter must be specified when you set Operation to **Modify**.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp1wyioad55bc****', position='Query'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType', description='The network type of the cluster. Set the value to **VPC**.', example='VPC', position='Query'),
  DBClusterVersion: string(name='DBClusterVersion', description='The version of the AnalyticDB for MySQL Data Warehouse Edition cluster. Set the value to **3.0**.', example='3.0', position='Query'),
  enableDefaultResourcePool?: boolean(name='EnableDefaultResourcePool', description='Specifies whether to enable the default resource group.

> If you leave this parameter empty, true is used.', example='true', position='Query'),
  operation: string(name='Operation', description='The type of the operation. Valid values:

*   **Buy**: purchases a cluster.
*   **Modify**: changes configurations of a cluster.', example='Buy', position='Query'),
  payType?: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The subscription type of the subscription cluster. Valid values:

*   **Year**: subscription on a yearly basis.
*   **Month**: subscription on a monthly basis.

> This parameter must be specified when PayType is set to Prepaid.', example='Year', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  storageResource: string(name='StorageResource', description='The amount of reserved storage resources.', example='1', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the subscription cluster.

*   Valid values when Period is set to Year: 1, 2, 3, and 5 (integer).
*   Valid values when Period is set to Month: 1 to 11 (integer).

> 

*   This parameter must be specified when PayType is set to Prepaid.

*   Longer subscription durations offer more savings. Purchasing a cluster for one year is more cost-effective than purchasing the cluster for 10 or 11 months.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The virtual private cloud (VPC) ID of the cluster.', example='vpc-bp1at5ze0t5u3xtqn****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the cluster.', example='vsw-bp1aadw9k19x6cis9****', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the cluster.

> You can call the [DescribeRegions](~~143074~~) operation to query the most recent zone list.', example='cn-hangzhou-h', position='Query'),
}

model DryRunClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
  success?: boolean(name='Success', description='Indicates whether the dry run succeeds. Valid values:

*   **true**
*   **false**', example='true'),
}

model DryRunClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DryRunClusterResponseBody(name='body'),
}

async function dryRunCluster(request: DryRunClusterRequest): DryRunClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DryRunCluster', 'POST', '/', 'json', false, 'json', request);
}

model EnableAdviceServiceRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of Data Warehouse Edition (V3.0) clusters.', example='am-bp1q10xxzq2z4****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-shanghai', position='Query'),
}

model EnableAdviceServiceResponseBody = {
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **Success** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E1745C03-7CCE-55CF-932E-08121AAFA6AF'),
}

model EnableAdviceServiceResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAdviceServiceResponseBody(name='body'),
}

async function enableAdviceService(request: EnableAdviceServiceRequest): EnableAdviceServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAdviceService', 'POST', '/', 'json', false, 'json', request);
}

model GrantOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query cluster IDs.', example='am-bp1565u55p32****', position='Query'),
  expiredTime: string(name='ExpiredTime', description='The expiration time of the service account permissions. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-11-30T00:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privileges: string(name='Privileges', description='The name of the permissions. Valid values:

*   **Control**: configuration permissions. The service account is granted permissions to query and modify cluster configurations.
*   **Data**: data permissions. The service account is granted permissions to query schemas, indexes, and SQL statements.', example='Control', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A438072A-E2E7-5509-9A3F-66293512A820'),
}

model GrantOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantOperatorPermissionResponseBody(name='body'),
}

/**
  * If you need Alibaba Cloud technical support to perform operations on your AnalyticDB for MySQL cluster, you must grant permissions to the service account of your cluster. When the validity period of the authorization ends, the granted permissions are automatically revoked.
  *
 */
async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model KillProcessRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processId?: string(name='ProcessId', description='The unique ID of the process. You can call the [DescribeProcessList](~~190092~~) operation to obtain the ID.', example='202011191048151921681492420315100****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model KillProcessResponse = {
  headers: map[string]string(name='headers'),
  body: KillProcessResponseBody(name='body'),
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcess', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='212db86sca4384811e0b5e8707ec21345', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The cluster ID. You can specify multiple cluster IDs. Valid values of N: 1 to 50.

> You must specify at least one of the following parameters: ResourceId.N and Tag.N.Key.', example='am-bp1l20nxxxxxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **cluster**.', example='cluster', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify multiple tag keys. The tag key cannot be an empty string. Valid values of N: 1 to 20.

> You must specify at least one of the following parameters: ResourceId.N and Tag.N.Key.', example='testkey1'),
      value?: string(name='Value', description='The value of the tag. You can specify multiple tag values. The tag value can be an empty string. Valid values of N: 1 to 20.', example='testvalue1'),
    }
  ](name='Tag', description='The tags that are added to clusters.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='212db86sca4384811e0b5e8707ec21345'),
  requestId?: string(name='RequestId', description='The request ID.', example='184DE106-CB2C-4DD2-B57F-396652E6C8F8'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The cluster ID.', example='am-bp1l20nxxxxxxxxxx'),
      resourceType?: string(name='ResourceType', description='The type of the resource. A value of cluster indicates an AnalyticDB for MySQL cluster.', example='cluster'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='testkey1'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='testvalue1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The tags that are added to clusters.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model MigrateDBClusterRequest {
  DBClusterId: string(name='DBClusterId', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model MigrateDBClusterResponseBody = {
  requestId?: string(name='RequestId', example='F0983B43-B2EC-536A-8791-142B5CF1E9B6'),
}

model MigrateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateDBClusterResponseBody(name='body'),
}

async function migrateDBCluster(request: MigrateDBClusterRequest): MigrateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', description='The description of the account. The description must meet the following requirements:

*   The description must start with a letter.
*   The description can contain letters, digits, underscores (\\_), and hyphens (-).
*   The description cannot start with `http://` or `https://`.
*   The description must be 2 to 256 characters in length.', example='AccDesc', position='Query'),
  accountName: string(name='AccountName', description='The name of the account.', example='testacc', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAuditLogConfigRequest {
  auditLogStatus: string(name='AuditLogStatus', description='The status of SQL audit. Valid values:

*   **on**: SQL audit is enabled.
*   **off**: SQL audit is disabled.', example='on', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-t4nj8619bz2w3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  updateSucceed?: boolean(name='UpdateSucceed', description='Indicates whether the status of SQL audit is updated. Valid values:

*   **true**: The status of SQL audit is updated.
*   **false**: The status of SQL audit is not updated.', example='true'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoRenewAttributeRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1u389j9zjh5****', position='Query'),
  duration?: string(name='Duration', description='The renewal duration. Default value: **1**.

*   Valid values when PeriodUnit is set to **Month**: 1 to 11. Data type: INTEGER.

*   Valid values when PeriodUnit is set to **Year**: 1, 2, 3, and 5. Data type: INTEGER.

> Longer subscription periods offer more savings. Purchasing a cluster for one year is more cost-effective than purchasing the cluster for 10 or 11 months.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration. Default value: **Month**. Valid values:

*   **Year**
*   **Month**', example='Year', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster.

>  You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  renewalStatus?: string(name='RenewalStatus', description='The renewal status of the cluster. Valid values:

*   **AutoRenewal**: The cluster is automatically renewed.
*   **Normal**: The cluster is manually renewed.
*   **NotRenewal**: The cluster is not renewed.', example='AutoRenewal', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4CE6DF97-AEA4-484F-906F-C407EE3770EB'),
}

model ModifyAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoRenewAttributeResponseBody(name='body'),
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='The number of days for which to retain full backup files. Valid values: 7 to 730.

>  If you leave this parameter empty, the default value 7 is used.', example='30', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  enableBackupLog?: string(name='EnableBackupLog', description='Specifies whether to enable real-time log backup. Valid values:

*   **Enable**

*   **Disable**

> If you leave this parameter empty, the default value Enable is used.', example='Enable', position='Query'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod', description='The number of days for which to retain log backup files. Valid values: 7 to 730.

>  If you leave this parameter empty, the default value 7 is used.', example='30', minimum=7, maximum=730, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='The days of the week on which to perform full backup. Separate multiple values with commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**

>  To ensure data security, we recommend that you specify at least two values.', example='Monday,Wednesday,Friday,Sunday', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', description='The start time of the full backup within a time range. Specify the time range in the HH:mmZ-HH:mmZ format. The time must be in UTC.

>  The time range is 1 hour.', example='00:00Z-01:00Z', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterConnectionStringRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of public endpoints.

*   The prefix can contain lowercase letters, digits, and hyphens (-). It must start with a lowercase letter.
*   The prefix can be up to 30 characters in length.', example='test-123', position='Query'),
  currentConnectionString: string(name='CurrentConnectionString', description='The current public endpoint of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusterNetInfo](~~143384~~) operation to query the public endpoint of the cluster.', example='am-bp18934i73vb****.ads.aliyuncs.com', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp18934i73vb****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', description='The port number. Set the value to **3306**.', example='3306', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyClusterConnectionStringResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='370D09FD-442A-5225-AAD3-7362CAE39177'),
}

model ModifyClusterConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterConnectionStringResponseBody(name='body'),
}

async function modifyClusterConnectionString(request: ModifyClusterConnectionStringRequest): ModifyClusterConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterRequest {
  computeResource?: string(name='ComputeResource', description='The computing resources of the cluster. You can call the [DescribeAvailableResource](~~190632~~) operation to query the computing resources that are available within a region.

> This parameter must be specified when Mode is set to Flexible.', example='32Core128GBNEW', position='Query'),
  DBClusterCategory?: string(name='DBClusterCategory', description='The edition of the cluster. Valid values:

*   **Cluster**: reserved mode for Cluster Edition.
*   **MixedStorage**: elastic mode for Cluster Edition.

> If you set DBClusterCategory to Cluster, you must set Mode to Reserver. If you set DBClusterCategory to MixedStorage, you must set Mode to Flexible. Otherwise, you fail to change the specifications of the cluster.', example='MixedStorage', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.', example='am-bp1u8c0mgfg58****', position='Query'),
  DBNodeClass?: string(name='DBNodeClass', description='The node specifications of the cluster. Valid values:

*   **C8**
*   **C32**

> This parameter must be specified when Mode is set to Reserver.', example='C32', position='Query'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount', description='The number of node groups. Valid values: 1 to 200.

> This parameter must be specified when Mode is set to Reserver.', example='2', position='Query'),
  DBNodeStorage?: string(name='DBNodeStorage', description='The storage capacity per node. Unit: GB.

*   Valid values when DBClusterClass is set to C8: 100 to 2000.
*   Valid values when DBClusterClass is set to C32: 100 to 8000.

> 

*   This parameter must be specified when Mode is set to Reserver.

*   The storage capacity less than 1,000 GB increases in 100 GB increments. The storage capacity greater than 1,000 GB increases in 1,000 GB increments.', example='200', position='Query'),
  diskPerformanceLevel?: string(name='DiskPerformanceLevel', description='The enhanced SSD (ESSD) performance level of the cluster. Valid values: PL1 PL2 PL3', example='PL1', position='Query'),
  elasticIOResource?: int32(name='ElasticIOResource', description='The number of EIUs. The number of EIUs that you can purchase varies based on the single-node EIU specifications.

*   If the single-node EIU specifications are 8 cores and 64 GB, you can purchase up to 32 EIUs.
*   If the single-node EIU specifications are 12 cores and 96 GB, you can purchase up to 16 EIUs.', example='2', minimum=0, maximum=200, position='Query'),
  elasticIOResourceSize?: string(name='ElasticIOResourceSize', description='The single-node specifications of an elastic I/O unit (EIU). Valid values:

*   **8Core64GB**: If you set the parameter to **8Core64GB**, the specifications of an EIU are 24 cores and 192 GB memory.
*   **12Core96GB**: If you set the parameter to **12Core96GB**, the specifications of an EIU are 36 cores and 288 GB memory.

> This parameter is available only when the cluster meets the following conditions:

*   The cluster is in elastic mode.

*   If the cluster resides in the China (Guangzhou), China (Shenzhen), China (Hangzhou), China (Shanghai), China (Qingdao), China (Beijing), or China (Zhangjiakou) region, the cluster has 16 cores and 64 GB memory or higher specifications.

*   If the cluster resides in another region, the cluster has 32 cores and 128 GB memory or higher specifications.', example='8Core64GB', position='Query'),
  executorCount?: string(name='ExecutorCount', description='N/A', example='None', position='Query'),
  mode?: string(name='Mode', description='The mode of the cluster. Valid values:

*   **Reserver**: the reserved mode.
*   **Flexible**: the elastic mode.', example='Flexible', position='Query'),
  modifyType?: string(name='ModifyType', description='The change type. Valid values:

*   **Upgrade**
*   **Downgrade**', example='Upgrade', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the cluster. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageResource?: string(name='StorageResource', description='N/A', example='None', position='Query'),
}

model ModifyDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-bp1u8c0mgfg58****'),
  orderId?: string(name='OrderId', description='The order ID.', example='2035629****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', description='The attribute of the whitelist. This parameter is empty by default.

The IP address whitelists that have the hidden attribute are not displayed in the AnalyticDB for MySQL console. These IP address whitelists are used to access Alibaba Cloud services such as Data Transmission Service (DTS) and PolarDB-X.', example='hidden', position='Query'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', description='The name of the IP address whitelist to be modified. Default value: Default.

The name of an IP address whitelist must be 2 to 32 characters in length. The name must contain lowercase letters, digits, and underscores (\\_). The name must start with a lowercase letter and end with a digit or lowercase letter.

You can create up to 50 whitelists for a cluster.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  modifyMode?: string(name='ModifyMode', description='The method used to modify the whitelist. Valid values:

*   Cover: overwrites the original IP address whitelist.
*   Append: adds one or more IP addresses.
*   Delete: deletes one or more IP addresses.

Default value: Cover.', example='Cover', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIps: string(name='SecurityIps', description='The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The following formats are supported:

*   IP addresses. Example: 10.23.12.24.
*   CIDR blocks. Example: 10.23.12.24/24. 24 indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value within the range of 1 to 32.

This parameter must be specified unless the ModifyMode parameter is set to Delete.', example='10.23.12.24', position='Query'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
  taskId?: int32(name='TaskId', description='The ID of the task.', example='1564657730'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', description='The description of the cluster.

*   The description cannot start with `http://` or `https`.
*   The description must be 2 to 256 characters in length.', example='adb_test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp11q28kvl688****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the details of all AnalyticDB for MySQL clusters within a specific region, including cluster IDs.', example='am-bp111m2cfrdl****', position='Query'),
  maintainTime: string(name='MaintainTime', description='The maintenance window of the cluster. It is in the hh:mmZ-hh:mmZ format.

>  The maintenance window lasts only 1 hour. Specify the beginning and end of the time range on the hour.', example='22:00Z-23:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterPayTypeRequest {
  dbClusterId: string(name='DbClusterId', description='The cluster ID.', example='am-bp11q28kvl688****', position='Query'),
  payType: string(name='PayType', description='The billing method. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The subscription type of the subscription cluster. Valid values:

*   **Year**: subscription on a yearly basis.
*   **Month**: subscription on a monthly basis.

> This parameter must be specified when PayType is set to Prepaid.', example='Year', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the subscription cluster.

*   Valid values when Period is set to Year: 1, 2, 3, and 5 (integer).
*   Valid values when Period is set to Month: 1 to 11 (integer).

> 

*   This parameter must be specified when PayType is set to Prepaid.

*   Longer subscription durations offer more savings. Purchasing a cluster for one year is more cost-effective than purchasing the cluster for 10 or 11 months.', example='1', minimum=1, maximum=9, position='Query'),
}

model ModifyDBClusterPayTypeResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='am-bp11q28kvl688****'),
  orderId?: string(name='OrderId', description='The order ID.', example='2023532****'),
  payType?: string(name='PayType', description='The billing method. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Prepaid'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyDBClusterPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterPayTypeResponseBody(name='body'),
}

async function modifyDBClusterPayType(request: ModifyDBClusterPayTypeRequest): ModifyDBClusterPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterPayType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bpxxxxx', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group. For more information, see [View basic information of a resource group](~~151181#task-2398293~~ "This topic describes how to view basic information of a resource group, including the resource group ID, resource group name, and resource group display name.").', example='rg-acxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBClusterResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResourceGroupResponseBody(name='body'),
}

/**
  * Resource Management enables you to build an organizational structure for resources based on your business needs. You can use a resource directory, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](~~94475#concept-zyn-3p1-dhb~~ "Resource Management provides a collection of resource management services that support enterprise IT administration. The services include Resource Directory, Resource Group, and Tag. Resource Directory allows you to build an organizational structure for resources based on your business requirements. Resource Group and Tag allow you to hierarchically manage the resources. Resource Sharing allows you to share the resources among your accounts.")
  *
 */
async function modifyDBClusterResourceGroup(request: ModifyDBClusterResourceGroupRequest): ModifyDBClusterResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBResourceGroupRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName: string(name='GroupName', description='The name of the resource group.', example='test_group', position='Query'),
  groupType?: string(name='GroupType', description='The query execution mode. Valid values:

*   **interactive**
*   **batch**

>  For more information, see [Query execution modes](~~189502~~).', example='batch', position='Query'),
  nodeNum?: int32(name='NodeNum', description='The number of nodes. Default value: 0.

*   Each node is configured with the resources of 16 cores and 64 GB memory.
*   Make sure that the amount of resources of the nodes (Number of nodes × 16 cores and 64 GB memory) is less than or equal to the amount of unused resources of the cluster.', example='1', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBResourceGroupResponseBody(name='body'),
}

/**
  * ## Precautions
  * *   This operation is applicable only for elastic clusters of 32 cores or more.
  * *   The number of nodes cannot be changed for the default resource group USER_DEFAULT.
  *
 */
async function modifyDBResourceGroup(request: ModifyDBResourceGroupRequest): ModifyDBResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBResourcePoolRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp1ub9grke1****', position='Query'),
  nodeNum?: int32(name='NodeNum', description='The number of nodes.

*   Each node provides 16 cores and 64 GB memory.
*   The amount of resources that you want to add to or remove from the cluster cannot exceed the total amount of resources in the cluster.

> 

*   If you do not specify this parameter, the original value is retained.

*   You must specify at least one of the QueryType and NodeNum parameters.', example='2', minimum=0, maximum=4294967296, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', description='The name of the resource group.', example='test_group', position='Query'),
  queryType?: string(name='QueryType', description='The mode in which SQL statements are executed. Valid values:

*   **batch**
*   **interactive**

> If you do not specify this parameter, the original value is retained.', example='batch', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBResourcePoolResponseBody(name='body'),
}

/**
  * ###
  * *   You can call this operation only for elastic clusters of 32 cores or more.
  * *   You cannot change the number of nodes for the USER_DEFAULT resource group.
  *
 */
async function modifyDBResourcePool(request: ModifyDBResourcePoolRequest): ModifyDBResourcePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBResourcePool', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticPlanRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

> You can call the [DescribeDBClusters](~~129857~~) operation to query the IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a region.', example='am-bp1rqvm70uh2v****', position='Query'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable', description='Specifies whether the scaling plan takes effect. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay', description='The end date of the scaling plan. Specify the date in the yyyy-MM-dd format.', example='2022-12-09', position='Query'),
  elasticPlanName: string(name='ElasticPlanName', description='The name of the scaling plan.

*   The name must be 2 to 30 characters in length.
*   The name can contain letters, digits, and underscores (\\_).

> You can call the [DescribeElasticPlan](~~190596~~) operation to query the information about all scaling plans of a cluster, including the scaling plan names.', example='realtime', position='Query'),
  elasticPlanNodeNum?: int32(name='ElasticPlanNodeNum', description='The number of nodes that are involved in the scaling plan.

*   If ElasticPlanType is set to **worker**, you can set this parameter to 0 or leave this parameter empty.
*   If ElasticPlanType is set to **executorcombineworker** or **executor**, you must set this parameter to a value that is greater than 0.', example='0', minimum=0, maximum=10000, position='Query'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay', description='The start date of the scaling plan. Specify the date in the yyyy-MM-dd format.', example='2022-12-02', position='Query'),
  elasticPlanTimeEnd?: string(name='ElasticPlanTimeEnd', description='The restoration time of the scaling plan. Specify the time on the hour in the HH:mm:ss format. The interval between the scale-up time and the restoration time cannot be more than 24 hours.', example='10:00:00', position='Query'),
  elasticPlanTimeStart?: string(name='ElasticPlanTimeStart', description='The scale-up time of the scaling plan. Specify the time on the hour in the HH:mm:ss format.', example='8:00:00', position='Query'),
  elasticPlanType?: string(name='ElasticPlanType', description='The type of the scaling plan. Valid values:

*   **worker**: scales only elastic I/O resources.
*   **executor**: scales only computing resources.
*   **executorcombineworker** (default): scales both elastic I/O resources and computing resources by proportion.

> 

*   If you want to set this parameter to **executorcombineworker**, make sure that the cluster runs a minor version of 3.1.3.2 or later.

*   If you want to set this parameter to **worker** or **executor**, make sure that the cluster runs a minor version of 3.1.6.1 or later and a ticket is submitted. After your request is approved, you can set this parameter to **worker** or **executor**.', example='worker', position='Query'),
  elasticPlanWeeklyRepeat?: string(name='ElasticPlanWeeklyRepeat', description='The days of the week when you want to execute the scaling plan. Valid values: 0 to 6, which indicate Sunday to Saturday. Separate multiple values with commas (,).', example='1,2,3,4,5', position='Query'),
  elasticPlanWorkerSpec?: string(name='ElasticPlanWorkerSpec', description='The resource specifications that can be scaled up by the scaling plan. Valid values:

*   8 Core 64 GB (default)
*   16 Core 64 GB
*   32 Core 64 GB
*   64 Core 128 GB
*   12 Core 96 GB
*   24 Core 96 GB
*   52 Core 86 GB', example='16 Core 64 GB', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourcePoolName: string(name='ResourcePoolName', description='The name of the resource group.

> You can call the [DescribeDBResourceGroup](~~466685~~) operation to query the resource group name.', example='test', position='Query'),
}

model ModifyElasticPlanResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticPlanResponseBody(name='body'),
}

/**
  * You can call this operation only for AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters in elastic mode for Cluster Edition that have 32 cores or more.
  *
 */
async function modifyElasticPlan(request: ModifyElasticPlanRequest): ModifyElasticPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticPlan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  enableBackupLog: string(name='EnableBackupLog', description='Specifies whether to enable log backup. Valid values:

*   **Enable**
*   **Disable**', example='Enable', position='Query'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', description='The number of days for which to retain data backup files. Valid values: 7 to 730.

>  If you leave this parameter empty, the default value 7 is used.', example='30', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyLogBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogBackupPolicyResponseBody(name='body'),
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMaintenanceActionRequest {
  ids: string(name='Ids', description='The ID of the pending O\\&M event. You can specify multiple IDs to batch change the switchover time. Separate multiple IDs with commas (,).

> 

*   You can call the [DescribeMaintenanceAction](~~271738~~) operation to query the information about pending O\\&M events, including the event ID.

*   You can change the switchover time only for pending O\\&M events. The switchover time of historical O\\&M events cannot be changed. For more information about the status of pending and historical O\\&M events, see [DescribeMaintenanceAction](~~271738~~).', example='11111', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the pending O\\&M event occurs.

> 

*   You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime: string(name='SwitchTime', description='The point in time when you want the system to perform operations on the pending O\\&M event. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2021-07-09T22:00:00Z', position='Query'),
}

model ModifyMaintenanceActionResponseBody = {
  ids?: string(name='Ids', description='The O\\&M event ID.', example='11111'),
  requestId?: string(name='RequestId', description='The request ID.', example='7856CBE7-5BD0-4EE1-AC62-749392******'),
}

model ModifyMaintenanceActionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMaintenanceActionResponseBody(name='body'),
}

async function modifyMaintenanceAction(request: ModifyMaintenanceActionRequest): ModifyMaintenanceActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMaintenanceAction', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bp1xxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', description='The account of the database.', example='test_accout', position='Query'),
  accountPassword: string(name='AccountPassword', description='The account and password of the database.

*   The password must contain uppercase letters, lowercase letters, digits, and special characters.
*   Special characters include ! @ # $ % ^ & \\* () \\_ + - and =
*   A password must be 8 to 32 characters in length.', example='Test_accout1', position='Query'),
  accountType?: string(name='AccountType', description='Normal: standard account

Super: privileged account', example='Normal', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: int32(name='TaskId', description='The ID of the task.', example='1564657730'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RevokeOperatorPermissionRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model RevokeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeOperatorPermissionResponseBody(name='body'),
}

async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cluster. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the cluster to which to add a tag. If you want to add a tag to multiple clusters, click **Add** and enter the cluster IDs.

> 

*   You can add tags to up to 50 clusters at a time.

*   You can call the [DescribeDBClusters](~~129857~~) operation to query the information about all AnalyticDB for MySQL clusters within a region, including cluster IDs.', example='am-bp1xxx.1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the cluster. Set the value to **ALIYUN::ADB::CLUSTER**.', example='ALIYUN::ADB::CLUSTER', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag. If you want to add multiple tags to a single cluster at a time, click **Add** and enter tag keys and values.

> You can add up to 20 tags at a time.', example='testkey1'),
      value?: string(name='Value', description='The value of the tag. If you want to add multiple tags to a single cluster at a time, click **Add** and enter tag keys and values.

> You can add up to 20 tags at a time.', example='testvalue1'),
    }
  ](name='Tag', description='The tags to add to the cluster.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='863D51B7-5321-41D8-A0B6-A088B0450EFD'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDBResourceGroupWithUserRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the AnalyticDB for MySQL Data Warehouse Edition (V3.0) cluster.

>  You can call the [DescribeDBClusters](~~129857~~) operation to query the cluster IDs of all AnalyticDB for MySQL Data Warehouse Edition (V3.0) clusters within a specific region.', example='am-bp1ub9grke1****', position='Query'),
  groupName: string(name='GroupName', description='The name of the resource group.', example='test', position='Query'),
  groupUser: string(name='GroupUser', description='The database account with which the resource group is associated.', example='accout', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnbindDBResourceGroupWithUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model UnbindDBResourceGroupWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDBResourceGroupWithUserResponseBody(name='body'),
}

async function unbindDBResourceGroupWithUser(request: UnbindDBResourceGroupWithUserRequest): UnbindDBResourceGroupWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDBResourceGroupWithUser', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDBResourcePoolWithUserRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the cluster.', example='am-bpxxxxxxxx47', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', description='The name of the resource pool. You cannot unbind users from the default resource pool named USER_DEFAULT.', example='test', position='Query'),
  poolUser: string(name='PoolUser', description='The user bound to the resource pool.', example='testb', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnbindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model UnbindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDBResourcePoolWithUserResponseBody(name='body'),
}

async function unbindDBResourcePoolWithUser(request: UnbindDBResourcePoolWithUserRequest): UnbindDBResourcePoolWithUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDBResourcePoolWithUser', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to detach all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~143074~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='am-bp1xxx.1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the cluster. Set the value to `ALIYUN::ADB::CLUSTER`.', example='ALIYUN::ADB::CLUSTER', position='Query'),
  tagKey?: [ string ](name='TagKey', example='a', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69A58F-345C-4FDE-88E4-BF5189484043'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

