/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'adb.aliyuncs.com',
    cn-beijing = 'adb.aliyuncs.com',
    cn-hangzhou = 'adb.aliyuncs.com',
    cn-shanghai = 'adb.aliyuncs.com',
    cn-shenzhen = 'adb.aliyuncs.com',
    cn-hongkong = 'adb.aliyuncs.com',
    ap-southeast-1 = 'adb.aliyuncs.com',
    us-west-1 = 'adb.aliyuncs.com',
    us-east-1 = 'adb.aliyuncs.com',
    cn-hangzhou-finance = 'adb.aliyuncs.com',
    cn-north-2-gov-1 = 'adb.aliyuncs.com',
    ap-northeast-2-pop = 'adb.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'adb.aliyuncs.com',
    cn-beijing-finance-pop = 'adb.aliyuncs.com',
    cn-beijing-gov-1 = 'adb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'adb.aliyuncs.com',
    cn-edge-1 = 'adb.aliyuncs.com',
    cn-fujian = 'adb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'adb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'adb.aliyuncs.com',
    cn-hangzhou-test-306 = 'adb.aliyuncs.com',
    cn-hongkong-finance-pop = 'adb.aliyuncs.com',
    cn-qingdao-nebula = 'adb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'adb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'adb.aliyuncs.com',
    cn-shanghai-finance-1 = 'adb.aliyuncs.com',
    cn-shanghai-inner = 'adb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'adb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'adb.aliyuncs.com',
    cn-shenzhen-inner = 'adb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'adb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'adb.aliyuncs.com',
    cn-wuhan = 'adb.aliyuncs.com',
    cn-yushanfang = 'adb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'adb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'adb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'adb.aliyuncs.com',
    eu-west-1-oxs = 'adb.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'adb.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'adb.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('adb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ModifyClusterConnectionStringRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  port?: int32(name='Port'),
}

model ModifyClusterConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterConnectionStringResponseBody(name='body'),
}

async function modifyClusterConnectionStringWithOptions(request: ModifyClusterConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyClusterConnectionStringResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyClusterConnectionString', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyClusterConnectionString(request: ModifyClusterConnectionStringRequest): ModifyClusterConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterConnectionStringWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model DescribeElasticDailyPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  elasticPlanName?: string(name='ElasticPlanName'),
  resourcePoolName?: string(name='ResourcePoolName'),
  elasticDailyPlanDay?: string(name='ElasticDailyPlanDay'),
  elasticDailyPlanStatusList?: string(name='ElasticDailyPlanStatusList'),
}

model DescribeElasticDailyPlanResponseBody = {
  requestId?: string(name='RequestId'),
  elasticDailyPlanList?: [ 
    {
      status?: int32(name='Status'),
      day?: string(name='Day'),
      resourcePoolName?: string(name='ResourcePoolName'),
      startTs?: string(name='StartTs'),
      planEndTs?: string(name='PlanEndTs'),
      planStartTs?: string(name='PlanStartTs'),
      elasticNodeNum?: int32(name='ElasticNodeNum'),
      endTs?: string(name='EndTs'),
      planName?: string(name='PlanName'),
    }
  ](name='ElasticDailyPlanList'),
}

model DescribeElasticDailyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticDailyPlanResponseBody(name='body'),
}

async function describeElasticDailyPlanWithOptions(request: DescribeElasticDailyPlanRequest, runtime: Util.RuntimeOptions): DescribeElasticDailyPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeElasticDailyPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeElasticDailyPlan(request: DescribeElasticDailyPlanRequest): DescribeElasticDailyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticDailyPlanWithOptions(request, runtime);
}

model ModifyAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  renewalStatus?: string(name='RenewalStatus'),
  duration?: string(name='Duration'),
  periodUnit?: string(name='PeriodUnit'),
}

model ModifyAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoRenewAttributeResponseBody(name='body'),
}

async function modifyAutoRenewAttributeWithOptions(request: ModifyAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoRenewAttribute', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoRenewAttributeWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DeleteDBClusterResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBCluster', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DescribeSQLPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  processId?: string(name='ProcessId'),
}

model DescribeSQLPlanResponseBody = {
  requestId?: string(name='RequestId'),
  stageList?: [ 
    {
      state?: string(name='State'),
      CPUTimeAvg?: long(name='CPUTimeAvg'),
      CPUTimeMax?: long(name='CPUTimeMax'),
      operatorCost?: long(name='OperatorCost'),
      scanTimeMax?: long(name='ScanTimeMax'),
      inputSizeMax?: long(name='InputSizeMax'),
      stageId?: int32(name='StageId'),
      scanSizeMax?: long(name='ScanSizeMax'),
      CPUTimeMin?: long(name='CPUTimeMin'),
      scanTimeMin?: long(name='ScanTimeMin'),
      scanSizeMin?: long(name='ScanSizeMin'),
      inputSizeMin?: long(name='InputSizeMin'),
      peakMemory?: long(name='PeakMemory'),
      scanTimeAvg?: long(name='ScanTimeAvg'),
      scanSizeAvg?: long(name='ScanSizeAvg'),
      inputSizeAvg?: long(name='InputSizeAvg'),
    }
  ](name='StageList'),
  originInfo?: string(name='OriginInfo'),
  detail?: {
    SQL?: string(name='SQL'),
    outputSize?: long(name='OutputSize'),
    state?: string(name='State'),
    outputRows?: long(name='OutputRows'),
    user?: string(name='User'),
    startTime?: string(name='StartTime'),
    totalStage?: long(name='TotalStage'),
    queuedTime?: long(name='QueuedTime'),
    totalTime?: long(name='TotalTime'),
    totalTask?: long(name='TotalTask'),
    database?: string(name='Database'),
    peakMemory?: long(name='PeakMemory'),
    clientIP?: string(name='ClientIP'),
    planningTime?: long(name='PlanningTime'),
    CPUTime?: long(name='CPUTime'),
  }(name='Detail'),
}

model DescribeSQLPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanResponseBody(name='body'),
}

async function describeSQLPlanWithOptions(request: DescribeSQLPlanRequest, runtime: Util.RuntimeOptions): DescribeSQLPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLPlan(request: DescribeSQLPlanRequest): DescribeSQLPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPlanWithOptions(request, runtime);
}

model CreateAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
  accountType?: string(name='AccountType'),
}

model CreateAccountResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model DescribeOperatorPermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeOperatorPermissionResponseBody = {
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  privileges?: string(name='Privileges'),
  expiredTime?: string(name='ExpiredTime'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOperatorPermissionResponseBody(name='body'),
}

async function describeOperatorPermissionWithOptions(request: DescribeOperatorPermissionRequest, runtime: Util.RuntimeOptions): DescribeOperatorPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOperatorPermission', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOperatorPermission(request: DescribeOperatorPermissionRequest): DescribeOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOperatorPermissionWithOptions(request, runtime);
}

model DescribeProcessListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  showFull?: boolean(name='ShowFull'),
  runningTime?: int32(name='RunningTime'),
  user?: string(name='User'),
  keyword?: string(name='Keyword'),
  order?: string(name='Order'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeProcessListResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    process?: [ 
    {
      startTime?: string(name='StartTime'),
      time?: int32(name='Time'),
      processId?: string(name='ProcessId'),
      host?: string(name='Host'),
      DB?: string(name='DB'),
      command?: string(name='Command'),
      user?: string(name='User'),
      id?: int32(name='Id'),
      info?: string(name='Info'),
    }
  ](name='Process')
  }(name='Items'),
}

model DescribeProcessListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProcessListResponseBody(name='body'),
}

async function describeProcessListWithOptions(request: DescribeProcessListRequest, runtime: Util.RuntimeOptions): DescribeProcessListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProcessList', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessListWithOptions(request, runtime);
}

model DescribeTableStatisticsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  order?: string(name='Order'),
}

model DescribeTableStatisticsResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    tableStatisticRecords?: [ 
    {
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      rowCount?: long(name='RowCount'),
      dataSize?: long(name='DataSize'),
      indexSize?: long(name='IndexSize'),
      primaryKeyIndexSize?: long(name='PrimaryKeyIndexSize'),
      partitionCount?: long(name='PartitionCount'),
      coldDataSize?: long(name='ColdDataSize'),
    }
  ](name='TableStatisticRecords')
  }(name='Items'),
}

model DescribeTableStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableStatisticsResponseBody(name='body'),
}

async function describeTableStatisticsWithOptions(request: DescribeTableStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTableStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTableStatistics', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTableStatistics(request: DescribeTableStatisticsRequest): DescribeTableStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableStatisticsWithOptions(request, runtime);
}

model DeleteElasticPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  elasticPlanName?: string(name='ElasticPlanName'),
}

model DeleteElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteElasticPlanResponseBody(name='body'),
}

async function deleteElasticPlanWithOptions(request: DeleteElasticPlanRequest, runtime: Util.RuntimeOptions): DeleteElasticPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteElasticPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteElasticPlan(request: DeleteElasticPlanRequest): DeleteElasticPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteElasticPlanWithOptions(request, runtime);
}

model UnbindDBResourcePoolWithUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
  poolUser?: string(name='PoolUser'),
}

model UnbindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDBResourcePoolWithUserResponseBody(name='body'),
}

async function unbindDBResourcePoolWithUserWithOptions(request: UnbindDBResourcePoolWithUserRequest, runtime: Util.RuntimeOptions): UnbindDBResourcePoolWithUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindDBResourcePoolWithUser', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindDBResourcePoolWithUser(request: UnbindDBResourcePoolWithUserRequest): UnbindDBResourcePoolWithUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindDBResourcePoolWithUserWithOptions(request, runtime);
}

model DescribeSQLPlanTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  processId?: string(name='ProcessId'),
  stageId?: string(name='StageId'),
}

model DescribeSQLPlanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      scanCost?: long(name='ScanCost'),
      outputSize?: long(name='OutputSize'),
      inputSize?: long(name='InputSize'),
      state?: string(name='State'),
      operatorCost?: long(name='OperatorCost'),
      outputRows?: long(name='OutputRows'),
      scanSize?: long(name='ScanSize'),
      elapsedTime?: long(name='ElapsedTime'),
      scanRows?: long(name='ScanRows'),
      peakMemory?: long(name='PeakMemory'),
      taskId?: int32(name='TaskId'),
      inputRows?: long(name='InputRows'),
    }
  ](name='TaskList'),
}

model DescribeSQLPlanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLPlanTaskResponseBody(name='body'),
}

async function describeSQLPlanTaskWithOptions(request: DescribeSQLPlanTaskRequest, runtime: Util.RuntimeOptions): DescribeSQLPlanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLPlanTask', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLPlanTask(request: DescribeSQLPlanTaskRequest): DescribeSQLPlanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPlanTaskWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  enableBackupLog?: string(name='EnableBackupLog'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model DescribeAuditLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  queryKeyword?: string(name='QueryKeyword'),
  sqlType?: string(name='SqlType'),
  succeed?: string(name='Succeed'),
  hostAddress?: string(name='HostAddress'),
  orderType?: string(name='OrderType'),
  user?: string(name='User'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAuditLogRecordsResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      succeed?: string(name='Succeed'),
      SQLText?: string(name='SQLText'),
      totalTime?: string(name='TotalTime'),
      connId?: string(name='ConnId'),
      DBName?: string(name='DBName'),
      SQLType?: string(name='SQLType'),
      executeTime?: string(name='ExecuteTime'),
      processID?: string(name='ProcessID'),
    }
  ](name='Items'),
}

model DescribeAuditLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogRecordsResponseBody(name='body'),
}

async function describeAuditLogRecordsWithOptions(request: DescribeAuditLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditLogRecords', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditLogRecords(request: DescribeAuditLogRecordsRequest): DescribeAuditLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogRecordsWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  DBClusterVersion?: string(name='DBClusterVersion'),
  DBClusterCategory?: string(name='DBClusterCategory'),
  DBClusterClass?: string(name='DBClusterClass'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount'),
  DBNodeStorage?: string(name='DBNodeStorage'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  clientToken?: string(name='ClientToken'),
  executorCount?: string(name='ExecutorCount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  mode?: string(name='Mode'),
  storageResource?: string(name='StorageResource'),
  storageType?: string(name='StorageType'),
  computeResource?: string(name='ComputeResource'),
  restoreType?: string(name='RestoreType'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName'),
  backupSetID?: string(name='BackupSetID'),
  restoreTime?: string(name='RestoreTime'),
}

model CreateDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBCluster', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model ModifyDBClusterResourceGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
}

model ModifyDBClusterResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResourceGroupResponseBody(name='body'),
}

async function modifyDBClusterResourceGroupWithOptions(request: ModifyDBClusterResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterResourceGroup', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterResourceGroup(request: ModifyDBClusterResourceGroupRequest): ModifyDBClusterResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterResourceGroupWithOptions(request, runtime);
}

model BindDBResourcePoolWithUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
  poolUser?: string(name='PoolUser'),
}

model BindDBResourcePoolWithUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindDBResourcePoolWithUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindDBResourcePoolWithUserResponseBody(name='body'),
}

async function bindDBResourcePoolWithUserWithOptions(request: BindDBResourcePoolWithUserRequest, runtime: Util.RuntimeOptions): BindDBResourcePoolWithUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindDBResourcePoolWithUser', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindDBResourcePoolWithUser(request: BindDBResourcePoolWithUserRequest): BindDBResourcePoolWithUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindDBResourcePoolWithUserWithOptions(request, runtime);
}

model DescribeSchemasRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeSchemasResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Items'),
}

model DescribeSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchemasResponseBody(name='body'),
}

async function describeSchemasWithOptions(request: DescribeSchemasRequest, runtime: Util.RuntimeOptions): DescribeSchemasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSchemas', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSchemasWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  maintainTime?: string(name='MaintainTime'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterMaintainTime', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model DescribeConnectionCountRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeConnectionCountRecordsResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  accessIpRecords?: [ 
    {
      accessIp?: string(name='AccessIp'),
      count?: long(name='Count'),
    }
  ](name='AccessIpRecords'),
  userRecords?: [ 
    {
      user?: string(name='User'),
      count?: long(name='Count'),
    }
  ](name='UserRecords'),
}

model DescribeConnectionCountRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionCountRecordsResponseBody(name='body'),
}

async function describeConnectionCountRecordsWithOptions(request: DescribeConnectionCountRecordsRequest, runtime: Util.RuntimeOptions): DescribeConnectionCountRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConnectionCountRecords', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConnectionCountRecords(request: DescribeConnectionCountRecordsRequest): DescribeConnectionCountRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConnectionCountRecordsWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupsResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    backup?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      backupSize?: int32(name='BackupSize'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Items'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterDescription?: string(name='DBClusterDescription'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterDescription', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model DescribeColumnsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeColumnsResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    column?: [ 
    {
      type?: string(name='Type'),
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Column')
  }(name='Items'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumnsWithOptions(request: DescribeColumnsRequest, runtime: Util.RuntimeOptions): DescribeColumnsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeColumns', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColumnsWithOptions(request, runtime);
}

model RevokeOperatorPermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model RevokeOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeOperatorPermissionResponseBody(name='body'),
}

async function revokeOperatorPermissionWithOptions(request: RevokeOperatorPermissionRequest, runtime: Util.RuntimeOptions): RevokeOperatorPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeOperatorPermission', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeOperatorPermissionWithOptions(request, runtime);
}

model CreateDBResourcePoolRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
  queryType?: string(name='QueryType'),
  nodeNum?: int32(name='NodeNum'),
}

model CreateDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResourcePoolResponseBody(name='body'),
}

async function createDBResourcePoolWithOptions(request: CreateDBResourcePoolRequest, runtime: Util.RuntimeOptions): CreateDBResourcePoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBResourcePool', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBResourcePool(request: CreateDBResourcePoolRequest): CreateDBResourcePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBResourcePoolWithOptions(request, runtime);
}

model DescribeAllAccountsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeAllAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  accountList?: [ 
    {
      user?: string(name='User'),
    }
  ](name='AccountList'),
}

model DescribeAllAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllAccountsResponseBody(name='body'),
}

async function describeAllAccountsWithOptions(request: DescribeAllAccountsRequest, runtime: Util.RuntimeOptions): DescribeAllAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllAccounts', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllAccounts(request: DescribeAllAccountsRequest): DescribeAllAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllAccountsWithOptions(request, runtime);
}

model ModifyAuditLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  auditLogStatus?: string(name='AuditLogStatus'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: Util.RuntimeOptions): ModifyAuditLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAuditLogConfig', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogConfigWithOptions(request, runtime);
}

model DeleteDBResourcePoolRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
}

model DeleteDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResourcePoolResponseBody(name='body'),
}

async function deleteDBResourcePoolWithOptions(request: DeleteDBResourcePoolRequest, runtime: Util.RuntimeOptions): DeleteDBResourcePoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBResourcePool', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBResourcePool(request: DeleteDBResourcePoolRequest): DeleteDBResourcePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBResourcePoolWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model GrantOperatorPermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  expiredTime?: string(name='ExpiredTime'),
  privileges?: string(name='Privileges'),
}

model GrantOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantOperatorPermissionResponseBody(name='body'),
}

async function grantOperatorPermissionWithOptions(request: GrantOperatorPermissionRequest, runtime: Util.RuntimeOptions): GrantOperatorPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantOperatorPermission', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantOperatorPermissionWithOptions(request, runtime);
}

model DescribeAllDataSourceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeAllDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  tables?: {
    table?: [ 
    {
      tableName?: string(name='TableName'),
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Table')
  }(name='Tables'),
  columns?: {
    column?: [ 
    {
      type?: string(name='Type'),
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Column')
  }(name='Columns'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
}

model DescribeAllDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllDataSource', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourceWithOptions(request, runtime);
}

model ModifyDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount'),
  DBNodeStorage?: string(name='DBNodeStorage'),
  DBNodeClass?: string(name='DBNodeClass'),
  modifyType?: string(name='ModifyType'),
  executorCount?: string(name='ExecutorCount'),
  regionId?: string(name='RegionId'),
  storageResource?: string(name='StorageResource'),
  computeResource?: string(name='ComputeResource'),
  elasticIOResource?: int32(name='ElasticIOResource'),
  DBClusterCategory?: string(name='DBClusterCategory'),
  mode?: string(name='Mode'),
}

model ModifyDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBCluster', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model DescribeTablePartitionDiagnoseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeTablePartitionDiagnoseResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  DBClusterId?: string(name='DBClusterId'),
  suggestMaxRecordsPerPartition?: long(name='SuggestMaxRecordsPerPartition'),
  suggestMinRecordsPerPartition?: long(name='SuggestMinRecordsPerPartition'),
  items?: [ 
    {
      tableName?: string(name='TableName'),
      partitionDetail?: string(name='PartitionDetail'),
      schemaName?: string(name='SchemaName'),
      partitionNumber?: int32(name='PartitionNumber'),
    }
  ](name='Items'),
}

model DescribeTablePartitionDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablePartitionDiagnoseResponseBody(name='body'),
}

async function describeTablePartitionDiagnoseWithOptions(request: DescribeTablePartitionDiagnoseRequest, runtime: Util.RuntimeOptions): DescribeTablePartitionDiagnoseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTablePartitionDiagnose', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTablePartitionDiagnose(request: DescribeTablePartitionDiagnoseRequest): DescribeTablePartitionDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablePartitionDiagnoseWithOptions(request, runtime);
}

model DescribeDBResourcePoolRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
}

model DescribeDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
  poolsInfo?: [ 
    {
      queryType?: string(name='QueryType'),
      updateTime?: string(name='UpdateTime'),
      poolName?: string(name='PoolName'),
      createTime?: string(name='CreateTime'),
      poolUsers?: string(name='PoolUsers'),
      nodeNum?: int32(name='NodeNum'),
    }
  ](name='PoolsInfo'),
}

model DescribeDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBResourcePoolResponseBody(name='body'),
}

async function describeDBResourcePoolWithOptions(request: DescribeDBResourcePoolRequest, runtime: Util.RuntimeOptions): DescribeDBResourcePoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBResourcePool', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBResourcePool(request: DescribeDBResourcePoolRequest): DescribeDBResourcePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBResourcePoolWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  key?: string(name='Key'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
  performances?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      series?: [ 
        {
          values?: [ string ](name='Values'),
          name?: string(name='Name'),
        }
      ](name='Series'),
    }
  ](name='Performances'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterPerformance', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model ModifyElasticPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  elasticPlanName?: string(name='ElasticPlanName'),
  resourcePoolName?: string(name='ResourcePoolName'),
  elasticPlanNodeNum?: int32(name='ElasticPlanNodeNum'),
  elasticPlanTimeStart?: string(name='ElasticPlanTimeStart'),
  elasticPlanTimeEnd?: string(name='ElasticPlanTimeEnd'),
  elasticPlanWeeklyRepeat?: string(name='ElasticPlanWeeklyRepeat'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable'),
}

model ModifyElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticPlanResponseBody(name='body'),
}

async function modifyElasticPlanWithOptions(request: ModifyElasticPlanRequest, runtime: Util.RuntimeOptions): ModifyElasticPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyElasticPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyElasticPlan(request: ModifyElasticPlanRequest): ModifyElasticPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticPlanWithOptions(request, runtime);
}

model ModifyLogBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  enableBackupLog?: string(name='EnableBackupLog'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
}

model ModifyLogBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogBackupPolicyResponseBody(name='body'),
}

async function modifyLogBackupPolicyWithOptions(request: ModifyLogBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyLogBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLogBackupPolicy', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogBackupPolicyWithOptions(request, runtime);
}

model DescribeSlowLogTrendRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
}

model DescribeSlowLogTrendResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    slowLogTrendItem?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      series?: {
        seriesItem?: [ 
        {
          values?: string(name='Values'),
          name?: string(name='Name'),
        }
      ](name='SeriesItem')
      }(name='Series'),
    }
  ](name='SlowLogTrendItem')
  }(name='Items'),
}

model DescribeSlowLogTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogTrendResponseBody(name='body'),
}

async function describeSlowLogTrendWithOptions(request: DescribeSlowLogTrendRequest, runtime: Util.RuntimeOptions): DescribeSlowLogTrendResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogTrend', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogTrendWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
  availableZoneList?: [ 
    {
      supportedMode?: [ 
        {
          supportedSerialList?: [ 
            {
              serial?: string(name='Serial'),
              supportedInstanceClassList?: [ 
                {
                  supportedExecutorList?: [ 
                    {
                      nodeCount?: {
                        step?: string(name='Step'),
                        minCount?: string(name='MinCount'),
                        maxCount?: string(name='MaxCount'),
                      }(name='NodeCount'),
                    }
                  ](name='SupportedExecutorList'),
                  instanceClass?: string(name='InstanceClass'),
                  supportedNodeCountList?: [ 
                    {
                      nodeCount?: {
                        step?: string(name='Step'),
                        minCount?: string(name='MinCount'),
                        maxCount?: string(name='MaxCount'),
                      }(name='NodeCount'),
                      storageSize?: [ string ](name='StorageSize'),
                    }
                  ](name='SupportedNodeCountList'),
                  tips?: string(name='Tips'),
                }
              ](name='SupportedInstanceClassList'),
              supportedFlexibleResource?: [ 
                {
                  supportedElasticIOResource?: {
                    step?: string(name='Step'),
                    minCount?: string(name='MinCount'),
                    maxCount?: string(name='MaxCount'),
                  }(name='SupportedElasticIOResource'),
                  supportedStorageResource?: [ string ](name='SupportedStorageResource'),
                  storageType?: string(name='StorageType'),
                  supportedComputeResource?: [ string ](name='SupportedComputeResource'),
                }
              ](name='SupportedFlexibleResource'),
            }
          ](name='SupportedSerialList'),
          mode?: string(name='Mode'),
        }
      ](name='SupportedMode'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableZoneList'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model CreateElasticPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  elasticPlanName?: string(name='ElasticPlanName'),
  resourcePoolName?: string(name='ResourcePoolName'),
  elasticPlanNodeNum?: int32(name='ElasticPlanNodeNum'),
  elasticPlanTimeStart?: string(name='ElasticPlanTimeStart'),
  elasticPlanTimeEnd?: string(name='ElasticPlanTimeEnd'),
  elasticPlanWeeklyRepeat?: string(name='ElasticPlanWeeklyRepeat'),
  elasticPlanStartDay?: string(name='ElasticPlanStartDay'),
  elasticPlanEndDay?: string(name='ElasticPlanEndDay'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable'),
}

model CreateElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateElasticPlanResponseBody(name='body'),
}

async function createElasticPlanWithOptions(request: CreateElasticPlanRequest, runtime: Util.RuntimeOptions): CreateElasticPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateElasticPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createElasticPlan(request: CreateElasticPlanRequest): CreateElasticPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createElasticPlanWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseClusterPublicConnection', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model DescribeAuditLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfigWithOptions(request: DescribeAuditLogConfigRequest, runtime: Util.RuntimeOptions): DescribeAuditLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditLogConfig', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogConfigWithOptions(request, runtime);
}

model DescribeTablesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
}

model DescribeTablesResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    table?: [ 
    {
      tableName?: string(name='TableName'),
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Table')
  }(name='Items'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTables', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DescribeDBClusterNetInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterNetInfoResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType'),
  requestId?: string(name='RequestId'),
  items?: {
    address?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      connectionString?: string(name='ConnectionString'),
      netType?: string(name='NetType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='Address')
  }(name='Items'),
}

model DescribeDBClusterNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNetInfoResponseBody(name='body'),
}

async function describeDBClusterNetInfoWithOptions(request: DescribeDBClusterNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNetInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterNetInfo', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterNetInfo(request: DescribeDBClusterNetInfoRequest): DescribeDBClusterNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNetInfoWithOptions(request, runtime);
}

model DescribeInclinedTablesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  tableType?: string(name='TableType'),
  order?: string(name='Order'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeInclinedTablesResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    table?: [ 
    {
      type?: string(name='Type'),
      schema?: string(name='Schema'),
      size?: long(name='Size'),
      name?: string(name='Name'),
      isIncline?: boolean(name='IsIncline'),
    }
  ](name='Table')
  }(name='Items'),
}

model DescribeInclinedTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInclinedTablesResponseBody(name='body'),
}

async function describeInclinedTablesWithOptions(request: DescribeInclinedTablesRequest, runtime: Util.RuntimeOptions): DescribeInclinedTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInclinedTables', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInclinedTables(request: DescribeInclinedTablesRequest): DescribeInclinedTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInclinedTablesWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBCluster?: [ 
    {
      creationTime?: string(name='CreationTime'),
      enableSpark?: boolean(name='EnableSpark'),
      dtsJobId?: string(name='DtsJobId'),
      DBNodeCount?: long(name='DBNodeCount'),
      expired?: string(name='Expired'),
      maintainTime?: string(name='MaintainTime'),
      payType?: string(name='PayType'),
      diskType?: string(name='DiskType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      mode?: string(name='Mode'),
      port?: int32(name='Port'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      enableAirflow?: boolean(name='EnableAirflow'),
      executorCount?: string(name='ExecutorCount'),
      storageResource?: string(name='StorageResource'),
      DBClusterId?: string(name='DBClusterId'),
      connectionString?: string(name='ConnectionString'),
      rdsInstanceId?: string(name='RdsInstanceId'),
      DBClusterType?: string(name='DBClusterType'),
      commodityCode?: string(name='CommodityCode'),
      expireTime?: string(name='ExpireTime'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBNodeClass?: string(name='DBNodeClass'),
      lockReason?: string(name='LockReason'),
      VPCId?: string(name='VPCId'),
      computeResource?: string(name='ComputeResource'),
      regionId?: string(name='RegionId'),
      elasticIOResource?: int32(name='ElasticIOResource'),
      vSwitchId?: string(name='VSwitchId'),
      DBVersion?: string(name='DBVersion'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      resourceGroupId?: string(name='ResourceGroupId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      userENIStatus?: boolean(name='UserENIStatus'),
      zoneId?: string(name='ZoneId'),
      category?: string(name='Category'),
      engine?: string(name='Engine'),
    }
  ](name='DBCluster')
  }(name='Items'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAttribute', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBClustersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    DBCluster?: [ 
    {
      dtsJobId?: string(name='DtsJobId'),
      DBNodeCount?: long(name='DBNodeCount'),
      expired?: string(name='Expired'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      diskType?: string(name='DiskType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      mode?: string(name='Mode'),
      port?: string(name='Port'),
      lockMode?: string(name='LockMode'),
      storageResource?: string(name='StorageResource'),
      executorCount?: string(name='ExecutorCount'),
      DBClusterId?: string(name='DBClusterId'),
      connectionString?: string(name='ConnectionString'),
      rdsInstanceId?: string(name='RdsInstanceId'),
      DBClusterType?: string(name='DBClusterType'),
      commodityCode?: string(name='CommodityCode'),
      expireTime?: string(name='ExpireTime'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBNodeClass?: string(name='DBNodeClass'),
      lockReason?: string(name='LockReason'),
      VPCId?: string(name='VPCId'),
      regionId?: string(name='RegionId'),
      computeResource?: string(name='ComputeResource'),
      elasticIOResource?: int32(name='ElasticIOResource'),
      vSwitchId?: string(name='VSwitchId'),
      DBVersion?: string(name='DBVersion'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      resourceGroupId?: string(name='ResourceGroupId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      zoneId?: string(name='ZoneId'),
      category?: string(name='Category'),
      engine?: string(name='Engine'),
    }
  ](name='DBCluster')
  }(name='Items'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusters', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model KillProcessRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  processId?: string(name='ProcessId'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model KillProcessResponse = {
  headers: map[string]string(name='headers'),
  body: KillProcessResponseBody(name='body'),
}

async function killProcessWithOptions(request: KillProcessRequest, runtime: Util.RuntimeOptions): KillProcessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KillProcess', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return killProcessWithOptions(request, runtime);
}

model DescribeAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeAutoRenewAttributeResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    autoRenewAttribute?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      periodUnit?: string(name='PeriodUnit'),
      duration?: int32(name='Duration'),
      renewalStatus?: string(name='RenewalStatus'),
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
      regionId?: string(name='RegionId'),
    }
  ](name='AutoRenewAttribute')
  }(name='Items'),
}

model DescribeAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoRenewAttributeResponseBody(name='body'),
}

async function describeAutoRenewAttributeWithOptions(request: DescribeAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoRenewAttribute', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      securityIPList?: string(name='SecurityIPList'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
    }
  ](name='IPArray')
  }(name='Items'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

async function describeDBClusterAccessWhiteListWithOptions(request: DescribeDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAccessWhiteList', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeTaskInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: int32(name='TaskId'),
}

model DescribeTaskInfoResponseBody = {
  taskInfo?: {
    status?: string(name='Status'),
    finishTime?: string(name='FinishTime'),
    progress?: string(name='Progress'),
    beginTime?: string(name='BeginTime'),
    taskId?: int32(name='TaskId'),
  }(name='TaskInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfoWithOptions(request: DescribeTaskInfoRequest, runtime: Util.RuntimeOptions): DescribeTaskInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTaskInfo', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskInfoWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      zones?: {
        zone?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
          vpcEnabled?: boolean(name='VpcEnabled'),
        }
      ](name='Zone')
      }(name='Zones'),
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ModifyDBResourcePoolRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  poolName?: string(name='PoolName'),
  queryType?: string(name='QueryType'),
  nodeNum?: int32(name='NodeNum'),
}

model ModifyDBResourcePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBResourcePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBResourcePoolResponseBody(name='body'),
}

async function modifyDBResourcePoolWithOptions(request: ModifyDBResourcePoolRequest, runtime: Util.RuntimeOptions): ModifyDBResourcePoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBResourcePool', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBResourcePool(request: ModifyDBResourcePoolRequest): ModifyDBResourcePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBResourcePoolWithOptions(request, runtime);
}

model DeleteAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountType?: string(name='AccountType'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  processID?: string(name='ProcessID'),
  order?: string(name='Order'),
  range?: string(name='Range'),
  state?: string(name='State'),
}

model DescribeSlowLogRecordsResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  DBClusterId?: string(name='DBClusterId'),
  items?: {
    slowLogRecord?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      scanTime?: long(name='ScanTime'),
      SQLText?: string(name='SQLText'),
      outputSize?: string(name='OutputSize'),
      peakMemoryUsage?: string(name='PeakMemoryUsage'),
      state?: string(name='State'),
      wallTime?: long(name='WallTime'),
      scanSize?: string(name='ScanSize'),
      executionStartTime?: string(name='ExecutionStartTime'),
      queryTime?: long(name='QueryTime'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      scanRows?: long(name='ScanRows'),
      parseRowCounts?: long(name='ParseRowCounts'),
      DBName?: string(name='DBName'),
      planningTime?: long(name='PlanningTime'),
      queueTime?: long(name='QueueTime'),
      userName?: string(name='UserName'),
      processID?: string(name='ProcessID'),
    }
  ](name='SlowLogRecord')
  }(name='Items'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeDBClusterResourcePoolPerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  key?: string(name='Key'),
  resourcePools?: string(name='ResourcePools'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDBClusterResourcePoolPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
  performances?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      resourcePoolPerformances?: [ 
        {
          resourcePoolName?: string(name='ResourcePoolName'),
          resourcePoolSeries?: [ 
            {
              values?: [ string ](name='Values'),
              name?: string(name='Name'),
            }
          ](name='ResourcePoolSeries'),
        }
      ](name='ResourcePoolPerformances'),
    }
  ](name='Performances'),
}

model DescribeDBClusterResourcePoolPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterResourcePoolPerformanceResponseBody(name='body'),
}

async function describeDBClusterResourcePoolPerformanceWithOptions(request: DescribeDBClusterResourcePoolPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterResourcePoolPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterResourcePoolPerformance', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterResourcePoolPerformance(request: DescribeDBClusterResourcePoolPerformanceRequest): DescribeDBClusterResourcePoolPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterResourcePoolPerformanceWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountType?: string(name='AccountType'),
}

model ResetAccountPasswordResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccountPassword', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountType?: string(name='AccountType'),
}

model DescribeAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  accountList?: {
    DBAccount?: [ 
    {
      accountStatus?: string(name='AccountStatus'),
      accountDescription?: string(name='AccountDescription'),
      accountType?: string(name='AccountType'),
      accountName?: string(name='AccountName'),
    }
  ](name='DBAccount')
  }(name='AccountList'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeElasticPlanRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  elasticPlanName?: string(name='ElasticPlanName'),
  resourcePoolName?: string(name='ResourcePoolName'),
  elasticPlanEnable?: boolean(name='ElasticPlanEnable'),
}

model DescribeElasticPlanResponseBody = {
  requestId?: string(name='RequestId'),
  elasticPlanList?: [ 
    {
      endTime?: string(name='EndTime'),
      weeklyRepeat?: string(name='WeeklyRepeat'),
      startTime?: string(name='StartTime'),
      resourcePoolName?: string(name='ResourcePoolName'),
      startDay?: string(name='StartDay'),
      elasticNodeNum?: int32(name='ElasticNodeNum'),
      enable?: boolean(name='Enable'),
      endDay?: string(name='EndDay'),
      planName?: string(name='PlanName'),
    }
  ](name='ElasticPlanList'),
}

model DescribeElasticPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticPlanResponseBody(name='body'),
}

async function describeElasticPlanWithOptions(request: DescribeElasticPlanRequest, runtime: Util.RuntimeOptions): DescribeElasticPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeElasticPlan', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeElasticPlan(request: DescribeElasticPlanRequest): DescribeElasticPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticPlanWithOptions(request, runtime);
}

model DescribeTableDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeTableDetailResponseBody = {
  avgSize?: long(name='AvgSize'),
  requestId?: string(name='RequestId'),
  items?: {
    shard?: [ 
    {
      size?: long(name='Size'),
      id?: int32(name='Id'),
    }
  ](name='Shard')
  }(name='Items'),
}

model DescribeTableDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableDetailResponseBody(name='body'),
}

async function describeTableDetailWithOptions(request: DescribeTableDetailRequest, runtime: Util.RuntimeOptions): DescribeTableDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTableDetail', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTableDetail(request: DescribeTableDetailRequest): DescribeTableDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableDetailWithOptions(request, runtime);
}

model AllocateClusterPublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateClusterPublicConnection', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeBackupPolicyResponseBody = {
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  enableBackupLog?: string(name='EnableBackupLog'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  securityIps?: string(name='SecurityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyDBClusterAccessWhiteListWithOptions(request: ModifyDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterAccessWhiteList', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhiteListWithOptions(request, runtime);
}

