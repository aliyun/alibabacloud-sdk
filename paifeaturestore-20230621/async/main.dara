/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiFeatureStore';
  @version = '2023-06-21';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeProjectFeatureEntityHotIdVersionRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  featureEntityName: string(name='FeatureEntityName', example='feature_entity1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  version: string(name='Version', example='20221213', position='Body'),
}

model ChangeProjectFeatureEntityHotIdVersionResponseBody = {
  requestId?: string(name='RequestId', example='CD377C31-372F-5CCD-ADB9-A31D6E118CA1'),
}

model ChangeProjectFeatureEntityHotIdVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeProjectFeatureEntityHotIdVersionResponseBody(name='body'),
}

async function changeProjectFeatureEntityHotIdVersion(request: ChangeProjectFeatureEntityHotIdVersionRequest): ChangeProjectFeatureEntityHotIdVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeProjectFeatureEntityHotIdVersion', 'POST', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureentities/{FeatureEntityName}/action/changehotidversion', 'json', false, 'json', request);
}

model CheckInstanceDatasourceRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"address": ""}', position='Body'),
  type: string(name='Type', example='Hologres', position='Body'),
  uri: string(name='Uri', example='igraph1', position='Body'),
}

model CheckInstanceDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  status?: string(name='Status', example='Success'),
}

model CheckInstanceDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckInstanceDatasourceResponseBody(name='body'),
}

async function checkInstanceDatasource(request: CheckInstanceDatasourceRequest): CheckInstanceDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckInstanceDatasource', 'POST', '/api/v1/instances/{InstanceId}/action/checkdatasource', 'json', false, 'json', request);
}

model CreateDatasourceRequest {
  instanceId: string(name='InstanceId', example='featureStore-cn-test1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"address": ""}', position='Body'),
  name: string(name='Name', example='datasource1', position='Body'),
  type: string(name='Type', example='Hologres', position='Body'),
  uri: string(name='Uri', example='igraph_instance1', position='Body'),
  workspaceId: string(name='WorkspaceId', example='234', position='Body'),
}

model CreateDatasourceResponseBody = {
  datasourceId?: string(name='DatasourceId', example='3'),
  requestId?: string(name='RequestId', example='1C5B1511-8A5B-59C3-90AF-513F9210E882'),
}

model CreateDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasourceResponseBody(name='body'),
}

async function createDatasource(request: CreateDatasourceRequest): CreateDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasource', 'POST', '/api/v1/instances/{InstanceId}/datasources', 'json', false, 'json', request);
}

model CreateFeatureEntityRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  joinId: string(name='JoinId', example='user_id', position='Body'),
  name: string(name='Name', example='feature_entity_1', position='Body'),
  projectId: string(name='ProjectId', example='3', position='Body'),
}

model CreateFeatureEntityResponseBody = {
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
}

model CreateFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureEntityResponseBody(name='body'),
}

async function createFeatureEntity(request: CreateFeatureEntityRequest): CreateFeatureEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureEntity', 'POST', '/api/v1/instances/{InstanceId}/featureentities', 'json', false, 'json', request);
}

model CreateFeatureViewRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"save_original_field":true}', position='Body'),
  featureEntityId?: string(name='FeatureEntityId', example='4', position='Body'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='age'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields', position='Body'),
  name: string(name='Name', example='FeatureView1', position='Body'),
  projectId: string(name='ProjectId', example='3', position='Body'),
  registerDatasourceId?: string(name='RegisterDatasourceId', example='5', position='Body'),
  registerTable?: string(name='RegisterTable', example='table1', position='Body'),
  syncOnlineTable: boolean(name='SyncOnlineTable', example='true', position='Body'),
  TTL?: int32(name='TTL', example='90', position='Body'),
  tags?: [ string ](name='Tags', position='Body'),
  type: string(name='Type', example='Batch', position='Body'),
  writeMethod: string(name='WriteMethod', example='Custom', position='Body'),
}

model CreateFeatureViewResponseBody = {
  featureViewId?: string(name='FeatureViewId', example='3'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
}

model CreateFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureViewResponseBody(name='body'),
}

async function createFeatureView(request: CreateFeatureViewRequest): CreateFeatureViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFeatureView', 'POST', '/api/v1/instances/{InstanceId}/featureviews', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  type?: string(name='Type', example='Basic', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='InstanceAlreadyExistsErrorProblem'),
  instanceId?: string(name='InstanceId', example='featureStore-cn-7mz2xfu****'),
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v1/instances', 'json', false, 'json', request);
}

model CreateLabelTableRequest {
  instanceId: string(name='InstanceId', example='featurestore-test1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  datasourceId: string(name='DatasourceId', example='3', position='Body'),
  fields: [ 
    {
      attributes: [ string ](name='Attributes'),
      name: string(name='Name', example='lat'),
      type: string(name='Type', example='INT32'),
    }
  ](name='Fields', position='Body'),
  name: string(name='Name', example='rec_test', position='Body'),
  projectId: string(name='ProjectId', example='3', position='Body'),
}

model CreateLabelTableResponseBody = {
  labelTableId?: string(name='LabelTableId', example='1'),
  requestId?: string(name='RequestId', example='0FA90B3B-F30A-5C9D-A9FD-8114F8868062'),
}

model CreateLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabelTableResponseBody(name='body'),
}

async function createLabelTable(request: CreateLabelTableRequest): CreateLabelTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLabelTable', 'POST', '/api/v1/instances/{InstanceId}/labeltables', 'json', false, 'json', request);
}

model CreateModelFeatureRequest {
  instanceId?: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  features: [ 
    {
      aliasName?: string(name='AliasName', example='userid'),
      featureViewId: string(name='FeatureViewId', example='5'),
      name: string(name='Name', example='user_id'),
      type: string(name='Type', example='STRING'),
    }
  ](name='Features', position='Body'),
  labelTableId: string(name='LabelTableId', example='4', position='Body'),
  name: string(name='Name', example='model_feature_1', position='Body'),
  projectId: string(name='ProjectId', example='3', position='Body'),
  sequenceFeatureViewIds?: [ string ](name='SequenceFeatureViewIds', position='Body'),
}

model CreateModelFeatureResponseBody = {
  modelFeatureId?: string(name='ModelFeatureId', example='3'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
}

model CreateModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelFeatureResponseBody(name='body'),
}

async function createModelFeature(request: CreateModelFeatureRequest): CreateModelFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelFeature', 'POST', '/api/v1/instances/{InstanceId}/modelfeatures', 'json', false, 'json', request);
}

model CreateModelFeatureTrainingSetFGTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
}

model CreateModelFeatureTrainingSetFGTableResponseBody = {
  trainingSetFGTableName?: string(name='TrainingSetFGTableName', example='project_model_training_set_fg'),
  requestId?: string(name='requestId', example='93FF6A91-5326-5FA1-9D89-DB46DAA99E55'),
}

model CreateModelFeatureTrainingSetFGTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelFeatureTrainingSetFGTableResponseBody(name='body'),
}

async function createModelFeatureTrainingSetFGTable(request: CreateModelFeatureTrainingSetFGTableRequest): CreateModelFeatureTrainingSetFGTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelFeatureTrainingSetFGTable', 'POST', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/trainingsetfgtable', 'json', false, 'json', request);
}

model CreateProjectRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  name: string(name='Name', example='project1', position='Body'),
  offlineDatasourceId: string(name='OfflineDatasourceId', example='4', position='Body'),
  offlineLifeCycle?: int32(name='OfflineLifeCycle', example='90', position='Body'),
  onlineDatasourceId: string(name='OnlineDatasourceId', example='3', position='Body'),
  workspaceId: string(name='WorkspaceId', example='324', position='Body'),
}

model CreateProjectResponseBody = {
  projectId?: string(name='ProjectId', example='3'),
  requestId?: string(name='RequestId', example='977ADE3A-D69D-58AD-8323-96E2FB898E99'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/api/v1/instances/{InstanceId}/projects', 'json', false, 'json', request);
}

model CreateServiceIdentityRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  roleName: string(name='RoleName', example='AliyunServiceRoleForFeatureStore', position='Body'),
}

model CreateServiceIdentityRoleResponseBody = {
  code?: string(name='Code', example='ServiceLinkedRoleAlreadyExistsErrorProblem'),
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForFeatureStore'),
}

model CreateServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceIdentityRoleResponseBody(name='body'),
}

async function createServiceIdentityRole(request: CreateServiceIdentityRoleRequest): CreateServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceIdentityRole', 'POST', '/api/v1/serviceidentityroles', 'json', false, 'json', request);
}

model DeleteDatasourceRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  datasourceId: string(name='DatasourceId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='E2E1575F-29D1-5579-B649-B7883A793562'),
}

model DeleteDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasourceResponseBody(name='body'),
}

async function deleteDatasource(request: DeleteDatasourceRequest): DeleteDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasource', 'DELETE', '/api/v1/instances/{InstanceId}/datasources/{DatasourceId}', 'json', false, 'json', request);
}

model DeleteFeatureEntityRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureEntityId: string(name='FeatureEntityId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteFeatureEntityResponseBody = {
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
}

model DeleteFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFeatureEntityResponseBody(name='body'),
}

async function deleteFeatureEntity(request: DeleteFeatureEntityRequest): DeleteFeatureEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFeatureEntity', 'DELETE', '/api/v1/instances/{InstanceId}/featureentities/{FeatureEntityId}', 'json', false, 'json', request);
}

model DeleteFeatureViewRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteFeatureViewResponseBody = {
  requestId?: string(name='RequestId', example='BF349686-C932-55B5-9B31-DAFA395C0E06'),
}

model DeleteFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFeatureViewResponseBody(name='body'),
}

async function deleteFeatureView(request: DeleteFeatureViewRequest): DeleteFeatureViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFeatureView', 'DELETE', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}', 'json', false, 'json', request);
}

model DeleteLabelTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  labelTableId: string(name='LabelTableId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteLabelTableResponseBody = {
  requestId?: string(name='RequestId', example='FFD39C0F-DD8D-51B2-864E-2842206DB0E8'),
}

model DeleteLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLabelTableResponseBody(name='body'),
}

async function deleteLabelTable(request: DeleteLabelTableRequest): DeleteLabelTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLabelTable', 'DELETE', '/api/v1/instances/{InstanceId}/labeltables/{LabelTableId}', 'json', false, 'json', request);
}

model DeleteModelFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteModelFeatureResponseBody = {
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
}

model DeleteModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelFeatureResponseBody(name='body'),
}

async function deleteModelFeature(request: DeleteModelFeatureRequest): DeleteModelFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelFeature', 'DELETE', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', example='0DA35264-0877-5852-8971-7735B547C969'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/api/v1/instances/{InstanceId}/projects/{ProjectId}', 'json', false, 'json', request);
}

model ExportModelFeatureTrainingSetFGTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  trainingSetFgConfig: {
    fgJsonName?: string(name='FgJsonName', example='rank_v1_fg.json'),
    jarName?: string(name='JarName', example='fg_on_odps-1.3.60-jar-with-dependencies.jar'),
    partitions: map[string]map[string]any(name='Partitions'),
  }(name='TrainingSetFgConfig', position='Body'),
}

model ExportModelFeatureTrainingSetFGTableResponseBody = {
  taskId?: string(name='TaskId', example='3'),
  requestId?: string(name='requestId', example='514F82AF-3C04-5C3D-8F38-A11261BF37B0'),
}

model ExportModelFeatureTrainingSetFGTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportModelFeatureTrainingSetFGTableResponseBody(name='body'),
}

async function exportModelFeatureTrainingSetFGTable(request: ExportModelFeatureTrainingSetFGTableRequest): ExportModelFeatureTrainingSetFGTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExportModelFeatureTrainingSetFGTable', 'POST', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/action/exporttrainingsetfgtable', 'json', false, 'json', request);
}

model ExportModelFeatureTrainingSetTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  featureViewConfig?: map[string]FeatureViewConfigValue(name='FeatureViewConfig', position='Body'),
  labelInputConfig?: {
    eventTime?: string(name='EventTime', example='2022-07-02 00:00:00'),
    partitions?: map[string]map[string]any(name='Partitions'),
  }(name='LabelInputConfig', position='Body'),
  trainingSetConfig?: {
    partitions?: map[string]map[string]any(name='Partitions'),
  }(name='TrainingSetConfig', position='Body'),
}

model ExportModelFeatureTrainingSetTableResponseBody = {
  requestId?: string(name='RequestId', example='0FBBE454-9BD1-5D8F-9129-D14DB7FAFE0B'),
  taskId?: string(name='TaskId'),
}

model ExportModelFeatureTrainingSetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportModelFeatureTrainingSetTableResponseBody(name='body'),
}

async function exportModelFeatureTrainingSetTable(request: ExportModelFeatureTrainingSetTableRequest): ExportModelFeatureTrainingSetTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExportModelFeatureTrainingSetTable', 'POST', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/action/exporttrainingsettable', 'json', false, 'json', request);
}

model GetDatasourceRequest {
  instanceId: string(name='InstanceId', example='fs-********', position='Path'),
  datasourceId: string(name='DatasourceId', example='datasource1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetDatasourceResponseBody = {
  config?: string(name='Config', example='{"address": ""}'),
  datasourceId?: string(name='DatasourceId', example='3'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  name?: string(name='Name', example='datasource1'),
  requestId?: string(name='RequestId', example='AD7D9E95-BD31-53F2-B710-6C01866FCB05'),
  type?: string(name='Type', example='Hologres'),
  uri?: string(name='Uri', example='igraph_instance1'),
  workspaceId?: string(name='WorkspaceId', example='32244'),
}

model GetDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasourceResponseBody(name='body'),
}

async function getDatasource(request: GetDatasourceRequest): GetDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasource', 'GET', '/api/v1/instances/{InstanceId}/datasources/{DatasourceId}', 'json', false, 'json', request);
}

model GetDatasourceTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  datasourceId: string(name='DatasourceId', example='3', position='Path'),
  tableName: string(name='TableName', example='table1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetDatasourceTableResponseBody = {
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='field1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  requestId?: string(name='RequestId', example='D7B2F8C4-49C7-5CFA-8075-9D715A114873'),
  tableName?: string(name='TableName', example='table1'),
}

model GetDatasourceTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasourceTableResponseBody(name='body'),
}

async function getDatasourceTable(request: GetDatasourceTableRequest): GetDatasourceTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasourceTable', 'GET', '/api/v1/instances/{InstanceId}/datasources/{DatasourceId}/tables/{TableName}', 'json', false, 'json', request);
}

model GetFeatureEntityRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureEntityId: string(name='FeatureEntityId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetFeatureEntityResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  joinId?: string(name='JoinId', example='user_id'),
  name?: string(name='Name', example='feature_entity_1'),
  owner?: string(name='Owner', example='123456789*****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
}

model GetFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureEntityResponseBody(name='body'),
}

async function getFeatureEntity(request: GetFeatureEntityRequest): GetFeatureEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureEntity', 'GET', '/api/v1/instances/{InstanceId}/featureentities/{FeatureEntityId}', 'json', false, 'json', request);
}

model GetFeatureViewRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetFeatureViewResponseBody = {
  config?: string(name='Config', example='{"save_original_field":true}'),
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  featureEntityName?: string(name='FeatureEntityName', example='featureEntity1'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='user'),
      type?: string(name='Type', example='int'),
    }
  ](name='Fields'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtSyncTime?: string(name='GmtSyncTime', example='2021-12-15T23:24:33.132+08:00'),
  joinId?: string(name='JoinId', example='user_id'),
  lastSyncConfig?: string(name='LastSyncConfig', example='{
	"mode": "overwrite",
	"partitions": {
		"ds": {
			"value": "20230820"
		}
	},
	"event_time": "",
	"config": {},
	"offline_to_online": true
}'),
  name?: string(name='Name', example='featureView1'),
  owner?: string(name='Owner', example='12321421412****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project1'),
  publishTableScript?: string(name='PublishTableScript', example='from feature_store_py.fs_client import FeatureStoreClient\\nimport datetime\\nfrom feature_store_py.fs_datasource import MaxComputeDataSource\\nimport sys\\n\\ncur_day = args[\\"dt\\"]\\nprint(\\"cur_day = \\", cur_day)\\n\\naccess_key_id = o.account.access_id\\naccess_key_secret = o.account.secret_access_key\\nfs = FeatureStoreClient(access_key_id=access_key_id, access_key_secret=access_key_secret, region=\\"cn-beijing\\")\\ncur_project_name = \\"p1\\"\\nproject = fs.get_project(cur_project_name)\\n\\nfeature_view_name = \\"user_fea\\"\\nbatch_feature_view = project.get_feature_view(feature_view_name)\\ntask = batch_feature_view.publish_table(partitions={\\"ds\\":cur_day}, mode=\\"Overwrite\\")\\ntask.wait()\\ntask.print_summary()\\n'),
  registerDatasourceId?: string(name='RegisterDatasourceId', example='4'),
  registerDatasourceName?: string(name='RegisterDatasourceName', example='datasource1'),
  registerTable?: string(name='RegisterTable', example='table1'),
  requestId?: string(name='RequestId', example='72F15A8A-5A28-5B18-A0DE-0EABD7D3245A'),
  syncOnlineTable?: boolean(name='SyncOnlineTable', example='true'),
  TTL?: int32(name='TTL', example='90'),
  tags?: [ string ](name='Tags'),
  type?: string(name='Type', example='Batch'),
  writeMethod?: string(name='WriteMethod', example='custom'),
}

model GetFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureViewResponseBody(name='body'),
}

async function getFeatureView(request: GetFeatureViewRequest): GetFeatureViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFeatureView', 'GET', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetInstanceResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  message?: string(name='Message', example='Success'),
  progress?: double(name='Progress', example='0.8'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='1C5B1511-8A5B-59C3-90AF-513F9210E882'),
  status?: string(name='Status', example='Running'),
  type?: string(name='Type', example='Basic'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v1/instances/{InstanceId}', 'json', false, 'json', request);
}

model GetLabelTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  labelTableId: string(name='LabelTableId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetLabelTableResponseBody = {
  datasourceId?: string(name='DatasourceId', example='1'),
  datasourceName?: string(name='DatasourceName', example='datasource1'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='field1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  name?: string(name='Name', example='label_table1'),
  owner?: string(name='Owner', example='12321312*****'),
  projectId?: string(name='ProjectId', example='1'),
  projectName?: string(name='ProjectName', example='project1'),
  relatedModelFeatures?: [ string ](name='RelatedModelFeatures'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model GetLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLabelTableResponseBody(name='body'),
}

async function getLabelTable(request: GetLabelTableRequest): GetLabelTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLabelTable', 'GET', '/api/v1/instances/{InstanceId}/labeltables/{LabelTableId}', 'json', false, 'json', request);
}

model GetModelFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetModelFeatureResponseBody = {
  exportTrainingSetTableScript?: string(name='ExportTrainingSetTableScript', example='from feature_store_py.fs_client import FeatureStoreClient\\nfrom feature_store_py.fs_project import FeatureStoreProject\\nfrom feature_store_py.fs_datasource import LabelInput, MaxComputeDataSource, TrainingSetOutput\\nfrom feature_store_py.fs_features import FeatureSelector\\nfrom feature_store_py.fs_config import LabelInputConfig, PartitionConfig, FeatureViewConfig\\nfrom feature_store_py.fs_config import TrainSetOutputConfig, EASDeployConfig\\nimport datetime\\nimport sys\\n\\ncur_day = args[\\"dt\\"]\\nprint(\\"cur_day = \\", cur_day)\\noffset = datetime.timedelta(days=-1)\\npre_day = (datetime.datetime.strptime(cur_day, \\"%Y%m%d\\") + offset).strftime(\\"%Y%m%d\\")\\nprint(\\"pre_day = \\", pre_day)\\n\\n\\naccess_key_id = o.account.access_id\\naccess_key_secret = o.account.secret_access_key\\nfs = FeatureStoreClient(access_key_id=access_key_id, access_key_secret=access_key_secret, region=\\"cn-beijing\\")\\ncur_project_name = \\"p1\\"\\nproject = fs.get_project(cur_project_name)\\n\\nlabel_partitions = PartitionConfig(name = \\"ds\\", value = cur_day)\\nlabel_input_config = LabelInputConfig(partition_config=label_partitions)\\n\\nfeature_view_1_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_1_config = FeatureViewConfig(name = \\"user_fea\\",\\npartition_config=feature_view_1_partitions)\\n\\nfeature_view_2_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_2_config = FeatureViewConfig(name = \\"seq_fea\\",\\npartition_config=feature_view_2_partitions)\\n\\nfeature_view_3_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_3_config = FeatureViewConfig(name = \\"item_fea\\",\\npartition_config=feature_view_3_partitions)\\n\\nfeature_view_config_list = [feature_view_1_config,feature_view_2_config,feature_view_3_config]\\ntrain_set_partitions = PartitionConfig(name = \\"ds\\", value = cur_day)\\ntrain_set_output_config = TrainSetOutputConfig(partition_config=train_set_partitions)\\n\\n\\nmodel_name = \\"rank_v1\\"\\ncur_model = project.get_model(model_name)\\ntask = cur_model.export_train_set(label_input_config, feature_view_config_list, train_set_output_config)\\ntask.wait()\\nprint(\\"task_summary = \\", task.task_summary)\\n'),
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='feature2'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      featureViewName?: string(name='FeatureViewName', example='feature_view_1'),
      name?: string(name='Name', example='feature1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Features'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T14:46:22.227+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T14:46:22.227+08:00'),
  labelTableId?: string(name='LabelTableId', example='3'),
  labelTableName?: string(name='LabelTableName', example='label_table1'),
  name?: string(name='Name', example='model_feature1'),
  owner?: string(name='Owner', example='1231243253****'),
  projectId?: string(name='ProjectId', example='5'),
  projectName?: string(name='ProjectName', example='project1'),
  relations?: {
    domains?: [ 
      {
        domainType?: string(name='DomainType', example='FeatureEntity'),
        id?: string(name='Id', description='Domain ID。', example='3'),
        name?: string(name='Name', example='feature_entity_1'),
      }
    ](name='Domains'),
    links?: [ 
      {
        from?: string(name='From', example='model_feature_2'),
        link?: string(name='Link', example='user_id'),
        to?: string(name='To', example='feature_entity_3'),
      }
    ](name='Links'),
  }(name='Relations'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
  trainingSetFGTable?: string(name='TrainingSetFGTable', example='table2'),
  trainingSetTable?: string(name='TrainingSetTable', example='table1'),
}

model GetModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureResponseBody(name='body'),
}

async function getModelFeature(request: GetModelFeatureRequest): GetModelFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelFeature', 'GET', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}', 'json', false, 'json', request);
}

model GetModelFeatureFGFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
}

model GetModelFeatureFGFeatureResponseBody = {
  lookupFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', example='-1024'),
      featureName?: string(name='FeatureName', example='item_id'),
      keyFeatureDomain?: string(name='KeyFeatureDomain', example='Item'),
      keyFeatureName?: string(name='KeyFeatureName', example='1'),
      mapFeatureDomain?: string(name='MapFeatureDomain', example='User'),
      mapFeatureName?: string(name='MapFeatureName', example='item_id'),
      valueType?: string(name='ValueType', example='STRING'),
    }
  ](name='LookupFeatures'),
  rawFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', example='-1024'),
      featureDomain?: string(name='FeatureDomain', example='User'),
      featureName?: string(name='FeatureName', example='item_id'),
      featureType?: string(name='FeatureType', example='IdFeature'),
      inputFeatureName?: string(name='InputFeatureName', example='item_id'),
      valueType?: string(name='ValueType', example='STRING'),
    }
  ](name='RawFeatures'),
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
  reserves?: [ string ](name='Reserves'),
  sequenceFeatures?: [ 
    {
      attributeDelim?: string(name='AttributeDelim', example='#'),
      featureName?: string(name='FeatureName', example='item_id'),
      sequenceDelim?: string(name='SequenceDelim', example=';'),
      sequenceLength?: long(name='SequenceLength', example='50'),
      subFeatures?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='-1024'),
          featureDomain?: string(name='FeatureDomain', example='User'),
          featureName?: string(name='FeatureName', example='item_id'),
          featureType?: string(name='FeatureType', example='IdFeature'),
          inputFeatureName?: string(name='InputFeatureName', example='item_id'),
          valueType?: string(name='ValueType', example='STRING'),
        }
      ](name='SubFeatures'),
    }
  ](name='SequenceFeatures'),
}

model GetModelFeatureFGFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureFGFeatureResponseBody(name='body'),
}

async function getModelFeatureFGFeature(request: GetModelFeatureFGFeatureRequest): GetModelFeatureFGFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelFeatureFGFeature', 'GET', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/fgfeature', 'json', false, 'json', request);
}

model GetModelFeatureFGInfoRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
}

model GetModelFeatureFGInfoResponseBody = {
  content?: string(name='Content', example='{"features": [{"feature_name": "item_id","feature_type": "id_feature","value_type": "String","expression": "item:item_id","default_value": "-1024","combiner": "mean","need_prefix": false},{"feature_name": "f1","feature_type": "lookup_feature","value_type": "Integer","map": "item:f1","key": "user:1","default_value": "0","combiner": "mean","need_prefix": false,"needDiscrete": false,"needWeighting": false,"needKey": false}],"reserves": ["f1"]}'),
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
}

model GetModelFeatureFGInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureFGInfoResponseBody(name='body'),
}

async function getModelFeatureFGInfo(request: GetModelFeatureFGInfoRequest): GetModelFeatureFGInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelFeatureFGInfo', 'GET', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/fginfo', 'json', false, 'json', request);
}

model GetProjectRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetProjectResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  featureEntityCount?: int32(name='FeatureEntityCount', example='10'),
  featureViewCount?: int32(name='FeatureViewCount', example='10'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  modelCount?: int32(name='ModelCount', example='5'),
  name?: string(name='Name', example='project1'),
  offlineDatasourceId?: string(name='OfflineDatasourceId', example='4'),
  offlineDatasourceName?: string(name='OfflineDatasourceName', example='datasource1'),
  offlineDatasourceType?: string(name='OfflineDatasourceType', example='MaxCompute'),
  offlineLifecycle?: int32(name='OfflineLifecycle', example='90'),
  onlineDatasourceId?: string(name='OnlineDatasourceId', example='5'),
  onlineDatasourceName?: string(name='OnlineDatasourceName', example='datasource2'),
  onlineDatasourceType?: string(name='OnlineDatasourceType', example='Hologres'),
  owner?: string(name='Owner', example='1232132543543****'),
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}', 'json', false, 'json', request);
}

model GetProjectFeatureEntityRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  featureEntityName: string(name='FeatureEntityName', example='feature_entity_1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetProjectFeatureEntityResponseBody = {
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  joinId?: string(name='JoinId', example='user_id'),
  name?: string(name='Name', example='feature_entity_1'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  workspaceId?: string(name='WorkspaceId', example='34245'),
}

model GetProjectFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectFeatureEntityResponseBody(name='body'),
}

async function getProjectFeatureEntity(request: GetProjectFeatureEntityRequest): GetProjectFeatureEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectFeatureEntity', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureentities/{FeatureEntityName}', 'json', false, 'json', request);
}

model GetProjectFeatureEntityHotIdsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='4', position='Path'),
  nextSeqNumber: string(name='NextSeqNumber', example='3', position='Path'),
  featureEntityName: string(name='FeatureEntityName', example='feature_entity_1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetProjectFeatureEntityHotIdsResponseBody = {
  count?: int32(name='Count', example='3'),
  hotIds?: string(name='HotIds', example='1,2,3'),
  nextSeqNumber?: string(name='NextSeqNumber', example='5'),
  requestId?: string(name='RequestId', example='FFD39C0F-DD8D-51B2-864E-2842206DB0E8'),
}

model GetProjectFeatureEntityHotIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectFeatureEntityHotIdsResponseBody(name='body'),
}

async function getProjectFeatureEntityHotIds(request: GetProjectFeatureEntityHotIdsRequest): GetProjectFeatureEntityHotIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectFeatureEntityHotIds', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureentities/{FeatureEntityName}/hotids/{NextSeqNumber}', 'json', false, 'json', request);
}

model GetProjectFeatureViewRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  featureViewName: string(name='FeatureViewName', example='fv1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetProjectFeatureViewResponseBody = {
  config?: string(name='Config', example='{}'),
  featureEntityId?: string(name='FeatureEntityId', example='4'),
  featureEntityName?: string(name='FeatureEntityName', example='entity1'),
  featureViewId?: string(name='FeatureViewId', example='3'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='field1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  gmtSyncTime?: string(name='GmtSyncTime', example='2021-12-15T23:24:33.132+08:00'),
  joinId?: string(name='JoinId', example='user_id'),
  lastSyncConfig?: string(name='LastSyncConfig', example='{}'),
  name?: string(name='Name', example='feature_view1'),
  owner?: string(name='Owner', example='1231421342****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project1'),
  registerDatasourceId?: string(name='RegisterDatasourceId', example='4'),
  registerTable?: string(name='RegisterTable', example='table1'),
  requestId?: string(name='RequestId', example='BFD68AD5-398C-5AC4-A357-C7EA8DF33C26'),
  syncOnlineTable?: boolean(name='SyncOnlineTable', example='true'),
  TTL?: int32(name='TTL', example='90'),
  tags?: [ string ](name='Tags'),
  type?: string(name='Type', example='Batch'),
  writeMethod?: string(name='WriteMethod', example='Custom'),
}

model GetProjectFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectFeatureViewResponseBody(name='body'),
}

async function getProjectFeatureView(request: GetProjectFeatureViewRequest): GetProjectFeatureViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectFeatureView', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureviews/{FeatureViewName}', 'json', false, 'json', request);
}

model GetProjectModelFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  modelFeatureName: string(name='ModelFeatureName', example='model_feature_1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetProjectModelFeatureResponseBody = {
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='feature2'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      featureViewName?: string(name='FeatureViewName', example='feature_view1'),
      name?: string(name='Name', example='feature1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Features'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T14:46:22.227+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T14:46:22.227+08:00'),
  labelDatasourceId?: string(name='LabelDatasourceId', example='3'),
  labelDatasourceTable?: string(name='LabelDatasourceTable', example='table1'),
  labelEventTime?: string(name='LabelEventTime', example='dt'),
  labelTableId?: string(name='LabelTableId', example='3'),
  modelFeatureId?: string(name='ModelFeatureId', example='3'),
  name?: string(name='Name', example='model_feature_1'),
  owner?: string(name='Owner', example='12324325324****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project1'),
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
  trainingSetFGTable?: string(name='TrainingSetFGTable', example='table2'),
  trainingSetTable?: string(name='TrainingSetTable', example='model_feature_xxx_training_set'),
}

model GetProjectModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectModelFeatureResponseBody(name='body'),
}

async function getProjectModelFeature(request: GetProjectModelFeatureRequest): GetProjectModelFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectModelFeature', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/modelfeatures/{ModelFeatureName}', 'json', false, 'json', request);
}

model GetServiceIdentityRoleRequest {
  roleName: string(name='RoleName', example='AliyunServiceRoleForFeatureStore', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetServiceIdentityRoleResponseBody = {
  policy?: string(name='Policy', example='{
"Version": "1",
"Statement":[]
}'),
  requestId?: string(name='RequestId', example='6F629E92-F64D-502D-85AA-A9C54894CA3D'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForPaiFeatureStore'),
}

model GetServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceIdentityRoleResponseBody(name='body'),
}

async function getServiceIdentityRole(request: GetServiceIdentityRoleRequest): GetServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceIdentityRole', 'GET', '/api/v1/serviceidentityroles/{RoleName}', 'json', false, 'json', request);
}

model GetTaskRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  taskId: string(name='TaskId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetTaskResponseBody = {
  config?: string(name='Config', example='{
	"mode": "overwrite",
	"partitions": {
		"dt": "20230820"
	},
	"event_time": "",
	"config": {},
	"offline_to_online": true
}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtExecutedTime?: string(name='GmtExecutedTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtFinishedTime?: string(name='GmtFinishedTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  objectId?: string(name='ObjectId', example='3'),
  objectType?: string(name='ObjectType', example='ModelFeature'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  runningConfig?: string(name='RunningConfig', example='DROP TABLE IF EXISTS public.fsxxx'),
  status?: string(name='Status', example='Running'),
  type?: string(name='Type', example='OfflineToOnline'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/api/v1/instances/{InstanceId}/tasks/{TaskId}', 'json', false, 'json', request);
}

model ListDatasourceTablesRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  datasourceId: string(name='DatasourceId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  tableName?: string(name='TableName', example='table1', position='Query'),
}

model ListDatasourceTablesResponseBody = {
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  tables?: [ string ](name='Tables'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListDatasourceTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasourceTablesResponseBody(name='body'),
}

async function listDatasourceTables(request: ListDatasourceTablesRequest): ListDatasourceTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasourceTables', 'GET', '/api/v1/instances/{InstanceId}/datasources/{DatasourceId}/tables', 'json', false, 'json', request);
}

model ListDatasourcesRequest {
  instanceId: string(name='InstanceId', example='featureStore-cn-XXXXXXX', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', example='datasource1', position='Query'),
  order?: string(name='Order', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime', position='Query'),
  type?: string(name='Type', example='MaxCompute', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='234', position='Query'),
}

model ListDatasourcesResponseBody = {
  datasources?: [ 
    {
      config?: string(name='Config', example='{"address": ""}'),
      datasourceId?: string(name='DatasourceId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='datasource1'),
      type?: string(name='Type', example='Hologres'),
      uri?: string(name='Uri', example='igraph_instance1'),
      workspaceId?: string(name='WorkspaceId', example='32324'),
    }
  ](name='Datasources'),
  requestId?: string(name='RequestId', example='44933189-493B-5C43-A5C6-11EEC2A43520'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListDatasourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasourcesResponseBody(name='body'),
}

async function listDatasources(request: ListDatasourcesRequest): ListDatasourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasources', 'GET', '/api/v1/instances/{InstanceId}/datasources', 'json', false, 'json', request);
}

model ListFeatureEntitiesRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  featureEntityIds?: [ string ](name='FeatureEntityIds', shrink='simple', position='Query'),
  name?: string(name='Name', example='feature_entity_1', position='Query'),
  order?: string(name='Order', example='Desc', position='Query'),
  owner?: string(name='Owner', example='1231432*****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId: string(name='ProjectId', example='3', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime', position='Query'),
}

model ListFeatureEntitiesResponseBody = {
  featureEntities?: [ 
    {
      featureEntityId?: string(name='FeatureEntityId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      joinId?: string(name='JoinId', example='user_id'),
      name?: string(name='Name', example='feature_entity_1'),
      owner?: string(name='Owner', example='123456789****'),
      projectId?: string(name='ProjectId', example='3'),
      projectName?: string(name='ProjectName', example='project_1'),
    }
  ](name='FeatureEntities'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListFeatureEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureEntitiesResponseBody(name='body'),
}

async function listFeatureEntities(request: ListFeatureEntitiesRequest): ListFeatureEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureEntities', 'GET', '/api/v1/instances/{InstanceId}/featureentities', 'json', false, 'json', request);
}

model ListFeatureViewFieldRelationshipsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='4', position='Path'),
  fieldName: string(name='FieldName', example='user_id', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListFeatureViewFieldRelationshipsResponseBody = {
  relationships?: [ 
    {
      featureName?: string(name='FeatureName', example='featureView1'),
      models?: [ 
        {
          modelId?: string(name='ModelId', example='3'),
          modelName?: string(name='ModelName', example='dbmtl'),
        }
      ](name='Models'),
      offlineTableName?: string(name='OfflineTableName', example='table2'),
      onlineTableName?: string(name='OnlineTableName', example='table1'),
    }
  ](name='Relationships'),
  requestId?: string(name='RequestId', example='BF349686-C932-55B5-9B31-DAFA395C0E06'),
}

model ListFeatureViewFieldRelationshipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewFieldRelationshipsResponseBody(name='body'),
}

async function listFeatureViewFieldRelationships(request: ListFeatureViewFieldRelationshipsRequest): ListFeatureViewFieldRelationshipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureViewFieldRelationships', 'GET', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}/fields/{FieldName}/relationships', 'json', false, 'json', request);
}

model ListFeatureViewRelationshipsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListFeatureViewRelationshipsResponseBody = {
  relationships?: [ 
    {
      featureViewName?: string(name='FeatureViewName', example='fv1'),
      models?: [ 
        {
          modelId?: string(name='ModelId', example='3'),
          modelName?: string(name='ModelName', example='dbmtl'),
        }
      ](name='Models'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='Relationships'),
  requestId?: string(name='RequestId', example='0FBBE454-9BD1-5D8F-9129-D14DB7FAFE0B'),
}

model ListFeatureViewRelationshipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewRelationshipsResponseBody(name='body'),
}

async function listFeatureViewRelationships(request: ListFeatureViewRelationshipsRequest): ListFeatureViewRelationshipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureViewRelationships', 'GET', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}/relationships', 'json', false, 'json', request);
}

model ListFeatureViewsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  featureName?: string(name='FeatureName', example='feature1', position='Query'),
  featureViewIds?: [ string ](name='FeatureViewIds', shrink='simple', position='Query'),
  name?: string(name='Name', example='fv1', position='Query'),
  order?: string(name='Order', example='Desc', position='Query'),
  owner?: string(name='Owner', example='1232143243242****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId: string(name='ProjectId', example='3', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  tag?: string(name='Tag', example='tag1', position='Query'),
  type?: string(name='Type', example='Batch', position='Query'),
}

model ListFeatureViewsResponseBody = {
  featureViews?: [ 
    {
      featureEntityName?: string(name='FeatureEntityName', example='featureEntity1'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='featureView1'),
      owner?: string(name='Owner', example='12321421412****'),
      projectId?: string(name='ProjectId', example='3'),
      projectName?: string(name='ProjectName', example='project1'),
      registerDatasourceId?: string(name='RegisterDatasourceId', example='4'),
      registerDatasourceName?: string(name='RegisterDatasourceName', example='datasource1'),
      registerTable?: string(name='RegisterTable', example='table1'),
      TTL?: int32(name='TTL', example='90'),
      type?: string(name='Type', example='Batch'),
    }
  ](name='FeatureViews'),
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListFeatureViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewsResponseBody(name='body'),
}

async function listFeatureViews(request: ListFeatureViewsRequest): ListFeatureViewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureViews', 'GET', '/api/v1/instances/{InstanceId}/featureviews', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
      instanceId?: string(name='InstanceId', example='featureStore-cn-7mz2xfu****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Initializing'),
      type?: string(name='Type', example='Basic'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='2CA11923-2A3D-5E5A-8314-E699D2DD15DE'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v1/instances', 'json', false, 'json', request);
}

model ListLabelTablesRequest {
  instanceId: string(name='InstanceId', example='featurestore-test*', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  labelTableIds?: [ string ](name='LabelTableIds', shrink='simple', position='Query'),
  name?: string(name='Name', example='label_table1', position='Query'),
  order?: string(name='Order', example='Asc', position='Query'),
  owner?: string(name='Owner', example='1231432432****', position='Query'),
  pageNumber?: long(name='PageNumber', example='10', position='Query'),
  pageSize?: long(name='PageSize', example='1', position='Query'),
  projectId: string(name='ProjectId', example='project1', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime', position='Query'),
}

model ListLabelTablesResponseBody = {
  labelTables?: [ 
    {
      datasourceId?: string(name='DatasourceId', example='3'),
      datasourceName?: string(name='DatasourceName', example='datasource1'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      labelTableId?: string(name='LabelTableId', example='3'),
      name?: string(name='Name', example='label_table1'),
      owner?: string(name='Owner', example='123214213214'),
      projectId?: string(name='ProjectId', example='1'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='LabelTables'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  totalCount?: long(name='TotalCount', example='21'),
}

model ListLabelTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLabelTablesResponseBody(name='body'),
}

async function listLabelTables(request: ListLabelTablesRequest): ListLabelTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLabelTables', 'GET', '/api/v1/instances/{InstanceId}/labeltables', 'json', false, 'json', request);
}

model ListModelFeatureAvailableFeaturesRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  featureName?: string(name='FeatureName', example='f1', position='Query'),
}

model ListModelFeatureAvailableFeaturesResponseBody = {
  avaliableFeatures?: [ 
    {
      name?: string(name='Name', example='age'),
      sourceName?: string(name='SourceName', example='user_fea'),
      sourceType?: string(name='SourceType', example='FeatureView'),
      type?: string(name='Type', example='STRING'),
    }
  ](name='AvaliableFeatures'),
  totalCount?: long(name='TotalCount', example='10'),
  requestId?: string(name='requestId', example='ED4DEA2F-F216-57F0-AE28-08D791233280'),
}

model ListModelFeatureAvailableFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelFeatureAvailableFeaturesResponseBody(name='body'),
}

async function listModelFeatureAvailableFeatures(request: ListModelFeatureAvailableFeaturesRequest): ListModelFeatureAvailableFeaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModelFeatureAvailableFeatures', 'GET', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/availablefeatures', 'json', false, 'json', request);
}

model ListModelFeaturesRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  modelFeatureIds?: [ string ](name='ModelFeatureIds', shrink='simple', position='Query'),
  name?: string(name='Name', example='model_feature1', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  owner?: string(name='Owner', example='12323143****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId: string(name='ProjectId', example='4', position='Query'),
  sortBy?: string(name='SortBy', example='DESC', position='Query'),
}

model ListModelFeaturesResponseBody = {
  modelFeatures?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T14:46:22.227+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T14:46:22.227+08:00'),
      labelTableName?: string(name='LabelTableName', example='label_table_1'),
      modelFeatureId?: string(name='ModelFeatureId', example='3'),
      name?: string(name='Name', example='model_feature1'),
      owner?: string(name='Owner', example='1231243253****'),
      projectId?: string(name='ProjectId', example='5'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='ModelFeatures'),
  requestId?: string(name='RequestId', example='2CA11923-2A3D-5E5A-8314-E699D2DD15DE'),
  totalCount?: long(name='TotalCount', example='4'),
}

model ListModelFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelFeaturesResponseBody(name='body'),
}

async function listModelFeatures(request: ListModelFeaturesRequest): ListModelFeaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModelFeatures', 'GET', '/api/v1/instances/{InstanceId}/modelfeatures', 'json', false, 'json', request);
}

model ListProjectFeatureViewOwnersRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListProjectFeatureViewOwnersResponseBody = {
  owners?: [ string ](name='Owners'),
  requestId?: string(name='RequestId', example='0FBBE454-9BD1-5D8F-9129-D14DB7FAFE0B'),
}

model ListProjectFeatureViewOwnersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFeatureViewOwnersResponseBody(name='body'),
}

async function listProjectFeatureViewOwners(request: ListProjectFeatureViewOwnersRequest): ListProjectFeatureViewOwnersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectFeatureViewOwners', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureviewowners', 'json', false, 'json', request);
}

model ListProjectFeatureViewTagsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListProjectFeatureViewTagsResponseBody = {
  requestId?: string(name='RequestId', example='D3DB6C44-2EFD-5575-A58D-BED4BD07BE46'),
  tags?: [ string ](name='Tags'),
}

model ListProjectFeatureViewTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFeatureViewTagsResponseBody(name='body'),
}

async function listProjectFeatureViewTags(request: ListProjectFeatureViewTagsRequest): ListProjectFeatureViewTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectFeatureViewTags', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureviewtags', 'json', false, 'json', request);
}

model ListProjectFeatureViewsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListProjectFeatureViewsResponseBody = {
  featureViews?: [ 
    {
      featureViewId?: string(name='FeatureViewId', example='3'),
      features?: [ 
        {
          attributes?: [ string ](name='Attributes'),
          name?: string(name='Name', example='f1'),
          type?: string(name='Type', example='INT32'),
        }
      ](name='Features'),
      name?: string(name='Name', example='feature_view1'),
    }
  ](name='FeatureViews'),
  requestId?: string(name='RequestId', example='AE2AF33E-0C0D-51A8-B89B-C5F1DF261D92'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListProjectFeatureViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFeatureViewsResponseBody(name='body'),
}

async function listProjectFeatureViews(request: ListProjectFeatureViewsRequest): ListProjectFeatureViewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectFeatureViews', 'GET', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureviews', 'json', false, 'json', request);
}

model ListProjectsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', example='fs1', position='Query'),
  order?: string(name='Order', example='Asc', position='Query'),
  owner?: string(name='Owner', example='134324352****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectIds?: [ string ](name='ProjectIds', shrink='simple', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='234', position='Query'),
}

model ListProjectsResponseBody = {
  projects?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      featureEntityCount?: int32(name='FeatureEntityCount', example='10'),
      featureViewCount?: int32(name='FeatureViewCount', example='10'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      modelCount?: int32(name='ModelCount', example='5'),
      name?: string(name='Name', example='project1'),
      offlineDatasourceId?: string(name='OfflineDatasourceId', example='4'),
      offlineDatasourceName?: string(name='OfflineDatasourceName', example='datasource1'),
      offlineDatasourceType?: string(name='OfflineDatasourceType', example='MaxCompute'),
      offlineLifecycle?: int32(name='OfflineLifecycle', example='10'),
      onlineDatasourceId?: string(name='OnlineDatasourceId', example='5'),
      onlineDatasourceName?: string(name='OnlineDatasourceName', example='datasource2'),
      onlineDatasourceType?: string(name='OnlineDatasourceType', example='Hologres'),
      owner?: string(name='Owner', example='1232132543543****'),
      projectId?: string(name='ProjectId', example='3'),
    }
  ](name='Projects'),
  requestId?: string(name='RequestId', example='44933189-493B-5C43-A5C6-11EEC2A43520'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/api/v1/instances/{InstanceId}/projects', 'json', false, 'json', request);
}

model ListTaskLogsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  taskId: string(name='TaskId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListTaskLogsResponseBody = {
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='72F15A8A-5A28-5B18-A0DE-0EABD7D3245A'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTaskLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskLogsResponseBody(name='body'),
}

async function listTaskLogs(request: ListTaskLogsRequest): ListTaskLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaskLogs', 'GET', '/api/v1/instances/{InstanceId}/tasks/{TaskId}/logs', 'json', false, 'json', request);
}

model ListTasksRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  objectId?: string(name='ObjectId', example='4', position='Query'),
  objectType?: string(name='ObjectType', example='ModelFeature', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId: string(name='ProjectId', example='4', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
  taskIds?: [ string ](name='TaskIds', shrink='simple', position='Query'),
  type?: string(name='Type', example='OfflineToOnline', position='Query'),
}

model ListTasksResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
  tasks?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtExecutedTime?: string(name='GmtExecutedTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtFinishedTime?: string(name='GmtFinishedTime', example='2023-07-04T11:26:09.036+08:00'),
      objectId?: string(name='ObjectId', example='5'),
      objectType?: string(name='ObjectType', example='ModelFeature'),
      projectId?: string(name='ProjectId', example='4'),
      projectName?: string(name='ProjectName', example='project_1'),
      status?: string(name='Status', example='Running'),
      taskId?: string(name='TaskId', example='4'),
      type?: string(name='Type', example='OfflineToOnline'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/api/v1/instances/{InstanceId}/tasks', 'json', false, 'json', request);
}

model PublishFeatureViewTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{}', position='Body'),
  eventTime?: string(name='EventTime', example='2021-12-15T23:24:33.132+08:00', position='Body'),
  mode: string(name='Mode', example='Overwrite', position='Body'),
  offlineToOnline: boolean(name='OfflineToOnline', example='true', position='Body'),
  partitions?: map[string]map[string]any(name='Partitions', position='Body'),
}

model PublishFeatureViewTableResponseBody = {
  requestId?: string(name='RequestId', example='627B5776-4D06-5A49-8A04-508AA39653F4'),
  taskId?: string(name='TaskId'),
}

model PublishFeatureViewTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFeatureViewTableResponseBody(name='body'),
}

async function publishFeatureViewTable(request: PublishFeatureViewTableRequest): PublishFeatureViewTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishFeatureViewTable', 'POST', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}/action/publishtable', 'json', false, 'json', request);
}

model UpdateDatasourceRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  datasourceId: string(name='DatasourceId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  config?: string(name='Config', example='{"address": ""}', position='Body'),
  name: string(name='Name', example='datasource1', position='Body'),
  uri: string(name='Uri', example='igraph_instance1', position='Body'),
}

model UpdateDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model UpdateDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasourceResponseBody(name='body'),
}

async function updateDatasource(request: UpdateDatasourceRequest): UpdateDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasource', 'PUT', '/api/v1/instances/{InstanceId}/datasources/{DatasourceId}', 'json', false, 'json', request);
}

model UpdateLabelTableRequest {
  instanceId: string(name='InstanceId', example='featurestore-test1', position='Path'),
  labelTableId: string(name='LabelTableId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  datasourceId?: string(name='DatasourceId', example='3', position='Body'),
  fields: [ 
    {
      attributes: [ string ](name='Attributes'),
      name: string(name='Name', example='lat'),
      type: string(name='Type', example='DOUBLE'),
    }
  ](name='Fields', position='Body'),
  name?: string(name='Name', example='rec_test', position='Body'),
}

model UpdateLabelTableResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model UpdateLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLabelTableResponseBody(name='body'),
}

async function updateLabelTable(request: UpdateLabelTableRequest): UpdateLabelTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLabelTable', 'PUT', '/api/v1/instances/{InstanceId}/labeltables/{LabelTableId}', 'json', false, 'json', request);
}

model UpdateModelFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='4', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='sex'),
      featureViewId: string(name='FeatureViewId', example='5'),
      name: string(name='Name', example='gender'),
      type: string(name='Type', example='STRING'),
    }
  ](name='Features', position='Body'),
  labelTableId?: string(name='LabelTableId', example='4', position='Body'),
  sequenceFeatureViewIds?: [ string ](name='SequenceFeatureViewIds', position='Body'),
}

model UpdateModelFeatureResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model UpdateModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelFeatureResponseBody(name='body'),
}

async function updateModelFeature(request: UpdateModelFeatureRequest): UpdateModelFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModelFeature', 'PUT', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}', 'json', false, 'json', request);
}

model UpdateModelFeatureFGFeatureRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  lookupFeatures?: [ 
    {
      defaultValue: string(name='DefaultValue', example='-1024'),
      featureName: string(name='FeatureName', example='item_id'),
      keyFeatureDomain: string(name='KeyFeatureDomain', example='Item'),
      keyFeatureName: string(name='KeyFeatureName', example='1'),
      mapFeatureDomain: string(name='MapFeatureDomain', example='User'),
      mapFeatureName: string(name='MapFeatureName', example='item_id'),
      valueType: string(name='ValueType', example='STRING'),
    }
  ](name='LookupFeatures', position='Body'),
  rawFeatures?: [ 
    {
      defaultValue: string(name='DefaultValue', example='-1024'),
      featureDomain: string(name='FeatureDomain', example='User'),
      featureName: string(name='FeatureName', example='item_id'),
      featureType: string(name='FeatureType', example='IdFeature'),
      inputFeatureName: string(name='InputFeatureName', example='item_id'),
      valueType: string(name='ValueType', example='STRING'),
    }
  ](name='RawFeatures', position='Body'),
  reserves: [ string ](name='Reserves', position='Body'),
  sequenceFeatures?: [ 
    {
      attributeDelim: string(name='AttributeDelim', example='#'),
      featureName: string(name='FeatureName', example='item_id'),
      sequenceDelim: string(name='SequenceDelim', example=';'),
      sequenceLength: long(name='SequenceLength', example='50'),
      subFeatures?: [ 
        {
          defaultValue: string(name='DefaultValue', example='-1024'),
          featureDomain: string(name='FeatureDomain', example='User'),
          featureName: string(name='FeatureName', example='item_id'),
          featureType: string(name='FeatureType', example='RawFeature'),
          inputFeatureName: string(name='InputFeatureName', example='item_id'),
          valueType: string(name='ValueType', example='STRING'),
        }
      ](name='SubFeatures'),
    }
  ](name='SequenceFeatures', position='Body'),
}

model UpdateModelFeatureFGFeatureResponseBody = {
  requestId?: string(name='requestId', example='7D497816-607C-5B67-97B1-61354B6ACB2B'),
}

model UpdateModelFeatureFGFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelFeatureFGFeatureResponseBody(name='body'),
}

async function updateModelFeatureFGFeature(request: UpdateModelFeatureFGFeatureRequest): UpdateModelFeatureFGFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModelFeatureFGFeature', 'PUT', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/fgfeature', 'json', false, 'json', request);
}

model UpdateModelFeatureFGInfoRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  modelFeatureId: string(name='ModelFeatureId', example='3', position='Path'),
  content: string(name='Content', example='{"features": [{"feature_name": "item_id","feature_type": "id_feature","value_type": "String","expression": "item:item_id","default_value": "-1024","combiner": "mean","need_prefix": false},{"feature_name": "f1","feature_type": "lookup_feature","value_type": "Integer","map": "item:f1","key": "user:1","default_value": "0","combiner": "mean","need_prefix": false,"needDiscrete": false,"needWeighting": false,"needKey": false}],"reserves": ["f1"]}', position='Body'),
}

model UpdateModelFeatureFGInfoResponseBody = {
  requestId?: string(name='requestId', example='E8CA47C5-B3E8-5BD7-9910-245432A365EB'),
}

model UpdateModelFeatureFGInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelFeatureFGInfoResponseBody(name='body'),
}

async function updateModelFeatureFGInfo(request: UpdateModelFeatureFGInfoRequest): UpdateModelFeatureFGInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModelFeatureFGInfo', 'PUT', '/api/v1/instances/{InstanceId}/modelfeatures/{ModelFeatureId}/fginfo', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='This is a test.', position='Body'),
  name?: string(name='Name', example='project1', position='Body'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', example='2150233F-A1F7-54D2-B5B5-8A70567549BD'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/api/v1/instances/{InstanceId}/projects/{ProjectId}', 'json', false, 'json', request);
}

model WriteFeatureViewTableRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  featureViewId: string(name='FeatureViewId', example='3', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  mode: string(name='Mode', example='Merge', position='Body'),
  partitions?: map[string]map[string]any(name='Partitions', position='Body'),
  urlDatasource?: {
    delimiter?: string(name='Delimiter', example=','),
    omitHeader?: boolean(name='OmitHeader', example='true'),
    path?: string(name='Path', example='xxx.xxx.com/file.csv'),
  }(name='UrlDatasource', position='Body'),
}

model WriteFeatureViewTableResponseBody = {
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
  taskId?: string(name='TaskId'),
}

model WriteFeatureViewTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WriteFeatureViewTableResponseBody(name='body'),
}

async function writeFeatureViewTable(request: WriteFeatureViewTableRequest): WriteFeatureViewTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WriteFeatureViewTable', 'POST', '/api/v1/instances/{InstanceId}/featureviews/{FeatureViewId}/action/writetable', 'json', false, 'json', request);
}

model WriteProjectFeatureEntityHotIdsRequest {
  instanceId: string(name='InstanceId', example='fs-cn-********', position='Path'),
  projectId: string(name='ProjectId', example='3', position='Path'),
  featureEntityName: string(name='FeatureEntityName', example='feature_entity_1', position='Path'),
  regionId?: string(name='RegionId', position='Host'),
  hotIds: string(name='HotIds', example='1,2,3', position='Body'),
  version: string(name='Version', example='20221213', position='Body'),
}

model WriteProjectFeatureEntityHotIdsResponseBody = {
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
}

model WriteProjectFeatureEntityHotIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WriteProjectFeatureEntityHotIdsResponseBody(name='body'),
}

async function writeProjectFeatureEntityHotIds(request: WriteProjectFeatureEntityHotIdsRequest): WriteProjectFeatureEntityHotIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WriteProjectFeatureEntityHotIds', 'POST', '/api/v1/instances/{InstanceId}/projects/{ProjectId}/featureentities/{FeatureEntityName}/action/writehotids', 'json', false, 'json', request);
}

model FeatureViewConfigValue = {
  partitions?: map[string]FeatureViewConfigValuePartitionsValue(name='Partitions'),
  eventTime?: string(name='EventTime'),
  equal?: boolean(name='Equal'),
}

model FeatureViewConfigValuePartitionsValue = {
  value?: string(name='Value'),
  values?: [ string ](name='Values'),
  startValue?: string(name='StartValue'),
  endValue?: string(name='EndValue'),
}

