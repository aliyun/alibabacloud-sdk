/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('paifeaturestore', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model FeatureViewConfigValue = {
  partitions?: map[string]FeatureViewConfigValuePartitionsValue(name='Partitions'),
  eventTime?: string(name='EventTime'),
  equal?: boolean(name='Equal'),
  useMock?: boolean(name='UseMock'),
}

model FeatureViewConfigValuePartitionsValue = {
  value?: string(name='Value'),
  values?: [ string ](name='Values'),
  startValue?: string(name='StartValue'),
  endValue?: string(name='EndValue'),
}

model CheckInstanceDatasourceRequest {
  config?: string(name='Config', example='{"address": ""}'),
  type?: string(name='Type', description='This parameter is required.', example='Hologres'),
  uri?: string(name='Uri', description='This parameter is required.', example='igraph1'),
}

model CheckInstanceDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  status?: string(name='Status', example='Success'),
}

model CheckInstanceDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckInstanceDatasourceResponseBody(name='body'),
}

/**
 * @summary 检测资源连接状态。
 *
 * @param request CheckInstanceDatasourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckInstanceDatasourceResponse
 */
@context("checkInstanceDatasourceWithContext")
async function checkInstanceDatasourceWithOptions(InstanceId: string, request: CheckInstanceDatasourceRequest, headers: map[string]string, runtime: $RuntimeOptions): CheckInstanceDatasourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckInstanceDatasource',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/action/checkdatasource`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检测资源连接状态。
 *
 * @param request CheckInstanceDatasourceRequest
 * @return CheckInstanceDatasourceResponse
 */
async function checkInstanceDatasource(InstanceId: string, request: CheckInstanceDatasourceRequest): CheckInstanceDatasourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return checkInstanceDatasourceWithOptions(InstanceId, request, headers, runtime);
}

model CheckModelFeatureFGFeatureResponseBody = {
  FGCheckResults?: [ 
    {
      message?: string(name='Message', example='f1[1]: these lookup_features\\\\"s LookupValueFeature(key) not exist in model features'),
      ruleCode?: string(name='RuleCode', example='SeqSubEx'),
      status?: boolean(name='Status', example='True'),
    }
  ](name='FGCheckResults'),
  requestId?: string(name='requestId', example='ED4DEA2F-F216-57F0-AE28-08D791233280'),
}

model CheckModelFeatureFGFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckModelFeatureFGFeatureResponseBody(name='body'),
}

/**
 * @summary 检查FG配置内容是否正确，是否满足所有规则。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckModelFeatureFGFeatureResponse
 */
@context("checkModelFeatureFGFeatureWithContext")
async function checkModelFeatureFGFeatureWithOptions(InstanceId: string, ModelFeatureId: string, headers: map[string]string, runtime: $RuntimeOptions): CheckModelFeatureFGFeatureResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckModelFeatureFGFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/action/checkfgfeature`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查FG配置内容是否正确，是否满足所有规则。
 *
 * @return CheckModelFeatureFGFeatureResponse
 */
async function checkModelFeatureFGFeature(InstanceId: string, ModelFeatureId: string): CheckModelFeatureFGFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return checkModelFeatureFGFeatureWithOptions(InstanceId, ModelFeatureId, headers, runtime);
}

model CreateDatasourceRequest {
  config?: string(name='Config', example='{"address": ""}'),
  name?: string(name='Name', description='This parameter is required.', example='datasource1'),
  type?: string(name='Type', description='This parameter is required.', example='Hologres'),
  uri?: string(name='Uri', description='This parameter is required.', example='igraph_instance1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='234'),
}

model CreateDatasourceResponseBody = {
  datasourceId?: string(name='DatasourceId', example='3'),
  requestId?: string(name='RequestId', example='1C5B1511-8A5B-59C3-90AF-513F9210E882'),
}

model CreateDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasourceResponseBody(name='body'),
}

/**
 * @summary 创建数据源。
 *
 * @param request CreateDatasourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasourceResponse
 */
@context("createDatasourceWithContext")
async function createDatasourceWithOptions(InstanceId: string, request: CreateDatasourceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasource',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据源。
 *
 * @param request CreateDatasourceRequest
 * @return CreateDatasourceResponse
 */
async function createDatasource(InstanceId: string, request: CreateDatasourceRequest): CreateDatasourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasourceWithOptions(InstanceId, request, headers, runtime);
}

model CreateFeatureEntityRequest {
  joinId?: string(name='JoinId', description='This parameter is required.', example='user_id'),
  name?: string(name='Name', description='This parameter is required.', example='feature_entity_1'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='3'),
}

model CreateFeatureEntityResponseBody = {
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
}

model CreateFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureEntityResponseBody(name='body'),
}

/**
 * @summary 创建特征实体
 *
 * @param request CreateFeatureEntityRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFeatureEntityResponse
 */
@context("createFeatureEntityWithContext")
async function createFeatureEntityWithOptions(InstanceId: string, request: CreateFeatureEntityRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateFeatureEntityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.joinId)) {
    body['JoinId'] = request.joinId;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFeatureEntity',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureentities`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建特征实体
 *
 * @param request CreateFeatureEntityRequest
 * @return CreateFeatureEntityResponse
 */
async function createFeatureEntity(InstanceId: string, request: CreateFeatureEntityRequest): CreateFeatureEntityResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createFeatureEntityWithOptions(InstanceId, request, headers, runtime);
}

model CreateFeatureViewRequest {
  config?: string(name='Config', example='{"save_original_field":true}'),
  featureEntityId?: string(name='FeatureEntityId', example='4'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='age'),
      transform?: [ 
        {
          input?: [ 
            {
              name?: string(name='Name'),
              type?: string(name='Type'),
            }
          ](name='Input'),
          LLMConfigId?: int32(name='LLMConfigId'),
          type?: string(name='Type'),
        }
      ](name='Transform'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  name?: string(name='Name', description='This parameter is required.', example='FeatureView1'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='3'),
  registerDatasourceId?: string(name='RegisterDatasourceId', example='5'),
  registerTable?: string(name='RegisterTable', example='table1'),
  syncOnlineTable?: boolean(name='SyncOnlineTable', description='This parameter is required.', example='true'),
  TTL?: int32(name='TTL', example='90'),
  tags?: [ string ](name='Tags'),
  type?: string(name='Type', description='This parameter is required.', example='Batch'),
  writeMethod?: string(name='WriteMethod', description='This parameter is required.', example='Custom'),
  writeToFeatureDB?: boolean(name='WriteToFeatureDB'),
}

model CreateFeatureViewResponseBody = {
  featureViewId?: string(name='FeatureViewId', example='3'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
}

model CreateFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFeatureViewResponseBody(name='body'),
}

/**
 * @summary 创建特征视图。
 *
 * @param request CreateFeatureViewRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFeatureViewResponse
 */
@context("createFeatureViewWithContext")
async function createFeatureViewWithOptions(InstanceId: string, request: CreateFeatureViewRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateFeatureViewResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.featureEntityId)) {
    body['FeatureEntityId'] = request.featureEntityId;
  }
  if (!$isNull(request.fields)) {
    body['Fields'] = request.fields;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.registerDatasourceId)) {
    body['RegisterDatasourceId'] = request.registerDatasourceId;
  }
  if (!$isNull(request.registerTable)) {
    body['RegisterTable'] = request.registerTable;
  }
  if (!$isNull(request.syncOnlineTable)) {
    body['SyncOnlineTable'] = request.syncOnlineTable;
  }
  if (!$isNull(request.TTL)) {
    body['TTL'] = request.TTL;
  }
  if (!$isNull(request.tags)) {
    body['Tags'] = request.tags;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.writeMethod)) {
    body['WriteMethod'] = request.writeMethod;
  }
  if (!$isNull(request.writeToFeatureDB)) {
    body['WriteToFeatureDB'] = request.writeToFeatureDB;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFeatureView',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建特征视图。
 *
 * @param request CreateFeatureViewRequest
 * @return CreateFeatureViewResponse
 */
async function createFeatureView(InstanceId: string, request: CreateFeatureViewRequest): CreateFeatureViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createFeatureViewWithOptions(InstanceId, request, headers, runtime);
}

model CreateInstanceRequest {
  type?: string(name='Type', example='Basic'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='InstanceAlreadyExistsErrorProblem'),
  instanceId?: string(name='InstanceId', example='featureStore-cn-7mz2xfu****'),
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
 * @summary 创建Feature Store实例。
 *
 * @param request CreateInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateInstanceResponse
 */
@context("createInstanceWithContext")
async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateInstance',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Feature Store实例。
 *
 * @param request CreateInstanceRequest
 * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

model CreateLLMConfigRequest {
  apiKey?: string(name='ApiKey', description='This parameter is required.', example='api-xyz'),
  baseUrl?: string(name='BaseUrl', example='https://dashscope.aliyuncs.com/compatible-mode/v1'),
  batchSize?: int32(name='BatchSize', example='8'),
  maxTokens?: int32(name='MaxTokens'),
  model?: string(name='Model', description='This parameter is required.', example='text-embedding-v1'),
  name?: string(name='Name', description='This parameter is required.', example='llm_config1'),
  rps?: int32(name='Rps', example='30'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='234'),
}

model CreateLLMConfigResponseBody = {
  LLMConfigId?: string(name='LLMConfigId', example='llm_config1'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateLLMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLLMConfigResponseBody(name='body'),
}

/**
 * @summary 创建大模型调用信息配置
 *
 * @param request CreateLLMConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLLMConfigResponse
 */
@context("createLLMConfigWithContext")
async function createLLMConfigWithOptions(InstanceId: string, request: CreateLLMConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateLLMConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.apiKey)) {
    body['ApiKey'] = request.apiKey;
  }
  if (!$isNull(request.baseUrl)) {
    body['BaseUrl'] = request.baseUrl;
  }
  if (!$isNull(request.batchSize)) {
    body['BatchSize'] = request.batchSize;
  }
  if (!$isNull(request.maxTokens)) {
    body['MaxTokens'] = request.maxTokens;
  }
  if (!$isNull(request.model)) {
    body['Model'] = request.model;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.rps)) {
    body['Rps'] = request.rps;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateLLMConfig',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/llmconfigs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建大模型调用信息配置
 *
 * @param request CreateLLMConfigRequest
 * @return CreateLLMConfigResponse
 */
async function createLLMConfig(InstanceId: string, request: CreateLLMConfigRequest): CreateLLMConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createLLMConfigWithOptions(InstanceId, request, headers, runtime);
}

model CreateLabelTableRequest {
  datasourceId?: string(name='DatasourceId', description='This parameter is required.', example='3'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes', description='This parameter is required.'),
      name?: string(name='Name', description='This parameter is required.', example='lat'),
      type?: string(name='Type', description='This parameter is required.', example='INT32'),
    }
  ](name='Fields', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.', example='rec_test'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='3'),
}

model CreateLabelTableResponseBody = {
  labelTableId?: string(name='LabelTableId', example='1'),
  requestId?: string(name='RequestId', example='0FA90B3B-F30A-5C9D-A9FD-8114F8868062'),
}

model CreateLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabelTableResponseBody(name='body'),
}

/**
 * @summary 创建label表
 *
 * @param request CreateLabelTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLabelTableResponse
 */
@context("createLabelTableWithContext")
async function createLabelTableWithOptions(InstanceId: string, request: CreateLabelTableRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateLabelTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasourceId)) {
    body['DatasourceId'] = request.datasourceId;
  }
  if (!$isNull(request.fields)) {
    body['Fields'] = request.fields;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateLabelTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/labeltables`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建label表
 *
 * @param request CreateLabelTableRequest
 * @return CreateLabelTableResponse
 */
async function createLabelTable(InstanceId: string, request: CreateLabelTableRequest): CreateLabelTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createLabelTableWithOptions(InstanceId, request, headers, runtime);
}

model CreateModelFeatureRequest {
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='userid'),
      featureViewId?: string(name='FeatureViewId', description='This parameter is required.', example='5'),
      name?: string(name='Name', description='This parameter is required.', example='user_id'),
      type?: string(name='Type', description='This parameter is required.', example='STRING'),
    }
  ](name='Features', description='This parameter is required.'),
  labelPriorityLevel?: long(name='LabelPriorityLevel', example='0'),
  labelTableId?: string(name='LabelTableId', description='This parameter is required.', example='4'),
  name?: string(name='Name', description='This parameter is required.', example='model_feature_1'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='3'),
  sequenceFeatureViewIds?: [ string ](name='SequenceFeatureViewIds'),
}

model CreateModelFeatureResponseBody = {
  modelFeatureId?: string(name='ModelFeatureId', example='3'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
}

model CreateModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelFeatureResponseBody(name='body'),
}

/**
 * @summary 创建模型特征。
 *
 * @param request CreateModelFeatureRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelFeatureResponse
 */
@context("createModelFeatureWithContext")
async function createModelFeatureWithOptions(InstanceId: string, request: CreateModelFeatureRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateModelFeatureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.features)) {
    body['Features'] = request.features;
  }
  if (!$isNull(request.labelPriorityLevel)) {
    body['LabelPriorityLevel'] = request.labelPriorityLevel;
  }
  if (!$isNull(request.labelTableId)) {
    body['LabelTableId'] = request.labelTableId;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sequenceFeatureViewIds)) {
    body['SequenceFeatureViewIds'] = request.sequenceFeatureViewIds;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModelFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建模型特征。
 *
 * @param request CreateModelFeatureRequest
 * @return CreateModelFeatureResponse
 */
async function createModelFeature(InstanceId: string, request: CreateModelFeatureRequest): CreateModelFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelFeatureWithOptions(InstanceId, request, headers, runtime);
}

model CreateProjectRequest {
  description?: string(name='Description', example='This is a test.'),
  name?: string(name='Name', description='This parameter is required.', example='project1'),
  offlineDatasourceId?: string(name='OfflineDatasourceId', description='This parameter is required.', example='4'),
  offlineLifeCycle?: int32(name='OfflineLifeCycle', example='90'),
  onlineDatasourceId?: string(name='OnlineDatasourceId', description='This parameter is required.', example='3'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='324'),
}

model CreateProjectResponseBody = {
  projectId?: string(name='ProjectId', example='3'),
  requestId?: string(name='RequestId', example='977ADE3A-D69D-58AD-8323-96E2FB898E99'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
 * @summary 创建FeatureStore项目
 *
 * @param request CreateProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
@context("createProjectWithContext")
async function createProjectWithOptions(InstanceId: string, request: CreateProjectRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateProjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.offlineDatasourceId)) {
    body['OfflineDatasourceId'] = request.offlineDatasourceId;
  }
  if (!$isNull(request.offlineLifeCycle)) {
    body['OfflineLifeCycle'] = request.offlineLifeCycle;
  }
  if (!$isNull(request.onlineDatasourceId)) {
    body['OnlineDatasourceId'] = request.onlineDatasourceId;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProject',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建FeatureStore项目
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(InstanceId: string, request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(InstanceId, request, headers, runtime);
}

model CreateServiceIdentityRoleRequest {
  roleName?: string(name='RoleName', description='This parameter is required.', example='AliyunServiceRoleForFeatureStore'),
}

model CreateServiceIdentityRoleResponseBody = {
  code?: string(name='Code', example='ServiceLinkedRoleAlreadyExistsErrorProblem'),
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForFeatureStore'),
}

model CreateServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceIdentityRoleResponseBody(name='body'),
}

/**
 * @summary 创建feature store服务账户角色
 *
 * @param request CreateServiceIdentityRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServiceIdentityRoleResponse
 */
@context("createServiceIdentityRoleWithContext")
async function createServiceIdentityRoleWithOptions(request: CreateServiceIdentityRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateServiceIdentityRoleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.roleName)) {
    body['RoleName'] = request.roleName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateServiceIdentityRole',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/serviceidentityroles`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建feature store服务账户角色
 *
 * @param request CreateServiceIdentityRoleRequest
 * @return CreateServiceIdentityRoleResponse
 */
async function createServiceIdentityRole(request: CreateServiceIdentityRoleRequest): CreateServiceIdentityRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceIdentityRoleWithOptions(request, headers, runtime);
}

model DeleteDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='E2E1575F-29D1-5579-B649-B7883A793562'),
}

model DeleteDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasourceResponseBody(name='body'),
}

/**
 * @summary 删除指定数据源。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasourceResponse
 */
@context("deleteDatasourceWithContext")
async function deleteDatasourceWithOptions(InstanceId: string, DatasourceId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasourceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasource',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定数据源。
 *
 * @return DeleteDatasourceResponse
 */
async function deleteDatasource(InstanceId: string, DatasourceId: string): DeleteDatasourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasourceWithOptions(InstanceId, DatasourceId, headers, runtime);
}

model DeleteFeatureEntityResponseBody = {
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
}

model DeleteFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFeatureEntityResponseBody(name='body'),
}

/**
 * @summary 删除指定特征实体
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFeatureEntityResponse
 */
@context("deleteFeatureEntityWithContext")
async function deleteFeatureEntityWithOptions(InstanceId: string, FeatureEntityId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteFeatureEntityResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFeatureEntity',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureentities/${$URL.percentEncode(FeatureEntityId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定特征实体
 *
 * @return DeleteFeatureEntityResponse
 */
async function deleteFeatureEntity(InstanceId: string, FeatureEntityId: string): DeleteFeatureEntityResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFeatureEntityWithOptions(InstanceId, FeatureEntityId, headers, runtime);
}

model DeleteFeatureViewResponseBody = {
  requestId?: string(name='RequestId', example='BF349686-C932-55B5-9B31-DAFA395C0E06'),
}

model DeleteFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFeatureViewResponseBody(name='body'),
}

/**
 * @summary 删除指定特征视图。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFeatureViewResponse
 */
@context("deleteFeatureViewWithContext")
async function deleteFeatureViewWithOptions(InstanceId: string, FeatureViewId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteFeatureViewResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFeatureView',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定特征视图。
 *
 * @return DeleteFeatureViewResponse
 */
async function deleteFeatureView(InstanceId: string, FeatureViewId: string): DeleteFeatureViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFeatureViewWithOptions(InstanceId, FeatureViewId, headers, runtime);
}

model DeleteLLMConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLLMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLLMConfigResponseBody(name='body'),
}

/**
 * @summary 删除大模型调用信息配置
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLLMConfigResponse
 */
@context("deleteLLMConfigWithContext")
async function deleteLLMConfigWithOptions(InstanceId: string, LLMConfigId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteLLMConfigResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteLLMConfig',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/llmconfigs/${$URL.percentEncode(LLMConfigId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除大模型调用信息配置
 *
 * @return DeleteLLMConfigResponse
 */
async function deleteLLMConfig(InstanceId: string, LLMConfigId: string): DeleteLLMConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLLMConfigWithOptions(InstanceId, LLMConfigId, headers, runtime);
}

model DeleteLabelTableResponseBody = {
  requestId?: string(name='RequestId', example='FFD39C0F-DD8D-51B2-864E-2842206DB0E8'),
}

model DeleteLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLabelTableResponseBody(name='body'),
}

/**
 * @summary 删除label表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLabelTableResponse
 */
@context("deleteLabelTableWithContext")
async function deleteLabelTableWithOptions(InstanceId: string, LabelTableId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteLabelTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteLabelTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/labeltables/${$URL.percentEncode(LabelTableId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除label表
 *
 * @return DeleteLabelTableResponse
 */
async function deleteLabelTable(InstanceId: string, LabelTableId: string): DeleteLabelTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLabelTableWithOptions(InstanceId, LabelTableId, headers, runtime);
}

model DeleteModelFeatureResponseBody = {
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
}

model DeleteModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelFeatureResponseBody(name='body'),
}

/**
 * @summary 删除指定模型特征。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelFeatureResponse
 */
@context("deleteModelFeatureWithContext")
async function deleteModelFeatureWithOptions(InstanceId: string, ModelFeatureId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteModelFeatureResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteModelFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定模型特征。
 *
 * @return DeleteModelFeatureResponse
 */
async function deleteModelFeature(InstanceId: string, ModelFeatureId: string): DeleteModelFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelFeatureWithOptions(InstanceId, ModelFeatureId, headers, runtime);
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', example='0DA35264-0877-5852-8971-7735B547C969'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
 * @summary 删除指定Feature Store项目。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectResponse
 */
@context("deleteProjectWithContext")
async function deleteProjectWithOptions(InstanceId: string, ProjectId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteProjectResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteProject',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定Feature Store项目。
 *
 * @return DeleteProjectResponse
 */
async function deleteProject(InstanceId: string, ProjectId: string): DeleteProjectResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectWithOptions(InstanceId, ProjectId, headers, runtime);
}

model ExportModelFeatureTrainingSetTableRequest {
  featureViewConfig?: map[string]FeatureViewConfigValue(name='FeatureViewConfig'),
  labelInputConfig?: {
    eventTime?: string(name='EventTime', example='2022-07-02 00:00:00'),
    partitions?: map[string]object(name='Partitions'),
  }(name='LabelInputConfig'),
  realTimeIterateInterval?: long(name='RealTimeIterateInterval'),
  realTimePartitionCountValue?: long(name='RealTimePartitionCountValue'),
  trainingSetConfig?: {
    partitions?: map[string]object(name='Partitions'),
  }(name='TrainingSetConfig'),
}

model ExportModelFeatureTrainingSetTableResponseBody = {
  requestId?: string(name='RequestId', example='0FBBE454-9BD1-5D8F-9129-D14DB7FAFE0B'),
  taskId?: string(name='TaskId'),
}

model ExportModelFeatureTrainingSetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportModelFeatureTrainingSetTableResponseBody(name='body'),
}

/**
 * @summary 导出训练集表。
 *
 * @param request ExportModelFeatureTrainingSetTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportModelFeatureTrainingSetTableResponse
 */
@context("exportModelFeatureTrainingSetTableWithContext")
async function exportModelFeatureTrainingSetTableWithOptions(InstanceId: string, ModelFeatureId: string, request: ExportModelFeatureTrainingSetTableRequest, headers: map[string]string, runtime: $RuntimeOptions): ExportModelFeatureTrainingSetTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.featureViewConfig)) {
    body['FeatureViewConfig'] = request.featureViewConfig;
  }
  if (!$isNull(request.labelInputConfig)) {
    body['LabelInputConfig'] = request.labelInputConfig;
  }
  if (!$isNull(request.realTimeIterateInterval)) {
    body['RealTimeIterateInterval'] = request.realTimeIterateInterval;
  }
  if (!$isNull(request.realTimePartitionCountValue)) {
    body['RealTimePartitionCountValue'] = request.realTimePartitionCountValue;
  }
  if (!$isNull(request.trainingSetConfig)) {
    body['TrainingSetConfig'] = request.trainingSetConfig;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportModelFeatureTrainingSetTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/action/exporttrainingsettable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出训练集表。
 *
 * @param request ExportModelFeatureTrainingSetTableRequest
 * @return ExportModelFeatureTrainingSetTableResponse
 */
async function exportModelFeatureTrainingSetTable(InstanceId: string, ModelFeatureId: string, request: ExportModelFeatureTrainingSetTableRequest): ExportModelFeatureTrainingSetTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return exportModelFeatureTrainingSetTableWithOptions(InstanceId, ModelFeatureId, request, headers, runtime);
}

model GetDatasourceResponseBody = {
  config?: string(name='Config', example='{"address": ""}'),
  datasourceId?: string(name='DatasourceId', example='3'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  name?: string(name='Name', example='datasource1'),
  requestId?: string(name='RequestId', example='AD7D9E95-BD31-53F2-B710-6C01866FCB05'),
  type?: string(name='Type', example='Hologres'),
  uri?: string(name='Uri', example='igraph_instance1'),
  workspaceId?: string(name='WorkspaceId', example='32244'),
}

model GetDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasourceResponseBody(name='body'),
}

/**
 * @summary 获取数据源详细信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasourceResponse
 */
@context("getDatasourceWithContext")
async function getDatasourceWithOptions(InstanceId: string, DatasourceId: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatasourceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasource',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源详细信息。
 *
 * @return GetDatasourceResponse
 */
async function getDatasource(InstanceId: string, DatasourceId: string): GetDatasourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasourceWithOptions(InstanceId, DatasourceId, headers, runtime);
}

model GetDatasourceTableResponseBody = {
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='field1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  requestId?: string(name='RequestId', example='D7B2F8C4-49C7-5CFA-8075-9D715A114873'),
  tableName?: string(name='TableName', example='table1'),
}

model GetDatasourceTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasourceTableResponseBody(name='body'),
}

/**
 * @summary 获取数据源下指定表的详细信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasourceTableResponse
 */
@context("getDatasourceTableWithContext")
async function getDatasourceTableWithOptions(InstanceId: string, DatasourceId: string, TableName: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatasourceTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasourceTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}/tables/${$URL.percentEncode(TableName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源下指定表的详细信息。
 *
 * @return GetDatasourceTableResponse
 */
async function getDatasourceTable(InstanceId: string, DatasourceId: string, TableName: string): GetDatasourceTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasourceTableWithOptions(InstanceId, DatasourceId, TableName, headers, runtime);
}

model GetFeatureEntityResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  joinId?: string(name='JoinId', example='user_id'),
  name?: string(name='Name', example='feature_entity_1'),
  owner?: string(name='Owner', example='123456789*****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
}

model GetFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureEntityResponseBody(name='body'),
}

/**
 * @summary 获取特征实体详细信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFeatureEntityResponse
 */
@context("getFeatureEntityWithContext")
async function getFeatureEntityWithOptions(InstanceId: string, FeatureEntityId: string, headers: map[string]string, runtime: $RuntimeOptions): GetFeatureEntityResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFeatureEntity',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureentities/${$URL.percentEncode(FeatureEntityId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征实体详细信息
 *
 * @return GetFeatureEntityResponse
 */
async function getFeatureEntity(InstanceId: string, FeatureEntityId: string): GetFeatureEntityResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getFeatureEntityWithOptions(InstanceId, FeatureEntityId, headers, runtime);
}

model GetFeatureViewResponseBody = {
  config?: string(name='Config', example='{"save_original_field":true}'),
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  featureEntityName?: string(name='FeatureEntityName', example='featureEntity1'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='user'),
      transform?: [ 
        {
          input?: [ 
            {
              name?: string(name='Name'),
              type?: string(name='Type'),
            }
          ](name='Input'),
          LLMConfigId?: int32(name='LLMConfigId'),
          type?: string(name='Type'),
        }
      ](name='Transform'),
      type?: string(name='Type', example='int'),
    }
  ](name='Fields'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtSyncTime?: string(name='GmtSyncTime', example='2021-12-15T23:24:33.132+08:00'),
  joinId?: string(name='JoinId', example='user_id'),
  lastSyncConfig?: string(name='LastSyncConfig', example='{
	"mode": "overwrite",
	"partitions": {
		"ds": {
			"value": "20230820"
		}
	},
	"event_time": "",
	"config": {},
	"offline_to_online": true
}'),
  mockTableName?: string(name='MockTableName', example='item_table_mock_1'),
  name?: string(name='Name', example='featureView1'),
  owner?: string(name='Owner', example='12321421412****'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project1'),
  publishTableScript?: string(name='PublishTableScript', example='from feature_store_py.fs_client import FeatureStoreClient\\nimport datetime\\nfrom feature_store_py.fs_datasource import MaxComputeDataSource\\nimport sys\\n\\ncur_day = args[\\"dt\\"]\\nprint(\\"cur_day = \\", cur_day)\\n\\naccess_key_id = o.account.access_id\\naccess_key_secret = o.account.secret_access_key\\nfs = FeatureStoreClient(access_key_id=access_key_id, access_key_secret=access_key_secret, region=\\"cn-beijing\\")\\ncur_project_name = \\"p1\\"\\nproject = fs.get_project(cur_project_name)\\n\\nfeature_view_name = \\"user_fea\\"\\nbatch_feature_view = project.get_feature_view(feature_view_name)\\ntask = batch_feature_view.publish_table(partitions={\\"ds\\":cur_day}, mode=\\"Overwrite\\")\\ntask.wait()\\ntask.print_summary()\\n'),
  registerDatasourceId?: string(name='RegisterDatasourceId', example='4'),
  registerDatasourceName?: string(name='RegisterDatasourceName', example='datasource1'),
  registerTable?: string(name='RegisterTable', example='table1'),
  requestId?: string(name='RequestId', example='72F15A8A-5A28-5B18-A0DE-0EABD7D3245A'),
  syncOnlineTable?: boolean(name='SyncOnlineTable', example='true'),
  TTL?: int32(name='TTL', example='90'),
  tags?: [ string ](name='Tags'),
  type?: string(name='Type', example='Batch'),
  writeMethod?: string(name='WriteMethod', example='custom'),
  writeToFeatureDB?: boolean(name='WriteToFeatureDB'),
}

model GetFeatureViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureViewResponseBody(name='body'),
}

/**
 * @summary 获取特征视图详细信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFeatureViewResponse
 */
@context("getFeatureViewWithContext")
async function getFeatureViewWithOptions(InstanceId: string, FeatureViewId: string, headers: map[string]string, runtime: $RuntimeOptions): GetFeatureViewResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFeatureView',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征视图详细信息。
 *
 * @return GetFeatureViewResponse
 */
async function getFeatureView(InstanceId: string, FeatureViewId: string): GetFeatureViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getFeatureViewWithOptions(InstanceId, FeatureViewId, headers, runtime);
}

model GetInstanceResponseBody = {
  featureDBInfo?: {
    status?: string(name='Status'),
  }(name='FeatureDBInfo'),
  featureDBInstanceInfo?: {
    status?: string(name='Status'),
  }(name='FeatureDBInstanceInfo', deprecated=true),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  message?: string(name='Message', example='Success'),
  progress?: double(name='Progress', example='0.8'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='1C5B1511-8A5B-59C3-90AF-513F9210E882'),
  status?: string(name='Status', example='Running'),
  type?: string(name='Type', example='Basic'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
 * @summary 获取实例详细信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceResponse
 */
@context("getInstanceWithContext")
async function getInstanceWithOptions(InstanceId: string, headers: map[string]string, runtime: $RuntimeOptions): GetInstanceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetInstance',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取实例详细信息
 *
 * @return GetInstanceResponse
 */
async function getInstance(InstanceId: string): GetInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(InstanceId, headers, runtime);
}

model GetLLMConfigResponseBody = {
  apiKey?: string(name='ApiKey', example='api-abcdxy'),
  baseUrl?: string(name='BaseUrl', example='https://dashscope.aliyuncs.com/compatible-mode/v1'),
  batchSize?: int32(name='BatchSize', example='8'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  LLMConfigId?: string(name='LLMConfigId', example='llm_config1'),
  maxTokens?: int32(name='MaxTokens', example='2048'),
  model?: string(name='Model', example='text-embedding-v1'),
  name?: string(name='Name', example='llm_config_name1'),
  requestId?: string(name='RequestId', description='Id of the request', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  rps?: int32(name='Rps', example='30'),
  workspaceId?: string(name='WorkspaceId', example='234'),
}

model GetLLMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLLMConfigResponseBody(name='body'),
}

/**
 * @summary 获取 LLMConfig 信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLLMConfigResponse
 */
@context("getLLMConfigWithContext")
async function getLLMConfigWithOptions(InstanceId: string, LLMConfigId: string, RegionId: string, headers: map[string]string, runtime: $RuntimeOptions): GetLLMConfigResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLLMConfig',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/llmconfigs/${$URL.percentEncode(LLMConfigId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取 LLMConfig 信息
 *
 * @return GetLLMConfigResponse
 */
async function getLLMConfig(InstanceId: string, LLMConfigId: string, RegionId: string): GetLLMConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getLLMConfigWithOptions(InstanceId, LLMConfigId, RegionId, headers, runtime);
}

model GetLabelTableResponseBody = {
  datasourceId?: string(name='DatasourceId', example='1'),
  datasourceName?: string(name='DatasourceName', example='datasource1'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes'),
      name?: string(name='Name', example='field1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Fields'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  name?: string(name='Name', example='label_table1'),
  owner?: string(name='Owner', example='12321312*****'),
  projectId?: string(name='ProjectId', example='1'),
  projectName?: string(name='ProjectName', example='project1'),
  relatedModelFeatures?: [ string ](name='RelatedModelFeatures'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model GetLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLabelTableResponseBody(name='body'),
}

/**
 * @summary 获取Label表详细信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLabelTableResponse
 */
@context("getLabelTableWithContext")
async function getLabelTableWithOptions(InstanceId: string, LabelTableId: string, headers: map[string]string, runtime: $RuntimeOptions): GetLabelTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLabelTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/labeltables/${$URL.percentEncode(LabelTableId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Label表详细信息。
 *
 * @return GetLabelTableResponse
 */
async function getLabelTable(InstanceId: string, LabelTableId: string): GetLabelTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getLabelTableWithOptions(InstanceId, LabelTableId, headers, runtime);
}

model GetModelFeatureResponseBody = {
  exportTrainingSetTableScript?: string(name='ExportTrainingSetTableScript', example='from feature_store_py.fs_client import FeatureStoreClient\\nfrom feature_store_py.fs_project import FeatureStoreProject\\nfrom feature_store_py.fs_datasource import LabelInput, MaxComputeDataSource, TrainingSetOutput\\nfrom feature_store_py.fs_features import FeatureSelector\\nfrom feature_store_py.fs_config import LabelInputConfig, PartitionConfig, FeatureViewConfig\\nfrom feature_store_py.fs_config import TrainSetOutputConfig, EASDeployConfig\\nimport datetime\\nimport sys\\n\\ncur_day = args[\\"dt\\"]\\nprint(\\"cur_day = \\", cur_day)\\noffset = datetime.timedelta(days=-1)\\npre_day = (datetime.datetime.strptime(cur_day, \\"%Y%m%d\\") + offset).strftime(\\"%Y%m%d\\")\\nprint(\\"pre_day = \\", pre_day)\\n\\n\\naccess_key_id = o.account.access_id\\naccess_key_secret = o.account.secret_access_key\\nfs = FeatureStoreClient(access_key_id=access_key_id, access_key_secret=access_key_secret, region=\\"cn-beijing\\")\\ncur_project_name = \\"p1\\"\\nproject = fs.get_project(cur_project_name)\\n\\nlabel_partitions = PartitionConfig(name = \\"ds\\", value = cur_day)\\nlabel_input_config = LabelInputConfig(partition_config=label_partitions)\\n\\nfeature_view_1_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_1_config = FeatureViewConfig(name = \\"user_fea\\",\\npartition_config=feature_view_1_partitions)\\n\\nfeature_view_2_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_2_config = FeatureViewConfig(name = \\"seq_fea\\",\\npartition_config=feature_view_2_partitions)\\n\\nfeature_view_3_partitions = PartitionConfig(name = \\"ds\\", value = pre_day)\\nfeature_view_3_config = FeatureViewConfig(name = \\"item_fea\\",\\npartition_config=feature_view_3_partitions)\\n\\nfeature_view_config_list = [feature_view_1_config,feature_view_2_config,feature_view_3_config]\\ntrain_set_partitions = PartitionConfig(name = \\"ds\\", value = cur_day)\\ntrain_set_output_config = TrainSetOutputConfig(partition_config=train_set_partitions)\\n\\n\\nmodel_name = \\"rank_v1\\"\\ncur_model = project.get_model(model_name)\\ntask = cur_model.export_train_set(label_input_config, feature_view_config_list, train_set_output_config)\\ntask.wait()\\nprint(\\"task_summary = \\", task.task_summary)\\n'),
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='feature2'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      featureViewName?: string(name='FeatureViewName', example='feature_view_1'),
      name?: string(name='Name', example='feature1'),
      type?: string(name='Type', example='INT32'),
    }
  ](name='Features'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T14:46:22.227+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T14:46:22.227+08:00'),
  labelPriorityLevel?: long(name='LabelPriorityLevel', example='0'),
  labelTableId?: string(name='LabelTableId', example='3'),
  labelTableName?: string(name='LabelTableName', example='label_table1'),
  name?: string(name='Name', example='model_feature1'),
  owner?: string(name='Owner', example='1231243253****'),
  projectId?: string(name='ProjectId', example='5'),
  projectName?: string(name='ProjectName', example='project1'),
  relations?: {
    domains?: [ 
      {
        domainType?: string(name='DomainType', example='FeatureEntity'),
        id?: string(name='Id', description='Domain ID。', example='3'),
        name?: string(name='Name', example='feature_entity_1'),
      }
    ](name='Domains'),
    links?: [ 
      {
        from?: string(name='From', example='model_feature_2'),
        link?: string(name='Link', example='user_id'),
        to?: string(name='To', example='feature_entity_3'),
      }
    ](name='Links'),
  }(name='Relations'),
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
  trainingSetFGTable?: string(name='TrainingSetFGTable', example='table2'),
  trainingSetTable?: string(name='TrainingSetTable', example='table1'),
}

model GetModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureResponseBody(name='body'),
}

/**
 * @summary 获取模型特征详情。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelFeatureResponse
 */
@context("getModelFeatureWithContext")
async function getModelFeatureWithOptions(InstanceId: string, ModelFeatureId: string, headers: map[string]string, runtime: $RuntimeOptions): GetModelFeatureResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetModelFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型特征详情。
 *
 * @return GetModelFeatureResponse
 */
async function getModelFeature(InstanceId: string, ModelFeatureId: string): GetModelFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelFeatureWithOptions(InstanceId, ModelFeatureId, headers, runtime);
}

model GetModelFeatureFGFeatureResponseBody = {
  lookupFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', example='-1024'),
      featureName?: string(name='FeatureName', example='item_id'),
      keyFeatureDomain?: string(name='KeyFeatureDomain', example='Item'),
      keyFeatureName?: string(name='KeyFeatureName', example='1'),
      mapFeatureDomain?: string(name='MapFeatureDomain', example='User'),
      mapFeatureName?: string(name='MapFeatureName', example='item_id'),
      valueType?: string(name='ValueType', example='STRING'),
    }
  ](name='LookupFeatures'),
  rawFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', example='-1024'),
      featureDomain?: string(name='FeatureDomain', example='User'),
      featureName?: string(name='FeatureName', example='item_id'),
      featureType?: string(name='FeatureType', example='IdFeature'),
      inputFeatureName?: string(name='InputFeatureName', example='item_id'),
      valueType?: string(name='ValueType', example='STRING'),
    }
  ](name='RawFeatures'),
  requestId?: string(name='RequestId', example='E23EFF09-58AA-5420-934F-8453AE01548D'),
  reserves?: [ string ](name='Reserves'),
  sequenceFeatures?: [ 
    {
      attributeDelim?: string(name='AttributeDelim', example='#'),
      featureName?: string(name='FeatureName', example='item_id'),
      sequenceDelim?: string(name='SequenceDelim', example=';'),
      sequenceLength?: long(name='SequenceLength', example='50'),
      subFeatures?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='-1024'),
          featureDomain?: string(name='FeatureDomain', example='User'),
          featureName?: string(name='FeatureName', example='item_id'),
          featureType?: string(name='FeatureType', example='IdFeature'),
          inputFeatureName?: string(name='InputFeatureName', example='item_id'),
          valueType?: string(name='ValueType', example='STRING'),
        }
      ](name='SubFeatures'),
    }
  ](name='SequenceFeatures'),
}

model GetModelFeatureFGFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureFGFeatureResponseBody(name='body'),
}

/**
 * @summary 获取模型特征的FG特征配置信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelFeatureFGFeatureResponse
 */
@context("getModelFeatureFGFeatureWithContext")
async function getModelFeatureFGFeatureWithOptions(InstanceId: string, ModelFeatureId: string, headers: map[string]string, runtime: $RuntimeOptions): GetModelFeatureFGFeatureResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetModelFeatureFGFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/fgfeature`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型特征的FG特征配置信息。
 *
 * @return GetModelFeatureFGFeatureResponse
 */
async function getModelFeatureFGFeature(InstanceId: string, ModelFeatureId: string): GetModelFeatureFGFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelFeatureFGFeatureWithOptions(InstanceId, ModelFeatureId, headers, runtime);
}

model GetModelFeatureFGInfoResponseBody = {
  content?: string(name='Content', example='{"features": [{"feature_name": "item_id","feature_type": "id_feature","value_type": "String","expression": "item:item_id","default_value": "-1024","combiner": "mean","need_prefix": false},{"feature_name": "f1","feature_type": "lookup_feature","value_type": "Integer","map": "item:f1","key": "user:1","default_value": "0","combiner": "mean","need_prefix": false,"needDiscrete": false,"needWeighting": false,"needKey": false}],"reserves": ["f1"]}'),
  requestId?: string(name='RequestId', example='6B662A64-E4BF-56F8-BF5F-4C63F34EC0A8'),
}

model GetModelFeatureFGInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelFeatureFGInfoResponseBody(name='body'),
}

/**
 * @summary 获取模型特征的fg.json文件配置信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelFeatureFGInfoResponse
 */
@context("getModelFeatureFGInfoWithContext")
async function getModelFeatureFGInfoWithOptions(InstanceId: string, ModelFeatureId: string, headers: map[string]string, runtime: $RuntimeOptions): GetModelFeatureFGInfoResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetModelFeatureFGInfo',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/fginfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型特征的fg.json文件配置信息。
 *
 * @return GetModelFeatureFGInfoResponse
 */
async function getModelFeatureFGInfo(InstanceId: string, ModelFeatureId: string): GetModelFeatureFGInfoResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelFeatureFGInfoWithOptions(InstanceId, ModelFeatureId, headers, runtime);
}

model GetProjectResponseBody = {
  description?: string(name='Description', example='This is a test.'),
  featureEntityCount?: int32(name='FeatureEntityCount', example='10'),
  featureViewCount?: int32(name='FeatureViewCount', example='10'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
  modelCount?: int32(name='ModelCount', example='5'),
  name?: string(name='Name', example='project1'),
  offlineDatasourceId?: string(name='OfflineDatasourceId', example='4'),
  offlineDatasourceName?: string(name='OfflineDatasourceName', example='datasource1'),
  offlineDatasourceType?: string(name='OfflineDatasourceType', example='MaxCompute'),
  offlineLifecycle?: int32(name='OfflineLifecycle', example='90'),
  onlineDatasourceId?: string(name='OnlineDatasourceId', example='5'),
  onlineDatasourceName?: string(name='OnlineDatasourceName', example='datasource2'),
  onlineDatasourceType?: string(name='OnlineDatasourceType', example='Hologres'),
  owner?: string(name='Owner', example='1232132543543****'),
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
 * @summary 获取指定Feature Store项目详细信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
@context("getProjectWithContext")
async function getProjectWithOptions(InstanceId: string, ProjectId: string, headers: map[string]string, runtime: $RuntimeOptions): GetProjectResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProject',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取指定Feature Store项目详细信息。
 *
 * @return GetProjectResponse
 */
async function getProject(InstanceId: string, ProjectId: string): GetProjectResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectWithOptions(InstanceId, ProjectId, headers, runtime);
}

model GetProjectFeatureEntityResponseBody = {
  featureEntityId?: string(name='FeatureEntityId', example='3'),
  joinId?: string(name='JoinId', example='user_id'),
  name?: string(name='Name', example='feature_entity_1'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  workspaceId?: string(name='WorkspaceId', example='34245'),
}

model GetProjectFeatureEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectFeatureEntityResponseBody(name='body'),
}

/**
 * @summary 获取项目下特征实体详细信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectFeatureEntityResponse
 */
@context("getProjectFeatureEntityWithContext")
async function getProjectFeatureEntityWithOptions(InstanceId: string, ProjectId: string, FeatureEntityName: string, headers: map[string]string, runtime: $RuntimeOptions): GetProjectFeatureEntityResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProjectFeatureEntity',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}/featureentities/${$URL.percentEncode(FeatureEntityName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取项目下特征实体详细信息
 *
 * @return GetProjectFeatureEntityResponse
 */
async function getProjectFeatureEntity(InstanceId: string, ProjectId: string, FeatureEntityName: string): GetProjectFeatureEntityResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectFeatureEntityWithOptions(InstanceId, ProjectId, FeatureEntityName, headers, runtime);
}

model GetServiceIdentityRoleResponseBody = {
  policy?: string(name='Policy', example='{
"Version": "1",
"Statement":[]
}'),
  requestId?: string(name='RequestId', example='6F629E92-F64D-502D-85AA-A9C54894CA3D'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForPaiFeatureStore'),
}

model GetServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceIdentityRoleResponseBody(name='body'),
}

/**
 * @summary 获取feature store服务账户角色。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetServiceIdentityRoleResponse
 */
@context("getServiceIdentityRoleWithContext")
async function getServiceIdentityRoleWithOptions(RoleName: string, headers: map[string]string, runtime: $RuntimeOptions): GetServiceIdentityRoleResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetServiceIdentityRole',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/serviceidentityroles/${$URL.percentEncode(RoleName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取feature store服务账户角色。
 *
 * @return GetServiceIdentityRoleResponse
 */
async function getServiceIdentityRole(RoleName: string): GetServiceIdentityRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceIdentityRoleWithOptions(RoleName, headers, runtime);
}

model GetTaskResponseBody = {
  config?: string(name='Config', example='{
	"mode": "overwrite",
	"partitions": {
		"dt": "20230820"
	},
	"event_time": "",
	"config": {},
	"offline_to_online": true
}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtExecutedTime?: string(name='GmtExecutedTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtFinishedTime?: string(name='GmtFinishedTime', example='2023-07-04T11:26:09.036+08:00'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
  objectId?: string(name='ObjectId', example='3'),
  objectType?: string(name='ObjectType', example='ModelFeature'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='project_1'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  runningConfig?: string(name='RunningConfig', example='DROP TABLE IF EXISTS public.fsxxx'),
  status?: string(name='Status', example='Running'),
  type?: string(name='Type', example='OfflineToOnline'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
 * @summary 获取任务详情
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskResponse
 */
@context("getTaskWithContext")
async function getTaskWithOptions(InstanceId: string, TaskId: string, headers: map[string]string, runtime: $RuntimeOptions): GetTaskResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTask',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/tasks/${$URL.percentEncode(TaskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务详情
 *
 * @return GetTaskResponse
 */
async function getTask(InstanceId: string, TaskId: string): GetTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(InstanceId, TaskId, headers, runtime);
}

model ListDatasourceFeatureViewsRequest {
  all?: boolean(name='All'),
  endDate?: string(name='EndDate', example='2025-03-19'),
  name?: string(name='Name', example='fv'),
  order?: string(name='Order', example='Desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='3'),
  projectName?: string(name='ProjectName', example='fs_project'),
  showStorageUsage?: boolean(name='ShowStorageUsage'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  startDate?: string(name='StartDate', example='2025-03-14'),
  type?: string(name='Type', example='Stream'),
  verbose?: boolean(name='Verbose'),
}

model ListDatasourceFeatureViewsResponseBody = {
  featureViews?: [ 
    {
      config?: string(name='Config', example='{"shard_count":5,"replication_count":1}'),
      featureEntityName?: string(name='FeatureEntityName', example='user'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      name?: string(name='Name', example='fv1'),
      projectName?: string(name='ProjectName', example='p1'),
      TTL?: int32(name='TTL', example='86400'),
      type?: string(name='Type', example='Batch'),
      usageStatistics?: {
        diskUsage?: double(name='DiskUsage', example='1.23'),
        memoryUsage?: double(name='MemoryUsage', example='0.12'),
        readWriteCount?: [ 
          {
            date?: string(name='Date', example='2025-03-18T00:00:00+08:00'),
            readCount?: long(name='ReadCount', example='200'),
            writeCount?: long(name='WriteCount', example='100'),
          }
        ](name='ReadWriteCount'),
        rowCount?: long(name='RowCount', example='10000'),
      }(name='UsageStatistics'),
    }
  ](name='FeatureViews'),
  totalCount?: long(name='TotalCount', example='10'),
  totalUsageStatistics?: {
    totalDiskUsage?: double(name='TotalDiskUsage', example='12.3'),
    totalMemoryUsage?: double(name='TotalMemoryUsage', example='1.23'),
    totalReadWriteCount?: [ 
      {
        date?: string(name='Date', example='2025-03-18T00:00:00+08:00'),
        totalReadCount?: long(name='TotalReadCount', example='456'),
        totalWriteCount?: long(name='TotalWriteCount', example='123'),
      }
    ](name='TotalReadWriteCount'),
  }(name='TotalUsageStatistics'),
  requestId?: string(name='requestId', description='Id of the request', example='514F82AF-3C04-5C3D-8F38-A11261BF37B0'),
}

model ListDatasourceFeatureViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasourceFeatureViewsResponseBody(name='body'),
}

/**
 * @summary 获取数据源下所有特征视图信息。
 *
 * @param request ListDatasourceFeatureViewsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasourceFeatureViewsResponse
 */
@context("listDatasourceFeatureViewsWithContext")
async function listDatasourceFeatureViewsWithOptions(InstanceId: string, DatasourceId: string, request: ListDatasourceFeatureViewsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasourceFeatureViewsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.all)) {
    query['All'] = request.all;
  }
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!$isNull(request.showStorageUsage)) {
    query['ShowStorageUsage'] = request.showStorageUsage;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasourceFeatureViews',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}/featureviews`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源下所有特征视图信息。
 *
 * @param request ListDatasourceFeatureViewsRequest
 * @return ListDatasourceFeatureViewsResponse
 */
async function listDatasourceFeatureViews(InstanceId: string, DatasourceId: string, request: ListDatasourceFeatureViewsRequest): ListDatasourceFeatureViewsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasourceFeatureViewsWithOptions(InstanceId, DatasourceId, request, headers, runtime);
}

model ListDatasourceTablesRequest {
  schemaName?: string(name='SchemaName', example='default'),
  tableName?: string(name='TableName', example='table1'),
}

model ListDatasourceTablesResponseBody = {
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  tables?: [ string ](name='Tables'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListDatasourceTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasourceTablesResponseBody(name='body'),
}

/**
 * @summary 获取数据源下所有表。
 *
 * @param request ListDatasourceTablesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasourceTablesResponse
 */
@context("listDatasourceTablesWithContext")
async function listDatasourceTablesWithOptions(InstanceId: string, DatasourceId: string, request: ListDatasourceTablesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasourceTablesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!$isNull(request.tableName)) {
    query['TableName'] = request.tableName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasourceTables',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}/tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源下所有表。
 *
 * @param request ListDatasourceTablesRequest
 * @return ListDatasourceTablesResponse
 */
async function listDatasourceTables(InstanceId: string, DatasourceId: string, request: ListDatasourceTablesRequest): ListDatasourceTablesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasourceTablesWithOptions(InstanceId, DatasourceId, request, headers, runtime);
}

model ListDatasourcesRequest {
  name?: string(name='Name', example='datasource1'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
  type?: string(name='Type', example='MaxCompute'),
  workspaceId?: string(name='WorkspaceId', example='234'),
}

model ListDatasourcesResponseBody = {
  datasources?: [ 
    {
      config?: string(name='Config', example='{"address": ""}'),
      datasourceId?: string(name='DatasourceId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='datasource1'),
      type?: string(name='Type', example='Hologres'),
      uri?: string(name='Uri', example='igraph_instance1'),
      workspaceId?: string(name='WorkspaceId', example='32324'),
    }
  ](name='Datasources'),
  requestId?: string(name='RequestId', example='44933189-493B-5C43-A5C6-11EEC2A43520'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListDatasourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasourcesResponseBody(name='body'),
}

/**
 * @summary 获取数据源列表。
 *
 * @param request ListDatasourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasourcesResponse
 */
@context("listDatasourcesWithContext")
async function listDatasourcesWithOptions(InstanceId: string, request: ListDatasourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasourcesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasources',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据源列表。
 *
 * @param request ListDatasourcesRequest
 * @return ListDatasourcesResponse
 */
async function listDatasources(InstanceId: string, request: ListDatasourcesRequest): ListDatasourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasourcesWithOptions(InstanceId, request, headers, runtime);
}

model ListFeatureEntitiesRequest {
  featureEntityIds?: [ string ](name='FeatureEntityIds'),
  name?: string(name='Name', example='feature_entity_1'),
  order?: string(name='Order', example='Desc'),
  owner?: string(name='Owner', example='1231432*****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='3'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
}

model ListFeatureEntitiesShrinkRequest {
  featureEntityIdsShrink?: string(name='FeatureEntityIds'),
  name?: string(name='Name', example='feature_entity_1'),
  order?: string(name='Order', example='Desc'),
  owner?: string(name='Owner', example='1231432*****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='3'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
}

model ListFeatureEntitiesResponseBody = {
  featureEntities?: [ 
    {
      featureEntityId?: string(name='FeatureEntityId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      joinId?: string(name='JoinId', example='user_id'),
      name?: string(name='Name', example='feature_entity_1'),
      owner?: string(name='Owner', example='123456789****'),
      projectId?: string(name='ProjectId', example='3'),
      projectName?: string(name='ProjectName', example='project_1'),
    }
  ](name='FeatureEntities'),
  requestId?: string(name='RequestId', example='37D19490-AB69-567D-A852-407C94E510E9'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListFeatureEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureEntitiesResponseBody(name='body'),
}

/**
 * @summary 创建特征实体列表
 *
 * @param tmpReq ListFeatureEntitiesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFeatureEntitiesResponse
 */
@context("listFeatureEntitiesWithContext")
async function listFeatureEntitiesWithOptions(InstanceId: string, tmpReq: ListFeatureEntitiesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListFeatureEntitiesResponse {
  tmpReq.validate();
  var request = new ListFeatureEntitiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.featureEntityIds)) {
    request.featureEntityIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.featureEntityIds, 'FeatureEntityIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.featureEntityIdsShrink)) {
    query['FeatureEntityIds'] = request.featureEntityIdsShrink;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFeatureEntities',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureentities`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建特征实体列表
 *
 * @param request ListFeatureEntitiesRequest
 * @return ListFeatureEntitiesResponse
 */
async function listFeatureEntities(InstanceId: string, request: ListFeatureEntitiesRequest): ListFeatureEntitiesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureEntitiesWithOptions(InstanceId, request, headers, runtime);
}

model ListFeatureViewFieldRelationshipsResponseBody = {
  relationships?: [ 
    {
      featureName?: string(name='FeatureName', example='featureView1'),
      models?: [ 
        {
          featureAliasName?: string(name='FeatureAliasName', example='f1'),
          modelId?: string(name='ModelId', example='3'),
          modelName?: string(name='ModelName', example='dbmtl'),
        }
      ](name='Models'),
      offlineTableName?: string(name='OfflineTableName', example='table2'),
      onlineTableName?: string(name='OnlineTableName', example='table1'),
    }
  ](name='Relationships'),
  requestId?: string(name='RequestId', example='BF349686-C932-55B5-9B31-DAFA395C0E06'),
}

model ListFeatureViewFieldRelationshipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewFieldRelationshipsResponseBody(name='body'),
}

/**
 * @summary 获取特征字段血缘关系。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFeatureViewFieldRelationshipsResponse
 */
@context("listFeatureViewFieldRelationshipsWithContext")
async function listFeatureViewFieldRelationshipsWithOptions(InstanceId: string, FeatureViewId: string, FieldName: string, headers: map[string]string, runtime: $RuntimeOptions): ListFeatureViewFieldRelationshipsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFeatureViewFieldRelationships',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}/fields/${$URL.percentEncode(FieldName)}/relationships`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征字段血缘关系。
 *
 * @return ListFeatureViewFieldRelationshipsResponse
 */
async function listFeatureViewFieldRelationships(InstanceId: string, FeatureViewId: string, FieldName: string): ListFeatureViewFieldRelationshipsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureViewFieldRelationshipsWithOptions(InstanceId, FeatureViewId, FieldName, headers, runtime);
}

model ListFeatureViewOnlineFeaturesRequest {
  joinIds?: [ string ](name='JoinIds', description='This parameter is required.'),
}

model ListFeatureViewOnlineFeaturesShrinkRequest {
  joinIdsShrink?: string(name='JoinIds', description='This parameter is required.'),
}

model ListFeatureViewOnlineFeaturesResponseBody = {
  onlineFeatures?: [ string ](name='OnlineFeatures'),
  requestId?: string(name='RequestId', example='BF349686-C932-55B5-9B31-DAFA395C0E06'),
}

model ListFeatureViewOnlineFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewOnlineFeaturesResponseBody(name='body'),
}

/**
 * @summary 获取特征视图下的在线特征数据。
 *
 * @param tmpReq ListFeatureViewOnlineFeaturesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFeatureViewOnlineFeaturesResponse
 */
@context("listFeatureViewOnlineFeaturesWithContext")
async function listFeatureViewOnlineFeaturesWithOptions(InstanceId: string, FeatureViewId: string, tmpReq: ListFeatureViewOnlineFeaturesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListFeatureViewOnlineFeaturesResponse {
  tmpReq.validate();
  var request = new ListFeatureViewOnlineFeaturesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.joinIds)) {
    request.joinIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.joinIds, 'JoinIds', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.joinIdsShrink)) {
    query['JoinIds'] = request.joinIdsShrink;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFeatureViewOnlineFeatures',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}/onlinefeatures`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征视图下的在线特征数据。
 *
 * @param request ListFeatureViewOnlineFeaturesRequest
 * @return ListFeatureViewOnlineFeaturesResponse
 */
async function listFeatureViewOnlineFeatures(InstanceId: string, FeatureViewId: string, request: ListFeatureViewOnlineFeaturesRequest): ListFeatureViewOnlineFeaturesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureViewOnlineFeaturesWithOptions(InstanceId, FeatureViewId, request, headers, runtime);
}

model ListFeatureViewRelationshipsResponseBody = {
  relationships?: [ 
    {
      featureViewName?: string(name='FeatureViewName', example='fv1'),
      models?: [ 
        {
          modelId?: string(name='ModelId', example='3'),
          modelName?: string(name='ModelName', example='dbmtl'),
        }
      ](name='Models'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='Relationships'),
  requestId?: string(name='RequestId', example='0FBBE454-9BD1-5D8F-9129-D14DB7FAFE0B'),
}

model ListFeatureViewRelationshipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewRelationshipsResponseBody(name='body'),
}

/**
 * @summary 获取特征视图血缘关系。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFeatureViewRelationshipsResponse
 */
@context("listFeatureViewRelationshipsWithContext")
async function listFeatureViewRelationshipsWithOptions(InstanceId: string, FeatureViewId: string, headers: map[string]string, runtime: $RuntimeOptions): ListFeatureViewRelationshipsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFeatureViewRelationships',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}/relationships`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征视图血缘关系。
 *
 * @return ListFeatureViewRelationshipsResponse
 */
async function listFeatureViewRelationships(InstanceId: string, FeatureViewId: string): ListFeatureViewRelationshipsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureViewRelationshipsWithOptions(InstanceId, FeatureViewId, headers, runtime);
}

model ListFeatureViewsRequest {
  featureName?: string(name='FeatureName', example='feature1'),
  featureViewIds?: [ string ](name='FeatureViewIds'),
  name?: string(name='Name', example='fv1'),
  order?: string(name='Order', example='Desc'),
  owner?: string(name='Owner', example='1232143243242****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='3'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  tag?: string(name='Tag', example='tag1'),
  type?: string(name='Type', example='Batch'),
}

model ListFeatureViewsShrinkRequest {
  featureName?: string(name='FeatureName', example='feature1'),
  featureViewIdsShrink?: string(name='FeatureViewIds'),
  name?: string(name='Name', example='fv1'),
  order?: string(name='Order', example='Desc'),
  owner?: string(name='Owner', example='1232143243242****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='3'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  tag?: string(name='Tag', example='tag1'),
  type?: string(name='Type', example='Batch'),
}

model ListFeatureViewsResponseBody = {
  featureViews?: [ 
    {
      featureEntityName?: string(name='FeatureEntityName', example='featureEntity1'),
      featureViewId?: string(name='FeatureViewId', example='3'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      name?: string(name='Name', example='featureView1'),
      owner?: string(name='Owner', example='12321421412****'),
      projectId?: string(name='ProjectId', example='3'),
      projectName?: string(name='ProjectName', example='project1'),
      registerDatasourceId?: string(name='RegisterDatasourceId', example='4'),
      registerDatasourceName?: string(name='RegisterDatasourceName', example='datasource1'),
      registerTable?: string(name='RegisterTable', example='table1'),
      TTL?: int32(name='TTL', example='90'),
      type?: string(name='Type', example='Batch'),
      writeToFeatureDB?: boolean(name='WriteToFeatureDB'),
    }
  ](name='FeatureViews'),
  requestId?: string(name='RequestId', example='C03B2680-AC9C-59CD-93C5-8142B92537FA'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListFeatureViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureViewsResponseBody(name='body'),
}

/**
 * @summary 获取特征视图列表。
 *
 * @param tmpReq ListFeatureViewsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFeatureViewsResponse
 */
@context("listFeatureViewsWithContext")
async function listFeatureViewsWithOptions(InstanceId: string, tmpReq: ListFeatureViewsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListFeatureViewsResponse {
  tmpReq.validate();
  var request = new ListFeatureViewsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.featureViewIds)) {
    request.featureViewIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.featureViewIds, 'FeatureViewIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!$isNull(request.featureViewIdsShrink)) {
    query['FeatureViewIds'] = request.featureViewIdsShrink;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFeatureViews',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征视图列表。
 *
 * @param request ListFeatureViewsRequest
 * @return ListFeatureViewsResponse
 */
async function listFeatureViews(InstanceId: string, request: ListFeatureViewsRequest): ListFeatureViewsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureViewsWithOptions(InstanceId, request, headers, runtime);
}

model ListInstancesRequest {
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  status?: string(name='Status', example='Running'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      featureDBInfo?: {
        status?: string(name='Status'),
      }(name='FeatureDBInfo'),
      featureDBInstanceInfo?: {
        status?: string(name='Status'),
      }(name='FeatureDBInstanceInfo', deprecated=true),
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
      instanceId?: string(name='InstanceId', example='featureStore-cn-7mz2xfu****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Initializing'),
      type?: string(name='Type', example='Basic'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='2CA11923-2A3D-5E5A-8314-E699D2DD15DE'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
 * @summary 获取Feature Store实例列表。
 *
 * @param request ListInstancesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstancesResponse
 */
@context("listInstancesWithContext")
async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListInstancesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListInstances',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Feature Store实例列表。
 *
 * @param request ListInstancesRequest
 * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model ListLLMConfigsRequest {
  maxResults?: int32(name='MaxResults', example='100'),
  name?: string(name='Name', example='llm_config_1'),
  nextToken?: string(name='NextToken', example='None'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
  workspaceId?: string(name='WorkspaceId', example='234'),
}

model ListLLMConfigsResponseBody = {
  LLMConfigs?: [ 
    {
      apiKey?: string(name='ApiKey', example='apikey-abcdxy'),
      baseUrl?: string(name='BaseUrl', example='https://dashscope.aliyuncs.com/compatible-mode/v1'),
      batchSize?: int32(name='BatchSize', example='8'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T11:26:09.036+08:00'),
      LLMConfigId?: string(name='LLMConfigId', example='llm_config1'),
      maxTokens?: int32(name='MaxTokens', example='2048'),
      model?: string(name='Model', example='text-embedding-v1'),
      name?: string(name='Name', example='llm_config_name1'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2vtzqjaohzqi'),
      rps?: int32(name='Rps', example='30'),
      workspaceId?: string(name='WorkspaceId', example='234'),
    }
  ](name='LLMConfigs', description='This parameter is required.', nullable=false),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6mbU5D/SFHCHMApYkMcWlp5'),
  requestId?: string(name='RequestId', description='Id of the request', example='898DB17C-09E9-5C41-909D-269BA183EB92'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListLLMConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLLMConfigsResponseBody(name='body'),
}

/**
 * @summary 获取大模型调用信息配置
 *
 * @param request ListLLMConfigsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLLMConfigsResponse
 */
@context("listLLMConfigsWithContext")
async function listLLMConfigsWithOptions(InstanceId: string, request: ListLLMConfigsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListLLMConfigsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLLMConfigs',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/llmconfigs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取大模型调用信息配置
 *
 * @param request ListLLMConfigsRequest
 * @return ListLLMConfigsResponse
 */
async function listLLMConfigs(InstanceId: string, request: ListLLMConfigsRequest): ListLLMConfigsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listLLMConfigsWithOptions(InstanceId, request, headers, runtime);
}

model ListLabelTablesRequest {
  labelTableIds?: [ string ](name='LabelTableIds'),
  name?: string(name='Name', example='label_table1'),
  order?: string(name='Order', example='Asc'),
  owner?: string(name='Owner', example='1231432432****'),
  pageNumber?: long(name='PageNumber', example='10'),
  pageSize?: long(name='PageSize', example='1'),
  projectId?: string(name='ProjectId', example='project1'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
}

model ListLabelTablesShrinkRequest {
  labelTableIdsShrink?: string(name='LabelTableIds'),
  name?: string(name='Name', example='label_table1'),
  order?: string(name='Order', example='Asc'),
  owner?: string(name='Owner', example='1231432432****'),
  pageNumber?: long(name='PageNumber', example='10'),
  pageSize?: long(name='PageSize', example='1'),
  projectId?: string(name='ProjectId', example='project1'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
}

model ListLabelTablesResponseBody = {
  labelTables?: [ 
    {
      datasourceId?: string(name='DatasourceId', example='3'),
      datasourceName?: string(name='DatasourceName', example='datasource1'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      labelTableId?: string(name='LabelTableId', example='3'),
      name?: string(name='Name', example='label_table1'),
      owner?: string(name='Owner', example='123214213214'),
      projectId?: string(name='ProjectId', example='1'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='LabelTables'),
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
  totalCount?: long(name='TotalCount', example='21'),
}

model ListLabelTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLabelTablesResponseBody(name='body'),
}

/**
 * @summary 获取Label表列表。
 *
 * @param tmpReq ListLabelTablesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLabelTablesResponse
 */
@context("listLabelTablesWithContext")
async function listLabelTablesWithOptions(InstanceId: string, tmpReq: ListLabelTablesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListLabelTablesResponse {
  tmpReq.validate();
  var request = new ListLabelTablesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.labelTableIds)) {
    request.labelTableIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelTableIds, 'LabelTableIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.labelTableIdsShrink)) {
    query['LabelTableIds'] = request.labelTableIdsShrink;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLabelTables',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/labeltables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Label表列表。
 *
 * @param request ListLabelTablesRequest
 * @return ListLabelTablesResponse
 */
async function listLabelTables(InstanceId: string, request: ListLabelTablesRequest): ListLabelTablesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listLabelTablesWithOptions(InstanceId, request, headers, runtime);
}

model ListModelFeatureAvailableFeaturesRequest {
  featureName?: string(name='FeatureName', example='f1'),
}

model ListModelFeatureAvailableFeaturesResponseBody = {
  avaliableFeatures?: [ 
    {
      name?: string(name='Name', example='age'),
      sourceName?: string(name='SourceName', example='user_fea'),
      sourceType?: string(name='SourceType', example='FeatureView'),
      type?: string(name='Type', example='STRING'),
    }
  ](name='AvaliableFeatures'),
  totalCount?: long(name='TotalCount', example='10'),
  requestId?: string(name='requestId', example='ED4DEA2F-F216-57F0-AE28-08D791233280'),
}

model ListModelFeatureAvailableFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelFeatureAvailableFeaturesResponseBody(name='body'),
}

/**
 * @summary 获取注册FG特征时模型特征下可选的所有特征。
 *
 * @param request ListModelFeatureAvailableFeaturesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelFeatureAvailableFeaturesResponse
 */
@context("listModelFeatureAvailableFeaturesWithContext")
async function listModelFeatureAvailableFeaturesWithOptions(InstanceId: string, ModelFeatureId: string, request: ListModelFeatureAvailableFeaturesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListModelFeatureAvailableFeaturesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListModelFeatureAvailableFeatures',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/availablefeatures`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取注册FG特征时模型特征下可选的所有特征。
 *
 * @param request ListModelFeatureAvailableFeaturesRequest
 * @return ListModelFeatureAvailableFeaturesResponse
 */
async function listModelFeatureAvailableFeatures(InstanceId: string, ModelFeatureId: string, request: ListModelFeatureAvailableFeaturesRequest): ListModelFeatureAvailableFeaturesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelFeatureAvailableFeaturesWithOptions(InstanceId, ModelFeatureId, request, headers, runtime);
}

model ListModelFeaturesRequest {
  modelFeatureIds?: [ string ](name='ModelFeatureIds'),
  name?: string(name='Name', example='model_feature1'),
  order?: string(name='Order', example='ASC'),
  owner?: string(name='Owner', example='12323143****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='4'),
  sortBy?: string(name='SortBy', example='DESC'),
}

model ListModelFeaturesShrinkRequest {
  modelFeatureIdsShrink?: string(name='ModelFeatureIds'),
  name?: string(name='Name', example='model_feature1'),
  order?: string(name='Order', example='ASC'),
  owner?: string(name='Owner', example='12323143****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='4'),
  sortBy?: string(name='SortBy', example='DESC'),
}

model ListModelFeaturesResponseBody = {
  modelFeatures?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T14:46:22.227+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-07-04T14:46:22.227+08:00'),
      labelTableName?: string(name='LabelTableName', example='label_table_1'),
      modelFeatureId?: string(name='ModelFeatureId', example='3'),
      name?: string(name='Name', example='model_feature1'),
      owner?: string(name='Owner', example='1231243253****'),
      projectId?: string(name='ProjectId', example='5'),
      projectName?: string(name='ProjectName', example='project1'),
    }
  ](name='ModelFeatures'),
  requestId?: string(name='RequestId', example='2CA11923-2A3D-5E5A-8314-E699D2DD15DE'),
  totalCount?: long(name='TotalCount', example='4'),
}

model ListModelFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelFeaturesResponseBody(name='body'),
}

/**
 * @summary 获取模型特征列表。
 *
 * @param tmpReq ListModelFeaturesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelFeaturesResponse
 */
@context("listModelFeaturesWithContext")
async function listModelFeaturesWithOptions(InstanceId: string, tmpReq: ListModelFeaturesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListModelFeaturesResponse {
  tmpReq.validate();
  var request = new ListModelFeaturesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.modelFeatureIds)) {
    request.modelFeatureIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modelFeatureIds, 'ModelFeatureIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.modelFeatureIdsShrink)) {
    query['ModelFeatureIds'] = request.modelFeatureIdsShrink;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListModelFeatures',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型特征列表。
 *
 * @param request ListModelFeaturesRequest
 * @return ListModelFeaturesResponse
 */
async function listModelFeatures(InstanceId: string, request: ListModelFeaturesRequest): ListModelFeaturesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelFeaturesWithOptions(InstanceId, request, headers, runtime);
}

model ListProjectFeatureViewsResponseBody = {
  featureViews?: [ 
    {
      featureViewId?: string(name='FeatureViewId', example='3'),
      features?: [ 
        {
          attributes?: [ string ](name='Attributes'),
          name?: string(name='Name', example='f1'),
          type?: string(name='Type', example='INT32'),
        }
      ](name='Features'),
      name?: string(name='Name', example='feature_view1'),
      type?: string(name='Type'),
    }
  ](name='FeatureViews'),
  requestId?: string(name='RequestId', example='AE2AF33E-0C0D-51A8-B89B-C5F1DF261D92'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListProjectFeatureViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFeatureViewsResponseBody(name='body'),
}

/**
 * @summary 获取项目下的所有特征视图、特征信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectFeatureViewsResponse
 */
@context("listProjectFeatureViewsWithContext")
async function listProjectFeatureViewsWithOptions(InstanceId: string, ProjectId: string, headers: map[string]string, runtime: $RuntimeOptions): ListProjectFeatureViewsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjectFeatureViews',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}/featureviews`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取项目下的所有特征视图、特征信息。
 *
 * @return ListProjectFeatureViewsResponse
 */
async function listProjectFeatureViews(InstanceId: string, ProjectId: string): ListProjectFeatureViewsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectFeatureViewsWithOptions(InstanceId, ProjectId, headers, runtime);
}

model ListProjectFeaturesRequest {
  aliasName?: string(name='AliasName', example='ff1'),
  filter?: string(name='Filter', example='{"feature_view_name":"fv1"}'),
  name?: string(name='Name', example='f1'),
  order?: string(name='Order', example='Desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='ModelFeatureCount'),
}

model ListProjectFeaturesResponseBody = {
  features?: [ 
    {
      aliasNames?: string(name='AliasNames', example='age1,age2'),
      featureViewId?: string(name='FeatureViewId', example='1'),
      featureViewName?: string(name='FeatureViewName', example='fv1'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      modelFeatureCount?: int32(name='ModelFeatureCount', example='10'),
      name?: string(name='Name', example='f1'),
      owner?: string(name='Owner', example='123456'),
      type?: string(name='Type', example='STRING'),
    }
  ](name='Features'),
  totalCount?: int32(name='TotalCount', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='7D497816-607C-5B67-97B1-61354B6ACB2B'),
}

model ListProjectFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectFeaturesResponseBody(name='body'),
}

/**
 * @summary 获取项目下所有特征信息
 *
 * @param request ListProjectFeaturesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectFeaturesResponse
 */
@context("listProjectFeaturesWithContext")
async function listProjectFeaturesWithOptions(InstanceId: string, ProjectId: string, request: ListProjectFeaturesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListProjectFeaturesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!$isNull(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjectFeatures',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}/features`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取项目下所有特征信息
 *
 * @param request ListProjectFeaturesRequest
 * @return ListProjectFeaturesResponse
 */
async function listProjectFeatures(InstanceId: string, ProjectId: string, request: ListProjectFeaturesRequest): ListProjectFeaturesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectFeaturesWithOptions(InstanceId, ProjectId, request, headers, runtime);
}

model ListProjectsRequest {
  name?: string(name='Name', example='fs1'),
  order?: string(name='Order', example='Asc'),
  owner?: string(name='Owner', example='134324352****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectIds?: [ string ](name='ProjectIds'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
  workspaceId?: string(name='WorkspaceId', example='234'),
}

model ListProjectsShrinkRequest {
  name?: string(name='Name', example='fs1'),
  order?: string(name='Order', example='Asc'),
  owner?: string(name='Owner', example='134324352****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectIdsShrink?: string(name='ProjectIds'),
  sortBy?: string(name='SortBy', example='GmtModifiedTime'),
  workspaceId?: string(name='WorkspaceId', example='234'),
}

model ListProjectsResponseBody = {
  projects?: [ 
    {
      description?: string(name='Description', example='This is a test.'),
      featureEntityCount?: int32(name='FeatureEntityCount', example='10'),
      featureViewCount?: int32(name='FeatureViewCount', example='10'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-12-15T23:24:33.132+08:00'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-12-15T23:24:33.132+08:00'),
      modelCount?: int32(name='ModelCount', example='5'),
      name?: string(name='Name', example='project1'),
      offlineDatasourceId?: string(name='OfflineDatasourceId', example='4'),
      offlineDatasourceName?: string(name='OfflineDatasourceName', example='datasource1'),
      offlineDatasourceType?: string(name='OfflineDatasourceType', example='MaxCompute'),
      offlineLifecycle?: int32(name='OfflineLifecycle', example='10'),
      onlineDatasourceId?: string(name='OnlineDatasourceId', example='5'),
      onlineDatasourceName?: string(name='OnlineDatasourceName', example='datasource2'),
      onlineDatasourceType?: string(name='OnlineDatasourceType', example='Hologres'),
      owner?: string(name='Owner', example='1232132543543****'),
      projectId?: string(name='ProjectId', example='3'),
    }
  ](name='Projects'),
  requestId?: string(name='RequestId', example='44933189-493B-5C43-A5C6-11EEC2A43520'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary 获取Feature Store项目列表。
 *
 * @param tmpReq ListProjectsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
@context("listProjectsWithContext")
async function listProjectsWithOptions(InstanceId: string, tmpReq: ListProjectsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListProjectsResponse {
  tmpReq.validate();
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.projectIds)) {
    request.projectIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.projectIds, 'ProjectIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectIdsShrink)) {
    query['ProjectIds'] = request.projectIdsShrink;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjects',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Feature Store项目列表。
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(InstanceId: string, request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectsWithOptions(InstanceId, request, headers, runtime);
}

model ListTaskLogsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListTaskLogsResponseBody = {
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='72F15A8A-5A28-5B18-A0DE-0EABD7D3245A'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTaskLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskLogsResponseBody(name='body'),
}

/**
 * @summary 获取任务日志列表
 *
 * @param request ListTaskLogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskLogsResponse
 */
@context("listTaskLogsWithContext")
async function listTaskLogsWithOptions(InstanceId: string, TaskId: string, request: ListTaskLogsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListTaskLogsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTaskLogs',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/tasks/${$URL.percentEncode(TaskId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务日志列表
 *
 * @param request ListTaskLogsRequest
 * @return ListTaskLogsResponse
 */
async function listTaskLogs(InstanceId: string, TaskId: string, request: ListTaskLogsRequest): ListTaskLogsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listTaskLogsWithOptions(InstanceId, TaskId, request, headers, runtime);
}

model ListTasksRequest {
  objectId?: string(name='ObjectId', example='4'),
  objectType?: string(name='ObjectType', example='ModelFeature'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='4'),
  status?: string(name='Status', example='Running'),
  taskIds?: [ string ](name='TaskIds'),
  type?: string(name='Type', example='OfflineToOnline'),
}

model ListTasksShrinkRequest {
  objectId?: string(name='ObjectId', example='4'),
  objectType?: string(name='ObjectType', example='ModelFeature'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: string(name='ProjectId', example='4'),
  status?: string(name='Status', example='Running'),
  taskIdsShrink?: string(name='TaskIds'),
  type?: string(name='Type', example='OfflineToOnline'),
}

model ListTasksResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
  tasks?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtExecutedTime?: string(name='GmtExecutedTime', example='2023-07-04T11:26:09.036+08:00'),
      gmtFinishedTime?: string(name='GmtFinishedTime', example='2023-07-04T11:26:09.036+08:00'),
      objectId?: string(name='ObjectId', example='5'),
      objectType?: string(name='ObjectType', example='ModelFeature'),
      projectId?: string(name='ProjectId', example='4'),
      projectName?: string(name='ProjectName', example='project_1'),
      status?: string(name='Status', example='Running'),
      taskId?: string(name='TaskId', example='4'),
      type?: string(name='Type', example='OfflineToOnline'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
 * @summary 获取任务列表
 *
 * @param tmpReq ListTasksRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTasksResponse
 */
@context("listTasksWithContext")
async function listTasksWithOptions(InstanceId: string, tmpReq: ListTasksRequest, headers: map[string]string, runtime: $RuntimeOptions): ListTasksResponse {
  tmpReq.validate();
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!$isNull(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskIdsShrink)) {
    query['TaskIds'] = request.taskIdsShrink;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTasks',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取任务列表
 *
 * @param request ListTasksRequest
 * @return ListTasksResponse
 */
async function listTasks(InstanceId: string, request: ListTasksRequest): ListTasksResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listTasksWithOptions(InstanceId, request, headers, runtime);
}

model PublishFeatureViewTableRequest {
  config?: string(name='Config', example='{}'),
  eventTime?: string(name='EventTime', example='2021-12-15T23:24:33.132+08:00'),
  mode?: string(name='Mode', description='This parameter is required.', example='Overwrite'),
  offlineToOnline?: boolean(name='OfflineToOnline', description='This parameter is required.', example='true'),
  partitions?: map[string]object(name='Partitions'),
}

model PublishFeatureViewTableResponseBody = {
  requestId?: string(name='RequestId', example='627B5776-4D06-5A49-8A04-508AA39653F4'),
  taskId?: string(name='TaskId'),
}

model PublishFeatureViewTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFeatureViewTableResponseBody(name='body'),
}

/**
 * @summary 将特征视图的离线数据发布/同步到线上。
 *
 * @param request PublishFeatureViewTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishFeatureViewTableResponse
 */
@context("publishFeatureViewTableWithContext")
async function publishFeatureViewTableWithOptions(InstanceId: string, FeatureViewId: string, request: PublishFeatureViewTableRequest, headers: map[string]string, runtime: $RuntimeOptions): PublishFeatureViewTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.eventTime)) {
    body['EventTime'] = request.eventTime;
  }
  if (!$isNull(request.mode)) {
    body['Mode'] = request.mode;
  }
  if (!$isNull(request.offlineToOnline)) {
    body['OfflineToOnline'] = request.offlineToOnline;
  }
  if (!$isNull(request.partitions)) {
    body['Partitions'] = request.partitions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishFeatureViewTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}/action/publishtable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将特征视图的离线数据发布/同步到线上。
 *
 * @param request PublishFeatureViewTableRequest
 * @return PublishFeatureViewTableResponse
 */
async function publishFeatureViewTable(InstanceId: string, FeatureViewId: string, request: PublishFeatureViewTableRequest): PublishFeatureViewTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return publishFeatureViewTableWithOptions(InstanceId, FeatureViewId, request, headers, runtime);
}

model StopTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='514F82AF-3C04-5C3D-8F38-A11261BF37B0'),
}

model StopTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskResponseBody(name='body'),
}

/**
 * @summary 停止任务。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopTaskResponse
 */
@context("stopTaskWithContext")
async function stopTaskWithOptions(InstanceId: string, TaskId: string, headers: map[string]string, runtime: $RuntimeOptions): StopTaskResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'StopTask',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/tasks/${$URL.percentEncode(TaskId)}/action/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止任务。
 *
 * @return StopTaskResponse
 */
async function stopTask(InstanceId: string, TaskId: string): StopTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTaskWithOptions(InstanceId, TaskId, headers, runtime);
}

model UpdateDatasourceRequest {
  config?: string(name='Config', example='{"address": ""}'),
  name?: string(name='Name', description='This parameter is required.', example='datasource1'),
  uri?: string(name='Uri', description='This parameter is required.', example='igraph_instance1'),
}

model UpdateDatasourceResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model UpdateDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasourceResponseBody(name='body'),
}

/**
 * @summary 更新数据源信息。
 *
 * @param request UpdateDatasourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasourceResponse
 */
@context("updateDatasourceWithContext")
async function updateDatasourceWithOptions(InstanceId: string, DatasourceId: string, request: UpdateDatasourceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDatasource',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/datasources/${$URL.percentEncode(DatasourceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据源信息。
 *
 * @param request UpdateDatasourceRequest
 * @return UpdateDatasourceResponse
 */
async function updateDatasource(InstanceId: string, DatasourceId: string, request: UpdateDatasourceRequest): UpdateDatasourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasourceWithOptions(InstanceId, DatasourceId, request, headers, runtime);
}

model UpdateLLMConfigRequest {
  apiKey?: string(name='ApiKey', description='This parameter is required.', example='apikey-***'),
  baseUrl?: string(name='BaseUrl', description='This parameter is required.', example='https://dashscope.aliyuncs.com/compatible-mode/v1'),
  batchSize?: int32(name='BatchSize', example='8'),
  maxTokens?: int32(name='MaxTokens', description='This parameter is required.', example='2048'),
  model?: string(name='Model', description='This parameter is required.', example='text-embedding-v1'),
  name?: string(name='Name', description='This parameter is required.', example='llm-config1'),
  rps?: int32(name='Rps', description='This parameter is required.', example='30'),
}

model UpdateLLMConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLLMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLLMConfigResponseBody(name='body'),
}

/**
 * @summary 更新大模型调用信息配置
 *
 * @param request UpdateLLMConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLLMConfigResponse
 */
@context("updateLLMConfigWithContext")
async function updateLLMConfigWithOptions(InstanceId: string, LLMConfigId: string, request: UpdateLLMConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateLLMConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.apiKey)) {
    body['ApiKey'] = request.apiKey;
  }
  if (!$isNull(request.baseUrl)) {
    body['BaseUrl'] = request.baseUrl;
  }
  if (!$isNull(request.batchSize)) {
    body['BatchSize'] = request.batchSize;
  }
  if (!$isNull(request.maxTokens)) {
    body['MaxTokens'] = request.maxTokens;
  }
  if (!$isNull(request.model)) {
    body['Model'] = request.model;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.rps)) {
    body['Rps'] = request.rps;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateLLMConfig',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/llmconfigs/${$URL.percentEncode(LLMConfigId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新大模型调用信息配置
 *
 * @param request UpdateLLMConfigRequest
 * @return UpdateLLMConfigResponse
 */
async function updateLLMConfig(InstanceId: string, LLMConfigId: string, request: UpdateLLMConfigRequest): UpdateLLMConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLLMConfigWithOptions(InstanceId, LLMConfigId, request, headers, runtime);
}

model UpdateLabelTableRequest {
  datasourceId?: string(name='DatasourceId', example='3'),
  fields?: [ 
    {
      attributes?: [ string ](name='Attributes', description='This parameter is required.'),
      name?: string(name='Name', description='This parameter is required.', example='lat'),
      type?: string(name='Type', description='This parameter is required.', example='DOUBLE'),
    }
  ](name='Fields', description='This parameter is required.'),
  name?: string(name='Name', example='rec_test'),
}

model UpdateLabelTableResponseBody = {
  requestId?: string(name='RequestId', example='728C5E01-ABF6-5AA8-B9FC-B3BA05DECC77'),
}

model UpdateLabelTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLabelTableResponseBody(name='body'),
}

/**
 * @summary 更新label表。
 *
 * @param request UpdateLabelTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLabelTableResponse
 */
@context("updateLabelTableWithContext")
async function updateLabelTableWithOptions(InstanceId: string, LabelTableId: string, request: UpdateLabelTableRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateLabelTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasourceId)) {
    body['DatasourceId'] = request.datasourceId;
  }
  if (!$isNull(request.fields)) {
    body['Fields'] = request.fields;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateLabelTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/labeltables/${$URL.percentEncode(LabelTableId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新label表。
 *
 * @param request UpdateLabelTableRequest
 * @return UpdateLabelTableResponse
 */
async function updateLabelTable(InstanceId: string, LabelTableId: string, request: UpdateLabelTableRequest): UpdateLabelTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLabelTableWithOptions(InstanceId, LabelTableId, request, headers, runtime);
}

model UpdateModelFeatureRequest {
  features?: [ 
    {
      aliasName?: string(name='AliasName', example='sex'),
      featureViewId?: string(name='FeatureViewId', description='This parameter is required.', example='5'),
      name?: string(name='Name', description='This parameter is required.', example='gender'),
      type?: string(name='Type', description='This parameter is required.', example='STRING'),
    }
  ](name='Features'),
  labelPriorityLevel?: long(name='LabelPriorityLevel', example='0'),
  labelTableId?: string(name='LabelTableId', example='4'),
  sequenceFeatureViewIds?: [ string ](name='SequenceFeatureViewIds'),
}

model UpdateModelFeatureResponseBody = {
  requestId?: string(name='RequestId', example='C33E160C-BFCA-5719-B958-942850E949F6'),
}

model UpdateModelFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelFeatureResponseBody(name='body'),
}

/**
 * @summary 更新模型特征。
 *
 * @param request UpdateModelFeatureRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelFeatureResponse
 */
@context("updateModelFeatureWithContext")
async function updateModelFeatureWithOptions(InstanceId: string, ModelFeatureId: string, request: UpdateModelFeatureRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateModelFeatureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.features)) {
    body['Features'] = request.features;
  }
  if (!$isNull(request.labelPriorityLevel)) {
    body['LabelPriorityLevel'] = request.labelPriorityLevel;
  }
  if (!$isNull(request.labelTableId)) {
    body['LabelTableId'] = request.labelTableId;
  }
  if (!$isNull(request.sequenceFeatureViewIds)) {
    body['SequenceFeatureViewIds'] = request.sequenceFeatureViewIds;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateModelFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新模型特征。
 *
 * @param request UpdateModelFeatureRequest
 * @return UpdateModelFeatureResponse
 */
async function updateModelFeature(InstanceId: string, ModelFeatureId: string, request: UpdateModelFeatureRequest): UpdateModelFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelFeatureWithOptions(InstanceId, ModelFeatureId, request, headers, runtime);
}

model UpdateModelFeatureFGFeatureRequest {
  lookupFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', description='This parameter is required.', example='-1024'),
      featureName?: string(name='FeatureName', description='This parameter is required.', example='item_id'),
      keyFeatureDomain?: string(name='KeyFeatureDomain', description='This parameter is required.', example='Item'),
      keyFeatureName?: string(name='KeyFeatureName', description='This parameter is required.', example='1'),
      mapFeatureDomain?: string(name='MapFeatureDomain', description='This parameter is required.', example='User'),
      mapFeatureName?: string(name='MapFeatureName', description='This parameter is required.', example='item_id'),
      valueType?: string(name='ValueType', description='This parameter is required.', example='STRING'),
    }
  ](name='LookupFeatures'),
  rawFeatures?: [ 
    {
      defaultValue?: string(name='DefaultValue', description='This parameter is required.', example='-1024'),
      featureDomain?: string(name='FeatureDomain', description='This parameter is required.', example='User'),
      featureName?: string(name='FeatureName', description='This parameter is required.', example='item_id'),
      featureType?: string(name='FeatureType', description='This parameter is required.', example='IdFeature'),
      inputFeatureName?: string(name='InputFeatureName', description='This parameter is required.', example='item_id'),
      valueType?: string(name='ValueType', description='This parameter is required.', example='STRING'),
    }
  ](name='RawFeatures'),
  reserves?: [ string ](name='Reserves'),
  sequenceFeatures?: [ 
    {
      attributeDelim?: string(name='AttributeDelim', description='This parameter is required.', example='#'),
      featureName?: string(name='FeatureName', description='This parameter is required.', example='item_id'),
      sequenceDelim?: string(name='SequenceDelim', description='This parameter is required.', example=';'),
      sequenceLength?: long(name='SequenceLength', description='This parameter is required.', example='50'),
      subFeatures?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='This parameter is required.', example='-1024'),
          featureDomain?: string(name='FeatureDomain', description='This parameter is required.', example='User'),
          featureName?: string(name='FeatureName', description='This parameter is required.', example='item_id'),
          featureType?: string(name='FeatureType', description='This parameter is required.', example='RawFeature'),
          inputFeatureName?: string(name='InputFeatureName', description='This parameter is required.', example='item_id'),
          valueType?: string(name='ValueType', description='This parameter is required.', example='STRING'),
        }
      ](name='SubFeatures'),
    }
  ](name='SequenceFeatures'),
}

model UpdateModelFeatureFGFeatureResponseBody = {
  requestId?: string(name='requestId', example='7D497816-607C-5B67-97B1-61354B6ACB2B'),
}

model UpdateModelFeatureFGFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelFeatureFGFeatureResponseBody(name='body'),
}

/**
 * @summary 更新模型特征的FG特征配置信息。
 *
 * @param request UpdateModelFeatureFGFeatureRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelFeatureFGFeatureResponse
 */
@context("updateModelFeatureFGFeatureWithContext")
async function updateModelFeatureFGFeatureWithOptions(InstanceId: string, ModelFeatureId: string, request: UpdateModelFeatureFGFeatureRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateModelFeatureFGFeatureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lookupFeatures)) {
    body['LookupFeatures'] = request.lookupFeatures;
  }
  if (!$isNull(request.rawFeatures)) {
    body['RawFeatures'] = request.rawFeatures;
  }
  if (!$isNull(request.reserves)) {
    body['Reserves'] = request.reserves;
  }
  if (!$isNull(request.sequenceFeatures)) {
    body['SequenceFeatures'] = request.sequenceFeatures;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateModelFeatureFGFeature',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/modelfeatures/${$URL.percentEncode(ModelFeatureId)}/fgfeature`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新模型特征的FG特征配置信息。
 *
 * @param request UpdateModelFeatureFGFeatureRequest
 * @return UpdateModelFeatureFGFeatureResponse
 */
async function updateModelFeatureFGFeature(InstanceId: string, ModelFeatureId: string, request: UpdateModelFeatureFGFeatureRequest): UpdateModelFeatureFGFeatureResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelFeatureFGFeatureWithOptions(InstanceId, ModelFeatureId, request, headers, runtime);
}

model UpdateProjectRequest {
  description?: string(name='Description', example='This is a test.'),
  name?: string(name='Name', example='project1'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', example='2150233F-A1F7-54D2-B5B5-8A70567549BD'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
 * @summary 更新指定Feature Store项目信息。
 *
 * @param request UpdateProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProjectResponse
 */
@context("updateProjectWithContext")
async function updateProjectWithOptions(InstanceId: string, ProjectId: string, request: UpdateProjectRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateProjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateProject',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/projects/${$URL.percentEncode(ProjectId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新指定Feature Store项目信息。
 *
 * @param request UpdateProjectRequest
 * @return UpdateProjectResponse
 */
async function updateProject(InstanceId: string, ProjectId: string, request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectWithOptions(InstanceId, ProjectId, request, headers, runtime);
}

model WriteFeatureViewTableRequest {
  mode?: string(name='Mode', description='This parameter is required.', example='Merge'),
  partitions?: map[string]object(name='Partitions'),
  urlDatasource?: {
    delimiter?: string(name='Delimiter', example=','),
    omitHeader?: boolean(name='OmitHeader', example='true'),
    path?: string(name='Path', example='xxx.xxx.com/file.csv'),
  }(name='UrlDatasource'),
}

model WriteFeatureViewTableResponseBody = {
  requestId?: string(name='RequestId', example='0C89F5E1-7F24-5EEC-9F05-508A39278CC8'),
  taskId?: string(name='TaskId'),
}

model WriteFeatureViewTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WriteFeatureViewTableResponseBody(name='body'),
}

/**
 * @summary 获取特征视图血缘关系。
 *
 * @param request WriteFeatureViewTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return WriteFeatureViewTableResponse
 */
@context("writeFeatureViewTableWithContext")
async function writeFeatureViewTableWithOptions(InstanceId: string, FeatureViewId: string, request: WriteFeatureViewTableRequest, headers: map[string]string, runtime: $RuntimeOptions): WriteFeatureViewTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.mode)) {
    body['Mode'] = request.mode;
  }
  if (!$isNull(request.partitions)) {
    body['Partitions'] = request.partitions;
  }
  if (!$isNull(request.urlDatasource)) {
    body['UrlDatasource'] = request.urlDatasource;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'WriteFeatureViewTable',
    version = '2023-06-21',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${$URL.percentEncode(InstanceId)}/featureviews/${$URL.percentEncode(FeatureViewId)}/action/writetable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取特征视图血缘关系。
 *
 * @param request WriteFeatureViewTableRequest
 * @return WriteFeatureViewTableResponse
 */
async function writeFeatureViewTable(InstanceId: string, FeatureViewId: string, request: WriteFeatureViewTableRequest): WriteFeatureViewTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return writeFeatureViewTableWithOptions(InstanceId, FeatureViewId, request, headers, runtime);
}

