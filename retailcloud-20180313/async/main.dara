/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'retailcloud';
  @version = '2018-03-13';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'retailcloud.aliyuncs.com',
    ap-northeast-2-pop = 'retailcloud.aliyuncs.com',
    ap-south-1 = 'retailcloud.aliyuncs.com',
    ap-southeast-1 = 'retailcloud.aliyuncs.com',
    ap-southeast-2 = 'retailcloud.aliyuncs.com',
    ap-southeast-3 = 'retailcloud.aliyuncs.com',
    ap-southeast-5 = 'retailcloud.aliyuncs.com',
    cn-beijing = 'retailcloud.aliyuncs.com',
    cn-beijing-finance-1 = 'retailcloud.aliyuncs.com',
    cn-beijing-finance-pop = 'retailcloud.aliyuncs.com',
    cn-beijing-gov-1 = 'retailcloud.aliyuncs.com',
    cn-beijing-nu16-b01 = 'retailcloud.aliyuncs.com',
    cn-chengdu = 'retailcloud.aliyuncs.com',
    cn-edge-1 = 'retailcloud.aliyuncs.com',
    cn-fujian = 'retailcloud.aliyuncs.com',
    cn-haidian-cm12-c01 = 'retailcloud.aliyuncs.com',
    cn-hangzhou = 'retailcloud.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'retailcloud.aliyuncs.com',
    cn-hangzhou-finance = 'retailcloud.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'retailcloud.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'retailcloud.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'retailcloud.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'retailcloud.aliyuncs.com',
    cn-hangzhou-test-306 = 'retailcloud.aliyuncs.com',
    cn-hongkong = 'retailcloud.aliyuncs.com',
    cn-hongkong-finance-pop = 'retailcloud.aliyuncs.com',
    cn-huhehaote = 'retailcloud.aliyuncs.com',
    cn-north-2-gov-1 = 'retailcloud.aliyuncs.com',
    cn-qingdao = 'retailcloud.aliyuncs.com',
    cn-qingdao-nebula = 'retailcloud.aliyuncs.com',
    cn-shanghai = 'retailcloud.aliyuncs.com',
    cn-shanghai-et15-b01 = 'retailcloud.aliyuncs.com',
    cn-shanghai-et2-b01 = 'retailcloud.aliyuncs.com',
    cn-shanghai-finance-1 = 'retailcloud.aliyuncs.com',
    cn-shanghai-inner = 'retailcloud.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'retailcloud.aliyuncs.com',
    cn-shenzhen = 'retailcloud.aliyuncs.com',
    cn-shenzhen-finance-1 = 'retailcloud.aliyuncs.com',
    cn-shenzhen-inner = 'retailcloud.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'retailcloud.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'retailcloud.aliyuncs.com',
    cn-wuhan = 'retailcloud.aliyuncs.com',
    cn-yushanfang = 'retailcloud.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'retailcloud.aliyuncs.com',
    cn-zhangjiakou = 'retailcloud.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'retailcloud.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'retailcloud.aliyuncs.com',
    eu-central-1 = 'retailcloud.aliyuncs.com',
    eu-west-1 = 'retailcloud.aliyuncs.com',
    eu-west-1-oxs = 'retailcloud.aliyuncs.com',
    me-east-1 = 'retailcloud.aliyuncs.com',
    rus-west-1-pop = 'retailcloud.aliyuncs.com',
    us-east-1 = 'retailcloud.aliyuncs.com',
    us-west-1 = 'retailcloud.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddClusterNodeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
  ecsInstanceIdList: [ string ](name='EcsInstanceIdList', position='Query'),
}

model AddClusterNodeResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    nonsense?: int32(name='Nonsense'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model AddClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddClusterNodeResponseBody(name='body'),
}

async function addClusterNode(request: AddClusterNodeRequest): AddClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddClusterNode', 'POST', '/', 'json', false, 'json', request);
}

model AllocatePodConfigRequest {
  appId: long(name='AppId', minimum=0, maximum=99999999999999999, position='Query'),
  envId: long(name='EnvId', minimum=0, maximum=999999999999999, position='Query'),
  requestId?: string(name='RequestId', position='Query'),
}

model AllocatePodConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    configData?: string(name='ConfigData'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model AllocatePodConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocatePodConfigResponseBody(name='body'),
}

async function allocatePodConfig(request: AllocatePodConfigRequest): AllocatePodConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePodConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddServersRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sign: string(name='Sign', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model BatchAddServersResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model BatchAddServersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddServersResponseBody(name='body'),
}

async function batchAddServers(request: BatchAddServersRequest): BatchAddServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddServers', 'POST', '/', 'json', false, 'json', request);
}

model BindGroupRequest {
  appId: long(name='AppId', position='Query'),
  bizCode: string(name='BizCode', position='Query'),
  name: string(name='Name', position='Query'),
}

model BindGroupResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model BindGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindGroupResponseBody(name='body'),
}

async function bindGroup(request: BindGroupRequest): BindGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindGroup', 'POST', '/', 'json', false, 'json', request);
}

model BindNodeLabelRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  labelKey: string(name='LabelKey', position='Query'),
  labelValue: string(name='LabelValue', position='Query'),
}

model BindNodeLabelResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindNodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindNodeLabelResponseBody(name='body'),
}

async function bindNodeLabel(request: BindNodeLabelRequest): BindNodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindNodeLabel', 'POST', '/', 'json', false, 'json', request);
}

model CloseDeployOrderRequest {
  deployOrderId: long(name='DeployOrderId', position='Query'),
}

model CloseDeployOrderResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloseDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeployOrderResponseBody(name='body'),
}

async function closeDeployOrder(request: CloseDeployOrderRequest): CloseDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDeployOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountName: string(name='AccountName', position='Body'),
  accountPassword: string(name='AccountPassword', position='Body'),
  accountType?: string(name='AccountType', position='Body'),
  dbInstanceId: string(name='DbInstanceId', position='Body'),
}

model CreateAccountResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppRequest {
  bizCode: string(name='BizCode', position='Body'),
  bizTitle?: string(name='BizTitle', position='Body'),
  description?: string(name='Description', position='Body'),
  groupName?: string(name='GroupName', position='Body'),
  language: string(name='Language', position='Body'),
  middleWareIdList?: [ int32 ](name='MiddleWareIdList', position='Body'),
  namespace?: string(name='Namespace', position='Body'),
  operatingSystem: string(name='OperatingSystem', position='Body'),
  serviceType: string(name='ServiceType', position='Body'),
  stateType?: int32(name='StateType', position='Body'),
  title: string(name='Title', position='Body'),
  userRoles?: [ 
    {
      roleName: string(name='RoleName'),
      userId: string(name='UserId'),
      userType: string(name='UserType'),
    }
  ](name='UserRoles', position='Body'),
}

model CreateAppResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
  }(name='Result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppGroupRequest {
  bizCode: string(name='BizCode', position='Body'),
  name: string(name='Name', position='Body'),
}

model CreateAppGroupResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appGroupId?: long(name='AppGroupId'),
  }(name='Result'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppMonitorsRequest {
  alarmTemplateId: long(name='AlarmTemplateId', minimum=0, maximum=999999999999999, position='Query'),
  appIds?: [ long ](name='AppIds', position='Body'),
  envType?: int32(name='EnvType', position='Query'),
  mainUserId: long(name='MainUserId', minimum=0, maximum=999999999999999, position='Query'),
  silenceTime?: string(name='SilenceTime', position='Query'),
}

model CreateAppMonitorsResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAppMonitorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppMonitorsResponseBody(name='body'),
}

async function createAppMonitors(request: CreateAppMonitorsRequest): CreateAppMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppMonitors', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppResourceAllocRequest {
  appEnvId: long(name='AppEnvId', position='Query'),
  appId: long(name='AppId', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
}

model CreateAppResourceAllocResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appEnvId?: long(name='AppEnvId'),
    appId?: long(name='AppId'),
    clusterId?: string(name='ClusterId'),
    id?: long(name='Id'),
    resourceDef?: string(name='ResourceDef'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateAppResourceAllocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResourceAllocResponseBody(name='body'),
}

async function createAppResourceAlloc(request: CreateAppResourceAllocRequest): CreateAppResourceAllocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppResourceAlloc', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  businessCode: string(name='BusinessCode', position='Query'),
  cloudMonitorFlags?: int32(name='CloudMonitorFlags', position='Query'),
  clusterEnvType: string(name='ClusterEnvType', position='Query'),
  clusterId?: long(name='ClusterId', position='Query'),
  clusterTitle: string(name='ClusterTitle', position='Query'),
  clusterType: string(name='ClusterType', position='Query'),
  createWithArmsIntegration?: boolean(name='CreateWithArmsIntegration', position='Query'),
  createWithLogIntegration?: boolean(name='CreateWithLogIntegration', position='Query'),
  keyPair?: string(name='KeyPair', position='Query'),
  netPlug?: string(name='NetPlug', position='Query'),
  password?: string(name='Password', position='Query'),
  podCIDR?: string(name='PodCIDR', position='Query'),
  privateZone?: boolean(name='PrivateZone', position='Query'),
  publicSlb?: int32(name='PublicSlb', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  regionName?: string(name='RegionName', position='Query'),
  serviceCIDR?: string(name='ServiceCIDR', position='Query'),
  snatEntry?: int32(name='SnatEntry', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vswitchids: [ string ](name='Vswitchids', position='Query'),
}

model CreateClusterResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    clusterInstanceId?: string(name='ClusterInstanceId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDbRequest {
  characterSetName: string(name='CharacterSetName', example='gbk', position='Body'),
  dbDescription?: string(name='DbDescription', position='Body'),
  dbInstanceId: string(name='DbInstanceId', example='rm-uf6wjk5xxxxxxxxxx', position='Body'),
  dbName: string(name='DbName', example='rds_mysql', position='Body'),
}

model CreateDbResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='07F6177E-6DE4-408A-BB4F-0723301340F3'),
}

model CreateDbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDbResponseBody(name='body'),
}

async function createDb(request: CreateDbRequest): CreateDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDb', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeployConfigRequest {
  appId: long(name='AppId', position='Query'),
  codePath?: string(name='CodePath', position='Query'),
  configMap?: string(name='ConfigMap', position='Query'),
  configMapList?: [ string ](name='ConfigMapList', position='Query'),
  cronJob?: string(name='CronJob', position='Query'),
  deployment?: string(name='Deployment', position='Query'),
  envType: string(name='EnvType', position='Query'),
  name: string(name='Name', position='Query'),
  secretList?: [ string ](name='SecretList', position='Query'),
  statefulSet?: string(name='StatefulSet', position='Query'),
}

model CreateDeployConfigResponseBody = {
  code?: int32(name='Code'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    name?: string(name='Name'),
    schemaId?: long(name='SchemaId'),
  }(name='Result'),
}

model CreateDeployConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeployConfigResponseBody(name='body'),
}

async function createDeployConfig(request: CreateDeployConfigRequest): CreateDeployConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeployConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateEciConfigRequest {
  appEnvId?: long(name='AppEnvId', position='Query'),
  eipBandwidth?: int32(name='EipBandwidth', position='Query'),
  enableEciSchedulePolicy?: boolean(name='EnableEciSchedulePolicy', position='Query'),
  mirrorCache?: boolean(name='MirrorCache', position='Query'),
  normalInstanceLimit?: int32(name='NormalInstanceLimit', position='Query'),
  scheduleVirtualNode?: boolean(name='ScheduleVirtualNode', position='Query'),
}

model CreateEciConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model CreateEciConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEciConfigResponseBody(name='body'),
}

async function createEciConfig(request: CreateEciConfigRequest): CreateEciConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEciConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateEnvironmentRequest {
  appId: long(name='AppId', position='Query'),
  appSchemaId: long(name='AppSchemaId', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  envName: string(name='EnvName', position='Query'),
  envType: int32(name='EnvType', position='Query'),
  region: string(name='Region', position='Query'),
  replicas: int32(name='Replicas', position='Query'),
}

model CreateEnvironmentResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appEnvId?: long(name='AppEnvId'),
  }(name='Result'),
}

model CreateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEnvironmentResponseBody(name='body'),
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model CreateNodeLabelRequest {
  clusterId: string(name='ClusterId', position='Query'),
  labelKey: string(name='LabelKey', position='Query'),
  labelValue: string(name='LabelValue', position='Query'),
}

model CreateNodeLabelResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    clusterId?: string(name='ClusterId'),
    id?: long(name='Id'),
    labelKey?: string(name='LabelKey'),
    labelValue?: string(name='LabelValue'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateNodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNodeLabelResponseBody(name='body'),
}

async function createNodeLabel(request: CreateNodeLabelRequest): CreateNodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNodeLabel', 'POST', '/', 'json', false, 'json', request);
}

model CreatePersistentVolumeRequest {
  accessModes: string(name='AccessModes', position='Body'),
  capacity: string(name='Capacity', position='Body'),
  clusterInstanceId: string(name='ClusterInstanceId', position='Body'),
  mountDir?: string(name='MountDir', position='Body'),
  mountTargetDomain: string(name='MountTargetDomain', position='Body'),
  NFSVersion: string(name='NFSVersion', position='Body'),
  name: string(name='Name', position='Body'),
  nasType?: string(name='NasType', example='NFS', position='Body'),
  reclaimPolicy: string(name='ReclaimPolicy', position='Body'),
  storageClass: string(name='StorageClass', position='Body'),
}

model CreatePersistentVolumeResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    persistentVolumeId?: long(name='PersistentVolumeId'),
  }(name='Result'),
}

model CreatePersistentVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePersistentVolumeResponseBody(name='body'),
}

async function createPersistentVolume(request: CreatePersistentVolumeRequest): CreatePersistentVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePersistentVolume', 'POST', '/', 'json', true, 'form', request);
}

model CreatePersistentVolumeClaimRequest {
  accessModes: string(name='AccessModes', position='Query'),
  appId: long(name='AppId', position='Query'),
  capacity: string(name='Capacity', position='Query'),
  envId: long(name='EnvId', position='Query'),
  name: string(name='Name', position='Query'),
  storageClass: string(name='StorageClass', position='Query'),
}

model CreatePersistentVolumeClaimResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    persistentVolumeClaimId?: long(name='PersistentVolumeClaimId'),
  }(name='Result'),
}

model CreatePersistentVolumeClaimResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePersistentVolumeClaimResponseBody(name='body'),
}

async function createPersistentVolumeClaim(request: CreatePersistentVolumeClaimRequest): CreatePersistentVolumeClaimResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePersistentVolumeClaim', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceRequest {
  envId: long(name='EnvId', position='Query'),
  headless?: boolean(name='Headless', position='Query'),
  k8sServiceId: string(name='K8sServiceId', position='Query'),
  name: string(name='Name', position='Query'),
  portMappings: [ 
    {
      name: string(name='Name'),
      nodePort?: int32(name='NodePort'),
      port: int32(name='Port'),
      protocol: string(name='Protocol'),
      targetPort: string(name='TargetPort'),
    }
  ](name='PortMappings', position='Body'),
  serviceType: string(name='ServiceType', position='Query'),
}

model CreateServiceResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    serviceId?: long(name='ServiceId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateService', 'POST', '/', 'json', true, 'form', request);
}

model CreateSlbAPRequest {
  cookieTimeout?: int32(name='CookieTimeout', position='Query'),
  envId: long(name='EnvId', position='Query'),
  establishedTimeout?: int32(name='EstablishedTimeout', position='Query'),
  listenerPort: int32(name='ListenerPort', position='Query'),
  name: string(name='Name', position='Query'),
  protocol: string(name='Protocol', position='Query'),
  realServerPort: int32(name='RealServerPort', position='Query'),
  slbId: string(name='SlbId', position='Query'),
  sslCertId?: string(name='SslCertId', position='Query'),
  stickySession?: int32(name='StickySession', position='Query'),
}

model CreateSlbAPResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    slbAPId?: long(name='SlbAPId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateSlbAPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSlbAPResponseBody(name='body'),
}

async function createSlbAP(request: CreateSlbAPRequest): CreateSlbAPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSlbAP', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppDetailRequest {
  appId: long(name='AppId', position='Query'),
  force: boolean(name='Force', position='Query'),
}

model DeleteAppDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeleteAppDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppDetailResponseBody(name='body'),
}

async function deleteAppDetail(request: DeleteAppDetailRequest): DeleteAppDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppDetail', 'GET', '/', 'json', false, 'json', request);
}

model DeleteAppEnvironmentRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  force: boolean(name='Force', position='Query'),
}

model DeleteAppEnvironmentResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeleteAppEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppEnvironmentResponseBody(name='body'),
}

async function deleteAppEnvironment(request: DeleteAppEnvironmentRequest): DeleteAppEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppGroupRequest {
  force: boolean(name='Force', position='Query'),
  groupId: long(name='GroupId', position='Query'),
}

model DeleteAppGroupResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeleteAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppGroupResponseBody(name='body'),
}

async function deleteAppGroup(request: DeleteAppGroupRequest): DeleteAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppResourceAllocRequest {
  appEnvId: long(name='AppEnvId', position='Query'),
}

model DeleteAppResourceAllocResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAppResourceAllocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResourceAllocResponseBody(name='body'),
}

async function deleteAppResourceAlloc(request: DeleteAppResourceAllocRequest): DeleteAppResourceAllocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppResourceAlloc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
}

model DeleteClusterResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    nonsense?: int32(name='Nonsense'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5xxxxxxx', position='Body'),
  DBName: string(name='DBName', example='testdb01', position='Body'),
}

model DeleteDatabaseResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='07F6177E-6DE4-408A-BB4F-0723301340F3'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeployConfigRequest {
  schemaId: long(name='SchemaId', position='Query'),
}

model DeleteDeployConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeleteDeployConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeployConfigResponseBody(name='body'),
}

async function deleteDeployConfig(request: DeleteDeployConfigRequest): DeleteDeployConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeployConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNodeLabelRequest {
  clusterId: string(name='ClusterId', position='Query'),
  force: boolean(name='Force', position='Query'),
  labelKey: string(name='LabelKey', position='Query'),
  labelValue: string(name='LabelValue', position='Query'),
}

model DeleteNodeLabelResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteNodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNodeLabelResponseBody(name='body'),
}

async function deleteNodeLabel(request: DeleteNodeLabelRequest): DeleteNodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNodeLabel', 'POST', '/', 'json', false, 'json', request);
}

model DeletePersistentVolumeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Body'),
  persistentVolumeName: string(name='PersistentVolumeName', position='Body'),
}

model DeletePersistentVolumeResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeletePersistentVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePersistentVolumeResponseBody(name='body'),
}

async function deletePersistentVolume(request: DeletePersistentVolumeRequest): DeletePersistentVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePersistentVolume', 'POST', '/', 'json', true, 'form', request);
}

model DeletePersistentVolumeClaimRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  persistentVolumeClaimName: string(name='PersistentVolumeClaimName', position='Query'),
}

model DeletePersistentVolumeClaimResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model DeletePersistentVolumeClaimResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePersistentVolumeClaimResponseBody(name='body'),
}

async function deletePersistentVolumeClaim(request: DeletePersistentVolumeClaimRequest): DeletePersistentVolumeClaimResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePersistentVolumeClaim', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRdsAccountRequest {
  accountName: string(name='AccountName', example='test1', position='Body'),
  dbInstanceId: string(name='DbInstanceId', example='rm-uf6wjk5xxxxxxx', position='Body'),
}

model DeleteRdsAccountResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='91E855E5-7E80-4955-929B-C74EE1D38C66'),
  result?: {
    requestId?: string(name='RequestId', example='91E855E5-7E80-4955-929B-C74EE1D38C66'),
  }(name='Result'),
}

model DeleteRdsAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRdsAccountResponseBody(name='body'),
}

async function deleteRdsAccount(request: DeleteRdsAccountRequest): DeleteRdsAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRdsAccount', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServiceRequest {
  serviceId: long(name='ServiceId', position='Query'),
}

model DeleteServiceResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSlbAPRequest {
  slbAPId: long(name='SlbAPId', position='Query'),
}

model DeleteSlbAPResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSlbAPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSlbAPResponseBody(name='body'),
}

async function deleteSlbAP(request: DeleteSlbAPRequest): DeleteSlbAPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSlbAP', 'POST', '/', 'json', false, 'json', request);
}

model DeployAppRequest {
  armsFlag?: boolean(name='ArmsFlag', position='Query'),
  containerImageList?: [ string ](name='ContainerImageList', position='Query'),
  defaultPacketOfAppGroup?: string(name='DefaultPacketOfAppGroup', position='Query'),
  deployPacketId?: long(name='DeployPacketId', position='Query'),
  deployPacketUrl?: string(name='DeployPacketUrl', position='Query'),
  description?: string(name='Description', position='Query'),
  envId: long(name='EnvId', position='Query'),
  initContainerImageList?: [ string ](name='InitContainerImageList', position='Query'),
  name: string(name='Name', position='Query'),
  pauseType?: string(name='PauseType', position='Query'),
  totalPartitions: int32(name='TotalPartitions', position='Query'),
  updateStrategyType?: string(name='UpdateStrategyType', position='Query'),
}

model DeployAppResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    admitted?: boolean(name='Admitted'),
    businessCode?: string(name='BusinessCode'),
    deployOrderId?: long(name='DeployOrderId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DeployAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployAppResponseBody(name='body'),
}

async function deployApp(request: DeployAppRequest): DeployAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppDetailRequest {
  appId: long(name='AppId', position='Query'),
}

model DescribeAppDetailResponseBody = {
  code?: long(name='Code'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    appStateType?: string(name='AppStateType'),
    bizName?: string(name='BizName'),
    bizTitle?: string(name='BizTitle'),
    deployType?: string(name='DeployType'),
    description?: string(name='Description'),
    language?: string(name='Language'),
    middleWareInfoList?: [ 
      {
        appId?: long(name='AppId'),
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }
    ](name='MiddleWareInfoList'),
    operatingSystem?: string(name='OperatingSystem'),
    serviceType?: string(name='ServiceType'),
    title?: string(name='Title'),
    userRoles?: [ 
      {
        realName?: string(name='RealName'),
        roleName?: string(name='RoleName'),
        userId?: string(name='UserId'),
        userType?: string(name='UserType'),
      }
    ](name='UserRoles'),
  }(name='Result'),
}

model DescribeAppDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppDetailResponseBody(name='body'),
}

async function describeAppDetail(request: DescribeAppDetailRequest): DescribeAppDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppEnvDeployBaselineRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
}

model DescribeAppEnvDeployBaselineResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    createTime?: string(name='CreateTime'),
    envId?: long(name='EnvId'),
    packetComment?: string(name='PacketComment'),
    packetId?: long(name='PacketId'),
    packetUrl?: string(name='PacketUrl'),
    schemaId?: long(name='SchemaId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeAppEnvDeployBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppEnvDeployBaselineResponseBody(name='body'),
}

async function describeAppEnvDeployBaseline(request: DescribeAppEnvDeployBaselineRequest): DescribeAppEnvDeployBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppEnvDeployBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppEnvironmentDetailRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
}

model DescribeAppEnvironmentDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    appSchemaId?: long(name='AppSchemaId'),
    envId?: long(name='EnvId'),
    envName?: string(name='EnvName'),
    envType?: int32(name='EnvType'),
    envTypeName?: string(name='EnvTypeName'),
    region?: string(name='Region'),
    replicas?: int32(name='Replicas'),
  }(name='Result'),
}

model DescribeAppEnvironmentDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppEnvironmentDetailResponseBody(name='body'),
}

async function describeAppEnvironmentDetail(request: DescribeAppEnvironmentDetailRequest): DescribeAppEnvironmentDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppEnvironmentDetail', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAppGroupDeploySettingRequest {
  appGroupId: long(name='AppGroupId', position='Query'),
  envType: string(name='EnvType', position='Query'),
}

model DescribeAppGroupDeploySettingResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    defaultPacketComment?: string(name='DefaultPacketComment'),
    defaultPacketId?: long(name='DefaultPacketId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeAppGroupDeploySettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppGroupDeploySettingResponseBody(name='body'),
}

async function describeAppGroupDeploySetting(request: DescribeAppGroupDeploySettingRequest): DescribeAppGroupDeploySettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppGroupDeploySetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppMonitorMetricRequest {
  appId: long(name='AppId', minimum=1, maximum=9223372036854775807, position='Query'),
  deployOrderId?: string(name='DeployOrderId', position='Query'),
  endTime: long(name='EndTime', minimum=1, maximum=4783160922000, position='Query'),
  envId: long(name='EnvId', minimum=1, maximum=9223372036854775807, position='Query'),
  metric: string(name='Metric', position='Query'),
  podName?: string(name='PodName', position='Query'),
  startTime: long(name='StartTime', minimum=1, maximum=4783160922000, position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeAppMonitorMetricResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      categories?: [ string ](name='Categories'),
      data?: [ float ](name='Data'),
      name?: string(name='Name'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeAppMonitorMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppMonitorMetricResponseBody(name='body'),
}

async function describeAppMonitorMetric(request: DescribeAppMonitorMetricRequest): DescribeAppMonitorMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppMonitorMetric', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppResourceAllocRequest {
  appEnvId: long(name='AppEnvId', position='Query'),
}

model DescribeAppResourceAllocResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appEnvId?: long(name='AppEnvId'),
    appId?: long(name='AppId'),
    clusterId?: string(name='ClusterId'),
    id?: long(name='Id'),
    resourceDef?: string(name='ResourceDef'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeAppResourceAllocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppResourceAllocResponseBody(name='body'),
}

async function describeAppResourceAlloc(request: DescribeAppResourceAllocRequest): DescribeAppResourceAllocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppResourceAlloc', 'GET', '/', 'json', false, 'json', request);
}

model DescribeClusterDetailRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
}

model DescribeClusterDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    basicInfo?: {
      businessCode?: string(name='BusinessCode'),
      clusterId?: long(name='ClusterId'),
      clusterInstanceId?: string(name='ClusterInstanceId'),
      clusterName?: string(name='ClusterName'),
      ecsIds?: [ string ](name='EcsIds'),
      envType?: string(name='EnvType'),
      hasInstallArmsPilot?: boolean(name='HasInstallArmsPilot'),
      hasInstallLogController?: boolean(name='HasInstallLogController'),
      installArmsInProcess?: boolean(name='InstallArmsInProcess'),
      installLogInProcess?: boolean(name='InstallLogInProcess'),
      mainUserId?: string(name='MainUserId'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      userNick?: string(name='UserNick'),
      vpcId?: string(name='VpcId'),
      vswitchs?: [ string ](name='Vswitchs'),
    }(name='BasicInfo'),
    instanceInfo?: {
      allocatePodCount?: int32(name='AllocatePodCount'),
      allocatedPodInfoList?: [ 
        {
          appId?: long(name='AppId'),
          appName?: string(name='AppName'),
          cupRequest?: string(name='CupRequest'),
          envId?: long(name='EnvId'),
          envName?: string(name='EnvName'),
          memRequest?: string(name='MemRequest'),
          podCount?: int32(name='PodCount'),
        }
      ](name='AllocatedPodInfoList'),
      appCount?: int32(name='AppCount'),
      availablePodInfoList?: [ 
        {
          availablePodCount?: int32(name='AvailablePodCount'),
          cupRequest?: string(name='CupRequest'),
          memRequest?: string(name='MemRequest'),
        }
      ](name='AvailablePodInfoList'),
    }(name='InstanceInfo'),
    netInfo?: {
      netPlugType?: string(name='NetPlugType'),
      prodCIDR?: string(name='ProdCIDR'),
      serviceCIDR?: string(name='ServiceCIDR'),
    }(name='NetInfo'),
    nodeWorkLoadList?: [ 
      {
        appPodCount?: int32(name='AppPodCount'),
        cpuRequest?: string(name='CpuRequest'),
        cpuTotal?: string(name='CpuTotal'),
        cpuUse?: string(name='CpuUse'),
        instanceId?: string(name='InstanceId'),
        memRequest?: string(name='MemRequest'),
        memTotal?: string(name='MemTotal'),
        memUse?: string(name='MemUse'),
        nodeName?: string(name='NodeName'),
        podCount?: int32(name='PodCount'),
        ready?: boolean(name='Ready'),
        unschedulable?: boolean(name='Unschedulable'),
      }
    ](name='NodeWorkLoadList'),
    workLoad?: {
      allNodeCount?: int32(name='AllNodeCount'),
      allocateAllPodCount?: int32(name='AllocateAllPodCount'),
      allocateAppPodCount?: int32(name='AllocateAppPodCount'),
      cpuCapacityTotal?: string(name='CpuCapacityTotal'),
      cpuLevel?: string(name='CpuLevel'),
      cpuRequest?: string(name='CpuRequest'),
      cpuRequestPercent?: string(name='CpuRequestPercent'),
      cpuTotal?: string(name='CpuTotal'),
      cpuUse?: string(name='CpuUse'),
      cpuUsePercent?: string(name='CpuUsePercent'),
      memCapacityTotal?: string(name='MemCapacityTotal'),
      memLevel?: string(name='MemLevel'),
      memRequest?: string(name='MemRequest'),
      memRequestPercent?: string(name='MemRequestPercent'),
      memTotal?: string(name='MemTotal'),
      memUse?: string(name='MemUse'),
      memUsePercent?: string(name='MemUsePercent'),
    }(name='WorkLoad'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetail(request: DescribeClusterDetailRequest): DescribeClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabasesRequest {
  instanceId: string(name='InstanceId', example='rm-ul9wjk5xxxxxxx', position='Query'),
}

model DescribeDatabasesResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='79a8ab31-32ce-4d27-a006-339a5eae3b6e'),
  result?: {
    databases?: [ 
      {
        accounts?: [ 
          {
            account?: string(name='Account', example='test'),
            accountPrivilege?: string(name='AccountPrivilege', example='DMLOnly'),
            accountPrivilegeDetail?: string(name='AccountPrivilegeDetail', example='SELECT'),
          }
        ](name='Accounts'),
        characterSetName?: string(name='CharacterSetName', example='utf8'),
        DBDescription?: string(name='DBDescription'),
        DBInstanceId?: string(name='DBInstanceId', example='rm-ul9wjk5xxxxxxx'),
        DBName?: string(name='DBName', example='testDBmm'),
        DBStatus?: string(name='DBStatus', example='Creating'),
        engine?: string(name='Engine', example='MySQL'),
      }
    ](name='Databases'),
  }(name='Result'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabases', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeployOrderDetailRequest {
  deployOrderId: long(name='DeployOrderId', position='Query'),
}

model DescribeDeployOrderDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appInstanceType?: string(name='AppInstanceType'),
    currentPartitionNum?: int32(name='CurrentPartitionNum'),
    deployOrderId?: long(name='DeployOrderId'),
    deployPauseType?: string(name='DeployPauseType'),
    deployPauseTypeName?: string(name='DeployPauseTypeName'),
    deployType?: string(name='DeployType'),
    deployTypeName?: string(name='DeployTypeName'),
    description?: string(name='Description'),
    elapsedTime?: int32(name='ElapsedTime'),
    endTime?: string(name='EndTime'),
    envId?: long(name='EnvId'),
    envType?: string(name='EnvType'),
    failureRate?: string(name='FailureRate'),
    finishAppInstanceCt?: int32(name='FinishAppInstanceCt'),
    name?: string(name='Name'),
    partitionType?: string(name='PartitionType'),
    partitionTypeName?: string(name='PartitionTypeName'),
    result?: int32(name='Result'),
    resultName?: string(name='ResultName'),
    schemaId?: long(name='SchemaId'),
    startTime?: string(name='StartTime'),
    status?: int32(name='Status'),
    statusName?: string(name='StatusName'),
    totalAppInstanceCt?: int32(name='TotalAppInstanceCt'),
    totalPartitions?: int32(name='TotalPartitions'),
    userId?: string(name='UserId'),
    userNick?: string(name='UserNick'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeDeployOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployOrderDetailResponseBody(name='body'),
}

async function describeDeployOrderDetail(request: DescribeDeployOrderDetailRequest): DescribeDeployOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEciConfigRequest {
  appEnvId?: long(name='AppEnvId', position='Query'),
}

model DescribeEciConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appEnvId?: long(name='AppEnvId'),
    eipBandwidth?: int32(name='EipBandwidth'),
    enableEciSchedulePolicy?: boolean(name='EnableEciSchedulePolicy'),
    mirrorCache?: boolean(name='MirrorCache'),
    normalInstanceLimit?: int32(name='NormalInstanceLimit'),
    scheduleVirtualNode?: boolean(name='ScheduleVirtualNode'),
  }(name='Result'),
}

model DescribeEciConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEciConfigResponseBody(name='body'),
}

async function describeEciConfig(request: DescribeEciConfigRequest): DescribeEciConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEciConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEventMonitorListRequest {
  appId: long(name='AppId', minimum=1, maximum=9223372036854775807, position='Query'),
  endTime: long(name='EndTime', minimum=1, maximum=4783160922000, position='Query'),
  envId: long(name='EnvId', minimum=1, maximum=9223372036854775807, position='Query'),
  eventLevel?: string(name='EventLevel', position='Query'),
  eventType?: string(name='EventType', position='Query'),
  pageNum: int32(name='PageNum', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  podName?: string(name='PodName', position='Query'),
  startTime: long(name='StartTime', minimum=1, maximum=4783160922000, position='Query'),
}

model DescribeEventMonitorListResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      eventTime?: string(name='EventTime'),
      hostName?: string(name='HostName'),
      kind?: string(name='Kind'),
      level?: string(name='Level'),
      message?: string(name='Message'),
      nameSpace?: string(name='NameSpace'),
      podName?: string(name='PodName'),
      reason?: string(name='Reason'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeEventMonitorListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventMonitorListResponseBody(name='body'),
}

async function describeEventMonitorList(request: DescribeEventMonitorListRequest): DescribeEventMonitorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventMonitorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobLogRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  podName: string(name='PodName', position='Query'),
}

model DescribeJobLogResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    envId?: long(name='EnvId'),
    events?: [ 
      {
        action?: string(name='Action'),
        count?: int32(name='Count'),
        eventTime?: string(name='EventTime'),
        firstTimestamp?: string(name='FirstTimestamp'),
        lastTimestamp?: string(name='LastTimestamp'),
        mesage?: string(name='Mesage'),
        reason?: string(name='Reason'),
        type?: string(name='Type'),
      }
    ](name='Events'),
    jobLog?: string(name='JobLog'),
    podName?: string(name='PodName'),
  }(name='Result'),
}

model DescribeJobLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeJobLogResponseBody(name='body'),
}

async function describeJobLog(request: DescribeJobLogRequest): DescribeJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobLog', 'GET', '/', 'json', false, 'json', request);
}

model DescribePodContainerLogListRequest {
  appId: long(name='AppId', minimum=1, maximum=9223372036854775807, position='Query'),
  envId: long(name='EnvId', minimum=1, maximum=9223372036854775807, position='Query'),
  line?: int32(name='Line', position='Query'),
  podName: string(name='PodName', position='Query'),
}

model DescribePodContainerLogListResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    containerLogList?: [ 
      {
        containerName?: string(name='ContainerName'),
        content?: string(name='Content'),
        podName?: string(name='PodName'),
      }
    ](name='ContainerLogList'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribePodContainerLogListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePodContainerLogListResponseBody(name='body'),
}

async function describePodContainerLogList(request: DescribePodContainerLogListRequest): DescribePodContainerLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePodContainerLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePodEventsRequest {
  appInstId: string(name='AppInstId', position='Query'),
  deployOrderId: long(name='DeployOrderId', position='Query'),
}

model DescribePodEventsResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    deployOrderName?: string(name='DeployOrderName'),
    podEvents?: [ 
      {
        action?: string(name='Action'),
        count?: int32(name='Count'),
        eventTime?: string(name='EventTime'),
        firstTimestamp?: string(name='FirstTimestamp'),
        lastTimestamp?: string(name='LastTimestamp'),
        message?: string(name='Message'),
        reason?: string(name='Reason'),
        type?: string(name='Type'),
      }
    ](name='PodEvents'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribePodEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePodEventsResponseBody(name='body'),
}

async function describePodEvents(request: DescribePodEventsRequest): DescribePodEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePodEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribePodLogRequest {
  appInstId: string(name='AppInstId', position='Body'),
  deployOrderId: long(name='DeployOrderId', position='Body'),
}

model DescribePodLogResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    deployOrderName?: string(name='DeployOrderName'),
    deployStepList?: [ 
      {
        status?: string(name='Status'),
        stepCode?: string(name='StepCode'),
        stepLog?: string(name='StepLog'),
        stepName?: string(name='StepName'),
      }
    ](name='DeployStepList'),
    envTypeName?: string(name='EnvTypeName'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribePodLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePodLogResponseBody(name='body'),
}

async function describePodLog(request: DescribePodLogRequest): DescribePodLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePodLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRdsAccountsRequest {
  accountName?: string(name='AccountName', example='test', position='Query'),
  dbInstanceId: string(name='DbInstanceId', example='rm-ul9wjk5xxxxxxx', position='Query'),
}

model DescribeRdsAccountsResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='79a8ab31-32ce-4d27-a006-339a5eae3b6e'),
  result?: {
    accounts?: [ 
      {
        accountDescription?: string(name='AccountDescription'),
        accountName?: string(name='AccountName', example='test'),
        accountStatus?: string(name='AccountStatus', example='Available'),
        accountType?: string(name='AccountType', example='Normal'),
        DBInstanceId?: string(name='DBInstanceId', example='rm-ul9wjk5xxxxxxx'),
        databasePrivileges?: [ 
          {
            accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
            accountPrivilegeDetail?: string(name='AccountPrivilegeDetail', example='SELECT,INSERT'),
            DBName?: string(name='DBName', example='test'),
          }
        ](name='DatabasePrivileges'),
        privExceeded?: string(name='PrivExceeded', example='0'),
      }
    ](name='Accounts'),
  }(name='Result'),
}

model DescribeRdsAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsAccountsResponseBody(name='body'),
}

async function describeRdsAccounts(request: DescribeRdsAccountsRequest): DescribeRdsAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsAccounts', 'GET', '/', 'json', false, 'json', request);
}

model DescribeServiceDetailRequest {
  serviceId: long(name='ServiceId', position='Query'),
}

model DescribeServiceDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    clusterIP?: string(name='ClusterIP'),
    envId?: long(name='EnvId'),
    headless?: boolean(name='Headless'),
    k8sServiceId?: string(name='K8sServiceId'),
    name?: string(name='Name'),
    portMappings?: [ 
      {
        name?: string(name='Name'),
        nodePort?: int32(name='NodePort'),
        port?: int32(name='Port'),
        protocol?: string(name='Protocol'),
        targetPort?: string(name='TargetPort'),
      }
    ](name='PortMappings'),
    serviceId?: long(name='ServiceId'),
    serviceType?: string(name='ServiceType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceDetailResponseBody(name='body'),
}

async function describeServiceDetail(request: DescribeServiceDetailRequest): DescribeServiceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlbAPDetailRequest {
  slbAPId: long(name='SlbAPId', position='Query'),
}

model DescribeSlbAPDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    appId?: long(name='AppId'),
    cookieTimeout?: int32(name='CookieTimeout'),
    envId?: long(name='EnvId'),
    establishedTimeout?: int32(name='EstablishedTimeout'),
    listenerPort?: int32(name='ListenerPort'),
    name?: string(name='Name'),
    networkMode?: string(name='NetworkMode'),
    protocol?: string(name='Protocol'),
    realServerPort?: int32(name='RealServerPort'),
    slbAPId?: long(name='SlbAPId'),
    slbId?: string(name='SlbId'),
    slbIp?: string(name='SlbIp'),
    sslCertId?: string(name='SslCertId'),
    stickySession?: int32(name='StickySession'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSlbAPDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlbAPDetailResponseBody(name='body'),
}

async function describeSlbAPDetail(request: DescribeSlbAPDetailRequest): DescribeSlbAPDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlbAPDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetInstTransInfoRequest {
  aliyunCommodityCode: string(name='aliyunCommodityCode', position='Body'),
  aliyunEquipId: string(name='aliyunEquipId', position='Body'),
  aliyunUid: string(name='aliyunUid', position='Body'),
}

model GetInstTransInfoResponseBody = {
  chargeType?: string(name='chargeType'),
  endTime?: long(name='endTime'),
  instanceId?: string(name='instanceId'),
  isAutoRenew?: boolean(name='isAutoRenew'),
  renewCycle?: int32(name='renewCycle'),
  startTime?: long(name='startTime'),
}

model GetInstTransInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstTransInfoResponseBody(name='body'),
}

async function getInstTransInfo(request: GetInstTransInfoRequest): GetInstTransInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstTransInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetRdsBackUpRequest {
  backupId?: string(name='BackupId', example='327329803', position='Body'),
  backupType?: string(name='BackupType', example='FullBackup', position='Body'),
  dbInstanceId: string(name='DbInstanceId', example='rm-ul9wjk5xxxxxxx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='30', position='Body'),
}

model GetRdsBackUpResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='79a8ab31-32ce-4d27-a006-339a5eae3b6e'),
  result?: {
    items?: [ 
      {
        backupDBNames?: string(name='BackupDBNames', example='spdb,sys,test20181221,test-20181228'),
        backupEndTime?: string(name='BackupEndTime', example='2019-02-13T12:20:00Z'),
        backupExtractionStatus?: string(name='BackupExtractionStatus', example='test'),
        backupId?: string(name='BackupId', example='321020562'),
        backupLocation?: string(name='BackupLocation', example='test'),
        backupMethod?: string(name='BackupMethod', example='Physical'),
        backupMode?: string(name='BackupMode', example='Automated'),
        backupScale?: string(name='BackupScale', example='test'),
        backupSize?: long(name='BackupSize', example='2167808'),
        backupStartTime?: string(name='BackupStartTime', example='2019-02-03T12:20:00Z'),
        backupStatus?: string(name='BackupStatus', example='Success'),
        backupType?: string(name='BackupType', example='FullBackup'),
        DBInstanceId?: string(name='DBInstanceId', example='rm-ul9wjk5xxxxxxx'),
        hostInstanceID?: string(name='HostInstanceID', example='5882781'),
        metaStatus?: string(name='MetaStatus', example='OK'),
        storeStatus?: string(name='StoreStatus', example='Disabled'),
        totalBackupSize?: long(name='TotalBackupSize', example='00000'),
      }
    ](name='Items'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageRecordCount?: string(name='PageRecordCount', example='30'),
    totalBackupSize?: long(name='TotalBackupSize', example='8672256'),
    totalRecordCount?: string(name='TotalRecordCount', example='100'),
  }(name='Result'),
}

model GetRdsBackUpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRdsBackUpResponseBody(name='body'),
}

async function getRdsBackUp(request: GetRdsBackUpRequest): GetRdsBackUpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRdsBackUp', 'POST', '/', 'json', true, 'form', request);
}

model GrantDbToAccountRequest {
  accountName: string(name='AccountName', example='test', position='Body'),
  accountPrivilege: string(name='AccountPrivilege', example='ReadWrite', position='Body'),
  dbInstanceId: string(name='DbInstanceId', example='rm-ul9wjk5xxxxxxxxxx', position='Body'),
  dbName: string(name='DbName', example='testDB', position='Body'),
}

model GrantDbToAccountResponseBody = {
  code?: int32(name='Code', example='0'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId', example='79a8ab31-32ce-4d27-a006-339a5eae3b6e'),
}

model GrantDbToAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantDbToAccountResponseBody(name='body'),
}

async function grantDbToAccount(request: GrantDbToAccountRequest): GrantDbToAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantDbToAccount', 'POST', '/', 'json', true, 'form', request);
}

model ListAppRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListAppResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      appStateType?: string(name='AppStateType'),
      bizName?: string(name='BizName'),
      bizTitle?: string(name='BizTitle'),
      deployType?: string(name='DeployType'),
      description?: string(name='Description'),
      language?: string(name='Language'),
      middleWareList?: [ 
        {
          appId?: long(name='AppId'),
          code?: int32(name='Code'),
          name?: string(name='Name'),
        }
      ](name='MiddleWareList'),
      operatingSystem?: string(name='OperatingSystem'),
      serviceType?: string(name='ServiceType'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppResponseBody(name='body'),
}

async function listApp(request: ListAppRequest): ListAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApp', 'GET', '/', 'json', false, 'json', request);
}

model ListAppCmsGroupsRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=20, maximum=20, position='Query'),
}

model ListAppCmsGroupsResponseBody = {
  code?: int32(name='Code'),
  data?: [ string ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppCmsGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppCmsGroupsResponseBody(name='body'),
}

async function listAppCmsGroups(request: ListAppCmsGroupsRequest): ListAppCmsGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppCmsGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListAppEnvironmentRequest {
  appId: long(name='AppId', position='Query'),
  envName?: string(name='EnvName', position='Query'),
  envType?: int32(name='EnvType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListAppEnvironmentResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      appSchemaId?: long(name='AppSchemaId'),
      envId?: long(name='EnvId'),
      envName?: string(name='EnvName'),
      envType?: int32(name='EnvType'),
      envTypeName?: string(name='EnvTypeName'),
      region?: string(name='Region'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppEnvironmentResponseBody(name='body'),
}

async function listAppEnvironment(request: ListAppEnvironmentRequest): ListAppEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppEnvironment', 'GET', '/', 'json', false, 'json', request);
}

model ListAppGroupRequest {
  bizCode: string(name='BizCode', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListAppGroupResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      bizName?: string(name='BizName'),
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppGroupResponseBody(name='body'),
}

async function listAppGroup(request: ListAppGroupRequest): ListAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListAppGroupMappingRequest {
  bizCode: string(name='BizCode', position='Query'),
  name: string(name='Name', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListAppGroupMappingResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      groupId?: long(name='GroupId'),
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppGroupMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppGroupMappingResponseBody(name='body'),
}

async function listAppGroupMapping(request: ListAppGroupMappingRequest): ListAppGroupMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppGroupMapping', 'POST', '/', 'json', false, 'json', request);
}

model ListAppInstanceRequest {
  appId: long(name='AppId', position='Body'),
  envId: long(name='EnvId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model ListAppInstanceResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appInstanceId?: string(name='AppInstanceId'),
      createTime?: string(name='CreateTime'),
      health?: string(name='Health'),
      hostIp?: string(name='HostIp'),
      limits?: string(name='Limits'),
      podIp?: string(name='PodIp'),
      requests?: string(name='Requests'),
      restartCount?: int32(name='RestartCount'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      version?: string(name='Version'),
    }
  ](name='Data'),
  errMsg?: string(name='ErrMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppInstanceResponseBody(name='body'),
}

async function listAppInstance(request: ListAppInstanceRequest): ListAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstance', 'POST', '/', 'json', true, 'form', request);
}

model ListAppResourceAllocsRequest {
  appEnvId?: long(name='AppEnvId', position='Query'),
  appId?: long(name='AppId', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListAppResourceAllocsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appEnvId?: long(name='AppEnvId'),
      appId?: long(name='AppId'),
      clusterId?: string(name='ClusterId'),
      id?: long(name='Id'),
      resourceDef?: string(name='ResourceDef'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAppResourceAllocsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppResourceAllocsResponseBody(name='body'),
}

async function listAppResourceAllocs(request: ListAppResourceAllocsRequest): ListAppResourceAllocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppResourceAllocs', 'GET', '/', 'json', false, 'json', request);
}

model ListAvailableClusterNodeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListAvailableClusterNodeResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      businessCode?: string(name='BusinessCode'),
      ecsConfiguration?: string(name='EcsConfiguration'),
      ecsCpu?: string(name='EcsCpu'),
      ecsEip?: string(name='EcsEip'),
      ecsExpiredTime?: string(name='EcsExpiredTime'),
      ecsLocalStorageCapacity?: string(name='EcsLocalStorageCapacity'),
      ecsMemory?: string(name='EcsMemory'),
      ecsOsType?: string(name='EcsOsType'),
      ecsPrivateIp?: string(name='EcsPrivateIp'),
      ecsPublicIp?: string(name='EcsPublicIp'),
      ecsZone?: string(name='EcsZone'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      instanceType?: string(name='InstanceType'),
      internetMaxBandwidthIn?: string(name='InternetMaxBandwidthIn'),
      internetMaxBandwidthOut?: string(name='InternetMaxBandwidthOut'),
      OSName?: string(name='OSName'),
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAvailableClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableClusterNodeResponseBody(name='body'),
}

async function listAvailableClusterNode(request: ListAvailableClusterNodeRequest): ListAvailableClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableClusterNode', 'GET', '/', 'json', false, 'json', request);
}

model ListClusterRequest {
  businessCode?: string(name='BusinessCode', position='Query'),
  envType?: string(name='EnvType', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListClusterResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      businessCode?: string(name='BusinessCode'),
      clusterTitle?: string(name='ClusterTitle'),
      createStatus?: string(name='CreateStatus'),
      ecsIds?: [ string ](name='EcsIds'),
      envType?: string(name='EnvType'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      keyPair?: string(name='KeyPair'),
      netPlug?: string(name='NetPlug'),
      password?: string(name='Password'),
      podCIDR?: string(name='PodCIDR'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      serviceCIDR?: string(name='ServiceCIDR'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vswitchIds?: [ string ](name='VswitchIds'),
      workLoadCpu?: string(name='WorkLoadCpu'),
      workLoadMem?: string(name='WorkLoadMem'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterResponseBody(name='body'),
}

async function listCluster(request: ListClusterRequest): ListClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCluster', 'GET', '/', 'json', false, 'json', request);
}

model ListClusterNodeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListClusterNodeResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      businessCode?: string(name='BusinessCode'),
      ecsConfiguration?: string(name='EcsConfiguration'),
      ecsCpu?: string(name='EcsCpu'),
      ecsEip?: string(name='EcsEip'),
      ecsExpiredTime?: string(name='EcsExpiredTime'),
      ecsLocalStorageCapacity?: string(name='EcsLocalStorageCapacity'),
      ecsMemory?: string(name='EcsMemory'),
      ecsOsType?: string(name='EcsOsType'),
      ecsPrivateIp?: string(name='EcsPrivateIp'),
      ecsPublicIp?: string(name='EcsPublicIp'),
      ecsZone?: string(name='EcsZone'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      instanceType?: string(name='InstanceType'),
      internetMaxBandwidthIn?: string(name='InternetMaxBandwidthIn'),
      internetMaxBandwidthOut?: string(name='InternetMaxBandwidthOut'),
      OSName?: string(name='OSName'),
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterNodeResponseBody(name='body'),
}

async function listClusterNode(request: ListClusterNodeRequest): ListClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterNode', 'GET', '/', 'json', false, 'json', request);
}

model ListDeployConfigRequest {
  appId: long(name='AppId', position='Query'),
  envType?: string(name='EnvType', position='Query'),
  id?: long(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
}

model ListDeployConfigResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      containerCodePath?: {
        codePath?: string(name='CodePath'),
      }(name='ContainerCodePath'),
      containerResourceLimit?: {
        cpu?: string(name='Cpu'),
        gpu?: string(name='Gpu'),
        memory?: string(name='Memory'),
        storage?: string(name='Storage'),
      }(name='ContainerResourceLimit'),
      containerResourceRequest?: {
        cpu?: string(name='Cpu'),
        gpu?: string(name='Gpu'),
        memory?: string(name='Memory'),
        storage?: string(name='Storage'),
      }(name='ContainerResourceRequest'),
      containerYamlConf?: {
        configMap?: string(name='ConfigMap'),
        configMapList?: [ string ](name='ConfigMapList'),
        cronJob?: string(name='CronJob'),
        deployment?: string(name='Deployment'),
        secretList?: [ string ](name='SecretList'),
        statefulSet?: string(name='StatefulSet'),
      }(name='ContainerYamlConf'),
      envType?: string(name='EnvType'),
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeployConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeployConfigResponseBody(name='body'),
}

async function listDeployConfig(request: ListDeployConfigRequest): ListDeployConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListDeployOrdersRequest {
  appId: long(name='AppId', position='Query'),
  deployCategory?: string(name='DeployCategory', position='Query'),
  deployType?: string(name='DeployType', position='Query'),
  endTimeGreaterThan?: string(name='EndTimeGreaterThan', position='Query'),
  endTimeGreaterThanOrEqualTo?: string(name='EndTimeGreaterThanOrEqualTo', position='Query'),
  endTimeLessThan?: string(name='EndTimeLessThan', position='Query'),
  endTimeLessThanOrEqualTo?: string(name='EndTimeLessThanOrEqualTo', position='Query'),
  envId?: long(name='EnvId', position='Query'),
  envType?: string(name='EnvType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  partitionType?: string(name='PartitionType', position='Query'),
  pauseType?: string(name='PauseType', position='Query'),
  resultList?: [ int32 ](name='ResultList', position='Body'),
  startTimeGreaterThan?: string(name='StartTimeGreaterThan', position='Query'),
  startTimeGreaterThanOrEqualTo?: string(name='StartTimeGreaterThanOrEqualTo', position='Query'),
  startTimeLessThan?: string(name='StartTimeLessThan', position='Query'),
  startTimeLessThanOrEqualTo?: string(name='StartTimeLessThanOrEqualTo', position='Query'),
  status?: int32(name='Status', position='Query'),
  statusList?: [ int32 ](name='StatusList', position='Body'),
}

model ListDeployOrdersResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appInstanceType?: string(name='AppInstanceType'),
      currentPartitionNum?: int32(name='CurrentPartitionNum'),
      deployOrderId?: long(name='DeployOrderId'),
      deployPauseType?: string(name='DeployPauseType'),
      deployPauseTypeName?: string(name='DeployPauseTypeName'),
      deployType?: string(name='DeployType'),
      deployTypeName?: string(name='DeployTypeName'),
      description?: string(name='Description'),
      elapsedTime?: int32(name='ElapsedTime'),
      endTime?: string(name='EndTime'),
      envId?: long(name='EnvId'),
      envType?: string(name='EnvType'),
      failureRate?: string(name='FailureRate'),
      finishAppInstanceCt?: int32(name='FinishAppInstanceCt'),
      name?: string(name='Name'),
      partitionType?: string(name='PartitionType'),
      partitionTypeName?: string(name='PartitionTypeName'),
      result?: int32(name='Result'),
      resultName?: string(name='ResultName'),
      schemaId?: long(name='SchemaId'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      statusName?: string(name='StatusName'),
      totalAppInstanceCt?: int32(name='TotalAppInstanceCt'),
      totalPartitions?: int32(name='TotalPartitions'),
      userId?: string(name='UserId'),
      userNick?: string(name='UserNick'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDeployOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeployOrdersResponseBody(name='body'),
}

async function listDeployOrders(request: ListDeployOrdersRequest): ListDeployOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployOrders', 'POST', '/', 'json', true, 'form', request);
}

model ListJobHistoriesRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  status: string(name='Status', position='Query'),
}

model ListJobHistoriesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      activeDeadlineSeconds?: int32(name='ActiveDeadlineSeconds'),
      backoffLimit?: int32(name='BackoffLimit'),
      completionTime?: string(name='CompletionTime'),
      completions?: int32(name='Completions'),
      failed?: int32(name='Failed'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      parallelism?: int32(name='Parallelism'),
      podList?: [ string ](name='PodList'),
      startTime?: string(name='StartTime'),
      succeeded?: int32(name='Succeeded'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListJobHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobHistoriesResponseBody(name='body'),
}

async function listJobHistories(request: ListJobHistoriesRequest): ListJobHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobHistories', 'GET', '/', 'json', false, 'json', request);
}

model ListNodeLabelBindingsRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  labelKey?: string(name='LabelKey', position='Query'),
  labelValue?: string(name='LabelValue', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListNodeLabelBindingsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      labelKey?: string(name='LabelKey'),
      labelValue?: string(name='LabelValue'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListNodeLabelBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeLabelBindingsResponseBody(name='body'),
}

async function listNodeLabelBindings(request: ListNodeLabelBindingsRequest): ListNodeLabelBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeLabelBindings', 'GET', '/', 'json', false, 'json', request);
}

model ListNodeLabelsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  labelKey?: string(name='LabelKey', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListNodeLabelsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId'),
      id?: long(name='Id'),
      labelKey?: string(name='LabelKey'),
      labelValue?: string(name='LabelValue'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListNodeLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeLabelsResponseBody(name='body'),
}

async function listNodeLabels(request: ListNodeLabelsRequest): ListNodeLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeLabels', 'POST', '/', 'json', false, 'json', request);
}

model ListPersistentVolumeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model ListPersistentVolumeResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      accessModes?: string(name='AccessModes'),
      capacity?: string(name='Capacity'),
      createTime?: string(name='CreateTime'),
      mountDir?: string(name='MountDir'),
      name?: string(name='Name'),
      pvcName?: string(name='PvcName'),
      reason?: string(name='Reason'),
      reclaimPolicy?: string(name='ReclaimPolicy'),
      status?: string(name='Status'),
      storageClass?: string(name='StorageClass'),
    }
  ](name='Data'),
  errMsg?: string(name='ErrMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPersistentVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPersistentVolumeResponseBody(name='body'),
}

async function listPersistentVolume(request: ListPersistentVolumeRequest): ListPersistentVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersistentVolume', 'POST', '/', 'json', true, 'form', request);
}

model ListPersistentVolumeClaimRequest {
  appId: long(name='AppId', position='Query'),
  envId: long(name='EnvId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListPersistentVolumeClaimResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      accessModes?: string(name='AccessModes'),
      capacity?: string(name='Capacity'),
      createTime?: string(name='CreateTime'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      storageClass?: string(name='StorageClass'),
      volumeName?: string(name='VolumeName'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPersistentVolumeClaimResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPersistentVolumeClaimResponseBody(name='body'),
}

async function listPersistentVolumeClaim(request: ListPersistentVolumeClaimRequest): ListPersistentVolumeClaimResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersistentVolumeClaim', 'POST', '/', 'json', false, 'json', request);
}

model ListPodsRequest {
  deployOrderId: long(name='DeployOrderId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  resultList?: [ int32 ](name='ResultList', position='Body'),
  statusList?: [ int32 ](name='StatusList', position='Body'),
}

model ListPodsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appInstanceId?: string(name='AppInstanceId'),
      deployOrderId?: long(name='DeployOrderId'),
      deployPartitionNum?: int32(name='DeployPartitionNum'),
      deploySteps?: [ 
        {
          status?: string(name='Status'),
          stepCode?: string(name='StepCode'),
          stepName?: string(name='StepName'),
        }
      ](name='DeploySteps'),
      groupName?: string(name='GroupName'),
      hostIp?: string(name='HostIp'),
      hostName?: string(name='HostName'),
      podIp?: string(name='PodIp'),
      region?: string(name='Region'),
      result?: int32(name='Result'),
      resultName?: string(name='ResultName'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      statusName?: string(name='StatusName'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPodsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPodsResponseBody(name='body'),
}

async function listPods(request: ListPodsRequest): ListPodsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPods', 'POST', '/', 'json', true, 'form', request);
}

model ListServicesRequest {
  appId: long(name='AppId', position='Query'),
  envId?: long(name='EnvId', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
}

model ListServicesResponseBody = {
  clusterIP?: string(name='ClusterIP'),
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      clusterIP?: string(name='ClusterIP'),
      envId?: long(name='EnvId'),
      headless?: boolean(name='Headless'),
      k8sServiceId?: string(name='K8sServiceId'),
      name?: string(name='Name'),
      portMappings?: [ 
        {
          name?: string(name='Name'),
          nodePort?: int32(name='NodePort'),
          port?: int32(name='Port'),
          protocol?: string(name='Protocol'),
          targetPort?: string(name='TargetPort'),
        }
      ](name='PortMappings'),
      serviceId?: long(name='ServiceId'),
      serviceType?: string(name='ServiceType'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', false, 'json', request);
}

model ListSlbAPsRequest {
  appId: long(name='AppId', position='Query'),
  envId?: long(name='EnvId', position='Query'),
  name?: string(name='Name', position='Query'),
  networkMode?: string(name='NetworkMode', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  protocolList?: [ string ](name='ProtocolList', position='Body'),
  slbId?: string(name='SlbId', position='Query'),
}

model ListSlbAPsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      cookieTimeout?: int32(name='CookieTimeout'),
      envId?: long(name='EnvId'),
      establishedTimeout?: int32(name='EstablishedTimeout'),
      listenerPort?: int32(name='ListenerPort'),
      name?: string(name='Name'),
      networkMode?: string(name='NetworkMode'),
      protocol?: string(name='Protocol'),
      realServerPort?: int32(name='RealServerPort'),
      slbAPId?: long(name='SlbAPId'),
      slbId?: string(name='SlbId'),
      slbIp?: string(name='SlbIp'),
      sslCertId?: string(name='SslCertId'),
      stickySession?: int32(name='StickySession'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListSlbAPsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSlbAPsResponseBody(name='body'),
}

async function listSlbAPs(request: ListSlbAPsRequest): ListSlbAPsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSlbAPs', 'POST', '/', 'json', true, 'form', request);
}

model ListUsersRequest {
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListUsersResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      realName?: string(name='RealName'),
      userId?: string(name='UserId'),
      userType?: string(name='UserType'),
    }
  ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'GET', '/', 'json', false, 'json', request);
}

model ModifyServiceRequest {
  name?: string(name='Name', position='Query'),
  portMappings?: [ 
    {
      name?: string(name='Name'),
      nodePort?: int32(name='NodePort'),
      port?: int32(name='Port'),
      protocol?: string(name='Protocol'),
      targetPort?: string(name='TargetPort'),
    }
  ](name='PortMappings', position='Body'),
  serviceId: long(name='ServiceId', position='Query'),
}

model ModifyServiceResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyServiceResponseBody(name='body'),
}

async function modifyService(request: ModifyServiceRequest): ModifyServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyService', 'POST', '/', 'json', true, 'form', request);
}

model ModifySlbAPRequest {
  cookieTimeout?: int32(name='CookieTimeout', position='Query'),
  establishedTimeout?: int32(name='EstablishedTimeout', position='Query'),
  name?: string(name='Name', position='Query'),
  realServerPort?: int32(name='RealServerPort', position='Query'),
  slbAPId: long(name='SlbAPId', position='Query'),
  sslCertId?: string(name='SslCertId', position='Query'),
  stickySession?: int32(name='StickySession', position='Query'),
}

model ModifySlbAPResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySlbAPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySlbAPResponseBody(name='body'),
}

async function modifySlbAP(request: ModifySlbAPRequest): ModifySlbAPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySlbAP', 'POST', '/', 'json', false, 'json', request);
}

model OfflineAppEnvironmentRequest {
  appId: long(name='AppId', position='Query'),
  deletePvc?: boolean(name='DeletePvc', position='Query'),
  envId: long(name='EnvId', position='Query'),
}

model OfflineAppEnvironmentResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model OfflineAppEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineAppEnvironmentResponseBody(name='body'),
}

async function offlineAppEnvironment(request: OfflineAppEnvironmentRequest): OfflineAppEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineAppEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterDetailRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
}

model QueryClusterDetailResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    basicInfo?: {
      businessCode?: string(name='BusinessCode'),
      clusterId?: long(name='ClusterId'),
      clusterInstanceId?: string(name='ClusterInstanceId'),
      clusterName?: string(name='ClusterName'),
      ecsIds?: [ string ](name='EcsIds'),
      envType?: string(name='EnvType'),
      hasInstallArmsPilot?: boolean(name='HasInstallArmsPilot'),
      hasInstallLogController?: boolean(name='HasInstallLogController'),
      installArmsInProcess?: boolean(name='InstallArmsInProcess'),
      installLogInProcess?: boolean(name='InstallLogInProcess'),
      mainUserId?: string(name='MainUserId'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      userNick?: string(name='UserNick'),
      vpcId?: string(name='VpcId'),
      vswitchs?: [ string ](name='Vswitchs'),
    }(name='BasicInfo'),
    instanceInfo?: {
      allocatePodCount?: int32(name='AllocatePodCount'),
      allocatedPodInfoList?: [ string ](name='AllocatedPodInfoList'),
      appCount?: int32(name='AppCount'),
      availablePodInfoList?: [ string ](name='AvailablePodInfoList'),
    }(name='InstanceInfo'),
    netInfo?: {
      netPlugType?: string(name='NetPlugType'),
      prodCIDR?: string(name='ProdCIDR'),
      serviceCIDR?: string(name='ServiceCIDR'),
    }(name='NetInfo'),
    nodeWorkLoadList?: [ string ](name='NodeWorkLoadList'),
    workLoad?: {
      allNodeCount?: int32(name='AllNodeCount'),
      allocateAllPodCount?: int32(name='AllocateAllPodCount'),
      allocateAppPodCount?: int32(name='AllocateAppPodCount'),
      cpuCapacityTotal?: string(name='CpuCapacityTotal'),
      cpuLevel?: string(name='CpuLevel'),
      cpuRequest?: string(name='CpuRequest'),
      cpuRequestPercent?: string(name='CpuRequestPercent'),
      cpuTotal?: string(name='CpuTotal'),
      cpuUse?: string(name='CpuUse'),
      cpuUsePercent?: string(name='CpuUsePercent'),
      memCapacityTotal?: string(name='MemCapacityTotal'),
      memLevel?: string(name='MemLevel'),
      memRequest?: string(name='MemRequest'),
      memRequestPercent?: string(name='MemRequestPercent'),
      memTotal?: string(name='MemTotal'),
      memUse?: string(name='MemUse'),
      memUsePercent?: string(name='MemUsePercent'),
    }(name='WorkLoad'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterDetailResponseBody(name='body'),
}

async function queryClusterDetail(request: QueryClusterDetailRequest): QueryClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterDetail', 'GET', '/', 'json', false, 'json', request);
}

model RebuildAppInstanceRequest {
  appId: long(name='AppId', position='Query'),
  appInstanceId: string(name='AppInstanceId', position='Query'),
  envId: long(name='EnvId', position='Query'),
}

model RebuildAppInstanceResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model RebuildAppInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebuildAppInstanceResponseBody(name='body'),
}

async function rebuildAppInstance(request: RebuildAppInstanceRequest): RebuildAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebuildAppInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveClusterNodeRequest {
  clusterInstanceId: string(name='ClusterInstanceId', position='Query'),
  ecsInstanceIdList: [ string ](name='EcsInstanceIdList', position='Query'),
}

model RemoveClusterNodeResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    nonsense?: int32(name='Nonsense'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveClusterNodeResponseBody(name='body'),
}

async function removeClusterNode(request: RemoveClusterNodeRequest): RemoveClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveClusterNode', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', position='Body'),
  accountPassword: string(name='AccountPassword', position='Body'),
  dbInstanceId: string(name='DbInstanceId', position='Body'),
}

model ResetAccountPasswordResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', true, 'form', request);
}

model ResourceStatusNotifyRequest {
  data: string(name='data', position='Body'),
}

model ResourceStatusNotifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resourceStatusNotify(request: ResourceStatusNotifyRequest): ResourceStatusNotifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResourceStatusNotify', 'POST', '/', 'none', true, 'form', request);
}

model RestartAppInstanceRequest {
  appId: long(name='AppId', position='Query'),
  appInstanceIdList: [ long ](name='AppInstanceIdList', position='Query'),
  envId: long(name='EnvId', position='Query'),
}

model RestartAppInstanceResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model RestartAppInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartAppInstanceResponseBody(name='body'),
}

async function restartAppInstance(request: RestartAppInstanceRequest): RestartAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartAppInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResumeDeployRequest {
  deployOrderId: long(name='DeployOrderId', position='Query'),
}

model ResumeDeployResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumeDeployResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeDeployResponseBody(name='body'),
}

async function resumeDeploy(request: ResumeDeployRequest): ResumeDeployResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeDeploy', 'POST', '/', 'json', false, 'json', request);
}

model ScaleAppRequest {
  envId: long(name='EnvId', position='Query'),
  replicas: int32(name='Replicas', position='Query'),
  totalPartitions?: int32(name='TotalPartitions', position='Query'),
}

model ScaleAppResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    admitted?: boolean(name='Admitted'),
    businessCode?: string(name='BusinessCode'),
    deployOrderId?: long(name='DeployOrderId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ScaleAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleAppResponseBody(name='body'),
}

async function scaleApp(request: ScaleAppRequest): ScaleAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScaleApp', 'POST', '/', 'json', false, 'json', request);
}

model SetDeployPauseTypeRequest {
  deployOrderId: long(name='DeployOrderId', position='Query'),
  deployPauseType: string(name='DeployPauseType', position='Query'),
}

model SetDeployPauseTypeResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDeployPauseTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeployPauseTypeResponseBody(name='body'),
}

async function setDeployPauseType(request: SetDeployPauseTypeRequest): SetDeployPauseTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeployPauseType', 'POST', '/', 'json', false, 'json', request);
}

model SubmitInfoRequest {
  callerUid?: long(name='CallerUid', minimum=0, maximum=999999999999999, position='Query'),
  ecsDescList: [ 
    {
      appType: string(name='AppType'),
      bussinessDesc?: string(name='BussinessDesc'),
      bussinessType: string(name='BussinessType'),
      envType: string(name='EnvType'),
      middleWareDesc: string(name='MiddleWareDesc'),
      otherMiddleWareDesc?: string(name='OtherMiddleWareDesc'),
      resourceId: string(name='ResourceId'),
      userId?: string(name='UserId'),
    }
  ](name='EcsDescList', position='Body'),
  mainUserId: long(name='MainUserId', minimum=0, maximum=999999999999999, position='Query'),
  requestId?: string(name='RequestId', position='Query'),
}

model SubmitInfoResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitInfoResponseBody(name='body'),
}

async function submitInfo(request: SubmitInfoRequest): SubmitInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitInfo', 'POST', '/', 'json', true, 'form', request);
}

model SyncPodInfoRequest {
  podName?: string(name='PodName', position='Query'),
  reason?: string(name='Reason', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  sideCarType: string(name='SideCarType', position='Query'),
  status: boolean(name='Status', position='Query'),
  taskId: long(name='TaskId', minimum=0, maximum=9999999999999999, position='Query'),
}

model SyncPodInfoResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model SyncPodInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncPodInfoResponseBody(name='body'),
}

async function syncPodInfo(request: SyncPodInfoRequest): SyncPodInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncPodInfo', 'POST', '/', 'json', false, 'json', request);
}

model UnbindGroupRequest {
  appId: long(name='AppId', position='Query'),
  bizCode: string(name='BizCode', position='Query'),
  name: string(name='Name', position='Query'),
}

model UnbindGroupResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UnbindGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindGroupResponseBody(name='body'),
}

async function unbindGroup(request: UnbindGroupRequest): UnbindGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindGroup', 'POST', '/', 'json', false, 'json', request);
}

model UnbindNodeLabelRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  labelKey: string(name='LabelKey', position='Query'),
  labelValue: string(name='LabelValue', position='Query'),
}

model UnbindNodeLabelResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindNodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindNodeLabelResponseBody(name='body'),
}

async function unbindNodeLabel(request: UnbindNodeLabelRequest): UnbindNodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindNodeLabel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppRequest {
  appId: long(name='AppId', position='Body'),
  bizTitle?: string(name='BizTitle', position='Body'),
  description?: string(name='Description', position='Body'),
  language?: string(name='Language', position='Body'),
  middleWareIdList?: [ int32 ](name='MiddleWareIdList', position='Body'),
  operatingSystem?: string(name='OperatingSystem', position='Body'),
  serviceType?: string(name='ServiceType', position='Body'),
  userRoles?: [ 
    {
      roleName: string(name='RoleName'),
      userId: string(name='UserId'),
      userType: string(name='UserType'),
    }
  ](name='UserRoles', position='Body'),
}

model UpdateAppResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppResponseBody(name='body'),
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApp', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppMonitorsRequest {
  mainUserId: long(name='MainUserId', minimum=0, maximum=999999999999999, position='Body'),
  monitorIds?: [ long ](name='MonitorIds', position='Body'),
  silenceTime?: string(name='SilenceTime', position='Body'),
  templateId: long(name='TemplateId', minimum=0, maximum=999999999999999, position='Body'),
}

model UpdateAppMonitorsResponseBody = {
  code?: string(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAppMonitorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppMonitorsResponseBody(name='body'),
}

async function updateAppMonitors(request: UpdateAppMonitorsRequest): UpdateAppMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppMonitors', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeployConfigRequest {
  appId: long(name='AppId', position='Query'),
  codePath?: string(name='CodePath', position='Query'),
  configMap?: string(name='ConfigMap', position='Query'),
  configMapList?: [ string ](name='ConfigMapList', position='Query'),
  cronJob?: string(name='CronJob', position='Query'),
  deployment?: string(name='Deployment', position='Query'),
  id: long(name='Id', position='Query'),
  secretList?: [ string ](name='SecretList', position='Query'),
  statefulSet?: string(name='StatefulSet', position='Query'),
}

model UpdateDeployConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateDeployConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeployConfigResponseBody(name='body'),
}

async function updateDeployConfig(request: UpdateDeployConfigRequest): UpdateDeployConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeployConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEciConfigRequest {
  appEnvId?: long(name='AppEnvId', position='Query'),
  eipBandwidth?: int32(name='EipBandwidth', position='Query'),
  enableEciSchedulePolicy?: boolean(name='EnableEciSchedulePolicy', position='Query'),
  mirrorCache?: boolean(name='MirrorCache', position='Query'),
  normalInstanceLimit?: int32(name='NormalInstanceLimit', position='Query'),
  scheduleVirtualNode?: boolean(name='ScheduleVirtualNode', position='Query'),
}

model UpdateEciConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateEciConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEciConfigResponseBody(name='body'),
}

async function updateEciConfig(request: UpdateEciConfigRequest): UpdateEciConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEciConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEnvironmentRequest {
  appEnvId: long(name='AppEnvId', position='Query'),
  appId: long(name='AppId', position='Query'),
  appSchemaId?: long(name='AppSchemaId', position='Query'),
  replicas?: int32(name='Replicas', position='Query'),
}

model UpdateEnvironmentResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnvironmentResponseBody(name='body'),
}

async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNormalDeployConfigRequest {
  appId: long(name='AppId', position='Query'),
  containerResourceLimit?: {
    cpu?: string(name='Cpu'),
    memory?: string(name='Memory'),
  }(name='ContainerResourceLimit', shrink='json', position='Query'),
  containerResourceRequest?: {
    cpu?: string(name='Cpu'),
    memory?: string(name='Memory'),
  }(name='ContainerResourceRequest', shrink='json', position='Query'),
  id: long(name='Id', position='Query'),
}

model UpdateNormalDeployConfigResponseBody = {
  code?: int32(name='Code'),
  errMsg?: string(name='ErrMsg'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result'),
}

model UpdateNormalDeployConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNormalDeployConfigResponseBody(name='body'),
}

async function updateNormalDeployConfig(request: UpdateNormalDeployConfigRequest): UpdateNormalDeployConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNormalDeployConfig', 'POST', '/', 'json', false, 'json', request);
}

