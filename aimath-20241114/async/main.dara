/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AIMath';
  @version = '2024-11-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GenAnalysisRequest {
  exerciseContent: string(name='ExerciseContent', description='This parameter is required.', position='Body'),
}

model GenAnalysisResponseBody = {
  content?: string(name='Content'),
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  eventType?: string(name='EventType'),
  requestId?: string(name='RequestId', description='Id of the request', example='1d31b11b-4b82-4db1-b3c0-001529fc78eb'),
}

model GenAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenAnalysis  GenAnalysisRequest
  * @return GenAnalysisResponse
 */
async function genAnalysis(request: GenAnalysisRequest): GenAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenAnalysis', 'POST', '/genAnalysis', 'json', true, 'form', request);
}

function genAnalysisWithResponseIterable(request: GenAnalysisRequest): iterator[GenAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'GenAnalysis', 'POST', '/genAnalysis', 'json', true, 'form', request);
}

model GenStepRequest {
  exerciseCode: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI', position='Body'),
}

model GenStepResponseBody = {
  content?: string(name='Content'),
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  eventType?: string(name='EventType'),
  requestId?: string(name='RequestId', description='Id of the request', example='696acaa9-eb29-4c1f-b48a-1f901579acc5'),
}

model GenStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenStepResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenStep  GenStepRequest
  * @return GenStepResponse
 */
async function genStep(request: GenStepRequest): GenStepResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenStep', 'POST', '/genStep', 'json', true, 'form', request);
}

function genStepWithResponseIterable(request: GenStepRequest): iterator[GenStepResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'GenStep', 'POST', '/genStep', 'json', true, 'form', request);
}

model GlobalConfirmRequest {
  exerciseCode: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI', position='Body'),
  tag?: string(name='Tag', example='2024-11-18', position='Body'),
}

model GlobalConfirmResponseBody = {
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='696acaa9-eb29-4c1f-b48a-1f901579acc5'),
  success?: boolean(name='Success', example='true'),
}

model GlobalConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GlobalConfirmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GlobalConfirm  GlobalConfirmRequest
  * @return GlobalConfirmResponse
 */
async function globalConfirm(request: GlobalConfirmRequest): GlobalConfirmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GlobalConfirm', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAnalysisRequest {
  content: string(name='Content', description='This parameter is required.', position='Body'),
  contentCode: string(name='ContentCode', description='This parameter is required.', example='1549d636-b102-4fee-8a99-fcc552aa9aa9', position='Body'),
  exerciseCode: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI', position='Body'),
}

model UpdateAnalysisResponseBody = {
  errCode?: string(name='ErrCode', example='9901100002'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='89C27D03-4C85-5420-9752-989130878F4D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAnalysis  UpdateAnalysisRequest
  * @return UpdateAnalysisResponse
 */
async function updateAnalysis(request: UpdateAnalysisRequest): UpdateAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAnalysis', 'POST', '/', 'json', true, 'form', request);
}

model UpdateStepRequest {
  content: string(name='Content', description='This parameter is required.', position='Body'),
  contentCode: string(name='ContentCode', description='This parameter is required.', example='1549d636-b102-4fee-8a99-fcc552aa9aa9', position='Body'),
  exerciseCode: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI', position='Body'),
}

model UpdateStepResponseBody = {
  errCode?: string(name='ErrCode', example='9901100002'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='15486286-243F-51E6-8DD3-B2D2365E5136'),
  success?: boolean(name='Success', example='true'),
}

model UpdateStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStepResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateStep  UpdateStepRequest
  * @return UpdateStepResponse
 */
async function updateStep(request: UpdateStepRequest): UpdateStepResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStep', 'POST', '/', 'json', true, 'form', request);
}

