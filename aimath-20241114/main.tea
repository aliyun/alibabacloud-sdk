/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aimath', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GenAnalysisRequest {
  exerciseContent?: string(name='ExerciseContent', description='This parameter is required.'),
}

model GenAnalysisResponseBody = {
  content?: string(name='Content'),
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  eventType?: string(name='EventType'),
  requestId?: string(name='RequestId', description='Id of the request', example='1d31b11b-4b82-4db1-b3c0-001529fc78eb'),
}

model GenAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenAnalysisResponseBody(name='body'),
}

/**
 * @summary 生成解题分析
 *
 * @param request GenAnalysisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenAnalysisResponse
 */
async function genAnalysisWithOptions(request: GenAnalysisRequest, runtime: Util.RuntimeOptions): GenAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exerciseContent)) {
    body['ExerciseContent'] = request.exerciseContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenAnalysis',
    version = '2024-11-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成解题分析
 *
 * @param request GenAnalysisRequest
 * @return GenAnalysisResponse
 */
async function genAnalysis(request: GenAnalysisRequest): GenAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return genAnalysisWithOptions(request, runtime);
}

model GenStepRequest {
  exerciseCode?: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI'),
}

model GenStepResponseBody = {
  content?: string(name='Content'),
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  eventType?: string(name='EventType'),
  requestId?: string(name='RequestId', description='Id of the request', example='696acaa9-eb29-4c1f-b48a-1f901579acc5'),
}

model GenStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenStepResponseBody(name='body'),
}

/**
 * @summary 生成数学解题步骤
 *
 * @param request GenStepRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenStepResponse
 */
async function genStepWithOptions(request: GenStepRequest, runtime: Util.RuntimeOptions): GenStepResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exerciseCode)) {
    body['ExerciseCode'] = request.exerciseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenStep',
    version = '2024-11-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成数学解题步骤
 *
 * @param request GenStepRequest
 * @return GenStepResponse
 */
async function genStep(request: GenStepRequest): GenStepResponse {
  var runtime = new Util.RuntimeOptions{};
  return genStepWithOptions(request, runtime);
}

model GlobalConfirmRequest {
  exerciseCode?: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI'),
  tag?: string(name='Tag', example='2024-11-18'),
}

model GlobalConfirmResponseBody = {
  errCode?: string(name='ErrCode', example='40020503'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='696acaa9-eb29-4c1f-b48a-1f901579acc5'),
  success?: boolean(name='Success', example='true'),
}

model GlobalConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GlobalConfirmResponseBody(name='body'),
}

/**
 * @summary 全局确认修订完成
 *
 * @param request GlobalConfirmRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GlobalConfirmResponse
 */
async function globalConfirmWithOptions(request: GlobalConfirmRequest, runtime: Util.RuntimeOptions): GlobalConfirmResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exerciseCode)) {
    body['ExerciseCode'] = request.exerciseCode;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GlobalConfirm',
    version = '2024-11-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 全局确认修订完成
 *
 * @param request GlobalConfirmRequest
 * @return GlobalConfirmResponse
 */
async function globalConfirm(request: GlobalConfirmRequest): GlobalConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  return globalConfirmWithOptions(request, runtime);
}

model UpdateAnalysisRequest {
  content?: string(name='Content', description='This parameter is required.'),
  contentCode?: string(name='ContentCode', description='This parameter is required.', example='1549d636-b102-4fee-8a99-fcc552aa9aa9'),
  exerciseCode?: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI'),
}

model UpdateAnalysisResponseBody = {
  errCode?: string(name='ErrCode', example='9901100002'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='89C27D03-4C85-5420-9752-989130878F4D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAnalysisResponseBody(name='body'),
}

/**
 * @summary 修订解题分析
 *
 * @param request UpdateAnalysisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAnalysisResponse
 */
async function updateAnalysisWithOptions(request: UpdateAnalysisRequest, runtime: Util.RuntimeOptions): UpdateAnalysisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentCode)) {
    body['ContentCode'] = request.contentCode;
  }
  if (!Util.isUnset(request.exerciseCode)) {
    body['ExerciseCode'] = request.exerciseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAnalysis',
    version = '2024-11-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修订解题分析
 *
 * @param request UpdateAnalysisRequest
 * @return UpdateAnalysisResponse
 */
async function updateAnalysis(request: UpdateAnalysisRequest): UpdateAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAnalysisWithOptions(request, runtime);
}

model UpdateStepRequest {
  content?: string(name='Content', description='This parameter is required.'),
  contentCode?: string(name='ContentCode', description='This parameter is required.', example='1549d636-b102-4fee-8a99-fcc552aa9aa9'),
  exerciseCode?: string(name='ExerciseCode', description='This parameter is required.', example='Ex_pop_1731848070815_funI'),
}

model UpdateStepResponseBody = {
  errCode?: string(name='ErrCode', example='9901100002'),
  errMsg?: string(name='ErrMsg', example='Parameter value validation failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='15486286-243F-51E6-8DD3-B2D2365E5136'),
  success?: boolean(name='Success', example='true'),
}

model UpdateStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStepResponseBody(name='body'),
}

/**
 * @summary 修订解题步骤
 *
 * @param request UpdateStepRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateStepResponse
 */
async function updateStepWithOptions(request: UpdateStepRequest, runtime: Util.RuntimeOptions): UpdateStepResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentCode)) {
    body['ContentCode'] = request.contentCode;
  }
  if (!Util.isUnset(request.exerciseCode)) {
    body['ExerciseCode'] = request.exerciseCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStep',
    version = '2024-11-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修订解题步骤
 *
 * @param request UpdateStepRequest
 * @return UpdateStepResponse
 */
async function updateStep(request: UpdateStepRequest): UpdateStepResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStepWithOptions(request, runtime);
}

