/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ram';
  @version = '2015-05-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserToGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model AddUserToGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToGroupResponseBody(name='body'),
}

async function addUserToGroup(request: AddUserToGroupRequest): AddUserToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachPolicyToGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model AttachPolicyToGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyToGroupResponseBody(name='body'),
}

async function attachPolicyToGroup(request: AttachPolicyToGroupRequest): AttachPolicyToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicyToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachPolicyToRoleRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model AttachPolicyToRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyToRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyToRoleResponseBody(name='body'),
}

async function attachPolicyToRole(request: AttachPolicyToRoleRequest): AttachPolicyToRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicyToRole', 'POST', '/', 'json', false, 'json', request);
}

model AttachPolicyToUserRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model AttachPolicyToUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyToUserResponseBody(name='body'),
}

async function attachPolicyToUser(request: AttachPolicyToUserRequest): AttachPolicyToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicyToUser', 'POST', '/', 'json', false, 'json', request);
}

model BindMFADeviceRequest {
  authenticationCode1?: string(name='AuthenticationCode1', position='Query'),
  authenticationCode2?: string(name='AuthenticationCode2', position='Query'),
  serialNumber?: string(name='SerialNumber', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model BindMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindMFADeviceResponseBody(name='body'),
}

async function bindMFADevice(request: BindMFADeviceRequest): BindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model ChangePasswordRequest {
  newPassword?: string(name='NewPassword', position='Query'),
  oldPassword?: string(name='OldPassword', position='Query'),
}

model ChangePasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangePasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ChangePasswordResponseBody(name='body'),
}

async function changePassword(request: ChangePasswordRequest): ChangePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangePassword', 'POST', '/', 'json', false, 'json', request);
}

model ClearAccountAliasRequest {
}

model ClearAccountAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearAccountAliasResponse = {
  headers: map[string]string(name='headers'),
  body: ClearAccountAliasResponseBody(name='body'),
}

async function clearAccountAlias(request: ClearAccountAliasRequest): ClearAccountAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearAccountAlias', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessKeyRequest {
  userName?: string(name='UserName', position='Query'),
}

model CreateAccessKeyResponseBody = {
  accessKey?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    createDate?: string(name='CreateDate'),
    status?: string(name='Status'),
  }(name='AccessKey'),
  requestId?: string(name='RequestId'),
}

model CreateAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccessKeyResponseBody(name='body'),
}

async function createAccessKey(request: CreateAccessKeyRequest): CreateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  comments?: string(name='Comments', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
}

model CreateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', position='Query'),
  password?: string(name='Password', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model CreateLoginProfileResponseBody = {
  loginProfile?: {
    createDate?: string(name='CreateDate'),
    MFABindRequired?: boolean(name='MFABindRequired'),
    passwordResetRequired?: boolean(name='PasswordResetRequired'),
    userName?: string(name='UserName'),
  }(name='LoginProfile'),
  requestId?: string(name='RequestId'),
}

model CreateLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoginProfileResponseBody(name='body'),
}

async function createLoginProfile(request: CreateLoginProfileRequest): CreateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  description?: string(name='Description', position='Query'),
  policyDocument?: string(name='PolicyDocument', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
}

model CreatePolicyResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyVersionRequest {
  policyDocument?: string(name='PolicyDocument', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  rotateStrategy?: string(name='RotateStrategy', position='Query'),
  setAsDefault?: boolean(name='SetAsDefault', position='Query'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyVersionResponseBody(name='body'),
}

async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoleRequest {
  assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', position='Query'),
  description?: string(name='Description', position='Query'),
  maxSessionDuration?: long(name='MaxSessionDuration', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model CreateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
  }(name='Role'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  comments?: string(name='Comments', position='Query'),
  displayName?: string(name='DisplayName', position='Query'),
  email?: string(name='Email', position='Query'),
  mobilePhone?: string(name='MobilePhone', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId'),
  user?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    mobilePhone?: string(name='MobilePhone'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualMFADeviceRequest {
  virtualMFADeviceName?: string(name='VirtualMFADeviceName', position='Query'),
}

model CreateVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
  virtualMFADevice?: {
    base32StringSeed?: string(name='Base32StringSeed'),
    QRCodePNG?: string(name='QRCodePNG'),
    serialNumber?: string(name='SerialNumber'),
  }(name='VirtualMFADevice'),
}

model CreateVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualMFADeviceResponseBody(name='body'),
}

async function createVirtualMFADevice(request: CreateVirtualMFADeviceRequest): CreateVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessKeyRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DeleteAccessKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessKeyResponseBody(name='body'),
}

async function deleteAccessKey(request: DeleteAccessKeyRequest): DeleteAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoginProfileRequest {
  userName?: string(name='UserName', position='Query'),
}

model DeleteLoginProfileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoginProfileResponseBody(name='body'),
}

async function deleteLoginProfile(request: DeleteLoginProfileRequest): DeleteLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  policyName?: string(name='PolicyName', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyVersionResponseBody(name='body'),
}

async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoleRequest {
  roleName?: string(name='RoleName', position='Query'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoleResponseBody(name='body'),
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  userName?: string(name='UserName', position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualMFADeviceRequest {
  serialNumber?: string(name='SerialNumber', position='Query'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyFromGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model DetachPolicyFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyFromGroupResponseBody(name='body'),
}

async function detachPolicyFromGroup(request: DetachPolicyFromGroupRequest): DetachPolicyFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicyFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyFromRoleRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model DetachPolicyFromRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyFromRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyFromRoleResponseBody(name='body'),
}

async function detachPolicyFromRole(request: DetachPolicyFromRoleRequest): DetachPolicyFromRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicyFromRole', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyFromUserRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DetachPolicyFromUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyFromUserResponseBody(name='body'),
}

async function detachPolicyFromUser(request: DetachPolicyFromUserRequest): DetachPolicyFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicyFromUser', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedRequest {
  userAccessKeyId?: string(name='UserAccessKeyId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model GetAccessKeyLastUsedResponseBody = {
  accessKeyLastUsed?: {
    lastUsedDate?: string(name='LastUsedDate'),
  }(name='AccessKeyLastUsed'),
  requestId?: string(name='RequestId'),
}

model GetAccessKeyLastUsedResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedResponseBody(name='body'),
}

async function getAccessKeyLastUsed(request: GetAccessKeyLastUsedRequest): GetAccessKeyLastUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsed', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountAliasRequest {
}

model GetAccountAliasResponseBody = {
  accountAlias?: string(name='AccountAlias'),
  requestId?: string(name='RequestId'),
}

model GetAccountAliasResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountAliasResponseBody(name='body'),
}

async function getAccountAlias(request: GetAccountAliasRequest): GetAccountAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountAlias', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
}

model GetGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupResponseBody(name='body'),
}

async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginProfileRequest {
  userName?: string(name='UserName', position='Query'),
}

model GetLoginProfileResponseBody = {
  loginProfile?: {
    createDate?: string(name='CreateDate'),
    MFABindRequired?: boolean(name='MFABindRequired'),
    passwordResetRequired?: boolean(name='PasswordResetRequired'),
    userName?: string(name='UserName'),
  }(name='LoginProfile'),
  requestId?: string(name='RequestId'),
}

model GetLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginProfileResponseBody(name='body'),
}

async function getLoginProfile(request: GetLoginProfileRequest): GetLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordPolicyRequest {
}

model GetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpiry?: boolean(name='HardExpiry'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps'),
    maxPasswordAge?: int32(name='MaxPasswordAge'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters'),
    requireNumbers?: boolean(name='RequireNumbers'),
    requireSymbols?: boolean(name='RequireSymbols'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters'),
  }(name='PasswordPolicy'),
  requestId?: string(name='RequestId'),
}

model GetPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPasswordPolicyResponseBody(name='body'),
}

async function getPasswordPolicy(request: GetPasswordPolicyRequest): GetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model GetPolicyResponseBody = {
  defaultPolicyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
  }(name='DefaultPolicyVersion'),
  policy?: {
    attachmentCount?: int32(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyDocument?: string(name='PolicyDocument'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model GetPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyVersionResponseBody(name='body'),
}

async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetRoleRequest {
  roleName?: string(name='RoleName', position='Query'),
}

model GetRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleResponseBody(name='body'),
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRole', 'POST', '/', 'json', false, 'json', request);
}

model GetSecurityPreferenceRequest {
}

model GetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys'),
    }(name='AccessKeyPreference'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket'),
      loginNetworkMasks?: string(name='LoginNetworkMasks'),
      loginSessionDuration?: int32(name='LoginSessionDuration'),
    }(name='LoginProfilePreference'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices'),
    }(name='MFAPreference'),
    publicKeyPreference?: {
      allowUserToManagePublicKeys?: boolean(name='AllowUserToManagePublicKeys'),
    }(name='PublicKeyPreference'),
  }(name='SecurityPreference'),
}

model GetSecurityPreferenceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecurityPreferenceResponseBody(name='body'),
}

async function getSecurityPreference(request: GetSecurityPreferenceRequest): GetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  userName?: string(name='UserName', position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId'),
  user?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    lastLoginDate?: string(name='LastLoginDate'),
    mobilePhone?: string(name='MobilePhone'),
    updateDate?: string(name='UpdateDate'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserMFAInfoRequest {
  userName?: string(name='UserName', position='Query'),
}

model GetUserMFAInfoResponseBody = {
  MFADevice?: {
    serialNumber?: string(name='SerialNumber'),
    type?: string(name='Type'),
  }(name='MFADevice'),
  requestId?: string(name='RequestId'),
}

model GetUserMFAInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserMFAInfoResponseBody(name='body'),
}

async function getUserMFAInfo(request: GetUserMFAInfoRequest): GetUserMFAInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserMFAInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessKeysRequest {
  userName?: string(name='UserName', position='Query'),
}

model ListAccessKeysResponseBody = {
  accessKeys?: {
    accessKey?: [ 
    {
      accessKeyId?: string(name='AccessKeyId'),
      createDate?: string(name='CreateDate'),
      status?: string(name='Status'),
    }
  ](name='AccessKey')
  }(name='AccessKeys'),
  requestId?: string(name='RequestId'),
}

model ListAccessKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccessKeysResponseBody(name='body'),
}

async function listAccessKeys(request: ListAccessKeysRequest): ListAccessKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListEntitiesForPolicyRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListEntitiesForPolicyResponseBody = {
  groups?: {
    group?: [ 
    {
      attachDate?: string(name='AttachDate'),
      comments?: string(name='Comments'),
      groupName?: string(name='GroupName'),
    }
  ](name='Group')
  }(name='Groups'),
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn'),
      attachDate?: string(name='AttachDate'),
      description?: string(name='Description'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
    }
  ](name='Role')
  }(name='Roles'),
  users?: {
    user?: [ 
    {
      attachDate?: string(name='AttachDate'),
      displayName?: string(name='DisplayName'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Users'),
}

model ListEntitiesForPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ListEntitiesForPolicyResponseBody(name='body'),
}

async function listEntitiesForPolicy(request: ListEntitiesForPolicyRequest): ListEntitiesForPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEntitiesForPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  marker?: string(name='Marker', position='Query'),
  maxItems?: int32(name='MaxItems', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments'),
      createDate?: string(name='CreateDate'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Group')
  }(name='Groups'),
  isTruncated?: boolean(name='IsTruncated'),
  marker?: string(name='Marker'),
  requestId?: string(name='RequestId'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  userName?: string(name='UserName', position='Query'),
}

model ListGroupsForUserResponseBody = {
  groups?: {
    group?: [ 
    {
      comments?: string(name='Comments'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      joinDate?: string(name='JoinDate'),
    }
  ](name='Group')
  }(name='Groups'),
  requestId?: string(name='RequestId'),
}

model ListGroupsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsForUserResponseBody(name='body'),
}

async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesRequest {
  marker?: string(name='Marker', position='Query'),
  maxItems?: int32(name='MaxItems', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListPoliciesResponseBody = {
  isTruncated?: boolean(name='IsTruncated'),
  marker?: string(name='Marker'),
  policies?: {
    policy?: [ 
    {
      attachmentCount?: int32(name='AttachmentCount'),
      createDate?: string(name='CreateDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesForGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
}

model ListPoliciesForGroupResponseBody = {
  policies?: {
    policy?: [ 
    {
      attachDate?: string(name='AttachDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
}

model ListPoliciesForGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesForGroupResponseBody(name='body'),
}

async function listPoliciesForGroup(request: ListPoliciesForGroupRequest): ListPoliciesForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPoliciesForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesForRoleRequest {
  roleName?: string(name='RoleName', position='Query'),
}

model ListPoliciesForRoleResponseBody = {
  policies?: {
    policy?: [ 
    {
      attachDate?: string(name='AttachDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
}

model ListPoliciesForRoleResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesForRoleResponseBody(name='body'),
}

async function listPoliciesForRole(request: ListPoliciesForRoleRequest): ListPoliciesForRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPoliciesForRole', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesForUserRequest {
  userName?: string(name='UserName', position='Query'),
}

model ListPoliciesForUserResponseBody = {
  policies?: {
    policy?: [ 
    {
      attachDate?: string(name='AttachDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
}

model ListPoliciesForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesForUserResponseBody(name='body'),
}

async function listPoliciesForUser(request: ListPoliciesForUserRequest): ListPoliciesForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPoliciesForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyVersionsRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListPolicyVersionsResponseBody = {
  policyVersions?: {
    policyVersion?: [ 
    {
      createDate?: string(name='CreateDate'),
      isDefaultVersion?: boolean(name='IsDefaultVersion'),
      policyDocument?: string(name='PolicyDocument'),
      versionId?: string(name='VersionId'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions'),
  requestId?: string(name='RequestId'),
}

model ListPolicyVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyVersionsResponseBody(name='body'),
}

async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  marker?: string(name='Marker', position='Query'),
  maxItems?: int32(name='MaxItems', position='Query'),
}

model ListRolesResponseBody = {
  isTruncated?: boolean(name='IsTruncated'),
  marker?: string(name='Marker'),
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn'),
      createDate?: string(name='CreateDate'),
      description?: string(name='Description'),
      maxSessionDuration?: long(name='MaxSessionDuration'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Role')
  }(name='Roles'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  marker?: string(name='Marker', position='Query'),
  maxItems?: int32(name='MaxItems', position='Query'),
}

model ListUsersResponseBody = {
  isTruncated?: boolean(name='IsTruncated'),
  marker?: string(name='Marker'),
  requestId?: string(name='RequestId'),
  users?: {
    user?: [ 
    {
      comments?: string(name='Comments'),
      createDate?: string(name='CreateDate'),
      displayName?: string(name='DisplayName'),
      email?: string(name='Email'),
      mobilePhone?: string(name='MobilePhone'),
      updateDate?: string(name='UpdateDate'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  marker?: string(name='Marker', position='Query'),
  maxItems?: int32(name='MaxItems', position='Query'),
}

model ListUsersForGroupResponseBody = {
  isTruncated?: boolean(name='IsTruncated'),
  marker?: string(name='Marker'),
  requestId?: string(name='RequestId'),
  users?: {
    user?: [ 
    {
      displayName?: string(name='DisplayName'),
      joinDate?: string(name='JoinDate'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Users'),
}

model ListUsersForGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersForGroupResponseBody(name='body'),
}

async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualMFADevicesRequest {
}

model ListVirtualMFADevicesResponseBody = {
  requestId?: string(name='RequestId'),
  virtualMFADevices?: {
    virtualMFADevice?: [ 
    {
      activateDate?: string(name='ActivateDate'),
      serialNumber?: string(name='SerialNumber'),
      user?: {
        displayName?: string(name='DisplayName'),
        userId?: string(name='UserId'),
        userName?: string(name='UserName'),
      }(name='User'),
    }
  ](name='VirtualMFADevice')
  }(name='VirtualMFADevices'),
}

model ListVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVirtualMFADevicesResponseBody(name='body'),
}

async function listVirtualMFADevices(request: ListVirtualMFADevicesRequest): ListVirtualMFADevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualMFADevices', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model RemoveUserFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveUserFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserFromGroupResponseBody(name='body'),
}

async function removeUserFromGroup(request: RemoveUserFromGroupRequest): RemoveUserFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetAccountAliasRequest {
  accountAlias?: string(name='AccountAlias', position='Query'),
}

model SetAccountAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccountAliasResponse = {
  headers: map[string]string(name='headers'),
  body: SetAccountAliasResponseBody(name='body'),
}

async function setAccountAlias(request: SetAccountAliasRequest): SetAccountAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccountAlias', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultPolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultPolicyVersionResponseBody(name='body'),
}

async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordPolicyRequest {
  hardExpiry?: boolean(name='HardExpiry', position='Query'),
  maxLoginAttemps?: int32(name='MaxLoginAttemps', position='Query'),
  maxPasswordAge?: int32(name='MaxPasswordAge', position='Query'),
  minimumPasswordLength?: int32(name='MinimumPasswordLength', position='Query'),
  passwordReusePrevention?: int32(name='PasswordReusePrevention', position='Query'),
  requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters', position='Query'),
  requireNumbers?: boolean(name='RequireNumbers', position='Query'),
  requireSymbols?: boolean(name='RequireSymbols', position='Query'),
  requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters', position='Query'),
}

model SetPasswordPolicyResponseBody = {
  passwordPolicy?: {
    hardExpiry?: boolean(name='HardExpiry'),
    maxLoginAttemps?: int32(name='MaxLoginAttemps'),
    maxPasswordAge?: int32(name='MaxPasswordAge'),
    minimumPasswordLength?: int32(name='MinimumPasswordLength'),
    passwordReusePrevention?: int32(name='PasswordReusePrevention'),
    requireLowercaseCharacters?: boolean(name='RequireLowercaseCharacters'),
    requireNumbers?: boolean(name='RequireNumbers'),
    requireSymbols?: boolean(name='RequireSymbols'),
    requireUppercaseCharacters?: boolean(name='RequireUppercaseCharacters'),
  }(name='PasswordPolicy'),
  requestId?: string(name='RequestId'),
}

model SetPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetPasswordPolicyResponseBody(name='body'),
}

async function setPasswordPolicy(request: SetPasswordPolicyRequest): SetPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetSecurityPreferenceRequest {
  allowUserToChangePassword?: boolean(name='AllowUserToChangePassword', position='Query'),
  allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys', position='Query'),
  allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices', position='Query'),
  allowUserToManagePublicKeys?: boolean(name='AllowUserToManagePublicKeys', position='Query'),
  enableSaveMFATicket?: boolean(name='EnableSaveMFATicket', position='Query'),
  loginNetworkMasks?: string(name='LoginNetworkMasks', position='Query'),
  loginSessionDuration?: int32(name='LoginSessionDuration', position='Query'),
}

model SetSecurityPreferenceResponseBody = {
  requestId?: string(name='RequestId'),
  securityPreference?: {
    accessKeyPreference?: {
      allowUserToManageAccessKeys?: boolean(name='AllowUserToManageAccessKeys'),
    }(name='AccessKeyPreference'),
    loginProfilePreference?: {
      allowUserToChangePassword?: boolean(name='AllowUserToChangePassword'),
      enableSaveMFATicket?: boolean(name='EnableSaveMFATicket'),
      loginNetworkMasks?: string(name='LoginNetworkMasks'),
      loginSessionDuration?: int32(name='LoginSessionDuration'),
    }(name='LoginProfilePreference'),
    MFAPreference?: {
      allowUserToManageMFADevices?: boolean(name='AllowUserToManageMFADevices'),
    }(name='MFAPreference'),
    publicKeyPreference?: {
      allowUserToManagePublicKeys?: boolean(name='AllowUserToManagePublicKeys'),
    }(name='PublicKeyPreference'),
  }(name='SecurityPreference'),
}

model SetSecurityPreferenceResponse = {
  headers: map[string]string(name='headers'),
  body: SetSecurityPreferenceResponseBody(name='body'),
}

async function setSecurityPreference(request: SetSecurityPreferenceRequest): SetSecurityPreferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSecurityPreference', 'POST', '/', 'json', false, 'json', request);
}

model UnbindMFADeviceRequest {
  userName?: string(name='UserName', position='Query'),
}

model UnbindMFADeviceResponseBody = {
  MFADevice?: {
    serialNumber?: string(name='SerialNumber'),
  }(name='MFADevice'),
  requestId?: string(name='RequestId'),
}

model UnbindMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindMFADeviceResponseBody(name='body'),
}

async function unbindMFADevice(request: UnbindMFADeviceRequest): UnbindMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccessKeyRequest {
  status?: string(name='Status', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model UpdateAccessKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccessKeyResponseBody(name='body'),
}

async function updateAccessKey(request: UpdateAccessKeyRequest): UpdateAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  groupName?: string(name='GroupName', position='Query'),
  newComments?: string(name='NewComments', position='Query'),
  newGroupName?: string(name='NewGroupName', position='Query'),
}

model UpdateGroupResponseBody = {
  group?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupResponseBody(name='body'),
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLoginProfileRequest {
  MFABindRequired?: boolean(name='MFABindRequired', position='Query'),
  password?: string(name='Password', position='Query'),
  passwordResetRequired?: boolean(name='PasswordResetRequired', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model UpdateLoginProfileResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateLoginProfileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLoginProfileResponseBody(name='body'),
}

async function updateLoginProfile(request: UpdateLoginProfileRequest): UpdateLoginProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoginProfile', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePolicyDescriptionRequest {
  newDescription?: string(name='NewDescription', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
}

model UpdatePolicyDescriptionResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='Policy'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePolicyDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePolicyDescriptionResponseBody(name='body'),
}

async function updatePolicyDescription(request: UpdatePolicyDescriptionRequest): UpdatePolicyDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePolicyDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRoleRequest {
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument', position='Query'),
  newDescription?: string(name='NewDescription', position='Query'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model UpdateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRole', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  newComments?: string(name='NewComments', position='Query'),
  newDisplayName?: string(name='NewDisplayName', position='Query'),
  newEmail?: string(name='NewEmail', position='Query'),
  newMobilePhone?: string(name='NewMobilePhone', position='Query'),
  newUserName?: string(name='NewUserName', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId'),
  user?: {
    comments?: string(name='Comments'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    mobilePhone?: string(name='MobilePhone'),
    updateDate?: string(name='UpdateDate'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

