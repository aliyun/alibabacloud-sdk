/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('facebody', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DetectIPCPedestrianOptimizedRequest {
  imageData?: bytes(name='imageData', description='image data'),
  width?: long(name='width', description='image width'),
  height?: long(name='height', description='image height'),
}

model DetectIPCPedestrianOptimizedResponseBody = {
  data?: {
    imageInfoList?: [ 
      {
        elements?: [ 
          {
            boxes?: [ long ](name='Boxes', description='box array'),
            score?: float(name='Score', description='score'),
          }
        ](name='Elements', description='Elements'),
      }
    ](name='ImageInfoList', description='imageInfoList'),
  }(name='Data', description='data'),
  requestId?: string(name='RequestId', description='requestId'),
}

model DetectIPCPedestrianOptimizedResponse = {
  headers: map[string]string(name='headers'),
  body: DetectIPCPedestrianOptimizedResponseBody(name='body'),
}

/**
 * 行人检测快速版
 */
async function detectIPCPedestrianOptimized(request: DetectIPCPedestrianOptimizedRequest): DetectIPCPedestrianOptimizedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return detectIPCPedestrianOptimizedWithOptions(request, headers, runtime);
}

async function detectIPCPedestrianOptimizedWithOptions(request: DetectIPCPedestrianOptimizedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetectIPCPedestrianOptimizedResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.imageData)) {
    body.imageData = request.imageData;
  }
  if (!Util.isUnset(request.width)) {
    body.width = request.width;
  }
  if (!Util.isUnset(request.height)) {
    body.height = request.height;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetectIPCPedestrianOptimized',
    version = '2020-09-10',
    protocol = 'HTTPS',
    pathname = `/viapi/k8s/facebody/detect-ipc-pedestrian-optimized`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ExecuteServerSideVerificationRequest {
  certificateName?: string(name='certificateName'),
  certificateNumber?: string(name='certificateNumber'),
  facialPictureData?: bytes(name='facialPictureData'),
  facialPictureUrl?: string(name='facialPictureUrl'),
  sceneType?: string(name='sceneType'),
}

model ExecuteServerSideVerificationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: {
    pass?: boolean(name='Pass'),
    verificationToken?: string(name='VerificationToken'),
    reason?: string(name='Reason'),
  }(name='Data'),
}

model ExecuteServerSideVerificationResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteServerSideVerificationResponseBody(name='body'),
}

async function executeServerSideVerification(request: ExecuteServerSideVerificationRequest): ExecuteServerSideVerificationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return executeServerSideVerificationWithOptions(request, headers, runtime);
}

async function executeServerSideVerificationWithOptions(request: ExecuteServerSideVerificationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecuteServerSideVerificationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.certificateName)) {
    body.certificateName = request.certificateName;
  }
  if (!Util.isUnset(request.certificateNumber)) {
    body.certificateNumber = request.certificateNumber;
  }
  if (!Util.isUnset(request.facialPictureData)) {
    body.facialPictureData = request.facialPictureData;
  }
  if (!Util.isUnset(request.facialPictureUrl)) {
    body.facialPictureUrl = request.facialPictureUrl;
  }
  if (!Util.isUnset(request.sceneType)) {
    body.sceneType = request.sceneType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteServerSideVerification',
    version = '2020-09-10',
    protocol = 'HTTPS',
    pathname = `/viapi/thirdparty/realperson/execServerSideVerification`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

