/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'milvus';
  @version = '2023-10-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateDefaultRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateDefaultRoleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{ "PolicyType": "AccountLevelIdentityBasedPolicy", "AuthPrincipalOwnerId": "xxxx", "EncodedDiagnosticMessage": "xxxx", "AuthPrincipalType": "SubUser", "AuthPrincipalDisplayName": "xxxx", "NoPermissionType": "ImplicitDeny", "AuthAction": "milvus:xxxx" }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model CreateDefaultRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDefaultRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDefaultRole  CreateDefaultRoleRequest
  * @return CreateDefaultRoleResponse
 */
async function createDefaultRole(request: CreateDefaultRoleRequest): CreateDefaultRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDefaultRole', 'POST', '/webapi/user/create_default_role', 'json', false, 'json', request);
}

model DescribeAccessControlListRequest {
  region?: string(name='Region', position='Host'),
  instanceId?: string(name='InstanceId', example='c-123xxx', position='Query'),
}

model DescribeAccessControlListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: {
    aclId?: string(name='AclId', example='acl-xxxx'),
    cidr?: [ string ](name='Cidr'),
  }(name='Data'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  errorCode?: string(name='ErrorCode', example='Instance.NotFound'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAccessControlListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessControlListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccessControlList  DescribeAccessControlListRequest
  * @return DescribeAccessControlListResponse
 */
async function describeAccessControlList(request: DescribeAccessControlListRequest): DescribeAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAccessControlList', 'POST', '/webapi/milvus/describe_access_control_list', 'json', false, 'json', request);
}

model DescribeInstanceConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-123xxx', position='Query'),
}

model DescribeInstanceConfigsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: bytes(name='Data', example='dataCoord:\\n  enableCompaction: true'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceConfigs  DescribeInstanceConfigsRequest
  * @return DescribeInstanceConfigsResponse
 */
async function describeInstanceConfigs(request: DescribeInstanceConfigsRequest): DescribeInstanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInstanceConfigs', 'POST', '/webapi/config/describe_milvus_user_config', 'json', false, 'json', request);
}

model GetInstanceDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', example='c-123xxx', position='Query'),
}

model GetInstanceDetailResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: {
    aclId?: string(name='AclId', example='acl-123xxx'),
    beginTime?: long(name='BeginTime', example='1716863508000'),
    bucketName?: string(name='BucketName', example='milvus-test'),
    bucketPath?: string(name='BucketPath', example='https://oss.console.aliyun.com/bucket/oss-cn-beijing/xxxx/object?spm=a2cug.25127996.0.0.577990370Ebsqt&path=milvus-c-123xxxx'),
    clusterInfo?: {
      attuPort?: int32(name='AttuPort', example='3000'),
      internetUrl?: string(name='InternetUrl', example='c-123xxx-.milvus.aliyuncs.com'),
      intranetUrl?: string(name='IntranetUrl', example='c-123xxx-internal.milvus.aliyuncs.com'),
      milvusResourceInfoList?: [ 
        {
          componentType?: string(name='ComponentType', example='QueryNode'),
          cuNum?: int32(name='CuNum', example='8'),
          cuRatio?: int32(name='CuRatio'),
          diskSize?: int32(name='DiskSize', example='100'),
          diskType?: string(name='DiskType', example='essd'),
          replica?: int32(name='Replica', example='2'),
        }
      ](name='MilvusResourceInfoList'),
      ossStorageSize?: string(name='OssStorageSize', example='125.15 GB'),
      ossStorageTimestamp?: long(name='OssStorageTimestamp', example='1718604000000'),
      proxyPort?: int32(name='ProxyPort', example='19530'),
      totalCuNum?: int32(name='TotalCuNum', example='24'),
      totalDiskSize?: int32(name='TotalDiskSize', example='500'),
    }(name='ClusterInfo'),
    clusterName?: string(name='ClusterName', example='aliyun-test'),
    enableHa?: boolean(name='EnableHa'),
    expireTime?: long(name='ExpireTime', example='1721664000000'),
    instanceId?: string(name='InstanceId', example='c-123xxx'),
    instanceStatus?: string(name='InstanceStatus', example='running'),
    measureConfig?: {
      dataNodeCuNum?: int32(name='DataNodeCuNum'),
      dataNodeReplica?: int32(name='DataNodeReplica'),
      indexNodeCuNum?: int32(name='IndexNodeCuNum'),
      indexNodeReplica?: int32(name='IndexNodeReplica'),
      mixCoodinatorNodeCuNum?: int32(name='MixCoodinatorNodeCuNum'),
      mixCoodinatorNodeReplica?: int32(name='MixCoodinatorNodeReplica'),
      proxyNodeCuNum?: int32(name='ProxyNodeCuNum'),
      proxyNodeReplica?: int32(name='ProxyNodeReplica'),
      queryNodeCuNum?: int32(name='QueryNodeCuNum'),
      queryNodeReplica?: int32(name='QueryNodeReplica'),
    }(name='MeasureConfig'),
    nodeType?: string(name='NodeType'),
    openPublicNet?: boolean(name='OpenPublicNet', example='true'),
    packageType?: string(name='PackageType', example='standard'),
    payType?: int32(name='PayType', example='1'),
    productCode?: string(name='ProductCode', example='milvus_milvuspre_public_cn'),
    regionId?: string(name='RegionId', example='cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-123xxx'),
    runningTime?: long(name='RunningTime', example='1743679'),
    sgId?: string(name='SgId', example='sg-123xxx'),
    templateVersion?: string(name='TemplateVersion', example='2.4.1-1.0-0.0.1'),
    userConfig?: string(name='UserConfig', example='dataCoord:\\n  segment:\\n    maxSize: 1024'),
    version?: string(name='Version', example='2.4'),
    vpcId?: string(name='VpcId', example='vpc-123xxx'),
    vswId?: string(name='VswId', example='vsw-123xxx'),
    zoneId?: string(name='ZoneId', example='cn-beijing-g'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceDetail  GetInstanceDetailRequest
  * @return GetInstanceDetailResponse
 */
async function getInstanceDetail(request: GetInstanceDetailRequest): GetInstanceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceDetail', 'POST', '/webapi/cluster/detail', 'json', false, 'json', request);
}

model ListInstancesRequest {
  clusterId?: string(name='ClusterId', example='c-123xxx', position='Query'),
  clusterName?: string(name='ClusterName', example='milvus-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100000, position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-123xxx', position='Query'),
}

model ListInstancesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: [ 
    {
      autoBackup?: boolean(name='AutoBackup'),
      beginTime?: long(name='BeginTime', example='1718608505000'),
      clusterInfo?: {
        attuPort?: int32(name='AttuPort', example='3000'),
        internetUrl?: string(name='InternetUrl', example='c-123xxx.milvus.aliyuncs.com'),
        intranetUrl?: string(name='IntranetUrl', example='c-123xxx-internal.milvus.aliyuncs.com'),
        milvusResourceInfoList?: [ 
          {
            componentType?: string(name='ComponentType', example='standalone'),
            cuNum?: int32(name='CuNum', example='16'),
            diskSize?: int32(name='DiskSize', example='100'),
            diskType?: string(name='DiskType', example='essd'),
            replica?: int32(name='Replica', example='1'),
          }
        ](name='MilvusResourceInfoList'),
        proxyPort?: int32(name='ProxyPort', example='19530'),
        totalCuNum?: int32(name='TotalCuNum', example='24'),
        totalDiskSize?: int32(name='TotalDiskSize', example='500'),
      }(name='ClusterInfo'),
      clusterName?: string(name='ClusterName', example='milvus-test'),
      expireTime?: long(name='ExpireTime', example='1721232000000'),
      instanceId?: string(name='InstanceId', example='c-123xxx'),
      instanceStatus?: string(name='InstanceStatus', example='running'),
      nodeType?: string(name='NodeType'),
      openPublicNet?: boolean(name='OpenPublicNet', example='true'),
      packageType?: string(name='PackageType', example='trial'),
      payType?: int32(name='PayType', example='1'),
      productCode?: string(name='ProductCode', example='milvus_milvuspre_public_cn'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-123xxx'),
      runningTime?: int32(name='RunningTime', example='536611'),
      sgId?: string(name='SgId', example='sg-123xxx'),
      vpcId?: string(name='VpcId', example='vpc-123xxx'),
      vswId?: string(name='VswId', example='vsw-123xxx'),
      zoneId?: string(name='ZoneId', example='cn-beijing-g'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='15'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'POST', '/webapi/order/list', 'json', false, 'json', request);
}

model ModifyInstanceConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-123xxx', position='Query'),
  reason: string(name='Reason', description='This parameter is required.', example='for test', position='Query'),
  userConfig?: string(name='UserConfig', example='dataCoord:\\n  segment:\\n    maxSize: 1024', position='Query'),
}

model ModifyInstanceConfigResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model ModifyInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceConfig  ModifyInstanceConfigRequest
  * @return ModifyInstanceConfigResponse
 */
async function modifyInstanceConfig(request: ModifyInstanceConfigRequest): ModifyInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyInstanceConfig', 'POST', '/webapi/config/modify_milvus_config', 'json', false, 'json', request);
}

model UpdateAccessControlListRequest {
  region?: string(name='Region', position='Host'),
  aclId?: string(name='AclId', example='acl-123xxx', position='Query'),
  cidr?: string(name='Cidr', example='192.168.1.0/24,172.16.0.0/16', position='Query'),
  instanceId?: string(name='InstanceId', example='c-123xxx', position='Query'),
}

model UpdateAccessControlListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: boolean(name='Data', example='true'),
  errMessage?: string(name='ErrMessage', example='The format of cidr is illegal.'),
  errorCode?: string(name='ErrorCode', example='ILLEGAL.MilvusCidrFormat'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAccessControlListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccessControlListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAccessControlList  UpdateAccessControlListRequest
  * @return UpdateAccessControlListResponse
 */
async function updateAccessControlList(request: UpdateAccessControlListRequest): UpdateAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAccessControlList', 'POST', '/webapi/milvus/update_access_control_list', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='milvus-test', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-123xxx', position='Query'),
}

model UpdateInstanceNameResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='Instance.NotFound'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceName  UpdateInstanceNameRequest
  * @return UpdateInstanceNameResponse
 */
async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceName', 'POST', '/webapi/cluster/update_name', 'json', false, 'json', request);
}

model UpdatePublicNetworkStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  cidr?: string(name='Cidr', position='Query'),
  componentType: string(name='ComponentType', description='This parameter is required.', example='Proxy', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-123xxx', position='Query'),
  publicNetworkEnabled: boolean(name='PublicNetworkEnabled', description='This parameter is required.', example='true', position='Query'),
}

model UpdatePublicNetworkStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxxx",     "EncodedDiagnosticMessage": "xxxx",     "AuthPrincipalType": "SubUser",     "AuthPrincipalDisplayName": "xxxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "milvus:xxxx" }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='Failed to find instance'),
  errMessage?: string(name='ErrMessage', example='Failed to find instance c-123xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCD-1234-5678-EFGH'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePublicNetworkStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePublicNetworkStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePublicNetworkStatus  UpdatePublicNetworkStatusRequest
  * @return UpdatePublicNetworkStatusResponse
 */
async function updatePublicNetworkStatus(request: UpdatePublicNetworkStatusRequest): UpdatePublicNetworkStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePublicNetworkStatus', 'POST', '/webapi/network/updatePublicNetworkStatus', 'json', false, 'json', request);
}

