/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'VoiceNavigator';
  @version = '2018-06-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AssociateChatbotInstanceRequest {
  chatbotInstanceId?: string(name='ChatbotInstanceId', example='chatbot-720edd02b66a', position='Query'),
  chatbotName?: string(name='ChatbotName', position='Query'),
  instanceId: string(name='InstanceId', example='af81a389-91f0-4157-8d82-720edd02b66a', position='Query'),
  nluServiceParamsJson?: string(name='NluServiceParamsJson', position='Query'),
  nluServiceType?: string(name='NluServiceType', position='Query'),
  unionSource?: string(name='UnionSource', position='Query'),
}

model AssociateChatbotInstanceResponseBody = {
  requestId?: string(name='RequestId', example='254EB995-DEDF-48A4-9101-9CA5B72FFBCC'),
}

model AssociateChatbotInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateChatbotInstanceResponseBody(name='body'),
}

async function associateChatbotInstance(request: AssociateChatbotInstanceRequest): AssociateChatbotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateChatbotInstance', 'POST', '/', 'json', false, 'json', request);
}

model AuditTTSVoiceRequest {
  accessKey?: string(name='AccessKey', position='Query'),
  appKey?: string(name='AppKey', position='Query'),
  engine?: string(name='Engine', position='Query'),
  instanceId: string(name='InstanceId', example='af81a389-91f0-4157-8d82-720edd02b66a', position='Query'),
  pitchRate?: string(name='PitchRate', position='Query'),
  secretKey?: string(name='SecretKey', position='Query'),
  speechRate: string(name='SpeechRate', example='100', position='Query'),
  text: string(name='Text', position='Query'),
  voice: string(name='Voice', example='aixia', position='Query'),
  volume: string(name='Volume', example='10', position='Query'),
}

model AuditTTSVoiceResponseBody = {
  auditionUrl?: string(name='AuditionUrl', example='http://voicenavigator-cn-shanghai.oss-cn-shanghai.aliyuncs.com/exported_files/2020-02-20/ttsConfig-1582188148528-abd8e407de0a49b381bb591bd91fc073.wav?Expires=1582188208&OSSAccessKeyId=LTAIppQY5rofntVJ&Signature=FaBassElzqGEB0H2TvTKPJsOJHs%3D'),
  requestId?: string(name='RequestId', example='254EB995-DEDF-48A4-9101-9CA5B72FFBCC'),
}

model AuditTTSVoiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuditTTSVoiceResponseBody(name='body'),
}

async function auditTTSVoice(request: AuditTTSVoiceRequest): AuditTTSVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuditTTSVoice', 'POST', '/', 'json', false, 'json', request);
}

model BeginDialogueRequest {
  calledNumber?: string(name='CalledNumber', example='10086', position='Query'),
  callingNumber: string(name='CallingNumber', example='1358158****', position='Query'),
  conversationId: string(name='ConversationId', example='c28fc549-d88f-4f6e-85ad-a0806e5e39c0', position='Query'),
  initialContext?: string(name='InitialContext', example='{\\"channelId\\":\\"fe2559d3-5fc9-4fa5-8314-32b9f762791d\\"}', position='Query'),
  instanceId: string(name='InstanceId', example='4d7db6670b8e41b5adb1f21560ea9272', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1231639035307976', position='Query'),
}

model BeginDialogueResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{\\"duration\\":31340,\\"endTime\\":1638243934786,\\"hangUpDirection\\":\\"ivr\\",\\"startTime\\":1638243903446}'),
  interruptible?: boolean(name='Interruptible', example='true'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  textResponse?: string(name='TextResponse'),
}

model BeginDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BeginDialogueResponseBody(name='body'),
}

async function beginDialogue(request: BeginDialogueRequest): BeginDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeginDialogue', 'POST', '/', 'json', false, 'json', request);
}

model CollectedNumberRequest {
  additionalContext?: string(name='AdditionalContext', position='Query'),
  conversationId: string(name='ConversationId', example='0099b75d-60fd-4c63-8541-7fbba0ae6bb0', position='Query'),
  instanceId: string(name='InstanceId', example='0099b75d-60fd-4c63-8541-7fbba0ae6bb0', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1426738157626835', position='Query'),
  number?: string(name='Number', example='1500060224', position='Query'),
}

model CollectedNumberResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{\\"duration\\":31340,\\"endTime\\":1638243934786,\\"hangUpDirection\\":\\"ivr\\",\\"startTime\\":1638243903446}'),
  interruptible?: boolean(name='Interruptible', example='false'),
  requestId?: string(name='RequestId', example='da37319b-6c83-4268-9f19-814aed62e401'),
  textResponse?: string(name='TextResponse'),
}

model CollectedNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CollectedNumberResponseBody(name='body'),
}

async function collectedNumber(request: CollectedNumberRequest): CollectedNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CollectedNumber', 'POST', '/', 'json', false, 'json', request);
}

model CreateDownloadUrlRequest {
  downloadTaskId: string(name='DownloadTaskId', example='073f092da0a847b9bf76eb88b5931c7a', position='Query'),
  fileId: string(name='FileId', example='22626c39603744f5a08d4d715315561a', position='Query'),
}

model CreateDownloadUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  fileHttpUrl?: string(name='FileHttpUrl', example='http://ssml-test.oss-cn-shanghai.aliyuncs.com/key'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='get upload tool url success'),
  requestId?: string(name='RequestId', example='7401D698-0AAC-5909-B68E-88C68805FFB8'),
  success?: boolean(name='Success', example='True'),
}

model CreateDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDownloadUrlResponseBody(name='body'),
}

async function createDownloadUrl(request: CreateDownloadUrlRequest): CreateDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDownloadUrl', 'GET', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  concurrency: long(name='Concurrency', example='10', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  nluServiceParamsJson?: string(name='NluServiceParamsJson', position='Query'),
  unionInstanceId?: string(name='UnionInstanceId', position='Query'),
  unionSource?: string(name='UnionSource', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='c28fc549-d88f-4f6e-85ad-a0806e5e39c0'),
  requestId?: string(name='RequestId', example='9ab43460-c0b9-40e2-8447-48d82c97fc67'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model DebugBeginDialogueRequest {
  calledNumber?: string(name='CalledNumber', example='10086', position='Query'),
  callingNumber: string(name='CallingNumber', example='135815*****', position='Query'),
  conversationId: string(name='ConversationId', example='8a503680-815d-473e-a9b0-e010f47a64d2', position='Query'),
  initialContext?: string(name='InitialContext', example='{}', position='Query'),
  instanceId: string(name='InstanceId', example='8a503680-815d-473e-a9b0-e010f47a64d2', position='Query'),
}

model DebugBeginDialogueResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{}'),
  interruptible?: boolean(name='Interruptible', example='true'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  textResponse?: string(name='TextResponse'),
}

model DebugBeginDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DebugBeginDialogueResponseBody(name='body'),
}

async function debugBeginDialogue(request: DebugBeginDialogueRequest): DebugBeginDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugBeginDialogue', 'POST', '/', 'json', false, 'json', request);
}

model DebugCollectedNumberRequest {
  conversationId: string(name='ConversationId', example='7cefbff0-8d50-4d6f-b93c-73cee23c1555', position='Query'),
  instanceId: string(name='InstanceId', example='7cefbff0-8d50-4d6f-b93c-73cee23c1555', position='Query'),
  number?: string(name='Number', example='123', position='Query'),
}

model DebugCollectedNumberResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{}'),
  interruptible?: boolean(name='Interruptible', example='true'),
  requestId?: string(name='RequestId', example='abb4aa26-3a8e-43dd-82f8-0c3898c9c67f'),
  textResponse?: string(name='TextResponse'),
}

model DebugCollectedNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DebugCollectedNumberResponseBody(name='body'),
}

async function debugCollectedNumber(request: DebugCollectedNumberRequest): DebugCollectedNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugCollectedNumber', 'POST', '/', 'json', false, 'json', request);
}

model DebugDialogueRequest {
  additionalContext?: string(name='AdditionalContext', example='{}', position='Query'),
  conversationId: string(name='ConversationId', example='7cefbff0-8d50-4d6f-b93c-73cee23c1555', position='Query'),
  instanceId: string(name='InstanceId', example='abb4aa26-3a8e-43dd-82f8-0c3898c9c67f', position='Query'),
  utterance: string(name='Utterance', position='Query'),
}

model DebugDialogueResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{}'),
  interruptible?: boolean(name='Interruptible', example='true'),
  requestId?: string(name='RequestId', example='d74d6290-7cbe-4436-b5d7-014ebb0f4060'),
  textResponse?: string(name='TextResponse', example='80d11be3-faad-4101-b4b0-59dbea28aaf0'),
}

model DebugDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DebugDialogueResponseBody(name='body'),
}

async function debugDialogue(request: DebugDialogueRequest): DebugDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugDialogue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', example='d74d6290-7cbe-4436-b5d7-014ebb0f4060', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='d74d6290-7cbe-4436-b5d7-014ebb0f4060'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConversationRequest {
  conversationId: string(name='ConversationId', example='15608cce-36be-43d5-9361-178cbe64127b', position='Query'),
  instanceId: string(name='InstanceId', example='5daac920-d6c1-429f-a95f-2a798f5255b5', position='Query'),
}

model DescribeConversationResponseBody = {
  beginTime?: long(name='BeginTime', example='1582103260434'),
  callingNumber?: string(name='CallingNumber', example='138106*****'),
  conversationId?: string(name='ConversationId', example='2d5aa451-661f-4f08-b0c4-28eec78decc4'),
  effectiveAnswerCount?: int32(name='EffectiveAnswerCount', example='8'),
  endTime?: long(name='EndTime', example='1582103299434'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  skillGroupId?: string(name='SkillGroupId', example='ABABCBAC'),
  transferredToAgent?: boolean(name='TransferredToAgent', example='true'),
  userUtteranceCount?: int32(name='UserUtteranceCount', example='10'),
}

model DescribeConversationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConversationResponseBody(name='body'),
}

async function describeConversation(request: DescribeConversationRequest): DescribeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConversation', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConversationContextRequest {
  conversationId: string(name='ConversationId', example='361c8a53-0e29-42f3-8aa7-c7752d010399', position='Query'),
  instanceId: string(name='InstanceId', example='026ca0f4-483b-4252-ae1d-1f15f056f8b9', position='Query'),
}

model DescribeConversationContextResponseBody = {
  conversationContext?: string(name='ConversationContext', example='{         "CallingNumber": "135815***",         "AdditionalContext": "",         "ConversationId": "361c8a53-0e29-42f3-8aa7-c7752d010399"     }'),
  requestId?: string(name='RequestId', example='b19af5ce5314ac08108d1b33fe20e15'),
}

model DescribeConversationContextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConversationContextResponseBody(name='body'),
}

async function describeConversationContext(request: DescribeConversationContextRequest): DescribeConversationContextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConversationContext', 'GET', '/', 'json', false, 'json', request);
}

model DescribeExportProgressRequest {
  exportTaskId: string(name='ExportTaskId', example='0de8e5ccc2b645039ae6fbda443da73f', position='Query'),
  instanceId: string(name='InstanceId', example='868eef14-7515-4856-8a50-5c9a22abdbcc', position='Query'),
}

model DescribeExportProgressResponseBody = {
  fileHttpUrl?: string(name='FileHttpUrl', example='http://ssml-test.oss-cn-shanghai.aliyuncs.com/key'),
  requestId?: string(name='RequestId', example='b19af5ce5314ac08108d1b33fe20e15'),
  status?: string(name='Status', example='FINISHED'),
}

model DescribeExportProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExportProgressResponseBody(name='body'),
}

async function describeExportProgress(request: DescribeExportProgressRequest): DescribeExportProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportProgress', 'GET', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  instanceId: string(name='InstanceId', example='ecbfa5e3-1838-4e8a-aa08-fa8b713b82df', position='Query'),
}

model DescribeInstanceResponseBody = {
  abilityType?: string(name='AbilityType'),
  applicableOperations?: [ string ](name='ApplicableOperations'),
  concurrency?: long(name='Concurrency', example='10'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId', example='test1_instanceId'),
  modifyTime?: long(name='ModifyTime', example='1532436395329'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  nluServiceParamsJson?: string(name='NluServiceParamsJson'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  status?: string(name='Status', example='Drafted'),
  unionInstanceId?: string(name='UnionInstanceId'),
  unionSource?: string(name='UnionSource'),
}

model DescribeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNavigationConfigRequest {
  instanceId: string(name='InstanceId', example='287289b6-1510-4e64-9224-39b53ad89dd2', position='Query'),
}

model DescribeNavigationConfigResponseBody = {
  greetingConfig?: {
    greetingWords?: string(name='GreetingWords'),
    intentTrigger?: string(name='IntentTrigger'),
    sourceType?: string(name='SourceType', example='chatbotIntent'),
  }(name='GreetingConfig'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  silenceTimeoutConfig?: {
    finalAction?: string(name='FinalAction', example='HangUp'),
    finalActionParams?: string(name='FinalActionParams', example='{}'),
    finalPrompt?: string(name='FinalPrompt'),
    intentTrigger?: string(name='IntentTrigger', description='""', example='""'),
    prompt?: string(name='Prompt'),
    sourceType?: string(name='SourceType', example='chatbotIntent'),
    threshold?: int32(name='Threshold', example='3'),
    timeout?: long(name='Timeout', example='10'),
  }(name='SilenceTimeoutConfig'),
  unrecognizingConfig?: {
    finalAction?: string(name='FinalAction', example='TransferToAgent'),
    finalActionParams?: string(name='FinalActionParams', example='{ \\"skillGroupId\\": \\"fallbackSkillGroup\\" }'),
    finalPrompt?: string(name='FinalPrompt'),
    prompt?: string(name='Prompt'),
    threshold?: int32(name='Threshold', example='3'),
  }(name='UnrecognizingConfig'),
}

model DescribeNavigationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNavigationConfigResponseBody(name='body'),
}

async function describeNavigationConfig(request: DescribeNavigationConfigRequest): DescribeNavigationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNavigationConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRecordingRequest {
  conversationId: string(name='ConversationId', example='abb4aa26-3a8e-43dd-82f8-0c3898c9c67f', position='Query'),
  instanceId: string(name='InstanceId', example='7cefbff0-8d50-4d6f-b93c-73cee23c1555', position='Query'),
  needVoiceSliceRecording?: boolean(name='NeedVoiceSliceRecording', position='Query'),
}

model DescribeRecordingResponseBody = {
  fileName?: string(name='FileName', example='2019080913202222.wav'),
  filePath?: string(name='FilePath', example='url'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  voiceSliceRecordingListJson?: string(name='VoiceSliceRecordingListJson'),
}

model DescribeRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecordingResponseBody(name='body'),
}

async function describeRecording(request: DescribeRecordingRequest): DescribeRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecording', 'GET', '/', 'json', false, 'json', request);
}

model DescribeStatisticalDataRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', example='1582283640000', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', example='1582298040000', position='Query'),
  instanceId: string(name='InstanceId', example='c28fc549-d88f-4f6e-85ad-a0806e5e39c0', position='Query'),
  timeUnit: string(name='TimeUnit', example='Day/Hour', position='Query'),
}

model DescribeStatisticalDataResponseBody = {
  conversationTotalNum?: long(name='ConversationTotalNum', example='100'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  resolvedQuestionTotalNum?: long(name='ResolvedQuestionTotalNum', example='80'),
  statisticalDataReports?: [ 
    {
      dialoguePassRate?: string(name='DialoguePassRate', example='80.00%'),
      knowledgeHitRate?: string(name='KnowledgeHitRate', example='80.00%'),
      resolutionRate?: string(name='ResolutionRate', example='80.00%'),
      resolvedQuestionNum?: int32(name='ResolvedQuestionNum', example='80'),
      statisticalDate?: string(name='StatisticalDate', example='19:00:00'),
      totalConversationNum?: int32(name='TotalConversationNum', example='100'),
      validAnswerRate?: string(name='ValidAnswerRate', example='80.0'),
    }
  ](name='StatisticalDataReports'),
  totalDialoguePassRate?: string(name='TotalDialoguePassRate', example='80.00%'),
  totalKnowledgeHitRate?: string(name='TotalKnowledgeHitRate', example='80.00%'),
  totalResolutionRate?: string(name='TotalResolutionRate', example='80.00%'),
  totalValidAnswerRate?: string(name='TotalValidAnswerRate', example='80.00%'),
}

model DescribeStatisticalDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStatisticalDataResponseBody(name='body'),
}

async function describeStatisticalData(request: DescribeStatisticalDataRequest): DescribeStatisticalDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticalData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeTTSConfigRequest {
  instanceId: string(name='InstanceId', example='dc437bba-5a25-4bbc-b4c2-f268864bebb5', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1971226538081821', position='Query'),
}

model DescribeTTSConfigResponseBody = {
  appKey?: string(name='AppKey'),
  engine?: string(name='Engine'),
  engineXunfei?: string(name='EngineXunfei'),
  nlsServiceType?: string(name='NlsServiceType'),
  pitchRate?: int32(name='PitchRate'),
  requestId?: string(name='RequestId', example='F132DDBA-66C4-5BD3-BF7E-9642FE877158'),
  speechRate?: int32(name='SpeechRate', example='-150'),
  voice?: string(name='Voice', example='aixia'),
  volume?: int32(name='Volume', example='50'),
}

model DescribeTTSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTTSConfigResponseBody(name='body'),
}

async function describeTTSConfig(request: DescribeTTSConfigRequest): DescribeTTSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTTSConfig', 'GET', '/', 'json', false, 'json', request);
}

model DialogueRequest {
  additionalContext?: string(name='AdditionalContext', example='{}', position='Query'),
  calledNumber?: string(name='CalledNumber', example='10086', position='Query'),
  callingNumber?: string(name='CallingNumber', example='18851708605', position='Query'),
  conversationId: string(name='ConversationId', example='da37319b-6c83-4268-9f19-814aed62e401', position='Query'),
  emotion?: string(name='Emotion', position='Query'),
  instanceId: string(name='InstanceId', example='21e0b2a3-168d-4ba7-9009-afc42666eb54', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1426738157626835', position='Query'),
  utterance: string(name='Utterance', position='Query'),
}

model DialogueResponseBody = {
  action?: string(name='Action', example='Broadcast'),
  actionParams?: string(name='ActionParams', example='{\\"duration\\":2420,\\"endTime\\":1651717326805,\\"hangUpDirection\\":\\"client\\",\\"hasLastPlaybackCompleted\\":true,\\"startTime\\":1651717324385}'),
  interruptible?: boolean(name='Interruptible', example='true'),
  requestId?: string(name='RequestId', example='9DB8BA95-4513-54B9-9C67-A28909CFB4AD'),
  textResponse?: string(name='TextResponse'),
}

model DialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DialogueResponseBody(name='body'),
}

async function dialogue(request: DialogueRequest): DialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Dialogue', 'POST', '/', 'json', false, 'json', request);
}

model DisableInstanceRequest {
  instanceId: string(name='InstanceId', example='da37319b-6c83-4268-9f19-814aed62e401', position='Query'),
}

model DisableInstanceResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  status?: string(name='Status', example='true'),
}

model DisableInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableInstanceResponseBody(name='body'),
}

async function disableInstance(request: DisableInstanceRequest): DisableInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInstance', 'POST', '/', 'json', false, 'json', request);
}

model EnableInstanceRequest {
  instanceId: string(name='InstanceId', example='da37319b-6c83-4268-9f19-814aed62e401', position='Query'),
}

model EnableInstanceResponseBody = {
  requestId?: string(name='RequestId', example='3a530dc0-7cfa-48f6-9539-bf9001e77b16'),
  status?: string(name='Status', example='true'),
}

model EnableInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableInstanceResponseBody(name='body'),
}

async function enableInstance(request: EnableInstanceRequest): EnableInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstance', 'POST', '/', 'json', false, 'json', request);
}

model EndDialogueRequest {
  conversationId: string(name='ConversationId', example='8fb819b5-d032-48a9-ae5e-cff041b83596', position='Query'),
  hangUpParams?: string(name='HangUpParams', example='{\\"duration\\":40,\\"endTime\\":1645082505345,\\"hangUpDirection\\":\\"ivr\\",\\"hasLastPlaybackCompleted\\":true,\\"startTime\\":1645082505305}', position='Query'),
  instanceId: string(name='InstanceId', example='e48e45dd-e47a-4744-a063-f08cbebb1c5a', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1399572315967217', position='Query'),
}

model EndDialogueResponseBody = {
  requestId?: string(name='RequestId', example='e48e45dd-e47a-4744-a063-f08cbebb1c5a'),
}

model EndDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EndDialogueResponseBody(name='body'),
}

async function endDialogue(request: EndDialogueRequest): EndDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EndDialogue', 'POST', '/', 'json', false, 'json', request);
}

model ExportConversationDetailsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', example='1582266750353', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', example='1640793599000', position='Query'),
  callingNumber?: string(name='CallingNumber', example='13581588**', position='Query'),
  instanceId: string(name='InstanceId', example='6c01a99f-1b72-4f75-a8bd-3875766bd19d', position='Query'),
  options?: [ string ](name='Options', position='Query'),
  result?: int32(name='Result', position='Query'),
  roundsLeftRange?: int32(name='RoundsLeftRange', position='Query'),
  roundsRightRange?: int32(name='RoundsRightRange', position='Query'),
}

model ExportConversationDetailsResponseBody = {
  exportTaskId?: string(name='ExportTaskId', example='6203fc87271a420c98eab6c2bbc2d856'),
  requestId?: string(name='RequestId', example='75BAAB9B-40B2-5FF5-A59A-7BCF8154C6EE'),
}

model ExportConversationDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportConversationDetailsResponseBody(name='body'),
}

async function exportConversationDetails(request: ExportConversationDetailsRequest): ExportConversationDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportConversationDetails', 'POST', '/', 'json', false, 'json', request);
}

model ExportStatisticalDataRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', example='1582266750353', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', example='1582266750353', position='Query'),
  exportType: string(name='ExportType', example='statistical', position='Query'),
  instanceId: string(name='InstanceId', example='29b52d70-d9fe-4fe0-8476-8aaacbcfdc84', position='Query'),
  timeUnit: string(name='TimeUnit', example='Hour', position='Query'),
}

model ExportStatisticalDataResponseBody = {
  exportTaskId?: string(name='ExportTaskId', example='6be5a9f1-406e-424e-a17b-b6fb86ee3cc9'),
  requestId?: string(name='RequestId', example='c62e6789-28a8-41db-941e-171a01d3b3b9'),
}

model ExportStatisticalDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportStatisticalDataResponseBody(name='body'),
}

async function exportStatisticalData(request: ExportStatisticalDataRequest): ExportStatisticalDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportStatisticalData', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadUrlRequest {
  callerBid?: string(name='CallerBid', position='Body'),
  callerIp?: string(name='CallerIp', position='Body'),
  callerParentId?: long(name='CallerParentId', position='Body'),
  callerType?: string(name='CallerType', position='Body'),
  callerUid?: long(name='CallerUid', position='Body'),
  clientIp?: string(name='ClientIp', position='Body'),
  environment?: int32(name='Environment', position='Body'),
  fileName?: string(name='FileName', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Body'),
  key?: string(name='Key', position='Body'),
  mfaPresent?: boolean(name='MfaPresent', position='Body'),
  proxyOriginalSecurityTransport?: boolean(name='ProxyOriginalSecurityTransport', position='Body'),
  proxyOriginalSourceIp?: string(name='ProxyOriginalSourceIp', position='Body'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  securityToken?: string(name='SecurityToken', position='Body'),
  securityTransport?: boolean(name='SecurityTransport', position='Body'),
  tenantId?: long(name='TenantId', position='Body'),
  tenantName?: string(name='TenantName', position='Body'),
  userId?: long(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
  xspaceServicerId?: long(name='XspaceServicerId', position='Body'),
  xspaceTenantBuId?: long(name='XspaceTenantBuId', position='Body'),
}

model GenerateUploadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessId?: string(name='AccessId'),
    expire?: int32(name='Expire'),
    folder?: string(name='Folder'),
    host?: string(name='Host'),
    message?: string(name='Message'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
    success?: boolean(name='Success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateUploadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadUrlResponseBody(name='body'),
}

async function generateUploadUrl(request: GenerateUploadUrlRequest): GenerateUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetAsrConfigRequest {
  configLevel?: int32(name='ConfigLevel', example='1', position='Query'),
  entryId?: string(name='EntryId', example='3b1d3031-8b6e-460a-8640-d330f2ca50b8', position='Query'),
}

model GetAsrConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    asrAcousticModelId?: string(name='AsrAcousticModelId', example='3b1d3031-8b6e-460a-8640-d330f2ca50b8'),
    asrClassVocabularyId?: string(name='AsrClassVocabularyId', example='3b1d3031-8b6e-460a-8640-d330f2ca50b8'),
    asrCustomizationId?: string(name='AsrCustomizationId', example='3b1d3031-8b6e-460a-8640-d330f2ca50b8'),
    asrVocabularyId?: string(name='AsrVocabularyId', example='3b1d3031-8b6e-460a-8640-d330f2ca50b8'),
  }(name='Data'),
  errorMsg?: string(name='ErrorMsg', example='Not Found'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  success?: boolean(name='Success', example='True'),
}

model GetAsrConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsrConfigResponseBody(name='body'),
}

async function getAsrConfig(request: GetAsrConfigRequest): GetAsrConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsrConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetRealTimeConcurrencyRequest {
  instanceId: string(name='InstanceId', example='c112c168ed664c0a851f9ca72d2f7999', position='Query'),
}

model GetRealTimeConcurrencyResponseBody = {
  maxConcurrency?: long(name='MaxConcurrency', example='2'),
  realTimeConcurrency?: long(name='RealTimeConcurrency', example='1'),
  requestId?: string(name='RequestId', example='E6E61E1A-D2DC-5ACF-AED4-A115B6691F98'),
  timestamp?: long(name='Timestamp', example='1661584255029'),
}

model GetRealTimeConcurrencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealTimeConcurrencyResponseBody(name='body'),
}

async function getRealTimeConcurrency(request: GetRealTimeConcurrencyRequest): GetRealTimeConcurrencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealTimeConcurrency', 'GET', '/', 'json', false, 'json', request);
}

model ListChatbotInstancesRequest {
  instanceId?: string(name='InstanceId', example='af81a389-91f0-4157-8d82-720edd02b66a', position='Query'),
  nluServiceParamsJson?: string(name='NluServiceParamsJson', position='Query'),
  nluServiceType?: string(name='NluServiceType', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  unionSource?: string(name='UnionSource', position='Query'),
}

model ListChatbotInstancesResponseBody = {
  bots?: [ 
    {
      avatar?: string(name='Avatar', example='https://dss0.ali.com/70cFuHS.jpg'),
      createTime?: string(name='CreateTime', example='1582266750353'),
      instanceId?: string(name='InstanceId', example='af81a389-91f0-4157-8d82-720edd02b66a'),
      introduction?: string(name='Introduction', example='‘’'),
      languageCode?: string(name='LanguageCode', example='zh-cn'),
      name?: string(name='Name'),
      timeZone?: string(name='TimeZone', example='UTC+8'),
    }
  ](name='Bots'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='da37319b-6c83-4268-9f19-814aed62e401'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListChatbotInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatbotInstancesResponseBody(name='body'),
}

async function listChatbotInstances(request: ListChatbotInstancesRequest): ListChatbotInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatbotInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListConversationDetailsRequest {
  conversationId: string(name='ConversationId', example='a2c26e67-5984-4935-984e-bcee52971993', position='Query'),
  instanceId: string(name='InstanceId', example='82b2eaae-ce5c-45f8-8231-f15b6b27e55c', position='Query'),
}

model ListConversationDetailsResponseBody = {
  conversationDetails?: [ 
    {
      action?: string(name='Action', example='Dialogue'),
      actionParams?: string(name='ActionParams', example='{}'),
      conversationId?: string(name='ConversationId', example='af81a389-91f0-4157-8d82-720edd02b66a'),
      createTime?: long(name='CreateTime', example='1582266750353'),
      sequenceId?: string(name='SequenceId', example='af81a389-91f0-4157-8d82-720edd02b66a'),
      speaker?: string(name='Speaker', example='Chatbot'),
      utterance?: string(name='Utterance'),
    }
  ](name='ConversationDetails'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ListConversationDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConversationDetailsResponseBody(name='body'),
}

async function listConversationDetails(request: ListConversationDetailsRequest): ListConversationDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConversationDetails', 'GET', '/', 'json', false, 'json', request);
}

model ListConversationsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', example='1638288000000', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', example='1637547875311', position='Query'),
  callingNumber?: string(name='CallingNumber', example='138106*****', position='Query'),
  instanceId: string(name='InstanceId', example='da37319b-6c83-4268-9f19-814aed62e401', position='Query'),
  isSandBox?: string(name='IsSandBox', example='false', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  query?: string(name='Query', example='13788914724', position='Query'),
  result?: long(name='Result', example='0', position='Query'),
  roundsLeftRange?: int32(name='RoundsLeftRange', position='Query'),
  roundsRightRange?: int32(name='RoundsRightRange', position='Query'),
}

model ListConversationsResponseBody = {
  conversations?: [ 
    {
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber', example='135815884***'),
      conversationId?: string(name='ConversationId', example='82b2eaae-ce5c-45f8-8231-f15b6b27e55c'),
      endReason?: int32(name='EndReason', example='1'),
      endTime?: long(name='EndTime', example='1582266750353'),
      hasLastPlaybackCompleted?: boolean(name='HasLastPlaybackCompleted', example='true'),
      hasToAgent?: boolean(name='HasToAgent'),
      rounds?: int32(name='Rounds', example='2'),
      sandBox?: boolean(name='SandBox', example='true'),
      skillGroup?: string(name='SkillGroup'),
      startTime?: long(name='StartTime', example='1641625694286'),
    }
  ](name='Conversations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='a2c26e67-5984-4935-984e-bcee52971993'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListConversationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConversationsResponseBody(name='body'),
}

async function listConversations(request: ListConversationsRequest): ListConversationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConversations', 'GET', '/', 'json', false, 'json', request);
}

model ListDownloadTasksRequest {
  pageNumber: int32(name='PageNumber', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', example='5', minimum=1, maximum=50, position='Query'),
}

model ListDownloadTasksResponseBody = {
  code?: string(name='Code', example='OK'),
  downloadTasks?: {
    list?: [ 
      {
        downloadTaskFiles?: [ 
          {
            fileId?: string(name='FileId', example='c32bf5675b704dc5b19200a89d2e85f1'),
            progress?: int32(name='Progress', example='70'),
            status?: string(name='Status', example='Published'),
            title?: string(name='Title'),
          }
        ](name='DownloadTaskFiles'),
        expireTime?: long(name='ExpireTime', example='1637119221702'),
        status?: string(name='Status', example='Expired'),
        taskId?: string(name='TaskId', example='cb9aba69-f578-42b2-aa2f-3e5a41947db8'),
        title?: string(name='Title'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='DownloadTasks'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='D24E0148-6D40-550E-9471-B2C5A34C3D12'),
  success?: boolean(name='Success', example='True'),
}

model ListDownloadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownloadTasksResponseBody(name='body'),
}

async function listDownloadTasks(request: ListDownloadTasksRequest): ListDownloadTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDownloadTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  instanceIdListJsonString?: string(name='InstanceIdListJsonString', position='Query'),
  name?: string(name='Name', position='Query'),
  nluServiceTypeListJsonString?: string(name='NluServiceTypeListJsonString', example='[Managed]', position='Query'),
  number?: string(name='Number', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  status?: string(name='Status', position='Query'),
  unionInstanceId?: string(name='UnionInstanceId', position='Query'),
  unionSource?: string(name='UnionSource', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      applicableOperations?: [ string ](name='ApplicableOperations'),
      concurrency?: long(name='Concurrency', example='10'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId', example='dc437bba-5a25-4bbc-b4c2-f268864bebb5'),
      modifyTime?: long(name='ModifyTime', example='1582266750353'),
      modifyUserName?: string(name='ModifyUserName', example='xxx'),
      name?: string(name='Name'),
      nluServiceParamsJson?: string(name='NluServiceParamsJson'),
      numbers?: [ string ](name='Numbers'),
      status?: string(name='Status', example='Published'),
      unionInstanceId?: string(name='UnionInstanceId'),
      unionSource?: string(name='UnionSource'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A8AED3C8-F57B-5D71-9A34-4A170287533F'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'GET', '/', 'json', false, 'json', request);
}

model ModifyAsrConfigRequest {
  asrAcousticModelId?: string(name='AsrAcousticModelId', example='6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22', position='Query'),
  asrClassVocabularyId?: string(name='AsrClassVocabularyId', example='6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22', position='Query'),
  asrCustomizationId?: string(name='AsrCustomizationId', example='6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22', position='Query'),
  asrVocabularyId?: string(name='AsrVocabularyId', example='6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22', position='Query'),
  configLevel?: int32(name='ConfigLevel', example='0', position='Query'),
  entryId?: string(name='EntryId', example='6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22', position='Query'),
}

model ModifyAsrConfigResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    affectedRows?: int32(name='AffectedRows'),
  }(name='Data'),
  errorMsg?: string(name='ErrorMsg', example='Not Found'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='da37319b-6c83-4268-9f19-814aed62e401'),
  success?: boolean(name='Success', example='True'),
}

model ModifyAsrConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAsrConfigResponseBody(name='body'),
}

async function modifyAsrConfig(request: ModifyAsrConfigRequest): ModifyAsrConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAsrConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGreetingConfigRequest {
  greetingWords: string(name='GreetingWords', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  intentTrigger?: string(name='IntentTrigger', position='Query'),
  sourceType: string(name='SourceType', example='chatbotIntent', position='Query'),
}

model ModifyGreetingConfigResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ModifyGreetingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGreetingConfigResponseBody(name='body'),
}

async function modifyGreetingConfig(request: ModifyGreetingConfigRequest): ModifyGreetingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGreetingConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  concurrency: long(name='Concurrency', example='10', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  name?: string(name='Name', position='Query'),
}

model ModifyInstanceResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ModifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifySilenceTimeoutConfigRequest {
  finalAction: string(name='FinalAction', example='TransferToAgent', position='Query'),
  finalActionParams?: string(name='FinalActionParams', example='{}', position='Query'),
  finalPrompt: string(name='FinalPrompt', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  intentTrigger?: string(name='IntentTrigger', example='Timeout', position='Query'),
  prompt: string(name='Prompt', position='Query'),
  sourceType: string(name='SourceType', example='chatbotIntent', position='Query'),
  threshold: int32(name='Threshold', example='3', position='Query'),
  timeout: long(name='Timeout', example='20', position='Query'),
}

model ModifySilenceTimeoutConfigResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ModifySilenceTimeoutConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySilenceTimeoutConfigResponseBody(name='body'),
}

async function modifySilenceTimeoutConfig(request: ModifySilenceTimeoutConfigRequest): ModifySilenceTimeoutConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySilenceTimeoutConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTTSConfigRequest {
  appKey?: string(name='AppKey', position='Query'),
  engine?: string(name='Engine', position='Query'),
  engineXunfei?: string(name='EngineXunfei', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  nlsServiceType?: string(name='NlsServiceType', position='Query'),
  speechRate?: string(name='SpeechRate', example='100', position='Query'),
  voice?: string(name='Voice', example='aixia', position='Query'),
  volume?: string(name='Volume', example='10', position='Query'),
}

model ModifyTTSConfigResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ModifyTTSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTTSConfigResponseBody(name='body'),
}

async function modifyTTSConfig(request: ModifyTTSConfigRequest): ModifyTTSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTTSConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUnrecognizingConfigRequest {
  finalAction: string(name='FinalAction', example='TransferToAgent', position='Query'),
  finalActionParams?: string(name='FinalActionParams', example='{}', position='Query'),
  finalPrompt: string(name='FinalPrompt', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  prompt: string(name='Prompt', position='Query'),
  threshold: int32(name='Threshold', example='3', position='Query'),
}

model ModifyUnrecognizingConfigResponseBody = {
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
}

model ModifyUnrecognizingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUnrecognizingConfigResponseBody(name='body'),
}

async function modifyUnrecognizingConfig(request: ModifyUnrecognizingConfigRequest): ModifyUnrecognizingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUnrecognizingConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryConversationsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', example='1582183381000', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', example='1582356181000', position='Query'),
  callingNumber?: string(name='CallingNumber', example='02811111111', position='Query'),
  instanceId: string(name='InstanceId', example='12f407b22cbe4890ac595f09985848d5', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model QueryConversationsResponseBody = {
  conversations?: [ 
    {
      beginTime?: long(name='BeginTime', example='1582183381000'),
      callingNumber?: string(name='CallingNumber', example='02811111111'),
      conversationId?: string(name='ConversationId', example='af81a389-91f0-4157-8d82-720edd02b66a'),
      effectiveAnswerCount?: int32(name='EffectiveAnswerCount', example='8'),
      endTime?: long(name='EndTime', example='1582183481000'),
      skillGroupId?: string(name='SkillGroupId', example='AAA'),
      transferredToAgent?: boolean(name='TransferredToAgent', example='true'),
      userUtteranceCount?: int32(name='UserUtteranceCount', example='10'),
    }
  ](name='Conversations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='14C39896-AE6D-4643-9C9A-E0566B2C2DDD'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QueryConversationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConversationsResponseBody(name='body'),
}

async function queryConversations(request: QueryConversationsRequest): QueryConversationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConversations', 'GET', '/', 'json', false, 'json', request);
}

model SaveRecordingRequest {
  conversationId: string(name='ConversationId', example='390515b5-6115-4ccf-83e2-52d5bfaf2ddf', position='Query'),
  duration: string(name='Duration', example='10', position='Query'),
  fileName: string(name='FileName', example='e6bef0db439d4048bfcf45322491becf.wav', position='Query'),
  filePath: string(name='FilePath', example='oss://test/record/', position='Query'),
  instanceId: string(name='InstanceId', example='af81a389-91f0-4157-8d82-720edd02b66a', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1971226538081821', position='Query'),
  startTime: long(name='StartTime', example='1582267398628', position='Query'),
  type: string(name='Type', example='Source', position='Query'),
  voiceSliceRecordingList?: string(name='VoiceSliceRecordingList', position='Query'),
}

model SaveRecordingResponseBody = {
  requestId?: string(name='RequestId', example='254EB995-DEDF-48A4-9101-9CA5B72FFBCC'),
}

model SaveRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveRecordingResponseBody(name='body'),
}

async function saveRecording(request: SaveRecordingRequest): SaveRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRecording', 'POST', '/', 'json', false, 'json', request);
}

model SilenceTimeoutRequest {
  conversationId: string(name='ConversationId', example='0099b75d-60fd-4c63-8541-7fbba0ae6bb0', position='Query'),
  initialContext?: string(name='InitialContext', example='{}', position='Query'),
  instanceId: string(name='InstanceId', example='0099b75d-60fd-4c63-8541-7fbba0ae6bb0', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='1231639035307976', position='Query'),
}

model SilenceTimeoutResponseBody = {
  action?: string(name='Action', example='TransferToAgent'),
  actionParams?: string(name='ActionParams', example='{ "skillGroupId": "ABC"}'),
  interruptible?: boolean(name='Interruptible', example='false'),
  requestId?: string(name='RequestId', example='254EB995-DEDF-48A4-9101-9CA5B72FFBCC'),
  textResponse?: string(name='TextResponse'),
}

model SilenceTimeoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SilenceTimeoutResponseBody(name='body'),
}

async function silenceTimeout(request: SilenceTimeoutRequest): SilenceTimeoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SilenceTimeout', 'POST', '/', 'json', false, 'json', request);
}

