/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'VoiceNavigator';
  @version = '2018-06-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AssociateChatbotInstanceRequest {
  chatbotInstanceId: string(name='ChatbotInstanceId', position='Query'),
  chatbotName?: string(name='ChatbotName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model AssociateChatbotInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateChatbotInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateChatbotInstanceResponseBody(name='body'),
}

async function associateChatbotInstance(request: AssociateChatbotInstanceRequest): AssociateChatbotInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateChatbotInstance', 'POST', '/', 'json', false, 'json', request);
}

model AuditTTSVoiceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  speechRate: string(name='SpeechRate', position='Query'),
  text: string(name='Text', position='Query'),
  voice: string(name='Voice', position='Query'),
  volume: string(name='Volume', position='Query'),
}

model AuditTTSVoiceResponseBody = {
  auditionUrl?: string(name='AuditionUrl'),
  requestId?: string(name='RequestId'),
}

model AuditTTSVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: AuditTTSVoiceResponseBody(name='body'),
}

async function auditTTSVoice(request: AuditTTSVoiceRequest): AuditTTSVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuditTTSVoice', 'POST', '/', 'json', false, 'json', request);
}

model BeginDialogueRequest {
  calledNumber?: string(name='CalledNumber', position='Query'),
  callingNumber: string(name='CallingNumber', position='Query'),
  conversationId: string(name='ConversationId', position='Query'),
  initialContext?: string(name='InitialContext', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
}

model BeginDialogueResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model BeginDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: BeginDialogueResponseBody(name='body'),
}

async function beginDialogue(request: BeginDialogueRequest): BeginDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeginDialogue', 'POST', '/', 'json', false, 'json', request);
}

model CollectedNumberRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
  number?: string(name='Number', position='Query'),
}

model CollectedNumberResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model CollectedNumberResponse = {
  headers: map[string]string(name='headers'),
  body: CollectedNumberResponseBody(name='body'),
}

async function collectedNumber(request: CollectedNumberRequest): CollectedNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CollectedNumber', 'POST', '/', 'json', false, 'json', request);
}

model CreateDownloadUrlRequest {
  downloadTaskId: string(name='DownloadTaskId', position='Query'),
  fileId: string(name='FileId', position='Query'),
}

model CreateDownloadUrlResponseBody = {
  code?: string(name='Code'),
  fileHttpUrl?: string(name='FileHttpUrl'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDownloadUrlResponseBody(name='body'),
}

async function createDownloadUrl(request: CreateDownloadUrlRequest): CreateDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDownloadUrl', 'GET', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  concurrency: long(name='Concurrency', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model DebugBeginDialogueRequest {
  calledNumber?: string(name='CalledNumber', position='Query'),
  callingNumber: string(name='CallingNumber', position='Query'),
  conversationId: string(name='ConversationId', position='Query'),
  initialContext?: string(name='InitialContext', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DebugBeginDialogueResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model DebugBeginDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DebugBeginDialogueResponseBody(name='body'),
}

async function debugBeginDialogue(request: DebugBeginDialogueRequest): DebugBeginDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugBeginDialogue', 'POST', '/', 'json', false, 'json', request);
}

model DebugCollectedNumberRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  number?: string(name='Number', position='Query'),
}

model DebugCollectedNumberResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model DebugCollectedNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DebugCollectedNumberResponseBody(name='body'),
}

async function debugCollectedNumber(request: DebugCollectedNumberRequest): DebugCollectedNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugCollectedNumber', 'POST', '/', 'json', false, 'json', request);
}

model DebugDialogueRequest {
  additionalContext?: string(name='AdditionalContext', position='Query'),
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  utterance: string(name='Utterance', position='Query'),
}

model DebugDialogueResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model DebugDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DebugDialogueResponseBody(name='body'),
}

async function debugDialogue(request: DebugDialogueRequest): DebugDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DebugDialogue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConversationRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeConversationResponseBody = {
  beginTime?: long(name='BeginTime'),
  callingNumber?: string(name='CallingNumber'),
  conversationId?: string(name='ConversationId'),
  effectiveAnswerCount?: int32(name='EffectiveAnswerCount'),
  endTime?: long(name='EndTime'),
  requestId?: string(name='RequestId'),
  skillGroupId?: string(name='SkillGroupId'),
  transferredToAgent?: boolean(name='TransferredToAgent'),
  userUtteranceCount?: int32(name='UserUtteranceCount'),
}

model DescribeConversationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConversationResponseBody(name='body'),
}

async function describeConversation(request: DescribeConversationRequest): DescribeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConversation', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConversationContextRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeConversationContextResponseBody = {
  conversationContext?: string(name='ConversationContext'),
  requestId?: string(name='RequestId'),
}

model DescribeConversationContextResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConversationContextResponseBody(name='body'),
}

async function describeConversationContext(request: DescribeConversationContextRequest): DescribeConversationContextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConversationContext', 'GET', '/', 'json', false, 'json', request);
}

model DescribeExportProgressRequest {
  exportTaskId: string(name='ExportTaskId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeExportProgressResponseBody = {
  fileHttpUrl?: string(name='FileHttpUrl'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeExportProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportProgressResponseBody(name='body'),
}

async function describeExportProgress(request: DescribeExportProgressRequest): DescribeExportProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportProgress', 'GET', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeInstanceResponseBody = {
  applicableOperations?: [ string ](name='ApplicableOperations'),
  concurrency?: long(name='Concurrency'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  modifyTime?: long(name='ModifyTime'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNavigationConfigRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeNavigationConfigResponseBody = {
  greetingConfig?: {
    greetingWords?: string(name='GreetingWords'),
    intentTrigger?: string(name='IntentTrigger'),
    sourceType?: string(name='SourceType'),
  }(name='GreetingConfig'),
  requestId?: string(name='RequestId'),
  silenceTimeoutConfig?: {
    finalAction?: string(name='FinalAction'),
    finalActionParams?: string(name='FinalActionParams'),
    finalPrompt?: string(name='FinalPrompt'),
    intentTrigger?: string(name='IntentTrigger'),
    prompt?: string(name='Prompt'),
    sourceType?: string(name='SourceType'),
    threshold?: int32(name='Threshold'),
    timeout?: long(name='Timeout'),
  }(name='SilenceTimeoutConfig'),
  unrecognizingConfig?: {
    finalAction?: string(name='FinalAction'),
    finalActionParams?: string(name='FinalActionParams'),
    finalPrompt?: string(name='FinalPrompt'),
    prompt?: string(name='Prompt'),
    threshold?: int32(name='Threshold'),
  }(name='UnrecognizingConfig'),
}

model DescribeNavigationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNavigationConfigResponseBody(name='body'),
}

async function describeNavigationConfig(request: DescribeNavigationConfigRequest): DescribeNavigationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNavigationConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRecordingRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  needVoiceSliceRecording?: boolean(name='NeedVoiceSliceRecording', position='Query'),
}

model DescribeRecordingResponseBody = {
  fileName?: string(name='FileName'),
  filePath?: string(name='FilePath'),
  requestId?: string(name='RequestId'),
  voiceSliceRecordingListJson?: string(name='VoiceSliceRecordingListJson'),
}

model DescribeRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordingResponseBody(name='body'),
}

async function describeRecording(request: DescribeRecordingRequest): DescribeRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecording', 'GET', '/', 'json', false, 'json', request);
}

model DescribeStatisticalDataRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  timeUnit: string(name='TimeUnit', position='Query'),
}

model DescribeStatisticalDataResponseBody = {
  conversationTotalNum?: long(name='ConversationTotalNum'),
  requestId?: string(name='RequestId'),
  resolvedQuestionTotalNum?: long(name='ResolvedQuestionTotalNum'),
  statisticalDataReports?: [ 
    {
      dialoguePassRate?: string(name='DialoguePassRate'),
      knowledgeHitRate?: string(name='KnowledgeHitRate'),
      resolutionRate?: string(name='ResolutionRate'),
      resolvedQuestionNum?: int32(name='ResolvedQuestionNum'),
      statisticalDate?: string(name='StatisticalDate'),
      totalConversationNum?: int32(name='TotalConversationNum'),
      validAnswerRate?: string(name='ValidAnswerRate'),
    }
  ](name='StatisticalDataReports'),
  totalDialoguePassRate?: string(name='TotalDialoguePassRate'),
  totalKnowledgeHitRate?: string(name='TotalKnowledgeHitRate'),
  totalResolutionRate?: string(name='TotalResolutionRate'),
  totalValidAnswerRate?: string(name='TotalValidAnswerRate'),
}

model DescribeStatisticalDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStatisticalDataResponseBody(name='body'),
}

async function describeStatisticalData(request: DescribeStatisticalDataRequest): DescribeStatisticalDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStatisticalData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeTTSConfigRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
}

model DescribeTTSConfigResponseBody = {
  appKey?: string(name='AppKey'),
  nlsServiceType?: string(name='NlsServiceType'),
  requestId?: string(name='RequestId'),
  speechRate?: int32(name='SpeechRate'),
  voice?: string(name='Voice'),
  volume?: int32(name='Volume'),
}

model DescribeTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTTSConfigResponseBody(name='body'),
}

async function describeTTSConfig(request: DescribeTTSConfigRequest): DescribeTTSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTTSConfig', 'GET', '/', 'json', false, 'json', request);
}

model DialogueRequest {
  additionalContext?: string(name='AdditionalContext', position='Query'),
  calledNumber?: string(name='CalledNumber', position='Query'),
  callingNumber?: string(name='CallingNumber', position='Query'),
  conversationId: string(name='ConversationId', position='Query'),
  emotion?: string(name='Emotion', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
  utterance: string(name='Utterance', position='Query'),
}

model DialogueResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model DialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DialogueResponseBody(name='body'),
}

async function dialogue(request: DialogueRequest): DialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Dialogue', 'POST', '/', 'json', false, 'json', request);
}

model DisableInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DisableInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DisableInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DisableInstanceResponseBody(name='body'),
}

async function disableInstance(request: DisableInstanceRequest): DisableInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInstance', 'POST', '/', 'json', false, 'json', request);
}

model EnableInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model EnableInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model EnableInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceResponseBody(name='body'),
}

async function enableInstance(request: EnableInstanceRequest): EnableInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstance', 'POST', '/', 'json', false, 'json', request);
}

model EndDialogueRequest {
  conversationId: string(name='ConversationId', position='Query'),
  hangUpParams?: string(name='HangUpParams', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
}

model EndDialogueResponseBody = {
  requestId?: string(name='RequestId'),
}

model EndDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: EndDialogueResponseBody(name='body'),
}

async function endDialogue(request: EndDialogueRequest): EndDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EndDialogue', 'POST', '/', 'json', false, 'json', request);
}

model ExportConversationDetailsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', position='Query'),
  callingNumber?: string(name='CallingNumber', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  options?: [ string ](name='Options', position='Query'),
  roundsLeftRange?: int32(name='RoundsLeftRange', position='Query'),
  roundsRightRange?: int32(name='RoundsRightRange', position='Query'),
}

model ExportConversationDetailsResponseBody = {
  exportTaskId?: string(name='ExportTaskId'),
  requestId?: string(name='RequestId'),
}

model ExportConversationDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ExportConversationDetailsResponseBody(name='body'),
}

async function exportConversationDetails(request: ExportConversationDetailsRequest): ExportConversationDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportConversationDetails', 'POST', '/', 'json', false, 'json', request);
}

model ExportStatisticalDataRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', position='Query'),
  exportType: string(name='ExportType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  timeUnit: string(name='TimeUnit', position='Query'),
}

model ExportStatisticalDataResponseBody = {
  exportTaskId?: string(name='ExportTaskId'),
  requestId?: string(name='RequestId'),
}

model ExportStatisticalDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportStatisticalDataResponseBody(name='body'),
}

async function exportStatisticalData(request: ExportStatisticalDataRequest): ExportStatisticalDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportStatisticalData', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadUrlRequest {
  callerBid?: string(name='CallerBid', position='Body'),
  callerIp?: string(name='CallerIp', position='Body'),
  callerParentId?: long(name='CallerParentId', position='Body'),
  callerType?: string(name='CallerType', position='Body'),
  callerUid?: long(name='CallerUid', position='Body'),
  clientIp?: string(name='ClientIp', position='Body'),
  environment?: int32(name='Environment', description='voicerobot.manager.dto.enums.EnvironmentType', position='Body'),
  fileName?: string(name='FileName', position='Body'),
  instanceId?: string(name='InstanceId', position='Body'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Body'),
  key?: string(name='Key', position='Body'),
  mfaPresent?: boolean(name='MfaPresent', position='Body'),
  proxyOriginalSecurityTransport?: boolean(name='ProxyOriginalSecurityTransport', position='Body'),
  proxyOriginalSourceIp?: string(name='ProxyOriginalSourceIp', position='Body'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  securityToken?: string(name='SecurityToken', position='Body'),
  securityTransport?: boolean(name='SecurityTransport', position='Body'),
  tenantId?: long(name='TenantId', position='Body'),
  tenantName?: string(name='TenantName', position='Body'),
  userId?: long(name='UserId', position='Body'),
  userName?: string(name='UserName', position='Body'),
  xspaceServicerId?: long(name='XspaceServicerId', position='Body'),
  xspaceTenantBuId?: long(name='XspaceTenantBuId', position='Body'),
}

model GenerateUploadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessId?: string(name='AccessId'),
    expire?: int32(name='Expire'),
    folder?: string(name='Folder'),
    host?: string(name='Host'),
    message?: string(name='Message'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
    success?: boolean(name='Success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateUploadUrlResponseBody(name='body'),
}

async function generateUploadUrl(request: GenerateUploadUrlRequest): GenerateUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetAsrConfigRequest {
  configLevel?: int32(name='ConfigLevel', description='策略级别，包含 0：系统，1:租户，2：实例', position='Query'),
  entryId?: string(name='EntryId', description='config_level对应的实体ID', position='Query'),
}

model GetAsrConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    asrAcousticModelId?: string(name='AsrAcousticModelId'),
    asrClassVocabularyId?: string(name='AsrClassVocabularyId'),
    asrCustomizationId?: string(name='AsrCustomizationId'),
    asrVocabularyId?: string(name='AsrVocabularyId'),
  }(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAsrConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsrConfigResponseBody(name='body'),
}

async function getAsrConfig(request: GetAsrConfigRequest): GetAsrConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsrConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetRealTimeConcurrencyRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model GetRealTimeConcurrencyResponseBody = {
  maxConcurrency?: long(name='MaxConcurrency'),
  realTimeConcurrency?: long(name='RealTimeConcurrency'),
  requestId?: string(name='RequestId'),
  timestamp?: long(name='Timestamp'),
}

model GetRealTimeConcurrencyResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealTimeConcurrencyResponseBody(name='body'),
}

async function getRealTimeConcurrency(request: GetRealTimeConcurrencyRequest): GetRealTimeConcurrencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealTimeConcurrency', 'GET', '/', 'json', false, 'json', request);
}

model ListChatbotInstancesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListChatbotInstancesResponseBody = {
  bots?: [ 
    {
      avatar?: string(name='Avatar'),
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      introduction?: string(name='Introduction'),
      languageCode?: string(name='LanguageCode'),
      name?: string(name='Name'),
      timeZone?: string(name='TimeZone'),
    }
  ](name='Bots'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListChatbotInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListChatbotInstancesResponseBody(name='body'),
}

async function listChatbotInstances(request: ListChatbotInstancesRequest): ListChatbotInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatbotInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListConversationDetailsRequest {
  conversationId: string(name='ConversationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ListConversationDetailsResponseBody = {
  conversationDetails?: [ 
    {
      action?: string(name='Action'),
      actionParams?: string(name='ActionParams'),
      conversationId?: string(name='ConversationId'),
      createTime?: long(name='CreateTime'),
      sequenceId?: string(name='SequenceId'),
      speaker?: string(name='Speaker'),
      utterance?: string(name='Utterance'),
    }
  ](name='ConversationDetails'),
  requestId?: string(name='RequestId'),
}

model ListConversationDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConversationDetailsResponseBody(name='body'),
}

async function listConversationDetails(request: ListConversationDetailsRequest): ListConversationDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConversationDetails', 'GET', '/', 'json', false, 'json', request);
}

model ListConversationsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', position='Query'),
  callingNumber?: string(name='CallingNumber', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  isSandBox?: string(name='IsSandBox', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  result?: long(name='Result', position='Query'),
  roundsLeftRange?: int32(name='RoundsLeftRange', position='Query'),
  roundsRightRange?: int32(name='RoundsRightRange', position='Query'),
}

model ListConversationsResponseBody = {
  conversations?: [ 
    {
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber'),
      conversationId?: string(name='ConversationId'),
      endReason?: int32(name='EndReason'),
      endTime?: long(name='EndTime'),
      hasLastPlaybackCompleted?: boolean(name='HasLastPlaybackCompleted'),
      hasToAgent?: boolean(name='HasToAgent'),
      rounds?: int32(name='Rounds'),
      sandBox?: boolean(name='SandBox'),
      skillGroup?: string(name='SkillGroup'),
      startTime?: long(name='StartTime'),
    }
  ](name='Conversations'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListConversationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConversationsResponseBody(name='body'),
}

async function listConversations(request: ListConversationsRequest): ListConversationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConversations', 'GET', '/', 'json', false, 'json', request);
}

model ListDownloadTasksRequest {
  pageNumber: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
}

model ListDownloadTasksResponseBody = {
  code?: string(name='Code'),
  downloadTasks?: {
    list?: [ 
      {
        downloadTaskFiles?: [ 
          {
            fileId?: string(name='FileId'),
            progress?: int32(name='Progress'),
            status?: string(name='Status'),
            title?: string(name='Title'),
          }
        ](name='DownloadTaskFiles'),
        expireTime?: long(name='ExpireTime'),
        status?: string(name='Status'),
        taskId?: string(name='TaskId'),
        title?: string(name='Title'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='DownloadTasks'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDownloadTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDownloadTasksResponseBody(name='body'),
}

async function listDownloadTasks(request: ListDownloadTasksRequest): ListDownloadTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDownloadTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  nluServiceTypeListJsonString?: string(name='NluServiceTypeListJsonString', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      applicableOperations?: [ string ](name='ApplicableOperations'),
      concurrency?: long(name='Concurrency'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      modifyTime?: long(name='ModifyTime'),
      modifyUserName?: string(name='ModifyUserName'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'GET', '/', 'json', false, 'json', request);
}

model ModifyAsrConfigRequest {
  asrAcousticModelId?: string(name='AsrAcousticModelId', position='Query'),
  asrClassVocabularyId?: string(name='AsrClassVocabularyId', position='Query'),
  asrCustomizationId?: string(name='AsrCustomizationId', position='Query'),
  asrVocabularyId?: string(name='AsrVocabularyId', position='Query'),
  configLevel?: int32(name='ConfigLevel', description='策略级别，包含 0：系统，1:租户，2：实例', position='Query'),
  entryId?: string(name='EntryId', description='config_level对应的实体ID', position='Query'),
}

model ModifyAsrConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    affectedRows?: int32(name='AffectedRows'),
  }(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAsrConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAsrConfigResponseBody(name='body'),
}

async function modifyAsrConfig(request: ModifyAsrConfigRequest): ModifyAsrConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAsrConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGreetingConfigRequest {
  greetingWords: string(name='GreetingWords', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  intentTrigger?: string(name='IntentTrigger', position='Query'),
  sourceType: string(name='SourceType', position='Query'),
}

model ModifyGreetingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGreetingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGreetingConfigResponseBody(name='body'),
}

async function modifyGreetingConfig(request: ModifyGreetingConfigRequest): ModifyGreetingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGreetingConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  concurrency: long(name='Concurrency', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
}

model ModifyInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifySilenceTimeoutConfigRequest {
  finalAction: string(name='FinalAction', position='Query'),
  finalActionParams?: string(name='FinalActionParams', position='Query'),
  finalPrompt: string(name='FinalPrompt', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  intentTrigger?: string(name='IntentTrigger', position='Query'),
  prompt: string(name='Prompt', position='Query'),
  sourceType: string(name='SourceType', position='Query'),
  threshold: int32(name='Threshold', position='Query'),
  timeout: long(name='Timeout', position='Query'),
}

model ModifySilenceTimeoutConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySilenceTimeoutConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySilenceTimeoutConfigResponseBody(name='body'),
}

async function modifySilenceTimeoutConfig(request: ModifySilenceTimeoutConfigRequest): ModifySilenceTimeoutConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySilenceTimeoutConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTTSConfigRequest {
  appKey?: string(name='AppKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nlsServiceType?: string(name='NlsServiceType', position='Query'),
  speechRate?: string(name='SpeechRate', position='Query'),
  voice?: string(name='Voice', position='Query'),
  volume?: string(name='Volume', position='Query'),
}

model ModifyTTSConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTTSConfigResponseBody(name='body'),
}

async function modifyTTSConfig(request: ModifyTTSConfigRequest): ModifyTTSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTTSConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUnrecognizingConfigRequest {
  finalAction: string(name='FinalAction', position='Query'),
  finalActionParams?: string(name='FinalActionParams', position='Query'),
  finalPrompt: string(name='FinalPrompt', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  prompt: string(name='Prompt', position='Query'),
  threshold: int32(name='Threshold', position='Query'),
}

model ModifyUnrecognizingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUnrecognizingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUnrecognizingConfigResponseBody(name='body'),
}

async function modifyUnrecognizingConfig(request: ModifyUnrecognizingConfigRequest): ModifyUnrecognizingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUnrecognizingConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryConversationsRequest {
  beginTimeLeftRange?: long(name='BeginTimeLeftRange', position='Query'),
  beginTimeRightRange?: long(name='BeginTimeRightRange', position='Query'),
  callingNumber?: string(name='CallingNumber', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryConversationsResponseBody = {
  conversations?: [ 
    {
      beginTime?: long(name='BeginTime'),
      callingNumber?: string(name='CallingNumber'),
      conversationId?: string(name='ConversationId'),
      effectiveAnswerCount?: int32(name='EffectiveAnswerCount'),
      endTime?: long(name='EndTime'),
      skillGroupId?: string(name='SkillGroupId'),
      transferredToAgent?: boolean(name='TransferredToAgent'),
      userUtteranceCount?: int32(name='UserUtteranceCount'),
    }
  ](name='Conversations'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model QueryConversationsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConversationsResponseBody(name='body'),
}

async function queryConversations(request: QueryConversationsRequest): QueryConversationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConversations', 'GET', '/', 'json', false, 'json', request);
}

model SaveRecordingRequest {
  conversationId: string(name='ConversationId', position='Query'),
  duration: string(name='Duration', position='Query'),
  fileName: string(name='FileName', position='Query'),
  filePath: string(name='FilePath', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
  voiceSliceRecordingList?: string(name='VoiceSliceRecordingList', position='Query'),
}

model SaveRecordingResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: SaveRecordingResponseBody(name='body'),
}

async function saveRecording(request: SaveRecordingRequest): SaveRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRecording', 'POST', '/', 'json', false, 'json', request);
}

model SilenceTimeoutRequest {
  conversationId: string(name='ConversationId', position='Query'),
  initialContext?: string(name='InitialContext', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceOwnerId?: long(name='InstanceOwnerId', position='Query'),
}

model SilenceTimeoutResponseBody = {
  action?: string(name='Action'),
  actionParams?: string(name='ActionParams'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  textResponse?: string(name='TextResponse'),
}

model SilenceTimeoutResponse = {
  headers: map[string]string(name='headers'),
  body: SilenceTimeoutResponseBody(name='body'),
}

async function silenceTimeout(request: SilenceTimeoutRequest): SilenceTimeoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SilenceTimeout', 'POST', '/', 'json', false, 'json', request);
}

