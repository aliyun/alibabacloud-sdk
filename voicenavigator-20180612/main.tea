/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('voicenavigator', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AssociateChatbotInstanceRequest {
  instanceId?: string(name='InstanceId'),
  chatbotInstanceId?: string(name='ChatbotInstanceId'),
  chatbotName?: string(name='ChatbotName'),
}

model AssociateChatbotInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateChatbotInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateChatbotInstanceResponseBody(name='body'),
}

async function associateChatbotInstanceWithOptions(request: AssociateChatbotInstanceRequest, runtime: Util.RuntimeOptions): AssociateChatbotInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateChatbotInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateChatbotInstance(request: AssociateChatbotInstanceRequest): AssociateChatbotInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateChatbotInstanceWithOptions(request, runtime);
}

model AuditTTSVoiceRequest {
  instanceId?: string(name='InstanceId'),
  voice?: string(name='Voice'),
  text?: string(name='Text'),
  speechRate?: string(name='SpeechRate'),
  volume?: string(name='Volume'),
}

model AuditTTSVoiceResponseBody = {
  requestId?: string(name='RequestId'),
  auditionUrl?: string(name='AuditionUrl'),
}

model AuditTTSVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: AuditTTSVoiceResponseBody(name='body'),
}

async function auditTTSVoiceWithOptions(request: AuditTTSVoiceRequest, runtime: Util.RuntimeOptions): AuditTTSVoiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AuditTTSVoice', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function auditTTSVoice(request: AuditTTSVoiceRequest): AuditTTSVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return auditTTSVoiceWithOptions(request, runtime);
}

model BeginDialogueRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  conversationId?: string(name='ConversationId'),
  initialContext?: string(name='InitialContext'),
  instanceId?: string(name='InstanceId'),
}

model BeginDialogueResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model BeginDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: BeginDialogueResponseBody(name='body'),
}

async function beginDialogueWithOptions(request: BeginDialogueRequest, runtime: Util.RuntimeOptions): BeginDialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BeginDialogue', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function beginDialogue(request: BeginDialogueRequest): BeginDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return beginDialogueWithOptions(request, runtime);
}

model CollectedNumberRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
  number?: string(name='Number'),
}

model CollectedNumberResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model CollectedNumberResponse = {
  headers: map[string]string(name='headers'),
  body: CollectedNumberResponseBody(name='body'),
}

async function collectedNumberWithOptions(request: CollectedNumberRequest, runtime: Util.RuntimeOptions): CollectedNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CollectedNumber', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function collectedNumber(request: CollectedNumberRequest): CollectedNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return collectedNumberWithOptions(request, runtime);
}

model CreateInstanceRequest {
  name?: string(name='Name'),
  description?: string(name='Description'),
  concurrency?: long(name='Concurrency'),
  chatbotInstanceId?: string(name='ChatbotInstanceId'),
  nluServiceType?: string(name='NluServiceType'),
  chatbotName?: string(name='ChatbotName'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model DebugBeginDialogueRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  conversationId?: string(name='ConversationId'),
  initialContext?: string(name='InitialContext'),
  instanceId?: string(name='InstanceId'),
}

model DebugBeginDialogueResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model DebugBeginDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DebugBeginDialogueResponseBody(name='body'),
}

async function debugBeginDialogueWithOptions(request: DebugBeginDialogueRequest, runtime: Util.RuntimeOptions): DebugBeginDialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DebugBeginDialogue', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function debugBeginDialogue(request: DebugBeginDialogueRequest): DebugBeginDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return debugBeginDialogueWithOptions(request, runtime);
}

model DebugCollectedNumberRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
  number?: string(name='Number'),
}

model DebugCollectedNumberResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model DebugCollectedNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DebugCollectedNumberResponseBody(name='body'),
}

async function debugCollectedNumberWithOptions(request: DebugCollectedNumberRequest, runtime: Util.RuntimeOptions): DebugCollectedNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DebugCollectedNumber', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function debugCollectedNumber(request: DebugCollectedNumberRequest): DebugCollectedNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return debugCollectedNumberWithOptions(request, runtime);
}

model DebugDialogueRequest {
  conversationId?: string(name='ConversationId'),
  additionalContext?: string(name='AdditionalContext'),
  instanceId?: string(name='InstanceId'),
  utterance?: string(name='Utterance'),
}

model DebugDialogueResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model DebugDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DebugDialogueResponseBody(name='body'),
}

async function debugDialogueWithOptions(request: DebugDialogueRequest, runtime: Util.RuntimeOptions): DebugDialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DebugDialogue', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function debugDialogue(request: DebugDialogueRequest): DebugDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return debugDialogueWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DescribeConversationRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
}

model DescribeConversationResponseBody = {
  effectiveAnswerCount?: int32(name='EffectiveAnswerCount'),
  conversationId?: string(name='ConversationId'),
  transferredToAgent?: boolean(name='TransferredToAgent'),
  endTime?: long(name='EndTime'),
  requestId?: string(name='RequestId'),
  beginTime?: long(name='BeginTime'),
  skillGroupId?: string(name='SkillGroupId'),
  callingNumber?: string(name='CallingNumber'),
  userUtteranceCount?: int32(name='UserUtteranceCount'),
}

model DescribeConversationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConversationResponseBody(name='body'),
}

async function describeConversationWithOptions(request: DescribeConversationRequest, runtime: Util.RuntimeOptions): DescribeConversationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeConversation', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeConversation(request: DescribeConversationRequest): DescribeConversationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConversationWithOptions(request, runtime);
}

model DescribeConversationContextRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
}

model DescribeConversationContextResponseBody = {
  requestId?: string(name='RequestId'),
  conversationContext?: string(name='ConversationContext'),
}

model DescribeConversationContextResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConversationContextResponseBody(name='body'),
}

async function describeConversationContextWithOptions(request: DescribeConversationContextRequest, runtime: Util.RuntimeOptions): DescribeConversationContextResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeConversationContext', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeConversationContext(request: DescribeConversationContextRequest): DescribeConversationContextResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConversationContextWithOptions(request, runtime);
}

model DescribeExportProgressRequest {
  instanceId?: string(name='InstanceId'),
  exportTaskId?: string(name='ExportTaskId'),
}

model DescribeExportProgressResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  fileHttpUrl?: string(name='FileHttpUrl'),
}

model DescribeExportProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportProgressResponseBody(name='body'),
}

async function describeExportProgressWithOptions(request: DescribeExportProgressRequest, runtime: Util.RuntimeOptions): DescribeExportProgressResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeExportProgress', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeExportProgress(request: DescribeExportProgressRequest): DescribeExportProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportProgressWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceResponseBody = {
  status?: string(name='Status'),
  modifyTime?: long(name='ModifyTime'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  concurrency?: long(name='Concurrency'),
  applicableOperations?: [ string ](name='ApplicableOperations'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeInstance', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeNavigationConfigRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeNavigationConfigResponseBody = {
  requestId?: string(name='RequestId'),
  silenceTimeoutConfig?: {
    timeout?: long(name='Timeout'),
    intentTrigger?: string(name='IntentTrigger'),
    finalPrompt?: string(name='FinalPrompt'),
    sourceType?: string(name='SourceType'),
    finalAction?: string(name='FinalAction'),
    prompt?: string(name='Prompt'),
    threshold?: int32(name='Threshold'),
    finalActionParams?: string(name='FinalActionParams'),
  }(name='SilenceTimeoutConfig'),
  greetingConfig?: {
    intentTrigger?: string(name='IntentTrigger'),
    greetingWords?: string(name='GreetingWords'),
    sourceType?: string(name='SourceType'),
  }(name='GreetingConfig'),
  unrecognizingConfig?: {
    finalPrompt?: string(name='FinalPrompt'),
    finalAction?: string(name='FinalAction'),
    finalActionParams?: string(name='FinalActionParams'),
    threshold?: int32(name='Threshold'),
    prompt?: string(name='Prompt'),
  }(name='UnrecognizingConfig'),
}

model DescribeNavigationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNavigationConfigResponseBody(name='body'),
}

async function describeNavigationConfigWithOptions(request: DescribeNavigationConfigRequest, runtime: Util.RuntimeOptions): DescribeNavigationConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeNavigationConfig', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeNavigationConfig(request: DescribeNavigationConfigRequest): DescribeNavigationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNavigationConfigWithOptions(request, runtime);
}

model DescribeRecordingRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
}

model DescribeRecordingResponseBody = {
  filePath?: string(name='FilePath'),
  requestId?: string(name='RequestId'),
  fileName?: string(name='FileName'),
}

model DescribeRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordingResponseBody(name='body'),
}

async function describeRecordingWithOptions(request: DescribeRecordingRequest, runtime: Util.RuntimeOptions): DescribeRecordingResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeRecording', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeRecording(request: DescribeRecordingRequest): DescribeRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordingWithOptions(request, runtime);
}

model DescribeStatisticalDataRequest {
  instanceId?: string(name='InstanceId'),
  timeUnit?: string(name='TimeUnit'),
  beginTimeLeftRange?: long(name='BeginTimeLeftRange'),
  beginTimeRightRange?: long(name='BeginTimeRightRange'),
}

model DescribeStatisticalDataResponseBody = {
  totalDialoguePassRate?: string(name='TotalDialoguePassRate'),
  totalKnowledgeHitRate?: string(name='TotalKnowledgeHitRate'),
  totalResolutionRate?: string(name='TotalResolutionRate'),
  totalValidAnswerRate?: string(name='TotalValidAnswerRate'),
  requestId?: string(name='RequestId'),
  resolvedQuestionTotalNum?: long(name='ResolvedQuestionTotalNum'),
  conversationTotalNum?: long(name='ConversationTotalNum'),
  statisticalDataReports?: [ 
    {
      knowledgeHitRate?: string(name='KnowledgeHitRate'),
      resolvedQuestionNum?: int32(name='ResolvedQuestionNum'),
      resolutionRate?: string(name='ResolutionRate'),
      statisticalDate?: string(name='StatisticalDate'),
      totalConversationNum?: int32(name='TotalConversationNum'),
      validAnswerRate?: string(name='ValidAnswerRate'),
      dialoguePassRate?: string(name='DialoguePassRate'),
    }
  ](name='StatisticalDataReports'),
}

model DescribeStatisticalDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStatisticalDataResponseBody(name='body'),
}

async function describeStatisticalDataWithOptions(request: DescribeStatisticalDataRequest, runtime: Util.RuntimeOptions): DescribeStatisticalDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeStatisticalData', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeStatisticalData(request: DescribeStatisticalDataRequest): DescribeStatisticalDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStatisticalDataWithOptions(request, runtime);
}

model DescribeTTSConfigRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeTTSConfigResponseBody = {
  requestId?: string(name='RequestId'),
  volume?: int32(name='Volume'),
  voice?: string(name='Voice'),
  speechRate?: int32(name='SpeechRate'),
}

model DescribeTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTTSConfigResponseBody(name='body'),
}

async function describeTTSConfigWithOptions(request: DescribeTTSConfigRequest, runtime: Util.RuntimeOptions): DescribeTTSConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeTTSConfig', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeTTSConfig(request: DescribeTTSConfigRequest): DescribeTTSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTTSConfigWithOptions(request, runtime);
}

model DialogueRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
  utterance?: string(name='Utterance'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  additionalContext?: string(name='AdditionalContext'),
}

model DialogueResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model DialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DialogueResponseBody(name='body'),
}

async function dialogueWithOptions(request: DialogueRequest, runtime: Util.RuntimeOptions): DialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Dialogue', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dialogue(request: DialogueRequest): DialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return dialogueWithOptions(request, runtime);
}

model DisableInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DisableInstanceResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
}

model DisableInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DisableInstanceResponseBody(name='body'),
}

async function disableInstanceWithOptions(request: DisableInstanceRequest, runtime: Util.RuntimeOptions): DisableInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableInstance(request: DisableInstanceRequest): DisableInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInstanceWithOptions(request, runtime);
}

model EnableInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model EnableInstanceResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
}

model EnableInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceResponseBody(name='body'),
}

async function enableInstanceWithOptions(request: EnableInstanceRequest, runtime: Util.RuntimeOptions): EnableInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableInstance(request: EnableInstanceRequest): EnableInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstanceWithOptions(request, runtime);
}

model EndDialogueRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
}

model EndDialogueResponseBody = {
  requestId?: string(name='RequestId'),
}

model EndDialogueResponse = {
  headers: map[string]string(name='headers'),
  body: EndDialogueResponseBody(name='body'),
}

async function endDialogueWithOptions(request: EndDialogueRequest, runtime: Util.RuntimeOptions): EndDialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EndDialogue', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function endDialogue(request: EndDialogueRequest): EndDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return endDialogueWithOptions(request, runtime);
}

model ExportConversationDetailsRequest {
  instanceId?: string(name='InstanceId'),
  callingNumber?: string(name='CallingNumber'),
  beginTimeLeftRange?: long(name='BeginTimeLeftRange'),
  beginTimeRightRange?: long(name='BeginTimeRightRange'),
}

model ExportConversationDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  exportTaskId?: string(name='ExportTaskId'),
}

model ExportConversationDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ExportConversationDetailsResponseBody(name='body'),
}

async function exportConversationDetailsWithOptions(request: ExportConversationDetailsRequest, runtime: Util.RuntimeOptions): ExportConversationDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportConversationDetails', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportConversationDetails(request: ExportConversationDetailsRequest): ExportConversationDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportConversationDetailsWithOptions(request, runtime);
}

model ExportStatisticalDataRequest {
  instanceId?: string(name='InstanceId'),
  timeUnit?: string(name='TimeUnit'),
  exportType?: string(name='ExportType'),
  beginTimeLeftRange?: long(name='BeginTimeLeftRange'),
  beginTimeRightRange?: long(name='BeginTimeRightRange'),
}

model ExportStatisticalDataResponseBody = {
  requestId?: string(name='RequestId'),
  exportTaskId?: string(name='ExportTaskId'),
}

model ExportStatisticalDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportStatisticalDataResponseBody(name='body'),
}

async function exportStatisticalDataWithOptions(request: ExportStatisticalDataRequest, runtime: Util.RuntimeOptions): ExportStatisticalDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportStatisticalData', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportStatisticalData(request: ExportStatisticalDataRequest): ExportStatisticalDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportStatisticalDataWithOptions(request, runtime);
}

model ListChatbotInstancesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListChatbotInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  bots?: [ 
    {
      instanceId?: string(name='InstanceId'),
      timeZone?: string(name='TimeZone'),
      avatar?: string(name='Avatar'),
      languageCode?: string(name='LanguageCode'),
      name?: string(name='Name'),
      introduction?: string(name='Introduction'),
      createTime?: string(name='CreateTime'),
    }
  ](name='Bots'),
}

model ListChatbotInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListChatbotInstancesResponseBody(name='body'),
}

async function listChatbotInstancesWithOptions(request: ListChatbotInstancesRequest, runtime: Util.RuntimeOptions): ListChatbotInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListChatbotInstances', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listChatbotInstances(request: ListChatbotInstancesRequest): ListChatbotInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatbotInstancesWithOptions(request, runtime);
}

model ListConversationDetailsRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
}

model ListConversationDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  conversationDetails?: [ 
    {
      action?: string(name='Action'),
      speaker?: string(name='Speaker'),
      createTime?: long(name='CreateTime'),
      conversationId?: string(name='ConversationId'),
      actionParams?: string(name='ActionParams'),
      sequenceId?: string(name='SequenceId'),
      utterance?: string(name='Utterance'),
    }
  ](name='ConversationDetails'),
}

model ListConversationDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConversationDetailsResponseBody(name='body'),
}

async function listConversationDetailsWithOptions(request: ListConversationDetailsRequest, runtime: Util.RuntimeOptions): ListConversationDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListConversationDetails', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listConversationDetails(request: ListConversationDetailsRequest): ListConversationDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConversationDetailsWithOptions(request, runtime);
}

model ListConversationsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListConversationsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  conversations?: [ 
    {
      endTime?: long(name='EndTime'),
      effectiveAnswerCount?: int32(name='EffectiveAnswerCount'),
      transferredToAgent?: boolean(name='TransferredToAgent'),
      beginTime?: long(name='BeginTime'),
      skillGroupId?: string(name='SkillGroupId'),
      conversationId?: string(name='ConversationId'),
      callingNumber?: string(name='CallingNumber'),
      userUtteranceCount?: int32(name='UserUtteranceCount'),
    }
  ](name='Conversations'),
}

model ListConversationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConversationsResponseBody(name='body'),
}

async function listConversationsWithOptions(request: ListConversationsRequest, runtime: Util.RuntimeOptions): ListConversationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListConversations', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listConversations(request: ListConversationsRequest): ListConversationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConversationsWithOptions(request, runtime);
}

model ListInstancesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      status?: string(name='Status'),
      modifyUserName?: string(name='ModifyUserName'),
      description?: string(name='Description'),
      applicableOperations?: [ string ](name='ApplicableOperations'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      concurrency?: long(name='Concurrency'),
      modifyTime?: long(name='ModifyTime'),
    }
  ](name='Instances'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInstances', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ModifyGreetingConfigRequest {
  instanceId?: string(name='InstanceId'),
  greetingWords?: string(name='GreetingWords'),
  sourceType?: string(name='SourceType'),
  intentTrigger?: string(name='IntentTrigger'),
}

model ModifyGreetingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGreetingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGreetingConfigResponseBody(name='body'),
}

async function modifyGreetingConfigWithOptions(request: ModifyGreetingConfigRequest, runtime: Util.RuntimeOptions): ModifyGreetingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyGreetingConfig', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyGreetingConfig(request: ModifyGreetingConfigRequest): ModifyGreetingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGreetingConfigWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
  concurrency?: long(name='Concurrency'),
  chatbotInstanceId?: string(name='ChatbotInstanceId'),
}

model ModifyInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstance', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model ModifySilenceTimeoutConfigRequest {
  instanceId?: string(name='InstanceId'),
  prompt?: string(name='Prompt'),
  timeout?: long(name='Timeout'),
  threshold?: int32(name='Threshold'),
  finalPrompt?: string(name='FinalPrompt'),
  finalAction?: string(name='FinalAction'),
  finalActionParams?: string(name='FinalActionParams'),
  sourceType?: string(name='SourceType'),
  intentTrigger?: string(name='IntentTrigger'),
}

model ModifySilenceTimeoutConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySilenceTimeoutConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySilenceTimeoutConfigResponseBody(name='body'),
}

async function modifySilenceTimeoutConfigWithOptions(request: ModifySilenceTimeoutConfigRequest, runtime: Util.RuntimeOptions): ModifySilenceTimeoutConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySilenceTimeoutConfig', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySilenceTimeoutConfig(request: ModifySilenceTimeoutConfigRequest): ModifySilenceTimeoutConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySilenceTimeoutConfigWithOptions(request, runtime);
}

model ModifyTTSConfigRequest {
  instanceId?: string(name='InstanceId'),
  voice?: string(name='Voice'),
  speechRate?: string(name='SpeechRate'),
  volume?: string(name='Volume'),
}

model ModifyTTSConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTTSConfigResponseBody(name='body'),
}

async function modifyTTSConfigWithOptions(request: ModifyTTSConfigRequest, runtime: Util.RuntimeOptions): ModifyTTSConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTTSConfig', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTTSConfig(request: ModifyTTSConfigRequest): ModifyTTSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTTSConfigWithOptions(request, runtime);
}

model ModifyUnrecognizingConfigRequest {
  instanceId?: string(name='InstanceId'),
  prompt?: string(name='Prompt'),
  threshold?: int32(name='Threshold'),
  finalPrompt?: string(name='FinalPrompt'),
  finalAction?: string(name='FinalAction'),
  finalActionParams?: string(name='FinalActionParams'),
}

model ModifyUnrecognizingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUnrecognizingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUnrecognizingConfigResponseBody(name='body'),
}

async function modifyUnrecognizingConfigWithOptions(request: ModifyUnrecognizingConfigRequest, runtime: Util.RuntimeOptions): ModifyUnrecognizingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUnrecognizingConfig', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUnrecognizingConfig(request: ModifyUnrecognizingConfigRequest): ModifyUnrecognizingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUnrecognizingConfigWithOptions(request, runtime);
}

model QueryConversationsRequest {
  instanceId?: string(name='InstanceId'),
  callingNumber?: string(name='CallingNumber'),
  beginTimeLeftRange?: long(name='BeginTimeLeftRange'),
  beginTimeRightRange?: long(name='BeginTimeRightRange'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryConversationsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  conversations?: [ 
    {
      endTime?: long(name='EndTime'),
      effectiveAnswerCount?: int32(name='EffectiveAnswerCount'),
      transferredToAgent?: boolean(name='TransferredToAgent'),
      beginTime?: long(name='BeginTime'),
      skillGroupId?: string(name='SkillGroupId'),
      conversationId?: string(name='ConversationId'),
      callingNumber?: string(name='CallingNumber'),
      userUtteranceCount?: int32(name='UserUtteranceCount'),
    }
  ](name='Conversations'),
}

model QueryConversationsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConversationsResponseBody(name='body'),
}

async function queryConversationsWithOptions(request: QueryConversationsRequest, runtime: Util.RuntimeOptions): QueryConversationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryConversations', '2018-06-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryConversations(request: QueryConversationsRequest): QueryConversationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConversationsWithOptions(request, runtime);
}

model SaveRecordingRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
  startTime?: long(name='StartTime'),
  duration?: string(name='Duration'),
  fileName?: string(name='FileName'),
  filePath?: string(name='FilePath'),
  type?: string(name='Type'),
}

model SaveRecordingResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: SaveRecordingResponseBody(name='body'),
}

async function saveRecordingWithOptions(request: SaveRecordingRequest, runtime: Util.RuntimeOptions): SaveRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveRecording', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveRecording(request: SaveRecordingRequest): SaveRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveRecordingWithOptions(request, runtime);
}

model SilenceTimeoutRequest {
  instanceId?: string(name='InstanceId'),
  conversationId?: string(name='ConversationId'),
  initialContext?: string(name='InitialContext'),
}

model SilenceTimeoutResponseBody = {
  action?: string(name='Action'),
  interruptible?: boolean(name='Interruptible'),
  requestId?: string(name='RequestId'),
  actionParams?: string(name='ActionParams'),
  textResponse?: string(name='TextResponse'),
}

model SilenceTimeoutResponse = {
  headers: map[string]string(name='headers'),
  body: SilenceTimeoutResponseBody(name='body'),
}

async function silenceTimeoutWithOptions(request: SilenceTimeoutRequest, runtime: Util.RuntimeOptions): SilenceTimeoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SilenceTimeout', '2018-06-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function silenceTimeout(request: SilenceTimeoutRequest): SilenceTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return silenceTimeoutWithOptions(request, runtime);
}

