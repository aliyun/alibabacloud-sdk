/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Tag';
  @version = '2018-08-28';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'tag.aliyuncs.com',
    cn-beijing = 'tag.aliyuncs.com',
    cn-hangzhou = 'tag.aliyuncs.com',
    cn-shanghai = 'tag.aliyuncs.com',
    cn-shenzhen = 'tag.aliyuncs.com',
    cn-hongkong = 'tag.aliyuncs.com',
    ap-southeast-1 = 'tag.aliyuncs.com',
    us-west-1 = 'tag.aliyuncs.com',
    us-east-1 = 'tag.aliyuncs.com',
    cn-hangzhou-finance = 'tag.aliyuncs.com',
    cn-shanghai-finance-1 = 'tag.aliyuncs.com',
    ap-northeast-2-pop = 'tag.aliyuncs.com',
    cn-beijing-finance-pop = 'tag.aliyuncs.com',
    cn-beijing-gov-1 = 'tag.aliyuncs.com',
    cn-beijing-nu16-b01 = 'tag.aliyuncs.com',
    cn-edge-1 = 'tag.aliyuncs.com',
    cn-fujian = 'tag.aliyuncs.com',
    cn-haidian-cm12-c01 = 'tag.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'tag.aliyuncs.com',
    cn-hangzhou-test-306 = 'tag.aliyuncs.com',
    cn-hongkong-finance-pop = 'tag.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'tag.aliyuncs.com',
    cn-shanghai-et15-b01 = 'tag.aliyuncs.com',
    cn-shanghai-et2-b01 = 'tag.aliyuncs.com',
    cn-shanghai-inner = 'tag.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'tag.aliyuncs.com',
    cn-shenzhen-inner = 'tag.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'tag.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'tag.aliyuncs.com',
    cn-wuhan = 'tag.aliyuncs.com',
    cn-yushanfang = 'tag.aliyuncs.com',
    cn-zhangbei = 'tag.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'tag.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'tag.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'tag.aliyuncs.com',
    eu-west-1-oxs = 'tag.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'tag.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateTagsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  tagKeyValueParamList: [ 
    {
      description?: string(name='Description'),
      key: string(name='Key'),
      tagValueParamList?: [ 
        {
          description?: string(name='Description'),
          value?: string(name='Value'),
        }
      ](name='TagValueParamList'),
    }
  ](name='TagKeyValueParamList', position='Query'),
}

model CreateTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagsResponseBody(name='body'),
}

async function createTags(request: CreateTagsRequest): CreateTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTags', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagRequest {
  key: string(name='Key', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  value?: string(name='Value', position='Query'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTag', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourcesByTagRequest {
  tagFilter?: {
    key?: string(name='Key', position=''),
    value?: string(name='Value', position=''),
  }(name='TagFilter'),
  fuzzyType?: string(name='FuzzyType', position='Query'),
  includeAllTags?: boolean(name='IncludeAllTags', position='Query'),
  maxResult?: int32(name='MaxResult', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model ListResourcesByTagResponseBody = {
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空或者空字符串代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tags?: [ 
        {
          category?: string(name='Category'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Resources'),
}

model ListResourcesByTagResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesByTagResponseBody(name='body'),
}

async function listResourcesByTag(request: ListResourcesByTagRequest): ListResourcesByTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcesByTag', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  tagFilter?: {
    key?: string(name='Key', position=''),
  }(name='TagFilter'),
  category?: string(name='Category', position='Query'),
  fuzzyType?: string(name='FuzzyType', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model ListTagKeysResponseBody = {
  keys?: {
    key?: [ 
    {
      category?: string(name='Category'),
      description?: string(name='Description'),
      key?: string(name='Key'),
    }
  ](name='Key')
  }(name='Keys'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  category?: string(name='Category', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceARN?: [ string ](name='ResourceARN', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      tags?: [ 
        {
          category?: string(name='Category'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  tagFilter?: {
    value?: string(name='Value', position=''),
  }(name='TagFilter'),
  fuzzyType?: string(name='FuzzyType', position='Query'),
  key: string(name='Key', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  values?: {
    value?: [ string ](name='Value')
  }(name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceARN: [ string ](name='ResourceARN', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model TagResourcesResponseBody = {
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceARN: [ string ](name='ResourceARN', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  tagKey: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

