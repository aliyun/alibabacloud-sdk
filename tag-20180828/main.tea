/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'tag.aliyuncs.com',
    cn-beijing = 'tag.aliyuncs.com',
    cn-hangzhou = 'tag.aliyuncs.com',
    cn-shanghai = 'tag.aliyuncs.com',
    cn-shenzhen = 'tag.aliyuncs.com',
    cn-hongkong = 'tag.aliyuncs.com',
    ap-southeast-1 = 'tag.aliyuncs.com',
    us-west-1 = 'tag.aliyuncs.com',
    us-east-1 = 'tag.aliyuncs.com',
    cn-hangzhou-finance = 'tag.aliyuncs.com',
    cn-shanghai-finance-1 = 'tag.aliyuncs.com',
    ap-northeast-2-pop = 'tag.aliyuncs.com',
    cn-beijing-finance-1 = 'tag.aliyuncs.com',
    cn-beijing-finance-pop = 'tag.aliyuncs.com',
    cn-beijing-gov-1 = 'tag.aliyuncs.com',
    cn-beijing-nu16-b01 = 'tag.aliyuncs.com',
    cn-edge-1 = 'tag.aliyuncs.com',
    cn-fujian = 'tag.aliyuncs.com',
    cn-haidian-cm12-c01 = 'tag.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'tag.aliyuncs.com',
    cn-hangzhou-test-306 = 'tag.aliyuncs.com',
    cn-hongkong-finance-pop = 'tag.aliyuncs.com',
    cn-qingdao-nebula = 'tag.aliyuncs.com',
    cn-shanghai-et15-b01 = 'tag.aliyuncs.com',
    cn-shanghai-et2-b01 = 'tag.aliyuncs.com',
    cn-shanghai-inner = 'tag.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'tag.aliyuncs.com',
    cn-shenzhen-finance-1 = 'tag.aliyuncs.com',
    cn-shenzhen-inner = 'tag.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'tag.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'tag.aliyuncs.com',
    cn-wuhan = 'tag.aliyuncs.com',
    cn-yushanfang = 'tag.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'tag.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'tag.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'tag.aliyuncs.com',
    eu-west-1-oxs = 'tag.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'tag.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('tag', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tagKeyValueParamList?: [ 
    {
      key?: string(name='Key'),
      tagValueParamList?: [ 
        {
          value?: string(name='Value'),
          description?: string(name='Description'),
        }
      ](name='TagValueParamList'),
      description?: string(name='Description'),
    }
  ](name='TagKeyValueParamList'),
}

model CreateTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagsResponseBody(name='body'),
}

async function createTagsWithOptions(request: CreateTagsRequest, runtime: Util.RuntimeOptions): CreateTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTags', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTags(request: CreateTagsRequest): CreateTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTagsWithOptions(request, runtime);
}

model DeleteTagRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTagWithOptions(request: DeleteTagRequest, runtime: Util.RuntimeOptions): DeleteTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTag', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListTagKeysRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  category?: string(name='Category'),
  resourceType?: string(name='ResourceType'),
  queryType?: string(name='QueryType'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  keys?: {
    key?: [ 
    {
      key?: string(name='Key'),
      category?: string(name='Category'),
      description?: string(name='Description'),
    }
  ](name='Key')
  }(name='Keys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceARN?: [ string ](name='ResourceARN'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  tags?: string(name='Tags'),
  category?: string(name='Category'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
          category?: string(name='Category'),
        }
      ](name='Tags'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  key?: string(name='Key'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  resourceType?: string(name='ResourceType'),
  queryType?: string(name='QueryType'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  values?: {
    value?: [ string ](name='Value')
  }(name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagValues', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tags?: string(name='Tags'),
  resourceARN?: [ string ](name='ResourceARN'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceARN?: [ string ](name='ResourceARN'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2018-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

