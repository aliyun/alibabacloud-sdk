/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'tag.aliyuncs.com',
    cn-beijing = 'tag.aliyuncs.com',
    cn-hangzhou = 'tag.aliyuncs.com',
    cn-shanghai = 'tag.aliyuncs.com',
    cn-shenzhen = 'tag.aliyuncs.com',
    cn-hongkong = 'tag.aliyuncs.com',
    ap-southeast-1 = 'tag.aliyuncs.com',
    us-west-1 = 'tag.aliyuncs.com',
    us-east-1 = 'tag.aliyuncs.com',
    cn-hangzhou-finance = 'tag.aliyuncs.com',
    cn-shanghai-finance-1 = 'tag.aliyuncs.com',
    ap-northeast-2-pop = 'tag.aliyuncs.com',
    cn-beijing-finance-pop = 'tag.aliyuncs.com',
    cn-beijing-gov-1 = 'tag.aliyuncs.com',
    cn-beijing-nu16-b01 = 'tag.aliyuncs.com',
    cn-edge-1 = 'tag.aliyuncs.com',
    cn-fujian = 'tag.aliyuncs.com',
    cn-haidian-cm12-c01 = 'tag.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'tag.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'tag.aliyuncs.com',
    cn-hangzhou-test-306 = 'tag.aliyuncs.com',
    cn-hongkong-finance-pop = 'tag.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'tag.aliyuncs.com',
    cn-shanghai-et15-b01 = 'tag.aliyuncs.com',
    cn-shanghai-et2-b01 = 'tag.aliyuncs.com',
    cn-shanghai-inner = 'tag.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'tag.aliyuncs.com',
    cn-shenzhen-inner = 'tag.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'tag.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'tag.aliyuncs.com',
    cn-wuhan = 'tag.aliyuncs.com',
    cn-yushanfang = 'tag.aliyuncs.com',
    cn-zhangbei = 'tag.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'tag.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'tag.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'tag.aliyuncs.com',
    eu-west-1-oxs = 'tag.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'tag.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('tag', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachPolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyId?: string(name='PolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AttachPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachPolicyResponseBody(name='body'),
}

async function attachPolicyWithOptions(request: AttachPolicyRequest, runtime: Util.RuntimeOptions): AttachPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachPolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachPolicyWithOptions(request, runtime);
}

model CreatePolicyRequest {
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyContent?: string(name='PolicyContent'),
  policyDesc?: string(name='PolicyDesc'),
  policyName?: string(name='PolicyName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  userType?: string(name='UserType'),
}

model CreatePolicyResponseBody = {
  policyId?: string(name='PolicyId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicyWithOptions(request: CreatePolicyRequest, runtime: Util.RuntimeOptions): CreatePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyContent)) {
    query['PolicyContent'] = request.policyContent;
  }
  if (!Util.isUnset(request.policyDesc)) {
    query['PolicyDesc'] = request.policyDesc;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyWithOptions(request, runtime);
}

model CreateTagsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  tagKeyValueParamList?: [ 
    {
      description?: string(name='Description'),
      key?: string(name='Key'),
      tagValueParamList?: [ 
        {
          description?: string(name='Description'),
          value?: string(name='Value'),
        }
      ](name='TagValueParamList'),
    }
  ](name='TagKeyValueParamList'),
}

model CreateTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTagsResponseBody(name='body'),
}

async function createTagsWithOptions(request: CreateTagsRequest, runtime: Util.RuntimeOptions): CreateTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.tagKeyValueParamList)) {
    query['TagKeyValueParamList'] = request.tagKeyValueParamList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTags',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTags(request: CreateTagsRequest): CreateTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTagsWithOptions(request, runtime);
}

model DeletePolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyId?: string(name='PolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicyWithOptions(request: DeletePolicyRequest, runtime: Util.RuntimeOptions): DeletePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyWithOptions(request, runtime);
}

model DeleteTagRequest {
  key?: string(name='Key'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  value?: string(name='Value'),
}

model DeleteTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTagWithOptions(request: DeleteTagRequest, runtime: Util.RuntimeOptions): DeleteTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTag',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DetachPolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyId?: string(name='PolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DetachPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachPolicyResponseBody(name='body'),
}

async function detachPolicyWithOptions(request: DetachPolicyRequest, runtime: Util.RuntimeOptions): DetachPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachPolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachPolicyWithOptions(request, runtime);
}

model GenerateConfigRuleReportRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
  userType?: string(name='UserType'),
}

model GenerateConfigRuleReportResponseBody = {
  reportId?: string(name='ReportId'),
  requestId?: string(name='RequestId'),
}

model GenerateConfigRuleReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateConfigRuleReportResponseBody(name='body'),
}

async function generateConfigRuleReportWithOptions(request: GenerateConfigRuleReportRequest, runtime: Util.RuntimeOptions): GenerateConfigRuleReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateConfigRuleReport',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateConfigRuleReport(request: GenerateConfigRuleReportRequest): GenerateConfigRuleReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateConfigRuleReportWithOptions(request, runtime);
}

model GetConfigRuleReportRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
  userType?: string(name='UserType'),
}

model GetConfigRuleReportResponseBody = {
  data?: {
    createdTime?: long(name='CreatedTime'),
    reportId?: string(name='ReportId'),
    targetId?: string(name='TargetId'),
    targetType?: string(name='TargetType'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConfigRuleReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConfigRuleReportResponseBody(name='body'),
}

async function getConfigRuleReportWithOptions(request: GetConfigRuleReportRequest, runtime: Util.RuntimeOptions): GetConfigRuleReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConfigRuleReport',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConfigRuleReport(request: GetConfigRuleReportRequest): GetConfigRuleReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConfigRuleReportWithOptions(request, runtime);
}

model GetEffectivePolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
}

model GetEffectivePolicyResponseBody = {
  effectivePolicy?: string(name='EffectivePolicy'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetEffectivePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEffectivePolicyResponseBody(name='body'),
}

async function getEffectivePolicyWithOptions(request: GetEffectivePolicyRequest, runtime: Util.RuntimeOptions): GetEffectivePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEffectivePolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEffectivePolicy(request: GetEffectivePolicyRequest): GetEffectivePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEffectivePolicyWithOptions(request, runtime);
}

model GetPolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyId?: string(name='PolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model GetPolicyResponseBody = {
  policy?: {
    policyContent?: string(name='PolicyContent'),
    policyDesc?: string(name='PolicyDesc'),
    policyName?: string(name='PolicyName'),
    userType?: string(name='UserType'),
  }(name='Policy'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicyWithOptions(request: GetPolicyRequest, runtime: Util.RuntimeOptions): GetPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyWithOptions(request, runtime);
}

model GetPolicyEnableStatusRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  userType?: string(name='UserType'),
}

model GetPolicyEnableStatusResponseBody = {
  requestId?: string(name='RequestId'),
  statusModels?: [ 
    {
      status?: string(name='Status'),
      userType?: string(name='UserType'),
    }
  ](name='StatusModels'),
}

model GetPolicyEnableStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPolicyEnableStatusResponseBody(name='body'),
}

async function getPolicyEnableStatusWithOptions(request: GetPolicyEnableStatusRequest, runtime: Util.RuntimeOptions): GetPolicyEnableStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPolicyEnableStatus',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPolicyEnableStatus(request: GetPolicyEnableStatusRequest): GetPolicyEnableStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyEnableStatusWithOptions(request, runtime);
}

model ListConfigRulesForTargetRequest {
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyType?: string(name='PolicyType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  tagKey?: string(name='TagKey'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
  userType?: string(name='UserType'),
}

model ListConfigRulesForTargetResponseBody = {
  data?: [ 
    {
      aggregatorId?: string(name='AggregatorId'),
      configRuleId?: string(name='ConfigRuleId'),
      policyType?: string(name='PolicyType'),
      remediation?: boolean(name='Remediation'),
      tagKey?: string(name='TagKey'),
      targetId?: string(name='TargetId'),
      targetType?: string(name='TargetType'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListConfigRulesForTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigRulesForTargetResponseBody(name='body'),
}

async function listConfigRulesForTargetWithOptions(request: ListConfigRulesForTargetRequest, runtime: Util.RuntimeOptions): ListConfigRulesForTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigRulesForTarget',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigRulesForTarget(request: ListConfigRulesForTargetRequest): ListConfigRulesForTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigRulesForTargetWithOptions(request, runtime);
}

model ListPoliciesRequest {
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyIds?: [ string ](name='PolicyIds'),
  policyNames?: [ string ](name='PolicyNames'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  userType?: string(name='UserType'),
}

model ListPoliciesResponseBody = {
  nextToken?: string(name='NextToken'),
  policyList?: [ 
    {
      policyContent?: string(name='PolicyContent'),
      policyDesc?: string(name='PolicyDesc'),
      policyId?: string(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      userType?: string(name='UserType'),
    }
  ](name='PolicyList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPoliciesWithOptions(request: ListPoliciesRequest, runtime: Util.RuntimeOptions): ListPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyIds)) {
    query['PolicyIds'] = request.policyIds;
  }
  if (!Util.isUnset(request.policyNames)) {
    query['PolicyNames'] = request.policyNames;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicies',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPoliciesWithOptions(request, runtime);
}

model ListPoliciesForTargetRequest {
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  targetId?: string(name='TargetId'),
  targetType?: string(name='TargetType'),
}

model ListPoliciesForTargetResponseBody = {
  data?: [ 
    {
      policyContent?: string(name='PolicyContent'),
      policyDesc?: string(name='PolicyDesc'),
      policyId?: string(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      userType?: string(name='UserType'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListPoliciesForTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPoliciesForTargetResponseBody(name='body'),
}

async function listPoliciesForTargetWithOptions(request: ListPoliciesForTargetRequest, runtime: Util.RuntimeOptions): ListPoliciesForTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPoliciesForTarget',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPoliciesForTarget(request: ListPoliciesForTargetRequest): ListPoliciesForTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPoliciesForTargetWithOptions(request, runtime);
}

model ListResourcesByTagRequest {
  tagFilter?: {
    key?: string(name='Key'),
    value?: string(name='Value'),
  }(name='TagFilter'),
  fuzzyType?: string(name='FuzzyType'),
  includeAllTags?: boolean(name='IncludeAllTags'),
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceType?: string(name='ResourceType'),
}

model ListResourcesByTagResponseBody = {
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空或者空字符串代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tags?: [ 
        {
          category?: string(name='Category'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Resources'),
}

model ListResourcesByTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesByTagResponseBody(name='body'),
}

async function listResourcesByTagWithOptions(request: ListResourcesByTagRequest, runtime: Util.RuntimeOptions): ListResourcesByTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fuzzyType)) {
    query['FuzzyType'] = request.fuzzyType;
  }
  if (!Util.isUnset(request.includeAllTags)) {
    query['IncludeAllTags'] = request.includeAllTags;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourcesByTag',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourcesByTag(request: ListResourcesByTagRequest): ListResourcesByTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcesByTagWithOptions(request, runtime);
}

model ListSupportResourceTypesRequest {
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceTye?: string(name='ResourceTye'),
  showItems?: boolean(name='ShowItems'),
  supportCode?: string(name='SupportCode'),
}

model ListSupportResourceTypesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  supportResourceTypes?: [ 
    {
      productCode?: string(name='ProductCode'),
      resourceType?: string(name='ResourceType'),
      supportItems?: [ 
        {
          support?: boolean(name='Support'),
          supportCode?: string(name='SupportCode'),
        }
      ](name='SupportItems'),
    }
  ](name='SupportResourceTypes'),
}

model ListSupportResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSupportResourceTypesResponseBody(name='body'),
}

async function listSupportResourceTypesWithOptions(request: ListSupportResourceTypesRequest, runtime: Util.RuntimeOptions): ListSupportResourceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceTye)) {
    query['ResourceTye'] = request.resourceTye;
  }
  if (!Util.isUnset(request.showItems)) {
    query['ShowItems'] = request.showItems;
  }
  if (!Util.isUnset(request.supportCode)) {
    query['SupportCode'] = request.supportCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSupportResourceTypes',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSupportResourceTypes(request: ListSupportResourceTypesRequest): ListSupportResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSupportResourceTypesWithOptions(request, runtime);
}

model ListTagKeysRequest {
  tagFilter?: {
    key?: string(name='Key'),
  }(name='TagFilter'),
  category?: string(name='Category'),
  fuzzyType?: string(name='FuzzyType'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceType?: string(name='ResourceType'),
}

model ListTagKeysResponseBody = {
  keys?: {
    key?: [ 
    {
      category?: string(name='Category'),
      description?: string(name='Description'),
      key?: string(name='Key'),
    }
  ](name='Key')
  }(name='Keys'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.fuzzyType)) {
    query['FuzzyType'] = request.fuzzyType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  category?: string(name='Category'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceARN?: [ string ](name='ResourceARN'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  tags?: string(name='Tags'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      tags?: [ 
        {
          category?: string(name='Category'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceARN)) {
    query['ResourceARN'] = request.resourceARN;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  tagFilter?: {
    value?: string(name='Value'),
  }(name='TagFilter'),
  fuzzyType?: string(name='FuzzyType'),
  key?: string(name='Key'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceType?: string(name='ResourceType'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  values?: {
    value?: [ string ](name='Value')
  }(name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fuzzyType)) {
    query['FuzzyType'] = request.fuzzyType;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagValues',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model ListTargetsForPolicyRequest {
  maxResult?: int32(name='MaxResult'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyId?: string(name='PolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model ListTargetsForPolicyResponseBody = {
  isRd?: boolean(name='IsRd'),
  nextToken?: string(name='NextToken'),
  rdId?: string(name='RdId'),
  requestId?: string(name='RequestId'),
  targets?: [ 
    {
      targetId?: string(name='TargetId'),
      targetType?: int32(name='TargetType'),
    }
  ](name='Targets'),
}

model ListTargetsForPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTargetsForPolicyResponseBody(name='body'),
}

async function listTargetsForPolicyWithOptions(request: ListTargetsForPolicyRequest, runtime: Util.RuntimeOptions): ListTargetsForPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTargetsForPolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTargetsForPolicy(request: ListTargetsForPolicyRequest): ListTargetsForPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTargetsForPolicyWithOptions(request, runtime);
}

model ModifyPolicyRequest {
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policyContent?: string(name='PolicyContent'),
  policyDesc?: string(name='PolicyDesc'),
  policyId?: string(name='PolicyId'),
  policyName?: string(name='PolicyName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model ModifyPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyResponseBody(name='body'),
}

async function modifyPolicyWithOptions(request: ModifyPolicyRequest, runtime: Util.RuntimeOptions): ModifyPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyContent)) {
    query['PolicyContent'] = request.policyContent;
  }
  if (!Util.isUnset(request.policyDesc)) {
    query['PolicyDesc'] = request.policyDesc;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicy',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPolicy(request: ModifyPolicyRequest): ModifyPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceARN?: [ string ](name='ResourceARN'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  tags?: string(name='Tags'),
}

model TagResourcesResponseBody = {
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceARN)) {
    query['ResourceARN'] = request.resourceARN;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceARN?: [ string ](name='ResourceARN'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  failedResources?: {
    failedResource?: [ 
    {
      resourceARN?: string(name='ResourceARN'),
      result?: {
        code?: string(name='Code'),
        message?: string(name='Message'),
      }(name='Result'),
    }
  ](name='FailedResource')
  }(name='FailedResources'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceARN)) {
    query['ResourceARN'] = request.resourceARN;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-08-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

