/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rocketmq', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateConsumerGroupRequest {
  consumeRetryPolicy?: {
    maxRetryTimes?: int32(name='maxRetryTimes', example='16'),
    retryPolicy?: string(name='retryPolicy', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy'),
  deliveryOrderType?: string(name='deliveryOrderType', example='Concurrently'),
  remark?: string(name='remark', example='This is the remark for test.'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, request: CreateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.consumeRetryPolicy)) {
    body['consumeRetryPolicy'] = request.consumeRetryPolicy;
  }
  if (!Util.isUnset(request.deliveryOrderType)) {
    body['deliveryOrderType'] = request.deliveryOrderType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerGroup(instanceId: string, consumerGroupId: string, request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createConsumerGroupWithOptions(instanceId, consumerGroupId, request, headers, runtime);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='autoRenew', example='enable'),
  autoRenewPeriod?: int32(name='autoRenewPeriod', example='3'),
  instanceName?: string(name='instanceName', example='rmq-cn-72u3048uxxx'),
  networkInfo?: {
    internetInfo?: {
      flowOutBandwidth?: int32(name='flowOutBandwidth', example='100'),
      flowOutType?: string(name='flowOutType', example='uninvolved'),
      internetSpec?: string(name='internetSpec', example='disable'),
      ipWhitelist?: [ string ](name='ipWhitelist'),
    }(name='internetInfo'),
    vpcInfo?: {
      vSwitchId?: string(name='vSwitchId', example='vsw-uf6gwtbn6etadpv*******'),
      vpcId?: string(name='vpcId', example='vpc-wz9qt50xhtj9krb******'),
    }(name='vpcInfo'),
  }(name='networkInfo'),
  paymentType?: string(name='paymentType', example='PayAsYouGo'),
  period?: int32(name='period', example='3'),
  periodUnit?: string(name='periodUnit', example='Year'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', example='enable'),
    messageRetentionTime?: int32(name='messageRetentionTime', example='72'),
    msgProcessSpec?: string(name='msgProcessSpec', example='rmq.s2.2xlarge'),
    sendReceiveRatio?: float(name='sendReceiveRatio', example='0.5'),
  }(name='productInfo'),
  remark?: string(name='remark', example='This is the remark for test.'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aekzy6pist7uuna'),
  seriesCode?: string(name='seriesCode', example='standard'),
  serviceCode?: string(name='serviceCode', example='rmq'),
  subSeriesCode?: string(name='subSeriesCode', example='cluster_ha'),
  clientToken?: string(name='clientToken', example='c2c5d1274a8d4317a13bc5b0d4c888df'),
}

model CreateInstanceResponseBody = {
  code?: string(name='code', example='OrderType.NotSupport'),
  data?: string(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The order type not supported.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    query['clientToken'] = request.clientToken;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['autoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    body['autoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.networkInfo)) {
    body['networkInfo'] = request.networkInfo;
  }
  if (!Util.isUnset(request.paymentType)) {
    body['paymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.period)) {
    body['period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['periodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productInfo)) {
    body['productInfo'] = request.productInfo;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.seriesCode)) {
    body['seriesCode'] = request.seriesCode;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['serviceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.subSeriesCode)) {
    body['subSeriesCode'] = request.subSeriesCode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

model CreateTopicRequest {
  messageType?: string(name='messageType', example='NORMAL'),
  remark?: string(name='remark', example='This is the remark for test.'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', example='Topic.Existed'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The topic already exists.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopicWithOptions(instanceId: string, topicName: string, request: CreateTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageType)) {
    body['messageType'] = request.messageType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopic(instanceId: string, topicName: string, request: CreateTopicRequest): CreateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTopicWithOptions(instanceId, topicName, request, headers, runtime);
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerGroup(instanceId: string, consumerGroupId: string): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConsumerGroupWithOptions(instanceId, consumerGroupId, headers, runtime);
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', example='MissingInstanceId'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='048242AA-BADA-5F29-B2CD-ED9FA344467F'),
  success?: boolean(name='success', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(instanceId: string): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(instanceId, headers, runtime);
}

model DeleteTopicResponseBody = {
  code?: string(name='code', example='Topic.NotFound'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The topic cannot be found.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopicWithOptions(instanceId: string, topicName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTopicResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTopic(instanceId: string, topicName: string): DeleteTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTopicWithOptions(instanceId, topicName, headers, runtime);
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', example='InvalidConsumerGroupId'),
  data?: {
    consumeRetryPolicy?: {
      maxRetryTimes?: int32(name='maxRetryTimes', example='16'),
      retryPolicy?: string(name='retryPolicy', example='DefaultRetryPolicy'),
    }(name='consumeRetryPolicy'),
    consumerGroupId?: string(name='consumerGroupId', example='CID-TEST'),
    createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
    deliveryOrderType?: string(name='deliveryOrderType', example='Concurrently'),
    instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    remark?: string(name='remark', example='This is the remark for test.'),
    status?: string(name='status', example='RUNNING'),
    updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', example='true'),
}

model GetConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConsumerGroupResponseBody(name='body'),
}

async function getConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetConsumerGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConsumerGroup(instanceId: string, consumerGroupId: string): GetConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getConsumerGroupWithOptions(instanceId, consumerGroupId, headers, runtime);
}

model GetInstanceResponseBody = {
  code?: string(name='code', example='MissingInstanceId'),
  data?: {
    accountInfo?: {
      username?: string(name='username', example='6W0xz2uPfiwp****'),
    }(name='accountInfo'),
    aclInfo?: {
      aclType?: string(name='aclType'),
    }(name='aclInfo'),
    bid?: string(name='bid', description='BID', example='26842'),
    commodityCode?: string(name='commodityCode', example='ons_rmqsub_public_cn'),
    createTime?: string(name='createTime', example='2022-08-01 00:00:00'),
    expireTime?: string(name='expireTime', example='2022-09-01 00:00:00'),
    extConfig?: {
      aclType?: string(name='aclType', example='default'),
      autoScaling?: boolean(name='autoScaling', example='true'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', example='10'),
      flowOutType?: string(name='flowOutType', example='payByBandwidth'),
      internetSpec?: string(name='internetSpec', example='enable'),
      messageRetentionTime?: int32(name='messageRetentionTime', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', example='true'),
    }(name='extConfig'),
    instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
    instanceName?: string(name='instanceName', example='test instance'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', example='20'),
        quotaName?: string(name='quotaName', example='TOPIC_COUNT'),
        totalCount?: double(name='totalCount', example='100'),
        usedCount?: double(name='usedCount', example='10'),
      }
    ](name='instanceQuotas'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', example='TCP_INTERNET'),
          endpointUrl?: string(name='endpointUrl', example='rmq-cn-c4d2tbk****-vpc.cn-hangzhou.rmq.aliyuncs.com:8080'),
          ipWhitelist?: string(name='ipWhitelist', example='192.168.x.x/24'),
        }
      ](name='endpoints'),
      internetInfo?: {
        flowOutBandwidth?: int32(name='flowOutBandwidth'),
        flowOutType?: string(name='flowOutType'),
        internetSpec?: string(name='internetSpec'),
        ipWhitelist?: [ string ](name='ipWhitelist'),
      }(name='internetInfo'),
      vpcInfo?: {
        vSwitchId?: string(name='vSwitchId', example='vsw-uf6gwtbn6etadpvz7****'),
        vpcId?: string(name='vpcId', example='vpc-uf6of9452b2pba82c****'),
      }(name='vpcInfo'),
    }(name='networkInfo'),
    paymentType?: string(name='paymentType', example='Subscription'),
    productInfo?: {
      autoScaling?: boolean(name='autoScaling'),
      messageRetentionTime?: int32(name='messageRetentionTime'),
      msgProcessSpec?: string(name='msgProcessSpec'),
      sendReceiveRatio?: float(name='sendReceiveRatio'),
      supportAutoScaling?: boolean(name='supportAutoScaling'),
    }(name='productInfo'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    releaseTime?: string(name='releaseTime', example='2022-09-07 00:00:00'),
    remark?: string(name='remark', example='This is remark for instance.'),
    resourceGroupId?: string(name='resourceGroupId'),
    seriesCode?: string(name='seriesCode', example='standard'),
    serviceCode?: string(name='serviceCode', example='rmq'),
    startTime?: string(name='startTime', example='2022-08-01 00:00:00'),
    status?: string(name='status', example='RUNNING'),
    subSeriesCode?: string(name='subSeriesCode', example='cluster_ha'),
    updateTime?: string(name='updateTime', example='2022-08-02 00:00:00'),
    userId?: string(name='userId', example='111111111111111'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='05AB7FBD-F1D3-5D87-BF78-BD782249****'),
  success?: boolean(name='success', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

model GetTopicResponseBody = {
  code?: string(name='code', example='Topic.NotFound'),
  data?: {
    createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
    instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
    messageType?: string(name='messageType', example='NORMAL'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    remark?: string(name='remark', example='This is the remark for test.'),
    status?: string(name='status', example='RUNNING'),
    topicName?: string(name='topicName', example='topic_test'),
    updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The topic cannot be found.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicResponseBody(name='body'),
}

async function getTopicWithOptions(instanceId: string, topicName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTopicResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopic(instanceId: string, topicName: string): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTopicWithOptions(instanceId, topicName, headers, runtime);
}

model ListConsumerGroupsRequest {
  filter?: string(name='filter', example='CID-TEST'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', example='GID-TEST'),
        createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
        regionId?: string(name='regionId', example='cn-hangzhou'),
        remark?: string(name='remark', example='This is the remark for test.'),
        status?: string(name='status', example='RUNNING'),
        updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
      }
    ](name='list'),
    pageNumber?: long(name='pageNumber', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    totalCount?: long(name='totalCount', example='1'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter InstanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='5503A460-98ED-5543-92CF-4853DE28****'),
  success?: boolean(name='success', example='true'),
}

model ListConsumerGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConsumerGroupsResponseBody(name='body'),
}

async function listConsumerGroupsWithOptions(instanceId: string, request: ListConsumerGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListConsumerGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConsumerGroups',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConsumerGroups(instanceId: string, request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConsumerGroupsWithOptions(instanceId, request, headers, runtime);
}

model ListInstancesRequest {
  filter?: string(name='filter', example='rmq-cn-7e22ody****'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', example='MissingPageNumber'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', example='ons_rmqsub_public_cn'),
        createTime?: string(name='createTime', example='2022-08-01 00:00:00'),
        expireTime?: string(name='expireTime', example='2022-09-01 00:00:00'),
        groupCount?: long(name='groupCount', example='10'),
        instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
        instanceName?: string(name='instanceName', example='test instance'),
        paymentType?: string(name='paymentType', example='Subscription'),
        regionId?: string(name='regionId', example='cn-hangzhou'),
        releaseTime?: string(name='releaseTime', example='2022-09-07 00:00:00'),
        remark?: string(name='remark', example='This is remark for instance.'),
        seriesCode?: string(name='seriesCode', example='standard'),
        serviceCode?: string(name='serviceCode', example='rmq'),
        startTime?: string(name='startTime', example='2022-08-01 00:00:00'),
        status?: string(name='status', example='RUNNING'),
        subSeriesCode?: string(name='subSeriesCode', example='cluster_ha'),
        topicCount?: long(name='topicCount', example='20'),
        updateTime?: string(name='updateTime', example='2022-08-02 00:00:00'),
        userId?: string(name='userId', example='6W0xz2uPfiwp****'),
      }
    ](name='list'),
    pageNumber?: long(name='pageNumber', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    totalCount?: long(name='totalCount', example='100'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='PageNumber'),
  dynamicMessage?: string(name='dynamicMessage', example='pageNumber'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter pageNumber is mandatory for this action .'),
  requestId?: string(name='requestId', example='84445A20-2B50-5306-A3C0-AF99FC1833C6'),
  success?: boolean(name='success', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model ListTopicsRequest {
  filter?: string(name='filter', example='topic_test'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='3'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
        messageType?: string(name='messageType', example='NORMAL'),
        regionId?: string(name='regionId', example='cn-hangzhou'),
        remark?: string(name='remark', example='This is the remark for test.'),
        status?: string(name='status', example='RUNNING'),
        topicName?: string(name='topicName', example='topic_test'),
        updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
      }
    ](name='list'),
    pageNumber?: long(name='pageNumber', example='1'),
    pageSize?: long(name='pageSize', example='3'),
    totalCount?: long(name='totalCount', example='1'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The topic cannot be found.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopicsWithOptions(instanceId: string, request: ListTopicsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopics(instanceId: string, request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTopicsWithOptions(instanceId, request, headers, runtime);
}

model UpdateConsumerGroupRequest {
  consumeRetryPolicy?: {
    maxRetryTimes?: int32(name='maxRetryTimes', example='16'),
    retryPolicy?: string(name='retryPolicy', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy'),
  deliveryOrderType?: string(name='deliveryOrderType', example='Concurrently'),
  remark?: string(name='remark', example='This is the remark for test.'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', example='InvalidDeliveryOrderType'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='DeliveryOrderType'),
  dynamicMessage?: string(name='dynamicMessage', example='deliveryOrderType'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, request: UpdateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.consumeRetryPolicy)) {
    body['consumeRetryPolicy'] = request.consumeRetryPolicy;
  }
  if (!Util.isUnset(request.deliveryOrderType)) {
    body['deliveryOrderType'] = request.deliveryOrderType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConsumerGroup(instanceId: string, consumerGroupId: string, request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateConsumerGroupWithOptions(instanceId, consumerGroupId, request, headers, runtime);
}

model UpdateInstanceRequest {
  instanceName?: string(name='instanceName', example='test_instance'),
  networkInfo?: {
    internetInfo?: {
      ipWhitelist?: [ string ](name='ipWhitelist'),
    }(name='internetInfo'),
  }(name='networkInfo'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling'),
    messageRetentionTime?: int32(name='messageRetentionTime'),
    sendReceiveRatio?: float(name='sendReceiveRatio'),
  }(name='productInfo'),
  remark?: string(name='remark', example='This is the remark for test.'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', example='MissingInstanceId'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='AA87DE09-DA44-52F4-9515-78B1B607****'),
  success?: boolean(name='success', example='true'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstanceWithOptions(instanceId: string, request: UpdateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.networkInfo)) {
    body['networkInfo'] = request.networkInfo;
  }
  if (!Util.isUnset(request.productInfo)) {
    body['productInfo'] = request.productInfo;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstance(instanceId: string, request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceWithOptions(instanceId, request, headers, runtime);
}

model UpdateTopicRequest {
  remark?: string(name='remark', example='This is the remark for test.'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', example='Topic.NotFound'),
  data?: boolean(name='data', example='true'),
  dynamicCode?: string(name='dynamicCode', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', example='TopicName'),
  httpStatusCode?: int32(name='httpStatusCode', example='400'),
  message?: string(name='message', example='The topic cannot be found.'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model UpdateTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTopicResponseBody(name='body'),
}

async function updateTopicWithOptions(instanceId: string, topicName: string, request: UpdateTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTopic(instanceId: string, topicName: string, request: UpdateTopicRequest): UpdateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTopicWithOptions(instanceId, topicName, request, headers, runtime);
}

