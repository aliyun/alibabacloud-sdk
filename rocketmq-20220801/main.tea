/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rocketmq', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChangeResourceGroupRequest {
  regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance is changed.

You can call the [ListResourceGroups](https://www.alibabacloud.com/help/resource-management/latest/listresourcegroups) operation to query existing resource groups.', example='rg-9gLOoK****'),
  resourceId?: string(name='resourceId', description='The ID of the resource. Set this parameter to the ID of the ApsaraMQ forÂ RocketMQ instance whose resource group you want to change.', example='c2c5d1274a8d4317a13bc5b0d4******'),
  resourceType?: string(name='resourceType', description='The type of resource.

Set this parameter to **instance**. The value of this parameter cannot be changed.', example='instance'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Instance.NotFound'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['resourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/resourceGroup/change`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return changeResourceGroupWithOptions(request, headers, runtime);
}

model CreateConsumerGroupRequest {
  consumeRetryPolicy?: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy?: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](~~440356~~).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).'),
  deliveryOrderType?: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery', example='Concurrently'),
  remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request CreateConsumerGroupRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, request: CreateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.consumeRetryPolicy)) {
    body['consumeRetryPolicy'] = request.consumeRetryPolicy;
  }
  if (!Util.isUnset(request.deliveryOrderType)) {
    body['deliveryOrderType'] = request.deliveryOrderType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(instanceId: string, consumerGroupId: string, request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createConsumerGroupWithOptions(instanceId, consumerGroupId, request, headers, runtime);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal. This parameter takes effect only when the PaymentType parameter is set to Subscription.

*   true: enable
*   false: disable', example='true'),
  autoRenewPeriod?: int32(name='autoRenewPeriod', description='The auto-renewal cycle of the instance. This parameter takes effect only when the autoRenew parameter is set to true. Unit: months.

Valid values:

*   Monthly renewal: 1, 2, 3, 6, and 12', example='3'),
  instanceName?: string(name='instanceName', description='The name of the instance that you want to create.

If you do not configure this parameter, the instance ID is used as the instance name.', example='rmq-cn-72u3048uxxx'),
  networkInfo?: {
    internetInfo?: {
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.

This parameter is required only when the flowOutType parameter is set to payByBandwidth.

Valid values: 1 to 1000.', example='100'),
      flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   payByBandwidth: pay-by-bandwidth. If the Internet access feature is enabled, specify this value for the parameter.
*   uninvolved: N/A. If the Internet access feature is disabled, specify this value for the parameter.', example='uninvolved'),
      internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in VPCs. If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](~~427240~~).', example='disable'),
      ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet. This parameter can be configured only when you use a public endpoint to access the ApsaraMQ forÂ RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ forÂ RocketMQ broker over the Internet.'),
    }(name='internetInfo', description='The Internet-related configurations.'),
    vpcInfo?: {
      vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated.

> After you create a ApsaraMQ forÂ RocketMQ instance, you cannot change the vSwitch to which the instance is connected. If you want to change the vSwitch with which a ApsaraMQ forÂ RocketMQ is associated, you must release the instance and purchase a new instance.', example='vsw-uf6gwtbn6etadpv*******'),
      vpcId?: string(name='vpcId', description='The ID of the VPC with which the instance that you want to create is associated.

> After you create a ApsaraMQ forÂ RocketMQ instance, you cannot change the VPC in which the instance is created. If you want to change the VPC with which a ApsaraMQ forÂ RocketMQ is associated, you must release the instance and purchase a new instance.', example='vpc-wz9qt50xhtj9krb******'),
    }(name='vpcInfo', description='The virtual private cloud (VPC)-related configurations.'),
  }(name='networkInfo', description='The information about the network.'),
  paymentType?: string(name='paymentType', description='The billing method of the instance. ApsaraMQ forÂ RocketMQ supports the subscription and pay-as-you-go billing methods.

Valid values:

*   PayAsYouGo: pay-as-you go. This billing method allows you to use resources before you pay for the resources.
*   Subscription: This billing method allows you to use resources after you pay for the resources.

For more information, see [Billing methods](~~427234~~).', example='Subscription'),
  period?: int32(name='period', description='The subscription duration of the instance. This parameter takes effect only when the PaymentType parameter is set to Subscription.

Valid values:

*   Monthly subscription: 1, 2, 3, 4, 5, and 6
*   Yearly subscription: 1, 2, and 3', example='3'),
  periodUnit?: string(name='periodUnit', description='The unit of the subscription duration.

Valid values:

*   Month
*   Year', example='Month'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](~~427237~~).

> The elastic TPS feature is supported by only specific instance editions. For more information, see [Instance specifications](~~444715~~).', example='true'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](~~440347~~).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](~~427238~~).', example='72'),
    msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.

Value values: 0.2 to 0.5.', example='0.5'),
  }(name='productInfo', description='The information about the instance specification.'),
  remark?: string(name='remark', description='The description of the instance.', example='This is the remark for test.'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzy6pist7uuna'),
  seriesCode?: string(name='seriesCode', description='The primary edition of the instance. For information about the differences between primary edition instances, see [Instance selection](~~444722~~).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition

> After you create a ApsaraMQ forÂ RocketMQ instance, you can only upgrade the primary edition of the instance. The following editions are sorted in ascending order: Standard Edition, Professional Edition, and Platinum Edition. For example, an instance of Standard Edition can be upgraded to Professional Edition. However, an instance of Professional Edition cannot be downgraded to Standard Edition.', example='standard'),
  serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ forÂ RocketMQ is rmq.', example='rmq'),
  subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences between sub-category edition instances, see [Instance selection](~~444722~~).

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition

If you set the seriesCode parameter to ultimate, you can set this parameter to only cluster_ha.

> After you create a ApsaraMQ forÂ RocketMQ instance, you cannot change the sub-category edition of the instance.', example='cluster_ha'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value of this parameter, but you must ensure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='c2c5d1274a8d4317a13bc5b0d4******'),
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='200'),
  data?: string(name='data', description='The ID of the created instance.', example='rmq-cn-7e22ody****'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='message', description='The error message.', example='Success'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request CreateInstanceRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateInstanceResponse
 */
async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    query['clientToken'] = request.clientToken;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['autoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    body['autoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.networkInfo)) {
    body['networkInfo'] = request.networkInfo;
  }
  if (!Util.isUnset(request.paymentType)) {
    body['paymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.period)) {
    body['period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['periodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productInfo)) {
    body['productInfo'] = request.productInfo;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.seriesCode)) {
    body['seriesCode'] = request.seriesCode;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['serviceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.subSeriesCode)) {
    body['subSeriesCode'] = request.subSeriesCode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

model CreateTopicRequest {
  messageType?: string(name='messageType', description='The type of messages in the topic that you want to create.

Valid values:

*   TRANSACTION: transactional messages
*   FIFO: ordered messages
*   DELAY: scheduled messages or delayed Message
*   NORMAL: normal messages

> The type of messages in the topic must be the same as the type of messages that you want to send. For example, if you create a topic whose message type is ordered messages, the topic can be used to send and receive only ordered messages.', example='NORMAL'),
  remark?: string(name='remark', description='The description of the topic that you want to create.', example='This is the remark for test.'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Topic.Existed'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic already exists.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopicWithOptions(instanceId: string, topicName: string, request: CreateTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageType)) {
    body['messageType'] = request.messageType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopic(instanceId: string, topicName: string, request: CreateTopicRequest): CreateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTopicWithOptions(instanceId, topicName, request, headers, runtime);
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * After you delete a consumer group, the consumer client associated with the consumer group cannot consume messages. Exercise caution when you call this operation.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * After you delete a consumer group, the consumer client associated with the consumer group cannot consume messages. Exercise caution when you call this operation.
  *
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(instanceId: string, consumerGroupId: string): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConsumerGroupWithOptions(instanceId, consumerGroupId, headers, runtime);
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='048242AA-BADA-5F29-B2CD-ED9FA344467F'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * *   After an instance is deleted, the instance cannot be restored. Exercise caution when you call this operation.
  * *   This operation is used to delete a pay-as-you-go instance. A subscription instance is automatically released after it expires. You do not need to manually delete a subscription instance.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * *   After an instance is deleted, the instance cannot be restored. Exercise caution when you call this operation.
  * *   This operation is used to delete a pay-as-you-go instance. A subscription instance is automatically released after it expires. You do not need to manually delete a subscription instance.
  *
  * @return DeleteInstanceResponse
 */
async function deleteInstance(instanceId: string): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(instanceId, headers, runtime);
}

model DeleteTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicResponseBody(name='body'),
}

/**
  * If you delete the topic, the publishing and subscription relationships that are established based on the topic are cleared. Exercise caution when you call this operation.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTopicResponse
 */
async function deleteTopicWithOptions(instanceId: string, topicName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTopicResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you delete the topic, the publishing and subscription relationships that are established based on the topic are cleared. Exercise caution when you call this operation.
  *
  * @return DeleteTopicResponse
 */
async function deleteTopic(instanceId: string, topicName: string): DeleteTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTopicWithOptions(instanceId, topicName, headers, runtime);
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: {
    consumeRetryPolicy?: {
      deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
      maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
      retryPolicy?: string(name='retryPolicy', description='The retry policy.

Valid values:

*   FixedRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at a fixed interval

    <!-- -->

    .

*   DefaultRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at incremental intervals as the number of retries increases

    <!-- -->

    .', example='DefaultRetryPolicy'),
    }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).'),
    consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST'),
    createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
    deliveryOrderType?: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently

    <!-- -->

    :

    <!-- -->

    concurrent delivery

    <!-- -->

*   Orderly

    <!-- -->

    :

    <!-- -->

    ordered delivery

    <!-- -->', example='Concurrently'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
    updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetConsumerGroupResponse
 */
async function getConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetConsumerGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @return GetConsumerGroupResponse
 */
async function getConsumerGroup(instanceId: string, consumerGroupId: string): GetConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getConsumerGroupWithOptions(instanceId, consumerGroupId, headers, runtime);
}

model GetInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: {
    accountInfo?: {
      username?: string(name='username', description='The username of the instance. If you access a ApsaraMQ forÂ RocketMQ instance over the Internet, you must configure the username and password of the instance in the SDK code for authentication.', example='6W0xz2uPfiwp****'),
    }(name='accountInfo', description='The account information.'),
    aclInfo?: {
      aclType?: string(name='aclType', description='The authentication type of the instance.

Valid values:

*   default: intelligent authentication', example='default'),
    }(name='aclInfo', description='The information about access control.'),
    bid?: string(name='bid', description='The business ID (BID) of the commodity.', example='26842'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of a ApsaraMQ forÂ RocketMQ 5.0 instance has a similar format as ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
    expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
    extConfig?: {
      aclType?: string(name='aclType', description='The authentication type of the instance.

Valid values:

*   default: intelligent authentication', example='default'),
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='10'),
      flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   PayByTraffic: pay-by-traffic
*   paybybandwidth: pay-by-bandwidth
*   uninvolved: N/A', example='payByBandwidth'),
      internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](~~427240~~).', example='enable'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](~~440347~~).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](~~427238~~).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether the elastic TPS feature is supported by the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](~~427237~~).

> The elastic TPS feature is supported only by specific instance editions. For more information, see [Instance specifications](~~444715~~).', example='true'),
    }(name='extConfig', description='The extended configurations. We recommend you configure the productInfo, internetInfo, or aclInfo parameter instead of this parameter.'),
    groupCount?: long(name='groupCount', description='The number of groups.', example='10'),
    instanceId?: string(name='instanceId', description='The ID of the instance', example='rmq-cn-7e22ody****'),
    instanceName?: string(name='instanceName', description='The name of the instance.', example='test instance'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', description='The number of topics that are free of charge on the instance.', example='20'),
        quotaName?: string(name='quotaName', description='The quota name.

Valid value:

*   TOPIC_COUNT: the number of topics that can be created on the instance', example='TOPIC_COUNT'),
        totalCount?: double(name='totalCount', description='The total number of topics on the instance.', example='100'),
        usedCount?: double(name='usedCount', description='The number of used topics on the instance.', example='10'),
      }
    ](name='instanceQuotas', description='The quotas in the instance.'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', description='The type of the endpoint that is used to access the instance.

Valid values:

*   TCP_VPC

    <!-- -->

    :

    <!-- -->

    VPC endpoint

    <!-- -->

*   TCP_INTERNET

    <!-- -->

    :

    <!-- -->

    public endpoint

    <!-- -->', example='TCP_INTERNET'),
          endpointUrl?: string(name='endpointUrl', description='The endpoint that is used to access the instance.', example='rmq-cn-c4d2tbk****-vpc.cn-hangzhou.rmq.aliyuncs.com:8080'),
          ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet. This parameter can be configured only if you use a public endpoint to access the ApsaraMQ for RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ for RocketMQ broker over the Internet.

We recommend that you configure internetInfo.ipWhitelist instead of this parameter.', example='192.168.x.x/24'),
        }
      ](name='endpoints', description='The information about endpoints.'),
      internetInfo?: {
        flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='1'),
        flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   PayByBandwidth: pay-by-bandwidth. If the Internet access feature is enabled, specify this value for the parameter.
*   uninvolved: N/A. If the Internet access feature is not enabled, specify this value for the parameter.', example='payByBandwidth'),
        internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](~~427240~~).', example='enable'),
        ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ forÂ RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ forÂ RocketMQ broker over the Internet.'),
      }(name='internetInfo', description='The information about the Internet.'),
      vpcInfo?: {
        vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated.', example='vsw-uf6gwtbn6etadpvz7****'),
        vpcId?: string(name='vpcId', description='The ID of the VPC with which the instance is associated.', example='vpc-uf6of9452b2pba82c****'),
      }(name='vpcInfo', description='The information about the VPC.'),
    }(name='networkInfo', description='The network information.'),
    paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo: pay-as-you-go
*   Subscription', example='Subscription'),
    productInfo?: {
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](~~440347~~).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](~~427238~~).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](~~427237~~).

> The elastic TPS feature is supported by only specific instance editions. For more information, see [Instance specifications](~~444715~~).', example='true'),
    }(name='productInfo', description='The extended configurations of the instance.'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
    remark?: string(name='remark', description='The description of the instance.', example='This is remark for instance.'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfm3tmjruyribi'),
    seriesCode?: string(name='seriesCode', description='The primary edition of the instance. For information about the differences between primary edition instances, see [Instance selection](~~444722~~).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
    serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ forÂ RocketMQ is rmq.', example='rmq'),
    software?: {
      maintainTime?: string(name='maintainTime', description='The period of upgrade time.', example='02:00-06:00'),
      softwareVersion?: string(name='softwareVersion', description='The version of software.', example='5.0-rmq-20230619-1'),
      upgradeMethod?: string(name='upgradeMethod', description='The upgrade method.

Valid values:

- Auto: automatic upgrade

- Manual: manual upgrade', example='auto'),
    }(name='software', description='The instance software information.'),
    startTime?: string(name='startTime', description='The time when the instance was started.', example='2022-08-01 00:00:00'),
    status?: string(name='status', description='The status of the instance.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
    subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences between sub-category edition instances, see [Instance selection](~~444722~~).

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
    tags?: [ 
      {
        key?: string(name='key', description='The tag key of the resource.', example='key'),
        value?: string(name='value', description='The tag value of the resource.', example='value'),
      }
    ](name='tags', description='The resource tags.'),
    topicCount?: long(name='topicCount', description='The number of topics.', example='10'),
    updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
    userId?: string(name='userId', description='The ID of the user who owns the instance.', example='111111111111111'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='05AB7FBD-F1D3-5D87-BF78-BD782249****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceResponse
 */
async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @return GetInstanceResponse
 */
async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

model GetTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION: transactional message
*   FIFO: ordered message
*   DELAY: scheduled or delayed message
*   NORMAL: normal message', example='NORMAL'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING: The topic is running.
*   CREATING: The topic is being created.', example='RUNNING'),
    topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
    updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicResponseBody(name='body'),
}

async function getTopicWithOptions(instanceId: string, topicName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTopicResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopic(instanceId: string, topicName: string): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTopicWithOptions(instanceId, topicName, headers, runtime);
}

model ListConsumerGroupSubscriptionsResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingInstanceId'),
  data?: [ 
    {
      consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='CID-TEST'),
      filterExpression?: string(name='filterExpression', description='The filter expression.', example='*'),
      filterExpressionType?: string(name='filterExpressionType', description='The type of the filter expression. Valid values: SQL, TAG, and UNSPECIFIED.', example='SQL'),
      messageModel?: string(name='messageModel', description='The consumption mode. Valid values: BROADCASTING and CLUSTERING.', example='BROADCASTING'),
      subscriptionStatus?: string(name='subscriptionStatus', description='The subscription status. Valid values: ONLINE and OFFLINE.', example='ONLINE'),
      topicCreated?: boolean(name='topicCreated', description='Indicates whether the topic is created.', example='true'),
      topicName?: string(name='topicName', description='The topic to which the consumer group subscribes.', example='topic_test'),
    }
  ](name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The returned dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The returned dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The returned HTTP status code.', example='200'),
  message?: string(name='message', description='The returned error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='5F4D9D5F-625B-59FF-BD4F-DA8284575DB4'),
  success?: boolean(name='success', description='Indicates whether the request is successful.', example='true'),
}

model ListConsumerGroupSubscriptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConsumerGroupSubscriptionsResponseBody(name='body'),
}

async function listConsumerGroupSubscriptionsWithOptions(instanceId: string, consumerGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListConsumerGroupSubscriptionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListConsumerGroupSubscriptions',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}/subscriptions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConsumerGroupSubscriptions(instanceId: string, consumerGroupId: string): ListConsumerGroupSubscriptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConsumerGroupSubscriptionsWithOptions(instanceId, consumerGroupId, headers, runtime);
}

model ListConsumerGroupsRequest {
  filter?: string(name='filter', description='The condition that you want to use to filter consumer groups in the instance. If you leave this parameter empty, all consumer groups in the instance are queried.', example='CID-TEST'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='10'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='GID-TEST'),
        createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter InstanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='5503A460-98ED-5543-92CF-4853DE28****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListConsumerGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConsumerGroupsResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request ListConsumerGroupsRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListConsumerGroupsResponse
 */
async function listConsumerGroupsWithOptions(instanceId: string, request: ListConsumerGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListConsumerGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConsumerGroups',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request ListConsumerGroupsRequest
  * @return ListConsumerGroupsResponse
 */
async function listConsumerGroups(instanceId: string, request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConsumerGroupsWithOptions(instanceId, request, headers, runtime);
}

model ListInstancesRequest {
  filter?: string(name='filter', description='The filter condition that is used to query instances. If you do not configure this parameter, all instances are queried.', example='rmq-cn-7e22ody****'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.

Valid values: 1 to 100000000.

If the value that you specify for this parameter is less than 1, the system uses 1 as the value. If the value that you specify for this parameter is greater than 100000000, the system uses 100000000 as the value.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries returned on each page.

Value values: 10 to 200.

If the value that you specify for this parameter is less than 10, the system uses 10 as the value. If the value that you specify for this parameter is greater than 200, the system uses 200 as the value.', example='10'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******'),
  tags?: string(name='tags', description='The tags that are used to filter instances.', example='[{"key": "rmq-test", "value": "test"}]'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingPageNumber'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of ApsaraMQ for RocketMQ 5.0 instances has a similar format to ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
        createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
        expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
        groupCount?: long(name='groupCount', description='The number of consumer groups that are created on the instance.', example='10'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        instanceName?: string(name='instanceName', description='The instance name.', example='test instance'),
        paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo
*   Subscription', example='Subscription'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
        remark?: string(name='remark', description='The instance description.', example='This is remark for instance.'),
        resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******'),
        seriesCode?: string(name='seriesCode', description='The primary edition of the instance.

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
        serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ for RocketMQ is rmq.', example='rmq'),
        startTime?: string(name='startTime', description='The time when the instance was started.', example='2022-08-01 00:00:00'),
        status?: string(name='status', description='The instance status.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
        subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance.

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
        tags?: [ 
          {
            key?: string(name='key', description='The tag key of the resource.', example='key'),
            value?: string(name='value', description='The tag value of the resource.', example='value'),
          }
        ](name='tags', description='The resource tags.'),
        topicCount?: long(name='topicCount', description='The number of topics that are created on the instance.', example='20'),
        updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
        userId?: string(name='userId', description='The ID of the user who owns the instance.', example='6W0xz2uPfiwp****'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='100'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='PageNumber'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='pageNumber'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter pageNumber is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='84445A20-2B50-5306-A3C0-AF99FC1833C6'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request ListInstancesRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListInstancesResponse
 */
async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model ListTopicsRequest {
  filter?: string(name='filter', description='The condition that you want to use to filter topics in the instance. If you leave this parameter empty, all topics in the instance are queried.', example='topic_test'),
  messageTypes?: [ string ](name='messageTypes', description='The message types of the topics.'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='3'),
}

model ListTopicsShrinkRequest {
  filter?: string(name='filter', description='The condition that you want to use to filter topics in the instance. If you leave this parameter empty, all topics in the instance are queried.', example='topic_test'),
  messageTypesShrink?: string(name='messageTypes', description='The message types of the topics.'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='3'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION

    <!-- -->

    :

    <!-- -->

    transactional message

    <!-- -->

*   FIFO

    <!-- -->

    :

    <!-- -->

    ordered message

    <!-- -->

*   DELAY

    <!-- -->

    :

    <!-- -->

    scheduled or delayed message

    <!-- -->

*   NORMAL

    <!-- -->

    :

    <!-- -->

    normal message

    <!-- -->', example='NORMAL'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING

    <!-- -->

    : The topic is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The topic is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
        updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='3'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopicsWithOptions(instanceId: string, tmpReq: ListTopicsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(tmpReq);
  var request = new ListTopicsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.messageTypes)) {
    request.messageTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.messageTypes, 'messageTypes', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.messageTypesShrink)) {
    query['messageTypes'] = request.messageTypesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopics(instanceId: string, request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTopicsWithOptions(instanceId, request, headers, runtime);
}

model ResetConsumeOffsetRequest {
  resetTime?: string(name='resetTime', description='The time when the consumer offset is reset.', example='2023-03-22 12:17:08'),
  resetType?: string(name='resetType', description='The method that is used to reset the consumer offset. Valid values: LATEST_OFFSET and SPECIFIED_TIME.', example='LATEST_OFFSET'),
}

model ResetConsumeOffsetResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingInstanceId'),
  dynamicCode?: string(name='dynamicCode', description='The returned dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The returned dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The returned HTTP status code.', example='200'),
  message?: string(name='message', description='The returned error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='F9A95891-EAD4-5A2B-8A30-676CD18921AF'),
  success?: boolean(name='success', description='Indicates whether the request is successful.', example='true'),
}

model ResetConsumeOffsetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetConsumeOffsetResponseBody(name='body'),
}

async function resetConsumeOffsetWithOptions(instanceId: string, consumerGroupId: string, topicName: string, request: ResetConsumeOffsetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetConsumeOffsetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resetTime)) {
    body['resetTime'] = request.resetTime;
  }
  if (!Util.isUnset(request.resetType)) {
    body['resetType'] = request.resetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetConsumeOffset',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}/consumeOffsets/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetConsumeOffset(instanceId: string, consumerGroupId: string, topicName: string, request: ResetConsumeOffsetRequest): ResetConsumeOffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resetConsumeOffsetWithOptions(instanceId, consumerGroupId, topicName, request, headers, runtime);
}

model UpdateConsumerGroupRequest {
  consumeRetryPolicy?: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy?: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](~~440356~~).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The new consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).'),
  deliveryOrderType?: string(name='deliveryOrderType', description='The new message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery', example='Concurrently'),
  remark?: string(name='remark', description='The new remarks on the consumer group.', example='This is the remark for test.'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidDeliveryOrderType'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='DeliveryOrderType'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='deliveryOrderType'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request UpdateConsumerGroupRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroupWithOptions(instanceId: string, consumerGroupId: string, request: UpdateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.consumeRetryPolicy)) {
    body['consumeRetryPolicy'] = request.consumeRetryPolicy;
  }
  if (!Util.isUnset(request.deliveryOrderType)) {
    body['deliveryOrderType'] = request.deliveryOrderType;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConsumerGroup',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/consumerGroups/${OpenApiUtil.getEncodeParam(consumerGroupId)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request UpdateConsumerGroupRequest
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroup(instanceId: string, consumerGroupId: string, request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateConsumerGroupWithOptions(instanceId, consumerGroupId, request, headers, runtime);
}

model UpdateInstanceRequest {
  instanceName?: string(name='instanceName', description='The new name of the instance.', example='test_instance'),
  networkInfo?: {
    internetInfo?: {
      ipWhitelist?: [ string ](name='ipWhitelist', description='The IP address whitelist that allows access to the instance over the Internet.

*   If you do not configure an IP address whitelist, all IP addresses are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.
*   If you configure an IP address whitelist, only IP addresses in the whitelist are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.'),
    }(name='internetInfo', description='The Internet information about the instance. This parameter takes effect only when the Internet access feature is enabled for the instance.'),
  }(name='networkInfo', description='The new network information about the instance.'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable burst scaling for the instance.

Valid values:

*   true
*   false

After you enable burst scaling, the system allows the actual messaging transactions per second (TPS) of the ApsaraMQ forÂ RocketMQ instance to exceed the upper limit of the basic computing specification. You are charged for the extra TPS. For more information, see [Computing fee](~~427237~~).

> Only specific types of instances support burst scaling. For more information, see [Instance specifications](~~444715~~).', example='true'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For more information about the valid values, see the "Limits on resource quotas" section of the [Usage limits](~~440347~~) topic.

The storage of ApsaraMQ forÂ RocketMQ messages is in serverless scaling mode. You are charged based on the actual used storage. You can adjust the storage retention period to reduce storage usage and costs. For more information, see [Storage fees](~~427238~~).', example='72'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio of the number of messages that you can send to the number of messages that you can receive in the instance.

Value values: 0.25 to 1.', example='0.5'),
  }(name='productInfo', description='The extended configurations of the instance.'),
  remark?: string(name='remark', description='The new remarks on the instance.', example='This is the remark for test.'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AA87DE09-DA44-52F4-9515-78B1B607****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request UpdateInstanceRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateInstanceResponse
 */
async function updateInstanceWithOptions(instanceId: string, request: UpdateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.networkInfo)) {
    body['networkInfo'] = request.networkInfo;
  }
  if (!Util.isUnset(request.productInfo)) {
    body['productInfo'] = request.productInfo;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
  * @param request UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(instanceId: string, request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceWithOptions(instanceId, request, headers, runtime);
}

model UpdateTopicRequest {
  remark?: string(name='remark', description='The new remarks on the topic.', example='This is the remark for test.'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTopicResponseBody(name='body'),
}

async function updateTopicWithOptions(instanceId: string, topicName: string, request: UpdateTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTopic',
    version = '2022-08-01',
    protocol = 'HTTPS',
    pathname = `/instances/${OpenApiUtil.getEncodeParam(instanceId)}/topics/${OpenApiUtil.getEncodeParam(topicName)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTopic(instanceId: string, topicName: string, request: UpdateTopicRequest): UpdateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTopicWithOptions(instanceId, topicName, request, headers, runtime);
}

