/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RocketMQ';
  @version = '2022-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  regionId: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='resourceGroupId', description='The ID of the resource group to which the instance is changed.

You can call the [ListResourceGroups](https://www.alibabacloud.com/help/resource-management/latest/listresourcegroups) operation to query existing resource groups.', example='rg-9gLOoK****', position='Query'),
  resourceId: string(name='resourceId', description='The ID of the resource. Set this parameter to the ID of the ApsaraMQ forÂ RocketMQ instance whose resource group you want to change.', example='c2c5d1274a8d4317a13bc5b0d4******', position='Query'),
  resourceType: string(name='resourceType', description='The type of resource.

Set this parameter to **instance**. The value of this parameter cannot be changed.', example='instance', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Instance.NotFound'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/resourceGroup/change', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance in which you want to create the consumer group.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group. The ID is globally unique and is used to identify a consumer group.

The following limits are imposed on the ID:

*   Character limit: The ID can contain letters, digits, underscores (\\_), hyphens (-), and percent signs (%).
*   Length limit: The ID must be 1 to 60 characters in length.

For more information about strings that are reserved for the system, see [Limits on parameters](~~440347~~).', example='GID_test_groupId', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](~~440356~~).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery', example='Concurrently', position='Body'),
  remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.', position='Body'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal for the instance. This parameter takes effect only if you set PaymentType to Subscription.

*   true: enable
*   false: disable', example='true', position='Body'),
  autoRenewPeriod?: int32(name='autoRenewPeriod', description='The auto-renewal cycle of the instance. This parameter takes effect only if you set autoRenew to true. Unit: months.

Valid values:

*   Monthly renewal: 1, 2, 3, 6, and 12', example='3', position='Body'),
  commodityCode?: string(name='commodityCode', description='The commodity code.

*   ons_rmqpost_public_intl: pay-as-you-go
*   ons_rmqsub_public_intl: subscription', example='ons_ rmqpost_public_cn', position='Body'),
  instanceName?: string(name='instanceName', description='The name of the instance that you want to create.

If you do not configure this parameter, the instance ID is used as the instance name.', example='rmq-cn-72u3048uxxx', position='Body'),
  networkInfo: {
    internetInfo: {
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.

This parameter is required only if you set flowOutType to payByBandwidth.

Valid values: 1 to 1000.', example='100'),
      flowOutType: string(name='flowOutType', description='The billing method of Internet usage.

Valid values:

*   payByBandwidth: pay-by-bandwidth. If Internet access is enabled for an instance, specify this value for the parameter.
*   uninvolved: No billing method is involved. If Internet access is disabled for an instance, specify this value for the parameter.', example='uninvolved'),
      internetSpec: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ for RocketMQ allows you to access instances in VPCs. If you enable Internet access for an instance, you can access the instance over the Internet. After you enable this feature, you are charged for outbound Internet traffic. For more information, see [Internet access fee](~~427240~~).', example='disable'),
      ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet. This parameter can be configured only if you use a public endpoint to access the instance.

*   If you do not configure an IP address whitelist, all CIDR blocks are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If configure an IP address whitlist, only the IP addresses in the whitelist are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.'),
    }(name='internetInfo', description='The Internet-related configurations.'),
    vpcInfo: {
      securityGroupIds?: string(name='securityGroupIds', description='The ID of the security group to which the instance belongs.', example='sg-bp17hpmgz96tvnsdy6so'),
      vSwitchId: string(name='vSwitchId', description='The ID of the vSwitch with which you want to associate the instance.

>  After an ApsaraMQ for RocketMQ instance is created, you cannot change the vSwitch with which the instance is associated. If you want to change the vSwitch with which the instance is associated, you must release the instance and purchase a new instance.', example='vsw-uf6gwtbn6etadpv*******'),
      vpcId: string(name='vpcId', description='The ID of the VPC in which you want to deploy the instance.

>  After an ApsaraMQ for RocketMQ instance is created, you cannot change the VPC in which the instance is deployed. If you want to change the VPC in which the instance is deployed, you must release the instance and create a new instance.', example='vpc-wz9qt50xhtj9krb******'),
    }(name='vpcInfo', description='The virtual private cloud (VPC)-related configurations.'),
  }(name='networkInfo', description='The network configurations.', position='Body'),
  paymentType: string(name='paymentType', description='The billing method of the instance. ApsaraMQ for RocketMQ supports the subscription and pay-as-you-go billing methods.

Valid values:

*   PayAsYouGo: This billing method allows you to use resources before you pay for the resources.
*   Subscription: This billing method allows you to use resources after you pay for the resources.

For more information, see [Billing methods](~~427234~~).', example='Subscription', position='Body'),
  period?: int32(name='period', description='The subscription duration of the instance. This parameter takes effect only if you set PaymentType to Subscription.

Valid values:

*   Monthly subscription: 1, 2, 3, 4, 5, and 6
*   Yearly subscription: 1, 2, and 3', example='3', position='Body'),
  periodUnit?: string(name='periodUnit', description='The unit of the subscription duration.

Valid values:

*   Month
*   Year', example='Month', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for an ApsaraMQ for RocketMQ instance, you can use a specific number of TPS that exceeds the specification limit. You are charged for using the elastic TPS feature. For more information, see [Computing fees](~~427237~~).

>  The elastic TPS feature is supported only by instances of specific editions. For more information, see [Instance editions](~~444715~~).', example='true'),
    chargeType?: string(name='chargeType', description='The billing method.

Valid values:

*   provisioned
*   ondemand', example='provisioned'),
    intranetSpec?: string(name='intranetSpec', description='This parameter is no longer used. You do not need to configure this parameter.', example='xxxx'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section of the [Limits](~~440347~~) topic.

ApsaraMQ for RocketMQ supports serverless scaling of message storage. You are charged storage fees based on your actual storage usage. You can change the retention period of messages to manage storage capacity. For more information, see [Storage fees](~~427238~~).', example='72'),
    msgProcessSpec: string(name='msgProcessSpec', description='The computing specification that specifies the messaging transactions per second (TPS) of the instance. For information about computing specification limits, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The proportion of message sending TPS to the messaging TPS on the instance.

For example, you create an instance whose peak messaging TPS is specified as 1,000 and the proportion of message sending TPS is specified as 0.8. In this case, the peak message sending TPS is 800 and the peak message receiving TPS is 200 on the instance.

Valid values: 0 to 1. Default value: 0.5.', example='0.5'),
  }(name='productInfo', description='The information about the instance specifications.', position='Body'),
  remark?: string(name='remark', description='The instance description.', example='This is the remark for test.', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The resource group ID.', example='rg-aekzy6pist7uuna', position='Body'),
  seriesCode: string(name='seriesCode', description='The primary edition of the instance. For information about the differences between primary edition instances, see [Instance selection](~~444722~~).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition

>  After an instance is created, you can only upgrade the primary edition of the instance. The following editions are sorted in ascending order: Standard Edition, Professional Edition, Enterprise Platinum Edition. For example, you can upgrade an instance of Standard Edition to Professional Edition, but cannot downgrade an instance of Professional Edition to Standard Edition.', example='standard', position='Body'),
  serviceCode: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ for RocketMQ is rmq.', example='rmq', position='Body'),
  subSeriesCode: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences between sub-category edition instances, see [Instance selection](~~444722~~).

Valid values:

*   cluster_ha: High-availability Cluster Edition
*   single_node: Standalone Edition

If you set seriesCode to ultimate, you can set this parameter to only cluster_ha.

>  After an instance is created, you cannot change the sub-category edition of the instance.', example='cluster_ha', position='Body'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value of this parameter, but you must ensure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='c2c5d1274a8d4317a13bc5b0d4******', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='200'),
  data?: string(name='data', description='The ID of the created instance.', example='rmq-cn-7e22ody****'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='message', description='The error message.', example='Success'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/instances', 'json', false, 'json', request);
}

model CreateTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic. The name is used to identify the topic and is globally unique in the instance.

The following describes the naming conventions of a topic:

*   The name can contain letters, digits, underscores (\\_), hyphens (-), and percent signs (%).
*   The name must be 1 to 60 characters in length.

For information about the characters reserved for the system, see [Limits on parameters](~~440347~~).', example='topic_test', position='Path'),
  messageType?: string(name='messageType', description='The type of messages in the topic that you want to create.

Valid values:

*   TRANSACTION: transactional messages
*   FIFO: ordered messages
*   DELAY: scheduled messages or delayed Message
*   NORMAL: normal messages

> The type of messages in the topic must be the same as the type of messages that you want to send. For example, if you create a topic whose message type is ordered messages, the topic can be used to send and receive only ordered messages.', example='NORMAL', position='Body'),
  remark?: string(name='remark', description='The description of the topic that you want to create.', example='This is the remark for test.', position='Body'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Topic.Existed'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic already exists.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTopic', 'POST', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance from which you want to delete the consumer group.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST', position='Path'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * After you delete a consumer group, the consumer client associated with the consumer group cannot consume messages. Exercise caution when you call this operation.
  *
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the ApsaraMQ forÂ RocketMQ instance that you want to delete.', example='rmq-cn-7e22ody0129', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='048242AA-BADA-5F29-B2CD-ED9FA344467F'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * *   After an instance is deleted, the instance cannot be restored. Exercise caution when you call this operation.
  * *   This operation is used to delete a pay-as-you-go instance. A subscription instance is automatically released after it expires. You do not need to manually delete a subscription instance.
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.', example='topic_test', position='Path'),
}

model DeleteTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * If you delete the topic, the publishing and subscription relationships that are established based on the topic are cleared. Exercise caution when you call this operation.
  *
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTopic', 'DELETE', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model GetConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer group belongs.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST', position='Path'),
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: {
    consumeRetryPolicy?: {
      deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
      maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
      retryPolicy?: string(name='retryPolicy', description='The retry policy.

Valid values:

*   FixedRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at a fixed interval

    <!-- -->

    .

*   DefaultRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at incremental intervals as the number of retries increases

    <!-- -->

    .', example='DefaultRetryPolicy'),
    }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).'),
    consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST'),
    createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
    deliveryOrderType?: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently

    <!-- -->

    :

    <!-- -->

    concurrent delivery

    <!-- -->

*   Orderly

    <!-- -->

    :

    <!-- -->

    ordered delivery

    <!-- -->', example='Concurrently'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
    updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function getConsumerGroup(request: GetConsumerGroupRequest): GetConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroup', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance that you want to query.', example='rmq-cn-7e22ody****', position='Path'),
}

model GetInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: {
    accountInfo?: {
      username?: string(name='username', description='The username of the instance. If you access a ApsaraMQ forÂ RocketMQ instance over the Internet, you must configure the username and password of the instance in the SDK code for authentication.', example='6W0xz2uPfiwp****'),
    }(name='accountInfo', description='The account information.'),
    aclInfo?: {
      aclType?: string(name='aclType', description='The authentication type of the instance.

Valid values:

*   default: intelligent authentication', example='default'),
    }(name='aclInfo', description='The information about access control.'),
    bid?: string(name='bid', description='The business ID (BID) of the commodity.', example='26842'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of a ApsaraMQ forÂ RocketMQ 5.0 instance has a similar format as ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
    expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
    extConfig?: {
      aclType?: string(name='aclType', description='The authentication type of the instance.

Valid values:

*   default: intelligent authentication', example='default'),
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='10'),
      flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   PayByTraffic: pay-by-traffic
*   paybybandwidth: pay-by-bandwidth
*   uninvolved: N/A', example='payByBandwidth'),
      internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](~~427240~~).', example='enable'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](~~440347~~).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](~~427238~~).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether the elastic TPS feature is supported by the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](~~427237~~).

> The elastic TPS feature is supported only by specific instance editions. For more information, see [Instance specifications](~~444715~~).', example='true'),
    }(name='extConfig', description='The extended configurations. We recommend you configure the productInfo, internetInfo, or aclInfo parameter instead of this parameter.'),
    groupCount?: long(name='groupCount', description='The number of groups.', example='10'),
    instanceId?: string(name='instanceId', description='The ID of the instance', example='rmq-cn-7e22ody****'),
    instanceName?: string(name='instanceName', description='The name of the instance.', example='test instance'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', description='The number of topics that are free of charge on the instance.', example='20'),
        quotaName?: string(name='quotaName', description='The quota name.

Valid value:

*   TOPIC_COUNT: the number of topics that can be created on the instance', example='TOPIC_COUNT'),
        totalCount?: double(name='totalCount', description='The total number of topics on the instance.', example='100'),
        usedCount?: double(name='usedCount', description='The number of used topics on the instance.', example='10'),
      }
    ](name='instanceQuotas', description='The quotas in the instance.'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', description='The type of the endpoint that is used to access the instance.

Valid values:

*   TCP_VPC

    <!-- -->

    :

    <!-- -->

    VPC endpoint

    <!-- -->

*   TCP_INTERNET

    <!-- -->

    :

    <!-- -->

    public endpoint

    <!-- -->', example='TCP_INTERNET'),
          endpointUrl?: string(name='endpointUrl', description='The endpoint that is used to access the instance.', example='rmq-cn-c4d2tbk****-vpc.cn-hangzhou.rmq.aliyuncs.com:8080'),
          ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet. This parameter can be configured only if you use a public endpoint to access the ApsaraMQ for RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ for RocketMQ broker over the Internet.

We recommend that you configure internetInfo.ipWhitelist instead of this parameter.', example='192.168.x.x/24'),
        }
      ](name='endpoints', description='The information about endpoints.'),
      internetInfo?: {
        flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='1'),
        flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   PayByBandwidth: pay-by-bandwidth. If the Internet access feature is enabled, specify this value for the parameter.
*   uninvolved: N/A. If the Internet access feature is not enabled, specify this value for the parameter.', example='payByBandwidth'),
        internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](~~427240~~).', example='enable'),
        ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ forÂ RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ forÂ RocketMQ broker over the Internet.'),
      }(name='internetInfo', description='The information about the Internet.'),
      vpcInfo?: {
        securityGroupIds?: string(name='securityGroupIds', description='The ID of the security group with which the instance is associated.', example='sg-hp35r2hc3a3sv8q2sb16'),
        vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated.', example='vsw-uf6gwtbn6etadpvz7****'),
        vpcId?: string(name='vpcId', description='The ID of the VPC with which the instance is associated.', example='vpc-uf6of9452b2pba82c****'),
      }(name='vpcInfo', description='The information about the VPC.'),
    }(name='networkInfo', description='The network information.'),
    paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo: pay-as-you-go
*   Subscription', example='Subscription'),
    productInfo?: {
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](~~440347~~).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](~~427238~~).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](~~444715~~).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](~~427237~~).

> The elastic TPS feature is supported by only specific instance editions. For more information, see [Instance specifications](~~444715~~).', example='true'),
      traceOn?: boolean(name='traceOn', description='Whether to enable tracking capability. Non-serverless instances are enabled by default, and serverless instances are optional for users.', example='true'),
    }(name='productInfo', description='The extended configurations of the instance.'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
    remark?: string(name='remark', description='The description of the instance.', example='This is remark for instance.'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfm3tmjruyribi'),
    seriesCode?: string(name='seriesCode', description='The primary edition of the instance. For information about the differences between primary edition instances, see [Instance selection](~~444722~~).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
    serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ forÂ RocketMQ is rmq.', example='rmq'),
    software?: {
      maintainTime?: string(name='maintainTime', description='The period of upgrade time.', example='02:00-06:00'),
      softwareVersion?: string(name='softwareVersion', description='The version of software.', example='5.0-rmq-20230619-1'),
      upgradeMethod?: string(name='upgradeMethod', description='The upgrade method.

Valid values:

- Auto: automatic upgrade

- Manual: manual upgrade', example='auto'),
    }(name='software', description='The instance software information.'),
    startTime?: string(name='startTime', description='The time when the instance was started.', example='2022-08-01 00:00:00'),
    status?: string(name='status', description='The status of the instance.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
    subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences between sub-category edition instances, see [Instance selection](~~444722~~).

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
    tags?: [ 
      {
        key?: string(name='key', description='The tag key of the resource.', example='key'),
        value?: string(name='value', description='The tag value of the resource.', example='value'),
      }
    ](name='tags', description='The resource tags.'),
    topicCount?: long(name='topicCount', description='The number of topics.', example='10'),
    updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
    userId?: string(name='userId', description='The ID of the user who owns the instance.', example='111111111111111'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='05AB7FBD-F1D3-5D87-BF78-BD782249****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/instances/{instanceId}', 'json', false, 'json', request);
}

model GetTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.', example='topic_test', position='Path'),
}

model GetTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION: transactional message
*   FIFO: ordered message
*   DELAY: scheduled or delayed message
*   NORMAL: normal message', example='NORMAL'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING: The topic is running.
*   CREATING: The topic is being created.', example='RUNNING'),
    topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
    updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicResponseBody(name='body'),
}

async function getTopic(request: GetTopicRequest): GetTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTopic', 'GET', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model ListAvailableZonesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListAvailableZonesResponseBody = {
  code?: string(name='code', example='Topic.NotFound'),
  data?: [ 
    {
      createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
      updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
      zoneId?: string(name='zoneId', example='cn-qingdao-b'),
      zoneName?: string(name='zoneName', example='ha-cn-t9b30w902vm_qrs'),
    }
  ](name='data'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', example='true'),
}

model ListAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableZonesResponseBody(name='body'),
}

async function listAvailableZones(request: ListAvailableZonesRequest): ListAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAvailableZones', 'GET', '/zones', 'json', false, 'json', request);
}

model ListConsumerConnectionsRequest {
  instanceId: string(name='instanceId', example='rmq-cn-uax32mf9h1f', position='Path'),
  consumerGroupId: string(name='consumerGroupId', example='GID_TEST_STOCK_OPEND_GW', position='Path'),
}

model ListConsumerConnectionsResponseBody = {
  code?: string(name='code', example='MissingPageNumber'),
  data?: {
    connections?: [ 
      {
        clientId?: string(name='clientId', example='172.17.135.197@17392#1936705963#551717232#9873695589062458'),
        egressIp?: string(name='egressIp', example='xx.xx.xx.xx'),
        hostname?: string(name='hostname', example='vos'),
        language?: string(name='language', example='java'),
        messageModel?: string(name='messageModel', example='BROADCASTING'),
        version?: string(name='version', example='1.0'),
      }
    ](name='connections'),
    consumerGroupId?: string(name='consumerGroupId', example='CID-TEST'),
    instanceId?: string(name='instanceId', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
  }(name='data'),
  dynamicCode?: string(name='dynamicCode', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='The instance cannot be found.'),
  requestId?: string(name='requestId', example='A3620115-6F1F-5CFB-AA3F-BBD4853B2EC4'),
  success?: boolean(name='success', example='true'),
}

model ListConsumerConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerConnectionsResponseBody(name='body'),
}

async function listConsumerConnections(request: ListConsumerConnectionsRequest): ListConsumerConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerConnections', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/connections', 'json', false, 'json', request);
}

model ListConsumerGroupSubscriptionsRequest {
  instanceId: string(name='instanceId', description='The instance ID.', example='rmq-cn-tl32wwz1r05', position='Path'),
  consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='PRINT_RETRY_CONSUMER', position='Path'),
}

model ListConsumerGroupSubscriptionsResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingInstanceId'),
  data?: [ 
    {
      consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='CID-TEST'),
      filterExpression?: string(name='filterExpression', description='The filter expression.', example='*'),
      filterExpressionType?: string(name='filterExpressionType', description='The type of the filter expression. Valid values: SQL, TAG, and UNSPECIFIED.', example='SQL'),
      messageModel?: string(name='messageModel', description='The consumption mode. Valid values: BROADCASTING and CLUSTERING.', example='BROADCASTING'),
      subscriptionStatus?: string(name='subscriptionStatus', description='The subscription status. Valid values: ONLINE and OFFLINE.', example='ONLINE'),
      topicCreated?: boolean(name='topicCreated', description='Indicates whether the topic is created.', example='true'),
      topicName?: string(name='topicName', description='The topic to which the consumer group subscribes.', example='topic_test'),
    }
  ](name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The returned dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The returned dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The returned HTTP status code.', example='200'),
  message?: string(name='message', description='The returned error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='5F4D9D5F-625B-59FF-BD4F-DA8284575DB4'),
  success?: boolean(name='success', description='Indicates whether the request is successful.', example='true'),
}

model ListConsumerGroupSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerGroupSubscriptionsResponseBody(name='body'),
}

async function listConsumerGroupSubscriptions(request: ListConsumerGroupSubscriptionsRequest): ListConsumerGroupSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroupSubscriptions', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/subscriptions', 'json', false, 'json', request);
}

model ListConsumerGroupsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer groups belong.', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='The condition that you want to use to filter consumer groups in the instance. If you leave this parameter empty, all consumer groups in the instance are queried.', example='CID-TEST', position='Query'),
  pageNumber: int32(name='pageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries to return on each page.', example='10', minimum=10, maximum=100, position='Query'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='GID-TEST'),
        createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter InstanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='5503A460-98ED-5543-92CF-4853DE28****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListConsumerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerGroupsResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function listConsumerGroups(request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroups', 'GET', '/instances/{instanceId}/consumerGroups', 'json', false, 'json', request);
}

model ListInstancesRequest {
  filter?: string(name='filter', description='The filter condition that is used to query instances. If you do not configure this parameter, all instances are queried.', example='rmq-cn-7e22ody****', position='Query'),
  pageNumber: int32(name='pageNumber', description='The number of the page to return.

Valid values: 1 to 100000000.

If the value that you specify for this parameter is less than 1, the system uses 1 as the value. If the value that you specify for this parameter is greater than 100000000, the system uses 100000000 as the value.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries returned on each page.

Valid values: 10 to 200.

If the value that you specify for this parameter is less than 10, the system uses 10 as the value. If the value that you specify for this parameter is greater than 200, the system uses 200 as the value.', example='10', minimum=10, maximum=200, position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******', position='Query'),
  tags?: string(name='tags', description='The tags that are used to filter instances.', example='[{"key": "rmq-test", "value": "test"}]', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingPageNumber'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of ApsaraMQ for RocketMQ 5.0 instances has a similar format to ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
        createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
        expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
        groupCount?: long(name='groupCount', description='The number of consumer groups that are created on the instance.', example='10'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        instanceName?: string(name='instanceName', description='The instance name.', example='test instance'),
        paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo
*   Subscription', example='Subscription'),
        productInfo?: {
          traceOn?: boolean(name='traceOn', description='Whether to enable tracking capability. Non-serverless instances are enabled by default, and serverless instances are optional for users.', example='true'),
        }(name='productInfo', description='The product information of instance.'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
        remark?: string(name='remark', description='The instance description.', example='This is remark for instance.'),
        resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******'),
        seriesCode?: string(name='seriesCode', description='The primary edition of the instance.

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
        serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ for RocketMQ is rmq.', example='rmq'),
        startTime?: string(name='startTime', description='The time when the instance was started.', example='2022-08-01 00:00:00'),
        status?: string(name='status', description='The instance status.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
        subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance.

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
        tags?: [ 
          {
            key?: string(name='key', description='The tag key of the resource.', example='key'),
            value?: string(name='value', description='The tag value of the resource.', example='value'),
          }
        ](name='tags', description='The resource tags.'),
        topicCount?: long(name='topicCount', description='The number of topics that are created on the instance.', example='20'),
        updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
        userId?: string(name='userId', description='The ID of the user who owns the instance.', example='6W0xz2uPfiwp****'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='100'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='PageNumber'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='pageNumber'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter pageNumber is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='84445A20-2B50-5306-A3C0-AF99FC1833C6'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/instances', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListRegionsResponseBody = {
  code?: string(name='code', example='MissingPageNumber'),
  data?: [ 
    {
      createTime?: string(name='createTime', example='2022-08-01 20:05:50'),
      regionId?: string(name='regionId', example='cn-hangzhou'),
      regionName?: string(name='regionName'),
      supportRocketmqV4?: boolean(name='supportRocketmqV4', example='true'),
      supportRocketmqV5?: boolean(name='supportRocketmqV5', example='true'),
      tags?: [ 
        {
          tagCode?: string(name='tagCode', example='xx'),
          tagValue?: any(name='tagValue', example='xx'),
        }
      ](name='tags'),
      updateTime?: string(name='updateTime', example='2022-08-01 20:05:50'),
    }
  ](name='data'),
  dynamicCode?: string(name='dynamicCode', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', example='0B962390-D84B-5D44-8C11-79DF40299D41'),
  success?: boolean(name='success', example='true'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegions', 'GET', '/regions', 'json', false, 'json', request);
}

model ListTopicSubscriptionsRequest {
  instanceId: string(name='instanceId', example='rmq-cn-zpr34udri0w', position='Path'),
  topicName?: string(name='topicName', example='dev4-HMH_INSURANCE_NOMAL_TOPIC', position='Path'),
}

model ListTopicSubscriptionsResponseBody = {
  code?: string(name='code', example='MissingInstanceId'),
  data?: [ 
    {
      consumerGroupId?: string(name='consumerGroupId', example='CID-TEST'),
      filterExpression?: string(name='filterExpression', example='*'),
      filterExpressionType?: string(name='filterExpressionType', example='SQL'),
      messageModel?: string(name='messageModel', example='BROADCASTING'),
      subscriptionStatus?: string(name='subscriptionStatus', example='ONLINE'),
      topicName?: string(name='topicName', example='topic_test'),
    }
  ](name='data'),
  dynamicCode?: string(name='dynamicCode', example='Topic'),
  dynamicMessage?: string(name='dynamicMessage', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='The instance cannot be found.'),
  requestId?: string(name='requestId', example='92A9BE4E-B794-50C8-979C-0456E4D32943'),
  success?: boolean(name='success', example='true'),
}

model ListTopicSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicSubscriptionsResponseBody(name='body'),
}

async function listTopicSubscriptions(request: ListTopicSubscriptionsRequest): ListTopicSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopicSubscriptions', 'GET', '/instances/{instanceId}/topics/{topicName}/subscriptions', 'json', false, 'json', request);
}

model ListTopicsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance that contains the topics.', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='The condition that you want to use to filter topics in the instance. If you leave this parameter empty, all topics in the instance are queried.', example='topic_test', position='Query'),
  messageTypes?: [ string ](name='messageTypes', description='The message types of the topics.', shrink='simple', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='3', minimum=10, maximum=10000, position='Query'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION

    <!-- -->

    :

    <!-- -->

    transactional message

    <!-- -->

*   FIFO

    <!-- -->

    :

    <!-- -->

    ordered message

    <!-- -->

*   DELAY

    <!-- -->

    :

    <!-- -->

    scheduled or delayed message

    <!-- -->

*   NORMAL

    <!-- -->

    :

    <!-- -->

    normal message

    <!-- -->', example='NORMAL'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING

    <!-- -->

    : The topic is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The topic is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
        updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='3'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListTopicsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicsResponseBody(name='body'),
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopics', 'GET', '/instances/{instanceId}/topics', 'json', false, 'json', request);
}

model ResetConsumeOffsetRequest {
  instanceId: string(name='instanceId', description='The instance ID.', example='rmq-cn-tl32ue44x0g', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The consumer group ID.', example='dolphin_status', position='Path'),
  topicName: string(name='topicName', description='The topic name.', example='AMZN_REPORT_TOPIC', position='Path'),
  resetTime?: string(name='resetTime', description='The time when the consumer offset is reset.', example='2023-03-22 12:17:08', position='Body'),
  resetType?: string(name='resetType', description='The method that is used to reset the consumer offset. Valid values: LATEST_OFFSET and SPECIFIED_TIME.', example='LATEST_OFFSET', position='Body'),
}

model ResetConsumeOffsetResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingInstanceId'),
  dynamicCode?: string(name='dynamicCode', description='The returned dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The returned dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The returned HTTP status code.', example='200'),
  message?: string(name='message', description='The returned error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='F9A95891-EAD4-5A2B-8A30-676CD18921AF'),
  success?: boolean(name='success', description='Indicates whether the request is successful.', example='true'),
}

model ResetConsumeOffsetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetConsumeOffsetResponseBody(name='body'),
}

async function resetConsumeOffset(request: ResetConsumeOffsetRequest): ResetConsumeOffsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResetConsumeOffset', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/consumeOffsets/{topicName}', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer group belongs.', example='rmq-cn-7e22on9****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](~~440356~~).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](~~440356~~).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The new consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](~~440356~~).', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='The new message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery', example='Concurrently', position='Body'),
  remark?: string(name='remark', description='The new remarks on the consumer group.', example='This is the remark for test.', position='Body'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidDeliveryOrderType'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='DeliveryOrderType'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='deliveryOrderType'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConsumerGroupResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance whose basic information and specifications you want to update.', example='rmq-cn-7e22ody****', position='Path'),
  instanceName?: string(name='instanceName', description='The updated name of the instance.', example='test_instance', position='Body'),
  networkInfo?: {
    internetInfo?: {
      ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.

*   If you do not configure an IP address whitelist, all CIDR blocks are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If you configure an IP address whitelist, only the IP addresses in the whitelist are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.'),
    }(name='internetInfo', description='The information about the Internet over which the instance is accessed. This parameter takes effect only if the Internet access feature is enabled for the instance.'),
  }(name='networkInfo', description='The updated network information about the instance.', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic transactions per second (TPS) feature for the instance.

Valid values:

*   true
*   false

After you enable the elastic TPS feature for an ApsaraMQ for RocketMQ instance, you can use a specific number of TPS that exceeds the specification limit. You are charged for using the elastic TPS feature. For more information, see [Computing fees](~~427237~~).

>  The elastic TPS feature is supported only by specific instance editions. For more information, see [Instance editions](~~444715~~).', example='true'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section of the [Limits](~~440347~~) topic.

ApsaraMQ for RocketMQ supports serverless scaling of message storage. You are charged storage fees based on your actual storage usage. You can change the retention period of messages to manage storage capacity. For more information, see [Storage fees](~~427238~~).', example='72'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio of the number of messages that you can send to the number of messages that you can receive on the instance.

Value values: 0.25 to 1.', example='0.5'),
    traceOn?: boolean(name='traceOn', description='Specifies whether to enable the message trace feature.

*   true
*   false

This parameter is not in use. By default, the message trace feature is enabled for ApsaraMQ for RocketMQ instances, regardless of whether this parameter is configured.', example='true'),
  }(name='productInfo', description='Additional configurations of the instance.', position='Body'),
  remark?: string(name='remark', description='The updated description of the instance.', example='This is the remark for test.', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AA87DE09-DA44-52F4-9515-78B1B607****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  *
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PATCH', '/instances/{instanceId}', 'json', false, 'json', request);
}

model UpdateTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.', example='topic_test', position='Path'),
  remark?: string(name='remark', description='The new remarks on the topic.', example='This is the remark for test.', position='Body'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTopicResponseBody(name='body'),
}

async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTopic', 'PATCH', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

