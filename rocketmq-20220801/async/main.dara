/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RocketMQ';
  @version = '2022-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  regionId?: string(name='regionId', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  resourceId?: string(name='resourceId', position='Query'),
  resourceType?: string(name='resourceType', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='code'),
  data?: boolean(name='data'),
  dynamicCode?: string(name='dynamicCode'),
  dynamicMessage?: string(name='dynamicMessage'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/resourceGroup/change', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', example='GID_test_groupId', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数', example='16'),
    retryPolicy: string(name='retryPolicy', description='重试策略类型', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='消费重试策略', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='投递顺序性', example='Concurrently', position='Body'),
  remark?: string(name='remark', description='备注', example='This is the remark for test.', position='Body'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='autoRenew', description='是否自动续费，只有预付费支持', example='enable', position='Body'),
  autoRenewPeriod?: int32(name='autoRenewPeriod', description='自动续费周期，只有预付费支持', example='3', position='Body'),
  instanceName?: string(name='instanceName', description='实例名称', example='rmq-cn-72u3048uxxx', position='Body'),
  networkInfo: {
    internetInfo: {
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='公网带宽规格', example='100'),
      flowOutType: string(name='flowOutType', description='公网计费类型
固定带宽计费：payByBandwidth', example='uninvolved'),
      internetSpec: string(name='internetSpec', description='是否开启公网
开启：enable
关闭：disable', example='disable'),
      ipWhitelist?: [ string ](name='ipWhitelist', description='公网IP白名单列表'),
    }(name='internetInfo', description='公网信息'),
    vpcInfo: {
      vSwitchId: string(name='vSwitchId', description='交换机ID', example='vsw-uf6gwtbn6etadpv*******'),
      vpcId: string(name='vpcId', description='专有网络ID', example='vpc-wz9qt50xhtj9krb******'),
    }(name='vpcInfo', description='专有网络信息'),
  }(name='networkInfo', description='网络信息', position='Body'),
  paymentType: string(name='paymentType', description='付费类型,
预付费：Subscription
后付费：PayAsYouGo', example='PayAsYouGo', position='Body'),
  period?: int32(name='period', description='购买时长，只有预付费支持', example='3', position='Body'),
  periodUnit?: string(name='periodUnit', description='购买时长单位，只有预付费支持
月：Month
年：Year', example='Year', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='是否开启弹性伸缩', example='enable'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长', example='72'),
    msgProcessSpec: string(name='msgProcessSpec', description='消息收发规格', example='rmq.s2.2xlarge'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例', example='0.5'),
  }(name='productInfo', description='产品信息', position='Body'),
  remark?: string(name='remark', description='备注信息', example='This is the remark for test.', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='资源组ID', example='rg-aekzy6pist7uuna', position='Body'),
  seriesCode: string(name='seriesCode', description='系列编码', example='standard', position='Body'),
  serviceCode: string(name='serviceCode', description='服务编码', example='rmq', position='Body'),
  subSeriesCode: string(name='subSeriesCode', description='子系列编码', example='cluster_ha', position='Body'),
  clientToken?: string(name='clientToken', example='c2c5d1274a8d4317a13bc5b0d4c888df', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='错误码', example='OrderType.NotSupport'),
  data?: string(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The order type not supported.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/instances', 'json', false, 'json', request);
}

model CreateTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='主题名称', example='topic_test', position='Path'),
  messageType?: string(name='messageType', description='消息类型', example='NORMAL', position='Body'),
  remark?: string(name='remark', description='备注', example='This is the remark for test.', position='Body'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', description='错误码', example='Topic.Existed'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The topic already exists.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTopic', 'POST', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', example='CID-TEST', position='Path'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='请求ID', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody0129', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', description='错误码', example='MissingInstanceId'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='请求ID', example='048242AA-BADA-5F29-B2CD-ED9FA344467F'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='主题名称', example='topic_test', position='Path'),
}

model DeleteTopicResponseBody = {
  code?: string(name='code', description='错误码', example='Topic.NotFound'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTopic', 'DELETE', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model GetConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', example='CID-TEST', position='Path'),
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码', example='InvalidConsumerGroupId'),
  data?: {
    consumeRetryPolicy?: {
      deadLetterTargetTopic?: string(name='deadLetterTargetTopic'),
      maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数', example='16'),
      retryPolicy?: string(name='retryPolicy', description='重试策略类型', example='DefaultRetryPolicy'),
    }(name='consumeRetryPolicy', description='消费重试策略'),
    consumerGroupId?: string(name='consumerGroupId', description='消费组ID', example='CID-TEST'),
    createTime?: string(name='createTime', description='创建时间', example='2022-08-01 20:05:50'),
    deliveryOrderType?: string(name='deliveryOrderType', description='投递顺序性', example='Concurrently'),
    instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
    remark?: string(name='remark', description='备注', example='This is the remark for test.'),
    status?: string(name='status', description='消费组状态', example='RUNNING'),
    updateTime?: string(name='updateTime', description='修改时间', example='2022-08-01 20:05:50'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='请求ID', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model GetConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerGroupResponseBody(name='body'),
}

async function getConsumerGroup(request: GetConsumerGroupRequest): GetConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroup', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
}

model GetInstanceResponseBody = {
  code?: string(name='code', description='错误码', example='MissingInstanceId'),
  data?: {
    accountInfo?: {
      username?: string(name='username', description='用户名', example='6W0xz2uPfiwp****'),
    }(name='accountInfo', description='账号信息'),
    aclInfo?: {
      aclType?: string(name='aclType', description='访问控制类型'),
    }(name='aclInfo', description='访问控制信息'),
    bid?: string(name='bid', description='BID', example='26842'),
    commodityCode?: string(name='commodityCode', description='商品编码', example='ons_rmqsub_public_cn'),
    createTime?: string(name='createTime', description='创建时间', example='2022-08-01 00:00:00'),
    expireTime?: string(name='expireTime', description='过期时间', example='2022-09-01 00:00:00'),
    extConfig?: {
      aclType?: string(name='aclType', description='鉴权类型', example='default'),
      autoScaling?: boolean(name='autoScaling', description='自适应弹性伸缩', example='true'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='公网带宽规格', example='10'),
      flowOutType?: string(name='flowOutType', description='公网计费类型', example='payByBandwidth'),
      internetSpec?: string(name='internetSpec', description='是否开通公网', example='enable'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='消息收发计算规格', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='是否支持自适应弹性伸缩', example='true'),
    }(name='extConfig', description='扩展配置，不再推荐使用，建议使用产品信息、网络信息中的字段替换'),
    instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
    instanceName?: string(name='instanceName', description='实例名称', example='test instance'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', description='免费', example='20'),
        quotaName?: string(name='quotaName', description='配额名称', example='TOPIC_COUNT'),
        totalCount?: double(name='totalCount', description='总配额', example='100'),
        usedCount?: double(name='usedCount', description='已使用量', example='10'),
      }
    ](name='instanceQuotas', description='容量信息'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', description='接入点类型', example='TCP_INTERNET'),
          endpointUrl?: string(name='endpointUrl', description='接入点地址', example='rmq-cn-c4d2tbk****-vpc.cn-hangzhou.rmq.aliyuncs.com:8080'),
          ipWhitelist?: string(name='ipWhitelist', description='公网IP白名单，建议使用公网信息中的白名单字段', example='192.168.x.x/24'),
        }
      ](name='endpoints', description='接入点列表'),
      internetInfo?: {
        flowOutBandwidth?: int32(name='flowOutBandwidth', description='公网带宽规格'),
        flowOutType?: string(name='flowOutType', description='公网计费类型'),
        internetSpec?: string(name='internetSpec', description='是否开通公网'),
        ipWhitelist?: [ string ](name='ipWhitelist', description='公网IP白名单列表'),
      }(name='internetInfo', description='公网信息'),
      vpcInfo?: {
        vSwitchId?: string(name='vSwitchId', description='交换机ID', example='vsw-uf6gwtbn6etadpvz7****'),
        vpcId?: string(name='vpcId', description='专有网络ID', example='vpc-uf6of9452b2pba82c****'),
      }(name='vpcInfo', description='专有网络信息'),
    }(name='networkInfo', description='网络信息'),
    paymentType?: string(name='paymentType', description='付费类型', example='Subscription'),
    productInfo?: {
      autoScaling?: boolean(name='autoScaling', description='是否开启弹性伸缩'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长'),
      msgProcessSpec?: string(name='msgProcessSpec', description='消息收发规格'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='是否支持弹性伸缩'),
    }(name='productInfo', description='产品信息'),
    regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
    releaseTime?: string(name='releaseTime', description='释放时间', example='2022-09-07 00:00:00'),
    remark?: string(name='remark', description='备注', example='This is remark for instance.'),
    resourceGroupId?: string(name='resourceGroupId', description='资源组ID'),
    seriesCode?: string(name='seriesCode', description='系列编码', example='standard'),
    serviceCode?: string(name='serviceCode', description='服务编码', example='rmq'),
    startTime?: string(name='startTime', description='开服时间', example='2022-08-01 00:00:00'),
    status?: string(name='status', description='实例状态', example='RUNNING'),
    subSeriesCode?: string(name='subSeriesCode', description='子系列编码', example='cluster_ha'),
    updateTime?: string(name='updateTime', description='修改时间', example='2022-08-02 00:00:00'),
    userId?: string(name='userId', description='所属人ID', example='111111111111111'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='请求ID', example='05AB7FBD-F1D3-5D87-BF78-BD782249****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/instances/{instanceId}', 'json', false, 'json', request);
}

model GetTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='主题名称', example='topic_test', position='Path'),
}

model GetTopicResponseBody = {
  code?: string(name='code', description='错误码', example='Topic.NotFound'),
  data?: {
    createTime?: string(name='createTime', description='创建时间', example='2022-08-01 20:05:50'),
    instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
    messageType?: string(name='messageType', description='消息类型,MessageTypeEnum[UNSPECIFIED,NORMAL(普通),FIFO(顺序),DELAY(延迟),TRANSACTION(事务),UNRECOGNIZED(无法识别),code,desc]', example='NORMAL'),
    regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
    remark?: string(name='remark', description='备注', example='This is the remark for test.'),
    status?: string(name='status', description='主题状态', example='RUNNING'),
    topicName?: string(name='topicName', description='Topic编码', example='topic_test'),
    updateTime?: string(name='updateTime', description='修改时间', example='2022-08-01 20:05:50'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicResponseBody(name='body'),
}

async function getTopic(request: GetTopicRequest): GetTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTopic', 'GET', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model ListConsumerGroupsRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='过滤条件', example='CID-TEST', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', example='10', minimum=10, maximum=100, position='Query'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', description='错误码', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', description='消费组ID', example='GID-TEST'),
        createTime?: string(name='createTime', description='创建时间', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
        regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
        remark?: string(name='remark', description='备注', example='This is the remark for test.'),
        status?: string(name='status', description='消费组状态', example='RUNNING'),
        updateTime?: string(name='updateTime', description='修改时间', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码', example='1'),
    pageSize?: long(name='pageSize', description='分页大小', example='10'),
    totalCount?: long(name='totalCount', description='总记录数', example='1'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter InstanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='请求ID', example='5503A460-98ED-5543-92CF-4853DE28****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model ListConsumerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConsumerGroupsResponseBody(name='body'),
}

async function listConsumerGroups(request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroups', 'GET', '/instances/{instanceId}/consumerGroups', 'json', false, 'json', request);
}

model ListInstancesRequest {
  filter?: string(name='filter', description='过滤关键字', example='rmq-cn-7e22ody****', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', example='10', minimum=10, maximum=200, position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='资源组ID', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', description='错误码', example='MissingPageNumber'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', description='商品编码', example='ons_rmqsub_public_cn'),
        createTime?: string(name='createTime', description='创建时间', example='2022-08-01 00:00:00'),
        expireTime?: string(name='expireTime', description='过期时间', example='2022-09-01 00:00:00'),
        groupCount?: long(name='groupCount', description='消费组数量', example='10'),
        instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
        instanceName?: string(name='instanceName', description='实例名称', example='test instance'),
        paymentType?: string(name='paymentType', description='付费类型', example='Subscription'),
        regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
        releaseTime?: string(name='releaseTime', description='释放时间', example='2022-09-07 00:00:00'),
        remark?: string(name='remark', description='备注', example='This is remark for instance.'),
        resourceGroupId?: string(name='resourceGroupId', description='资源组ID'),
        seriesCode?: string(name='seriesCode', description='系列编码', example='standard'),
        serviceCode?: string(name='serviceCode', description='服务编码', example='rmq'),
        startTime?: string(name='startTime', description='开服时间', example='2022-08-01 00:00:00'),
        status?: string(name='status', description='实例状态', example='RUNNING'),
        subSeriesCode?: string(name='subSeriesCode', description='子系列编码', example='cluster_ha'),
        topicCount?: long(name='topicCount', description='主题数量', example='20'),
        updateTime?: string(name='updateTime', description='修改时间', example='2022-08-02 00:00:00'),
        userId?: string(name='userId', description='所属人ID', example='6W0xz2uPfiwp****'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码', example='1'),
    pageSize?: long(name='pageSize', description='分页大小', example='10'),
    totalCount?: long(name='totalCount', description='总记录数', example='100'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='PageNumber'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='pageNumber'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter pageNumber is mandatory for this action .'),
  requestId?: string(name='requestId', description='请求ID', example='84445A20-2B50-5306-A3C0-AF99FC1833C6'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/instances', 'json', false, 'json', request);
}

model ListTopicsRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='过滤条件', example='topic_test', position='Query'),
  messageTypes?: [ string ](name='messageTypes', shrink='simple', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', example='3', minimum=10, maximum=10000, position='Query'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', description='错误码', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', description='创建时间', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****'),
        messageType?: string(name='messageType', description='消息类型,MessageTypeEnum[UNSPECIFIED,NORMAL(普通),FIFO(顺序),DELAY(延迟),TRANSACTION(事务),UNRECOGNIZED(无法识别),code,desc]', example='NORMAL'),
        regionId?: string(name='regionId', description='区域ID', example='cn-hangzhou'),
        remark?: string(name='remark', description='备注', example='This is the remark for test.'),
        status?: string(name='status', description='Topic状态,TopicStatusEnum[CREATING(创建中),RUNNING(运行中),code,desc]', example='RUNNING'),
        topicName?: string(name='topicName', description='Topic编码', example='topic_test'),
        updateTime?: string(name='updateTime', description='修改时间', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码', example='1'),
    pageSize?: long(name='pageSize', description='分页大小', example='3'),
    totalCount?: long(name='totalCount', description='总记录数', example='1'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopics', 'GET', '/instances/{instanceId}/topics', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22on9****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', example='CID-TEST', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数', example='16'),
    retryPolicy: string(name='retryPolicy', description='重试策略类型', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='消费重试策略', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='投递顺序性', example='Concurrently', position='Body'),
  remark?: string(name='remark', description='备注', example='This is the remark for test.', position='Body'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码', example='InvalidDeliveryOrderType'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='DeliveryOrderType'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='deliveryOrderType'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', description='请求ID', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  instanceName?: string(name='instanceName', description='实例名称', example='test_instance', position='Body'),
  networkInfo?: {
    internetInfo?: {
      ipWhitelist?: [ string ](name='ipWhitelist', description='公网IP白名单列表'),
    }(name='internetInfo', description='公网信息'),
  }(name='networkInfo', description='网络信息', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='自适应弹性伸缩'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例'),
  }(name='productInfo', description='扩展配置', position='Body'),
  remark?: string(name='remark', description='实例备注', example='This is the remark for test.', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', description='错误码', example='MissingInstanceId'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='请求ID', example='AA87DE09-DA44-52F4-9515-78B1B607****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PATCH', '/instances/{instanceId}', 'json', false, 'json', request);
}

model UpdateTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='主题名称', example='topic_test', position='Path'),
  remark?: string(name='remark', description='备注', example='This is the remark for test.', position='Body'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', description='错误码', example='Topic.NotFound'),
  data?: boolean(name='data', description='返回结果', example='true'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息', example='TopicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码', example='400'),
  message?: string(name='message', description='错误信息', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='请求ID', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='是否成功', example='true'),
}

model UpdateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTopicResponseBody(name='body'),
}

async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTopic', 'PATCH', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

