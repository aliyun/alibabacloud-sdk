/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RocketMQ';
  @version = '2022-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', position='Path'),
  consumeRetryPolicy?: {
    maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数'),
    retryPolicy?: string(name='retryPolicy', description='重试策略类型'),
  }(name='consumeRetryPolicy', description='消费重试策略', position='Body'),
  deliveryOrderType?: string(name='deliveryOrderType', description='投递顺序性', position='Body'),
  remark?: string(name='remark', description='备注', position='Body'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model CreateTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  topicName: string(name='topicName', description='主题名称', position='Path'),
  messageType?: string(name='messageType', description='消息类型', position='Body'),
  remark?: string(name='remark', description='备注', position='Body'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTopic', 'POST', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', position='Path'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  topicName: string(name='topicName', description='主题名称', position='Path'),
}

model DeleteTopicResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTopic', 'DELETE', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model GetConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', position='Path'),
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    consumeRetryPolicy?: {
      maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数'),
      retryPolicy?: string(name='retryPolicy', description='重试策略类型'),
    }(name='consumeRetryPolicy', description='消费重试策略'),
    consumerGroupId?: string(name='consumerGroupId', description='消费组ID'),
    createTime?: string(name='createTime', description='创建时间'),
    deliveryOrderType?: string(name='deliveryOrderType', description='投递顺序性'),
    instanceId?: string(name='instanceId', description='实例ID'),
    regionId?: string(name='regionId', description='区域ID'),
    remark?: string(name='remark', description='备注'),
    status?: string(name='status', description='消费组状态'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model GetConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerGroupResponseBody(name='body'),
}

async function getConsumerGroup(request: GetConsumerGroupRequest): GetConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroup', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
}

model GetInstanceResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    accountInfo?: {
      username?: string(name='username', description='用户名'),
    }(name='accountInfo', description='账号信息'),
    bid?: string(name='bid', description='BID'),
    commodityCode?: string(name='commodityCode', description='商品编码'),
    createTime?: string(name='createTime', description='创建时间'),
    expireTime?: string(name='expireTime', description='过期时间'),
    extConfig?: {
      aclType?: string(name='aclType', description='鉴权类型'),
      autoScaling?: boolean(name='autoScaling', description='自适应弹性伸缩'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='公网带宽规格'),
      flowOutType?: string(name='flowOutType', description='公网计费类型'),
      internetSpec?: string(name='internetSpec', description='是否开通公网'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长'),
      msgProcessSpec?: string(name='msgProcessSpec', description='消息收发计算规格'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='是否支持自适应弹性伸缩'),
    }(name='extConfig', description='扩展配置'),
    groupCount?: long(name='groupCount'),
    instanceId?: string(name='instanceId', description='实例ID'),
    instanceName?: string(name='instanceName', description='实例名称'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', description='免费'),
        quotaName?: string(name='quotaName', description='配额名称'),
        totalCount?: double(name='totalCount', description='总配额'),
        usedCount?: double(name='usedCount', description='已使用量'),
      }
    ](name='instanceQuotas', description='容量信息'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', description='接入点类型'),
          endpointUrl?: string(name='endpointUrl', description='接入点地址'),
          ipWhitelist?: string(name='ipWhitelist', description='IP白名单列表'),
        }
      ](name='endpoints', description='接入点列表'),
      vpcInfo?: {
        vSwitchId?: string(name='vSwitchId', description='交换机ID'),
        vpcId?: string(name='vpcId', description='专有网络ID'),
      }(name='vpcInfo', description='专有网络信息'),
    }(name='networkInfo', description='网络信息'),
    paymentType?: string(name='paymentType', description='付费类型'),
    regionId?: string(name='regionId', description='区域ID'),
    releaseTime?: string(name='releaseTime', description='释放时间'),
    remark?: string(name='remark', description='备注'),
    seriesCode?: string(name='seriesCode', description='系列编码'),
    serviceCode?: string(name='serviceCode', description='服务编码'),
    startTime?: string(name='startTime', description='开服时间'),
    status?: string(name='status', description='实例状态'),
    subSeriesCode?: string(name='subSeriesCode', description='子系列编码'),
    topicCount?: long(name='topicCount'),
    updateTime?: string(name='updateTime', description='修改时间'),
    userId?: string(name='userId', description='所属人ID'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/instances/{instanceId}', 'json', false, 'json', request);
}

model GetTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  topicName: string(name='topicName', description='主题名称', position='Path'),
}

model GetTopicResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    createTime?: string(name='createTime', description='创建时间'),
    instanceId?: string(name='instanceId', description='实例ID'),
    messageType?: string(name='messageType', description='消息类型,MessageTypeEnum[UNSPECIFIED,NORMAL(普通),FIFO(顺序),DELAY(延迟),TRANSACTION(事务),UNRECOGNIZED(无法识别),code,desc]'),
    regionId?: string(name='regionId', description='区域ID'),
    remark?: string(name='remark', description='备注'),
    status?: string(name='status', description='主题状态'),
    topicName?: string(name='topicName', description='Topic编码'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicResponseBody(name='body'),
}

async function getTopic(request: GetTopicRequest): GetTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTopic', 'GET', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model ListConsumerGroupsRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  filter?: string(name='filter', description='过滤条件', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', minimum=10, maximum=100, position='Query'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', description='消费组ID'),
        createTime?: string(name='createTime', description='创建时间'),
        instanceId?: string(name='instanceId', description='实例ID'),
        regionId?: string(name='regionId', description='区域ID'),
        remark?: string(name='remark', description='备注'),
        status?: string(name='status', description='消费组状态'),
        updateTime?: string(name='updateTime', description='修改时间'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码'),
    pageSize?: long(name='pageSize', description='分页大小'),
    totalCount?: long(name='totalCount', description='总记录数'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model ListConsumerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConsumerGroupsResponseBody(name='body'),
}

async function listConsumerGroups(request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroups', 'GET', '/instances/{instanceId}/consumerGroups', 'json', false, 'json', request);
}

model ListInstancesRequest {
  filter?: string(name='filter', description='过滤关键字', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', minimum=10, maximum=200, position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', description='商品编码'),
        createTime?: string(name='createTime', description='创建时间'),
        expireTime?: string(name='expireTime', description='过期时间'),
        groupCount?: long(name='groupCount', description='消费组数量'),
        instanceId?: string(name='instanceId', description='实例ID'),
        instanceName?: string(name='instanceName', description='实例名称'),
        paymentType?: string(name='paymentType', description='付费类型'),
        regionId?: string(name='regionId', description='区域ID'),
        releaseTime?: string(name='releaseTime', description='释放时间'),
        remark?: string(name='remark', description='备注'),
        seriesCode?: string(name='seriesCode', description='系列编码'),
        serviceCode?: string(name='serviceCode', description='服务编码'),
        startTime?: string(name='startTime', description='开服时间'),
        status?: string(name='status', description='实例状态'),
        subSeriesCode?: string(name='subSeriesCode', description='子系列编码'),
        topicCount?: long(name='topicCount', description='主题数量'),
        updateTime?: string(name='updateTime', description='修改时间'),
        userId?: string(name='userId', description='所属人ID'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码'),
    pageSize?: long(name='pageSize', description='分页大小'),
    totalCount?: long(name='totalCount', description='总记录数'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/instances', 'json', false, 'json', request);
}

model ListTopicsRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  filter?: string(name='filter', description='过滤条件', position='Query'),
  pageNumber: int32(name='pageNumber', description='分页页码', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='分页大小', minimum=10, maximum=10000, position='Query'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', description='创建时间'),
        instanceId?: string(name='instanceId', description='实例ID'),
        messageType?: string(name='messageType', description='消息类型,MessageTypeEnum[UNSPECIFIED,NORMAL(普通),FIFO(顺序),DELAY(延迟),TRANSACTION(事务),UNRECOGNIZED(无法识别),code,desc]'),
        regionId?: string(name='regionId', description='区域ID'),
        remark?: string(name='remark', description='备注'),
        status?: string(name='status', description='Topic状态,TopicStatusEnum[CREATING(创建中),RUNNING(运行中),code,desc]'),
        topicName?: string(name='topicName', description='Topic编码'),
        updateTime?: string(name='updateTime', description='修改时间'),
      }
    ](name='list', description='分页数据'),
    pageNumber?: long(name='pageNumber', description='当前页码'),
    pageSize?: long(name='pageSize', description='分页大小'),
    totalCount?: long(name='totalCount', description='总记录数'),
  }(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopics', 'GET', '/instances/{instanceId}/topics', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='消费组ID', position='Path'),
  consumeRetryPolicy?: {
    maxRetryTimes?: int32(name='maxRetryTimes', description='最大重试次数'),
    retryPolicy?: string(name='retryPolicy', description='重试策略类型'),
  }(name='consumeRetryPolicy', description='消费重试策略', position='Body'),
  deliveryOrderType?: string(name='deliveryOrderType', description='投递顺序性', position='Body'),
  remark?: string(name='remark', description='备注', position='Body'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  extConfig?: {
    autoScaling?: boolean(name='autoScaling', description='自适应弹性伸缩'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='消息保留时长'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='消息收发比例'),
  }(name='extConfig', description='扩展配置', position='Body'),
  instanceName?: string(name='instanceName', description='实例名称', position='Body'),
  networkInfo?: {
    endpoints?: [ 
      {
        endpointType?: string(name='endpointType', description='接入点类型'),
        ipWhitelist?: string(name='ipWhitelist', description='IP白名单'),
      }
    ](name='endpoints', description='接入点列表'),
  }(name='networkInfo', description='网络信息', position='Body'),
  remark?: string(name='remark', description='实例备注', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PATCH', '/instances/{instanceId}', 'json', false, 'json', request);
}

model UpdateTopicRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  topicName: string(name='topicName', description='主题名称', position='Path'),
  remark?: string(name='remark', description='备注', position='Body'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: boolean(name='data', description='返回结果'),
  dynamicCode?: string(name='dynamicCode', description='动态错误码'),
  dynamicMessage?: string(name='dynamicMessage', description='动态错误信息'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP状态码'),
  message?: string(name='message', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='是否成功'),
}

model UpdateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTopicResponseBody(name='body'),
}

async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTopic', 'PATCH', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

