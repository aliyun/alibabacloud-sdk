/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RocketMQ';
  @version = '2022-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDisasterRecoveryItemRequest {
  planId: long(name='planId', description='This parameter is required.', position='Path'),
  topics?: [ 
    {
      consumerGroupId?: string(name='consumerGroupId'),
      instanceId?: string(name='instanceId'),
      instanceType?: string(name='instanceType', example='ALIYUN_ROCKETMQ'),
      regionId?: string(name='regionId', description='regionId', example='cn-hangzhou'),
      topicName?: string(name='topicName'),
    }
  ](name='topics', position='Body'),
}

model AddDisasterRecoveryItemResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail'),
  code?: string(name='code'),
  data?: long(name='data'),
  dynamicCode?: string(name='dynamicCode'),
  dynamicMessage?: string(name='dynamicMessage'),
  httpStatusCode?: int32(name='httpStatusCode'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model AddDisasterRecoveryItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDisasterRecoveryItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDisasterRecoveryItem  AddDisasterRecoveryItemRequest
  * @return AddDisasterRecoveryItemResponse
 */
async function addDisasterRecoveryItem(request: AddDisasterRecoveryItemRequest): AddDisasterRecoveryItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddDisasterRecoveryItem', 'POST', '/disaster_recovery/{planId}/items', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  regionId: string(name='regionId', description='The ID of the region in which the instance resides.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='resourceGroupId', description='The ID of the resource group to which the instance is changed.

You can call the [ListResourceGroups](https://www.alibabacloud.com/help/resource-management/latest/listresourcegroups) operation to query existing resource groups.

This parameter is required.', example='rg-9gLOoK****', position='Query'),
  resourceId: string(name='resourceId', description='The ID of the resource. Set this parameter to the ID of the ApsaraMQ forÂ RocketMQ instance whose resource group you want to change.

This parameter is required.', example='c2c5d1274a8d4317a13bc5b0d4******', position='Query'),
  resourceType: string(name='resourceType', description='The type of resource.

Set this parameter to **instance**. The value of this parameter cannot be changed.

This parameter is required.', example='instance', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Instance.NotFound'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/resourceGroup/change', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance in which you want to create the consumer group.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group. The ID is globally unique and is used to identify a consumer group.

The following limits are imposed on the ID:

*   Character limit: The ID can contain letters, digits, underscores (_), hyphens (-), and percent signs (%).
*   Length limit: The ID must be 1 to 60 characters in length.

For more information about strings that are reserved for the system, see [Limits on parameters](https://help.aliyun.com/document_detail/440347.html).

This parameter is required.', example='GID_test_groupId', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](https://help.aliyun.com/document_detail/440356.html).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](https://help.aliyun.com/document_detail/440356.html).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.

This parameter is required.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](https://help.aliyun.com/document_detail/440356.html).

This parameter is required.', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery

This parameter is required.', example='Concurrently', position='Body'),
  maxReceiveTps?: long(name='maxReceiveTps', position='Body'),
  remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.', position='Body'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of CreateConsumerGroup  CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable auto-renewal for the instance. This parameter takes effect only if you set paymentType to Subscription. Valid values:

*   true
*   false', example='true', position='Body'),
  autoRenewPeriod?: int32(name='autoRenewPeriod', description='The auto-renewal cycle of the instance. This parameter takes effect only if you set autoRenew to true. Unit: months.

Valid values:

*   Monthly renewal: 1, 2, 3, 6, and 12', example='3', position='Body'),
  commodityCode?: string(name='commodityCode', description='The commodity code. Valid values:

*   ons_rmqpost_public_intl: pay-as-you-go
*   ons_rmqsub_public_intl: subscription', example='ons_ rmqpost_public_cn', position='Body'),
  instanceName?: string(name='instanceName', description='The name of the instance that you want to create.

If you leave this parameter empty, the instance ID is used as the instance name.', example='rmq-cn-72u3048uxxx', position='Body'),
  networkInfo: {
    internetInfo: {
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.

This parameter is required only if you set flowOutType to payByBandwidth.

Valid values: 1 to 1000.', example='100'),
      flowOutType: string(name='flowOutType', description='The billing method of Internet usage.

Valid values:

*   payByBandwidth: pay-by-bandwidth. This value is valid only if you enable Internet access.
*   payByTraffic: pay-by-traffic. This value is valid only if you enable Internet access.
*   uninvolved: No billing method is involved. This value is valid only if you disable Internet access.

This parameter is required.', example='uninvolved'),
      internetSpec: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ for RocketMQ allows you to access instances in VPCs. If you enable Internet access for an instance, you can access the instance over the Internet. After you enable this feature, you are charged for outbound Internet traffic. For more information, see [Internet access fees](https://help.aliyun.com/document_detail/427240.html).

This parameter is required.', example='disable'),
      ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet. This parameter can be configured only if you use the public endpoint to access the instance.

*   If you do not configure an IP address whitelist, all CIDR blocks are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If you configure an IP address whitelist, only the IP addresses in the whitelist are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.', deprecated='true'),
    }(name='internetInfo', description='The Internet-related configurations.

This parameter is required.'),
    vpcInfo: {
      securityGroupIds?: string(name='securityGroupIds', description='The ID of the security group to which the instance belongs.', example='sg-bp17hpmgz96tvnsdy6so'),
      vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated. If you want to specify multiple vSwitches, separate the vSwitches with vertical bars (|).

>  After you create an ApsaraMQ for RocketMQ instance, you cannot change the vSwitch with which the instance is associated. If you want to change the vSwitch with which the instance is associated, you must release the instance and purchase a new instance.

>  We recommend that you configure vSwitches instead of this parameter.', example='vsw-uf6gwtbn6etadpv*******', deprecated='true'),
      vSwitches?: [ 
        {
          vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated.', example='vsw-uf6gwtbn6etadpv*******'),
        }
      ](name='vSwitches', description='The vSwitches.

>  After you create an ApsaraMQ for RocketMQ instance, you cannot change the vSwitch with which the instance is associated. If you want to change the vSwitch with which the instance is associated, you must release the instance and purchase a new instance.

>  This parameter is required. We recommend that you configure this parameter instead of vSwitchId.'),
      vpcId: string(name='vpcId', description='The ID of the VPC with which the instance to be created is associated.

>  After you create an ApsaraMQ for RocketMQ instance, you cannot change the VPC with which the instance is associated. If you want to change the VPC with which the instance is associated, you must release the instance and create a new instance.

This parameter is required.', example='vpc-wz9qt50xhtj9krb******'),
    }(name='vpcInfo', description='The virtual private cloud (VPC)-related configurations.

This parameter is required.'),
  }(name='networkInfo', description='The information about the network.

This parameter is required.', position='Body'),
  paymentType: string(name='paymentType', description='The billing method of the instance. ApsaraMQ for RocketMQ supports the subscription and pay-as-you-go billing methods.

Valid values:

*   PayAsYouGo: This billing method allows you to use resources before you pay for the resources.
*   Subscription: This billing method allows you to use resources after you pay for the resources.

For more information, see [Billing methods](https://help.aliyun.com/document_detail/427234.html).

This parameter is required.', example='Subscription', position='Body'),
  period?: int32(name='period', description='The subscription duration of the instance. This parameter takes effect only if you set paymentType to Subscription.

Valid values:

*   Monthly subscription: 1, 2, 3, 4, 5, and 6
*   Yearly subscription: 1, 2, and 3', example='3', position='Body'),
  periodUnit?: string(name='periodUnit', description='The unit of the subscription duration.

Valid values:

*   Month
*   Year', example='Month', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true
*   false

After you enable the elastic TPS feature for an ApsaraMQ for RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fees](https://help.aliyun.com/document_detail/427237.html).

>  The elastic TPS feature is supported only by instances of specific editions. For more information, see [Instance editions](https://help.aliyun.com/document_detail/444715.html).', example='true'),
    chargeType?: string(name='chargeType', description='The billing method.

Valid values:

*   provisioned
*   ondemand', example='provisioned'),
    intranetSpec?: string(name='intranetSpec', description='This parameter is no longer used. You do not need to configure this parameter.', example='xxxx'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section of the [Limits](https://help.aliyun.com/document_detail/440347.html) topic.

ApsaraMQ for RocketMQ supports serverless scaling of message storage. You are charged storage fees based on your actual storage usage. You can change the retention period of messages to manage storage capacity. For more information, see [Storage fees](https://help.aliyun.com/document_detail/427238.html).', example='72'),
    msgProcessSpec: string(name='msgProcessSpec', description='The computing specification that specifies the messaging transactions per second (TPS) of the instance. For more information, see [Instance editions](https://help.aliyun.com/document_detail/444715.html).

This parameter is required.', example='rmq.s2.2xlarge'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio of the message sending TPS to the messaging TPS of the instance.

For example, if the maximum messaging TPS of an instance is 1,000 and the ratio of the message sending TPS to the messaging TPS of the instance is 0.8, the maximum message sending TPS of the instance is 800 and the maximum message receiving TPS is 200.

Valid values: 0 to 1. Default value: 0.5.', example='0.5'),
    storageEncryption?: boolean(name='storageEncryption', description='Indicates whether storage encryption is enabled.', example='false'),
    storageSecretKey?: string(name='storageSecretKey', description='The storage encryption key.', example='xxx'),
  }(name='productInfo', description='The information about the instance specifications.', position='Body'),
  remark?: string(name='remark', description='The instance description.', example='This is the remark for test.', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzy6pist7uuna', position='Body'),
  seriesCode: string(name='seriesCode', description='The primary edition of the instance. For information about the differences among primary edition instances, see [Instance selection](https://help.aliyun.com/document_detail/444722.html).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition

>  After you create an instance, you can only upgrade the primary edition of the instance. The following editions are sorted in ascending order: Standard Edition, Professional Edition, Enterprise Platinum Edition. For example, you can upgrade an instance from Standard Edition to Professional Edition, but you cannot downgrade an instance from Professional Edition to Standard Edition.

This parameter is required.', example='standard', position='Body'),
  serviceCode: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ for RocketMQ is rmq.

This parameter is required.', example='rmq', position='Body'),
  subSeriesCode: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences among sub-category edition instances, see [Instance selection](https://help.aliyun.com/document_detail/444722.html).

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition
*   serverless: serverless

If you set seriesCode to ultimate, you can set this parameter only to cluster_ha.

>  After you create an instance, you cannot change the sub-category edition of the instance.

Valid values:

*   serverless: serverless
*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition

This parameter is required.', example='cluster_ha', position='Body'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value of this parameter, but you must ensure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='c2c5d1274a8d4317a13bc5b0d4******', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='200'),
  data?: string(name='data', description='The ID of the created instance.', example='rmq-cn-7e22ody****'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='message', description='The error message.', example='Success'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/instances', 'json', false, 'json', request);
}

model CreateInstanceAccountRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  password: string(name='password', description='The password of the account.

This parameter is required.', example='xxx', position='Body'),
  username: string(name='username', description='The username of the account.

This parameter is required.', example='xxx', position='Body'),
}

model CreateInstanceAccountResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='No permission details', example='xxx'),
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='3AE0999C-8DBA-5CEE-8D9A-BE8D4A90DF8D'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateInstanceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceAccount  CreateInstanceAccountRequest
  * @return CreateInstanceAccountResponse
 */
async function createInstanceAccount(request: CreateInstanceAccountRequest): CreateInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceAccount', 'POST', '/instances/{instanceId}/accounts', 'json', false, 'json', request);
}

model CreateInstanceAclRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  username: string(name='username', description='The username of the account.

This parameter is required.', example='abc', position='Path'),
  actions: string(name='actions', description='The type of operations that can be performed on the resource.

The following types of operations are supported based on the resource type:

*   Topic: Pub, Sub, and Pub|Sub
*   Consumer group: Sub

Valid values:

*   SUB: subscribe
*   Pub|Sub: publish and subscribe
*   Pub: publish

This parameter is required.', example='Pub', position='Body'),
  decision: string(name='decision', description='The decision result of the authorization.

Valid values:

*   Deny
*   Allow

This parameter is required.', example='Allow', position='Body'),
  ipWhitelists?: [ string ](name='ipWhitelists', description='The IP address whitelists.', position='Body'),
  resourceName: string(name='resourceName', description='The name of the resource on which you want to grant permissions.

This parameter is required.', example='test', position='Body'),
  resourceType: string(name='resourceType', description='The type of the resource on which you want to grant permissions.

Valid values:

*   Group
*   Topic

This parameter is required.', example='Topic', position='Body'),
}

model CreateInstanceAclResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='C7E8AE3A-219B-52EE-BE32-4036F5F88833'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model CreateInstanceAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceAcl  CreateInstanceAclRequest
  * @return CreateInstanceAclResponse
 */
async function createInstanceAcl(request: CreateInstanceAclRequest): CreateInstanceAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceAcl', 'POST', '/instances/{instanceId}/acl/account/{username}', 'json', false, 'json', request);
}

model CreateInstanceIpWhitelistRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  ipWhitelists: [ string ](name='ipWhitelists', description='The IP address whitelists.

This parameter is required.', position='Body'),
}

model CreateInstanceIpWhitelistResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='A07B41BD-6DD3-5349-9E76-00303DF04BBE'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model CreateInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceIpWhitelist  CreateInstanceIpWhitelistRequest
  * @return CreateInstanceIpWhitelistResponse
 */
async function createInstanceIpWhitelist(request: CreateInstanceIpWhitelistRequest): CreateInstanceIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceIpWhitelist', 'POST', '/instances/{instanceId}/ip/whitelist', 'json', false, 'json', request);
}

model CreateTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic. The name is used to identify the topic and is globally unique in the instance.

The following describes the naming conventions of a topic:

*   The name can contain letters, digits, underscores (_), hyphens (-), and percent signs (%).
*   The name must be 1 to 60 characters in length.

For information about the characters reserved for the system, see [Limits on parameters](https://help.aliyun.com/document_detail/440347.html).

This parameter is required.', example='topic_test', position='Path'),
  maxSendTps?: long(name='maxSendTps', position='Body'),
  messageType?: string(name='messageType', description='The type of messages in the topic that you want to create.

Valid values:

*   TRANSACTION: transactional messages
*   FIFO: ordered messages
*   DELAY: scheduled messages or delayed Message
*   NORMAL: normal messages

> The type of messages in the topic must be the same as the type of messages that you want to send. For example, if you create a topic whose message type is ordered messages, the topic can be used to send and receive only ordered messages.', example='NORMAL', position='Body'),
  remark?: string(name='remark', description='The description of the topic that you want to create.', example='This is the remark for test.', position='Body'),
}

model CreateTopicResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Topic.Existed'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic already exists.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTopic  CreateTopicRequest
  * @return CreateTopicResponse
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTopic', 'POST', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance from which you want to delete the consumer group.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.

This parameter is required.', example='CID-TEST', position='Path'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * After you delete a consumer group, the consumer client associated with the consumer group cannot consume messages. Exercise caution when you call this operation.
  * @param request  the request parameters of DeleteConsumerGroup  DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model DeleteConsumerGroupSubscriptionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group for which you want to delete subscriptions.

This parameter is required.', example='CID-TEST', position='Path'),
  filterExpression: string(name='filterExpression', description='The filter expression.

This parameter is required.', example='*', position='Query'),
  filterType: string(name='filterType', description='The type of the filter expression. Valid values:

*   SQL: filters messages by using SQL expressions.
*   TAG: filters messages by using tags.

Valid values:

*   TAG: filters messages by using SQL expressions.
*   SQL: filters messages by using SQL expressions.

This parameter is required.', example='TAG', position='Query'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='topic_test', position='Query'),
}

model DeleteConsumerGroupSubscriptionResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied due to the reason that the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='200'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='723CDA5C-E25C-5EAF-9601-08C286DF8A4D'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteConsumerGroupSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupSubscriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConsumerGroupSubscription  DeleteConsumerGroupSubscriptionRequest
  * @return DeleteConsumerGroupSubscriptionResponse
 */
async function deleteConsumerGroupSubscription(request: DeleteConsumerGroupSubscriptionRequest): DeleteConsumerGroupSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroupSubscription', 'DELETE', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/subscriptions', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the ApsaraMQ forÂ RocketMQ instance that you want to delete.

This parameter is required.', example='rmq-cn-7e22ody0129', position='Path'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='048242AA-BADA-5F29-B2CD-ED9FA344467F'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * *   After an instance is deleted, the instance cannot be restored. Exercise caution when you call this operation.
  * *   This operation is used to delete a pay-as-you-go instance. A subscription instance is automatically released after it expires. You do not need to manually delete a subscription instance.
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'DELETE', '/instances/{instanceId}', 'json', false, 'json', request);
}

model DeleteInstanceAccountRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  username: string(name='username', description='Account name

This parameter is required.', example='xxx', position='Path'),
}

model DeleteInstanceAccountResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='Instance.NotFound'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='157DF7D4-53FB-58C6-BEBC-A9400E7EF68A'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteInstanceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceAccount  DeleteInstanceAccountRequest
  * @return DeleteInstanceAccountResponse
 */
async function deleteInstanceAccount(request: DeleteInstanceAccountRequest): DeleteInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceAccount', 'DELETE', '/instances/{instanceId}/accounts/{username}', 'json', false, 'json', request);
}

model DeleteInstanceAclRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  username: string(name='username', description='The username of the account.

This parameter is required.', example='test', position='Path'),
  resourceName: string(name='resourceName', description='The name of the resource on which the permissions are granted.

This parameter is required.', example='test', position='Query'),
  resourceType: string(name='resourceType', description='The type of the resource on which the permissions are granted.

Valid values:

*   Group
*   Topic

This parameter is required.', example='Topic', position='Query'),
}

model DeleteInstanceAclResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied due to the reason that the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='7358418D-83BD-507A-8079-611C63E05674'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteInstanceAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceAcl  DeleteInstanceAclRequest
  * @return DeleteInstanceAclResponse
 */
async function deleteInstanceAcl(request: DeleteInstanceAclRequest): DeleteInstanceAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceAcl', 'DELETE', '/instances/{instanceId}/acl/account/{username}', 'json', false, 'json', request);
}

model DeleteInstanceIpWhitelistRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  ipWhitelist: string(name='ipWhitelist', description='The IP address whitelist.

This parameter is required.', example='0.0.0.0/0', position='Query'),
}

model DeleteInstanceIpWhitelistResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied due to the reason that the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='16425867-C948-5A0C-9A24-5259727BE727'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstanceIpWhitelist  DeleteInstanceIpWhitelistRequest
  * @return DeleteInstanceIpWhitelistResponse
 */
async function deleteInstanceIpWhitelist(request: DeleteInstanceIpWhitelistRequest): DeleteInstanceIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstanceIpWhitelist', 'DELETE', '/instances/{instanceId}/ip/whitelist', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.

This parameter is required.', example='topic_test', position='Path'),
}

model DeleteTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * @description If you delete the topic, the publishing and subscription relationships that are established based on the topic are cleared. Exercise caution when you call this operation.
  * @param request  the request parameters of DeleteTopic  DeleteTopicRequest
  * @return DeleteTopicResponse
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTopic', 'DELETE', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model GetConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer group belongs.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.

This parameter is required.', example='CID-TEST', position='Path'),
}

model GetConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: {
    consumeRetryPolicy?: {
      deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](https://help.aliyun.com/document_detail/440356.html).', example='DLQ_mqtest'),
      maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
      retryPolicy?: string(name='retryPolicy', description='The retry policy.

Valid values:

*   FixedRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at a fixed interval

    <!-- -->

    .

*   DefaultRetryPolicy

    <!-- -->

    :

    <!-- -->

    Failed messages are retried at incremental intervals as the number of retries increases

    <!-- -->

    .', example='DefaultRetryPolicy'),
    }(name='consumeRetryPolicy', description='The consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](https://help.aliyun.com/document_detail/440356.html).'),
    consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST'),
    createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
    deliveryOrderType?: string(name='deliveryOrderType', description='The message delivery order of the consumer group.

Valid values:

*   Concurrently

    <!-- -->

    :

    <!-- -->

    concurrent delivery

    <!-- -->

*   Orderly

    <!-- -->

    :

    <!-- -->

    ordered delivery

    <!-- -->', example='Concurrently'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
    updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter consumerGroupId is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerGroupResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of GetConsumerGroup  GetConsumerGroupRequest
  * @return GetConsumerGroupResponse
 */
async function getConsumerGroup(request: GetConsumerGroupRequest): GetConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroup', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model GetConsumerGroupLagRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-2r42vrvde0j', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The consumer Group ID.

This parameter is required.', example='CID-TEST', position='Path'),
}

model GetConsumerGroupLagResponseBody = {
  code?: string(name='code', description='Error code', example='Topic.NotFound'),
  data?: {
    consumerGroupId?: string(name='consumerGroupId', description='Consumer Group ID', example='CID-TEST'),
    instanceId?: string(name='instanceId', description='Instance ID', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='Region ID', example='cn-hangzhou'),
    topicLagMap?: map[string]DataTopicLagMapValue(name='topicLagMap', description='Backlog for each topic'),
    totalLag?: {
      deliveryDuration?: long(name='deliveryDuration', description='Delivery delay time, in seconds', example='12'),
      inflightCount?: long(name='inflightCount', description='The number of messages being consumed.', example='1'),
      lastConsumeTimestamp?: long(name='lastConsumeTimestamp'),
      readyCount?: long(name='readyCount', description='Ready message count', example='1'),
    }(name='totalLag', description='Total lag count'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='Dynamic error code', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='F5764C40-FB8C-53AE-B95D-96AB3D0E9375'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetConsumerGroupLagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerGroupLagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerGroupLag  GetConsumerGroupLagRequest
  * @return GetConsumerGroupLagResponse
 */
async function getConsumerGroupLag(request: GetConsumerGroupLagRequest): GetConsumerGroupLagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroupLag', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/lag', 'json', false, 'json', request);
}

model GetConsumerGroupSubscriptionRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-uqm32kqyy11', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group whose subscriptions you want to query.

This parameter is required.', example='common_dev', position='Path'),
  topicName: string(name='topicName', description='The name of the topic to which the consumer group subscribes.

This parameter is required.', example='mq003', position='Path'),
}

model GetConsumerGroupSubscriptionResponseBody = {
  code?: string(name='code', description='The error code.', example='Instance.NotFound'),
  data?: [ 
    {
      connectionDTO?: {
        clientId?: string(name='clientId', description='The client ID.', example='192.168.50.191@19908#-2093249153#1534215565#40385215750900'),
        egressIp?: string(name='egressIp', description='The public IP address of the host.', example='xx.xx.xx.xx'),
        hostname?: string(name='hostname', description='The host name.', example='nginx'),
        language?: string(name='language', description='The language used by the client.', example='zh'),
        messageModel?: string(name='messageModel', description='The consumption mode of the consumer group. Valid values:

*   BROADCASTING: broadcasting consumption
*   CLUSTERING: clustering consumption', example='BROADCASTING'),
        version?: string(name='version', description='The client version.', example='1.0.0'),
      }(name='connectionDTO', description='The connection details.'),
      subscriptionDTO?: {
        consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='GID_inspector_group'),
        filterExpression?: string(name='filterExpression', description='The filter expression.', example='*'),
        filterExpressionType?: string(name='filterExpressionType', description='The type of the filter expression. Valid values:

*   SQL: filters messages by using SQL expressions.
*   TAG: filters messages by using tags.', example='UNSPECIFIED'),
        messageModel?: string(name='messageModel', description='The consumption mode of the consumer group. Valid values:

*   BROADCASTING: broadcasting consumption
*   CLUSTERING: clustering consumption', example='BROADCASTING'),
        subscriptionStatus?: string(name='subscriptionStatus', description='The subscription status. Valid values:

*   ONLINE: The consumer group is online. If the consumer group contains multiple consumers, this value is returned if at least one of the consumers is online.
*   OFFLINE: The consumer group is offline. If the consumer group contains multiple consumers, this value is returned only if all consumers are offline.', example='ONLINE'),
        topicName?: string(name='topicName', description='The topic to which the consumer group subscribes.', example='Topic_normal_inspector'),
      }(name='subscriptionDTO', description='The subscription details.'),
    }
  ](name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The response code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='157DF7D4-53FB-58C6-BEBC-A9400E7EF68A'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetConsumerGroupSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerGroupSubscriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerGroupSubscription  GetConsumerGroupSubscriptionRequest
  * @return GetConsumerGroupSubscriptionResponse
 */
async function getConsumerGroupSubscription(request: GetConsumerGroupSubscriptionRequest): GetConsumerGroupSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerGroupSubscription', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/subscriptions/{topicName}', 'json', false, 'json', request);
}

model GetConsumerStackRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-tl32upjeb08', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The consumer Group ID.

This parameter is required.', example='GID_TT_TASK', position='Path'),
  clientId: string(name='clientId', description='The client ID.

This parameter is required.', example='172.26.76.48@Lqd7dImlp9KJ5V84', position='Query'),
}

model GetConsumerStackResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
    stacks?: [ 
      {
        thread?: string(name='thread', description='Thread id.', example='123'),
        tracks?: [ string ](name='tracks', description='Stack Information.'),
      }
    ](name='stacks', description='Stack Information.'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='30F2CBC7-F69D-5D78-9661-0254C9E1FBFA'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetConsumerStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerStackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerStack  GetConsumerStackRequest
  * @return GetConsumerStackResponse
 */
async function getConsumerStack(request: GetConsumerStackRequest): GetConsumerStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumerStack', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/stack', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance that you want to query.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
}

model GetInstanceResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingInstanceId'),
  data?: {
    accountInfo?: {
      username?: string(name='username', description='The username of the instance. If you access a ApsaraMQ forÂ RocketMQ instance over the Internet, you must configure the username and password of the instance in the SDK code for authentication.', example='6W0xz2uPfiwp****'),
    }(name='accountInfo', description='The account information.'),
    aclInfo?: {
      aclType?: string(name='aclType', description='The authentication type of the instance. This parameter is no longer in use. We recommend that you configure aclTypes.

Valid values:

- default: intelligent identity authentication

- apache_acl:access control list (ACL) identity authentication**', example='default', deprecated='true'),
      aclTypes?: [ string ](name='aclTypes', description='The authentication types of the instance.'),
      defaultVpcAuthFree?: boolean(name='defaultVpcAuthFree', description='Indicates whether the authentication-free in VPCs feature is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    }(name='aclInfo', description='The information about access control.'),
    bid?: string(name='bid', description='The business ID (BID) of the commodity.', example='26842'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of a ApsaraMQ forÂ RocketMQ 5.0 instance has a similar format as ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
    createTime?: string(name='createTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
    expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
    extConfig?: {
      aclType?: string(name='aclType', description='The authentication type of the instance.

Valid value:

*   default: intelligent authentication', example='default'),
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='10'),
      flowOutType?: string(name='flowOutType', description='The metering method of Internet usage.

Valid values:

*   PayByTraffic: pay-by-traffic
*   paybybandwidth: pay-by-bandwidth
*   uninvolved: N/A', example='payByBandwidth'),
      internetSpec?: string(name='internetSpec', description='Indicates whether Internet access is enabled.

Valid values:

*   enable
*   disable

By default, you can access ApsaraMQ for RocketMQ instances in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fees](https://help.aliyun.com/document_detail/427240.html).', example='enable'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](https://help.aliyun.com/document_detail/440347.html).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](https://help.aliyun.com/document_detail/427238.html).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](https://help.aliyun.com/document_detail/444715.html).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether the elastic TPS feature is supported by the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](https://help.aliyun.com/document_detail/427237.html).

> The elastic TPS feature is supported only by specific instance editions. For more information, see [Instance specifications](https://help.aliyun.com/document_detail/444715.html).', example='true'),
    }(name='extConfig', description='The extended configurations. We recommend you configure productInfo, internetInfo, or aclInfo instead of this parameter.', deprecated='true'),
    groupCount?: long(name='groupCount', description='The number of groups.', example='10'),
    instanceId?: string(name='instanceId', description='The ID of the instance', example='rmq-cn-7e22ody****'),
    instanceName?: string(name='instanceName', description='The name of the instance.', example='test instance'),
    instanceQuotas?: [ 
      {
        freeCount?: double(name='freeCount', description='The number of topics that are free of charge on the instance.', example='20'),
        quotaName?: string(name='quotaName', description='The quota name.

Valid value:

*   TOPIC_COUNT: the number of topics that can be created on the instance', example='TOPIC_COUNT'),
        totalCount?: double(name='totalCount', description='The total number of topics on the instance.', example='100'),
        usedCount?: double(name='usedCount', description='The number of used topics on the instance.', example='10'),
      }
    ](name='instanceQuotas', description='The instance quotas.'),
    networkInfo?: {
      endpoints?: [ 
        {
          endpointType?: string(name='endpointType', description='The type of the endpoint that is used to access the instance.

Valid values:

*   TCP_VPC: VPC endpoint
*   TCP_INTERNET: public endpoint', example='TCP_INTERNET'),
          endpointUrl?: string(name='endpointUrl', description='The endpoint that is used to access the instance.', example='rmq-cn-c4d2tbk****-vpc.cn-hangzhou.rmq.aliyuncs.com:8080'),
          ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet. This parameter can be configured only if you use the public endpoint to access the instance.

*   If you do not configure an IP address whitelist, all CIDR blocks are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If you configure an IP address whitelist, only the IP addresses in the whitelist are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.

We recommend that you configure internetInfo.ipWhitelist instead of this parameter.', example='192.168.x.x/24'),
        }
      ](name='endpoints', description='The endpoints.'),
      internetInfo?: {
        flowOutBandwidth?: int32(name='flowOutBandwidth', description='The Internet bandwidth. Unit: MB/s.', example='1'),
        flowOutType?: string(name='flowOutType', description='The metering method for Internet usage.

Valid values:

*   PayByBandwidth: pay-by-bandwidth. If the Internet access feature is enabled, specify this value for the parameter.
*   uninvolved: N/A. If the Internet access feature is not enabled, specify this value for the parameter.', example='payByBandwidth'),
        internetSpec?: string(name='internetSpec', description='Specifies whether to enable the Internet access feature.

Valid values:

*   enable
*   disable

By default, ApsaraMQ forÂ RocketMQ instances are accessed in virtual private clouds (VPCs). If you enable the Internet access feature, you are charged for Internet outbound bandwidth. For more information, see [Internet access fee](https://help.aliyun.com/document_detail/427240.html).', example='enable'),
        ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ forÂ RocketMQ broker.

*   If this parameter is not configured, all IP addresses are allowed to access the ApsaraMQ forÂ RocketMQ broker over the Internet.
*   If this parameter is configured, only the IP addresses that are included in the whitelist can access the ApsaraMQ forÂ RocketMQ broker over the Internet.'),
      }(name='internetInfo', description='The information about the Internet.'),
      vpcInfo?: {
        securityGroupIds?: string(name='securityGroupIds', description='The security group ID.', example='sg-hp35r2hc3a3sv8q2sb16'),
        vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch with which the instance is associated.', example='vsw-uf6gwtbn6etadpvz7****', deprecated='true'),
        vSwitches?: [ 
          {
            vSwitchId?: string(name='vSwitchId', description='The vSwitch ID.', example='vsw-uf6gwtbn6etadpvz7****'),
            zoneId?: string(name='zoneId', description='The zone ID.', example='cn-hangzhou'),
          }
        ](name='vSwitches', description='The vSwitches.'),
        vpcId?: string(name='vpcId', description='The ID of the VPC with which the instance is associated.', example='vpc-uf6of9452b2pba82c****'),
      }(name='vpcInfo', description='The virtual private cloud (VPC) information.'),
    }(name='networkInfo', description='The network information.'),
    paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo
*   Subscription', example='Subscription'),
    productInfo?: {
      autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

This parameter is valid only when the supportAutoScaling parameter is set to enable.', example='true'),
      messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section in [Usage limits](https://help.aliyun.com/document_detail/440347.html).

The storage of messages in ApsaraMQ forÂ RocketMQ is serverless and scalable. You are charged for message storage based on your actual usage. You can change the retention period of messages to adjust storage capacity. For more information, see [Storage fee](https://help.aliyun.com/document_detail/427238.html).', example='72'),
      msgProcessSpec?: string(name='msgProcessSpec', description='The computing specification that is used to send and receive messages. For information about the upper limit of TPS, see [Instance specifications](https://help.aliyun.com/document_detail/444715.html).', example='rmq.s2.2xlarge'),
      sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio between sent messages and received messages in the instance.', example='0.5'),
      storageEncryption?: boolean(name='storageEncryption', description='Indicates whether storage encryption is enabled.', example='false'),
      storageSecretKey?: string(name='storageSecretKey', description='The storage encryption key.', example='xxxxx'),
      supportAutoScaling?: boolean(name='supportAutoScaling', description='Specifies whether to enable the elastic TPS feature for the instance.

Valid values:

*   true: enable
*   false: disable

After you enable the elastic TPS feature for a ApsaraMQ forÂ RocketMQ instance, you can use a specific amount of TPS that exceeds the specification limit. You are charged for the elastic TPS feature. For more information, see [Computing fee](https://help.aliyun.com/document_detail/427237.html).

> The elastic TPS feature is supported by only specific instance editions. For more information, see [Instance specifications](https://help.aliyun.com/document_detail/444715.html).', example='true'),
      traceOn?: boolean(name='traceOn', description='Indicates whether the message trace feature is enabled. Valid values:

*   true
*   false

This parameter is not in use. By default, the message trace feature is enabled for ApsaraMQ for RocketMQ instances, regardless of whether this parameter is configured.', example='true'),
    }(name='productInfo', description='The extended configurations of the instance.'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
    remark?: string(name='remark', description='The description of the instance.', example='This is remark for instance.'),
    resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfm3tmjruyribi'),
    seriesCode?: string(name='seriesCode', description='The primary edition of the instance. For information about the differences between primary edition instances, see [Instance selection](https://help.aliyun.com/document_detail/444722.html).

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
    serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ forÂ RocketMQ is rmq.', example='rmq'),
    software?: {
      maintainTime?: string(name='maintainTime', description='The period of upgrade time.', example='02:00-06:00'),
      softwareVersion?: string(name='softwareVersion', description='The version of software.', example='5.0-rmq-20230619-1'),
      upgradeMethod?: string(name='upgradeMethod', description='The upgrade method.

Valid values:

- Auto: automatic upgrade

- Manual: manual upgrade', example='auto'),
    }(name='software', description='The instance software information.'),
    startTime?: string(name='startTime', description='The time when the instance was started.', example='2022-08-01 00:00:00'),
    status?: string(name='status', description='The status of the instance.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
    subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance. For information about the differences between sub-category edition instances, see [Instance selection](https://help.aliyun.com/document_detail/444722.html).

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
    tags?: [ 
      {
        key?: string(name='key', description='The tag key of the resource.', example='key'),
        value?: string(name='value', description='The tag value of the resource.', example='value'),
      }
    ](name='tags', description='The resource tags.'),
    topicCount?: long(name='topicCount', description='The number of topics.', example='10'),
    updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
    userId?: string(name='userId', description='The ID of the user who owns the instance.', example='111111111111111'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='05AB7FBD-F1D3-5D87-BF78-BD782249****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/instances/{instanceId}', 'json', false, 'json', request);
}

model GetInstanceAccountRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-20p36ja4m0y', position='Path'),
  username?: string(name='username', description='The username of the account.

If you do not configure this parameter, the default username of the instance is used.', example='test', position='Query'),
}

model GetInstanceAccountResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    password?: string(name='password', description='The password of the account.', example='*************'),
    username?: string(name='username', description='The username of the account.', example='xxx'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='Request ID, each request\\"s ID is unique and can be used for troubleshooting and problem localization.', example='B5C59E80-FCFC-5796-ABE4-D39EAAE578E4'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetInstanceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceAccount  GetInstanceAccountRequest
  * @return GetInstanceAccountResponse
 */
async function getInstanceAccount(request: GetInstanceAccountRequest): GetInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceAccount', 'GET', '/instances/{instanceId}/account', 'json', false, 'json', request);
}

model GetMessageDetailRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-lbj31fs790d', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='flink_test', position='Path'),
  messageId: string(name='messageId', description='The message ID.

This parameter is required.', example='0A792FDB001F7591083D30ADB1DA11D5', position='Path'),
}

model GetMessageDetailResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    body?: string(name='body', description='The message body.', example='{}'),
    bodySize?: int32(name='bodySize', description='The size of the message body.', example='123'),
    bornHost?: string(name='bornHost', description='The client on which the message was produced.', example='xxx.xx.xxx.xx'),
    bornTime?: string(name='bornTime', description='The time when the message was generated.', example='2023-03-22 12:17:08'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
    messageGroup?: string(name='messageGroup', description='The sharding key. This parameter is returned only for ordered messages.', example='xx'),
    messageId?: string(name='messageId', description='The message ID.', example='01BE87E485F0C7808C04543CAF00000001'),
    messageKeys?: [ string ](name='messageKeys', description='The message keys.'),
    messageTag?: string(name='messageTag', description='The tags.', example='xx'),
    messageType?: string(name='messageType', description='The message type.', example='NORMAL'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
    storeHost?: string(name='storeHost', description='The broker on which the message was stored.', example='xxx.xx.xxx.xx'),
    storeTime?: string(name='storeTime', description='The time when the message was stored.', example='2023-03-22 12:17:08'),
    systemProperties?: map[string]string(name='systemProperties', description='The default system attributes.'),
    topicName?: string(name='topicName', description='The topic name.', example='topic_test'),
    userProperties?: map[string]string(name='userProperties', description='The user attributes.'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='FAEBD71F-E839-52F9-BD7B-8F1290525841'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model GetMessageDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMessageDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMessageDetail  GetMessageDetailRequest
  * @return GetMessageDetailResponse
 */
async function getMessageDetail(request: GetMessageDetailRequest): GetMessageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMessageDetail', 'GET', '/instances/{instanceId}/topics/{topicName}/messages/{messageId}', 'json', false, 'json', request);
}

model GetTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.

This parameter is required.', example='topic_test', position='Path'),
}

model GetTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
    maxSendTps?: long(name='maxSendTps'),
    messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION: transactional message
*   FIFO: ordered message
*   DELAY: scheduled or delayed message
*   NORMAL: normal message', example='NORMAL'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
    status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING: The topic is running.
*   CREATING: The topic is being created.', example='RUNNING'),
    topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
    updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model GetTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopic  GetTopicRequest
  * @return GetTopicResponse
 */
async function getTopic(request: GetTopicRequest): GetTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTopic', 'GET', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model GetTraceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-zvp2vtypu05', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='linkedcare-image', position='Path'),
  messageId: string(name='messageId', description='The message ID.

This parameter is required.', example='012A5AB0BBEC8A000104C6342B00001ECF', position='Path'),
}

model GetTraceResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: {
    brokerInfo?: {
      delayStatus?: string(name='delayStatus', description='Delay status.', example='SUCCESS'),
      operations?: [ 
        {
          operateTime?: string(name='operateTime', description='Operation time.', example='2023-03-22 12:17:08'),
          operateType?: string(name='operateType', description='Operation type.', example='ADD'),
        }
      ](name='operations', description='Operation list.'),
      presetDelayTime?: string(name='presetDelayTime', description='Preset delivery time.', example='2023-03-22 12:17:08'),
    }(name='brokerInfo', description='Broker trace info.'),
    consumerInfos?: [ 
      {
        consumeStatus?: string(name='consumeStatus', description='Consume status.', example='SUCCESS'),
        consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='GID_inspector_group'),
        deadLetterInfo?: {
          messageId?: string(name='messageId', description='MessageId.', example='7F000001001F7A4F0F29463F0376047D'),
          toDlqTime?: string(name='toDlqTime', description='Arrival time in the dead letter queue.', example='2023-03-22 12:17:08'),
          topicName?: string(name='topicName', description='The topic name.', example='Register_Sync'),
        }(name='deadLetterInfo', description='Dead letter info.'),
        deadMessage?: boolean(name='deadMessage', description='Whether it is a dead letter message.', example='true'),
        records?: [ 
          {
            clientHost?: string(name='clientHost', description='Client host.', example='xx.xx.xx.xx'),
            consumeStatus?: string(name='consumeStatus', description='Consume status.', example='SUCCESS'),
            fifoEnable?: boolean(name='fifoEnable', description='Whether to consume fifo.', example='true'),
            operations?: [ 
              {
                deadMessage?: boolean(name='deadMessage', description='Whether it is a dead letter message.', example='true'),
                invisibleTime?: long(name='invisibleTime', description='Invisible time, milliseconds.', example='100'),
                operateTime?: string(name='operateTime', description='Operation time.', example='2023-03-22 12:17:08'),
                operateType?: string(name='operateType', description='Operation type.', example='ADD'),
              }
            ](name='operations', description='Operation list.'),
            popCk?: string(name='popCk', description='POP_CK', example='123'),
            userName?: string(name='userName', description='Consumer name.', example='test'),
          }
        ](name='records', description='Consumer record list.'),
      }
    ](name='consumerInfos', description='Consumer trace info.'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
    messageInfo?: {
      body?: string(name='body', description='Message body.', example='{}'),
      bornHost?: string(name='bornHost', description='Message born host.', example='x.x.x.x'),
      bornTime?: string(name='bornTime', description='Message born time.', example='2023-03-22 12:17:08'),
      instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-u0t2ygjq505'),
      messageGroup?: string(name='messageGroup', description='Message grpup.', example='xx'),
      messageId?: string(name='messageId', description='The message ID.', example='0A79275A00207A4F0F2916C92F9A0B94'),
      messageKeys?: [ string ](name='messageKeys', description='Message keys.'),
      messageTag?: string(name='messageTag', description='Message tag.', example='xx'),
      messageType?: string(name='messageType', description='Message type.', example='NORMAL'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      storeHost?: string(name='storeHost', description='Message store host.', example='x.x.x.x'),
      storeTime?: string(name='storeTime', description='Message store time.', example='2023-03-22 12:17:08'),
      topicName?: string(name='topicName', description='The topic name.', example='Topic_normal_inspector'),
      transactionId?: string(name='transactionId', description='Message transaction id.', example='xx'),
      userProperties?: map[string]string(name='userProperties', description='Message user properties.'),
    }(name='messageInfo', description='The message information.'),
    producerInfo?: {
      records?: [ 
        {
          arriveTime?: string(name='arriveTime', description='Arrive time.', example='2023-03-22 12:17:08'),
          clientHost?: string(name='clientHost', description='Client host.', example='xx.xx.xx.xx'),
          dlqOriginMessageId?: string(name='dlqOriginMessageId', description='Dead-letter queue message ID.', example='0A79275A00207A4F0F2916C92F9A0B94'),
          dlqOriginTopic?: string(name='dlqOriginTopic', description='Dead-letter queue topic.', example='test_topic'),
          messageSource?: string(name='messageSource', description='Message source.', example='CONSOLE'),
          produceDuration?: long(name='produceDuration', description='Producer duration.', example='100'),
          produceStatus?: string(name='produceStatus', description='Producer status.', example='SUCCESS'),
          produceTime?: string(name='produceTime', description='Producer time.', example='2023-03-22 12:17:08'),
          userName?: string(name='userName', description='Producer name.', example='xxx'),
        }
      ](name='records', description='Producer record list.'),
    }(name='producerInfo', description='Producer trace info.'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
    topicName?: string(name='topicName', description='The topic name.', example='topic_test'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='7779A8FC-1BCD-5A1D-A603-C4A9BD8ADC49'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model GetTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrace  GetTraceRequest
  * @return GetTraceResponse
 */
async function getTrace(request: GetTraceRequest): GetTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrace', 'GET', '/instances/{instanceId}/topics/{topicName}/traces/{messageId}', 'json', false, 'json', request);
}

model ListAvailableZonesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListAvailableZonesResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='Topic.NotFound'),
  data?: [ 
    {
      createTime?: string(name='createTime', description='The time when the zone was created.', example='2022-08-01 20:05:50'),
      updateTime?: string(name='updateTime', description='The time when the zone was last updated.', example='2022-08-01 20:05:50'),
      zoneId?: string(name='zoneId', description='The ID of the current zone.', example='cn-qingdao-b'),
      zoneName?: string(name='zoneName', description='The name of the current zone.', example='ha-cn-t9b30w902vm_qrs'),
    }
  ](name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAvailableZones  ListAvailableZonesRequest
  * @return ListAvailableZonesResponse
 */
async function listAvailableZones(request: ListAvailableZonesRequest): ListAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAvailableZones', 'GET', '/zones', 'json', false, 'json', request);
}

model ListConsumerConnectionsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-uax32mf9h1f', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The consumer group ID.

This parameter is required.', example='GID_TEST_STOCK_OPEND_GW', position='Path'),
}

model ListConsumerConnectionsResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingPageNumber'),
  data?: {
    connections?: [ 
      {
        clientId?: string(name='clientId', description='The ID of the client.', example='172.17.135.197@17392#1936705963#551717232#9873695589062458'),
        egressIp?: string(name='egressIp', description='Host IP/Public IP', example='xx.xx.xx.xx'),
        hostname?: string(name='hostname', description='The `hostname` of the cloud-native box.', example='vos'),
        language?: string(name='language', description='The language of the client.', example='java'),
        messageModel?: string(name='messageModel', description='Consumption Mode
- BROADCASTING
- CLUSTERING', example='BROADCASTING'),
        version?: string(name='version', description='The version of the client.', example='1.0'),
      }
    ](name='connections', description='The client connection list'),
    consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='CID-TEST'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
    regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='A3620115-6F1F-5CFB-AA3F-BBD4853B2EC4'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListConsumerConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerConnectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConsumerConnections  ListConsumerConnectionsRequest
  * @return ListConsumerConnectionsResponse
 */
async function listConsumerConnections(request: ListConsumerConnectionsRequest): ListConsumerConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerConnections', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/connections', 'json', false, 'json', request);
}

model ListConsumerGroupSubscriptionsRequest {
  instanceId: string(name='instanceId', description='The ID of the ApsaraMQ for RocketMQ instance.

This parameter is required.', example='rmq-cn-tl32wwz1r05', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group whose subscriptions you want to query.

If you do not configure this parameter, the subscriptions of all consumer groups on the specified instance are queried.

This parameter is required.', example='PRINT_RETRY_CONSUMER', position='Path'),
}

model ListConsumerGroupSubscriptionsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: [ 
    {
      consistency?: boolean(name='consistency', description='Indicates whether message consumption is consistent. Valid values:

*   false: Unconsumed messages exist in the consumer group.
*   true: No unconsumed message exists in the consumer group.', example='true'),
      consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='CID-TEST'),
      filterExpression?: string(name='filterExpression', description='The filter expression.', example='*'),
      filterExpressionType?: string(name='filterExpressionType', description='The type of the filter expression. Valid values:

*   SQL: filters messages by using SQL expressions.
*   TAG: filters messages by using tags.', example='SQL'),
      messageModel?: string(name='messageModel', description='The consumption mode of the consumer group. Valid values:

*   BROADCASTING: broadcasting consumption
*   CLUSTERING: clustering consumption', example='BROADCASTING'),
      subscriptionStatus?: string(name='subscriptionStatus', description='The subscription status. Valid values:

*   ONLINE: The consumer group is online. If the consumer group contains multiple consumers, this value is returned as long as one of the consumers is online.
*   OFFLINE: The consumer group is offline. If the consumer group contains multiple consumers, this value is returned only if all consumers are offline.', example='ONLINE'),
      topicCreated?: boolean(name='topicCreated', description='Indicates whether the topic is created.', example='true'),
      topicName?: string(name='topicName', description='The topic to which the consumer group subscribes.', example='topic_test'),
    }
  ](name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='5F4D9D5F-625B-59FF-BD4F-DA8284575DB4'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListConsumerGroupSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerGroupSubscriptionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConsumerGroupSubscriptions  ListConsumerGroupSubscriptionsRequest
  * @return ListConsumerGroupSubscriptionsResponse
 */
async function listConsumerGroupSubscriptions(request: ListConsumerGroupSubscriptionsRequest): ListConsumerGroupSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroupSubscriptions', 'GET', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/subscriptions', 'json', false, 'json', request);
}

model ListConsumerGroupsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer groups belong.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='The condition that you want to use to filter consumer groups in the instance. If you leave this parameter empty, all consumer groups in the instance are queried.', example='CID-TEST', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='10', minimum=10, maximum=100, position='Query'),
}

model ListConsumerGroupsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        consumerGroupId?: string(name='consumerGroupId', description='The ID of the consumer group.', example='GID-TEST'),
        createTime?: string(name='createTime', description='The time when the consumer group was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        maxReceiveTps?: long(name='maxReceiveTps'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the consumer group.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the consumer group.

Valid values:

*   RUNNING

    <!-- -->

    : The consumer group is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The consumer group is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        updateTime?: string(name='updateTime', description='The time when the consumer group was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter InstanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='5503A460-98ED-5543-92CF-4853DE28****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListConsumerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumerGroupsResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of ListConsumerGroups  ListConsumerGroupsRequest
  * @return ListConsumerGroupsResponse
 */
async function listConsumerGroups(request: ListConsumerGroupsRequest): ListConsumerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroups', 'GET', '/instances/{instanceId}/consumerGroups', 'json', false, 'json', request);
}

model ListInstanceAccountRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  accountStatus?: string(name='accountStatus', description='The status of the account.

Valid values:

*   DISABLE
*   ENABLE', example='ENABLE', position='Query'),
  accountType?: string(name='accountType', description='The account type.
  - CUSTOMER
  - DEFAULT', example='CUSTOMER', position='Query'),
  pageNumber: int32(name='pageNumber', description='The page number. Default value: 1.

This parameter is required.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries per page. Default value: 10.

This parameter is required.', example='10', minimum=10, maximum=10000, position='Query'),
  username?: string(name='username', description='The username of the account.', example='test', position='Query'),
}

model ListInstanceAccountResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        accountStatus?: string(name='accountStatus', description='The status of the account.
Valid values:
  - DISABLE
  - ENABLE', example='ENABLE'),
        accountType?: string(name='accountType', description='The account type.
  - CUSTOMER
  - DEFAULT', example='CUSTOMER'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
        username?: string(name='username', description='The username of the account.', example='test'),
      }
    ](name='list', description='The pagination information.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='Number of items per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='24'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='C115601B-8736-5BBF-AC99-7FEAE1245A80'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListInstanceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceAccount  ListInstanceAccountRequest
  * @return ListInstanceAccountResponse
 */
async function listInstanceAccount(request: ListInstanceAccountRequest): ListInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceAccount', 'GET', '/instances/{instanceId}/accounts', 'json', false, 'json', request);
}

model ListInstanceAclRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='The condition that you specify to filter the ACLs. If you do not specify this parameter, all ACLs are queried.', example='CID-TEST', position='Query'),
  pageNumber: int32(name='pageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries per page.

This parameter is required.', example='10', minimum=10, maximum=10000, position='Query'),
}

model ListInstanceAclResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied due to the reason that the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        aclType?: string(name='aclType', description='The ACL type.

Valid value:

*   APACHE: open source ACL.', example='APACHE'),
        actions?: [ string ](name='actions', description='The types of the operations that are allowed by the ACL.'),
        decision?: string(name='decision', description='The decision result.

Valid values:

*   Deny: Access is denied.
*   Allow: Access is allowed.', example='Allow'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        ipWhitelists?: [ string ](name='ipWhitelists', description='The IP address whitelists.'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
        resourceName?: string(name='resourceName', description='The resource name.', example='test'),
        resourceType?: string(name='resourceType', description='The resource type.

Valid values:

*   Group
*   Topic', example='Topic'),
        username?: string(name='username', description='The username.', example='test'),
      }
    ](name='list', description='The pagination information.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of entries returned.', example='24'),
  }(name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='DA4D2F89-E2C8-5F04-936B-60D55B055FA7'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListInstanceAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceAcl  ListInstanceAclRequest
  * @return ListInstanceAclResponse
 */
async function listInstanceAcl(request: ListInstanceAclRequest): ListInstanceAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceAcl', 'GET', '/instances/{instanceId}/acl', 'json', false, 'json', request);
}

model ListInstanceIpWhitelistRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  ipWhitelist?: string(name='ipWhitelist', description='IP whitelist.', example='0.0.0.0/0', position='Query'),
  pageNumber: int32(name='pageNumber', description='The page number. Default value: 1.

This parameter is required.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries to return on each page.

This parameter is required.', example='10', minimum=10, maximum=10000, position='Query'),
}

model ListInstanceIpWhitelistResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='Instance.NotFound'),
  data?: {
    list?: [ string ](name='list', description='The pagination information.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='Number of items per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='5'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='7358418D-83BD-507A-8079-611C63E05674'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceIpWhitelist  ListInstanceIpWhitelistRequest
  * @return ListInstanceIpWhitelistResponse
 */
async function listInstanceIpWhitelist(request: ListInstanceIpWhitelistRequest): ListInstanceIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceIpWhitelist', 'GET', '/instances/{instanceId}/ip/whitelist', 'json', false, 'json', request);
}

model ListInstancesRequest {
  filter?: string(name='filter', description='The filter condition that is used to query instances. If you do not configure this parameter, all instances are queried.', example='rmq-cn-7e22ody****', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The page number.

Valid values: 1 to 100000000.

If you set this parameter to a value smaller than 1, the system uses 1 as the value. If you set this parameter to a value greater than 100000000, the system uses 100000000 as the value.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.

Value values: 10 to 200.

If you set this parameter to a value smaller than 10, the system uses 10 as the value. If you set this parameter to a value greater than 200, the system uses 200 as the value.', example='10', minimum=10, maximum=200, position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******', position='Query'),
  seriesCodes?: [ string ](name='seriesCodes', description='The primary edition of the instance.

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', shrink='simple', position='Query'),
  storageSecretKey?: string(name='storageSecretKey', description='The storage encryption key.', example='xxxxx', position='Query'),
  tags?: string(name='tags', description='The tags that are used to filter instances.', example='[{"key": "rmq-test", "value": "test"}]', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', description='The error code returned if the call failed.', example='MissingPageNumber'),
  data?: {
    list?: [ 
      {
        commodityCode?: string(name='commodityCode', description='The commodity code of the instance. The commodity code of ApsaraMQ for RocketMQ 5.0 instances has a similar format to ons_rmqsub_public_cn.', example='ons_rmqsub_public_cn'),
        createTime?: string(name='createTime', description='The time when the version of the instance was updated.', example='2022-08-01 00:00:00'),
        expireTime?: string(name='expireTime', description='The time when the instance expires.', example='2022-09-01 00:00:00'),
        groupCount?: long(name='groupCount', description='The number of consumer groups that are created on the instance.', example='10'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        instanceName?: string(name='instanceName', description='The instance name.', example='test instance'),
        paymentType?: string(name='paymentType', description='The billing method of the instance.

Valid values:

*   PayAsYouGo
*   Subscription', example='Subscription'),
        productInfo?: {
          traceOn?: boolean(name='traceOn', description='Indicates whether the message trace feature is enabled. Valid values:

*   true
*   false

This parameter is not in use. By default, the message trace feature is enabled for ApsaraMQ for RocketMQ instances, regardless of whether this parameter is configured.', example='true'),
        }(name='productInfo', description='The product information.'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        releaseTime?: string(name='releaseTime', description='The time when the instance was released.', example='2022-09-07 00:00:00'),
        remark?: string(name='remark', description='The instance description.', example='This is remark for instance.'),
        resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmx7caj******'),
        seriesCode?: string(name='seriesCode', description='The primary edition of the instance.

Valid values:

*   standard: Standard Edition
*   ultimate: Enterprise Platinum Edition
*   professional: Professional Edition', example='standard'),
        serviceCode?: string(name='serviceCode', description='The code of the service to which the instance belongs. The service code of ApsaraMQ for RocketMQ is rmq.', example='rmq'),
        startTime?: string(name='startTime', description='The time when the instance was created.', example='2022-08-01 00:00:00'),
        status?: string(name='status', description='The status of the instance.

Valid values:

*   RELEASED
*   RUNNING
*   STOPPED
*   CHANGING
*   CREATING', example='RUNNING'),
        subSeriesCode?: string(name='subSeriesCode', description='The sub-category edition of the instance.

Valid values:

*   cluster_ha: Cluster High-availability Edition
*   single_node: Standalone Edition', example='cluster_ha'),
        tags?: [ 
          {
            key?: string(name='key', description='The tag key of the resource.', example='key'),
            value?: string(name='value', description='The tag value of the resource.', example='value'),
          }
        ](name='tags', description='The resource tags.'),
        topicCount?: long(name='topicCount', description='The number of topics that are created on the instance.', example='20'),
        updateTime?: string(name='updateTime', description='The time when the instance was last modified.', example='2022-08-02 00:00:00'),
        userId?: string(name='userId', description='The ID of the user who owns the instance.', example='6W0xz2uPfiwp****'),
      }
    ](name='list', description='The pagination information.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned on each page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='100'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='PageNumber'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='pageNumber'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter pageNumber is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='84445A20-2B50-5306-A3C0-AF99FC1833C6'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/instances', 'json', false, 'json', request);
}

model ListMessagesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-zvp2vtypu05', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='test_delay_queue', position='Path'),
  endTime?: string(name='endTime', description='The end of the time range to query.', example='2024-09-09 09:00:00', position='Query'),
  messageId?: string(name='messageId', description='Message Id.', example='7F00000100207A4F0F294A938F7807AE', position='Query'),
  messageKey?: string(name='messageKey', description='Message key.', example='XSCBillResult', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The page number. Pages start from page 1.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page.', example='10', minimum=1, maximum=20, position='Query'),
  scrollId?: string(name='scrollId', description='The scroll ID of the request.

You do not need to configure this parameter for the first page. This parameter is included in the pagination request based on the result returned for the first page.', example='B13D0B07-F24B-4790-88D8-D47A38063D00', position='Query'),
  startTime?: string(name='startTime', description='The beginning of the time range to query.', example='2024-09-09 08:00:00', position='Query'),
}

model ListMessagesResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: {
    list?: [ 
      {
        body?: string(name='body', description='Message body.', example='{}'),
        bodySize?: int32(name='bodySize', description='Message body size.', example='100'),
        bornHost?: string(name='bornHost', description='The client on which messages are produced.', example='xx.xx.xx.xx'),
        bornTime?: string(name='bornTime', description='Message born time.', example='2023-03-22 12:17:08'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        messageGroup?: string(name='messageGroup', description='The message group. This parameter is returned only for ordered messages.', example='xx'),
        messageId?: string(name='messageId', description='Message Id.', example='7F000001000114B4340C5ABF94500079'),
        messageKeys?: [ string ](name='messageKeys', description='Message keys.'),
        messageTag?: string(name='messageTag', description='The message tag.', example='xx'),
        messageType?: string(name='messageType', description='Message type.', example='NORMAL'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
        storeHost?: string(name='storeHost', description='The broker on which messages are stored.', example='xx.xx.xx.xx'),
        storeTime?: string(name='storeTime', description='Message store time.', example='2023-03-22 12:17:08'),
        topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
        userProperties?: map[string]string(name='userProperties', description='Message user properties.'),
      }
    ](name='list', description='The pagination information.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='50'),
    scrollId?: string(name='scrollId', description='The scroll ID of the request.

The ID is automatically generated by the system. The result can be paginated only if this parameter is included in the pagination request.', example='B13D0B07-F24B-4790-88D8-D47A38063D00'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='0'),
  }(name='data', description='The data returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='A3531B6A-5A88-52BD-B3C4-A024C3D0AA2E'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMessagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMessages  ListMessagesRequest
  * @return ListMessagesResponse
 */
async function listMessages(request: ListMessagesRequest): ListMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMessages', 'GET', '/instances/{instanceId}/topics/{topicName}/messages', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListRegionsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingPageNumber'),
  data?: [ 
    {
      createTime?: string(name='createTime', description='The time when the ApsaraMQ for RocketMQ instance was created.', example='2022-08-01 20:05:50'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
      regionName?: string(name='regionName', description='The region name.', example='hangzhou'),
      supportRocketmqV4?: boolean(name='supportRocketmqV4', description='Indicates whether ApsaraMQ for RocketMQ V4 is activated.', example='true'),
      supportRocketmqV5?: boolean(name='supportRocketmqV5', description='Indicates whether ApsaraMQ for RocketMQ V5 is activated.', example='true'),
      tags?: [ 
        {
          tagCode?: string(name='tagCode', description='The tag code.', example='xx'),
          tagValue?: any(name='tagValue', description='The tag value.', example='xx'),
        }
      ](name='tags', description='The region tags.'),
      updateTime?: string(name='updateTime', description='The time when the ApsaraMQ for RocketMQ instance was last modified.', example='2022-08-01 20:05:50'),
    }
  ](name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='0B962390-D84B-5D44-8C11-79DF40299D41'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegions', 'GET', '/regions', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='nextToken', description='The position from which the next query starts.', example='d09e2b63e1b12d905b7080ff70', position='Query'),
  regionId: string(name='regionId', description='Region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', description='Resource group ID.', example='rg-acfmx7caj******', position='Query'),
  resourceId?: string(name='resourceId', description='List of resource IDs, in JSON format.', example='["rmq-cn-pe334n08h08"]', position='Query'),
  resourceType: string(name='resourceType', description='Resource type.

This parameter is required.', example='instance', position='Query'),
  tag?: string(name='tag', description='List of tags, in JSON format.', example='[{"key": "rmq-test", "value": "test"}]', position='Query'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='code', description='Error code', example='Topic.NotFound'),
  data?: {
    nextToken?: string(name='nextToken', description='The position from which the next query starts.', example='d09e2b63e1b12d905b7080ff70'),
    requestId?: string(name='requestId', description='Request ID.', example='F00C6A70-C782-5DD6-9D11-0CFC710100C7'),
    tagResources?: [ 
      {
        aliUid?: long(name='aliUid', description='UID of the resource owner.', example='1876441048322426'),
        category?: string(name='category', description='Tag category.', example='custom'),
        resourceId?: string(name='resourceId', description='Resource ID.', example='rmq-cn-pe334n08h08'),
        resourceType?: string(name='resourceType', description='Resource type.', example='instance'),
        scope?: string(name='scope', description='Visibility scope.', example='public'),
        tagKey?: string(name='tagKey', description='Tag key.', example='key'),
        tagValue?: string(name='tagValue', description='Tag value.', example='value'),
      }
    ](name='tagResources', description='Resource tag relationships.'),
  }(name='data', description='Return result'),
  dynamicCode?: string(name='dynamicCode', description='Dynamic error code', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='Dynamic error message', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='HTTP status code', example='200'),
  message?: string(name='message', description='Error message', example='The topic already exists.'),
  requestId?: string(name='requestId', description='Request ID', example='F00C6A70-C782-5DD6-9D11-0CFC710100C7'),
  success?: boolean(name='success', description='Whether the operation was successful', example='true'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/resourceTag/list', 'json', false, 'json', request);
}

model ListTopicSubscriptionsRequest {
  instanceId: string(name='instanceId', description='The ID of the ApsaraMQ for RocketMQ instance.

This parameter is required.', example='rmq-cn-zpr34udri0w', position='Path'),
  topicName: string(name='topicName', description='The name of the topic on the ApsaraMQ for RocketMQ instance.

This parameter is required.', example='dev4-HMH_INSURANCE_NOMAL_TOPIC', position='Path'),
}

model ListTopicSubscriptionsResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: [ 
    {
      consistency?: string(name='consistency', description='Indicates whether message consumption is consistent. Valid values:

*   false: Unconsumed messages exist in the consumer group.
*   true: No unconsumed message exists in the consumer group.', example='true'),
      consumerGroupId?: string(name='consumerGroupId', description='The consumer group ID.', example='CID-TEST'),
      filterExpression?: string(name='filterExpression', description='The filter expression.', example='*'),
      filterExpressionType?: string(name='filterExpressionType', description='The type of the filter expression. Valid values: SQL, TAG, and UNSPECIFIED. The value SQL indicates that messages are filtered by using SQL expressions. The value TAG indicates that messages are filtered by using tags. The value UNSPECIFIED indicates that no filter expression type is specified.', example='SQL'),
      messageModel?: string(name='messageModel', description='The consumption mode. Valid values: BROADCASTING and CLUSTERING.', example='BROADCASTING'),
      subscriptionStatus?: string(name='subscriptionStatus', description='The subscription status. Valid values: ONLINE and OFFLINE.', example='ONLINE'),
      topicName?: string(name='topicName', description='The topic name.', example='topic_test'),
    }
  ](name='data', description='The returned data.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='Topic'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='92A9BE4E-B794-50C8-979C-0456E4D32943'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListTopicSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicSubscriptionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopicSubscriptions  ListTopicSubscriptionsRequest
  * @return ListTopicSubscriptionsResponse
 */
async function listTopicSubscriptions(request: ListTopicSubscriptionsRequest): ListTopicSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopicSubscriptions', 'GET', '/instances/{instanceId}/topics/{topicName}/subscriptions', 'json', false, 'json', request);
}

model ListTopicsRequest {
  instanceId: string(name='instanceId', description='The ID of the instance that contains the topics.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  filter?: string(name='filter', description='The condition that you want to use to filter topics in the instance. If you leave this parameter empty, all topics in the instance are queried.', example='topic_test', position='Query'),
  messageTypes?: [ string ](name='messageTypes', description='The message types of the topics.', shrink='simple', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='3', minimum=10, maximum=10000, position='Query'),
}

model ListTopicsResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        createTime?: string(name='createTime', description='The time when the topic was created.', example='2022-08-01 20:05:50'),
        instanceId?: string(name='instanceId', description='The ID of the instance.', example='rmq-cn-7e22ody****'),
        maxSendTps?: long(name='maxSendTps'),
        messageType?: string(name='messageType', description='The message type of the topic.

Valid values:

*   TRANSACTION

    <!-- -->

    :

    <!-- -->

    transactional message

    <!-- -->

*   FIFO

    <!-- -->

    :

    <!-- -->

    ordered message

    <!-- -->

*   DELAY

    <!-- -->

    :

    <!-- -->

    scheduled or delayed message

    <!-- -->

*   NORMAL

    <!-- -->

    :

    <!-- -->

    normal message

    <!-- -->', example='NORMAL'),
        regionId?: string(name='regionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='remark', description='The remarks on the topic.', example='This is the remark for test.'),
        status?: string(name='status', description='The state of the topic.

Valid values:

*   RUNNING

    <!-- -->

    : The topic is

    <!-- -->

    running

    <!-- -->

    .

*   CREATING

    <!-- -->

    : The topic is

    <!-- -->

    being created

    <!-- -->

    .', example='RUNNING'),
        topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
        updateTime?: string(name='updateTime', description='The time when the topic was last updated.', example='2022-08-01 20:05:50'),
      }
    ](name='list', description='The paginated data.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries returned per page.', example='3'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The result data that is returned.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model ListTopicsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopics  ListTopicsRequest
  * @return ListTopicsResponse
 */
async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTopics', 'GET', '/instances/{instanceId}/topics', 'json', false, 'json', request);
}

model ListTracesRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-tl32upjeb08', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='topic_hpms_product_price_change', position='Path'),
  endTime: string(name='endTime', description='The end of the time range to query.

This parameter is required.', example='2023-05-19 10:10:09', position='Query'),
  messageId?: string(name='messageId', description='The message ID.

This parameter is required if you set queryType to MESSAGE_ID.', example='0100163E0EC1F1965C04C7906700000000', position='Query'),
  messageKey?: string(name='messageKey', description='The message key.

This parameter is required if you set queryType to MESSAGE_ID.', example='order_ceating', position='Query'),
  pageNumber: int32(name='pageNumber', description='The page number.

This parameter is required.', example='1', minimum=1, maximum=100000000, position='Query'),
  pageSize: int32(name='pageSize', description='The number of entries per page.

This parameter is required.', example='10', minimum=1, maximum=10000, position='Query'),
  queryType: string(name='queryType', description='The query type.

Valid values:

*   MESSAGE_ID
*   MESSAGE_KEY
*   TOPIC

This parameter is required.', example='MESSAGE_ID', position='Query'),
  startTime: string(name='startTime', description='The beginning of the time range to query.

This parameter is required.', example='2023-05-10 10:42:11', position='Query'),
}

model ListTracesResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: {
    list?: [ 
      {
        bornTime?: string(name='bornTime', description='Message born time.', example='2023-03-22 12:17:08'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='rmq-cn-7e22ody****'),
        messageId?: string(name='messageId', description='Message id.', example='7F00000100207A4F0F294A938F7807AE'),
        messageKeys?: [ string ](name='messageKeys', description='Message keys.'),
        messageTag?: string(name='messageTag', description='Message tag.', example='xx'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
        topicName?: string(name='topicName', description='The name of the topic.', example='topic_test'),
      }
    ](name='list', description='Trace list.'),
    pageNumber?: long(name='pageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='1'),
  }(name='data', description='The returned result.'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='InstanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='Id of the request', example='EDFF77E1-1ED1-5389-B6A8-651D9433BBE5'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model ListTracesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTracesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTraces  ListTracesRequest
  * @return ListTracesResponse
 */
async function listTraces(request: ListTracesRequest): ListTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTraces', 'GET', '/instances/{instanceId}/topics/{topicName}/traces', 'json', false, 'json', request);
}

model ResetConsumeOffsetRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-tl32ue44x0g', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The consumer group ID.

This parameter is required.', example='dolphin_status', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='AMZN_REPORT_TOPIC', position='Path'),
  resetTime?: string(name='resetTime', description='The time when the consumer offset is reset.', example='2023-03-22 12:17:08', position='Body'),
  resetType?: string(name='resetType', description='The method that is used to reset the consumer offset. Valid values: LATEST_OFFSET and SPECIFIED_TIME.', example='LATEST_OFFSET', position='Body'),
}

model ResetConsumeOffsetResponseBody = {
  code?: string(name='code', description='The returned error code.', example='MissingInstanceId'),
  dynamicCode?: string(name='dynamicCode', description='The returned dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The returned dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The returned HTTP status code.', example='200'),
  message?: string(name='message', description='The returned error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='F9A95891-EAD4-5A2B-8A30-676CD18921AF'),
  success?: boolean(name='success', description='Indicates whether the request is successful.', example='true'),
}

model ResetConsumeOffsetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetConsumeOffsetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetConsumeOffset  ResetConsumeOffsetRequest
  * @return ResetConsumeOffsetResponse
 */
async function resetConsumeOffset(request: ResetConsumeOffsetRequest): ResetConsumeOffsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResetConsumeOffset', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}/consumeOffsets/{topicName}', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='regionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='resourceId', description='The resource IDs, in the JSON format.

This parameter is required.', example='rmq-cn-pe3355cs707', position='Query'),
  resourceType: string(name='resourceType', description='The type of resource.

Set this parameter to **instance**. The value of this parameter cannot be changed.

This parameter is required.', example='instance', position='Query'),
  tag: string(name='tag', description='tag, in JSON format.

This parameter is required.', example='[{"key": "rmq-test", "value": "test"}]', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error code.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='0B962390-D84B-5D44-8C11-79DF40299D41'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/resourceTag/create', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', description='Whether to delete all tags.', example='true', position='Query'),
  regionId: string(name='regionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='resourceId', description='The resource IDs, in the JSON format.

This parameter is required.', example='rmq-cn-pe3355cs707', position='Query'),
  resourceType: string(name='resourceType', description='The type of resource.

Set this parameter to **instance**. The value of this parameter cannot be changed.

This parameter is required.', example='instance', position='Query'),
  tagKey?: string(name='tagKey', description='The keys of tags.', example='["key1", "key2"]', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='A07B41BD-6DD3-5349-9E76-00303DF04BBE'),
  success?: boolean(name='success', description='Indicates whether the call was successful.', example='true'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'DELETE', '/resourceTag/delete', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the consumer group belongs.

This parameter is required.', example='rmq-cn-7e22on9****', position='Path'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.

This parameter is required.', example='CID-TEST', position='Path'),
  consumeRetryPolicy: {
    deadLetterTargetTopic?: string(name='deadLetterTargetTopic', description='The dead-letter topic.

If a consumer still fails to consume a message after the message is retried for a specified number of times, the message is delivered to a dead-letter topic for subsequent business recovery or troubleshooting. For more information, see [Consumption retry and dead-letter messages](https://help.aliyun.com/document_detail/440356.html).', example='DLQ_mqtest'),
    maxRetryTimes?: int32(name='maxRetryTimes', description='The maximum number of retries.', example='16'),
    retryPolicy: string(name='retryPolicy', description='The retry policy. For more information, see [Message retry](https://help.aliyun.com/document_detail/440356.html).

Valid values:

*   FixedRetryPolicy: Failed messages are retried at a fixed interval.
*   DefaultRetryPolicy: Failed messages are retried at incremental intervals as the number of retries increases.

This parameter is required.', example='DefaultRetryPolicy'),
  }(name='consumeRetryPolicy', description='The new consumption retry policy that you want to configure for the consumer group. For more information, see [Consumption retry](https://help.aliyun.com/document_detail/440356.html).

This parameter is required.', position='Body'),
  deliveryOrderType: string(name='deliveryOrderType', description='The new message delivery order of the consumer group.

Valid values:

*   Concurrently: concurrent delivery
*   Orderly: ordered delivery

This parameter is required.', example='Concurrently', position='Body'),
  maxReceiveTps?: long(name='maxReceiveTps', position='Body'),
  remark?: string(name='remark', description='The new remarks on the consumer group.', example='This is the remark for test.', position='Body'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidDeliveryOrderType'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='DeliveryOrderType'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='deliveryOrderType'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter deliveryOrderType is invalid.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='C7F94090-3358-506A-97DC-34BC803C****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConsumerGroupResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of UpdateConsumerGroup  UpdateConsumerGroupRequest
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PATCH', '/instances/{instanceId}/consumerGroups/{consumerGroupId}', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance whose basic information and specifications you want to update.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  aclInfo?: {
    aclTypes?: [ string ](name='aclTypes', description='The authentication type of the instance.'),
    defaultVpcAuthFree?: boolean(name='defaultVpcAuthFree', description='Indicates whether the authentication-free in VPCs feature is enabled.
Indicates whether the authentication-free in VPCs feature is enabled.
Valid values:
- true
- false', example='false'),
  }(name='aclInfo', description='The access control list for the instance.', position='Body'),
  instanceName?: string(name='instanceName', description='The updated name of the instance.', example='test_instance', position='Body'),
  networkInfo?: {
    internetInfo?: {
      ipWhitelist?: [ string ](name='ipWhitelist', description='The whitelist that includes the IP addresses that are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.

*   If you do not configure an IP address whitelist, all CIDR blocks are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.
*   If you configure an IP address whitelist, only the IP addresses in the whitelist are allowed to access the ApsaraMQ for RocketMQ broker over the Internet.'),
    }(name='internetInfo', description='The information about the Internet over which the instance is accessed. This parameter takes effect only if the Internet access feature is enabled for the instance.'),
  }(name='networkInfo', description='The updated network information about the instance.', position='Body'),
  productInfo?: {
    autoScaling?: boolean(name='autoScaling', description='Specifies whether to enable the elastic transactions per second (TPS) feature for the instance.

Valid values:

*   true
*   false

After you enable the elastic TPS feature for an ApsaraMQ for RocketMQ instance, you can use a specific number of TPS that exceeds the specification limit. You are charged for using the elastic TPS feature. For more information, see [Computing fees](https://help.aliyun.com/document_detail/427237.html).

>  The elastic TPS feature is supported only by specific instance editions. For more information, see [Instance editions](https://help.aliyun.com/document_detail/444715.html).', example='true'),
    messageRetentionTime?: int32(name='messageRetentionTime', description='The retention period of messages. Unit: hours.

For information about the valid values of this parameter, see the "Limits on resource quotas" section of the [Limits](https://help.aliyun.com/document_detail/440347.html) topic.

ApsaraMQ for RocketMQ supports serverless scaling of message storage. You are charged storage fees based on your actual storage usage. You can change the retention period of messages to manage storage capacity. For more information, see [Storage fees](https://help.aliyun.com/document_detail/427238.html).', example='72'),
    sendReceiveRatio?: float(name='sendReceiveRatio', description='The ratio of the number of messages that you can send to the number of messages that you can receive on the instance.

Value values: 0.25 to 1.', example='0.5'),
    traceOn?: boolean(name='traceOn', description='Specifies whether to enable the message trace feature.

*   true
*   false

This parameter is not in use. By default, the message trace feature is enabled for ApsaraMQ for RocketMQ instances, regardless of whether this parameter is configured.', example='true'),
  }(name='productInfo', description='Additional configurations of the instance.', position='Body'),
  remark?: string(name='remark', description='The updated description of the instance.', example='This is the remark for test.', position='Body'),
}

model UpdateInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AA87DE09-DA44-52F4-9515-78B1B607****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @description > API operations provided by Alibaba Cloud are used to manage and query resources of Alibaba Cloud services. We recommend that you integrate these API operations only in management systems. Do not use these API operations in the core system of messaging services. Otherwise, system risks may occur.
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'PATCH', '/instances/{instanceId}', 'json', false, 'json', request);
}

model UpdateInstanceAccountRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  username?: string(name='username', description='The username of the account.', example='test', position='Path'),
  accountStatus?: string(name='accountStatus', description='The status of the account.

Valid values:

*   DISABLE
*   ENABLE', example='ENABLE', position='Query'),
  password?: string(name='password', description='The password of the account.', example='test', position='Query'),
}

model UpdateInstanceAccountResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='Instance.NotFound'),
  data?: boolean(name='data', description='The returned result.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceAccount  UpdateInstanceAccountRequest
  * @return UpdateInstanceAccountResponse
 */
async function updateInstanceAccount(request: UpdateInstanceAccountRequest): UpdateInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceAccount', 'PATCH', '/instances/{instanceId}/accounts/{username}', 'json', false, 'json', request);
}

model UpdateInstanceAclRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  username: string(name='username', description='The username.

This parameter is required.', example='test', position='Path'),
  actions?: string(name='actions', description='The following items describe the types of permissions that can be granted based on the resource type:

*   Topic: Pub, Sub, and Pub|Sub
*   Consumer group: Sub

Valid values:

*   SUB: subscribe
*   Pub|Sub: publish and subscribe
*   Pub: publish', example='Pub', position='Body'),
  decision?: string(name='decision', description='The decision result of the authorization.

Valid values:

*   Deny
*   Allow', example='Allow', position='Body'),
  ipWhitelists?: [ string ](name='ipWhitelists', description='The IP address whitelists.', position='Body'),
  resourceName: string(name='resourceName', description='The name of the resource on which you want to grant permissions.

This parameter is required.', example='test', position='Body'),
  resourceType: string(name='resourceType', description='The type of the resource on which you want to grant permissions.

Valid values:

*   Group
*   Topic

This parameter is required.', example='Topic', position='Body'),
}

model UpdateInstanceAclResponseBody = {
  accessDeniedDetail?: string(name='accessDeniedDetail', description='The details about the access denial. This parameter is returned only if the access is denied because the Resource Access Management (RAM) user does not have the required permissions.', example='xxx'),
  code?: string(name='code', description='The error code.', example='MissingInstanceId'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='C115601B-8736-5BBF-AC99-7FEAE1245A80'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateInstanceAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceAcl  UpdateInstanceAclRequest
  * @return UpdateInstanceAclResponse
 */
async function updateInstanceAcl(request: UpdateInstanceAclRequest): UpdateInstanceAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceAcl', 'PATCH', '/instances/{instanceId}/acl/account/{username}', 'json', false, 'json', request);
}

model UpdateTopicRequest {
  instanceId: string(name='instanceId', description='The ID of the instance to which the topic belongs.

This parameter is required.', example='rmq-cn-7e22ody****', position='Path'),
  topicName: string(name='topicName', description='The name of the topic.

This parameter is required.', example='topic_test', position='Path'),
  maxSendTps?: long(name='maxSendTps', position='Body'),
  remark?: string(name='remark', description='The new remarks on the topic.', example='This is the remark for test.', position='Body'),
}

model UpdateTopicResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The result data that is returned.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='TopicName'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='topicName'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='400'),
  message?: string(name='message', description='The error message.', example='The topic cannot be found.'),
  requestId?: string(name='requestId', description='The ID of the request. The system generates a unique ID for each request. You can troubleshoot issues based on the request ID.', example='AF9A8B10-C426-530F-A0DD-96320B39****'),
  success?: boolean(name='success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTopic  UpdateTopicRequest
  * @return UpdateTopicResponse
 */
async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTopic', 'PATCH', '/instances/{instanceId}/topics/{topicName}', 'json', false, 'json', request);
}

model VerifyConsumeMessageRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-i7m2vc1vx01', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='delay_topic', position='Path'),
  messageId: string(name='messageId', description='The message ID.

This parameter is required.', example='A9FE190A59AA421ED014743DFDBF017D', position='Path'),
  clientId: string(name='clientId', description='The client ID.

This parameter is required.', example='zeekr-settlement-server-dc555456f-v2lcg@1@1@qfvorazqns', position='Query'),
  consumerGroupId: string(name='consumerGroupId', description='The ID of the consumer group.

This parameter is required.', example='TEST_FINANCE_STOCK_OUT_GROUP', position='Query'),
}

model VerifyConsumeMessageResponseBody = {
  code?: string(name='code', description='The error code.', example='Topic.NotFound'),
  data?: boolean(name='data', description='The returned data.', example='true'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='InstanceId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='instanceId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Parameter instanceId is mandatory for this action .'),
  requestId?: string(name='requestId', description='The request ID.', example='5304143F-AB0E-5AB4-A227-7C5489216FD5'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model VerifyConsumeMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyConsumeMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyConsumeMessage  VerifyConsumeMessageRequest
  * @return VerifyConsumeMessageResponse
 */
async function verifyConsumeMessage(request: VerifyConsumeMessageRequest): VerifyConsumeMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VerifyConsumeMessage', 'POST', '/instances/{instanceId}/topics/{topicName}/messages/{messageId}/action/verifyConsume', 'json', false, 'json', request);
}

model VerifySendMessageRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='rmq-cn-wwo32kqfm10', position='Path'),
  topicName: string(name='topicName', description='The topic name.

This parameter is required.', example='card_status_topic', position='Path'),
  message?: string(name='message', description='The message body.', example='successful', position='Body'),
  messageKey?: string(name='messageKey', description='The message key.', example='xx', position='Body'),
  messageTag?: string(name='messageTag', description='The message tag.', example='xx', position='Body'),
}

model VerifySendMessageResponseBody = {
  code?: string(name='code', description='The error code.', example='InvalidConsumerGroupId'),
  data?: string(name='data', description='The returned data.', example='0A64228900207A4F0F2931A4E0D40BE5'),
  dynamicCode?: string(name='dynamicCode', description='The dynamic error code.', example='ConsumerGroupId'),
  dynamicMessage?: string(name='dynamicMessage', description='The dynamic error message.', example='consumerGroupId'),
  httpStatusCode?: int32(name='httpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='The instance cannot be found.'),
  requestId?: string(name='requestId', description='The request ID.', example='3BD2C19B-66DE-59C7-B2F6-FD1BE21DC8C1'),
  success?: boolean(name='success', description='Indicates whether the request was successful.', example='true'),
}

model VerifySendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifySendMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifySendMessage  VerifySendMessageRequest
  * @return VerifySendMessageResponse
 */
async function verifySendMessage(request: VerifySendMessageRequest): VerifySendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VerifySendMessage', 'POST', '/instances/{instanceId}/topics/{topicName}/messages', 'json', false, 'json', request);
}

model DataTopicLagMapValue = {
  readyCount?: long(name='readyCount', description='Ready message count', example='1'),
  inflightCount?: long(name='inflightCount', description='The number of messages being consumed.', example='1'),
  deliveryDuration?: long(name='deliveryDuration', description='Delivery delay time, in seconds', example='12'),
}

