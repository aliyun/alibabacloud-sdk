/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'metaspace';
  @version = '2022-03-07';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyCoordinationWithCodeRequest {
  coordinationCode?: string(name='CoordinationCode', example='PA3MU***', position='Body'),
  loginRegionId?: string(name='LoginRegionId', example='cn-hangzhou', position='Body'),
  loginToken?: string(name='LoginToken', example='v2c4e2ef03d62******', position='Body'),
  sessionId?: string(name='SessionId', example='09e2b2e6-3181******', position='Body'),
  uuid?: string(name='Uuid', example='A8B35215993FBF283F28D61******', position='Body'),
}

model ApplyCoordinationWithCodeResponseBody = {
  data?: {
    coId?: string(name='CoId', example='co-0ad0f3p4n2******'),
    coordinateStatus?: string(name='CoordinateStatus', example='COORDINATING'),
    coordinateTicket?: string(name='CoordinateTicket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQ******'),
    coordinatorAliUid?: long(name='CoordinatorAliUid', example='1126819517******'),
    coordinatorUserId?: string(name='CoordinatorUserId', example='bob'),
    ownerAliUid?: long(name='OwnerAliUid', example='1126819517******'),
    ownerUserId?: string(name='OwnerUserId', example='alice'),
    resourceId?: string(name='ResourceId', example='ecd-3vv4mf8zxg******'),
    resourceName?: string(name='ResourceName', example='demo-desktop'),
    resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
    resourceType?: string(name='ResourceType', example='CloudDesktop'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model ApplyCoordinationWithCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCoordinationWithCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyCoordinationWithCode  ApplyCoordinationWithCodeRequest
  * @return ApplyCoordinationWithCodeResponse
 */
async function applyCoordinationWithCode(request: ApplyCoordinationWithCodeRequest): ApplyCoordinationWithCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyCoordinationWithCode', 'POST', '/', 'json', true, 'form', request);
}

model EndAllCoordinationByOwnerRequest {
  loginRegionId?: string(name='LoginRegionId', example='cn-hangzhou', position='Body'),
  loginToken?: string(name='LoginToken', example='v2c4e2ef03d62******', position='Body'),
  resourceId?: string(name='ResourceId', example='ecd-68a7ddrt0******', position='Body'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou', position='Body'),
  resourceType?: string(name='ResourceType', example='CloudDesktop', position='Body'),
  sessionId?: string(name='SessionId', example='09e2b2e6-3181******', position='Body'),
}

model EndAllCoordinationByOwnerResponseBody = {
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model EndAllCoordinationByOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EndAllCoordinationByOwnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EndAllCoordinationByOwner  EndAllCoordinationByOwnerRequest
  * @return EndAllCoordinationByOwnerResponse
 */
async function endAllCoordinationByOwner(request: EndAllCoordinationByOwnerRequest): EndAllCoordinationByOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EndAllCoordinationByOwner', 'POST', '/', 'json', true, 'form', request);
}

model GenerateCoordinationCodeRequest {
  loginRegionId?: string(name='LoginRegionId', example='cn-hangzhou', position='Body'),
  loginToken?: string(name='LoginToken', example='v2c4e2ef03d62******', position='Body'),
  resourceId?: string(name='ResourceId', example='ecd-68a7ddrt0******', position='Body'),
  resourceName?: string(name='ResourceName', example='demo-desktop', position='Body'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou', position='Body'),
  resourceType?: string(name='ResourceType', example='CloudDesktop', position='Body'),
  sessionId?: string(name='SessionId', example='09e2b2e6-3181******', position='Body'),
}

model GenerateCoordinationCodeResponseBody = {
  coordinationCode?: string(name='CoordinationCode', example='PA3MU***'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model GenerateCoordinationCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCoordinationCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateCoordinationCode  GenerateCoordinationCodeRequest
  * @return GenerateCoordinationCodeResponse
 */
async function generateCoordinationCode(request: GenerateCoordinationCodeRequest): GenerateCoordinationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateCoordinationCode', 'POST', '/', 'json', true, 'form', request);
}

