/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Drds';
  @version = '2019-01-23';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'drds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'drds.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'drds.aliyuncs.com',
    cn-beijing-finance-pop = 'drds.aliyuncs.com',
    cn-beijing-gov-1 = 'drds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'drds.aliyuncs.com',
    cn-chengdu = 'drds.aliyuncs.com',
    cn-edge-1 = 'drds.aliyuncs.com',
    cn-fujian = 'drds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'drds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'drds.aliyuncs.com',
    cn-hangzhou-finance = 'drds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'drds.aliyuncs.com',
    cn-hangzhou-test-306 = 'drds.aliyuncs.com',
    cn-hongkong-finance-pop = 'drds.aliyuncs.com',
    cn-qingdao-nebula = 'drds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'drds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'drds.aliyuncs.com',
    cn-shanghai-inner = 'drds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'drds.aliyuncs.com',
    cn-shenzhen-inner = 'drds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'drds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'drds.aliyuncs.com',
    cn-wuhan = 'drds.aliyuncs.com',
    cn-yushanfang = 'drds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'drds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'drds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'drds.aliyuncs.com',
    eu-central-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'drds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'drds.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'drds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ChangeAccountPasswordRequest {
  accountName: string(name='AccountName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  password: string(name='Password', position='Query'),
}

model ChangeAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeAccountPasswordResponseBody(name='body'),
}

async function changeAccountPassword(request: ChangeAccountPasswordRequest): ChangeAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ChangeInstanceAzoneRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  drdsRegionId: string(name='DrdsRegionId', position='Query'),
  originAzoneId: string(name='OriginAzoneId', position='Query'),
  targetAzoneId: string(name='TargetAzoneId', position='Query'),
}

model ChangeInstanceAzoneResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeInstanceAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeInstanceAzoneResponseBody(name='body'),
}

async function changeInstanceAzone(request: ChangeInstanceAzoneRequest): ChangeInstanceAzoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeInstanceAzone', 'POST', '/', 'json', false, 'json', request);
}

model CheckDrdsDbNameRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model CheckDrdsDbNameResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CheckDrdsDbNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDrdsDbNameResponseBody(name='body'),
}

async function checkDrdsDbName(request: CheckDrdsDbNameRequest): CheckDrdsDbNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDrdsDbName', 'POST', '/', 'json', false, 'json', request);
}

model CheckExpandStatusRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model CheckExpandStatusResponseBody = {
  data?: {
    isActive?: boolean(name='IsActive'),
    msg?: string(name='Msg'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckExpandStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckExpandStatusResponseBody(name='body'),
}

async function checkExpandStatus(request: CheckExpandStatusRequest): CheckExpandStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckExpandStatus', 'POST', '/', 'json', false, 'json', request);
}

model CheckSqlAuditEnableStatusRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model CheckSqlAuditEnableStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model CheckSqlAuditEnableStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSqlAuditEnableStatusResponseBody(name='body'),
}

async function checkSqlAuditEnableStatus(request: CheckSqlAuditEnableStatusRequest): CheckSqlAuditEnableStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSqlAuditEnableStatus', 'POST', '/', 'json', false, 'json', request);
}

model CreateDrdsDBRequest {
  accountName?: string(name='AccountName', position='Query'),
  dbInstType?: string(name='DbInstType', position='Query'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating', position='Query'),
  dbName?: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  encode?: string(name='Encode', position='Query'),
  instDbName?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName', position='Query'),
  password?: string(name='Password', position='Query'),
  rdsInstance?: [ string ](name='RdsInstance', position='Query'),
  rdsSuperAccount?: [ 
    {
      accountName?: string(name='AccountName'),
      dbInstanceId?: string(name='DbInstanceId'),
      password?: string(name='Password'),
    }
  ](name='RdsSuperAccount', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBResponseBody(name='body'),
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model CreateDrdsInstanceRequest {
  clientToken: string(name='ClientToken', position='Query'),
  description: string(name='Description', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  instanceSeries: string(name='InstanceSeries', position='Query'),
  isAutoRenew?: boolean(name='IsAutoRenew', position='Query'),
  masterInstId?: string(name='MasterInstId', position='Query'),
  mySQLVersion?: int32(name='MySQLVersion', position='Query'),
  payType: string(name='PayType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  quantity: int32(name='Quantity', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  specification: string(name='Specification', position='Query'),
  type: string(name='Type', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  vswitchId?: string(name='VswitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
  isHa?: boolean(name='isHa', position='Query'),
}

model CreateDrdsInstanceResponseBody = {
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceIdList?: [ string ](name='drdsInstanceIdList')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsInstanceResponseBody(name='body'),
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  dbPrivilege: [ 
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  password: string(name='Password', position='Query'),
}

model CreateInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceAccountResponseBody(name='body'),
}

async function createInstanceAccount(request: CreateInstanceAccountRequest): CreateInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceInternetAddressRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreateInstanceInternetAddressResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceInternetAddressResponseBody(name='body'),
}

async function createInstanceInternetAddress(request: CreateInstanceInternetAddressRequest): CreateInstanceInternetAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceInternetAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderForRdsRequest {
  params: string(name='Params', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreateOrderForRdsResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOrderForRdsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderForRdsResponseBody(name='body'),
}

async function createOrderForRds(request: CreateOrderForRdsRequest): CreateOrderForRdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrderForRds', 'POST', '/', 'json', false, 'json', request);
}

model CreateShardTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceTableName: string(name='SourceTableName', position='Query'),
  targetTableName: string(name='TargetTableName', minLength=1, maxLength=100, position='Query'),
  taskType: string(name='TaskType', position='Query'),
}

model CreateShardTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShardTaskResponseBody(name='body'),
}

async function createShardTask(request: CreateShardTaskRequest): CreateShardTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateShardTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackMenuRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeBackMenuResponseBody = {
  list?: {
    list?: [ 
    {
      menuName?: string(name='MenuName'),
      support?: boolean(name='Support'),
    }
  ](name='list')
  }(name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackMenuResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackMenuResponseBody(name='body'),
}

async function describeBackMenu(request: DescribeBackMenuRequest): DescribeBackMenuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackMenu', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupDbsRequest {
  backupId?: string(name='BackupId', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  preferredRestoreTime?: string(name='PreferredRestoreTime', position='Query'),
}

model DescribeBackupDbsResponseBody = {
  dbNames?: {
    dbName?: [ string ](name='dbName')
  }(name='DbNames'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDbsResponseBody(name='body'),
}

async function describeBackupDbs(request: DescribeBackupDbsRequest): DescribeBackupDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupDbs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupLocalRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeBackupLocalResponseBody = {
  backupPolicyDO?: {
    backupAppName?: string(name='BackupAppName'),
    backupDbName?: string(name='BackupDbName'),
    backupLevel?: string(name='BackupLevel'),
    backupLog?: string(name='BackupLog'),
    backupMode?: string(name='BackupMode'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
  }(name='BackupPolicyDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupLocalResponseBody(name='body'),
}

async function describeBackupLocal(request: DescribeBackupLocalRequest): DescribeBackupLocalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupLocal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDO?: {
    backupAppName?: string(name='BackupAppName'),
    backupDbName?: string(name='BackupDbName'),
    backupLevel?: string(name='BackupLevel'),
    backupLog?: string(name='BackupLog'),
    backupMode?: string(name='BackupMode'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
  }(name='BackupPolicyDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSetsRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupSetsResponseBody = {
  backupSets?: {
    backupSet?: [ 
    {
      backupConsitentTime?: string(name='BackupConsitentTime'),
      backupDbs?: {
        backupDb?: [ string ](name='backupDb')
      }(name='BackupDbs'),
      backupEndTime?: long(name='BackupEndTime'),
      backupLevel?: string(name='BackupLevel'),
      backupMode?: string(name='BackupMode'),
      backupStartTime?: long(name='BackupStartTime'),
      backupTotalSize?: string(name='BackupTotalSize'),
      backupType?: string(name='BackupType'),
      enableRecovery?: boolean(name='EnableRecovery'),
      id?: string(name='Id'),
      status?: long(name='Status'),
    }
  ](name='backupSet')
  }(name='BackupSets'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetsResponseBody(name='body'),
}

async function describeBackupSets(request: DescribeBackupSetsRequest): DescribeBackupSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupTimesRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeBackupTimesResponseBody = {
  requestId?: string(name='RequestId'),
  restoreTime?: {
    endTime?: string(name='EndTime'),
    startTime?: string(name='StartTime'),
  }(name='RestoreTime'),
  success?: boolean(name='Success'),
}

model DescribeBackupTimesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTimesResponseBody(name='body'),
}

async function describeBackupTimes(request: DescribeBackupTimesRequest): DescribeBackupTimesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupTimes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBroadcastTablesRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  query?: string(name='Query', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeBroadcastTablesResponseBody = {
  isShard?: boolean(name='IsShard'),
  list?: [ 
    {
      broadcast?: boolean(name='Broadcast'),
      broadcastType?: string(name='BroadcastType'),
      dbInstType?: int32(name='DbInstType'),
      isShard?: boolean(name='IsShard'),
      status?: int32(name='Status'),
      table?: string(name='Table'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBroadcastTablesResponseBody(name='body'),
}

async function describeBroadcastTables(request: DescribeBroadcastTablesRequest): DescribeBroadcastTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBroadcastTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbInstanceDbsRequest {
  accountName?: string(name='AccountName', position='Query'),
  dbInstType?: string(name='DbInstType', position='Query'),
  dbInstanceId: string(name='DbInstanceId', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  password?: string(name='Password', position='Query'),
}

model DescribeDbInstanceDbsResponseBody = {
  databases?: {
    database?: [ 
    {
      dbName?: string(name='DbName'),
      description?: string(name='Description'),
      status?: int32(name='Status'),
    }
  ](name='Database')
  }(name='Databases'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDbInstanceDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstanceDbsResponseBody(name='body'),
}

async function describeDbInstanceDbs(request: DescribeDbInstanceDbsRequest): DescribeDbInstanceDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbInstanceDbs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbInstancesRequest {
  dbInstType?: string(name='DbInstType', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  search?: string(name='Search', position='Query'),
}

model DescribeDbInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: int32(name='DBInstanceStatus'),
      DBInstanceType?: string(name='DBInstanceType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      readOnlyDBInstanceId?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceId'),
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstance')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstancesResponseBody(name='body'),
}

async function describeDbInstances(request: DescribeDbInstancesRequest): DescribeDbInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDBResponseBody = {
  data?: {
    createTime?: string(name='CreateTime'),
    dbInstType?: string(name='DbInstType'),
    dbName?: string(name='DbName'),
    instRole?: string(name='InstRole'),
    mode?: string(name='Mode'),
    schema?: string(name='Schema'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBResponseBody(name='body'),
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBClusterRequest {
  dbInstanceId: string(name='DbInstanceId', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDBClusterResponseBody = {
  dbInstance?: {
    DBInstanceId?: string(name='DBInstanceId'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    DBNodes?: {
      DBNode?: [ 
      {
        DBNodeId?: string(name='DBNodeId'),
        DBNodeRole?: string(name='DBNodeRole'),
        DBNodeStatus?: string(name='DBNodeStatus'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='DBNode')
    }(name='DBNodes'),
    dbInstType?: string(name='DbInstType'),
    endpoints?: {
      endpoint?: [ 
      {
        endpointId?: string(name='EndpointId'),
        nodeIds?: string(name='NodeIds'),
        readWeight?: int32(name='ReadWeight'),
      }
    ](name='Endpoint')
    }(name='Endpoints'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    expireTime?: string(name='ExpireTime'),
    networkType?: string(name='NetworkType'),
    payType?: string(name='PayType'),
    port?: int32(name='Port'),
    rdsInstType?: string(name='RdsInstType'),
    readMode?: string(name='ReadMode'),
    remainDays?: string(name='RemainDays'),
  }(name='DbInstance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBClusterResponseBody(name='body'),
}

async function describeDrdsDBCluster(request: DescribeDrdsDBClusterRequest): DescribeDrdsDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBIpWhiteListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
}

model DescribeDrdsDBIpWhiteListResponseBody = {
  ipWhiteList?: {
    ip?: [ string ](name='Ip')
  }(name='IpWhiteList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBIpWhiteListResponseBody(name='body'),
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDBIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBsRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDrdsDBsResponseBody = {
  data?: {
    db?: [ 
    {
      createTime?: string(name='CreateTime'),
      dbInstType?: string(name='DbInstType'),
      dbName?: string(name='DbName'),
      mode?: string(name='Mode'),
      schema?: string(name='Schema'),
      status?: string(name='Status'),
    }
  ](name='Db')
  }(name='Data'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBsResponseBody(name='body'),
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDBs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDbInstanceRequest {
  dbInstanceId: string(name='DbInstanceId', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDbInstanceResponseBody = {
  dbInstance?: {
    connectUrl?: string(name='ConnectUrl'),
    DBInstanceId?: string(name='DBInstanceId'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    dbInstType?: string(name='DbInstType'),
    dmInstanceId?: string(name='DmInstanceId'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    expireTime?: string(name='ExpireTime'),
    networkType?: string(name='NetworkType'),
    payType?: string(name='PayType'),
    port?: int32(name='Port'),
    rdsInstType?: string(name='RdsInstType'),
    readOnlyInstances?: {
      readOnlyInstance?: [ 
      {
        connectUrl?: string(name='ConnectUrl'),
        DBInstanceId?: string(name='DBInstanceId'),
        DBInstanceStatus?: string(name='DBInstanceStatus'),
        dbInstType?: string(name='DbInstType'),
        dmInstanceId?: string(name='DmInstanceId'),
        engine?: string(name='Engine'),
        engineVersion?: string(name='EngineVersion'),
        expireTime?: string(name='ExpireTime'),
        networkType?: string(name='NetworkType'),
        payType?: string(name='PayType'),
        port?: int32(name='Port'),
        rdsInstType?: string(name='RdsInstType'),
        readWeight?: int32(name='ReadWeight'),
        remainDays?: string(name='RemainDays'),
        versionAction?: int32(name='VersionAction'),
      }
    ](name='ReadOnlyInstance')
    }(name='ReadOnlyInstances'),
    readWeight?: int32(name='ReadWeight'),
    remainDays?: string(name='RemainDays'),
  }(name='DbInstance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstanceResponseBody(name='body'),
}

async function describeDrdsDbInstance(request: DescribeDrdsDbInstanceRequest): DescribeDrdsDbInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDbInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDbInstancesRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeDrdsDbInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      dbInstType?: string(name='DbInstType'),
      dmInstanceId?: string(name='DmInstanceId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstType?: string(name='RdsInstType'),
      readOnlyInstances?: {
        readOnlyInstance?: [ 
        {
          connectUrl?: string(name='ConnectUrl'),
          DBInstanceStatus?: string(name='DBInstanceStatus'),
          dbInstType?: string(name='DbInstType'),
          dmInstanceId?: string(name='DmInstanceId'),
          engine?: string(name='Engine'),
          engineVersion?: string(name='EngineVersion'),
          expireTime?: string(name='ExpireTime'),
          instanceName?: string(name='InstanceName'),
          networkType?: string(name='NetworkType'),
          payType?: string(name='PayType'),
          port?: int32(name='Port'),
          rdsInstType?: string(name='RdsInstType'),
          readWeight?: int32(name='ReadWeight'),
          remainDays?: int32(name='RemainDays'),
        }
      ](name='ReadOnlyInstance')
      }(name='ReadOnlyInstances'),
      readWeight?: int32(name='ReadWeight'),
      remainDays?: int32(name='RemainDays'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstancesResponseBody(name='body'),
}

async function describeDrdsDbInstances(request: DescribeDrdsDbInstancesRequest): DescribeDrdsDbInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDbInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDbRdsNameListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDbRdsNameListResponseBody = {
  instanceNameList?: {
    instanceName?: [ string ](name='InstanceName')
  }(name='InstanceNameList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbRdsNameListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbRdsNameListResponseBody(name='body'),
}

async function describeDrdsDbRdsNameList(request: DescribeDrdsDbRdsNameListRequest): DescribeDrdsDbRdsNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDbRdsNameList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDrdsInstanceResponseBody = {
  data?: {
    commodityCode?: string(name='CommodityCode'),
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    expireDate?: long(name='ExpireDate'),
    instRole?: string(name='InstRole'),
    instanceSeries?: string(name='InstanceSeries'),
    instanceSpec?: string(name='InstanceSpec'),
    label?: string(name='Label'),
    machineType?: string(name='MachineType'),
    masterInstanceId?: string(name='MasterInstanceId'),
    mysqlVersion?: int32(name='MysqlVersion'),
    networkType?: string(name='NetworkType'),
    orderInstanceId?: string(name='OrderInstanceId'),
    productVersion?: string(name='ProductVersion'),
    readOnlyDBInstanceIds?: {
      readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
    }(name='ReadOnlyDBInstanceIds'),
    regionId?: string(name='RegionId'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status'),
    storageType?: string(name='StorageType'),
    type?: string(name='Type'),
    version?: long(name='Version'),
    versionAction?: string(name='VersionAction'),
    vips?: {
      vip?: [ 
      {
        dns?: string(name='Dns'),
        expireDays?: long(name='ExpireDays'),
        port?: string(name='Port'),
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceResponseBody(name='body'),
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceDbMonitorRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDrdsInstanceDbMonitorResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceDbMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceDbMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceLevelTasksRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsInstanceLevelTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      allowCancel?: boolean(name='AllowCancel'),
      errMsg?: string(name='ErrMsg'),
      gmtCreate?: long(name='GmtCreate'),
      progress?: int32(name='Progress'),
      progressDescription?: string(name='ProgressDescription'),
      showProgress?: boolean(name='ShowProgress'),
      targetId?: long(name='TargetId'),
      taskName?: string(name='TaskName'),
      taskPhase?: string(name='TaskPhase'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDrdsInstanceLevelTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceLevelTasksResponseBody(name='body'),
}

async function describeDrdsInstanceLevelTasks(request: DescribeDrdsInstanceLevelTasksRequest): DescribeDrdsInstanceLevelTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceLevelTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceMonitorRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  periodMultiple?: int32(name='PeriodMultiple', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDrdsInstanceMonitorResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      nodeNum?: int32(name='NodeNum'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDrdsInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceVersionRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDrdsInstanceVersionResponseBody = {
  data?: {
    instanceVersion?: string(name='InstanceVersion'),
    newestVersion?: string(name='NewestVersion'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceVersionResponseBody(name='body'),
}

async function describeDrdsInstanceVersion(request: DescribeDrdsInstanceVersionRequest): DescribeDrdsInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstancesRequest {
  description?: string(name='Description', position='Query'),
  expired?: boolean(name='Expired', position='Query'),
  mix?: boolean(name='Mix', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productVersion?: string(name='ProductVersion', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDrdsInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      drdsInstanceId?: string(name='DrdsInstanceId'),
      expireDate?: long(name='ExpireDate'),
      instRole?: string(name='InstRole'),
      instanceSeries?: string(name='InstanceSeries'),
      instanceSpec?: string(name='InstanceSpec'),
      label?: string(name='Label'),
      machineType?: string(name='MachineType'),
      masterInstanceId?: string(name='MasterInstanceId'),
      networkType?: string(name='NetworkType'),
      orderInstanceId?: string(name='OrderInstanceId'),
      productVersion?: string(name='ProductVersion'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      version?: long(name='Version'),
      versionAction?: string(name='VersionAction'),
      vips?: {
        vip?: [ 
        {
          IP?: string(name='IP'),
          port?: string(name='Port'),
          type?: string(name='Type'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
        }
      ](name='Vip')
      }(name='Vips'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDrdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstancesResponseBody(name='body'),
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsParamsRequest {
  dbName?: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  paramLevel: string(name='ParamLevel', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDrdsParamsResponseBody = {
  list?: [ 
    {
      dbName?: string(name='DbName'),
      needRestart?: boolean(name='NeedRestart'),
      paramDefaultValue?: string(name='ParamDefaultValue'),
      paramDesc?: string(name='ParamDesc'),
      paramEnglishName?: string(name='ParamEnglishName'),
      paramLevel?: string(name='ParamLevel'),
      paramName?: string(name='ParamName'),
      paramRanges?: string(name='ParamRanges'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      paramVariableName?: string(name='ParamVariableName'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsParamsResponseBody(name='body'),
}

async function describeDrdsParams(request: DescribeDrdsParamsRequest): DescribeDrdsParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsParams', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsRdsInstancesRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsRdsInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      DBInstanceCPU?: string(name='DBInstanceCPU'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceStorage?: long(name='DBInstanceStorage'),
      dbInstType?: string(name='DbInstType'),
      dmInstanceId?: string(name='DmInstanceId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstType?: string(name='RdsInstType'),
      readWeight?: int32(name='ReadWeight'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsRdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsRdsInstancesResponseBody(name='body'),
}

async function describeDrdsRdsInstances(request: DescribeDrdsRdsInstancesRequest): DescribeDrdsRdsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsRdsInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsShardingDbsRequest {
  dbName: string(name='DbName', position='Query'),
  dbNamePattern?: string(name='DbNamePattern', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model DescribeDrdsShardingDbsResponseBody = {
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  shardingDbs?: {
    shardingDb?: [ 
    {
      blockingTimeout?: int32(name='BlockingTimeout'),
      connectUrl?: string(name='ConnectUrl'),
      connectionProperties?: string(name='ConnectionProperties'),
      dbInstanceId?: string(name='DbInstanceId'),
      dbStatus?: string(name='DbStatus'),
      dbType?: string(name='DbType'),
      groupName?: string(name='GroupName'),
      idleTimeOut?: int32(name='IdleTimeOut'),
      maxPoolSize?: int32(name='MaxPoolSize'),
      minPoolSize?: int32(name='MinPoolSize'),
      preparedStatementCacheSize?: int32(name='PreparedStatementCacheSize'),
      shardingDbName?: string(name='ShardingDbName'),
      userName?: string(name='UserName'),
    }
  ](name='ShardingDb')
  }(name='ShardingDbs'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsShardingDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsShardingDbsResponseBody(name='body'),
}

async function describeDrdsShardingDbs(request: DescribeDrdsShardingDbsRequest): DescribeDrdsShardingDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsShardingDbs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsSlowSqlsRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  exeTime: long(name='ExeTime', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDrdsSlowSqlsResponseBody = {
  items?: {
    item?: [ 
    {
      host?: string(name='Host'),
      responseTime?: long(name='ResponseTime'),
      schema?: string(name='Schema'),
      sendTime?: long(name='SendTime'),
      sql?: string(name='Sql'),
    }
  ](name='Item')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeDrdsSlowSqlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSlowSqlsResponseBody(name='body'),
}

async function describeDrdsSlowSqls(request: DescribeDrdsSlowSqlsRequest): DescribeDrdsSlowSqlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsSlowSqls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsSqlAuditStatusRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsSqlAuditStatusResponseBody = {
  data?: {
    data?: [ 
    {
      dbName?: string(name='DbName'),
      detailed?: string(name='Detailed'),
      enabled?: string(name='Enabled'),
      extraAliUid?: long(name='ExtraAliUid'),
      extraSlsLogStore?: string(name='ExtraSlsLogStore'),
      extraSlsProject?: string(name='ExtraSlsProject'),
      extraWriteEnabled?: boolean(name='ExtraWriteEnabled'),
    }
  ](name='Data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsSqlAuditStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSqlAuditStatusResponseBody(name='body'),
}

async function describeDrdsSqlAuditStatus(request: DescribeDrdsSqlAuditStatusRequest): DescribeDrdsSqlAuditStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsSqlAuditStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsTasksRequest {
  dbName?: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
}

model DescribeDrdsTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      content?: string(name='Content'),
      id?: long(name='Id'),
      state?: string(name='State'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDrdsTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsTasksResponseBody(name='body'),
}

async function describeDrdsTasks(request: DescribeDrdsTasksRequest): DescribeDrdsTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpandLogicTableInfoListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeExpandLogicTableInfoListResponseBody = {
  data?: {
    data?: [ 
    {
      shardDbKey?: string(name='ShardDbKey'),
      shardTbKey?: string(name='ShardTbKey'),
      tableName?: string(name='TableName'),
    }
  ](name='data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeExpandLogicTableInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExpandLogicTableInfoListResponseBody(name='body'),
}

async function describeExpandLogicTableInfoList(request: DescribeExpandLogicTableInfoListRequest): DescribeExpandLogicTableInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpandLogicTableInfoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHotDbListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeHotDbListResponseBody = {
  data?: {
    list?: {
      instanceDb?: [ 
      {
        hotDbList?: {
          data?: [ string ](name='data')
        }(name='HotDbList'),
        instanceName?: string(name='InstanceName'),
      }
    ](name='InstanceDb')
    }(name='List'),
    randomCode?: string(name='RandomCode'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeHotDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHotDbListResponseBody(name='body'),
}

async function describeHotDbList(request: DescribeHotDbListRequest): DescribeHotDbListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHotDbList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstDbLogInfoRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeInstDbLogInfoResponseBody = {
  logTimeRange?: {
    supportLatestTime?: long(name='SupportLatestTime'),
    supportOldestTime?: long(name='SupportOldestTime'),
  }(name='LogTimeRange'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstDbLogInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbLogInfoResponseBody(name='body'),
}

async function describeInstDbLogInfo(request: DescribeInstDbLogInfoRequest): DescribeInstDbLogInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstDbLogInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstDbSlsInfoRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeInstDbSlsInfoResponseBody = {
  auditInfo?: {
    logStore?: string(name='LogStore'),
    project?: string(name='Project'),
  }(name='AuditInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstDbSlsInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbSlsInfoResponseBody(name='body'),
}

async function describeInstDbSlsInfo(request: DescribeInstDbSlsInfoRequest): DescribeInstDbSlsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstDbSlsInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAccountsRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeInstanceAccountsResponseBody = {
  instanceAccounts?: {
    instanceAccount?: [ 
    {
      accountName?: string(name='AccountName'),
      accountType?: int32(name='AccountType'),
      dbPrivileges?: {
        dbPrivilege?: [ 
        {
          dbName?: string(name='DbName'),
          privilege?: string(name='Privilege'),
        }
      ](name='DbPrivilege')
      }(name='DbPrivileges'),
      description?: string(name='Description'),
      host?: string(name='Host'),
    }
  ](name='InstanceAccount')
  }(name='InstanceAccounts'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstanceAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAccountsResponseBody(name='body'),
}

async function describeInstanceAccounts(request: DescribeInstanceAccountsRequest): DescribeInstanceAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSwitchAzoneRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeInstanceSwitchAzoneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    originAzoneId?: string(name='OriginAzoneId'),
    regionId?: string(name='RegionId'),
    switchAble?: boolean(name='SwitchAble'),
    targetAzones?: {
      targetAzone?: [ string ](name='TargetAzone')
    }(name='TargetAzones'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeInstanceSwitchAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchAzoneResponseBody(name='body'),
}

async function describeInstanceSwitchAzone(request: DescribeInstanceSwitchAzoneRequest): DescribeInstanceSwitchAzoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSwitchAzone', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSwitchNetworkRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeInstanceSwitchNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vswitchInfos?: {
        vswitchInfo?: [ 
        {
          azoneId?: string(name='AzoneId'),
          drdsSupported?: boolean(name='DrdsSupported'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
          vswitchName?: string(name='VswitchName'),
        }
      ](name='VswitchInfo')
      }(name='VswitchInfos'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model DescribeInstanceSwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchNetworkResponseBody(name='body'),
}

async function describeInstanceSwitchNetwork(request: DescribeInstanceSwitchNetworkRequest): DescribeInstanceSwitchNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSwitchNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckResultRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribePreCheckResultResponseBody = {
  preCheckResult?: {
    preCheckName?: string(name='PreCheckName'),
    state?: string(name='State'),
    subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        errorMsgParams?: [ string ](name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
        state?: string(name='State'),
      }
    ](name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckResultResponseBody(name='body'),
}

async function describePreCheckResult(request: DescribePreCheckResultRequest): DescribePreCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRDSPerformanceRequest {
  dbInstType?: string(name='DbInstType', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  keys: string(name='Keys', position='Query'),
  rdsInstanceId: string(name='RdsInstanceId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeRDSPerformanceResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      nodeName?: string(name='NodeName'),
      nodeNum?: int32(name='NodeNum'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRDSPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSPerformanceResponseBody(name='body'),
}

async function describeRDSPerformance(request: DescribeRDSPerformanceRequest): DescribeRDSPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRDSPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsCommodityRequest {
  commodityCode: string(name='CommodityCode', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
}

model DescribeRdsCommodityResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsCommodityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsCommodityResponseBody(name='body'),
}

async function describeRdsCommodity(request: DescribeRdsCommodityRequest): DescribeRdsCommodityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsCommodity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsPerformanceSummaryRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  rdsInstanceId: [ string ](name='RdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRdsPerformanceSummaryResponseBody = {
  rdsPerformanceInfos?: [ 
    {
      activeSessions?: int32(name='ActiveSessions'),
      cpu?: float(name='Cpu'),
      iops?: float(name='Iops'),
      rdsId?: string(name='RdsId'),
      spaceUsage?: long(name='SpaceUsage'),
      totalSessions?: int32(name='TotalSessions'),
    }
  ](name='RdsPerformanceInfos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsPerformanceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsPerformanceSummaryResponseBody(name='body'),
}

async function describeRdsPerformanceSummary(request: DescribeRdsPerformanceSummaryRequest): DescribeRdsPerformanceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsPerformanceSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsSuperAccountInstancesRequest {
  dbInstType?: string(name='DbInstType', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  rdsInstance: [ string ](name='RdsInstance', position='Query'),
}

model DescribeRdsSuperAccountInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ string ](name='DbInstance')
  }(name='DbInstances'),
  requestId?: string(name='RequestId'),
}

model DescribeRdsSuperAccountInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsSuperAccountInstancesResponseBody(name='body'),
}

async function describeRdsSuperAccountInstances(request: DescribeRdsSuperAccountInstancesRequest): DescribeRdsSuperAccountInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsSuperAccountInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecycleBinStatusRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRecycleBinStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeRecycleBinStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecycleBinStatusResponseBody(name='body'),
}

async function describeRecycleBinStatus(request: DescribeRecycleBinStatusRequest): DescribeRecycleBinStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecycleBinStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecycleBinTablesRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRecycleBinTablesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime'),
      originalTableName?: string(name='OriginalTableName'),
      tableName?: string(name='TableName'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRecycleBinTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecycleBinTablesResponseBody(name='body'),
}

async function describeRecycleBinTables(request: DescribeRecycleBinTablesRequest): DescribeRecycleBinTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecycleBinTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreOrderRequest {
  backupDbNames?: string(name='BackupDbNames', position='Query'),
  backupId?: string(name='BackupId', position='Query'),
  backupLevel?: string(name='BackupLevel', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  preferredBackupTime?: string(name='PreferredBackupTime', position='Query'),
}

model DescribeRestoreOrderResponseBody = {
  requestId?: string(name='RequestId'),
  restoreOrderDO?: {
    drdsOrderDOList?: {
      drdsOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        instSpec?: string(name='InstSpec'),
        network?: string(name='Network'),
        regionId?: string(name='RegionId'),
        VSwtichId?: string(name='VSwtichId'),
        vpcId?: string(name='VpcId'),
      }
    ](name='DrdsOrderDOList')
    }(name='DrdsOrderDOList'),
    polarOrderDOList?: {
      polarOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        engine?: string(name='Engine'),
        instanceClass?: string(name='InstanceClass'),
        network?: string(name='Network'),
        num?: long(name='Num'),
        regionId?: string(name='RegionId'),
        version?: string(name='Version'),
      }
    ](name='PolarOrderDOList')
    }(name='PolarOrderDOList'),
    rdsOrderDOList?: {
      rdsOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        engine?: string(name='Engine'),
        instanceClass?: string(name='InstanceClass'),
        network?: string(name='Network'),
        num?: long(name='Num'),
        regionId?: string(name='RegionId'),
        version?: string(name='Version'),
      }
    ](name='RdsOrderDOList')
    }(name='RdsOrderDOList'),
  }(name='RestoreOrderDO'),
  success?: boolean(name='Success'),
}

model DescribeRestoreOrderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreOrderResponseBody(name='body'),
}

async function describeRestoreOrder(request: DescribeRestoreOrderRequest): DescribeRestoreOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreOrder', 'POST', '/', 'json', false, 'json', request);
}

model DescribeShardTaskInfoRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceTableName: string(name='SourceTableName', position='Query'),
  targetTableName: string(name='TargetTableName', minLength=1, maxLength=100, position='Query'),
}

model DescribeShardTaskInfoResponseBody = {
  data?: {
    expired?: string(name='Expired'),
    full?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='Full'),
    fullCheck?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='FullCheck'),
    fullRevise?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='FullRevise'),
    increment?: {
      delay?: int32(name='Delay'),
      startTime?: string(name='StartTime'),
      tps?: int32(name='Tps'),
    }(name='Increment'),
    progress?: string(name='Progress'),
    review?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='Review'),
    sourceTableName?: string(name='SourceTableName'),
    stage?: string(name='Stage'),
    status?: string(name='Status'),
    targetTableName?: string(name='TargetTableName'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardTaskInfoResponseBody(name='body'),
}

async function describeShardTaskInfo(request: DescribeShardTaskInfoRequest): DescribeShardTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeShardTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSqlFlashbakTaskRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeSqlFlashbakTaskResponseBody = {
  requestId?: string(name='RequestId'),
  sqlFlashbackTasks?: {
    sqlFlashbackTask?: [ 
    {
      dbName?: string(name='DbName'),
      downloadUrl?: string(name='DownloadUrl'),
      expireTime?: long(name='ExpireTime'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      instId?: string(name='InstId'),
      recallProgress?: int32(name='RecallProgress'),
      recallRestoreType?: int32(name='RecallRestoreType'),
      recallStatus?: int32(name='RecallStatus'),
      recallType?: int32(name='RecallType'),
      searchEndTime?: long(name='SearchEndTime'),
      searchStartTime?: long(name='SearchStartTime'),
      sqlCounter?: long(name='SqlCounter'),
      sqlPk?: string(name='SqlPk'),
      sqlType?: string(name='SqlType'),
      tableName?: string(name='TableName'),
      traceId?: string(name='TraceId'),
    }
  ](name='SqlFlashbackTask')
  }(name='SqlFlashbackTasks'),
  success?: boolean(name='Success'),
}

model DescribeSqlFlashbakTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlFlashbakTaskResponseBody(name='body'),
}

async function describeSqlFlashbakTask(request: DescribeSqlFlashbakTaskRequest): DescribeSqlFlashbakTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSqlFlashbakTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model DescribeTableResponseBody = {
  data?: {
    list?: [ 
      {
        columnName?: string(name='ColumnName'),
        columnType?: string(name='ColumnType'),
        extra?: string(name='Extra'),
        index?: string(name='Index'),
        isAllowNull?: string(name='IsAllowNull'),
        isPk?: string(name='IsPk'),
      }
    ](name='List'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeTableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableResponseBody(name='body'),
}

async function describeTable(request: DescribeTableRequest): DescribeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTable', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTableListByTypeRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  query?: string(name='Query', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableType: string(name='TableType', position='Query'),
}

model DescribeTableListByTypeResponseBody = {
  list?: [ 
    {
      property?: string(name='Property'),
      tableName?: string(name='TableName'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeTableListByTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableListByTypeResponseBody(name='body'),
}

async function describeTableListByType(request: DescribeTableListByTypeRequest): DescribeTableListByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTableListByType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  query?: string(name='Query', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeTablesResponseBody = {
  list?: [ 
    {
      allowFullTableScan?: boolean(name='AllowFullTableScan'),
      broadcast?: boolean(name='Broadcast'),
      dbInstType?: int32(name='DbInstType'),
      isLocked?: boolean(name='IsLocked'),
      isShard?: boolean(name='IsShard'),
      shardKey?: string(name='ShardKey'),
      status?: int32(name='Status'),
      table?: string(name='Table'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DisableSqlAuditRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DisableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model DisableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSqlAuditResponseBody(name='body'),
}

async function disableSqlAudit(request: DisableSqlAuditRequest): DisableSqlAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSqlAudit', 'POST', '/', 'json', false, 'json', request);
}

model EnableInstanceIpv6AddressRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model EnableInstanceIpv6AddressResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model EnableInstanceIpv6AddressResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceIpv6AddressResponseBody(name='body'),
}

async function enableInstanceIpv6Address(request: EnableInstanceIpv6AddressRequest): EnableInstanceIpv6AddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstanceIpv6Address', 'POST', '/', 'json', false, 'json', request);
}

model EnableSqlAuditRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  isRecall?: boolean(name='IsRecall', position='Query'),
  recallEndTimestamp?: string(name='RecallEndTimestamp', position='Query'),
  recallStartTimestamp?: string(name='RecallStartTimestamp', position='Query'),
}

model EnableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model EnableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlAuditResponseBody(name='body'),
}

async function enableSqlAudit(request: EnableSqlAuditRequest): EnableSqlAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSqlAudit', 'POST', '/', 'json', false, 'json', request);
}

model EnableSqlFlashbackMatchSwitchRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model EnableSqlFlashbackMatchSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model EnableSqlFlashbackMatchSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlFlashbackMatchSwitchResponseBody(name='body'),
}

async function enableSqlFlashbackMatchSwitch(request: EnableSqlFlashbackMatchSwitchRequest): EnableSqlFlashbackMatchSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSqlFlashbackMatchSwitch', 'POST', '/', 'json', false, 'json', request);
}

model FlashbackRecycleBinTableRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model FlashbackRecycleBinTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FlashbackRecycleBinTableResponse = {
  headers: map[string]string(name='headers'),
  body: FlashbackRecycleBinTableResponseBody(name='body'),
}

async function flashbackRecycleBinTable(request: FlashbackRecycleBinTableRequest): FlashbackRecycleBinTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlashbackRecycleBinTable', 'POST', '/', 'json', false, 'json', request);
}

model GetDrdsDbRdsRelationInfoRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model GetDrdsDbRdsRelationInfoResponseBody = {
  data?: [ 
    {
      rdsInstanceId?: string(name='RdsInstanceId'),
      readOnlyInstanceInfo?: [ string ](name='ReadOnlyInstanceInfo'),
      usedInstanceId?: string(name='UsedInstanceId'),
      usedInstanceType?: string(name='UsedInstanceType'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDrdsDbRdsRelationInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDrdsDbRdsRelationInfoResponseBody(name='body'),
}

async function getDrdsDbRdsRelationInfo(request: GetDrdsDbRdsRelationInfoRequest): GetDrdsDbRdsRelationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDrdsDbRdsRelationInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ManagePrivateRdsRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  params?: string(name='Params', position='Query'),
  rdsAction: string(name='RdsAction', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ManagePrivateRdsResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ManagePrivateRdsResponse = {
  headers: map[string]string(name='headers'),
  body: ManagePrivateRdsResponseBody(name='body'),
}

async function managePrivateRds(request: ManagePrivateRdsRequest): ManagePrivateRdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManagePrivateRds', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountName: string(name='AccountName', position='Query'),
  description: string(name='Description', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPrivilegeRequest {
  accountName: string(name='AccountName', position='Query'),
  dbPrivilege?: [ 
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ModifyAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPrivilegeResponseBody(name='body'),
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDrdsInstanceDescriptionRequest {
  description: string(name='Description', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model ModifyDrdsInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsInstanceDescriptionResponseBody(name='body'),
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDrdsInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDrdsIpWhiteListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  groupAttribute?: string(name='GroupAttribute', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  ipWhiteList: string(name='IpWhiteList', position='Query'),
  mode?: boolean(name='Mode', position='Query'),
}

model ModifyDrdsIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsIpWhiteListResponseBody(name='body'),
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDrdsIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolarDbReadWeightRequest {
  dbInstanceId: string(name='DbInstanceId', position='Query'),
  dbName: string(name='DbName', position='Query'),
  dbNodeIds: string(name='DbNodeIds', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  weights: string(name='Weights', position='Query'),
}

model ModifyPolarDbReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPolarDbReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolarDbReadWeightResponseBody(name='body'),
}

async function modifyPolarDbReadWeight(request: ModifyPolarDbReadWeightRequest): ModifyPolarDbReadWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolarDbReadWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRdsReadWeightRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  instanceNames: string(name='InstanceNames', position='Query'),
  weights: string(name='Weights', position='Query'),
}

model ModifyRdsReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRdsReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRdsReadWeightResponseBody(name='body'),
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRdsReadWeight', 'POST', '/', 'json', false, 'json', request);
}

model PutStartBackupRequest {
  backupDbNames?: string(name='BackupDbNames', position='Query'),
  backupLevel?: string(name='BackupLevel', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model PutStartBackupResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model PutStartBackupResponse = {
  headers: map[string]string(name='headers'),
  body: PutStartBackupResponseBody(name='body'),
}

async function putStartBackup(request: PutStartBackupRequest): PutStartBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutStartBackup', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDrdsAtomUrlRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RefreshDrdsAtomUrlResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RefreshDrdsAtomUrlResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDrdsAtomUrlResponseBody(name='body'),
}

async function refreshDrdsAtomUrl(request: RefreshDrdsAtomUrlRequest): RefreshDrdsAtomUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDrdsAtomUrl', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceInternetAddressRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ReleaseInstanceInternetAddressResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceInternetAddressResponseBody(name='body'),
}

async function releaseInstanceInternetAddress(request: ReleaseInstanceInternetAddressRequest): ReleaseInstanceInternetAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstanceInternetAddress', 'POST', '/', 'json', false, 'json', request);
}

model RemoveBackupsSetRequest {
  backupId: string(name='BackupId', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveBackupsSetResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveBackupsSetResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBackupsSetResponseBody(name='body'),
}

async function removeBackupsSet(request: RemoveBackupsSetRequest): RemoveBackupsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBackupsSet', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDrdsDbRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveDrdsDbResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsDbResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbResponseBody(name='body'),
}

async function removeDrdsDb(request: RemoveDrdsDbRequest): RemoveDrdsDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDrdsDb', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDrdsDbFailedRecordRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveDrdsDbFailedRecordResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveDrdsDbFailedRecordResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbFailedRecordResponseBody(name='body'),
}

async function removeDrdsDbFailedRecord(request: RemoveDrdsDbFailedRecordRequest): RemoveDrdsDbFailedRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDrdsDbFailedRecord', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDrdsInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsInstanceResponseBody(name='body'),
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstanceAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInstanceAccountResponseBody(name='body'),
}

async function removeInstanceAccount(request: RemoveInstanceAccountRequest): RemoveInstanceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstanceAccount', 'POST', '/', 'json', false, 'json', request);
}

model RemoveRecycleBinTableRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model RemoveRecycleBinTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveRecycleBinTableResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveRecycleBinTableResponseBody(name='body'),
}

async function removeRecycleBinTable(request: RemoveRecycleBinTableRequest): RemoveRecycleBinTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveRecycleBinTable', 'POST', '/', 'json', false, 'json', request);
}

model RestartDrdsInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RestartDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model RestartDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDrdsInstanceResponseBody(name='body'),
}

async function restartDrdsInstance(request: RestartDrdsInstanceRequest): RestartDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model RollbackInstanceVersionRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model RollbackInstanceVersionResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RollbackInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackInstanceVersionResponseBody(name='body'),
}

async function rollbackInstanceVersion(request: RollbackInstanceVersionRequest): RollbackInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model SetBackupLocalRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection', position='Query'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours', position='Query'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace', position='Query'),
}

model SetBackupLocalResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model SetBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupLocalResponseBody(name='body'),
}

async function setBackupLocal(request: SetBackupLocalRequest): SetBackupLocalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetBackupLocal', 'POST', '/', 'json', false, 'json', request);
}

model SetBackupPolicyRequest {
  backupDbNames?: string(name='BackupDbNames', position='Query'),
  backupLevel?: string(name='BackupLevel', position='Query'),
  backupLog?: string(name='BackupLog', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  dataBackupRetentionPeriod?: string(name='DataBackupRetentionPeriod', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', position='Query'),
  preferredBackupEndTime?: string(name='PreferredBackupEndTime', position='Query'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupStartTime?: string(name='PreferredBackupStartTime', position='Query'),
}

model SetBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model SetBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupPolicyResponseBody(name='body'),
}

async function setBackupPolicy(request: SetBackupPolicyRequest): SetBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetupBroadcastTablesRequest {
  active: boolean(name='Active', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableName: [ string ](name='TableName', position='Query'),
}

model SetupBroadcastTablesResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: SetupBroadcastTablesResponseBody(name='body'),
}

async function setupBroadcastTables(request: SetupBroadcastTablesRequest): SetupBroadcastTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupBroadcastTables', 'POST', '/', 'json', false, 'json', request);
}

model SetupDrdsParamsRequest {
  data: [ 
    {
      dbName?: string(name='DbName'),
      paramRanges?: string(name='ParamRanges'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      paramVariableName?: string(name='ParamVariableName'),
    }
  ](name='Data', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  paramLevel: string(name='ParamLevel', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SetupDrdsParamsResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: SetupDrdsParamsResponseBody(name='body'),
}

async function setupDrdsParams(request: SetupDrdsParamsRequest): SetupDrdsParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupDrdsParams', 'POST', '/', 'json', false, 'json', request);
}

model SetupRecycleBinStatusRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  statusAction: string(name='StatusAction', position='Query'),
}

model SetupRecycleBinStatusResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupRecycleBinStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetupRecycleBinStatusResponseBody(name='body'),
}

async function setupRecycleBinStatus(request: SetupRecycleBinStatusRequest): SetupRecycleBinStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupRecycleBinStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetupTableRequest {
  allowFullTableScan: boolean(name='AllowFullTableScan', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tableName: [ string ](name='TableName', position='Query'),
}

model SetupTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupTableResponse = {
  headers: map[string]string(name='headers'),
  body: SetupTableResponseBody(name='body'),
}

async function setupTable(request: SetupTableRequest): SetupTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupTable', 'POST', '/', 'json', false, 'json', request);
}

model StartRestoreRequest {
  backupDbNames?: string(name='BackupDbNames', position='Query'),
  backupId?: string(name='BackupId', position='Query'),
  backupLevel?: string(name='BackupLevel', position='Query'),
  backupMode?: string(name='BackupMode', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  preferredBackupTime?: string(name='PreferredBackupTime', position='Query'),
}

model StartRestoreResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model StartRestoreResponse = {
  headers: map[string]string(name='headers'),
  body: StartRestoreResponseBody(name='body'),
}

async function startRestore(request: StartRestoreRequest): StartRestoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRestore', 'POST', '/', 'json', false, 'json', request);
}

model SubmitCleanTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  expandType: string(name='ExpandType', position='Query'),
  jobId: string(name='JobId', position='Query'),
  parentJobId: string(name='ParentJobId', position='Query'),
}

model SubmitCleanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitCleanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCleanTaskResponseBody(name='body'),
}

async function submitCleanTask(request: SubmitCleanTaskRequest): SubmitCleanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCleanTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitHotExpandPreCheckTaskRequest {
  dbInstType: string(name='DbInstType', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  tableList?: [ string ](name='TableList', position='Query'),
}

model SubmitHotExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitHotExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandPreCheckTaskResponseBody(name='body'),
}

async function submitHotExpandPreCheckTask(request: SubmitHotExpandPreCheckTaskRequest): SubmitHotExpandPreCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitHotExpandPreCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitHotExpandTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  extendedMapping: [ 
    {
      srcDb?: string(name='SrcDb'),
      srcInstanceId?: string(name='SrcInstanceId'),
    }
  ](name='ExtendedMapping', position='Query'),
  instanceDbMapping: [ 
    {
      dbList: string(name='DbList'),
      instanceName?: string(name='InstanceName'),
    }
  ](name='InstanceDbMapping', position='Query'),
  mapping: [ 
    {
      dbShardColumn?: string(name='DbShardColumn'),
      hotDbName?: string(name='HotDbName'),
      hotTableName?: string(name='HotTableName'),
      logicTable?: string(name='LogicTable'),
      shardDbValue?: string(name='ShardDbValue'),
      shardTbValue?: string(name='ShardTbValue'),
      tbShardColumn?: string(name='TbShardColumn'),
    }
  ](name='Mapping', position='Query'),
  supperAccountMapping?: [ 
    {
      instanceName?: string(name='InstanceName'),
      supperAccount?: string(name='SupperAccount'),
      supperPassword?: string(name='SupperPassword'),
    }
  ](name='SupperAccountMapping', position='Query'),
  taskDesc?: string(name='TaskDesc', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
}

model SubmitHotExpandTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitHotExpandTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandTaskResponseBody(name='body'),
}

async function submitHotExpandTask(request: SubmitHotExpandTaskRequest): SubmitHotExpandTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitHotExpandTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSmoothExpandPreCheckRequest {
  dbInstType: string(name='DbInstType', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model SubmitSmoothExpandPreCheckResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSmoothExpandPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckResponseBody(name='body'),
}

async function submitSmoothExpandPreCheck(request: SubmitSmoothExpandPreCheckRequest): SubmitSmoothExpandPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmoothExpandPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSmoothExpandPreCheckTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model SubmitSmoothExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSmoothExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckTaskResponseBody(name='body'),
}

async function submitSmoothExpandPreCheckTask(request: SubmitSmoothExpandPreCheckTaskRequest): SubmitSmoothExpandPreCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmoothExpandPreCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSqlFlashbackTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  recallRestoreType: int32(name='RecallRestoreType', position='Query'),
  recallType?: int32(name='RecallType', position='Query'),
  sqlPk?: string(name='SqlPk', position='Query'),
  sqlType?: string(name='SqlType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  tableName?: string(name='TableName', position='Query'),
  traceId?: string(name='TraceId', position='Query'),
}

model SubmitSqlFlashbackTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSqlFlashbackTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSqlFlashbackTaskResponseBody(name='body'),
}

async function submitSqlFlashbackTask(request: SubmitSqlFlashbackTaskRequest): SubmitSqlFlashbackTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSqlFlashbackTask', 'POST', '/', 'json', false, 'json', request);
}

model SwitchGlobalBroadcastTypeRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SwitchGlobalBroadcastTypeResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchGlobalBroadcastTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchGlobalBroadcastTypeResponseBody(name='body'),
}

async function switchGlobalBroadcastType(request: SwitchGlobalBroadcastTypeRequest): SwitchGlobalBroadcastTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchGlobalBroadcastType', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceNetworkRequest {
  classicExpiredDays?: int32(name='ClassicExpiredDays', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  retainClassic?: boolean(name='RetainClassic', position='Query'),
  srcInstanceNetworkType: string(name='SrcInstanceNetworkType', position='Query'),
}

model UpdateInstanceNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInstanceNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceNetworkResponseBody(name='body'),
}

async function updateInstanceNetwork(request: UpdateInstanceNetworkRequest): UpdateInstanceNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceNetwork', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrivateRdsClassRequest {
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  prePayDuration?: int32(name='PrePayDuration', position='Query'),
  rdsClass?: string(name='RdsClass', position='Query'),
  storage?: string(name='Storage', position='Query'),
}

model UpdatePrivateRdsClassResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdatePrivateRdsClassResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrivateRdsClassResponseBody(name='body'),
}

async function updatePrivateRdsClass(request: UpdatePrivateRdsClassRequest): UpdatePrivateRdsClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrivateRdsClass', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResourceGroupAttributeRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpdateResourceGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupAttributeResponseBody(name='body'),
}

async function updateResourceGroupAttribute(request: UpdateResourceGroupAttributeRequest): UpdateResourceGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeHiStoreInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  historeInstanceId: string(name='HistoreInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model UpgradeHiStoreInstanceResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpgradeHiStoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeHiStoreInstanceResponseBody(name='body'),
}

async function upgradeHiStoreInstance(request: UpgradeHiStoreInstanceRequest): UpgradeHiStoreInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeHiStoreInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceVersionRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  rpm?: string(name='Rpm', position='Query'),
}

model UpgradeInstanceVersionResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model ValidateShardTaskRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceTableName: string(name='SourceTableName', position='Query'),
  targetTableName: string(name='TargetTableName', minLength=1, maxLength=100, position='Query'),
  taskType: string(name='TaskType', minLength=1, position='Query'),
}

model ValidateShardTaskResponseBody = {
  list?: [ 
    {
      item?: string(name='Item'),
      result?: int32(name='Result'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ValidateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateShardTaskResponseBody(name='body'),
}

async function validateShardTask(request: ValidateShardTaskRequest): ValidateShardTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateShardTask', 'POST', '/', 'json', false, 'json', request);
}

