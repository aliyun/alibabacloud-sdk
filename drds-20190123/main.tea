/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'drds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'drds.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'drds.aliyuncs.com',
    cn-beijing-finance-pop = 'drds.aliyuncs.com',
    cn-beijing-gov-1 = 'drds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'drds.aliyuncs.com',
    cn-chengdu = 'drds.aliyuncs.com',
    cn-edge-1 = 'drds.aliyuncs.com',
    cn-fujian = 'drds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'drds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'drds.aliyuncs.com',
    cn-hangzhou-finance = 'drds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'drds.aliyuncs.com',
    cn-hangzhou-test-306 = 'drds.aliyuncs.com',
    cn-hongkong-finance-pop = 'drds.aliyuncs.com',
    cn-qingdao-nebula = 'drds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'drds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'drds.aliyuncs.com',
    cn-shanghai-inner = 'drds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'drds.aliyuncs.com',
    cn-shenzhen-inner = 'drds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'drds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'drds.aliyuncs.com',
    cn-wuhan = 'drds.aliyuncs.com',
    cn-yushanfang = 'drds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'drds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'drds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'drds.aliyuncs.com',
    eu-central-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'drds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'drds.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'drds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('drds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CheckDrdsDbNameRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model CheckDrdsDbNameResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: boolean(name='Result'),
}

model CheckDrdsDbNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDrdsDbNameResponseBody(name='body'),
}

async function checkDrdsDbNameWithOptions(request: CheckDrdsDbNameRequest, runtime: Util.RuntimeOptions): CheckDrdsDbNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDrdsDbName', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDrdsDbName(request: CheckDrdsDbNameRequest): CheckDrdsDbNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDrdsDbNameWithOptions(request, runtime);
}

model CheckExpandStatusRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model CheckExpandStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    msg?: string(name='Msg'),
    isActive?: boolean(name='IsActive'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model CheckExpandStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckExpandStatusResponseBody(name='body'),
}

async function checkExpandStatusWithOptions(request: CheckExpandStatusRequest, runtime: Util.RuntimeOptions): CheckExpandStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckExpandStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkExpandStatus(request: CheckExpandStatusRequest): CheckExpandStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkExpandStatusWithOptions(request, runtime);
}

model CheckSqlAuditEnableStatusRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model CheckSqlAuditEnableStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckSqlAuditEnableStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSqlAuditEnableStatusResponseBody(name='body'),
}

async function checkSqlAuditEnableStatusWithOptions(request: CheckSqlAuditEnableStatusRequest, runtime: Util.RuntimeOptions): CheckSqlAuditEnableStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckSqlAuditEnableStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkSqlAuditEnableStatus(request: CheckSqlAuditEnableStatusRequest): CheckSqlAuditEnableStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSqlAuditEnableStatusWithOptions(request, runtime);
}

model CreateDrdsDBRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  encode?: string(name='Encode'),
  password?: string(name='Password'),
  type?: string(name='Type'),
  dbInstType?: string(name='DbInstType'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  accountName?: string(name='AccountName'),
  rdsInstance?: [ string ](name='RdsInstance'),
  rdsSuperAccount?: [ 
    {
      password?: string(name='Password'),
      dbInstanceId?: string(name='DbInstanceId'),
      accountName?: string(name='AccountName'),
    }
  ](name='RdsSuperAccount'),
  instDbName?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName'),
}

model CreateDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBResponseBody(name='body'),
}

async function createDrdsDBWithOptions(request: CreateDrdsDBRequest, runtime: Util.RuntimeOptions): CreateDrdsDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsDB', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBWithOptions(request, runtime);
}

model CreateDrdsInstanceRequest {
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  type?: string(name='Type'),
  quantity?: int32(name='Quantity'),
  instanceSeries?: string(name='InstanceSeries'),
  specification?: string(name='Specification'),
  clientToken?: string(name='ClientToken'),
  payType?: string(name='PayType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  isHa?: boolean(name='isHa'),
  pricingCycle?: string(name='PricingCycle'),
  duration?: int32(name='Duration'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  masterInstId?: string(name='MasterInstId'),
  mySQLVersion?: int32(name='MySQLVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceIdList?: [ string ](name='drdsInstanceIdList')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model CreateDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsInstanceResponseBody(name='body'),
}

async function createDrdsInstanceWithOptions(request: CreateDrdsInstanceRequest, runtime: Util.RuntimeOptions): CreateDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsInstanceWithOptions(request, runtime);
}

model CreateInstanceAccountRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  accountName?: string(name='AccountName'),
  password?: string(name='Password'),
  dbPrivilege?: [ 
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege'),
}

model CreateInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceAccountResponseBody(name='body'),
}

async function createInstanceAccountWithOptions(request: CreateInstanceAccountRequest, runtime: Util.RuntimeOptions): CreateInstanceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstanceAccount', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstanceAccount(request: CreateInstanceAccountRequest): CreateInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceAccountWithOptions(request, runtime);
}

model CreateInstanceInternetAddressRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model CreateInstanceInternetAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceInternetAddressResponseBody(name='body'),
}

async function createInstanceInternetAddressWithOptions(request: CreateInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): CreateInstanceInternetAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstanceInternetAddress', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstanceInternetAddress(request: CreateInstanceInternetAddressRequest): CreateInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceInternetAddressWithOptions(request, runtime);
}

model CreateOrderForRdsRequest {
  regionId?: string(name='RegionId'),
  params?: string(name='Params'),
}

model CreateOrderForRdsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model CreateOrderForRdsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderForRdsResponseBody(name='body'),
}

async function createOrderForRdsWithOptions(request: CreateOrderForRdsRequest, runtime: Util.RuntimeOptions): CreateOrderForRdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrderForRds', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrderForRds(request: CreateOrderForRdsRequest): CreateOrderForRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderForRdsWithOptions(request, runtime);
}

model CreateShardTaskRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
  taskType?: string(name='TaskType'),
}

model CreateShardTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model CreateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShardTaskResponseBody(name='body'),
}

async function createShardTaskWithOptions(request: CreateShardTaskRequest, runtime: Util.RuntimeOptions): CreateShardTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateShardTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createShardTask(request: CreateShardTaskRequest): CreateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createShardTaskWithOptions(request, runtime);
}

model DescribeBackMenuRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackMenuResponseBody = {
  requestId?: string(name='RequestId'),
  list?: {
    list?: [ 
    {
      menuName?: string(name='MenuName'),
      support?: boolean(name='Support'),
    }
  ](name='list')
  }(name='List'),
  success?: boolean(name='Success'),
}

model DescribeBackMenuResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackMenuResponseBody(name='body'),
}

async function describeBackMenuWithOptions(request: DescribeBackMenuRequest, runtime: Util.RuntimeOptions): DescribeBackMenuResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackMenu', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackMenu(request: DescribeBackMenuRequest): DescribeBackMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackMenuWithOptions(request, runtime);
}

model DescribeBackupDbsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredRestoreTime?: string(name='PreferredRestoreTime'),
  backupId?: string(name='BackupId'),
}

model DescribeBackupDbsResponseBody = {
  dbNames?: {
    dbName?: [ string ](name='dbName')
  }(name='DbNames'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDbsResponseBody(name='body'),
}

async function describeBackupDbsWithOptions(request: DescribeBackupDbsRequest, runtime: Util.RuntimeOptions): DescribeBackupDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupDbs(request: DescribeBackupDbsRequest): DescribeBackupDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDbsWithOptions(request, runtime);
}

model DescribeBackupLocalRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupLocalResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  backupPolicyDO?: {
    backupDbName?: string(name='BackupDbName'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    backupLevel?: string(name='BackupLevel'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    backupAppName?: string(name='BackupAppName'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
    gmtCreate?: long(name='GmtCreate'),
    backupMode?: string(name='BackupMode'),
    backupLog?: string(name='BackupLog'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
  }(name='BackupPolicyDO'),
}

model DescribeBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupLocalResponseBody(name='body'),
}

async function describeBackupLocalWithOptions(request: DescribeBackupLocalRequest, runtime: Util.RuntimeOptions): DescribeBackupLocalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupLocal', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupLocal(request: DescribeBackupLocalRequest): DescribeBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupLocalWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  backupPolicyDO?: {
    backupDbName?: string(name='BackupDbName'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    backupLevel?: string(name='BackupLevel'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    backupAppName?: string(name='BackupAppName'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
    gmtCreate?: long(name='GmtCreate'),
    backupMode?: string(name='BackupMode'),
    backupLog?: string(name='BackupLog'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
  }(name='BackupPolicyDO'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupSetsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeBackupSetsResponseBody = {
  requestId?: string(name='RequestId'),
  backupSets?: {
    backupSet?: [ 
    {
      enableRecovery?: boolean(name='EnableRecovery'),
      status?: long(name='Status'),
      backupConsitentTime?: string(name='BackupConsitentTime'),
      backupType?: string(name='BackupType'),
      backupStartTime?: long(name='BackupStartTime'),
      backupLevel?: string(name='BackupLevel'),
      backupMode?: string(name='BackupMode'),
      backupEndTime?: long(name='BackupEndTime'),
      id?: string(name='Id'),
      backupTotalSize?: string(name='BackupTotalSize'),
      backupDbs?: {
        backupDb?: [ string ](name='backupDb')
      }(name='BackupDbs'),
    }
  ](name='backupSet')
  }(name='BackupSets'),
  success?: boolean(name='Success'),
}

model DescribeBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetsResponseBody(name='body'),
}

async function describeBackupSetsWithOptions(request: DescribeBackupSetsRequest, runtime: Util.RuntimeOptions): DescribeBackupSetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupSets', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupSets(request: DescribeBackupSetsRequest): DescribeBackupSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetsWithOptions(request, runtime);
}

model DescribeBackupTimesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupTimesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  restoreTime?: {
    endTime?: string(name='EndTime'),
    startTime?: string(name='StartTime'),
  }(name='RestoreTime'),
}

model DescribeBackupTimesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTimesResponseBody(name='body'),
}

async function describeBackupTimesWithOptions(request: DescribeBackupTimesRequest, runtime: Util.RuntimeOptions): DescribeBackupTimesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupTimes', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupTimes(request: DescribeBackupTimesRequest): DescribeBackupTimesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTimesWithOptions(request, runtime);
}

model DescribeBroadcastTablesRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model DescribeBroadcastTablesResponseBody = {
  isShard?: boolean(name='IsShard'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  list?: [ 
    {
      status?: int32(name='Status'),
      isShard?: boolean(name='IsShard'),
      broadcast?: boolean(name='Broadcast'),
      table?: string(name='Table'),
      dbInstType?: int32(name='DbInstType'),
      broadcastType?: string(name='BroadcastType'),
    }
  ](name='List'),
  success?: boolean(name='Success'),
}

model DescribeBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBroadcastTablesResponseBody(name='body'),
}

async function describeBroadcastTablesWithOptions(request: DescribeBroadcastTablesRequest, runtime: Util.RuntimeOptions): DescribeBroadcastTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBroadcastTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBroadcastTables(request: DescribeBroadcastTablesRequest): DescribeBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBroadcastTablesWithOptions(request, runtime);
}

model DescribeDbInstanceDbsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbInstanceId?: string(name='DbInstanceId'),
  accountName?: string(name='AccountName'),
  password?: string(name='Password'),
  dbInstType?: string(name='DbInstType'),
}

model DescribeDbInstanceDbsResponseBody = {
  databases?: {
    database?: [ 
    {
      status?: int32(name='Status'),
      dbName?: string(name='DbName'),
      description?: string(name='Description'),
    }
  ](name='Database')
  }(name='Databases'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
  success?: boolean(name='Success'),
}

model DescribeDbInstanceDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstanceDbsResponseBody(name='body'),
}

async function describeDbInstanceDbsWithOptions(request: DescribeDbInstanceDbsRequest, runtime: Util.RuntimeOptions): DescribeDbInstanceDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDbInstanceDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDbInstanceDbs(request: DescribeDbInstanceDbsRequest): DescribeDbInstanceDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstanceDbsWithOptions(request, runtime);
}

model DescribeDbInstancesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  search?: string(name='Search'),
  dbInstType?: string(name='DbInstType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDbInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBInstance?: [ 
    {
      readOnlyDBInstanceId?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceId'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      DBInstanceType?: string(name='DBInstanceType'),
      zoneId?: string(name='ZoneId'),
      DBInstanceStatus?: int32(name='DBInstanceStatus'),
      DBInstanceId?: string(name='DBInstanceId'),
      engine?: string(name='Engine'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      engineVersion?: string(name='EngineVersion'),
      regionId?: string(name='RegionId'),
    }
  ](name='DBInstance')
  }(name='Items'),
}

model DescribeDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstancesResponseBody(name='body'),
}

async function describeDbInstancesWithOptions(request: DescribeDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDbInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDbInstances(request: DescribeDbInstancesRequest): DescribeDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsDBRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    dbName?: string(name='DbName'),
    schema?: string(name='Schema'),
    createTime?: string(name='CreateTime'),
    mode?: string(name='Mode'),
    dbInstType?: string(name='DbInstType'),
    instRole?: string(name='InstRole'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBResponseBody(name='body'),
}

async function describeDrdsDBWithOptions(request: DescribeDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDB', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBWithOptions(request, runtime);
}

model DescribeDrdsDBClusterRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbInstanceId?: string(name='DbInstanceId'),
}

model DescribeDrdsDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
  dbInstance?: {
    endpoints?: {
      endpoint?: [ 
      {
        readWeight?: int32(name='ReadWeight'),
        nodeIds?: string(name='NodeIds'),
        endpointId?: string(name='EndpointId'),
      }
    ](name='Endpoint')
    }(name='Endpoints'),
    expireTime?: string(name='ExpireTime'),
    payType?: string(name='PayType'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    networkType?: string(name='NetworkType'),
    port?: int32(name='Port'),
    engineVersion?: string(name='EngineVersion'),
    DBNodes?: {
      DBNode?: [ 
      {
        DBNodeRole?: string(name='DBNodeRole'),
        zoneId?: string(name='ZoneId'),
        DBNodeId?: string(name='DBNodeId'),
        DBNodeStatus?: string(name='DBNodeStatus'),
      }
    ](name='DBNode')
    }(name='DBNodes'),
    rdsInstType?: string(name='RdsInstType'),
    remainDays?: string(name='RemainDays'),
    DBInstanceId?: string(name='DBInstanceId'),
    dbInstType?: string(name='DbInstType'),
    engine?: string(name='Engine'),
    readMode?: string(name='ReadMode'),
  }(name='DbInstance'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBClusterResponseBody(name='body'),
}

async function describeDrdsDBClusterWithOptions(request: DescribeDrdsDBClusterRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBCluster', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBCluster(request: DescribeDrdsDBClusterRequest): DescribeDrdsDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBClusterWithOptions(request, runtime);
}

model DescribeDrdsDbInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbInstanceId?: string(name='DbInstanceId'),
}

model DescribeDrdsDbInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  dbInstance?: {
    expireTime?: string(name='ExpireTime'),
    payType?: string(name='PayType'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    networkType?: string(name='NetworkType'),
    port?: int32(name='Port'),
    engineVersion?: string(name='EngineVersion'),
    dmInstanceId?: string(name='DmInstanceId'),
    connectUrl?: string(name='ConnectUrl'),
    readWeight?: int32(name='ReadWeight'),
    rdsInstType?: string(name='RdsInstType'),
    remainDays?: string(name='RemainDays'),
    DBInstanceId?: string(name='DBInstanceId'),
    dbInstType?: string(name='DbInstType'),
    engine?: string(name='Engine'),
    readOnlyInstances?: {
      readOnlyInstance?: [ 
      {
        expireTime?: string(name='ExpireTime'),
        payType?: string(name='PayType'),
        versionAction?: int32(name='VersionAction'),
        DBInstanceStatus?: string(name='DBInstanceStatus'),
        networkType?: string(name='NetworkType'),
        port?: int32(name='Port'),
        engineVersion?: string(name='EngineVersion'),
        dmInstanceId?: string(name='DmInstanceId'),
        connectUrl?: string(name='ConnectUrl'),
        readWeight?: int32(name='ReadWeight'),
        rdsInstType?: string(name='RdsInstType'),
        remainDays?: string(name='RemainDays'),
        DBInstanceId?: string(name='DBInstanceId'),
        dbInstType?: string(name='DbInstType'),
        engine?: string(name='Engine'),
      }
    ](name='ReadOnlyInstance')
    }(name='ReadOnlyInstances'),
  }(name='DbInstance'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstanceResponseBody(name='body'),
}

async function describeDrdsDbInstanceWithOptions(request: DescribeDrdsDbInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbInstance(request: DescribeDrdsDbInstanceRequest): DescribeDrdsDbInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstanceWithOptions(request, runtime);
}

model DescribeDrdsDbInstancesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDrdsDbInstancesResponseBody = {
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  total?: string(name='Total'),
  dbInstances?: {
    dbInstance?: [ 
    {
      expireTime?: string(name='ExpireTime'),
      payType?: string(name='PayType'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      networkType?: string(name='NetworkType'),
      port?: int32(name='Port'),
      engineVersion?: string(name='EngineVersion'),
      dmInstanceId?: string(name='DmInstanceId'),
      connectUrl?: string(name='ConnectUrl'),
      readWeight?: int32(name='ReadWeight'),
      rdsInstType?: string(name='RdsInstType'),
      remainDays?: int32(name='RemainDays'),
      DBInstanceId?: string(name='DBInstanceId'),
      dbInstType?: string(name='DbInstType'),
      engine?: string(name='Engine'),
      readOnlyInstances?: {
        readOnlyInstance?: [ 
        {
          expireTime?: string(name='ExpireTime'),
          payType?: string(name='PayType'),
          DBInstanceStatus?: string(name='DBInstanceStatus'),
          networkType?: string(name='NetworkType'),
          port?: int32(name='Port'),
          engineVersion?: string(name='EngineVersion'),
          dmInstanceId?: string(name='DmInstanceId'),
          connectUrl?: string(name='ConnectUrl'),
          readWeight?: int32(name='ReadWeight'),
          rdsInstType?: string(name='RdsInstType'),
          instanceName?: string(name='InstanceName'),
          remainDays?: int32(name='RemainDays'),
          dbInstType?: string(name='DbInstType'),
          engine?: string(name='Engine'),
        }
      ](name='ReadOnlyInstance')
      }(name='ReadOnlyInstances'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstancesResponseBody(name='body'),
}

async function describeDrdsDbInstancesWithOptions(request: DescribeDrdsDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbInstances(request: DescribeDrdsDbInstancesRequest): DescribeDrdsDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsDBIpWhiteListRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  groupName?: string(name='GroupName'),
}

model DescribeDrdsDBIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  ipWhiteList?: {
    ip?: [ string ](name='Ip')
  }(name='IpWhiteList'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBIpWhiteListResponseBody(name='body'),
}

async function describeDrdsDBIpWhiteListWithOptions(request: DescribeDrdsDBIpWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBIpWhiteList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBIpWhiteListWithOptions(request, runtime);
}

model DescribeDrdsDbRdsNameListRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeDrdsDbRdsNameListResponseBody = {
  requestId?: string(name='RequestId'),
  instanceNameList?: {
    instanceName?: [ string ](name='InstanceName')
  }(name='InstanceNameList'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbRdsNameListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbRdsNameListResponseBody(name='body'),
}

async function describeDrdsDbRdsNameListWithOptions(request: DescribeDrdsDbRdsNameListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbRdsNameListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbRdsNameList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbRdsNameList(request: DescribeDrdsDbRdsNameListRequest): DescribeDrdsDbRdsNameListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbRdsNameListWithOptions(request, runtime);
}

model DescribeDrdsDBsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsDBsResponseBody = {
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  total?: string(name='Total'),
  data?: {
    db?: [ 
    {
      status?: string(name='Status'),
      dbName?: string(name='DbName'),
      schema?: string(name='Schema'),
      createTime?: string(name='CreateTime'),
      mode?: string(name='Mode'),
      dbInstType?: string(name='DbInstType'),
    }
  ](name='Db')
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBsResponseBody(name='body'),
}

async function describeDrdsDBsWithOptions(request: DescribeDrdsDBsRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBsWithOptions(request, runtime);
}

model DescribeDrdsDbTasksRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsDbTasksResponseBody = {
  tasks?: {
    task?: [ 
    {
      taskPhase?: string(name='TaskPhase'),
      progress?: int32(name='Progress'),
      tbComputeLength?: int32(name='TbComputeLength'),
      taskName?: string(name='TaskName'),
      parentJobId?: string(name='ParentJobId'),
      label?: string(name='Label'),
      taskType?: int32(name='TaskType'),
      dbComputeLength?: int32(name='DbComputeLength'),
      allowCancel?: boolean(name='AllowCancel'),
      taskStatus?: int32(name='TaskStatus'),
      showProgress?: boolean(name='ShowProgress'),
      taskDetail?: string(name='TaskDetail'),
      gmtCreate?: long(name='GmtCreate'),
      detailTaskId?: string(name='DetailTaskId'),
      targetId?: long(name='TargetId'),
      expandType?: string(name='ExpandType'),
    }
  ](name='Task')
  }(name='Tasks'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbTasksResponseBody(name='body'),
}

async function describeDrdsDbTasksWithOptions(request: DescribeDrdsDbTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbTasks(request: DescribeDrdsDbTasksRequest): DescribeDrdsDbTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbTasksWithOptions(request, runtime);
}

model DescribeDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    type?: string(name='Type'),
    status?: string(name='Status'),
    createTime?: long(name='CreateTime'),
    versionAction?: string(name='VersionAction'),
    storageType?: string(name='StorageType'),
    networkType?: string(name='NetworkType'),
    label?: string(name='Label'),
    mysqlVersion?: int32(name='MysqlVersion'),
    instanceSpec?: string(name='InstanceSpec'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    description?: string(name='Description'),
    vips?: {
      vip?: [ 
      {
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
        dns?: string(name='Dns'),
        port?: string(name='Port'),
        expireDays?: long(name='ExpireDays'),
      }
    ](name='Vip')
    }(name='Vips'),
    version?: long(name='Version'),
    masterInstanceId?: string(name='MasterInstanceId'),
    expireDate?: long(name='ExpireDate'),
    commodityCode?: string(name='CommodityCode'),
    machineType?: string(name='MachineType'),
    instanceSeries?: string(name='InstanceSeries'),
    readOnlyDBInstanceIds?: {
      readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
    }(name='ReadOnlyDBInstanceIds'),
    productVersion?: string(name='ProductVersion'),
    regionId?: string(name='RegionId'),
    resourceGroupId?: string(name='ResourceGroupId'),
    zoneId?: string(name='ZoneId'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    instRole?: string(name='InstRole'),
    orderInstanceId?: string(name='OrderInstanceId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceResponseBody(name='body'),
}

async function describeDrdsInstanceWithOptions(request: DescribeDrdsInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceWithOptions(request, runtime);
}

model DescribeDrdsInstanceDbMonitorRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  key?: string(name='Key'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceDbMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          value?: string(name='Value'),
          date?: long(name='Date'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceDbMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceDbMonitorWithOptions(request: DescribeDrdsInstanceDbMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceDbMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceDbMonitor', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceDbMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceLevelTasksRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsInstanceLevelTasksResponseBody = {
  tasks?: {
    task?: [ 
    {
      taskType?: int32(name='TaskType'),
      taskPhase?: string(name='TaskPhase'),
      progress?: int32(name='Progress'),
      allowCancel?: boolean(name='AllowCancel'),
      taskStatus?: int32(name='TaskStatus'),
      showProgress?: boolean(name='ShowProgress'),
      taskName?: string(name='TaskName'),
      progressDescription?: string(name='ProgressDescription'),
      gmtCreate?: long(name='GmtCreate'),
      targetId?: long(name='TargetId'),
      errMsg?: string(name='ErrMsg'),
    }
  ](name='Task')
  }(name='Tasks'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceLevelTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceLevelTasksResponseBody(name='body'),
}

async function describeDrdsInstanceLevelTasksWithOptions(request: DescribeDrdsInstanceLevelTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceLevelTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceLevelTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceLevelTasks(request: DescribeDrdsInstanceLevelTasksRequest): DescribeDrdsInstanceLevelTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceLevelTasksWithOptions(request, runtime);
}

model DescribeDrdsInstanceMonitorRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  key?: string(name='Key'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  periodMultiple?: int32(name='PeriodMultiple'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          value?: string(name='Value'),
          date?: long(name='Date'),
        }
      ](name='Values'),
      nodeNum?: int32(name='NodeNum'),
    }
  ](name='Data'),
}

model DescribeDrdsInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceMonitorWithOptions(request: DescribeDrdsInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceMonitor', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstancesRequest {
  type?: string(name='Type'),
  description?: string(name='Description'),
  expired?: boolean(name='Expired'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
  mix?: boolean(name='Mix'),
  productVersion?: string(name='ProductVersion'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDrdsInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      type?: string(name='Type'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      createTime?: long(name='CreateTime'),
      versionAction?: string(name='VersionAction'),
      networkType?: string(name='NetworkType'),
      label?: string(name='Label'),
      instanceSpec?: string(name='InstanceSpec'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      description?: string(name='Description'),
      vips?: {
        vip?: [ 
        {
          vpcId?: string(name='VpcId'),
          type?: string(name='Type'),
          vswitchId?: string(name='VswitchId'),
          port?: string(name='Port'),
          IP?: string(name='IP'),
        }
      ](name='Vip')
      }(name='Vips'),
      version?: long(name='Version'),
      expireDate?: long(name='ExpireDate'),
      masterInstanceId?: string(name='MasterInstanceId'),
      commodityCode?: string(name='CommodityCode'),
      machineType?: string(name='MachineType'),
      instanceSeries?: string(name='InstanceSeries'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
      productVersion?: string(name='ProductVersion'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      drdsInstanceId?: string(name='DrdsInstanceId'),
      instRole?: string(name='InstRole'),
      orderInstanceId?: string(name='OrderInstanceId'),
    }
  ](name='Instance')
  }(name='Instances'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
}

model DescribeDrdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstancesResponseBody(name='body'),
}

async function describeDrdsInstancesWithOptions(request: DescribeDrdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstancesWithOptions(request, runtime);
}

model DescribeDrdsInstanceVersionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceVersionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    instanceVersion?: string(name='InstanceVersion'),
    newestVersion?: string(name='NewestVersion'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceVersionResponseBody(name='body'),
}

async function describeDrdsInstanceVersionWithOptions(request: DescribeDrdsInstanceVersionRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceVersion', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceVersion(request: DescribeDrdsInstanceVersionRequest): DescribeDrdsInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceVersionWithOptions(request, runtime);
}

model DescribeDrdsParamsRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  paramLevel?: string(name='ParamLevel'),
  dbName?: string(name='DbName'),
}

model DescribeDrdsParamsResponseBody = {
  requestId?: string(name='RequestId'),
  list?: [ 
    {
      paramDefaultValue?: string(name='ParamDefaultValue'),
      paramLevel?: string(name='ParamLevel'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      needRestart?: boolean(name='NeedRestart'),
      paramRanges?: string(name='ParamRanges'),
      dbName?: string(name='DbName'),
      paramEnglishName?: string(name='ParamEnglishName'),
      paramDesc?: string(name='ParamDesc'),
      paramVariableName?: string(name='ParamVariableName'),
    }
  ](name='List'),
  success?: boolean(name='Success'),
}

model DescribeDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsParamsResponseBody(name='body'),
}

async function describeDrdsParamsWithOptions(request: DescribeDrdsParamsRequest, runtime: Util.RuntimeOptions): DescribeDrdsParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsParams', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsParams(request: DescribeDrdsParamsRequest): DescribeDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsParamsWithOptions(request, runtime);
}

model DescribeDrdsShardingDbsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbNamePattern?: string(name='DbNamePattern'),
}

model DescribeDrdsShardingDbsResponseBody = {
  requestId?: string(name='RequestId'),
  shardingDbs?: {
    shardingDb?: [ 
    {
      minPoolSize?: int32(name='MinPoolSize'),
      maxPoolSize?: int32(name='MaxPoolSize'),
      dbInstanceId?: string(name='DbInstanceId'),
      connectUrl?: string(name='ConnectUrl'),
      groupName?: string(name='GroupName'),
      idleTimeOut?: int32(name='IdleTimeOut'),
      dbType?: string(name='DbType'),
      shardingDbName?: string(name='ShardingDbName'),
      preparedStatementCacheSize?: int32(name='PreparedStatementCacheSize'),
      blockingTimeout?: int32(name='BlockingTimeout'),
      connectionProperties?: string(name='ConnectionProperties'),
      userName?: string(name='UserName'),
      dbStatus?: string(name='DbStatus'),
    }
  ](name='ShardingDb')
  }(name='ShardingDbs'),
  success?: boolean(name='Success'),
}

model DescribeDrdsShardingDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsShardingDbsResponseBody(name='body'),
}

async function describeDrdsShardingDbsWithOptions(request: DescribeDrdsShardingDbsRequest, runtime: Util.RuntimeOptions): DescribeDrdsShardingDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsShardingDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsShardingDbs(request: DescribeDrdsShardingDbsRequest): DescribeDrdsShardingDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsShardingDbsWithOptions(request, runtime);
}

model DescribeDrdsSlowSqlsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  exeTime?: long(name='ExeTime'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDrdsSlowSqlsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  items?: {
    item?: [ 
    {
      host?: string(name='Host'),
      schema?: string(name='Schema'),
      sendTime?: long(name='SendTime'),
      sql?: string(name='Sql'),
      responseTime?: long(name='ResponseTime'),
    }
  ](name='Item')
  }(name='Items'),
  success?: boolean(name='Success'),
}

model DescribeDrdsSlowSqlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSlowSqlsResponseBody(name='body'),
}

async function describeDrdsSlowSqlsWithOptions(request: DescribeDrdsSlowSqlsRequest, runtime: Util.RuntimeOptions): DescribeDrdsSlowSqlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsSlowSqls', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsSlowSqls(request: DescribeDrdsSlowSqlsRequest): DescribeDrdsSlowSqlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSlowSqlsWithOptions(request, runtime);
}

model DescribeDrdsSqlAuditStatusRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsSqlAuditStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      extraSlsLogStore?: string(name='ExtraSlsLogStore'),
      dbName?: string(name='DbName'),
      detailed?: string(name='Detailed'),
      extraWriteEnabled?: boolean(name='ExtraWriteEnabled'),
      enabled?: string(name='Enabled'),
      extraAliUid?: long(name='ExtraAliUid'),
      extraSlsProject?: string(name='ExtraSlsProject'),
    }
  ](name='Data')
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDrdsSqlAuditStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSqlAuditStatusResponseBody(name='body'),
}

async function describeDrdsSqlAuditStatusWithOptions(request: DescribeDrdsSqlAuditStatusRequest, runtime: Util.RuntimeOptions): DescribeDrdsSqlAuditStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsSqlAuditStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsSqlAuditStatus(request: DescribeDrdsSqlAuditStatusRequest): DescribeDrdsSqlAuditStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSqlAuditStatusWithOptions(request, runtime);
}

model DescribeDrdsTasksRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsTasksResponseBody = {
  tasks?: {
    task?: [ 
    {
      state?: string(name='State'),
      content?: string(name='Content'),
      id?: long(name='Id'),
    }
  ](name='Task')
  }(name='Tasks'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsTasksResponseBody(name='body'),
}

async function describeDrdsTasksWithOptions(request: DescribeDrdsTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsTasks(request: DescribeDrdsTasksRequest): DescribeDrdsTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsTasksWithOptions(request, runtime);
}

model DescribeExpandLogicTableInfoListRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeExpandLogicTableInfoListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      tableName?: string(name='TableName'),
      shardTbKey?: string(name='ShardTbKey'),
      shardDbKey?: string(name='ShardDbKey'),
    }
  ](name='data')
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeExpandLogicTableInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExpandLogicTableInfoListResponseBody(name='body'),
}

async function describeExpandLogicTableInfoListWithOptions(request: DescribeExpandLogicTableInfoListRequest, runtime: Util.RuntimeOptions): DescribeExpandLogicTableInfoListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExpandLogicTableInfoList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExpandLogicTableInfoList(request: DescribeExpandLogicTableInfoListRequest): DescribeExpandLogicTableInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpandLogicTableInfoListWithOptions(request, runtime);
}

model DescribeHiStoreInstanceInfoRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  historeInstanceId?: string(name='HistoreInstanceId'),
}

model DescribeHiStoreInstanceInfoResponseBody = {
  hiStoreInstanceInfo?: {
    diskSize?: int32(name='DiskSize'),
    rpmVersion?: string(name='RpmVersion'),
    historeInstanceId?: string(name='HistoreInstanceId'),
    gmtCreate?: long(name='GmtCreate'),
    machineSpec?: string(name='MachineSpec'),
  }(name='HiStoreInstanceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeHiStoreInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiStoreInstanceInfoResponseBody(name='body'),
}

async function describeHiStoreInstanceInfoWithOptions(request: DescribeHiStoreInstanceInfoRequest, runtime: Util.RuntimeOptions): DescribeHiStoreInstanceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHiStoreInstanceInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHiStoreInstanceInfo(request: DescribeHiStoreInstanceInfoRequest): DescribeHiStoreInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiStoreInstanceInfoWithOptions(request, runtime);
}

model DescribeHotDbListRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeHotDbListResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  data?: {
    randomCode?: string(name='RandomCode'),
    list?: {
      instanceDb?: [ 
      {
        instanceName?: string(name='InstanceName'),
        hotDbList?: {
          data?: [ string ](name='data')
        }(name='HotDbList'),
      }
    ](name='InstanceDb')
    }(name='List'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeHotDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHotDbListResponseBody(name='body'),
}

async function describeHotDbListWithOptions(request: DescribeHotDbListRequest, runtime: Util.RuntimeOptions): DescribeHotDbListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHotDbList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHotDbList(request: DescribeHotDbListRequest): DescribeHotDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotDbListWithOptions(request, runtime);
}

model DescribeInstanceAccountsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceAccounts?: {
    instanceAccount?: [ 
    {
      dbPrivileges?: {
        dbPrivilege?: [ 
        {
          dbName?: string(name='DbName'),
          privilege?: string(name='Privilege'),
        }
      ](name='DbPrivilege')
      }(name='DbPrivileges'),
      host?: string(name='Host'),
      description?: string(name='Description'),
      accountType?: int32(name='AccountType'),
      accountName?: string(name='AccountName'),
    }
  ](name='InstanceAccount')
  }(name='InstanceAccounts'),
  success?: boolean(name='Success'),
}

model DescribeInstanceAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAccountsResponseBody(name='body'),
}

async function describeInstanceAccountsWithOptions(request: DescribeInstanceAccountsRequest, runtime: Util.RuntimeOptions): DescribeInstanceAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAccounts', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAccounts(request: DescribeInstanceAccountsRequest): DescribeInstanceAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAccountsWithOptions(request, runtime);
}

model DescribeInstanceMenuSwitchRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceMenuSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  config?: map[string]any(name='Config'),
  success?: boolean(name='Success'),
}

model DescribeInstanceMenuSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMenuSwitchResponseBody(name='body'),
}

async function describeInstanceMenuSwitchWithOptions(request: DescribeInstanceMenuSwitchRequest, runtime: Util.RuntimeOptions): DescribeInstanceMenuSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMenuSwitch', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMenuSwitch(request: DescribeInstanceMenuSwitchRequest): DescribeInstanceMenuSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMenuSwitchWithOptions(request, runtime);
}

model DescribeInstanceSwitchAzoneRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchAzoneResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: {
    targetAzones?: {
      targetAzone?: [ string ](name='TargetAzone')
    }(name='TargetAzones'),
    switchAble?: boolean(name='SwitchAble'),
    originAzoneId?: string(name='OriginAzoneId'),
    regionId?: string(name='RegionId'),
  }(name='Result'),
}

model DescribeInstanceSwitchAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchAzoneResponseBody(name='body'),
}

async function describeInstanceSwitchAzoneWithOptions(request: DescribeInstanceSwitchAzoneRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchAzoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSwitchAzone', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSwitchAzone(request: DescribeInstanceSwitchAzoneRequest): DescribeInstanceSwitchAzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchAzoneWithOptions(request, runtime);
}

model DescribeInstanceSwitchNetworkRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vswitchInfos?: {
        vswitchInfo?: [ 
        {
          vpcId?: string(name='VpcId'),
          drdsSupported?: boolean(name='DrdsSupported'),
          vswitchId?: string(name='VswitchId'),
          vswitchName?: string(name='VswitchName'),
          azoneId?: string(name='AzoneId'),
        }
      ](name='VswitchInfo')
      }(name='VswitchInfos'),
      regionId?: string(name='RegionId'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
  success?: boolean(name='Success'),
}

model DescribeInstanceSwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchNetworkResponseBody(name='body'),
}

async function describeInstanceSwitchNetworkWithOptions(request: DescribeInstanceSwitchNetworkRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSwitchNetwork', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSwitchNetwork(request: DescribeInstanceSwitchNetworkRequest): DescribeInstanceSwitchNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchNetworkWithOptions(request, runtime);
}

model DescribeInstDbLogInfoRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeInstDbLogInfoResponseBody = {
  requestId?: string(name='RequestId'),
  logTimeRange?: {
    supportLatestTime?: long(name='SupportLatestTime'),
    supportOldestTime?: long(name='SupportOldestTime'),
  }(name='LogTimeRange'),
  success?: boolean(name='Success'),
}

model DescribeInstDbLogInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbLogInfoResponseBody(name='body'),
}

async function describeInstDbLogInfoWithOptions(request: DescribeInstDbLogInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbLogInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstDbLogInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstDbLogInfo(request: DescribeInstDbLogInfoRequest): DescribeInstDbLogInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbLogInfoWithOptions(request, runtime);
}

model DescribeInstDbSlsInfoRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeInstDbSlsInfoResponseBody = {
  auditInfo?: {
    logStore?: string(name='LogStore'),
    project?: string(name='Project'),
  }(name='AuditInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstDbSlsInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbSlsInfoResponseBody(name='body'),
}

async function describeInstDbSlsInfoWithOptions(request: DescribeInstDbSlsInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbSlsInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstDbSlsInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstDbSlsInfo(request: DescribeInstDbSlsInfoRequest): DescribeInstDbSlsInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbSlsInfoWithOptions(request, runtime);
}

model DescribePreCheckResultRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  taskId?: string(name='TaskId'),
}

model DescribePreCheckResultResponseBody = {
  preCheckResult?: {
    state?: string(name='State'),
    preCheckName?: string(name='PreCheckName'),
    subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        state?: string(name='State'),
        errorMsgParams?: [ string ](name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
      }
    ](name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckResultResponseBody(name='body'),
}

async function describePreCheckResultWithOptions(request: DescribePreCheckResultRequest, runtime: Util.RuntimeOptions): DescribePreCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePreCheckResult', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePreCheckResult(request: DescribePreCheckResultRequest): DescribePreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreCheckResultWithOptions(request, runtime);
}

model DescribeRdsCommodityRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  commodityCode?: string(name='CommodityCode'),
  orderType?: string(name='OrderType'),
}

model DescribeRdsCommodityResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeRdsCommodityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsCommodityResponseBody(name='body'),
}

async function describeRdsCommodityWithOptions(request: DescribeRdsCommodityRequest, runtime: Util.RuntimeOptions): DescribeRdsCommodityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsCommodity', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsCommodity(request: DescribeRdsCommodityRequest): DescribeRdsCommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsCommodityWithOptions(request, runtime);
}

model DescribeRDSPerformanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstanceId?: string(name='RdsInstanceId'),
  keys?: string(name='Keys'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  dbInstType?: string(name='DbInstType'),
}

model DescribeRDSPerformanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      key?: string(name='Key'),
      nodeName?: string(name='NodeName'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          value?: string(name='Value'),
          date?: long(name='Date'),
        }
      ](name='Values'),
      nodeNum?: int32(name='NodeNum'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeRDSPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSPerformanceResponseBody(name='body'),
}

async function describeRDSPerformanceWithOptions(request: DescribeRDSPerformanceRequest, runtime: Util.RuntimeOptions): DescribeRDSPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRDSPerformance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRDSPerformance(request: DescribeRDSPerformanceRequest): DescribeRDSPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRDSPerformanceWithOptions(request, runtime);
}

model DescribeRdsPerformanceSummaryRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstanceId?: [ string ](name='RdsInstanceId'),
}

model DescribeRdsPerformanceSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  rdsPerformanceInfos?: [ 
    {
      cpu?: float(name='Cpu'),
      activeSessions?: int32(name='ActiveSessions'),
      totalSessions?: int32(name='TotalSessions'),
      rdsId?: string(name='RdsId'),
      iops?: float(name='Iops'),
      spaceUsage?: long(name='SpaceUsage'),
    }
  ](name='RdsPerformanceInfos'),
  success?: boolean(name='Success'),
}

model DescribeRdsPerformanceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsPerformanceSummaryResponseBody(name='body'),
}

async function describeRdsPerformanceSummaryWithOptions(request: DescribeRdsPerformanceSummaryRequest, runtime: Util.RuntimeOptions): DescribeRdsPerformanceSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsPerformanceSummary', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsPerformanceSummary(request: DescribeRdsPerformanceSummaryRequest): DescribeRdsPerformanceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsPerformanceSummaryWithOptions(request, runtime);
}

model DescribeRdsSuperAccountInstancesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbInstType?: string(name='DbInstType'),
  rdsInstance?: [ string ](name='RdsInstance'),
}

model DescribeRdsSuperAccountInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  dbInstances?: {
    dbInstance?: [ string ](name='DbInstance')
  }(name='DbInstances'),
}

model DescribeRdsSuperAccountInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsSuperAccountInstancesResponseBody(name='body'),
}

async function describeRdsSuperAccountInstancesWithOptions(request: DescribeRdsSuperAccountInstancesRequest, runtime: Util.RuntimeOptions): DescribeRdsSuperAccountInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsSuperAccountInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsSuperAccountInstances(request: DescribeRdsSuperAccountInstancesRequest): DescribeRdsSuperAccountInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsSuperAccountInstancesWithOptions(request, runtime);
}

model DescribeRestoreOrderRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
}

model DescribeRestoreOrderResponseBody = {
  restoreOrderDO?: {
    drdsOrderDOList?: {
      drdsOrderDOList?: [ 
      {
        vpcId?: string(name='VpcId'),
        network?: string(name='Network'),
        VSwtichId?: string(name='VSwtichId'),
        instSpec?: string(name='InstSpec'),
        azoneId?: string(name='AzoneId'),
        regionId?: string(name='RegionId'),
      }
    ](name='DrdsOrderDOList')
    }(name='DrdsOrderDOList'),
    rdsOrderDOList?: {
      rdsOrderDOList?: [ 
      {
        network?: string(name='Network'),
        version?: string(name='Version'),
        instanceClass?: string(name='InstanceClass'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        num?: long(name='Num'),
        engine?: string(name='Engine'),
        azoneId?: string(name='AzoneId'),
        regionId?: string(name='RegionId'),
      }
    ](name='RdsOrderDOList')
    }(name='RdsOrderDOList'),
    polarOrderDOList?: {
      polarOrderDOList?: [ 
      {
        network?: string(name='Network'),
        version?: string(name='Version'),
        instanceClass?: string(name='InstanceClass'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        num?: long(name='Num'),
        engine?: string(name='Engine'),
        azoneId?: string(name='AzoneId'),
        regionId?: string(name='RegionId'),
      }
    ](name='PolarOrderDOList')
    }(name='PolarOrderDOList'),
  }(name='RestoreOrderDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRestoreOrderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreOrderResponseBody(name='body'),
}

async function describeRestoreOrderWithOptions(request: DescribeRestoreOrderRequest, runtime: Util.RuntimeOptions): DescribeRestoreOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRestoreOrder', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRestoreOrder(request: DescribeRestoreOrderRequest): DescribeRestoreOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreOrderWithOptions(request, runtime);
}

model DescribeShardTaskInfoRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
}

model DescribeShardTaskInfoResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    full?: {
      startTime?: string(name='StartTime'),
      progress?: int32(name='Progress'),
      tps?: int32(name='Tps'),
      expired?: int32(name='Expired'),
      total?: int32(name='Total'),
    }(name='Full'),
    stage?: string(name='Stage'),
    progress?: string(name='Progress'),
    review?: {
      startTime?: string(name='StartTime'),
      progress?: int32(name='Progress'),
      tps?: int32(name='Tps'),
      expired?: int32(name='Expired'),
      total?: int32(name='Total'),
    }(name='Review'),
    expired?: string(name='Expired'),
    targetTableName?: string(name='TargetTableName'),
    fullRevise?: {
      startTime?: string(name='StartTime'),
      progress?: int32(name='Progress'),
      tps?: int32(name='Tps'),
      expired?: int32(name='Expired'),
      total?: int32(name='Total'),
    }(name='FullRevise'),
    sourceTableName?: string(name='SourceTableName'),
    fullCheck?: {
      startTime?: string(name='StartTime'),
      progress?: int32(name='Progress'),
      tps?: int32(name='Tps'),
      expired?: int32(name='Expired'),
      total?: int32(name='Total'),
    }(name='FullCheck'),
    increment?: {
      delay?: int32(name='Delay'),
      startTime?: string(name='StartTime'),
      tps?: int32(name='Tps'),
    }(name='Increment'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeShardTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardTaskInfoResponseBody(name='body'),
}

async function describeShardTaskInfoWithOptions(request: DescribeShardTaskInfoRequest, runtime: Util.RuntimeOptions): DescribeShardTaskInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShardTaskInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShardTaskInfo(request: DescribeShardTaskInfoRequest): DescribeShardTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskInfoWithOptions(request, runtime);
}

model DescribeShardTaskListRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  taskType?: string(name='TaskType'),
}

model DescribeShardTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  total?: int32(name='Total'),
  list?: [ 
    {
      sourceTableName?: string(name='SourceTableName'),
      targetTableName?: string(name='TargetTableName'),
      expired?: long(name='Expired'),
      stage?: int32(name='Stage'),
      progress?: int32(name='Progress'),
      delay?: int32(name='Delay'),
    }
  ](name='List'),
}

model DescribeShardTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardTaskListResponseBody(name='body'),
}

async function describeShardTaskListWithOptions(request: DescribeShardTaskListRequest, runtime: Util.RuntimeOptions): DescribeShardTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShardTaskList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShardTaskList(request: DescribeShardTaskListRequest): DescribeShardTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskListWithOptions(request, runtime);
}

model DescribeSqlFlashbakTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeSqlFlashbakTaskResponseBody = {
  sqlFlashbackTasks?: {
    sqlFlashbackTask?: [ 
    {
      tableName?: string(name='TableName'),
      searchEndTime?: long(name='SearchEndTime'),
      expireTime?: long(name='ExpireTime'),
      downloadUrl?: string(name='DownloadUrl'),
      recallProgress?: int32(name='RecallProgress'),
      instId?: string(name='InstId'),
      sqlPk?: string(name='SqlPk'),
      recallType?: int32(name='RecallType'),
      gmtModified?: long(name='GmtModified'),
      searchStartTime?: long(name='SearchStartTime'),
      dbName?: string(name='DbName'),
      sqlCounter?: long(name='SqlCounter'),
      recallRestoreType?: int32(name='RecallRestoreType'),
      gmtCreate?: long(name='GmtCreate'),
      traceId?: string(name='TraceId'),
      id?: long(name='Id'),
      recallStatus?: int32(name='RecallStatus'),
      sqlType?: string(name='SqlType'),
    }
  ](name='SqlFlashbackTask')
  }(name='SqlFlashbackTasks'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSqlFlashbakTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlFlashbakTaskResponseBody(name='body'),
}

async function describeSqlFlashbakTaskWithOptions(request: DescribeSqlFlashbakTaskRequest, runtime: Util.RuntimeOptions): DescribeSqlFlashbakTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSqlFlashbakTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSqlFlashbakTask(request: DescribeSqlFlashbakTaskRequest): DescribeSqlFlashbakTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlFlashbakTaskWithOptions(request, runtime);
}

model DescribeTableRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  tableName?: string(name='TableName'),
}

model DescribeTableResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        index?: string(name='Index'),
        isAllowNull?: string(name='IsAllowNull'),
        columnName?: string(name='ColumnName'),
        isPk?: string(name='IsPk'),
        columnType?: string(name='ColumnType'),
        extra?: string(name='Extra'),
      }
    ](name='List'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeTableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableResponseBody(name='body'),
}

async function describeTableWithOptions(request: DescribeTableRequest, runtime: Util.RuntimeOptions): DescribeTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTable(request: DescribeTableRequest): DescribeTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableWithOptions(request, runtime);
}

model DescribeTableListByTypeRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  tableType?: string(name='TableType'),
}

model DescribeTableListByTypeResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  list?: [ 
    {
      property?: string(name='Property'),
      tableName?: string(name='TableName'),
    }
  ](name='List'),
  success?: boolean(name='Success'),
}

model DescribeTableListByTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableListByTypeResponseBody(name='body'),
}

async function describeTableListByTypeWithOptions(request: DescribeTableListByTypeRequest, runtime: Util.RuntimeOptions): DescribeTableListByTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTableListByType', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTableListByType(request: DescribeTableListByTypeRequest): DescribeTableListByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableListByTypeWithOptions(request, runtime);
}

model DescribeTablesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  regionId?: string(name='RegionId'),
}

model DescribeTablesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  total?: int32(name='Total'),
  list?: [ 
    {
      status?: int32(name='Status'),
      isLocked?: boolean(name='IsLocked'),
      shardKey?: string(name='ShardKey'),
      isShard?: boolean(name='IsShard'),
      broadcast?: boolean(name='Broadcast'),
      allowFullTableScan?: boolean(name='AllowFullTableScan'),
      table?: string(name='Table'),
      dbInstType?: int32(name='DbInstType'),
    }
  ](name='List'),
  success?: boolean(name='Success'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DisableSqlAuditRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DisableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: boolean(name='Result'),
}

model DisableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSqlAuditResponseBody(name='body'),
}

async function disableSqlAuditWithOptions(request: DisableSqlAuditRequest, runtime: Util.RuntimeOptions): DisableSqlAuditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableSqlAudit', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableSqlAudit(request: DisableSqlAuditRequest): DisableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSqlAuditWithOptions(request, runtime);
}

model EnableSqlAuditRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  isRecall?: boolean(name='IsRecall'),
  recallStartTimestamp?: string(name='RecallStartTimestamp'),
  recallEndTimestamp?: string(name='RecallEndTimestamp'),
}

model EnableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: boolean(name='Result'),
}

model EnableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlAuditResponseBody(name='body'),
}

async function enableSqlAuditWithOptions(request: EnableSqlAuditRequest, runtime: Util.RuntimeOptions): EnableSqlAuditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableSqlAudit', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSqlAudit(request: EnableSqlAuditRequest): EnableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlAuditWithOptions(request, runtime);
}

model EnableSqlFlashbackMatchSwitchRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model EnableSqlFlashbackMatchSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: boolean(name='Result'),
}

model EnableSqlFlashbackMatchSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlFlashbackMatchSwitchResponseBody(name='body'),
}

async function enableSqlFlashbackMatchSwitchWithOptions(request: EnableSqlFlashbackMatchSwitchRequest, runtime: Util.RuntimeOptions): EnableSqlFlashbackMatchSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableSqlFlashbackMatchSwitch', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSqlFlashbackMatchSwitch(request: EnableSqlFlashbackMatchSwitchRequest): EnableSqlFlashbackMatchSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlFlashbackMatchSwitchWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
  success?: boolean(name='Success'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ManagePrivateRdsRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  DBInstanceId?: string(name='DBInstanceId'),
  rdsAction?: string(name='RdsAction'),
  params?: string(name='Params'),
}

model ManagePrivateRdsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model ManagePrivateRdsResponse = {
  headers: map[string]string(name='headers'),
  body: ManagePrivateRdsResponseBody(name='body'),
}

async function managePrivateRdsWithOptions(request: ManagePrivateRdsRequest, runtime: Util.RuntimeOptions): ManagePrivateRdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ManagePrivateRds', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function managePrivateRds(request: ManagePrivateRdsRequest): ManagePrivateRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return managePrivateRdsWithOptions(request, runtime);
}

model ModifyDrdsInstanceDescriptionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  description?: string(name='Description'),
}

model ModifyDrdsInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsInstanceDescriptionResponseBody(name='body'),
}

async function modifyDrdsInstanceDescriptionWithOptions(request: ModifyDrdsInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDrdsInstanceDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDrdsInstanceDescription', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDrdsIpWhiteListRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  ipWhiteList?: string(name='IpWhiteList'),
  mode?: boolean(name='Mode'),
  groupName?: string(name='GroupName'),
  groupAttribute?: string(name='GroupAttribute'),
}

model ModifyDrdsIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsIpWhiteListResponseBody(name='body'),
}

async function modifyDrdsIpWhiteListWithOptions(request: ModifyDrdsIpWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDrdsIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDrdsIpWhiteList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsIpWhiteListWithOptions(request, runtime);
}

model ModifyRdsReadWeightRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  instanceNames?: string(name='InstanceNames'),
  weights?: string(name='Weights'),
}

model ModifyRdsReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRdsReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRdsReadWeightResponseBody(name='body'),
}

async function modifyRdsReadWeightWithOptions(request: ModifyRdsReadWeightRequest, runtime: Util.RuntimeOptions): ModifyRdsReadWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRdsReadWeight', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRdsReadWeightWithOptions(request, runtime);
}

model PutStartBackupRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
}

model PutStartBackupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model PutStartBackupResponse = {
  headers: map[string]string(name='headers'),
  body: PutStartBackupResponseBody(name='body'),
}

async function putStartBackupWithOptions(request: PutStartBackupRequest, runtime: Util.RuntimeOptions): PutStartBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutStartBackup', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putStartBackup(request: PutStartBackupRequest): PutStartBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return putStartBackupWithOptions(request, runtime);
}

model ReleaseInstanceInternetAddressRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstanceInternetAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
}

model ReleaseInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceInternetAddressResponseBody(name='body'),
}

async function releaseInstanceInternetAddressWithOptions(request: ReleaseInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): ReleaseInstanceInternetAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstanceInternetAddress', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstanceInternetAddress(request: ReleaseInstanceInternetAddressRequest): ReleaseInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceInternetAddressWithOptions(request, runtime);
}

model RemoveBackupsSetRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  backupId?: string(name='BackupId'),
}

model RemoveBackupsSetResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model RemoveBackupsSetResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBackupsSetResponseBody(name='body'),
}

async function removeBackupsSetWithOptions(request: RemoveBackupsSetRequest, runtime: Util.RuntimeOptions): RemoveBackupsSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveBackupsSet', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeBackupsSet(request: RemoveBackupsSetRequest): RemoveBackupsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBackupsSetWithOptions(request, runtime);
}

model RemoveDrdsDbRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model RemoveDrdsDbResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsDbResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbResponseBody(name='body'),
}

async function removeDrdsDbWithOptions(request: RemoveDrdsDbRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsDb', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsDb(request: RemoveDrdsDbRequest): RemoveDrdsDbResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbWithOptions(request, runtime);
}

model RemoveDrdsDbFailedRecordRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model RemoveDrdsDbFailedRecordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: boolean(name='Result'),
}

model RemoveDrdsDbFailedRecordResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbFailedRecordResponseBody(name='body'),
}

async function removeDrdsDbFailedRecordWithOptions(request: RemoveDrdsDbFailedRecordRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbFailedRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsDbFailedRecord', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsDbFailedRecord(request: RemoveDrdsDbFailedRecordRequest): RemoveDrdsDbFailedRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbFailedRecordWithOptions(request, runtime);
}

model RemoveDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsInstanceResponseBody(name='body'),
}

async function removeDrdsInstanceWithOptions(request: RemoveDrdsInstanceRequest, runtime: Util.RuntimeOptions): RemoveDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsInstanceWithOptions(request, runtime);
}

model RemoveInstanceAccountRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  accountName?: string(name='AccountName'),
}

model RemoveInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInstanceAccountResponseBody(name='body'),
}

async function removeInstanceAccountWithOptions(request: RemoveInstanceAccountRequest, runtime: Util.RuntimeOptions): RemoveInstanceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveInstanceAccount', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeInstanceAccount(request: RemoveInstanceAccountRequest): RemoveInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInstanceAccountWithOptions(request, runtime);
}

model SetBackupLocalRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
}

model SetBackupLocalResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model SetBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupLocalResponseBody(name='body'),
}

async function setBackupLocalWithOptions(request: SetBackupLocalRequest, runtime: Util.RuntimeOptions): SetBackupLocalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetBackupLocal', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setBackupLocal(request: SetBackupLocalRequest): SetBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupLocalWithOptions(request, runtime);
}

model SetBackupPolicyRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupStartTime?: string(name='PreferredBackupStartTime'),
  preferredBackupEndTime?: string(name='PreferredBackupEndTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupLog?: string(name='BackupLog'),
  dataBackupRetentionPeriod?: string(name='DataBackupRetentionPeriod'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
}

model SetBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model SetBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupPolicyResponseBody(name='body'),
}

async function setBackupPolicyWithOptions(request: SetBackupPolicyRequest, runtime: Util.RuntimeOptions): SetBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetBackupPolicy', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setBackupPolicy(request: SetBackupPolicyRequest): SetBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupPolicyWithOptions(request, runtime);
}

model SetupBroadcastTablesRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  active?: boolean(name='Active'),
  tableName?: [ string ](name='TableName'),
}

model SetupBroadcastTablesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model SetupBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: SetupBroadcastTablesResponseBody(name='body'),
}

async function setupBroadcastTablesWithOptions(request: SetupBroadcastTablesRequest, runtime: Util.RuntimeOptions): SetupBroadcastTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupBroadcastTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupBroadcastTables(request: SetupBroadcastTablesRequest): SetupBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupBroadcastTablesWithOptions(request, runtime);
}

model SetupDrdsParamsRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  paramLevel?: string(name='ParamLevel'),
  data?: [ 
    {
      dbName?: string(name='DbName'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      paramVariableName?: string(name='ParamVariableName'),
      paramRanges?: string(name='ParamRanges'),
    }
  ](name='Data'),
}

model SetupDrdsParamsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model SetupDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: SetupDrdsParamsResponseBody(name='body'),
}

async function setupDrdsParamsWithOptions(request: SetupDrdsParamsRequest, runtime: Util.RuntimeOptions): SetupDrdsParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupDrdsParams', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupDrdsParams(request: SetupDrdsParamsRequest): SetupDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupDrdsParamsWithOptions(request, runtime);
}

model SetupTableRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  allowFullTableScan?: boolean(name='AllowFullTableScan'),
  tableName?: [ string ](name='TableName'),
}

model SetupTableResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model SetupTableResponse = {
  headers: map[string]string(name='headers'),
  body: SetupTableResponseBody(name='body'),
}

async function setupTableWithOptions(request: SetupTableRequest, runtime: Util.RuntimeOptions): SetupTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupTable(request: SetupTableRequest): SetupTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupTableWithOptions(request, runtime);
}

model StartRestoreRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
}

model StartRestoreResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  result?: string(name='Result'),
}

model StartRestoreResponse = {
  headers: map[string]string(name='headers'),
  body: StartRestoreResponseBody(name='body'),
}

async function startRestoreWithOptions(request: StartRestoreRequest, runtime: Util.RuntimeOptions): StartRestoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartRestore', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startRestore(request: StartRestoreRequest): StartRestoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRestoreWithOptions(request, runtime);
}

model SubmitCleanTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  parentJobId?: string(name='ParentJobId'),
  jobId?: string(name='JobId'),
  expandType?: string(name='ExpandType'),
}

model SubmitCleanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitCleanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCleanTaskResponseBody(name='body'),
}

async function submitCleanTaskWithOptions(request: SubmitCleanTaskRequest, runtime: Util.RuntimeOptions): SubmitCleanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitCleanTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitCleanTask(request: SubmitCleanTaskRequest): SubmitCleanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCleanTaskWithOptions(request, runtime);
}

model SubmitHotExpandPreCheckTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbInstType?: string(name='DbInstType'),
  tableList?: [ string ](name='TableList'),
}

model SubmitHotExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitHotExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandPreCheckTaskResponseBody(name='body'),
}

async function submitHotExpandPreCheckTaskWithOptions(request: SubmitHotExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandPreCheckTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitHotExpandPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitHotExpandPreCheckTask(request: SubmitHotExpandPreCheckTaskRequest): SubmitHotExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandPreCheckTaskWithOptions(request, runtime);
}

model SubmitHotExpandTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  taskName?: string(name='TaskName'),
  taskDesc?: string(name='TaskDesc'),
  instanceDbMapping?: [ 
    {
      dbList?: string(name='DbList'),
      instanceName?: string(name='InstanceName'),
    }
  ](name='InstanceDbMapping'),
  mapping?: [ 
    {
      hotDbName?: string(name='HotDbName'),
      shardTbValue?: string(name='ShardTbValue'),
      hotTableName?: string(name='HotTableName'),
      shardDbValue?: string(name='ShardDbValue'),
      tbShardColumn?: string(name='TbShardColumn'),
      dbShardColumn?: string(name='DbShardColumn'),
      logicTable?: string(name='LogicTable'),
    }
  ](name='Mapping'),
  supperAccountMapping?: [ 
    {
      instanceName?: string(name='InstanceName'),
      supperAccount?: string(name='SupperAccount'),
      supperPassword?: string(name='SupperPassword'),
    }
  ](name='SupperAccountMapping'),
  extendedMapping?: [ 
    {
      srcDb?: string(name='SrcDb'),
      srcInstanceId?: string(name='SrcInstanceId'),
    }
  ](name='ExtendedMapping'),
}

model SubmitHotExpandTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitHotExpandTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandTaskResponseBody(name='body'),
}

async function submitHotExpandTaskWithOptions(request: SubmitHotExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitHotExpandTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitHotExpandTask(request: SubmitHotExpandTaskRequest): SubmitHotExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandTaskWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbInstType?: string(name='DbInstType'),
}

model SubmitSmoothExpandPreCheckResponseBody = {
  msg?: string(name='Msg'),
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSmoothExpandPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckResponseBody(name='body'),
}

async function submitSmoothExpandPreCheckWithOptions(request: SubmitSmoothExpandPreCheckRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandPreCheck', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandPreCheck(request: SubmitSmoothExpandPreCheckRequest): SubmitSmoothExpandPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model SubmitSmoothExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSmoothExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckTaskResponseBody(name='body'),
}

async function submitSmoothExpandPreCheckTaskWithOptions(request: SubmitSmoothExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandPreCheckTask(request: SubmitSmoothExpandPreCheckTaskRequest): SubmitSmoothExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckTaskWithOptions(request, runtime);
}

model SubmitSmoothExpandTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  transferTaskInfos?: [ 
    {
      dbName?: string(name='DbName'),
      instanceType?: string(name='InstanceType'),
      dstInstanceName?: string(name='DstInstanceName'),
      srcInstanceName?: string(name='SrcInstanceName'),
    }
  ](name='TransferTaskInfos'),
  rdsSuperInstances?: [ 
    {
      password?: string(name='Password'),
      rdsName?: string(name='RdsName'),
      accountName?: string(name='AccountName'),
    }
  ](name='RdsSuperInstances'),
}

model SubmitSmoothExpandTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSmoothExpandTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandTaskResponseBody(name='body'),
}

async function submitSmoothExpandTaskWithOptions(request: SubmitSmoothExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandTask(request: SubmitSmoothExpandTaskRequest): SubmitSmoothExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandTaskWithOptions(request, runtime);
}

model SubmitSqlFlashbackTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  traceId?: string(name='TraceId'),
  tableName?: string(name='TableName'),
  sqlType?: string(name='SqlType'),
  sqlPk?: string(name='SqlPk'),
  recallType?: int32(name='RecallType'),
  recallRestoreType?: int32(name='RecallRestoreType'),
}

model SubmitSqlFlashbackTaskResponseBody = {
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSqlFlashbackTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSqlFlashbackTaskResponseBody(name='body'),
}

async function submitSqlFlashbackTaskWithOptions(request: SubmitSqlFlashbackTaskRequest, runtime: Util.RuntimeOptions): SubmitSqlFlashbackTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSqlFlashbackTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSqlFlashbackTask(request: SubmitSqlFlashbackTaskRequest): SubmitSqlFlashbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSqlFlashbackTaskWithOptions(request, runtime);
}

model SubmitSwitchTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  parentJobId?: string(name='ParentJobId'),
  jobId?: string(name='JobId'),
  expandType?: string(name='ExpandType'),
}

model SubmitSwitchTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSwitchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSwitchTaskResponseBody(name='body'),
}

async function submitSwitchTaskWithOptions(request: SubmitSwitchTaskRequest, runtime: Util.RuntimeOptions): SubmitSwitchTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSwitchTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSwitchTask(request: SubmitSwitchTaskRequest): SubmitSwitchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSwitchTaskWithOptions(request, runtime);
}

model SwitchGlobalBroadcastTypeRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model SwitchGlobalBroadcastTypeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model SwitchGlobalBroadcastTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchGlobalBroadcastTypeResponseBody(name='body'),
}

async function switchGlobalBroadcastTypeWithOptions(request: SwitchGlobalBroadcastTypeRequest, runtime: Util.RuntimeOptions): SwitchGlobalBroadcastTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchGlobalBroadcastType', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchGlobalBroadcastType(request: SwitchGlobalBroadcastTypeRequest): SwitchGlobalBroadcastTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchGlobalBroadcastTypeWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateInstanceNetworkRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  srcInstanceNetworkType?: string(name='SrcInstanceNetworkType'),
  retainClassic?: boolean(name='RetainClassic'),
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
}

model UpdateInstanceNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInstanceNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceNetworkResponseBody(name='body'),
}

async function updateInstanceNetworkWithOptions(request: UpdateInstanceNetworkRequest, runtime: Util.RuntimeOptions): UpdateInstanceNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstanceNetwork', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstanceNetwork(request: UpdateInstanceNetworkRequest): UpdateInstanceNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceNetworkWithOptions(request, runtime);
}

model UpdateResourceGroupAttributeRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
}

model UpdateResourceGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupAttributeResponseBody(name='body'),
}

async function updateResourceGroupAttributeWithOptions(request: UpdateResourceGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateResourceGroupAttribute', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateResourceGroupAttribute(request: UpdateResourceGroupAttributeRequest): UpdateResourceGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupAttributeWithOptions(request, runtime);
}

model UpgradeHiStoreInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  historeInstanceId?: string(name='HistoreInstanceId'),
}

model UpgradeHiStoreInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model UpgradeHiStoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeHiStoreInstanceResponseBody(name='body'),
}

async function upgradeHiStoreInstanceWithOptions(request: UpgradeHiStoreInstanceRequest, runtime: Util.RuntimeOptions): UpgradeHiStoreInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeHiStoreInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeHiStoreInstance(request: UpgradeHiStoreInstanceRequest): UpgradeHiStoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeHiStoreInstanceWithOptions(request, runtime);
}

model UpgradeInstanceVersionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  rpm?: string(name='Rpm'),
}

model UpgradeInstanceVersionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

async function upgradeInstanceVersionWithOptions(request: UpgradeInstanceVersionRequest, runtime: Util.RuntimeOptions): UpgradeInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstanceVersion', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceVersionWithOptions(request, runtime);
}

model ValidateShardTaskRequest {
  regionId?: string(name='RegionId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
  taskType?: string(name='TaskType'),
}

model ValidateShardTaskResponseBody = {
  requestId?: string(name='RequestId'),
  list?: [ 
    {
      result?: int32(name='Result'),
      item?: string(name='Item'),
    }
  ](name='List'),
  success?: boolean(name='Success'),
}

model ValidateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateShardTaskResponseBody(name='body'),
}

async function validateShardTaskWithOptions(request: ValidateShardTaskRequest, runtime: Util.RuntimeOptions): ValidateShardTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateShardTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateShardTask(request: ValidateShardTaskRequest): ValidateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateShardTaskWithOptions(request, runtime);
}

