/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'drds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'drds.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'drds.aliyuncs.com',
    cn-beijing-finance-pop = 'drds.aliyuncs.com',
    cn-beijing-gov-1 = 'drds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'drds.aliyuncs.com',
    cn-chengdu = 'drds.aliyuncs.com',
    cn-edge-1 = 'drds.aliyuncs.com',
    cn-fujian = 'drds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'drds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'drds.aliyuncs.com',
    cn-hangzhou-finance = 'drds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'drds.aliyuncs.com',
    cn-hangzhou-test-306 = 'drds.aliyuncs.com',
    cn-hongkong-finance-pop = 'drds.aliyuncs.com',
    cn-qingdao-nebula = 'drds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'drds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'drds.aliyuncs.com',
    cn-shanghai-inner = 'drds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'drds.aliyuncs.com',
    cn-shenzhen-inner = 'drds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'drds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'drds.aliyuncs.com',
    cn-wuhan = 'drds.aliyuncs.com',
    cn-yushanfang = 'drds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'drds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'drds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'drds.aliyuncs.com',
    eu-central-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'drds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'drds.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'drds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('drds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ChangeAccountPasswordRequest {
  accountName?: string(name='AccountName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='Password'),
}

model ChangeAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeAccountPasswordResponseBody(name='body'),
}

async function changeAccountPasswordWithOptions(request: ChangeAccountPasswordRequest, runtime: Util.RuntimeOptions): ChangeAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeAccountPassword', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeAccountPassword(request: ChangeAccountPasswordRequest): ChangeAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAccountPasswordWithOptions(request, runtime);
}

model ChangeInstanceAzoneRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  drdsRegionId?: string(name='DrdsRegionId'),
  originAzoneId?: string(name='OriginAzoneId'),
  targetAzoneId?: string(name='TargetAzoneId'),
}

model ChangeInstanceAzoneResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeInstanceAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeInstanceAzoneResponseBody(name='body'),
}

async function changeInstanceAzoneWithOptions(request: ChangeInstanceAzoneRequest, runtime: Util.RuntimeOptions): ChangeInstanceAzoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeInstanceAzone', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeInstanceAzone(request: ChangeInstanceAzoneRequest): ChangeInstanceAzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeInstanceAzoneWithOptions(request, runtime);
}

model ChangeInstanceNetworkRequest {
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  retainClassic?: boolean(name='RetainClassic'),
  srcInstanceNetworkType?: string(name='SrcInstanceNetworkType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
}

model ChangeInstanceNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeInstanceNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeInstanceNetworkResponseBody(name='body'),
}

async function changeInstanceNetworkWithOptions(request: ChangeInstanceNetworkRequest, runtime: Util.RuntimeOptions): ChangeInstanceNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeInstanceNetwork', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeInstanceNetwork(request: ChangeInstanceNetworkRequest): ChangeInstanceNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeInstanceNetworkWithOptions(request, runtime);
}

model CheckConnectivityRequest {
  dbInfo?: map[string]any(name='DbInfo'),
  dbType?: int32(name='DbType'),
}

model CheckConnectivityShrinkRequest {
  dbInfoShrink?: string(name='DbInfo'),
  dbType?: int32(name='DbType'),
}

model CheckConnectivityResponseBody = {
  checkConnectivityResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='CheckConnectivityResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckConnectivityResponse = {
  headers: map[string]string(name='headers'),
  body: CheckConnectivityResponseBody(name='body'),
}

async function checkConnectivityWithOptions(tmpReq: CheckConnectivityRequest, runtime: Util.RuntimeOptions): CheckConnectivityResponse {
  Util.validateModel(tmpReq);
  var request = new CheckConnectivityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dbInfo)) {
    request.dbInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dbInfo, 'DbInfo', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckConnectivity', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkConnectivity(request: CheckConnectivityRequest): CheckConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkConnectivityWithOptions(request, runtime);
}

model CheckDrdsDbNameRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model CheckDrdsDbNameResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CheckDrdsDbNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDrdsDbNameResponseBody(name='body'),
}

async function checkDrdsDbNameWithOptions(request: CheckDrdsDbNameRequest, runtime: Util.RuntimeOptions): CheckDrdsDbNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDrdsDbName', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDrdsDbName(request: CheckDrdsDbNameRequest): CheckDrdsDbNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDrdsDbNameWithOptions(request, runtime);
}

model CheckExpandStatusRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model CheckExpandStatusResponseBody = {
  data?: {
    isActive?: boolean(name='IsActive'),
    msg?: string(name='Msg'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckExpandStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckExpandStatusResponseBody(name='body'),
}

async function checkExpandStatusWithOptions(request: CheckExpandStatusRequest, runtime: Util.RuntimeOptions): CheckExpandStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckExpandStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkExpandStatus(request: CheckExpandStatusRequest): CheckExpandStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkExpandStatusWithOptions(request, runtime);
}

model CheckNewTableNameValidRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: string(name='TableName'),
}

model CheckNewTableNameValidResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckNewTableNameValidResponse = {
  headers: map[string]string(name='headers'),
  body: CheckNewTableNameValidResponseBody(name='body'),
}

async function checkNewTableNameValidWithOptions(request: CheckNewTableNameValidRequest, runtime: Util.RuntimeOptions): CheckNewTableNameValidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckNewTableNameValid', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkNewTableNameValid(request: CheckNewTableNameValidRequest): CheckNewTableNameValidResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkNewTableNameValidWithOptions(request, runtime);
}

model CheckRdsSuperAccountRequest {
  accountName?: string(name='AccountName'),
  dbInstanceId?: string(name='DbInstanceId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='Password'),
}

model CheckRdsSuperAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckRdsSuperAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CheckRdsSuperAccountResponseBody(name='body'),
}

async function checkRdsSuperAccountWithOptions(request: CheckRdsSuperAccountRequest, runtime: Util.RuntimeOptions): CheckRdsSuperAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckRdsSuperAccount', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkRdsSuperAccount(request: CheckRdsSuperAccountRequest): CheckRdsSuperAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkRdsSuperAccountWithOptions(request, runtime);
}

model CheckSqlAuditEnableStatusRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model CheckSqlAuditEnableStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model CheckSqlAuditEnableStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSqlAuditEnableStatusResponseBody(name='body'),
}

async function checkSqlAuditEnableStatusWithOptions(request: CheckSqlAuditEnableStatusRequest, runtime: Util.RuntimeOptions): CheckSqlAuditEnableStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckSqlAuditEnableStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkSqlAuditEnableStatus(request: CheckSqlAuditEnableStatusRequest): CheckSqlAuditEnableStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSqlAuditEnableStatusWithOptions(request, runtime);
}

model ConfigureDrdsDbInstancesRequest {
  dbInstance?: [ 
    {
      masterDbInstanceId?: string(name='MasterDbInstanceId'),
      slaveDbInstanceId?: string(name='SlaveDbInstanceId'),
      slaveDbInstanceType?: string(name='SlaveDbInstanceType'),
    }
  ](name='DbInstance'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model ConfigureDrdsDbInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfigureDrdsDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureDrdsDbInstancesResponseBody(name='body'),
}

async function configureDrdsDbInstancesWithOptions(request: ConfigureDrdsDbInstancesRequest, runtime: Util.RuntimeOptions): ConfigureDrdsDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureDrdsDbInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureDrdsDbInstances(request: ConfigureDrdsDbInstancesRequest): ConfigureDrdsDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureDrdsDbInstancesWithOptions(request, runtime);
}

model CreateCustomDataExportPreCheckTaskRequest {
  exportParam?: map[string]any(name='ExportParam'),
}

model CreateCustomDataExportPreCheckTaskShrinkRequest {
  exportParamShrink?: string(name='ExportParam'),
}

model CreateCustomDataExportPreCheckTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateCustomDataExportPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomDataExportPreCheckTaskResponseBody(name='body'),
}

async function createCustomDataExportPreCheckTaskWithOptions(tmpReq: CreateCustomDataExportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataExportPreCheckTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCustomDataExportPreCheckTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.exportParam)) {
    request.exportParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exportParam, 'ExportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomDataExportPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomDataExportPreCheckTask(request: CreateCustomDataExportPreCheckTaskRequest): CreateCustomDataExportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataExportPreCheckTaskWithOptions(request, runtime);
}

model CreateCustomDataExportTaskRequest {
  exportParam?: map[string]any(name='ExportParam'),
}

model CreateCustomDataExportTaskShrinkRequest {
  exportParamShrink?: string(name='ExportParam'),
}

model CreateCustomDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateCustomDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomDataExportTaskResponseBody(name='body'),
}

async function createCustomDataExportTaskWithOptions(tmpReq: CreateCustomDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataExportTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCustomDataExportTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.exportParam)) {
    request.exportParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exportParam, 'ExportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomDataExportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomDataExportTask(request: CreateCustomDataExportTaskRequest): CreateCustomDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataExportTaskWithOptions(request, runtime);
}

model CreateCustomDataImportPreCheckTaskRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateCustomDataImportPreCheckTaskShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model CreateCustomDataImportPreCheckTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateCustomDataImportPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomDataImportPreCheckTaskResponseBody(name='body'),
}

async function createCustomDataImportPreCheckTaskWithOptions(tmpReq: CreateCustomDataImportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataImportPreCheckTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCustomDataImportPreCheckTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomDataImportPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomDataImportPreCheckTask(request: CreateCustomDataImportPreCheckTaskRequest): CreateCustomDataImportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataImportPreCheckTaskWithOptions(request, runtime);
}

model CreateCustomDataImportTaskRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateCustomDataImportTaskShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model CreateCustomDataImportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateCustomDataImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomDataImportTaskResponseBody(name='body'),
}

async function createCustomDataImportTaskWithOptions(tmpReq: CreateCustomDataImportTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataImportTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCustomDataImportTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomDataImportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomDataImportTask(request: CreateCustomDataImportTaskRequest): CreateCustomDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataImportTaskWithOptions(request, runtime);
}

model CreateDrdsDBRequest {
  accountName?: string(name='AccountName'),
  dbInstType?: string(name='DbInstType'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  encode?: string(name='Encode'),
  instDbName?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName'),
  password?: string(name='Password'),
  rdsInstance?: [ string ](name='RdsInstance'),
  rdsSuperAccount?: [ 
    {
      accountName?: string(name='AccountName'),
      dbInstanceId?: string(name='DbInstanceId'),
      password?: string(name='Password'),
    }
  ](name='RdsSuperAccount'),
  type?: string(name='Type'),
}

model CreateDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBResponseBody(name='body'),
}

async function createDrdsDBWithOptions(request: CreateDrdsDBRequest, runtime: Util.RuntimeOptions): CreateDrdsDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsDB', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBWithOptions(request, runtime);
}

model CreateDrdsDBPreCheckRequest {
  accountName?: string(name='AccountName'),
  dbInstType?: string(name='DbInstType'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  encode?: string(name='Encode'),
  instDbName?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName'),
  password?: string(name='Password'),
  rdsInstance?: [ string ](name='RdsInstance'),
  rdsSuperAccount?: [ 
    {
      accountName?: string(name='AccountName'),
      dbInstanceId?: string(name='DbInstanceId'),
      password?: string(name='Password'),
    }
  ](name='RdsSuperAccount'),
  type?: string(name='Type'),
}

model CreateDrdsDBPreCheckResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateDrdsDBPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBPreCheckResponseBody(name='body'),
}

async function createDrdsDBPreCheckWithOptions(request: CreateDrdsDBPreCheckRequest, runtime: Util.RuntimeOptions): CreateDrdsDBPreCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsDBPreCheck', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsDBPreCheck(request: CreateDrdsDBPreCheckRequest): CreateDrdsDBPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBPreCheckWithOptions(request, runtime);
}

model CreateDrdsDBPreviewRequest {
  accountName?: string(name='AccountName'),
  dbInstType?: string(name='DbInstType'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  instDbName?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName'),
  orderId?: string(name='OrderId'),
  rdsInstance?: [ string ](name='RdsInstance'),
  type?: string(name='Type'),
}

model CreateDrdsDBPreviewResponseBody = {
  items?: {
    item?: [ 
    {
      dbInstanceId?: string(name='DbInstanceId'),
      dbNames?: {
        dbName?: [ string ](name='DbName')
      }(name='DbNames'),
    }
  ](name='Item')
  }(name='Items'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsDBPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBPreviewResponseBody(name='body'),
}

async function createDrdsDBPreviewWithOptions(request: CreateDrdsDBPreviewRequest, runtime: Util.RuntimeOptions): CreateDrdsDBPreviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsDBPreview', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsDBPreview(request: CreateDrdsDBPreviewRequest): CreateDrdsDBPreviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBPreviewWithOptions(request, runtime);
}

model CreateDrdsInstanceRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  duration?: int32(name='Duration'),
  instanceSeries?: string(name='InstanceSeries'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  masterInstId?: string(name='MasterInstId'),
  mySQLVersion?: int32(name='MySQLVersion'),
  payType?: string(name='PayType'),
  pricingCycle?: string(name='PricingCycle'),
  quantity?: int32(name='Quantity'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  specification?: string(name='Specification'),
  type?: string(name='Type'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
  isHa?: boolean(name='isHa'),
}

model CreateDrdsInstanceResponseBody = {
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceIdList?: [ string ](name='drdsInstanceIdList')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsInstanceResponseBody(name='body'),
}

async function createDrdsInstanceWithOptions(request: CreateDrdsInstanceRequest, runtime: Util.RuntimeOptions): CreateDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsInstanceWithOptions(request, runtime);
}

model CreateEvaluateDataImportPreCheckTaskRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateEvaluateDataImportPreCheckTaskShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model CreateEvaluateDataImportPreCheckTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateEvaluateDataImportPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEvaluateDataImportPreCheckTaskResponseBody(name='body'),
}

async function createEvaluateDataImportPreCheckTaskWithOptions(tmpReq: CreateEvaluateDataImportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateDataImportPreCheckTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEvaluateDataImportPreCheckTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEvaluateDataImportPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEvaluateDataImportPreCheckTask(request: CreateEvaluateDataImportPreCheckTaskRequest): CreateEvaluateDataImportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateDataImportPreCheckTaskWithOptions(request, runtime);
}

model CreateEvaluateDataImportTaskRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateEvaluateDataImportTaskShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model CreateEvaluateDataImportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateEvaluateDataImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEvaluateDataImportTaskResponseBody(name='body'),
}

async function createEvaluateDataImportTaskWithOptions(tmpReq: CreateEvaluateDataImportTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateDataImportTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEvaluateDataImportTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEvaluateDataImportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEvaluateDataImportTask(request: CreateEvaluateDataImportTaskRequest): CreateEvaluateDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateDataImportTaskWithOptions(request, runtime);
}

model CreateEvaluatePreCheckTaskRequest {
  avgQpsGrowthScale?: int32(name='AvgQpsGrowthScale'),
  dataGrowthScale?: int32(name='DataGrowthScale'),
  dbInfo?: [ 
    {
      dbName?: string(name='DbName'),
      dbPassword?: string(name='DbPassword'),
      dbPort?: string(name='DbPort'),
      dbUser?: string(name='DbUser'),
      instId?: string(name='InstId'),
    }
  ](name='DbInfo'),
  evaluateHours?: int32(name='EvaluateHours'),
  taskName?: string(name='TaskName'),
}

model CreateEvaluatePreCheckTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateEvaluatePreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEvaluatePreCheckTaskResponseBody(name='body'),
}

async function createEvaluatePreCheckTaskWithOptions(request: CreateEvaluatePreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluatePreCheckTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEvaluatePreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEvaluatePreCheckTask(request: CreateEvaluatePreCheckTaskRequest): CreateEvaluatePreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluatePreCheckTaskWithOptions(request, runtime);
}

model CreateEvaluateTaskRequest {
  avgQpsGrowthScale?: int32(name='AvgQpsGrowthScale'),
  dataGrowthScale?: int32(name='DataGrowthScale'),
  dbInfo?: [ 
    {
      dbName?: string(name='DbName'),
      dbPassword?: string(name='DbPassword'),
      dbPort?: string(name='DbPort'),
      dbUser?: string(name='DbUser'),
      instId?: string(name='InstId'),
    }
  ](name='DbInfo'),
  evaluateHours?: int32(name='EvaluateHours'),
  taskName?: string(name='TaskName'),
}

model CreateEvaluateTaskResponseBody = {
  data?: {
    taskIds?: [ string ](name='TaskIds')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEvaluateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEvaluateTaskResponseBody(name='body'),
}

async function createEvaluateTaskWithOptions(request: CreateEvaluateTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEvaluateTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEvaluateTask(request: CreateEvaluateTaskRequest): CreateEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateTaskWithOptions(request, runtime);
}

model CreateInstanceAccountRequest {
  accountName?: string(name='AccountName'),
  dbPrivilege?: [ 
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='Password'),
}

model CreateInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceAccountResponseBody(name='body'),
}

async function createInstanceAccountWithOptions(request: CreateInstanceAccountRequest, runtime: Util.RuntimeOptions): CreateInstanceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstanceAccount', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstanceAccount(request: CreateInstanceAccountRequest): CreateInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceAccountWithOptions(request, runtime);
}

model CreateInstanceInternetAddressRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model CreateInstanceInternetAddressResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceInternetAddressResponseBody(name='body'),
}

async function createInstanceInternetAddressWithOptions(request: CreateInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): CreateInstanceInternetAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstanceInternetAddress', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstanceInternetAddress(request: CreateInstanceInternetAddressRequest): CreateInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceInternetAddressWithOptions(request, runtime);
}

model CreateMyCatEvaluateRequest {
  busPeakQps?: long(name='BusPeakQps'),
  capacityIncPercent?: int32(name='CapacityIncPercent'),
  importDbList?: [ string ](name='ImportDbList'),
  qpsIncPercent?: int32(name='QpsIncPercent'),
  regionId?: string(name='RegionId'),
  ruleUrl?: string(name='RuleUrl'),
  schemaUrl?: string(name='SchemaUrl'),
  sequenceType?: int32(name='SequenceType'),
  serverUrl?: string(name='ServerUrl'),
  taskName?: string(name='TaskName'),
}

model CreateMyCatEvaluateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskIdList?: [ string ](name='TaskIdList'),
}

model CreateMyCatEvaluateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMyCatEvaluateResponseBody(name='body'),
}

async function createMyCatEvaluateWithOptions(request: CreateMyCatEvaluateRequest, runtime: Util.RuntimeOptions): CreateMyCatEvaluateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMyCatEvaluate', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMyCatEvaluate(request: CreateMyCatEvaluateRequest): CreateMyCatEvaluateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMyCatEvaluateWithOptions(request, runtime);
}

model CreateOrderForRdsRequest {
  params?: string(name='Params'),
  regionId?: string(name='RegionId'),
}

model CreateOrderForRdsResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOrderForRdsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderForRdsResponseBody(name='body'),
}

async function createOrderForRdsWithOptions(request: CreateOrderForRdsRequest, runtime: Util.RuntimeOptions): CreateOrderForRdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrderForRds', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrderForRds(request: CreateOrderForRdsRequest): CreateOrderForRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderForRdsWithOptions(request, runtime);
}

model CreateShardTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
  taskType?: string(name='TaskType'),
}

model CreateShardTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShardTaskResponseBody(name='body'),
}

async function createShardTaskWithOptions(request: CreateShardTaskRequest, runtime: Util.RuntimeOptions): CreateShardTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateShardTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createShardTask(request: CreateShardTaskRequest): CreateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createShardTaskWithOptions(request, runtime);
}

model DescribeBackMenuRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackMenuResponseBody = {
  list?: {
    list?: [ 
    {
      menuName?: string(name='MenuName'),
      support?: boolean(name='Support'),
    }
  ](name='list')
  }(name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackMenuResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackMenuResponseBody(name='body'),
}

async function describeBackMenuWithOptions(request: DescribeBackMenuRequest, runtime: Util.RuntimeOptions): DescribeBackMenuResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackMenu', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackMenu(request: DescribeBackMenuRequest): DescribeBackMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackMenuWithOptions(request, runtime);
}

model DescribeBackupDbsRequest {
  backupId?: string(name='BackupId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredRestoreTime?: string(name='PreferredRestoreTime'),
}

model DescribeBackupDbsResponseBody = {
  dbNames?: {
    dbName?: [ string ](name='dbName')
  }(name='DbNames'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDbsResponseBody(name='body'),
}

async function describeBackupDbsWithOptions(request: DescribeBackupDbsRequest, runtime: Util.RuntimeOptions): DescribeBackupDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupDbs(request: DescribeBackupDbsRequest): DescribeBackupDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDbsWithOptions(request, runtime);
}

model DescribeBackupLocalRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupLocalResponseBody = {
  backupPolicyDO?: {
    backupAppName?: string(name='BackupAppName'),
    backupDbName?: string(name='BackupDbName'),
    backupLevel?: string(name='BackupLevel'),
    backupLog?: string(name='BackupLog'),
    backupMode?: string(name='BackupMode'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
  }(name='BackupPolicyDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupLocalResponseBody(name='body'),
}

async function describeBackupLocalWithOptions(request: DescribeBackupLocalRequest, runtime: Util.RuntimeOptions): DescribeBackupLocalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupLocal', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupLocal(request: DescribeBackupLocalRequest): DescribeBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupLocalWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDO?: {
    backupAppName?: string(name='BackupAppName'),
    backupDbName?: string(name='BackupDbName'),
    backupLevel?: string(name='BackupLevel'),
    backupLog?: string(name='BackupLog'),
    backupMode?: string(name='BackupMode'),
    backupPolicyMode?: string(name='BackupPolicyMode'),
    backupRetentionPeriod?: long(name='BackupRetentionPeriod'),
    backupType?: string(name='BackupType'),
    dataBackupRetentionPeriod?: long(name='DataBackupRetentionPeriod'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    highSpaceUsageProtection?: long(name='HighSpaceUsageProtection'),
    localLogRetentionHours?: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace?: long(name='LocalLogRetentionSpace'),
    logBackupRetentionPeriod?: long(name='LogBackupRetentionPeriod'),
    nextBackupActuallyTime?: string(name='NextBackupActuallyTime'),
    preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
    preferredBackupTime?: string(name='PreferredBackupTime'),
  }(name='BackupPolicyDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupSetsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
}

model DescribeBackupSetsResponseBody = {
  backupSets?: {
    backupSet?: [ 
    {
      backupConsitentTime?: string(name='BackupConsitentTime'),
      backupDbs?: {
        backupDb?: [ string ](name='backupDb')
      }(name='BackupDbs'),
      backupEndTime?: long(name='BackupEndTime'),
      backupLevel?: string(name='BackupLevel'),
      backupMode?: string(name='BackupMode'),
      backupStartTime?: long(name='BackupStartTime'),
      backupTotalSize?: string(name='BackupTotalSize'),
      backupType?: string(name='BackupType'),
      enableRecovery?: boolean(name='EnableRecovery'),
      id?: string(name='Id'),
      status?: long(name='Status'),
    }
  ](name='backupSet')
  }(name='BackupSets'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetsResponseBody(name='body'),
}

async function describeBackupSetsWithOptions(request: DescribeBackupSetsRequest, runtime: Util.RuntimeOptions): DescribeBackupSetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupSets', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupSets(request: DescribeBackupSetsRequest): DescribeBackupSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetsWithOptions(request, runtime);
}

model DescribeBackupTimesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeBackupTimesResponseBody = {
  requestId?: string(name='RequestId'),
  restoreTime?: {
    endTime?: string(name='EndTime'),
    startTime?: string(name='StartTime'),
  }(name='RestoreTime'),
  success?: boolean(name='Success'),
}

model DescribeBackupTimesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTimesResponseBody(name='body'),
}

async function describeBackupTimesWithOptions(request: DescribeBackupTimesRequest, runtime: Util.RuntimeOptions): DescribeBackupTimesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupTimes', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupTimes(request: DescribeBackupTimesRequest): DescribeBackupTimesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTimesWithOptions(request, runtime);
}

model DescribeBatchEvaluateTaskReportRequest {
  batchEvaluateTaskId?: long(name='BatchEvaluateTaskId'),
}

model DescribeBatchEvaluateTaskReportResponseBody = {
  data?: {
    evaluateResults?: [ 
    {
      allSqlCount?: int32(name='AllSqlCount'),
      dbName?: string(name='DbName'),
      drdsCount?: int32(name='DrdsCount'),
      drdsType?: string(name='DrdsType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      instId?: int32(name='InstId'),
      rdsCount?: int32(name='RdsCount'),
      rdsInstInfos?: {
        rdsInstInfos?: [ 
        {
          avgQpsGrowthScale?: int32(name='AvgQpsGrowthScale'),
          dataGrowthScale?: int32(name='DataGrowthScale'),
          instId?: string(name='InstId'),
          rdsPeakIopsWeekly?: int32(name='RdsPeakIopsWeekly'),
          rdsPeakQpsWeekly?: int32(name='RdsPeakQpsWeekly'),
          rdsPeakSessionsWeekly?: int32(name='RdsPeakSessionsWeekly'),
          rdsUsedSpace?: int32(name='RdsUsedSpace'),
        }
      ](name='RdsInstInfos')
      }(name='RdsInstInfos'),
      rdsTotalSpace?: string(name='RdsTotalSpace'),
      rdsType?: string(name='RdsType'),
      slowSqlCount?: int32(name='SlowSqlCount'),
      tableShardResults?: {
        tableShardResults?: [ 
        {
          createTableSql?: string(name='CreateTableSql'),
          dbShardKey?: string(name='DbShardKey'),
          dbShardMethod?: string(name='DbShardMethod'),
          dbpartitions?: int32(name='Dbpartitions'),
          originDbShardMethod?: string(name='OriginDbShardMethod'),
          originTbShardMethod?: string(name='OriginTbShardMethod'),
          rowCount?: int32(name='RowCount'),
          shardKeyType?: string(name='ShardKeyType'),
          shardType?: string(name='ShardType'),
          sqlCount?: int32(name='SqlCount'),
          table?: string(name='Table'),
          tbShardKey?: string(name='TbShardKey'),
          tbShardMethod?: string(name='TbShardMethod'),
          tbpartitions?: int32(name='Tbpartitions'),
        }
      ](name='TableShardResults')
      }(name='TableShardResults'),
      taskId?: int32(name='TaskId'),
      taskName?: string(name='TaskName'),
      taskStatus?: string(name='TaskStatus'),
    }
  ](name='EvaluateResults')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBatchEvaluateTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBatchEvaluateTaskReportResponseBody(name='body'),
}

async function describeBatchEvaluateTaskReportWithOptions(request: DescribeBatchEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): DescribeBatchEvaluateTaskReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBatchEvaluateTaskReport', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBatchEvaluateTaskReport(request: DescribeBatchEvaluateTaskReportRequest): DescribeBatchEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchEvaluateTaskReportWithOptions(request, runtime);
}

model DescribeBroadcastTablesRequest {
  currentPage?: int32(name='CurrentPage'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  regionId?: string(name='RegionId'),
}

model DescribeBroadcastTablesResponseBody = {
  isShard?: boolean(name='IsShard'),
  list?: [ 
    {
      broadcast?: boolean(name='Broadcast'),
      broadcastType?: string(name='BroadcastType'),
      dbInstType?: int32(name='DbInstType'),
      isShard?: boolean(name='IsShard'),
      status?: int32(name='Status'),
      table?: string(name='Table'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBroadcastTablesResponseBody(name='body'),
}

async function describeBroadcastTablesWithOptions(request: DescribeBroadcastTablesRequest, runtime: Util.RuntimeOptions): DescribeBroadcastTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBroadcastTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBroadcastTables(request: DescribeBroadcastTablesRequest): DescribeBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBroadcastTablesWithOptions(request, runtime);
}

model DescribeCanExpandInstanceDetailListRequest {
  currentPlan?: string(name='CurrentPlan'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeCanExpandInstanceDetailListResponseBody = {
  data?: {
    itemData?: [ 
    {
      dbList?: {
        db?: [ string ](name='db')
      }(name='DbList'),
      srcInstance?: string(name='SrcInstance'),
    }
  ](name='itemData')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCanExpandInstanceDetailListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCanExpandInstanceDetailListResponseBody(name='body'),
}

async function describeCanExpandInstanceDetailListWithOptions(request: DescribeCanExpandInstanceDetailListRequest, runtime: Util.RuntimeOptions): DescribeCanExpandInstanceDetailListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCanExpandInstanceDetailList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCanExpandInstanceDetailList(request: DescribeCanExpandInstanceDetailListRequest): DescribeCanExpandInstanceDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCanExpandInstanceDetailListWithOptions(request, runtime);
}

model DescribeCustomDataExportSrcDstTablesRequest {
  exportParam?: map[string]any(name='ExportParam'),
}

model DescribeCustomDataExportSrcDstTablesShrinkRequest {
  exportParamShrink?: string(name='ExportParam'),
}

model DescribeCustomDataExportSrcDstTablesResponseBody = {
  dataExportSrcDstTables?: {
    dstTables?: {
      dstTables?: [ string ](name='DstTables')
    }(name='DstTables'),
    srcTables?: {
      srcTables?: [ string ](name='SrcTables')
    }(name='SrcTables'),
  }(name='DataExportSrcDstTables'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCustomDataExportSrcDstTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomDataExportSrcDstTablesResponseBody(name='body'),
}

async function describeCustomDataExportSrcDstTablesWithOptions(tmpReq: DescribeCustomDataExportSrcDstTablesRequest, runtime: Util.RuntimeOptions): DescribeCustomDataExportSrcDstTablesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeCustomDataExportSrcDstTablesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.exportParam)) {
    request.exportParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exportParam, 'ExportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCustomDataExportSrcDstTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCustomDataExportSrcDstTables(request: DescribeCustomDataExportSrcDstTablesRequest): DescribeCustomDataExportSrcDstTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomDataExportSrcDstTablesWithOptions(request, runtime);
}

model DescribeCustomDataImportSrcDstTablesRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model DescribeCustomDataImportSrcDstTablesShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model DescribeCustomDataImportSrcDstTablesResponseBody = {
  dataImportSrcDstTables?: {
    dstTables?: {
      dstTables?: [ string ](name='DstTables')
    }(name='DstTables'),
    srcTables?: {
      srcTables?: [ string ](name='SrcTables')
    }(name='SrcTables'),
  }(name='DataImportSrcDstTables'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCustomDataImportSrcDstTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomDataImportSrcDstTablesResponseBody(name='body'),
}

async function describeCustomDataImportSrcDstTablesWithOptions(tmpReq: DescribeCustomDataImportSrcDstTablesRequest, runtime: Util.RuntimeOptions): DescribeCustomDataImportSrcDstTablesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeCustomDataImportSrcDstTablesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCustomDataImportSrcDstTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCustomDataImportSrcDstTables(request: DescribeCustomDataImportSrcDstTablesRequest): DescribeCustomDataImportSrcDstTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomDataImportSrcDstTablesWithOptions(request, runtime);
}

model DescribeDataExportPreCheckResultRequest {
  taskId?: long(name='TaskId'),
}

model DescribeDataExportPreCheckResultResponseBody = {
  preCheckResult?: {
    preCheckName?: string(name='PreCheckName'),
    state?: string(name='State'),
    subCheckItems?: {
      subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        errorMsgParams?: {
          errorMsgParams?: [ string ](name='ErrorMsgParams')
        }(name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
        state?: string(name='State'),
      }
    ](name='SubCheckItems')
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDataExportPreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataExportPreCheckResultResponseBody(name='body'),
}

async function describeDataExportPreCheckResultWithOptions(request: DescribeDataExportPreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeDataExportPreCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataExportPreCheckResult', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataExportPreCheckResult(request: DescribeDataExportPreCheckResultRequest): DescribeDataExportPreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportPreCheckResultWithOptions(request, runtime);
}

model DescribeDataExportTaskReportRequest {
  taskId?: long(name='TaskId'),
}

model DescribeDataExportTaskReportResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDataExportTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataExportTaskReportResponseBody(name='body'),
}

async function describeDataExportTaskReportWithOptions(request: DescribeDataExportTaskReportRequest, runtime: Util.RuntimeOptions): DescribeDataExportTaskReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataExportTaskReport', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataExportTaskReport(request: DescribeDataExportTaskReportRequest): DescribeDataExportTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportTaskReportWithOptions(request, runtime);
}

model DescribeDataExportTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDataExportTasksResponseBody = {
  data?: {
    dataExportTask?: [ 
    {
      batchEvaluateTaskId?: int32(name='BatchEvaluateTaskId'),
      createDbProgress?: int32(name='CreateDbProgress'),
      createTablesProgress?: int32(name='CreateTablesProgress'),
      dstDbName?: string(name='DstDbName'),
      dstInstId?: string(name='DstInstId'),
      evaluateTaskId?: int32(name='EvaluateTaskId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: int32(name='Id'),
      jingweiProgress?: {
        full?: {
          needTime?: int32(name='NeedTime'),
          progress?: int32(name='Progress'),
          tps?: int32(name='Tps'),
          transferCount?: int32(name='TransferCount'),
        }(name='Full'),
        fullRunning?: boolean(name='FullRunning'),
        increment?: {
          delay?: int32(name='Delay'),
          tps?: int32(name='Tps'),
          transferCount?: int32(name='TransferCount'),
        }(name='Increment'),
        incrementRunning?: boolean(name='IncrementRunning'),
      }(name='JingweiProgress'),
      progress?: int32(name='Progress'),
      srcDbName?: string(name='SrcDbName'),
      srcInstId?: string(name='SrcInstId'),
      stage?: string(name='Stage'),
      status?: string(name='Status'),
      taskName?: string(name='TaskName'),
      type?: int32(name='Type'),
    }
  ](name='DataExportTask')
  }(name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeDataExportTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataExportTasksResponseBody(name='body'),
}

async function describeDataExportTasksWithOptions(request: DescribeDataExportTasksRequest, runtime: Util.RuntimeOptions): DescribeDataExportTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataExportTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataExportTasks(request: DescribeDataExportTasksRequest): DescribeDataExportTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportTasksWithOptions(request, runtime);
}

model DescribeDataImportPreCheckResultRequest {
  taskId?: long(name='TaskId'),
}

model DescribeDataImportPreCheckResultResponseBody = {
  preCheckResult?: {
    preCheckName?: string(name='PreCheckName'),
    state?: string(name='State'),
    subCheckItems?: {
      subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        errorMsgParams?: {
          errorMsgParams?: [ string ](name='ErrorMsgParams')
        }(name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
        state?: string(name='State'),
      }
    ](name='SubCheckItems')
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDataImportPreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataImportPreCheckResultResponseBody(name='body'),
}

async function describeDataImportPreCheckResultWithOptions(request: DescribeDataImportPreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeDataImportPreCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataImportPreCheckResult', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataImportPreCheckResult(request: DescribeDataImportPreCheckResultRequest): DescribeDataImportPreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportPreCheckResultWithOptions(request, runtime);
}

model DescribeDataImportTaskReportRequest {
  taskId?: long(name='TaskId'),
}

model DescribeDataImportTaskReportResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDataImportTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataImportTaskReportResponseBody(name='body'),
}

async function describeDataImportTaskReportWithOptions(request: DescribeDataImportTaskReportRequest, runtime: Util.RuntimeOptions): DescribeDataImportTaskReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataImportTaskReport', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataImportTaskReport(request: DescribeDataImportTaskReportRequest): DescribeDataImportTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportTaskReportWithOptions(request, runtime);
}

model DescribeDataImportTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDataImportTasksResponseBody = {
  data?: {
    dataImportTask?: [ 
    {
      batchEvaluateTaskId?: int32(name='BatchEvaluateTaskId'),
      createDbProgress?: int32(name='CreateDbProgress'),
      createTablesProgress?: int32(name='CreateTablesProgress'),
      dstDbName?: string(name='DstDbName'),
      dstInstId?: string(name='DstInstId'),
      evaluateTaskId?: int32(name='EvaluateTaskId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: int32(name='Id'),
      jingweiProgress?: {
        full?: {
          needTime?: int32(name='NeedTime'),
          progress?: int32(name='Progress'),
          tps?: int32(name='Tps'),
          transferCount?: int32(name='TransferCount'),
        }(name='Full'),
        fullRunning?: boolean(name='FullRunning'),
        increment?: {
          delay?: int32(name='Delay'),
          tps?: int32(name='Tps'),
          transferCount?: int32(name='TransferCount'),
        }(name='Increment'),
        incrementRunning?: boolean(name='IncrementRunning'),
      }(name='JingweiProgress'),
      progress?: int32(name='Progress'),
      srcDbName?: string(name='SrcDbName'),
      srcInstId?: string(name='SrcInstId'),
      stage?: string(name='Stage'),
      status?: string(name='Status'),
      taskName?: string(name='TaskName'),
      type?: int32(name='Type'),
    }
  ](name='DataImportTask')
  }(name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeDataImportTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataImportTasksResponseBody(name='body'),
}

async function describeDataImportTasksWithOptions(request: DescribeDataImportTasksRequest, runtime: Util.RuntimeOptions): DescribeDataImportTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataImportTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataImportTasks(request: DescribeDataImportTasksRequest): DescribeDataImportTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportTasksWithOptions(request, runtime);
}

model DescribeDbInstanceDbsRequest {
  accountName?: string(name='AccountName'),
  dbInstType?: string(name='DbInstType'),
  dbInstanceId?: string(name='DbInstanceId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='Password'),
}

model DescribeDbInstanceDbsResponseBody = {
  databases?: {
    database?: [ 
    {
      dbName?: string(name='DbName'),
      description?: string(name='Description'),
      status?: int32(name='Status'),
    }
  ](name='Database')
  }(name='Databases'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDbInstanceDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstanceDbsResponseBody(name='body'),
}

async function describeDbInstanceDbsWithOptions(request: DescribeDbInstanceDbsRequest, runtime: Util.RuntimeOptions): DescribeDbInstanceDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDbInstanceDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDbInstanceDbs(request: DescribeDbInstanceDbsRequest): DescribeDbInstanceDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstanceDbsWithOptions(request, runtime);
}

model DescribeDbInstancesRequest {
  dbInstType?: string(name='DbInstType'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  search?: string(name='Search'),
}

model DescribeDbInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: int32(name='DBInstanceStatus'),
      DBInstanceType?: string(name='DBInstanceType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      readOnlyDBInstanceId?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceId'),
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstance')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbInstancesResponseBody(name='body'),
}

async function describeDbInstancesWithOptions(request: DescribeDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDbInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDbInstances(request: DescribeDbInstancesRequest): DescribeDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsDBRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDBResponseBody = {
  data?: {
    createTime?: string(name='CreateTime'),
    dbInstType?: string(name='DbInstType'),
    dbName?: string(name='DbName'),
    instRole?: string(name='InstRole'),
    mode?: string(name='Mode'),
    schema?: string(name='Schema'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBResponseBody(name='body'),
}

async function describeDrdsDBWithOptions(request: DescribeDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDB', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBWithOptions(request, runtime);
}

model DescribeDrdsDBClusterRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDBClusterResponseBody = {
  dbInstance?: {
    DBInstanceId?: string(name='DBInstanceId'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    DBNodes?: {
      DBNode?: [ 
      {
        DBNodeId?: string(name='DBNodeId'),
        DBNodeRole?: string(name='DBNodeRole'),
        DBNodeStatus?: string(name='DBNodeStatus'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='DBNode')
    }(name='DBNodes'),
    dbInstType?: string(name='DbInstType'),
    endpoints?: {
      endpoint?: [ 
      {
        endpointId?: string(name='EndpointId'),
        nodeIds?: string(name='NodeIds'),
        readWeight?: int32(name='ReadWeight'),
      }
    ](name='Endpoint')
    }(name='Endpoints'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    expireTime?: string(name='ExpireTime'),
    networkType?: string(name='NetworkType'),
    payType?: string(name='PayType'),
    port?: int32(name='Port'),
    rdsInstType?: string(name='RdsInstType'),
    readMode?: string(name='ReadMode'),
    remainDays?: string(name='RemainDays'),
  }(name='DbInstance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBClusterResponseBody(name='body'),
}

async function describeDrdsDBClusterWithOptions(request: DescribeDrdsDBClusterRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBCluster', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBCluster(request: DescribeDrdsDBClusterRequest): DescribeDrdsDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBClusterWithOptions(request, runtime);
}

model DescribeDrdsDBIpWhiteListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  groupName?: string(name='GroupName'),
}

model DescribeDrdsDBIpWhiteListResponseBody = {
  ipWhiteList?: {
    ip?: [ string ](name='Ip')
  }(name='IpWhiteList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBIpWhiteListResponseBody(name='body'),
}

async function describeDrdsDBIpWhiteListWithOptions(request: DescribeDrdsDBIpWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBIpWhiteList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBIpWhiteListWithOptions(request, runtime);
}

model DescribeDrdsDBsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsDBsResponseBody = {
  data?: {
    db?: [ 
    {
      createTime?: string(name='CreateTime'),
      dbInstType?: string(name='DbInstType'),
      dbName?: string(name='DbName'),
      mode?: string(name='Mode'),
      schema?: string(name='Schema'),
      status?: string(name='Status'),
    }
  ](name='Db')
  }(name='Data'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBsResponseBody(name='body'),
}

async function describeDrdsDBsWithOptions(request: DescribeDrdsDBsRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDBs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBsWithOptions(request, runtime);
}

model DescribeDrdsDbInstanceRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDbInstanceResponseBody = {
  dbInstance?: {
    connectUrl?: string(name='ConnectUrl'),
    DBInstanceId?: string(name='DBInstanceId'),
    DBInstanceStatus?: string(name='DBInstanceStatus'),
    dbInstType?: string(name='DbInstType'),
    dmInstanceId?: string(name='DmInstanceId'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    expireTime?: string(name='ExpireTime'),
    networkType?: string(name='NetworkType'),
    payType?: string(name='PayType'),
    port?: int32(name='Port'),
    rdsInstType?: string(name='RdsInstType'),
    readOnlyInstances?: {
      readOnlyInstance?: [ 
      {
        connectUrl?: string(name='ConnectUrl'),
        DBInstanceId?: string(name='DBInstanceId'),
        DBInstanceStatus?: string(name='DBInstanceStatus'),
        dbInstType?: string(name='DbInstType'),
        dmInstanceId?: string(name='DmInstanceId'),
        engine?: string(name='Engine'),
        engineVersion?: string(name='EngineVersion'),
        expireTime?: string(name='ExpireTime'),
        networkType?: string(name='NetworkType'),
        payType?: string(name='PayType'),
        port?: int32(name='Port'),
        rdsInstType?: string(name='RdsInstType'),
        readWeight?: int32(name='ReadWeight'),
        remainDays?: string(name='RemainDays'),
        versionAction?: int32(name='VersionAction'),
      }
    ](name='ReadOnlyInstance')
    }(name='ReadOnlyInstances'),
    readWeight?: int32(name='ReadWeight'),
    remainDays?: string(name='RemainDays'),
  }(name='DbInstance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstanceResponseBody(name='body'),
}

async function describeDrdsDbInstanceWithOptions(request: DescribeDrdsDbInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbInstance(request: DescribeDrdsDbInstanceRequest): DescribeDrdsDbInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstanceWithOptions(request, runtime);
}

model DescribeDrdsDbInstancesRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDrdsDbInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      dbInstType?: string(name='DbInstType'),
      dmInstanceId?: string(name='DmInstanceId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstType?: string(name='RdsInstType'),
      readOnlyInstances?: {
        readOnlyInstance?: [ 
        {
          connectUrl?: string(name='ConnectUrl'),
          DBInstanceStatus?: string(name='DBInstanceStatus'),
          dbInstType?: string(name='DbInstType'),
          dmInstanceId?: string(name='DmInstanceId'),
          engine?: string(name='Engine'),
          engineVersion?: string(name='EngineVersion'),
          expireTime?: string(name='ExpireTime'),
          instanceName?: string(name='InstanceName'),
          networkType?: string(name='NetworkType'),
          payType?: string(name='PayType'),
          port?: int32(name='Port'),
          rdsInstType?: string(name='RdsInstType'),
          readWeight?: int32(name='ReadWeight'),
          remainDays?: int32(name='RemainDays'),
        }
      ](name='ReadOnlyInstance')
      }(name='ReadOnlyInstances'),
      readWeight?: int32(name='ReadWeight'),
      remainDays?: int32(name='RemainDays'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbInstancesResponseBody(name='body'),
}

async function describeDrdsDbInstancesWithOptions(request: DescribeDrdsDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbInstances(request: DescribeDrdsDbInstancesRequest): DescribeDrdsDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsDbRdsNameListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDbRdsNameListResponseBody = {
  instanceNameList?: {
    instanceName?: [ string ](name='InstanceName')
  }(name='InstanceNameList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDbRdsNameListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbRdsNameListResponseBody(name='body'),
}

async function describeDrdsDbRdsNameListWithOptions(request: DescribeDrdsDbRdsNameListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbRdsNameListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbRdsNameList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbRdsNameList(request: DescribeDrdsDbRdsNameListRequest): DescribeDrdsDbRdsNameListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbRdsNameListWithOptions(request, runtime);
}

model DescribeDrdsDbSpecAndPriceRequest {
  DBName?: string(name='DBName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsDbSpecAndPriceResponseBody = {
  data?: {
    drdsDbPrice?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      tradePrice?: float(name='TradePrice'),
    }(name='DrdsDbPrice'),
    drdsInstance?: {
      drdsInstanceId?: string(name='DrdsInstanceId'),
      instRole?: string(name='InstRole'),
      instanceSeries?: string(name='InstanceSeries'),
      instanceSpec?: string(name='InstanceSpec'),
      machineType?: string(name='MachineType'),
      networkType?: string(name='NetworkType'),
      productVersion?: string(name='ProductVersion'),
      protocolType?: int32(name='ProtocolType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      versionAction?: string(name='VersionAction'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }(name='DrdsInstance'),
    rdsInstanceSpecsAndPrices?: [ 
      {
        rdsPrice?: {
          coupons?: string(name='Coupons'),
          currency?: string(name='Currency'),
          discountPrice?: float(name='DiscountPrice'),
          originalPrice?: float(name='OriginalPrice'),
          ruleIds?: [ string ](name='RuleIds'),
          tradePrice?: float(name='TradePrice'),
        }(name='RdsPrice'),
        storageInstance?: {
          connectUrl?: string(name='ConnectUrl'),
          DBInstType?: string(name='DBInstType'),
          DBInstanceCPU?: string(name='DBInstanceCPU'),
          DBInstanceClass?: string(name='DBInstanceClass'),
          DBInstanceClassType?: string(name='DBInstanceClassType'),
          DBInstanceDescription?: string(name='DBInstanceDescription'),
          DBInstanceId?: string(name='DBInstanceId'),
          DBInstanceMemory?: int32(name='DBInstanceMemory'),
          DBInstanceStatus?: int32(name='DBInstanceStatus'),
          DBInstanceStorage?: int32(name='DBInstanceStorage'),
          DBInstanceStorageType?: string(name='DBInstanceStorageType'),
          engine?: string(name='Engine'),
          engineVersion?: string(name='EngineVersion'),
          expireTime?: string(name='ExpireTime'),
          networkType?: string(name='NetworkType'),
          payType?: string(name='PayType'),
          port?: int32(name='Port'),
          RDSInstType?: string(name='RDSInstType'),
          readWeight?: int32(name='ReadWeight'),
          regionId?: string(name='RegionId'),
          remainDays?: int32(name='RemainDays'),
          zoneId?: string(name='ZoneId'),
        }(name='StorageInstance'),
      }
    ](name='RdsInstanceSpecsAndPrices'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDrdsDbSpecAndPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbSpecAndPriceResponseBody(name='body'),
}

async function describeDrdsDbSpecAndPriceWithOptions(request: DescribeDrdsDbSpecAndPriceRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbSpecAndPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbSpecAndPrice', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbSpecAndPrice(request: DescribeDrdsDbSpecAndPriceRequest): DescribeDrdsDbSpecAndPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbSpecAndPriceWithOptions(request, runtime);
}

model DescribeDrdsDbTasksRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsDbTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      allowCancel?: boolean(name='AllowCancel'),
      dbComputeLength?: int32(name='DbComputeLength'),
      detailTaskId?: string(name='DetailTaskId'),
      expandType?: string(name='ExpandType'),
      gmtCreate?: long(name='GmtCreate'),
      label?: string(name='Label'),
      parentJobId?: string(name='ParentJobId'),
      progress?: int32(name='Progress'),
      showProgress?: boolean(name='ShowProgress'),
      targetId?: long(name='TargetId'),
      taskDetail?: string(name='TaskDetail'),
      taskName?: string(name='TaskName'),
      taskPhase?: string(name='TaskPhase'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
      tbComputeLength?: int32(name='TbComputeLength'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDrdsDbTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDbTasksResponseBody(name='body'),
}

async function describeDrdsDbTasksWithOptions(request: DescribeDrdsDbTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsDbTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsDbTasks(request: DescribeDrdsDbTasksRequest): DescribeDrdsDbTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbTasksWithOptions(request, runtime);
}

model DescribeDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceResponseBody = {
  data?: {
    commodityCode?: string(name='CommodityCode'),
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    expireDate?: long(name='ExpireDate'),
    instRole?: string(name='InstRole'),
    instanceSeries?: string(name='InstanceSeries'),
    instanceSpec?: string(name='InstanceSpec'),
    label?: string(name='Label'),
    machineType?: string(name='MachineType'),
    masterInstanceId?: string(name='MasterInstanceId'),
    mysqlVersion?: int32(name='MysqlVersion'),
    networkType?: string(name='NetworkType'),
    orderInstanceId?: string(name='OrderInstanceId'),
    productVersion?: string(name='ProductVersion'),
    readOnlyDBInstanceIds?: {
      readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
    }(name='ReadOnlyDBInstanceIds'),
    regionId?: string(name='RegionId'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status'),
    storageType?: string(name='StorageType'),
    type?: string(name='Type'),
    version?: long(name='Version'),
    versionAction?: string(name='VersionAction'),
    vips?: {
      vip?: [ 
      {
        dns?: string(name='Dns'),
        expireDays?: long(name='ExpireDays'),
        port?: string(name='Port'),
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceResponseBody(name='body'),
}

async function describeDrdsInstanceWithOptions(request: DescribeDrdsInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceWithOptions(request, runtime);
}

model DescribeDrdsInstanceDbMonitorRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  key?: string(name='Key'),
  regionId?: string(name='RegionId'),
  startTime?: long(name='StartTime'),
}

model DescribeDrdsInstanceDbMonitorResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceDbMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceDbMonitorWithOptions(request: DescribeDrdsInstanceDbMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceDbMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceDbMonitor', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceDbMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceLevelTasksRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsInstanceLevelTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      allowCancel?: boolean(name='AllowCancel'),
      errMsg?: string(name='ErrMsg'),
      gmtCreate?: long(name='GmtCreate'),
      progress?: int32(name='Progress'),
      progressDescription?: string(name='ProgressDescription'),
      showProgress?: boolean(name='ShowProgress'),
      targetId?: long(name='TargetId'),
      taskName?: string(name='TaskName'),
      taskPhase?: string(name='TaskPhase'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDrdsInstanceLevelTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceLevelTasksResponseBody(name='body'),
}

async function describeDrdsInstanceLevelTasksWithOptions(request: DescribeDrdsInstanceLevelTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceLevelTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceLevelTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceLevelTasks(request: DescribeDrdsInstanceLevelTasksRequest): DescribeDrdsInstanceLevelTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceLevelTasksWithOptions(request, runtime);
}

model DescribeDrdsInstanceMonitorRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  key?: string(name='Key'),
  periodMultiple?: int32(name='PeriodMultiple'),
  regionId?: string(name='RegionId'),
  startTime?: long(name='StartTime'),
}

model DescribeDrdsInstanceMonitorResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      nodeNum?: int32(name='NodeNum'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDrdsInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceMonitorWithOptions(request: DescribeDrdsInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceMonitor', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceVersionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceVersionResponseBody = {
  data?: {
    instanceVersion?: string(name='InstanceVersion'),
    newestVersion?: string(name='NewestVersion'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceVersionResponseBody(name='body'),
}

async function describeDrdsInstanceVersionWithOptions(request: DescribeDrdsInstanceVersionRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstanceVersion', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstanceVersion(request: DescribeDrdsInstanceVersionRequest): DescribeDrdsInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceVersionWithOptions(request, runtime);
}

model DescribeDrdsInstancesRequest {
  description?: string(name='Description'),
  expired?: boolean(name='Expired'),
  mix?: boolean(name='Mix'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productVersion?: string(name='ProductVersion'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  type?: string(name='Type'),
}

model DescribeDrdsInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      drdsInstanceId?: string(name='DrdsInstanceId'),
      expireDate?: long(name='ExpireDate'),
      instRole?: string(name='InstRole'),
      instanceSeries?: string(name='InstanceSeries'),
      instanceSpec?: string(name='InstanceSpec'),
      label?: string(name='Label'),
      machineType?: string(name='MachineType'),
      masterInstanceId?: string(name='MasterInstanceId'),
      networkType?: string(name='NetworkType'),
      orderInstanceId?: string(name='OrderInstanceId'),
      productVersion?: string(name='ProductVersion'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      version?: long(name='Version'),
      versionAction?: string(name='VersionAction'),
      vips?: {
        vip?: [ 
        {
          IP?: string(name='IP'),
          port?: string(name='Port'),
          type?: string(name='Type'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
        }
      ](name='Vip')
      }(name='Vips'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDrdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstancesResponseBody(name='body'),
}

async function describeDrdsInstancesWithOptions(request: DescribeDrdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstancesWithOptions(request, runtime);
}

model DescribeDrdsParamsRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  paramLevel?: string(name='ParamLevel'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsParamsResponseBody = {
  list?: [ 
    {
      dbName?: string(name='DbName'),
      needRestart?: boolean(name='NeedRestart'),
      paramDefaultValue?: string(name='ParamDefaultValue'),
      paramDesc?: string(name='ParamDesc'),
      paramEnglishName?: string(name='ParamEnglishName'),
      paramLevel?: string(name='ParamLevel'),
      paramName?: string(name='ParamName'),
      paramRanges?: string(name='ParamRanges'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      paramVariableName?: string(name='ParamVariableName'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsParamsResponseBody(name='body'),
}

async function describeDrdsParamsWithOptions(request: DescribeDrdsParamsRequest, runtime: Util.RuntimeOptions): DescribeDrdsParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsParams', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsParams(request: DescribeDrdsParamsRequest): DescribeDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsParamsWithOptions(request, runtime);
}

model DescribeDrdsRdsInstancesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsRdsInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      DBInstanceCPU?: string(name='DBInstanceCPU'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceStorage?: long(name='DBInstanceStorage'),
      dbInstType?: string(name='DbInstType'),
      dmInstanceId?: string(name='DmInstanceId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstType?: string(name='RdsInstType'),
      readWeight?: int32(name='ReadWeight'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsRdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsRdsInstancesResponseBody(name='body'),
}

async function describeDrdsRdsInstancesWithOptions(request: DescribeDrdsRdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsRdsInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsRdsInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsRdsInstances(request: DescribeDrdsRdsInstancesRequest): DescribeDrdsRdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsRdsInstancesWithOptions(request, runtime);
}

model DescribeDrdsShardingDbsRequest {
  dbName?: string(name='DbName'),
  dbNamePattern?: string(name='DbNamePattern'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDrdsShardingDbsResponseBody = {
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  shardingDbs?: {
    shardingDb?: [ 
    {
      blockingTimeout?: int32(name='BlockingTimeout'),
      connectUrl?: string(name='ConnectUrl'),
      connectionProperties?: string(name='ConnectionProperties'),
      dbInstanceId?: string(name='DbInstanceId'),
      dbStatus?: string(name='DbStatus'),
      dbType?: string(name='DbType'),
      groupName?: string(name='GroupName'),
      idleTimeOut?: int32(name='IdleTimeOut'),
      maxPoolSize?: int32(name='MaxPoolSize'),
      minPoolSize?: int32(name='MinPoolSize'),
      preparedStatementCacheSize?: int32(name='PreparedStatementCacheSize'),
      shardingDbName?: string(name='ShardingDbName'),
      userName?: string(name='UserName'),
    }
  ](name='ShardingDb')
  }(name='ShardingDbs'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model DescribeDrdsShardingDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsShardingDbsResponseBody(name='body'),
}

async function describeDrdsShardingDbsWithOptions(request: DescribeDrdsShardingDbsRequest, runtime: Util.RuntimeOptions): DescribeDrdsShardingDbsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsShardingDbs', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsShardingDbs(request: DescribeDrdsShardingDbsRequest): DescribeDrdsShardingDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsShardingDbsWithOptions(request, runtime);
}

model DescribeDrdsSlowSqlsRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  exeTime?: long(name='ExeTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
}

model DescribeDrdsSlowSqlsResponseBody = {
  items?: {
    item?: [ 
    {
      host?: string(name='Host'),
      responseTime?: long(name='ResponseTime'),
      schema?: string(name='Schema'),
      sendTime?: long(name='SendTime'),
      sql?: string(name='Sql'),
    }
  ](name='Item')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeDrdsSlowSqlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSlowSqlsResponseBody(name='body'),
}

async function describeDrdsSlowSqlsWithOptions(request: DescribeDrdsSlowSqlsRequest, runtime: Util.RuntimeOptions): DescribeDrdsSlowSqlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsSlowSqls', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsSlowSqls(request: DescribeDrdsSlowSqlsRequest): DescribeDrdsSlowSqlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSlowSqlsWithOptions(request, runtime);
}

model DescribeDrdsSqlAuditStatusRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsSqlAuditStatusResponseBody = {
  data?: {
    data?: [ 
    {
      dbName?: string(name='DbName'),
      detailed?: string(name='Detailed'),
      enabled?: string(name='Enabled'),
      extraAliUid?: long(name='ExtraAliUid'),
      extraSlsLogStore?: string(name='ExtraSlsLogStore'),
      extraSlsProject?: string(name='ExtraSlsProject'),
      extraWriteEnabled?: boolean(name='ExtraWriteEnabled'),
    }
  ](name='Data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsSqlAuditStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsSqlAuditStatusResponseBody(name='body'),
}

async function describeDrdsSqlAuditStatusWithOptions(request: DescribeDrdsSqlAuditStatusRequest, runtime: Util.RuntimeOptions): DescribeDrdsSqlAuditStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsSqlAuditStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsSqlAuditStatus(request: DescribeDrdsSqlAuditStatusRequest): DescribeDrdsSqlAuditStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSqlAuditStatusWithOptions(request, runtime);
}

model DescribeDrdsTasksRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsTasksResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      content?: string(name='Content'),
      id?: long(name='Id'),
      state?: string(name='State'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDrdsTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsTasksResponseBody(name='body'),
}

async function describeDrdsTasksWithOptions(request: DescribeDrdsTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDrdsTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDrdsTasks(request: DescribeDrdsTasksRequest): DescribeDrdsTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsTasksWithOptions(request, runtime);
}

model DescribeEvaluateDataImportDbTopologysRequest {
  importParam?: map[string]any(name='ImportParam'),
}

model DescribeEvaluateDataImportDbTopologysShrinkRequest {
  importParamShrink?: string(name='ImportParam'),
}

model DescribeEvaluateDataImportDbTopologysResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeEvaluateDataImportDbTopologysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluateDataImportDbTopologysResponseBody(name='body'),
}

async function describeEvaluateDataImportDbTopologysWithOptions(tmpReq: DescribeEvaluateDataImportDbTopologysRequest, runtime: Util.RuntimeOptions): DescribeEvaluateDataImportDbTopologysResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeEvaluateDataImportDbTopologysShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importParam)) {
    request.importParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importParam, 'ImportParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluateDataImportDbTopologys', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluateDataImportDbTopologys(request: DescribeEvaluateDataImportDbTopologysRequest): DescribeEvaluateDataImportDbTopologysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateDataImportDbTopologysWithOptions(request, runtime);
}

model DescribeEvaluatePreCheckResultRequest {
  taskId?: long(name='TaskId'),
}

model DescribeEvaluatePreCheckResultResponseBody = {
  preCheckResult?: {
    preCheckName?: string(name='PreCheckName'),
    state?: string(name='State'),
    subCheckItems?: {
      subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        errorMsgParams?: {
          errorMsgParams?: [ string ](name='ErrorMsgParams')
        }(name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
        state?: string(name='State'),
      }
    ](name='SubCheckItems')
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeEvaluatePreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluatePreCheckResultResponseBody(name='body'),
}

async function describeEvaluatePreCheckResultWithOptions(request: DescribeEvaluatePreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeEvaluatePreCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluatePreCheckResult', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluatePreCheckResult(request: DescribeEvaluatePreCheckResultRequest): DescribeEvaluatePreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluatePreCheckResultWithOptions(request, runtime);
}

model DescribeEvaluateTaskReportRequest {
  taskId?: long(name='TaskId'),
}

model DescribeEvaluateTaskReportResponseBody = {
  evaluateResult?: {
    allSqlCount?: int32(name='AllSqlCount'),
    dbName?: string(name='DbName'),
    drdsCount?: int32(name='DrdsCount'),
    drdsType?: string(name='DrdsType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    instId?: int32(name='InstId'),
    rdsCount?: int32(name='RdsCount'),
    rdsInstInfos?: {
      rdsInstInfos?: [ 
      {
        avgQpsGrowthScale?: int32(name='AvgQpsGrowthScale'),
        dataGrowthScale?: int32(name='DataGrowthScale'),
        instId?: string(name='InstId'),
        rdsPeakIopsWeekly?: int32(name='RdsPeakIopsWeekly'),
        rdsPeakQpsWeekly?: int32(name='RdsPeakQpsWeekly'),
        rdsPeakSessionsWeekly?: int32(name='RdsPeakSessionsWeekly'),
        rdsUsedSpace?: int32(name='RdsUsedSpace'),
      }
    ](name='RdsInstInfos')
    }(name='RdsInstInfos'),
    rdsTotalSpace?: string(name='RdsTotalSpace'),
    rdsType?: string(name='RdsType'),
    slowSqlCount?: int32(name='SlowSqlCount'),
    tableShardResults?: {
      tableShardResults?: [ 
      {
        createTableSql?: string(name='CreateTableSql'),
        dbShardKey?: string(name='DbShardKey'),
        dbShardMethod?: string(name='DbShardMethod'),
        dbpartitions?: int32(name='Dbpartitions'),
        originDbShardMethod?: string(name='OriginDbShardMethod'),
        originTbShardMethod?: string(name='OriginTbShardMethod'),
        rowCount?: int32(name='RowCount'),
        shardKeyType?: string(name='ShardKeyType'),
        shardType?: string(name='ShardType'),
        sqlCount?: int32(name='SqlCount'),
        table?: string(name='Table'),
        tbShardKey?: string(name='TbShardKey'),
        tbShardMethod?: string(name='TbShardMethod'),
        tbpartitions?: int32(name='Tbpartitions'),
      }
    ](name='TableShardResults')
    }(name='TableShardResults'),
    taskId?: int32(name='TaskId'),
    taskName?: string(name='TaskName'),
    taskStatus?: string(name='TaskStatus'),
  }(name='EvaluateResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeEvaluateTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluateTaskReportResponseBody(name='body'),
}

async function describeEvaluateTaskReportWithOptions(request: DescribeEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): DescribeEvaluateTaskReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluateTaskReport', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluateTaskReport(request: DescribeEvaluateTaskReportRequest): DescribeEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateTaskReportWithOptions(request, runtime);
}

model DescribeEvaluateTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeEvaluateTasksResponseBody = {
  data?: {
    evaluateTask?: [ 
    {
      allSqlCount?: int32(name='AllSqlCount'),
      batchEvaluateTaskId?: int32(name='BatchEvaluateTaskId'),
      dbName?: string(name='DbName'),
      dbType?: int32(name='DbType'),
      evalauteHours?: int32(name='EvalauteHours'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: int32(name='Id'),
      instId?: string(name='InstId'),
      progress?: int32(name='Progress'),
      status?: string(name='Status'),
      taskName?: string(name='TaskName'),
    }
  ](name='EvaluateTask')
  }(name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeEvaluateTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluateTasksResponseBody(name='body'),
}

async function describeEvaluateTasksWithOptions(request: DescribeEvaluateTasksRequest, runtime: Util.RuntimeOptions): DescribeEvaluateTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluateTasks', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluateTasks(request: DescribeEvaluateTasksRequest): DescribeEvaluateTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateTasksWithOptions(request, runtime);
}

model DescribeExpandLogicTableInfoListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeExpandLogicTableInfoListResponseBody = {
  data?: {
    data?: [ 
    {
      shardDbKey?: string(name='ShardDbKey'),
      shardTbKey?: string(name='ShardTbKey'),
      tableName?: string(name='TableName'),
    }
  ](name='data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeExpandLogicTableInfoListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExpandLogicTableInfoListResponseBody(name='body'),
}

async function describeExpandLogicTableInfoListWithOptions(request: DescribeExpandLogicTableInfoListRequest, runtime: Util.RuntimeOptions): DescribeExpandLogicTableInfoListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExpandLogicTableInfoList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExpandLogicTableInfoList(request: DescribeExpandLogicTableInfoListRequest): DescribeExpandLogicTableInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpandLogicTableInfoListWithOptions(request, runtime);
}

model DescribeHiStoreInstanceInfoRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  historeInstanceId?: string(name='HistoreInstanceId'),
}

model DescribeHiStoreInstanceInfoResponseBody = {
  hiStoreInstanceInfo?: {
    diskSize?: int32(name='DiskSize'),
    gmtCreate?: long(name='GmtCreate'),
    historeInstanceId?: string(name='HistoreInstanceId'),
    machineSpec?: string(name='MachineSpec'),
    rpmVersion?: string(name='RpmVersion'),
  }(name='HiStoreInstanceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeHiStoreInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHiStoreInstanceInfoResponseBody(name='body'),
}

async function describeHiStoreInstanceInfoWithOptions(request: DescribeHiStoreInstanceInfoRequest, runtime: Util.RuntimeOptions): DescribeHiStoreInstanceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHiStoreInstanceInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHiStoreInstanceInfo(request: DescribeHiStoreInstanceInfoRequest): DescribeHiStoreInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiStoreInstanceInfoWithOptions(request, runtime);
}

model DescribeHotDbListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeHotDbListResponseBody = {
  data?: {
    list?: {
      instanceDb?: [ 
      {
        hotDbList?: {
          data?: [ string ](name='data')
        }(name='HotDbList'),
        instanceName?: string(name='InstanceName'),
      }
    ](name='InstanceDb')
    }(name='List'),
    randomCode?: string(name='RandomCode'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeHotDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHotDbListResponseBody(name='body'),
}

async function describeHotDbListWithOptions(request: DescribeHotDbListRequest, runtime: Util.RuntimeOptions): DescribeHotDbListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHotDbList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHotDbList(request: DescribeHotDbListRequest): DescribeHotDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotDbListWithOptions(request, runtime);
}

model DescribeInstDbLogInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstDbLogInfoResponseBody = {
  logTimeRange?: {
    supportLatestTime?: long(name='SupportLatestTime'),
    supportOldestTime?: long(name='SupportOldestTime'),
  }(name='LogTimeRange'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstDbLogInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbLogInfoResponseBody(name='body'),
}

async function describeInstDbLogInfoWithOptions(request: DescribeInstDbLogInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbLogInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstDbLogInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstDbLogInfo(request: DescribeInstDbLogInfoRequest): DescribeInstDbLogInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbLogInfoWithOptions(request, runtime);
}

model DescribeInstDbSlsInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstDbSlsInfoResponseBody = {
  auditInfo?: {
    logStore?: string(name='LogStore'),
    project?: string(name='Project'),
  }(name='AuditInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstDbSlsInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstDbSlsInfoResponseBody(name='body'),
}

async function describeInstDbSlsInfoWithOptions(request: DescribeInstDbSlsInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbSlsInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstDbSlsInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstDbSlsInfo(request: DescribeInstDbSlsInfoRequest): DescribeInstDbSlsInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbSlsInfoWithOptions(request, runtime);
}

model DescribeInstanceAccountsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceAccountsResponseBody = {
  instanceAccounts?: {
    instanceAccount?: [ 
    {
      accountName?: string(name='AccountName'),
      accountType?: int32(name='AccountType'),
      dbPrivileges?: {
        dbPrivilege?: [ 
        {
          dbName?: string(name='DbName'),
          privilege?: string(name='Privilege'),
        }
      ](name='DbPrivilege')
      }(name='DbPrivileges'),
      description?: string(name='Description'),
      host?: string(name='Host'),
    }
  ](name='InstanceAccount')
  }(name='InstanceAccounts'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstanceAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAccountsResponseBody(name='body'),
}

async function describeInstanceAccountsWithOptions(request: DescribeInstanceAccountsRequest, runtime: Util.RuntimeOptions): DescribeInstanceAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAccounts', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAccounts(request: DescribeInstanceAccountsRequest): DescribeInstanceAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAccountsWithOptions(request, runtime);
}

model DescribeInstanceMenuSwitchRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceMenuSwitchResponseBody = {
  config?: map[string]any(name='Config'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstanceMenuSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMenuSwitchResponseBody(name='body'),
}

async function describeInstanceMenuSwitchWithOptions(request: DescribeInstanceMenuSwitchRequest, runtime: Util.RuntimeOptions): DescribeInstanceMenuSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMenuSwitch', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMenuSwitch(request: DescribeInstanceMenuSwitchRequest): DescribeInstanceMenuSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMenuSwitchWithOptions(request, runtime);
}

model DescribeInstanceSwitchAzoneRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchAzoneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    originAzoneId?: string(name='OriginAzoneId'),
    regionId?: string(name='RegionId'),
    switchAble?: boolean(name='SwitchAble'),
    targetAzones?: {
      targetAzone?: [ string ](name='TargetAzone')
    }(name='TargetAzones'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeInstanceSwitchAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchAzoneResponseBody(name='body'),
}

async function describeInstanceSwitchAzoneWithOptions(request: DescribeInstanceSwitchAzoneRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchAzoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSwitchAzone', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSwitchAzone(request: DescribeInstanceSwitchAzoneRequest): DescribeInstanceSwitchAzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchAzoneWithOptions(request, runtime);
}

model DescribeInstanceSwitchNetworkRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vswitchInfos?: {
        vswitchInfo?: [ 
        {
          azoneId?: string(name='AzoneId'),
          drdsSupported?: boolean(name='DrdsSupported'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
          vswitchName?: string(name='VswitchName'),
        }
      ](name='VswitchInfo')
      }(name='VswitchInfos'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model DescribeInstanceSwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSwitchNetworkResponseBody(name='body'),
}

async function describeInstanceSwitchNetworkWithOptions(request: DescribeInstanceSwitchNetworkRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSwitchNetwork', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSwitchNetwork(request: DescribeInstanceSwitchNetworkRequest): DescribeInstanceSwitchNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchNetworkWithOptions(request, runtime);
}

model DescribePreCheckResultRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model DescribePreCheckResultResponseBody = {
  preCheckResult?: {
    preCheckName?: string(name='PreCheckName'),
    state?: string(name='State'),
    subCheckItems?: [ 
      {
        errorMsgCode?: string(name='ErrorMsgCode'),
        errorMsgParams?: [ string ](name='ErrorMsgParams'),
        preCheckItemName?: string(name='PreCheckItemName'),
        state?: string(name='State'),
      }
    ](name='SubCheckItems'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePreCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckResultResponseBody(name='body'),
}

async function describePreCheckResultWithOptions(request: DescribePreCheckResultRequest, runtime: Util.RuntimeOptions): DescribePreCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePreCheckResult', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePreCheckResult(request: DescribePreCheckResultRequest): DescribePreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreCheckResultWithOptions(request, runtime);
}

model DescribeRDSPerformanceRequest {
  dbInstType?: string(name='DbInstType'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  keys?: string(name='Keys'),
  rdsInstanceId?: string(name='RdsInstanceId'),
  startTime?: long(name='StartTime'),
}

model DescribeRDSPerformanceResponseBody = {
  data?: [ 
    {
      key?: string(name='Key'),
      nodeName?: string(name='NodeName'),
      nodeNum?: int32(name='NodeNum'),
      unit?: string(name='Unit'),
      values?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRDSPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSPerformanceResponseBody(name='body'),
}

async function describeRDSPerformanceWithOptions(request: DescribeRDSPerformanceRequest, runtime: Util.RuntimeOptions): DescribeRDSPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRDSPerformance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRDSPerformance(request: DescribeRDSPerformanceRequest): DescribeRDSPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRDSPerformanceWithOptions(request, runtime);
}

model DescribeRdsCommodityRequest {
  commodityCode?: string(name='CommodityCode'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  orderType?: string(name='OrderType'),
}

model DescribeRdsCommodityResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsCommodityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsCommodityResponseBody(name='body'),
}

async function describeRdsCommodityWithOptions(request: DescribeRdsCommodityRequest, runtime: Util.RuntimeOptions): DescribeRdsCommodityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsCommodity', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsCommodity(request: DescribeRdsCommodityRequest): DescribeRdsCommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsCommodityWithOptions(request, runtime);
}

model DescribeRdsDrdsDBRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstanceId?: [ string ](name='RdsInstanceId'),
}

model DescribeRdsDrdsDBResponseBody = {
  rdsDrdsDbs?: {
    rdsDrdsDb?: [ 
    {
      DBList?: {
        DB?: [ string ](name='DB')
      }(name='DBList'),
      rdsId?: string(name='RdsId'),
    }
  ](name='RdsDrdsDb')
  }(name='RdsDrdsDbs'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsDrdsDBResponseBody(name='body'),
}

async function describeRdsDrdsDBWithOptions(request: DescribeRdsDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeRdsDrdsDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsDrdsDB', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsDrdsDB(request: DescribeRdsDrdsDBRequest): DescribeRdsDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsDrdsDBWithOptions(request, runtime);
}

model DescribeRdsPerformanceSummaryRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstanceId?: [ string ](name='RdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeRdsPerformanceSummaryResponseBody = {
  rdsPerformanceInfos?: [ 
    {
      activeSessions?: int32(name='ActiveSessions'),
      cpu?: float(name='Cpu'),
      iops?: float(name='Iops'),
      rdsId?: string(name='RdsId'),
      spaceUsage?: long(name='SpaceUsage'),
      totalSessions?: int32(name='TotalSessions'),
    }
  ](name='RdsPerformanceInfos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsPerformanceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsPerformanceSummaryResponseBody(name='body'),
}

async function describeRdsPerformanceSummaryWithOptions(request: DescribeRdsPerformanceSummaryRequest, runtime: Util.RuntimeOptions): DescribeRdsPerformanceSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsPerformanceSummary', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsPerformanceSummary(request: DescribeRdsPerformanceSummaryRequest): DescribeRdsPerformanceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsPerformanceSummaryWithOptions(request, runtime);
}

model DescribeRdsPriceRequest {
  params?: string(name='Params'),
  regionId?: string(name='RegionId'),
}

model DescribeRdsPriceResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsPriceResponseBody(name='body'),
}

async function describeRdsPriceWithOptions(request: DescribeRdsPriceRequest, runtime: Util.RuntimeOptions): DescribeRdsPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsPrice', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsPrice(request: DescribeRdsPriceRequest): DescribeRdsPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsPriceWithOptions(request, runtime);
}

model DescribeRdsReadOnlyRequest {
  dbInstType?: string(name='DbInstType'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstanceId?: string(name='RdsInstanceId'),
}

model DescribeRdsReadOnlyResponseBody = {
  dbInstances?: {
    dbInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      DBInstanceCPU?: string(name='DBInstanceCPU'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceStorage?: long(name='DBInstanceStorage'),
      dbInstType?: string(name='DbInstType'),
      dmInstanceId?: string(name='DmInstanceId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      networkType?: string(name='NetworkType'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstType?: string(name='RdsInstType'),
      readWeight?: int32(name='ReadWeight'),
      remainDays?: int32(name='RemainDays'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsReadOnlyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsReadOnlyResponseBody(name='body'),
}

async function describeRdsReadOnlyWithOptions(request: DescribeRdsReadOnlyRequest, runtime: Util.RuntimeOptions): DescribeRdsReadOnlyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsReadOnly', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsReadOnly(request: DescribeRdsReadOnlyRequest): DescribeRdsReadOnlyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsReadOnlyWithOptions(request, runtime);
}

model DescribeRdsSuperAccountInstancesRequest {
  dbInstType?: string(name='DbInstType'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsInstance?: [ string ](name='RdsInstance'),
}

model DescribeRdsSuperAccountInstancesResponseBody = {
  dbInstances?: {
    dbInstance?: [ string ](name='DbInstance')
  }(name='DbInstances'),
  requestId?: string(name='RequestId'),
}

model DescribeRdsSuperAccountInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsSuperAccountInstancesResponseBody(name='body'),
}

async function describeRdsSuperAccountInstancesWithOptions(request: DescribeRdsSuperAccountInstancesRequest, runtime: Util.RuntimeOptions): DescribeRdsSuperAccountInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsSuperAccountInstances', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsSuperAccountInstances(request: DescribeRdsSuperAccountInstancesRequest): DescribeRdsSuperAccountInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsSuperAccountInstancesWithOptions(request, runtime);
}

model DescribeRdsVpcForZoneRequest {
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRdsVpcForZoneResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsVpcForZoneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsVpcForZoneResponseBody(name='body'),
}

async function describeRdsVpcForZoneWithOptions(request: DescribeRdsVpcForZoneRequest, runtime: Util.RuntimeOptions): DescribeRdsVpcForZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsVpcForZone', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsVpcForZone(request: DescribeRdsVpcForZoneRequest): DescribeRdsVpcForZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVpcForZoneWithOptions(request, runtime);
}

model DescribeRecycleBinStatusRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeRecycleBinStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeRecycleBinStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecycleBinStatusResponseBody(name='body'),
}

async function describeRecycleBinStatusWithOptions(request: DescribeRecycleBinStatusRequest, runtime: Util.RuntimeOptions): DescribeRecycleBinStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecycleBinStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecycleBinStatus(request: DescribeRecycleBinStatusRequest): DescribeRecycleBinStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecycleBinStatusWithOptions(request, runtime);
}

model DescribeRecycleBinTablesRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeRecycleBinTablesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime'),
      originalTableName?: string(name='OriginalTableName'),
      tableName?: string(name='TableName'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRecycleBinTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecycleBinTablesResponseBody(name='body'),
}

async function describeRecycleBinTablesWithOptions(request: DescribeRecycleBinTablesRequest, runtime: Util.RuntimeOptions): DescribeRecycleBinTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecycleBinTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecycleBinTables(request: DescribeRecycleBinTablesRequest): DescribeRecycleBinTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecycleBinTablesWithOptions(request, runtime);
}

model DescribeRestoreOrderRequest {
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
  backupLevel?: string(name='BackupLevel'),
  backupMode?: string(name='BackupMode'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
}

model DescribeRestoreOrderResponseBody = {
  requestId?: string(name='RequestId'),
  restoreOrderDO?: {
    drdsOrderDOList?: {
      drdsOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        instSpec?: string(name='InstSpec'),
        network?: string(name='Network'),
        regionId?: string(name='RegionId'),
        VSwtichId?: string(name='VSwtichId'),
        vpcId?: string(name='VpcId'),
      }
    ](name='DrdsOrderDOList')
    }(name='DrdsOrderDOList'),
    polarOrderDOList?: {
      polarOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        engine?: string(name='Engine'),
        instanceClass?: string(name='InstanceClass'),
        network?: string(name='Network'),
        num?: long(name='Num'),
        regionId?: string(name='RegionId'),
        version?: string(name='Version'),
      }
    ](name='PolarOrderDOList')
    }(name='PolarOrderDOList'),
    rdsOrderDOList?: {
      rdsOrderDOList?: [ 
      {
        azoneId?: string(name='AzoneId'),
        dbInstanceStorage?: string(name='DbInstanceStorage'),
        engine?: string(name='Engine'),
        instanceClass?: string(name='InstanceClass'),
        network?: string(name='Network'),
        num?: long(name='Num'),
        regionId?: string(name='RegionId'),
        version?: string(name='Version'),
      }
    ](name='RdsOrderDOList')
    }(name='RdsOrderDOList'),
  }(name='RestoreOrderDO'),
  success?: boolean(name='Success'),
}

model DescribeRestoreOrderResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreOrderResponseBody(name='body'),
}

async function describeRestoreOrderWithOptions(request: DescribeRestoreOrderRequest, runtime: Util.RuntimeOptions): DescribeRestoreOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRestoreOrder', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRestoreOrder(request: DescribeRestoreOrderRequest): DescribeRestoreOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreOrderWithOptions(request, runtime);
}

model DescribeShardTaskInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
}

model DescribeShardTaskInfoResponseBody = {
  data?: {
    expired?: string(name='Expired'),
    full?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='Full'),
    fullCheck?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='FullCheck'),
    fullRevise?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='FullRevise'),
    increment?: {
      delay?: int32(name='Delay'),
      startTime?: string(name='StartTime'),
      tps?: int32(name='Tps'),
    }(name='Increment'),
    progress?: string(name='Progress'),
    review?: {
      expired?: int32(name='Expired'),
      progress?: int32(name='Progress'),
      startTime?: string(name='StartTime'),
      total?: int32(name='Total'),
      tps?: int32(name='Tps'),
    }(name='Review'),
    sourceTableName?: string(name='SourceTableName'),
    stage?: string(name='Stage'),
    status?: string(name='Status'),
    targetTableName?: string(name='TargetTableName'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardTaskInfoResponseBody(name='body'),
}

async function describeShardTaskInfoWithOptions(request: DescribeShardTaskInfoRequest, runtime: Util.RuntimeOptions): DescribeShardTaskInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShardTaskInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShardTaskInfo(request: DescribeShardTaskInfoRequest): DescribeShardTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskInfoWithOptions(request, runtime);
}

model DescribeShardTaskListRequest {
  currentPage?: int32(name='CurrentPage'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  regionId?: string(name='RegionId'),
  taskType?: string(name='TaskType'),
}

model DescribeShardTaskListResponseBody = {
  list?: [ 
    {
      delay?: int32(name='Delay'),
      expired?: long(name='Expired'),
      progress?: int32(name='Progress'),
      sourceTableName?: string(name='SourceTableName'),
      stage?: int32(name='Stage'),
      status?: string(name='Status'),
      targetTableName?: string(name='TargetTableName'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeShardTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardTaskListResponseBody(name='body'),
}

async function describeShardTaskListWithOptions(request: DescribeShardTaskListRequest, runtime: Util.RuntimeOptions): DescribeShardTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShardTaskList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShardTaskList(request: DescribeShardTaskListRequest): DescribeShardTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskListWithOptions(request, runtime);
}

model DescribeSqlFlashbakTaskRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeSqlFlashbakTaskResponseBody = {
  requestId?: string(name='RequestId'),
  sqlFlashbackTasks?: {
    sqlFlashbackTask?: [ 
    {
      dbName?: string(name='DbName'),
      downloadUrl?: string(name='DownloadUrl'),
      expireTime?: long(name='ExpireTime'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      instId?: string(name='InstId'),
      recallProgress?: int32(name='RecallProgress'),
      recallRestoreType?: int32(name='RecallRestoreType'),
      recallStatus?: int32(name='RecallStatus'),
      recallType?: int32(name='RecallType'),
      searchEndTime?: long(name='SearchEndTime'),
      searchStartTime?: long(name='SearchStartTime'),
      sqlCounter?: long(name='SqlCounter'),
      sqlPk?: string(name='SqlPk'),
      sqlType?: string(name='SqlType'),
      tableName?: string(name='TableName'),
      traceId?: string(name='TraceId'),
    }
  ](name='SqlFlashbackTask')
  }(name='SqlFlashbackTasks'),
  success?: boolean(name='Success'),
}

model DescribeSqlFlashbakTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlFlashbakTaskResponseBody(name='body'),
}

async function describeSqlFlashbakTaskWithOptions(request: DescribeSqlFlashbakTaskRequest, runtime: Util.RuntimeOptions): DescribeSqlFlashbakTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSqlFlashbakTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSqlFlashbakTask(request: DescribeSqlFlashbakTaskRequest): DescribeSqlFlashbakTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlFlashbakTaskWithOptions(request, runtime);
}

model DescribeSrcRdsListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  partitionMapping?: [ 
    {
      dbShardValue?: string(name='DbShardValue'),
      hotDbName?: string(name='HotDbName'),
      hotTableName?: string(name='HotTableName'),
      logicTable?: string(name='LogicTable'),
      tbShardValue?: string(name='TbShardValue'),
    }
  ](name='PartitionMapping'),
}

model DescribeSrcRdsListResponseBody = {
  data?: {
    data?: [ 
    {
      dbName?: string(name='DbName'),
      rds?: string(name='Rds'),
    }
  ](name='data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSrcRdsListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSrcRdsListResponseBody(name='body'),
}

async function describeSrcRdsListWithOptions(request: DescribeSrcRdsListRequest, runtime: Util.RuntimeOptions): DescribeSrcRdsListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSrcRdsList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSrcRdsList(request: DescribeSrcRdsListRequest): DescribeSrcRdsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSrcRdsListWithOptions(request, runtime);
}

model DescribeTableRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: string(name='TableName'),
}

model DescribeTableResponseBody = {
  data?: {
    list?: [ 
      {
        columnName?: string(name='ColumnName'),
        columnType?: string(name='ColumnType'),
        extra?: string(name='Extra'),
        index?: string(name='Index'),
        isAllowNull?: string(name='IsAllowNull'),
        isPk?: string(name='IsPk'),
      }
    ](name='List'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeTableResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableResponseBody(name='body'),
}

async function describeTableWithOptions(request: DescribeTableRequest, runtime: Util.RuntimeOptions): DescribeTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTable(request: DescribeTableRequest): DescribeTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableWithOptions(request, runtime);
}

model DescribeTableListByTypeRequest {
  currentPage?: int32(name='CurrentPage'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  regionId?: string(name='RegionId'),
  tableType?: string(name='TableType'),
}

model DescribeTableListByTypeResponseBody = {
  list?: [ 
    {
      property?: string(name='Property'),
      tableName?: string(name='TableName'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeTableListByTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableListByTypeResponseBody(name='body'),
}

async function describeTableListByTypeWithOptions(request: DescribeTableListByTypeRequest, runtime: Util.RuntimeOptions): DescribeTableListByTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTableListByType', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTableListByType(request: DescribeTableListByTypeRequest): DescribeTableListByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableListByTypeWithOptions(request, runtime);
}

model DescribeTableShardingInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: string(name='TableName'),
}

model DescribeTableShardingInfoResponseBody = {
  data?: {
    columnList?: [ 
      {
        name?: string(name='Name'),
        type?: string(name='Type'),
      }
    ](name='ColumnList'),
    dbComputeLength?: int32(name='DbComputeLength'),
    dbRightShiftOffset?: int32(name='DbRightShiftOffset'),
    dbShardingColumnList?: [ string ](name='DbShardingColumnList'),
    dbShardingFunction?: string(name='DbShardingFunction'),
    isShard?: boolean(name='IsShard'),
    tbComputeLength?: int32(name='TbComputeLength'),
    tbPartitions?: int32(name='TbPartitions'),
    tbRightShiftOffset?: int32(name='TbRightShiftOffset'),
    tbShardingColumnList?: [ string ](name='TbShardingColumnList'),
    tbShardingFunction?: string(name='TbShardingFunction'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeTableShardingInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTableShardingInfoResponseBody(name='body'),
}

async function describeTableShardingInfoWithOptions(request: DescribeTableShardingInfoRequest, runtime: Util.RuntimeOptions): DescribeTableShardingInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTableShardingInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTableShardingInfo(request: DescribeTableShardingInfoRequest): DescribeTableShardingInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableShardingInfoWithOptions(request, runtime);
}

model DescribeTablesRequest {
  currentPage?: int32(name='CurrentPage'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  regionId?: string(name='RegionId'),
}

model DescribeTablesResponseBody = {
  list?: [ 
    {
      allowFullTableScan?: boolean(name='AllowFullTableScan'),
      broadcast?: boolean(name='Broadcast'),
      dbInstType?: int32(name='DbInstType'),
      isLocked?: boolean(name='IsLocked'),
      isShard?: boolean(name='IsShard'),
      shardKey?: string(name='ShardKey'),
      status?: int32(name='Status'),
      table?: string(name='Table'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DisableSqlAuditRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DisableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model DisableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSqlAuditResponseBody(name='body'),
}

async function disableSqlAuditWithOptions(request: DisableSqlAuditRequest, runtime: Util.RuntimeOptions): DisableSqlAuditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableSqlAudit', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableSqlAudit(request: DisableSqlAuditRequest): DisableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSqlAuditWithOptions(request, runtime);
}

model EnableInstanceIpv6AddressRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model EnableInstanceIpv6AddressResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model EnableInstanceIpv6AddressResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceIpv6AddressResponseBody(name='body'),
}

async function enableInstanceIpv6AddressWithOptions(request: EnableInstanceIpv6AddressRequest, runtime: Util.RuntimeOptions): EnableInstanceIpv6AddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableInstanceIpv6Address', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableInstanceIpv6Address(request: EnableInstanceIpv6AddressRequest): EnableInstanceIpv6AddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstanceIpv6AddressWithOptions(request, runtime);
}

model EnableSqlAuditRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  isRecall?: boolean(name='IsRecall'),
  recallEndTimestamp?: string(name='RecallEndTimestamp'),
  recallStartTimestamp?: string(name='RecallStartTimestamp'),
}

model EnableSqlAuditResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model EnableSqlAuditResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlAuditResponseBody(name='body'),
}

async function enableSqlAuditWithOptions(request: EnableSqlAuditRequest, runtime: Util.RuntimeOptions): EnableSqlAuditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableSqlAudit', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSqlAudit(request: EnableSqlAuditRequest): EnableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlAuditWithOptions(request, runtime);
}

model EnableSqlFlashbackMatchSwitchRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model EnableSqlFlashbackMatchSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model EnableSqlFlashbackMatchSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSqlFlashbackMatchSwitchResponseBody(name='body'),
}

async function enableSqlFlashbackMatchSwitchWithOptions(request: EnableSqlFlashbackMatchSwitchRequest, runtime: Util.RuntimeOptions): EnableSqlFlashbackMatchSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableSqlFlashbackMatchSwitch', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSqlFlashbackMatchSwitch(request: EnableSqlFlashbackMatchSwitchRequest): EnableSqlFlashbackMatchSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlFlashbackMatchSwitchWithOptions(request, runtime);
}

model FlashbackRecycleBinTableRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: string(name='TableName'),
}

model FlashbackRecycleBinTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FlashbackRecycleBinTableResponse = {
  headers: map[string]string(name='headers'),
  body: FlashbackRecycleBinTableResponseBody(name='body'),
}

async function flashbackRecycleBinTableWithOptions(request: FlashbackRecycleBinTableRequest, runtime: Util.RuntimeOptions): FlashbackRecycleBinTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FlashbackRecycleBinTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function flashbackRecycleBinTable(request: FlashbackRecycleBinTableRequest): FlashbackRecycleBinTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return flashbackRecycleBinTableWithOptions(request, runtime);
}

model GetBatchEvaluateTaskReportRequest {
  batchEvaluateTaskId?: long(name='BatchEvaluateTaskId'),
}

model GetBatchEvaluateTaskReportResponseBody = {
  data?: {
    evaluateResults?: [ 
    {
      allSqlCount?: int32(name='AllSqlCount'),
      dbName?: string(name='DbName'),
      drdsCount?: int32(name='DrdsCount'),
      drdsType?: string(name='DrdsType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      instId?: int32(name='InstId'),
      rdsCount?: int32(name='RdsCount'),
      rdsInstInfos?: {
        rdsInstInfos?: [ 
        {
          avgQpsGrowthScale?: int32(name='AvgQpsGrowthScale'),
          dataGrowthScale?: int32(name='DataGrowthScale'),
          instId?: string(name='InstId'),
          rdsPeakIopsWeekly?: int32(name='RdsPeakIopsWeekly'),
          rdsPeakQpsWeekly?: int32(name='RdsPeakQpsWeekly'),
          rdsPeakSessionsWeekly?: int32(name='RdsPeakSessionsWeekly'),
          rdsUsedSpace?: int32(name='RdsUsedSpace'),
        }
      ](name='RdsInstInfos')
      }(name='RdsInstInfos'),
      rdsTotalSpace?: string(name='RdsTotalSpace'),
      rdsType?: string(name='RdsType'),
      slowSqlCount?: int32(name='SlowSqlCount'),
      tableShardResults?: {
        tableShardResults?: [ 
        {
          createTableSql?: string(name='CreateTableSql'),
          dbShardKey?: string(name='DbShardKey'),
          dbpartitions?: int32(name='Dbpartitions'),
          rowCount?: int32(name='RowCount'),
          shardKeyType?: string(name='ShardKeyType'),
          shardType?: string(name='ShardType'),
          sqlCount?: int32(name='SqlCount'),
          table?: string(name='Table'),
          tbShardKey?: string(name='TbShardKey'),
          tbpartitions?: int32(name='Tbpartitions'),
        }
      ](name='TableShardResults')
      }(name='TableShardResults'),
      taskId?: int32(name='TaskId'),
      taskName?: string(name='TaskName'),
      taskStatus?: string(name='TaskStatus'),
    }
  ](name='EvaluateResults')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBatchEvaluateTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetBatchEvaluateTaskReportResponseBody(name='body'),
}

async function getBatchEvaluateTaskReportWithOptions(request: GetBatchEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): GetBatchEvaluateTaskReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBatchEvaluateTaskReport', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBatchEvaluateTaskReport(request: GetBatchEvaluateTaskReportRequest): GetBatchEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBatchEvaluateTaskReportWithOptions(request, runtime);
}

model GetDrdsDbRdsRelationInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model GetDrdsDbRdsRelationInfoResponseBody = {
  data?: [ 
    {
      rdsInstanceId?: string(name='RdsInstanceId'),
      readOnlyInstanceInfo?: [ string ](name='ReadOnlyInstanceInfo'),
      usedInstanceId?: string(name='UsedInstanceId'),
      usedInstanceType?: string(name='UsedInstanceType'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDrdsDbRdsRelationInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDrdsDbRdsRelationInfoResponseBody(name='body'),
}

async function getDrdsDbRdsRelationInfoWithOptions(request: GetDrdsDbRdsRelationInfoRequest, runtime: Util.RuntimeOptions): GetDrdsDbRdsRelationInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDrdsDbRdsRelationInfo', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDrdsDbRdsRelationInfo(request: GetDrdsDbRdsRelationInfoRequest): GetDrdsDbRdsRelationInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDrdsDbRdsRelationInfoWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserReportsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  reportId?: long(name='ReportId'),
}

model ListUserReportsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  sqlComparisonReport?: {
    sqlPassFailNum?: long(name='SqlPassFailNum'),
    sqlPassRate?: string(name='SqlPassRate'),
    sqlPassSuccNum?: long(name='SqlPassSuccNum'),
    version?: string(name='Version'),
    executeDetailList?: {
      executeDetail?: [ 
      {
        dbName?: string(name='DbName'),
        execDetailMsg?: string(name='ExecDetailMsg'),
        execute?: string(name='Execute'),
        sqlContent?: string(name='SqlContent'),
      }
    ](name='executeDetail')
    }(name='executeDetailList'),
  }(name='sqlComparisonReport'),
}

model ListUserReportsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserReportsResponseBody(name='body'),
}

async function listUserReportsWithOptions(request: ListUserReportsRequest, runtime: Util.RuntimeOptions): ListUserReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserReports', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserReports(request: ListUserReportsRequest): ListUserReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserReportsWithOptions(request, runtime);
}

model ListVersionsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  drdsVer?: string(name='DrdsVer'),
}

model ListVersionsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  versions?: {
    versions?: [ 
    {
      drdsVersion?: string(name='DrdsVersion'),
      latest?: boolean(name='Latest'),
    }
  ](name='versions')
  }(name='versions'),
}

model ListVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVersionsResponseBody(name='body'),
}

async function listVersionsWithOptions(request: ListVersionsRequest, runtime: Util.RuntimeOptions): ListVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListVersions', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVersionsWithOptions(request, runtime);
}

model ManagePrivateRdsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  params?: string(name='Params'),
  rdsAction?: string(name='RdsAction'),
  regionId?: string(name='RegionId'),
}

model ManagePrivateRdsResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ManagePrivateRdsResponse = {
  headers: map[string]string(name='headers'),
  body: ManagePrivateRdsResponseBody(name='body'),
}

async function managePrivateRdsWithOptions(request: ManagePrivateRdsRequest, runtime: Util.RuntimeOptions): ManagePrivateRdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ManagePrivateRds', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function managePrivateRds(request: ManagePrivateRdsRequest): ManagePrivateRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return managePrivateRdsWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountName?: string(name='AccountName'),
  description?: string(name='Description'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPrivilegeRequest {
  accountName?: string(name='AccountName'),
  dbPrivilege?: [ 
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model ModifyAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPrivilegeResponseBody(name='body'),
}

async function modifyAccountPrivilegeWithOptions(request: ModifyAccountPrivilegeRequest, runtime: Util.RuntimeOptions): ModifyAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountPrivilege', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPrivilegeWithOptions(request, runtime);
}

model ModifyDrdsInstanceDescriptionRequest {
  description?: string(name='Description'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model ModifyDrdsInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsInstanceDescriptionResponseBody(name='body'),
}

async function modifyDrdsInstanceDescriptionWithOptions(request: ModifyDrdsInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDrdsInstanceDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDrdsInstanceDescription', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDrdsIpWhiteListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  groupAttribute?: string(name='GroupAttribute'),
  groupName?: string(name='GroupName'),
  ipWhiteList?: string(name='IpWhiteList'),
  mode?: boolean(name='Mode'),
}

model ModifyDrdsIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsIpWhiteListResponseBody(name='body'),
}

async function modifyDrdsIpWhiteListWithOptions(request: ModifyDrdsIpWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDrdsIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDrdsIpWhiteList', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsIpWhiteListWithOptions(request, runtime);
}

model ModifyEventTaskStatusRequest {
  eventId?: string(name='EventId'),
  ids?: string(name='Ids'),
  region?: string(name='Region'),
  switchTime?: long(name='SwitchTime'),
}

model ModifyEventTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyEventTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEventTaskStatusResponseBody(name='body'),
}

async function modifyEventTaskStatusWithOptions(request: ModifyEventTaskStatusRequest, runtime: Util.RuntimeOptions): ModifyEventTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEventTaskStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEventTaskStatus(request: ModifyEventTaskStatusRequest): ModifyEventTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEventTaskStatusWithOptions(request, runtime);
}

model ModifyPolarDbReadWeightRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  dbName?: string(name='DbName'),
  dbNodeIds?: string(name='DbNodeIds'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  weights?: string(name='Weights'),
}

model ModifyPolarDbReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPolarDbReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolarDbReadWeightResponseBody(name='body'),
}

async function modifyPolarDbReadWeightWithOptions(request: ModifyPolarDbReadWeightRequest, runtime: Util.RuntimeOptions): ModifyPolarDbReadWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPolarDbReadWeight', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPolarDbReadWeight(request: ModifyPolarDbReadWeightRequest): ModifyPolarDbReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolarDbReadWeightWithOptions(request, runtime);
}

model ModifyRdsReadWeightRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  instanceNames?: string(name='InstanceNames'),
  weights?: string(name='Weights'),
}

model ModifyRdsReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRdsReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRdsReadWeightResponseBody(name='body'),
}

async function modifyRdsReadWeightWithOptions(request: ModifyRdsReadWeightRequest, runtime: Util.RuntimeOptions): ModifyRdsReadWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRdsReadWeight', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRdsReadWeightWithOptions(request, runtime);
}

model MyCatConnectTestRequest {
  dbName?: string(name='DbName'),
  regionId?: string(name='RegionId'),
  ruleUrl?: string(name='RuleUrl'),
  schemaUrl?: string(name='SchemaUrl'),
}

model MyCatConnectTestResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MyCatConnectTestResponse = {
  headers: map[string]string(name='headers'),
  body: MyCatConnectTestResponseBody(name='body'),
}

async function myCatConnectTestWithOptions(request: MyCatConnectTestRequest, runtime: Util.RuntimeOptions): MyCatConnectTestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MyCatConnectTest', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function myCatConnectTest(request: MyCatConnectTestRequest): MyCatConnectTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return myCatConnectTestWithOptions(request, runtime);
}

model MyCatCustomImportPreCheckRequest {
  dstDbNme?: string(name='DstDbNme'),
  dstDrdsInstanceId?: string(name='DstDrdsInstanceId'),
  dstPort?: int32(name='DstPort'),
  dstPwd?: string(name='DstPwd'),
  dstUser?: string(name='DstUser'),
  importDb?: string(name='ImportDb'),
  regionId?: string(name='RegionId'),
  ruleUrl?: string(name='RuleUrl'),
  schemaUrl?: string(name='SchemaUrl'),
  tableMap?: map[string]any(name='TableMap'),
  taskName?: string(name='TaskName'),
}

model MyCatCustomImportPreCheckShrinkRequest {
  dstDbNme?: string(name='DstDbNme'),
  dstDrdsInstanceId?: string(name='DstDrdsInstanceId'),
  dstPort?: int32(name='DstPort'),
  dstPwd?: string(name='DstPwd'),
  dstUser?: string(name='DstUser'),
  importDb?: string(name='ImportDb'),
  regionId?: string(name='RegionId'),
  ruleUrl?: string(name='RuleUrl'),
  schemaUrl?: string(name='SchemaUrl'),
  tableMapShrink?: string(name='TableMap'),
  taskName?: string(name='TaskName'),
}

model MyCatCustomImportPreCheckResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MyCatCustomImportPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: MyCatCustomImportPreCheckResponseBody(name='body'),
}

async function myCatCustomImportPreCheckWithOptions(tmpReq: MyCatCustomImportPreCheckRequest, runtime: Util.RuntimeOptions): MyCatCustomImportPreCheckResponse {
  Util.validateModel(tmpReq);
  var request = new MyCatCustomImportPreCheckShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tableMap)) {
    request.tableMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMap, 'TableMap', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MyCatCustomImportPreCheck', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function myCatCustomImportPreCheck(request: MyCatCustomImportPreCheckRequest): MyCatCustomImportPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return myCatCustomImportPreCheckWithOptions(request, runtime);
}

model PreCheckModifyTableShardingKeyParamRequest {
  dbComputeLength?: string(name='DbComputeLength'),
  dbName?: string(name='DbName'),
  dbRightShiftOffset?: int32(name='DbRightShiftOffset'),
  dbShardingColumnList?: string(name='DbShardingColumnList'),
  dbShardingFunction?: string(name='DbShardingFunction'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  isShard?: boolean(name='IsShard'),
  regionId?: string(name='RegionId'),
  srcTableName?: string(name='SrcTableName'),
  targetTableName?: string(name='TargetTableName'),
  tbComputeLength?: string(name='TbComputeLength'),
  tbPartitions?: string(name='TbPartitions'),
  tbRightShiftOffset?: string(name='TbRightShiftOffset'),
  tbShardingColumnList?: string(name='TbShardingColumnList'),
  tbShardingFunction?: string(name='TbShardingFunction'),
}

model PreCheckModifyTableShardingKeyParamResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PreCheckModifyTableShardingKeyParamResponse = {
  headers: map[string]string(name='headers'),
  body: PreCheckModifyTableShardingKeyParamResponseBody(name='body'),
}

async function preCheckModifyTableShardingKeyParamWithOptions(request: PreCheckModifyTableShardingKeyParamRequest, runtime: Util.RuntimeOptions): PreCheckModifyTableShardingKeyParamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreCheckModifyTableShardingKeyParam', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function preCheckModifyTableShardingKeyParam(request: PreCheckModifyTableShardingKeyParamRequest): PreCheckModifyTableShardingKeyParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return preCheckModifyTableShardingKeyParamWithOptions(request, runtime);
}

model PreCheckSqlFlashbackTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
}

model PreCheckSqlFlashbackTaskResponseBody = {
  checkResult?: {
    binlogExists?: boolean(name='BinlogExists'),
    binlogRowQueryEventEnabled?: boolean(name='BinlogRowQueryEventEnabled'),
    canUpgradeSupportBinlogRowQueryEvents?: boolean(name='CanUpgradeSupportBinlogRowQueryEvents'),
    hasTable?: boolean(name='HasTable'),
    supportBinlogRowQueryEvents?: boolean(name='SupportBinlogRowQueryEvents'),
  }(name='CheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PreCheckSqlFlashbackTaskResponse = {
  headers: map[string]string(name='headers'),
  body: PreCheckSqlFlashbackTaskResponseBody(name='body'),
}

async function preCheckSqlFlashbackTaskWithOptions(request: PreCheckSqlFlashbackTaskRequest, runtime: Util.RuntimeOptions): PreCheckSqlFlashbackTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreCheckSqlFlashbackTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function preCheckSqlFlashbackTask(request: PreCheckSqlFlashbackTaskRequest): PreCheckSqlFlashbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return preCheckSqlFlashbackTaskWithOptions(request, runtime);
}

model PrecheckMyCatEvaluateRequest {
  busPeakQps?: long(name='BusPeakQps'),
  capacityIncPercent?: int32(name='CapacityIncPercent'),
  importDbList?: [ string ](name='ImportDbList'),
  qpsIncPercent?: int32(name='QpsIncPercent'),
  regionId?: string(name='RegionId'),
  ruleUrl?: string(name='RuleUrl'),
  schemaUrl?: string(name='SchemaUrl'),
  sequenceType?: int32(name='SequenceType'),
  serverUrl?: string(name='ServerUrl'),
  taskName?: string(name='TaskName'),
}

model PrecheckMyCatEvaluateResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PrecheckMyCatEvaluateResponse = {
  headers: map[string]string(name='headers'),
  body: PrecheckMyCatEvaluateResponseBody(name='body'),
}

async function precheckMyCatEvaluateWithOptions(request: PrecheckMyCatEvaluateRequest, runtime: Util.RuntimeOptions): PrecheckMyCatEvaluateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PrecheckMyCatEvaluate', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function precheckMyCatEvaluate(request: PrecheckMyCatEvaluateRequest): PrecheckMyCatEvaluateResponse {
  var runtime = new Util.RuntimeOptions{};
  return precheckMyCatEvaluateWithOptions(request, runtime);
}

model PutRestorePreCheckRequest {
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
  backupLevel?: string(name='BackupLevel'),
  backupMode?: string(name='BackupMode'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
}

model PutRestorePreCheckResponseBody = {
  precheckBackupResult?: {
    list?: {
      list?: [ 
      {
        checkFailReason?: string(name='CheckFailReason'),
        checkItemContent?: string(name='CheckItemContent'),
        checkItemName?: string(name='CheckItemName'),
        checkResult?: string(name='CheckResult'),
        itemId?: long(name='ItemId'),
        result?: boolean(name='Result'),
      }
    ](name='List')
    }(name='List'),
    result?: boolean(name='Result'),
  }(name='PrecheckBackupResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PutRestorePreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: PutRestorePreCheckResponseBody(name='body'),
}

async function putRestorePreCheckWithOptions(request: PutRestorePreCheckRequest, runtime: Util.RuntimeOptions): PutRestorePreCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutRestorePreCheck', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putRestorePreCheck(request: PutRestorePreCheckRequest): PutRestorePreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return putRestorePreCheckWithOptions(request, runtime);
}

model PutStartBackupRequest {
  backupDbNames?: string(name='BackupDbNames'),
  backupLevel?: string(name='BackupLevel'),
  backupMode?: string(name='BackupMode'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model PutStartBackupResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model PutStartBackupResponse = {
  headers: map[string]string(name='headers'),
  body: PutStartBackupResponseBody(name='body'),
}

async function putStartBackupWithOptions(request: PutStartBackupRequest, runtime: Util.RuntimeOptions): PutStartBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutStartBackup', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putStartBackup(request: PutStartBackupRequest): PutStartBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return putStartBackupWithOptions(request, runtime);
}

model RearrangeDbToInstanceRequest {
  chooseRds?: string(name='ChooseRds'),
  chooseSubDb?: string(name='ChooseSubDb'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  instanceList?: [ string ](name='InstanceList'),
  orderId?: string(name='OrderId'),
}

model RearrangeDbToInstanceResponseBody = {
  data?: {
    data?: [ 
    {
      dstInstance?: string(name='DstInstance'),
      srcDbName?: string(name='SrcDbName'),
      srcInstance?: string(name='SrcInstance'),
    }
  ](name='data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RearrangeDbToInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RearrangeDbToInstanceResponseBody(name='body'),
}

async function rearrangeDbToInstanceWithOptions(request: RearrangeDbToInstanceRequest, runtime: Util.RuntimeOptions): RearrangeDbToInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RearrangeDbToInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rearrangeDbToInstance(request: RearrangeDbToInstanceRequest): RearrangeDbToInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rearrangeDbToInstanceWithOptions(request, runtime);
}

model RefreshDrdsAtomUrlRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RefreshDrdsAtomUrlResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RefreshDrdsAtomUrlResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDrdsAtomUrlResponseBody(name='body'),
}

async function refreshDrdsAtomUrlWithOptions(request: RefreshDrdsAtomUrlRequest, runtime: Util.RuntimeOptions): RefreshDrdsAtomUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshDrdsAtomUrl', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshDrdsAtomUrl(request: RefreshDrdsAtomUrlRequest): RefreshDrdsAtomUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDrdsAtomUrlWithOptions(request, runtime);
}

model ReleaseInstanceInternetAddressRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstanceInternetAddressResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceInternetAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceInternetAddressResponseBody(name='body'),
}

async function releaseInstanceInternetAddressWithOptions(request: ReleaseInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): ReleaseInstanceInternetAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstanceInternetAddress', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstanceInternetAddress(request: ReleaseInstanceInternetAddressRequest): ReleaseInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceInternetAddressWithOptions(request, runtime);
}

model RemoveBackupsSetRequest {
  backupId?: string(name='BackupId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveBackupsSetResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveBackupsSetResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBackupsSetResponseBody(name='body'),
}

async function removeBackupsSetWithOptions(request: RemoveBackupsSetRequest, runtime: Util.RuntimeOptions): RemoveBackupsSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveBackupsSet', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeBackupsSet(request: RemoveBackupsSetRequest): RemoveBackupsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBackupsSetWithOptions(request, runtime);
}

model RemoveDataExportTaskRequest {
  taskId?: int32(name='TaskId'),
}

model RemoveDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model RemoveDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDataExportTaskResponseBody(name='body'),
}

async function removeDataExportTaskWithOptions(request: RemoveDataExportTaskRequest, runtime: Util.RuntimeOptions): RemoveDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDataExportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDataExportTask(request: RemoveDataExportTaskRequest): RemoveDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDataExportTaskWithOptions(request, runtime);
}

model RemoveDataImportTaskRequest {
  taskId?: int32(name='TaskId'),
}

model RemoveDataImportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model RemoveDataImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDataImportTaskResponseBody(name='body'),
}

async function removeDataImportTaskWithOptions(request: RemoveDataImportTaskRequest, runtime: Util.RuntimeOptions): RemoveDataImportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDataImportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDataImportTask(request: RemoveDataImportTaskRequest): RemoveDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDataImportTaskWithOptions(request, runtime);
}

model RemoveDrdsDbRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveDrdsDbResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsDbResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbResponseBody(name='body'),
}

async function removeDrdsDbWithOptions(request: RemoveDrdsDbRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsDb', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsDb(request: RemoveDrdsDbRequest): RemoveDrdsDbResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbWithOptions(request, runtime);
}

model RemoveDrdsDbFailedRecordRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveDrdsDbFailedRecordResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model RemoveDrdsDbFailedRecordResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsDbFailedRecordResponseBody(name='body'),
}

async function removeDrdsDbFailedRecordWithOptions(request: RemoveDrdsDbFailedRecordRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbFailedRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsDbFailedRecord', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsDbFailedRecord(request: RemoveDrdsDbFailedRecordRequest): RemoveDrdsDbFailedRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbFailedRecordWithOptions(request, runtime);
}

model RemoveDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsInstanceResponseBody(name='body'),
}

async function removeDrdsInstanceWithOptions(request: RemoveDrdsInstanceRequest, runtime: Util.RuntimeOptions): RemoveDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsInstanceWithOptions(request, runtime);
}

model RemoveDrdsMysqlRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  force?: boolean(name='Force'),
  roDbInstanceId?: string(name='RoDbInstanceId'),
}

model RemoveDrdsMysqlResponseBody = {
  data?: {
    message?: string(name='Message'),
    result?: boolean(name='Result'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsMysqlResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsMysqlResponseBody(name='body'),
}

async function removeDrdsMysqlWithOptions(request: RemoveDrdsMysqlRequest, runtime: Util.RuntimeOptions): RemoveDrdsMysqlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveDrdsMysql', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeDrdsMysql(request: RemoveDrdsMysqlRequest): RemoveDrdsMysqlResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsMysqlWithOptions(request, runtime);
}

model RemoveEvaluateTaskRequest {
  taskId?: int32(name='TaskId'),
}

model RemoveEvaluateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model RemoveEvaluateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEvaluateTaskResponseBody(name='body'),
}

async function removeEvaluateTaskWithOptions(request: RemoveEvaluateTaskRequest, runtime: Util.RuntimeOptions): RemoveEvaluateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveEvaluateTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeEvaluateTask(request: RemoveEvaluateTaskRequest): RemoveEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEvaluateTaskWithOptions(request, runtime);
}

model RemoveInstanceAccountRequest {
  accountName?: string(name='AccountName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveInstanceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveInstanceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInstanceAccountResponseBody(name='body'),
}

async function removeInstanceAccountWithOptions(request: RemoveInstanceAccountRequest, runtime: Util.RuntimeOptions): RemoveInstanceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveInstanceAccount', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeInstanceAccount(request: RemoveInstanceAccountRequest): RemoveInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInstanceAccountWithOptions(request, runtime);
}

model RemoveRecycleBinTableRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: string(name='TableName'),
}

model RemoveRecycleBinTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveRecycleBinTableResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveRecycleBinTableResponseBody(name='body'),
}

async function removeRecycleBinTableWithOptions(request: RemoveRecycleBinTableRequest, runtime: Util.RuntimeOptions): RemoveRecycleBinTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveRecycleBinTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeRecycleBinTable(request: RemoveRecycleBinTableRequest): RemoveRecycleBinTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeRecycleBinTableWithOptions(request, runtime);
}

model RestartDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RestartDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model RestartDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDrdsInstanceResponseBody(name='body'),
}

async function restartDrdsInstanceWithOptions(request: RestartDrdsInstanceRequest, runtime: Util.RuntimeOptions): RestartDrdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDrdsInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDrdsInstance(request: RestartDrdsInstanceRequest): RestartDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDrdsInstanceWithOptions(request, runtime);
}

model RollbackInstanceVersionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model RollbackInstanceVersionResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RollbackInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackInstanceVersionResponseBody(name='body'),
}

async function rollbackInstanceVersionWithOptions(request: RollbackInstanceVersionRequest, runtime: Util.RuntimeOptions): RollbackInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackInstanceVersion', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackInstanceVersion(request: RollbackInstanceVersionRequest): RollbackInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackInstanceVersionWithOptions(request, runtime);
}

model SetBackupLocalRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
}

model SetBackupLocalResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model SetBackupLocalResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupLocalResponseBody(name='body'),
}

async function setBackupLocalWithOptions(request: SetBackupLocalRequest, runtime: Util.RuntimeOptions): SetBackupLocalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetBackupLocal', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setBackupLocal(request: SetBackupLocalRequest): SetBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupLocalWithOptions(request, runtime);
}

model SetBackupPolicyRequest {
  backupDbNames?: string(name='BackupDbNames'),
  backupLevel?: string(name='BackupLevel'),
  backupLog?: string(name='BackupLog'),
  backupMode?: string(name='BackupMode'),
  dataBackupRetentionPeriod?: string(name='DataBackupRetentionPeriod'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
  preferredBackupEndTime?: string(name='PreferredBackupEndTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupStartTime?: string(name='PreferredBackupStartTime'),
}

model SetBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model SetBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackupPolicyResponseBody(name='body'),
}

async function setBackupPolicyWithOptions(request: SetBackupPolicyRequest, runtime: Util.RuntimeOptions): SetBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetBackupPolicy', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setBackupPolicy(request: SetBackupPolicyRequest): SetBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupPolicyWithOptions(request, runtime);
}

model SetupBroadcastTablesRequest {
  active?: boolean(name='Active'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: [ string ](name='TableName'),
}

model SetupBroadcastTablesResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupBroadcastTablesResponse = {
  headers: map[string]string(name='headers'),
  body: SetupBroadcastTablesResponseBody(name='body'),
}

async function setupBroadcastTablesWithOptions(request: SetupBroadcastTablesRequest, runtime: Util.RuntimeOptions): SetupBroadcastTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupBroadcastTables', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupBroadcastTables(request: SetupBroadcastTablesRequest): SetupBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupBroadcastTablesWithOptions(request, runtime);
}

model SetupDrdsParamsRequest {
  data?: [ 
    {
      dbName?: string(name='DbName'),
      paramRanges?: string(name='ParamRanges'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      paramVariableName?: string(name='ParamVariableName'),
    }
  ](name='Data'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  paramLevel?: string(name='ParamLevel'),
  regionId?: string(name='RegionId'),
}

model SetupDrdsParamsResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupDrdsParamsResponse = {
  headers: map[string]string(name='headers'),
  body: SetupDrdsParamsResponseBody(name='body'),
}

async function setupDrdsParamsWithOptions(request: SetupDrdsParamsRequest, runtime: Util.RuntimeOptions): SetupDrdsParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupDrdsParams', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupDrdsParams(request: SetupDrdsParamsRequest): SetupDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupDrdsParamsWithOptions(request, runtime);
}

model SetupRecycleBinStatusRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  statusAction?: string(name='StatusAction'),
}

model SetupRecycleBinStatusResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupRecycleBinStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetupRecycleBinStatusResponseBody(name='body'),
}

async function setupRecycleBinStatusWithOptions(request: SetupRecycleBinStatusRequest, runtime: Util.RuntimeOptions): SetupRecycleBinStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupRecycleBinStatus', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupRecycleBinStatus(request: SetupRecycleBinStatusRequest): SetupRecycleBinStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupRecycleBinStatusWithOptions(request, runtime);
}

model SetupTableRequest {
  allowFullTableScan?: boolean(name='AllowFullTableScan'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: [ string ](name='TableName'),
}

model SetupTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupTableResponse = {
  headers: map[string]string(name='headers'),
  body: SetupTableResponseBody(name='body'),
}

async function setupTableWithOptions(request: SetupTableRequest, runtime: Util.RuntimeOptions): SetupTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupTable', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupTable(request: SetupTableRequest): SetupTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupTableWithOptions(request, runtime);
}

model SetupTableAsyncRequest {
  allowFullTableScan?: boolean(name='AllowFullTableScan'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  tableName?: [ string ](name='TableName'),
}

model SetupTableAsyncResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupTableAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: SetupTableAsyncResponseBody(name='body'),
}

async function setupTableAsyncWithOptions(request: SetupTableAsyncRequest, runtime: Util.RuntimeOptions): SetupTableAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetupTableAsync', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setupTableAsync(request: SetupTableAsyncRequest): SetupTableAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupTableAsyncWithOptions(request, runtime);
}

model SqlCompatibilityCancelRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  taskId?: long(name='TaskId'),
}

model SqlCompatibilityCancelResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SqlCompatibilityCancelResponse = {
  headers: map[string]string(name='headers'),
  body: SqlCompatibilityCancelResponseBody(name='body'),
}

async function sqlCompatibilityCancelWithOptions(request: SqlCompatibilityCancelRequest, runtime: Util.RuntimeOptions): SqlCompatibilityCancelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SqlCompatibilityCancel', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sqlCompatibilityCancel(request: SqlCompatibilityCancelRequest): SqlCompatibilityCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sqlCompatibilityCancelWithOptions(request, runtime);
}

model SqlCompatibilityStartRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  performanceTest?: boolean(name='PerformanceTest'),
  targetVersion?: string(name='TargetVersion'),
}

model SqlCompatibilityStartResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SqlCompatibilityStartResponse = {
  headers: map[string]string(name='headers'),
  body: SqlCompatibilityStartResponseBody(name='body'),
}

async function sqlCompatibilityStartWithOptions(request: SqlCompatibilityStartRequest, runtime: Util.RuntimeOptions): SqlCompatibilityStartResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SqlCompatibilityStart', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sqlCompatibilityStart(request: SqlCompatibilityStartRequest): SqlCompatibilityStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return sqlCompatibilityStartWithOptions(request, runtime);
}

model StartEvaluateTaskRequest {
  taskId?: int32(name='TaskId'),
}

model StartEvaluateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model StartEvaluateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartEvaluateTaskResponseBody(name='body'),
}

async function startEvaluateTaskWithOptions(request: StartEvaluateTaskRequest, runtime: Util.RuntimeOptions): StartEvaluateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartEvaluateTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startEvaluateTask(request: StartEvaluateTaskRequest): StartEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEvaluateTaskWithOptions(request, runtime);
}

model StartRestoreRequest {
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
  backupLevel?: string(name='BackupLevel'),
  backupMode?: string(name='BackupMode'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
}

model StartRestoreResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model StartRestoreResponse = {
  headers: map[string]string(name='headers'),
  body: StartRestoreResponseBody(name='body'),
}

async function startRestoreWithOptions(request: StartRestoreRequest, runtime: Util.RuntimeOptions): StartRestoreResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartRestore', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startRestore(request: StartRestoreRequest): StartRestoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRestoreWithOptions(request, runtime);
}

model StopDataExportTaskRequest {
  taskId?: int32(name='TaskId'),
}

model StopDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model StopDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopDataExportTaskResponseBody(name='body'),
}

async function stopDataExportTaskWithOptions(request: StopDataExportTaskRequest, runtime: Util.RuntimeOptions): StopDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDataExportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDataExportTask(request: StopDataExportTaskRequest): StopDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDataExportTaskWithOptions(request, runtime);
}

model StopDataImportTaskRequest {
  taskId?: int32(name='TaskId'),
}

model StopDataImportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model StopDataImportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopDataImportTaskResponseBody(name='body'),
}

async function stopDataImportTaskWithOptions(request: StopDataImportTaskRequest, runtime: Util.RuntimeOptions): StopDataImportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDataImportTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDataImportTask(request: StopDataImportTaskRequest): StopDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDataImportTaskWithOptions(request, runtime);
}

model StopEvaluateTaskRequest {
  taskId?: int32(name='TaskId'),
}

model StopEvaluateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskManageResult?: {
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='TaskManageResult'),
}

model StopEvaluateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopEvaluateTaskResponseBody(name='body'),
}

async function stopEvaluateTaskWithOptions(request: StopEvaluateTaskRequest, runtime: Util.RuntimeOptions): StopEvaluateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopEvaluateTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopEvaluateTask(request: StopEvaluateTaskRequest): StopEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopEvaluateTaskWithOptions(request, runtime);
}

model SubmitCleanTableShardingKeyModifyRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model SubmitCleanTableShardingKeyModifyResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitCleanTableShardingKeyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCleanTableShardingKeyModifyResponseBody(name='body'),
}

async function submitCleanTableShardingKeyModifyWithOptions(request: SubmitCleanTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitCleanTableShardingKeyModifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitCleanTableShardingKeyModify', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitCleanTableShardingKeyModify(request: SubmitCleanTableShardingKeyModifyRequest): SubmitCleanTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCleanTableShardingKeyModifyWithOptions(request, runtime);
}

model SubmitCleanTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  expandType?: string(name='ExpandType'),
  jobId?: string(name='JobId'),
  parentJobId?: string(name='ParentJobId'),
}

model SubmitCleanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitCleanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCleanTaskResponseBody(name='body'),
}

async function submitCleanTaskWithOptions(request: SubmitCleanTaskRequest, runtime: Util.RuntimeOptions): SubmitCleanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitCleanTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitCleanTask(request: SubmitCleanTaskRequest): SubmitCleanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCleanTaskWithOptions(request, runtime);
}

model SubmitHotExpandPreCheckTaskRequest {
  dbInstType?: string(name='DbInstType'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  tableList?: [ string ](name='TableList'),
}

model SubmitHotExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitHotExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandPreCheckTaskResponseBody(name='body'),
}

async function submitHotExpandPreCheckTaskWithOptions(request: SubmitHotExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandPreCheckTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitHotExpandPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitHotExpandPreCheckTask(request: SubmitHotExpandPreCheckTaskRequest): SubmitHotExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandPreCheckTaskWithOptions(request, runtime);
}

model SubmitHotExpandTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  extendedMapping?: [ 
    {
      srcDb?: string(name='SrcDb'),
      srcInstanceId?: string(name='SrcInstanceId'),
    }
  ](name='ExtendedMapping'),
  instanceDbMapping?: [ 
    {
      dbList?: string(name='DbList'),
      instanceName?: string(name='InstanceName'),
    }
  ](name='InstanceDbMapping'),
  mapping?: [ 
    {
      dbShardColumn?: string(name='DbShardColumn'),
      hotDbName?: string(name='HotDbName'),
      hotTableName?: string(name='HotTableName'),
      logicTable?: string(name='LogicTable'),
      shardDbValue?: string(name='ShardDbValue'),
      shardTbValue?: string(name='ShardTbValue'),
      tbShardColumn?: string(name='TbShardColumn'),
    }
  ](name='Mapping'),
  supperAccountMapping?: [ 
    {
      instanceName?: string(name='InstanceName'),
      supperAccount?: string(name='SupperAccount'),
      supperPassword?: string(name='SupperPassword'),
    }
  ](name='SupperAccountMapping'),
  taskDesc?: string(name='TaskDesc'),
  taskName?: string(name='TaskName'),
}

model SubmitHotExpandTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitHotExpandTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitHotExpandTaskResponseBody(name='body'),
}

async function submitHotExpandTaskWithOptions(request: SubmitHotExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitHotExpandTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitHotExpandTask(request: SubmitHotExpandTaskRequest): SubmitHotExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandTaskWithOptions(request, runtime);
}

model SubmitRollbackShardingKeyModifyRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model SubmitRollbackShardingKeyModifyResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitRollbackShardingKeyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitRollbackShardingKeyModifyResponseBody(name='body'),
}

async function submitRollbackShardingKeyModifyWithOptions(request: SubmitRollbackShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitRollbackShardingKeyModifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitRollbackShardingKeyModify', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitRollbackShardingKeyModify(request: SubmitRollbackShardingKeyModifyRequest): SubmitRollbackShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitRollbackShardingKeyModifyWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckRequest {
  dbInstType?: string(name='DbInstType'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model SubmitSmoothExpandPreCheckResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSmoothExpandPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckResponseBody(name='body'),
}

async function submitSmoothExpandPreCheckWithOptions(request: SubmitSmoothExpandPreCheckRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandPreCheck', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandPreCheck(request: SubmitSmoothExpandPreCheckRequest): SubmitSmoothExpandPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model SubmitSmoothExpandPreCheckTaskResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSmoothExpandPreCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandPreCheckTaskResponseBody(name='body'),
}

async function submitSmoothExpandPreCheckTaskWithOptions(request: SubmitSmoothExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandPreCheckTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandPreCheckTask(request: SubmitSmoothExpandPreCheckTaskRequest): SubmitSmoothExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckTaskWithOptions(request, runtime);
}

model SubmitSmoothExpandTaskRequest {
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  rdsSuperInstances?: [ 
    {
      accountName?: string(name='AccountName'),
      password?: string(name='Password'),
      rdsName?: string(name='RdsName'),
    }
  ](name='RdsSuperInstances'),
  transferTaskInfos?: [ 
    {
      dbName?: string(name='DbName'),
      dstInstanceName?: string(name='DstInstanceName'),
      instanceType?: string(name='InstanceType'),
      srcInstanceName?: string(name='SrcInstanceName'),
    }
  ](name='TransferTaskInfos'),
}

model SubmitSmoothExpandTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSmoothExpandTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSmoothExpandTaskResponseBody(name='body'),
}

async function submitSmoothExpandTaskWithOptions(request: SubmitSmoothExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSmoothExpandTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSmoothExpandTask(request: SubmitSmoothExpandTaskRequest): SubmitSmoothExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandTaskWithOptions(request, runtime);
}

model SubmitSqlFlashbackTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: string(name='EndTime'),
  recallRestoreType?: int32(name='RecallRestoreType'),
  recallType?: int32(name='RecallType'),
  sqlPk?: string(name='SqlPk'),
  sqlType?: string(name='SqlType'),
  startTime?: string(name='StartTime'),
  tableName?: string(name='TableName'),
  traceId?: string(name='TraceId'),
}

model SubmitSqlFlashbackTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model SubmitSqlFlashbackTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSqlFlashbackTaskResponseBody(name='body'),
}

async function submitSqlFlashbackTaskWithOptions(request: SubmitSqlFlashbackTaskRequest, runtime: Util.RuntimeOptions): SubmitSqlFlashbackTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSqlFlashbackTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSqlFlashbackTask(request: SubmitSqlFlashbackTaskRequest): SubmitSqlFlashbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSqlFlashbackTaskWithOptions(request, runtime);
}

model SubmitSwitchTableShardingKeyModifyRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model SubmitSwitchTableShardingKeyModifyResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSwitchTableShardingKeyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSwitchTableShardingKeyModifyResponseBody(name='body'),
}

async function submitSwitchTableShardingKeyModifyWithOptions(request: SubmitSwitchTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitSwitchTableShardingKeyModifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSwitchTableShardingKeyModify', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSwitchTableShardingKeyModify(request: SubmitSwitchTableShardingKeyModifyRequest): SubmitSwitchTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSwitchTableShardingKeyModifyWithOptions(request, runtime);
}

model SubmitSwitchTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  expandType?: string(name='ExpandType'),
  jobId?: string(name='JobId'),
  parentJobId?: string(name='ParentJobId'),
}

model SubmitSwitchTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSwitchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSwitchTaskResponseBody(name='body'),
}

async function submitSwitchTaskWithOptions(request: SubmitSwitchTaskRequest, runtime: Util.RuntimeOptions): SubmitSwitchTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSwitchTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSwitchTask(request: SubmitSwitchTaskRequest): SubmitSwitchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSwitchTaskWithOptions(request, runtime);
}

model SubmitTableShardingKeyModifyRequest {
  dbComputeLength?: string(name='DbComputeLength'),
  dbName?: string(name='DbName'),
  dbRightShiftOffset?: int32(name='DbRightShiftOffset'),
  dbShardingColumnList?: string(name='DbShardingColumnList'),
  dbShardingFunction?: string(name='DbShardingFunction'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  isShard?: boolean(name='IsShard'),
  regionId?: string(name='RegionId'),
  srcTableName?: string(name='SrcTableName'),
  targetTableName?: string(name='TargetTableName'),
  tbComputeLength?: string(name='TbComputeLength'),
  tbPartitions?: string(name='TbPartitions'),
  tbRightShiftOffset?: string(name='TbRightShiftOffset'),
  tbShardingColumnList?: string(name='TbShardingColumnList'),
  tbShardingFunction?: string(name='TbShardingFunction'),
}

model SubmitTableShardingKeyModifyResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitTableShardingKeyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTableShardingKeyModifyResponseBody(name='body'),
}

async function submitTableShardingKeyModifyWithOptions(request: SubmitTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitTableShardingKeyModifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitTableShardingKeyModify', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitTableShardingKeyModify(request: SubmitTableShardingKeyModifyRequest): SubmitTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTableShardingKeyModifyWithOptions(request, runtime);
}

model SwitchGlobalBroadcastTypeRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model SwitchGlobalBroadcastTypeResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchGlobalBroadcastTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchGlobalBroadcastTypeResponseBody(name='body'),
}

async function switchGlobalBroadcastTypeWithOptions(request: SwitchGlobalBroadcastTypeRequest, runtime: Util.RuntimeOptions): SwitchGlobalBroadcastTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchGlobalBroadcastType', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchGlobalBroadcastType(request: SwitchGlobalBroadcastTypeRequest): SwitchGlobalBroadcastTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchGlobalBroadcastTypeWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateInstanceNetworkRequest {
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  retainClassic?: boolean(name='RetainClassic'),
  srcInstanceNetworkType?: string(name='SrcInstanceNetworkType'),
}

model UpdateInstanceNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInstanceNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceNetworkResponseBody(name='body'),
}

async function updateInstanceNetworkWithOptions(request: UpdateInstanceNetworkRequest, runtime: Util.RuntimeOptions): UpdateInstanceNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstanceNetwork', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstanceNetwork(request: UpdateInstanceNetworkRequest): UpdateInstanceNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceNetworkWithOptions(request, runtime);
}

model UpdatePrivateRdsClassRequest {
  autoUseCoupon?: boolean(name='AutoUseCoupon'),
  DBInstanceId?: string(name='DBInstanceId'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  prePayDuration?: int32(name='PrePayDuration'),
  rdsClass?: string(name='RdsClass'),
  storage?: string(name='Storage'),
}

model UpdatePrivateRdsClassResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdatePrivateRdsClassResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrivateRdsClassResponseBody(name='body'),
}

async function updatePrivateRdsClassWithOptions(request: UpdatePrivateRdsClassRequest, runtime: Util.RuntimeOptions): UpdatePrivateRdsClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePrivateRdsClass', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePrivateRdsClass(request: UpdatePrivateRdsClassRequest): UpdatePrivateRdsClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrivateRdsClassWithOptions(request, runtime);
}

model UpdateResourceGroupAttributeRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model UpdateResourceGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateResourceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupAttributeResponseBody(name='body'),
}

async function updateResourceGroupAttributeWithOptions(request: UpdateResourceGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateResourceGroupAttribute', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateResourceGroupAttribute(request: UpdateResourceGroupAttributeRequest): UpdateResourceGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupAttributeWithOptions(request, runtime);
}

model UpgradeHiStoreInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  historeInstanceId?: string(name='HistoreInstanceId'),
  regionId?: string(name='RegionId'),
}

model UpgradeHiStoreInstanceResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpgradeHiStoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeHiStoreInstanceResponseBody(name='body'),
}

async function upgradeHiStoreInstanceWithOptions(request: UpgradeHiStoreInstanceRequest, runtime: Util.RuntimeOptions): UpgradeHiStoreInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeHiStoreInstance', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeHiStoreInstance(request: UpgradeHiStoreInstanceRequest): UpgradeHiStoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeHiStoreInstanceWithOptions(request, runtime);
}

model UpgradeInstanceVersionRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  rpm?: string(name='Rpm'),
}

model UpgradeInstanceVersionResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

async function upgradeInstanceVersionWithOptions(request: UpgradeInstanceVersionRequest, runtime: Util.RuntimeOptions): UpgradeInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstanceVersion', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceVersionWithOptions(request, runtime);
}

model ValidateShardTaskRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  sourceTableName?: string(name='SourceTableName'),
  targetTableName?: string(name='TargetTableName'),
  taskType?: string(name='TaskType'),
}

model ValidateShardTaskResponseBody = {
  list?: [ 
    {
      item?: string(name='Item'),
      result?: int32(name='Result'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ValidateShardTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateShardTaskResponseBody(name='body'),
}

async function validateShardTaskWithOptions(request: ValidateShardTaskRequest, runtime: Util.RuntimeOptions): ValidateShardTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateShardTask', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateShardTask(request: ValidateShardTaskRequest): ValidateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateShardTaskWithOptions(request, runtime);
}

model DescribeRdsInstInfosRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  search?: string(name='Search'),
}

model DescribeRdsInstInfosResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: int32(name='DBInstanceStatus'),
      DBInstanceType?: string(name='DBInstanceType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      readOnlyDBInstanceId?: {
        readOnlyDBInstanceId?: [ string ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceId'),
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstance')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeRdsInstInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsInstInfosResponseBody(name='body'),
}

async function describeRdsInstInfosWithOptions(request: DescribeRdsInstInfosRequest, runtime: Util.RuntimeOptions): DescribeRdsInstInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('describeRdsInstInfos', '2019-01-23', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsInstInfos(request: DescribeRdsInstInfosRequest): DescribeRdsInstInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsInstInfosWithOptions(request, runtime);
}

