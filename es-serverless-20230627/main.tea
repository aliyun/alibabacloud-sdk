/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('es-serverless', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAppRequest {
  appName?: string(name='appName', description='应用名

This parameter is required.'),
  authentication?: {
    basicAuth?: [ 
      {
        password?: string(name='password'),
        username?: string(name='username'),
      }
    ](name='basicAuth'),
  }(name='authentication', description='This parameter is required.'),
  chargeType?: string(name='chargeType', description='This parameter is required.'),
  description?: string(name='description', description='应用备注'),
  network?: [ 
    {
      domain?: string(name='domain'),
      enabled?: boolean(name='enabled'),
      port?: int32(name='port'),
      type?: string(name='type'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network'),
  privateNetwork?: [ 
    {
      enabled?: boolean(name='enabled'),
      pvlEndpointId?: string(name='pvlEndpointId'),
      type?: string(name='type'),
      vpcId?: string(name='vpcId'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='privateNetwork'),
  quotaInfo?: {
    appType?: string(name='appType'),
    cu?: int32(name='cu'),
    storage?: int32(name='storage'),
  }(name='quotaInfo'),
  regionId?: string(name='regionId'),
  scenario?: string(name='scenario'),
  version?: string(name='version'),
  dryRun?: boolean(name='dryRun'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instaneId?: string(name='instaneId', example='es-serverless-cn-xxx'),
  }(name='result'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
 * @summary 创建Serverless应用
 *
 * @param request CreateAppRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAppResponse
 */
async function createAppWithOptions(request: CreateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    body['appName'] = request.appName;
  }
  if (!Util.isUnset(request.authentication)) {
    body['authentication'] = request.authentication;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['chargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.network)) {
    body['network'] = request.network;
  }
  if (!Util.isUnset(request.privateNetwork)) {
    body['privateNetwork'] = request.privateNetwork;
  }
  if (!Util.isUnset(request.quotaInfo)) {
    body['quotaInfo'] = request.quotaInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    body['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scenario)) {
    body['scenario'] = request.scenario;
  }
  if (!Util.isUnset(request.version)) {
    body['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Serverless应用
 *
 * @param request CreateAppRequest
 * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppWithOptions(request, headers, runtime);
}

model CreateEndpointRequest {
  endpointZones?: [ 
    {
      vswitchId?: string(name='vswitchId', example='vsw-uf6qmfkqdcw*****'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-h'),
    }
  ](name='endpointZones', description='This parameter is required.'),
  name?: string(name='name', example='testendpoint'),
  vpcId?: string(name='vpcId', description='This parameter is required.', example='vpc-uf664nyle5khp5***'),
  type?: string(name='type', example='VPC'),
}

model CreateEndpointResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    endpointId?: string(name='endpointId', example='essep-abd***dks'),
  }(name='result'),
}

model CreateEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEndpointResponseBody(name='body'),
}

/**
 * @summary 创建端点
 *
 * @param request CreateEndpointRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEndpointResponse
 */
async function createEndpointWithOptions(request: CreateEndpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEndpointResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.endpointZones)) {
    body['endpointZones'] = request.endpointZones;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['vpcId'] = request.vpcId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEndpoint',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/endpoints`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建端点
 *
 * @param request CreateEndpointRequest
 * @return CreateEndpointResponse
 */
async function createEndpoint(request: CreateEndpointRequest): CreateEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEndpointWithOptions(request, headers, runtime);
}

model DeleteAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
 * @summary 删除Serverless应用。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAppResponse
 */
async function deleteAppWithOptions(appName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances/${OpenApiUtil.getEncodeParam(appName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Serverless应用。
 *
 * @return DeleteAppResponse
 */
async function deleteApp(appName: string): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAppWithOptions(appName, headers, runtime);
}

model GetAppRequest {
  detailed?: boolean(name='detailed', example='false'),
}

model GetAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    appId?: string(name='appId', example='test-app-abc'),
    appName?: string(name='appName', example='es-severless-test-app'),
    createTime?: string(name='createTime', example='2022-08-15T11:20:52.370Z'),
    description?: string(name='description'),
    instanceId?: string(name='instanceId'),
    modifiedTime?: string(name='modifiedTime', example='2022-08-15T11:21:50.000Z'),
    network?: [ 
      {
        domain?: string(name='domain'),
        enabled?: boolean(name='enabled'),
        port?: int32(name='port'),
        type?: string(name='type'),
        whiteIpGroup?: [ 
          {
            groupName?: string(name='groupName'),
            ips?: [ string ](name='ips'),
          }
        ](name='whiteIpGroup'),
      }
    ](name='network'),
    ownerId?: string(name='ownerId', example='*******7595'),
    privateNetwork?: [ 
      {
        domain?: string(name='domain'),
        enabled?: boolean(name='enabled'),
        port?: int32(name='port'),
        pvlEndpointId?: string(name='pvlEndpointId'),
        type?: string(name='type'),
        vpcId?: string(name='vpcId'),
        whiteIpGroup?: [ 
          {
            groupName?: string(name='groupName'),
            ips?: [ string ](name='ips'),
          }
        ](name='whiteIpGroup'),
      }
    ](name='privateNetwork'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    status?: string(name='status', example='ACTIVE'),
    version?: string(name='version', example='7.10'),
  }(name='result'),
}

model GetAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppResponseBody(name='body'),
}

/**
 * @summary 获取Serverless应用详情
 *
 * @param request GetAppRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAppResponse
 */
async function getAppWithOptions(appName: string, request: GetAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.detailed)) {
    query['detailed'] = request.detailed;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApp',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances/${OpenApiUtil.getEncodeParam(appName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Serverless应用详情
 *
 * @param request GetAppRequest
 * @return GetAppResponse
 */
async function getApp(appName: string, request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAppWithOptions(appName, request, headers, runtime);
}

model GetAppQuotaResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    limiterInfo?: {
      limiters?: [ 
        {
          immutable?: boolean(name='immutable', example='true'),
          maxValue?: long(name='maxValue', example='10'),
          minValue?: long(name='minValue', example='1'),
          type?: string(name='type', example='INDEX_NUMBER_OF_SHARDS'),
        }
      ](name='limiters'),
    }(name='limiterInfo'),
    quotaInfo?: map[string]any(name='quotaInfo'),
  }(name='result'),
}

model GetAppQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppQuotaResponseBody(name='body'),
}

/**
 * @summary 获取Serverless应用配额详情
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAppQuotaResponse
 */
async function getAppQuotaWithOptions(appName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAppQuota',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances/${OpenApiUtil.getEncodeParam(appName)}/quota`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Serverless应用配额详情
 *
 * @return GetAppQuotaResponse
 */
async function getAppQuota(appName: string): GetAppQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAppQuotaWithOptions(appName, headers, runtime);
}

model GetMonitorDataRequest {
  body?: string(name='body', example='{"start":1689245180581,"end":1689246950582,"queries":[{"metric":"aliyunes.elasticsearch.index.docs.count","aggregator":"sum","downsample":"avg","tags":{"resource":"{appName}"},"filters":[],"granularity":"auto"}]}'),
}

model GetMonitorDataResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      dps?: map[string]any(name='dps', example='{
    "1689480600":28676235.104761902
}'),
      integrity?: float(name='integrity', example='1'),
      messageWatermark?: long(name='messageWatermark', example='1689566839447'),
      metric?: string(name='metric', example='elasticsearch-server.logic_cpu.cpu'),
      summary?: float(name='summary', example='172455913.18935508'),
      tags?: map[string]any(name='tags', example='{
                "indexName":"test"
            }'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model GetMonitorDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMonitorDataResponseBody(name='body'),
}

/**
 * @summary 获取监控数据
 *
 * @param request GetMonitorDataRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMonitorDataResponse
 */
async function getMonitorDataWithOptions(request: GetMonitorDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'GetMonitorData',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/emon/metrics/query`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取监控数据
 *
 * @param request GetMonitorDataRequest
 * @return GetMonitorDataResponse
 */
async function getMonitorData(request: GetMonitorDataRequest): GetMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMonitorDataWithOptions(request, headers, runtime);
}

model ListAppsRequest {
  appName?: string(name='appName', example='es-severless-test-app'),
  createTime?: string(name='createTime', example='2023-08-29T02:37:22Z'),
  description?: string(name='description', example='metrics-logs-online'),
  orderType?: string(name='orderType', example='desc'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  status?: string(name='status', example='ACTIVE'),
}

model ListAppsResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      appId?: string(name='appId', example='test-abc'),
      appName?: string(name='appName', description='代表资源名称的资源属性字段', example='es-severless-test-app'),
      createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='2022-12-27T07:09:11.000Z'),
      description?: string(name='description', description='应用备注'),
      instanceId?: string(name='instanceId'),
      modifiedTime?: string(name='modifiedTime', example='2022-12-27T07:09:11.000Z'),
      ownerId?: string(name='ownerId', description='OwnerID账号ID', example='*********7595'),
      regionId?: string(name='regionId', description='代表region的资源属性字段', example='cn-hangzhou'),
      status?: string(name='status', description='代表资源状态的资源属性字段', example='ACTIVE'),
      version?: string(name='version', example='7.10'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount', description='This parameter is required.', example='4'),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

/**
 * @summary 查看Serverless应用列表
 *
 * @param request ListAppsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAppsResponse
 */
async function listAppsWithOptions(request: ListAppsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appName)) {
    query['appName'] = request.appName;
  }
  if (!Util.isUnset(request.createTime)) {
    query['createTime'] = request.createTime;
  }
  if (!Util.isUnset(request.description)) {
    query['description'] = request.description;
  }
  if (!Util.isUnset(request.orderType)) {
    query['orderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApps',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看Serverless应用列表
 *
 * @param request ListAppsRequest
 * @return ListAppsResponse
 */
async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppsWithOptions(request, headers, runtime);
}

model UpdateAppRequest {
  applyReason?: string(name='applyReason'),
  authentication?: {
    basicAuth?: [ 
      {
        password?: string(name='password'),
        username?: string(name='username'),
      }
    ](name='basicAuth'),
  }(name='authentication'),
  contactInfo?: string(name='contactInfo'),
  description?: string(name='description', description='应用备注'),
  limiterInfo?: {
    limiters?: [ 
      {
        maxValue?: int32(name='maxValue'),
        minValue?: int32(name='minValue'),
        type?: string(name='type'),
        values?: [ string ](name='values'),
      }
    ](name='limiters'),
  }(name='limiterInfo'),
  network?: [ 
    {
      domain?: string(name='domain'),
      enabled?: boolean(name='enabled'),
      port?: int32(name='port'),
      type?: string(name='type'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network'),
  privateNetwork?: [ 
    {
      enabled?: boolean(name='enabled'),
      pvlEndpointId?: string(name='pvlEndpointId'),
      type?: string(name='type'),
      vpcId?: string(name='vpcId'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='privateNetwork'),
}

model UpdateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model UpdateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppResponseBody(name='body'),
}

/**
 * @summary 编辑Serverless应用
 *
 * @param request UpdateAppRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAppResponse
 */
async function updateAppWithOptions(appName: string, request: UpdateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyReason)) {
    body['applyReason'] = request.applyReason;
  }
  if (!Util.isUnset(request.authentication)) {
    body['authentication'] = request.authentication;
  }
  if (!Util.isUnset(request.contactInfo)) {
    body['contactInfo'] = request.contactInfo;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.limiterInfo)) {
    body['limiterInfo'] = request.limiterInfo;
  }
  if (!Util.isUnset(request.network)) {
    body['network'] = request.network;
  }
  if (!Util.isUnset(request.privateNetwork)) {
    body['privateNetwork'] = request.privateNetwork;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApp',
    version = '2023-06-27',
    protocol = 'HTTPS',
    pathname = `/openapi/es-serverless/instances/${OpenApiUtil.getEncodeParam(appName)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑Serverless应用
 *
 * @param request UpdateAppRequest
 * @return UpdateAppResponse
 */
async function updateApp(appName: string, request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAppWithOptions(appName, request, headers, runtime);
}

