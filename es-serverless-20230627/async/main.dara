/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'es-serverless';
  @version = '2023-06-27';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelSpecReviewTaskRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  taskId: string(name='taskId', description='This parameter is required.', example='339', position='Path'),
}

model CancelSpecReviewTaskResponseBody = {
  requestId?: string(name='requestId', example='1B64F3E0-25D5-5043-B5C8-4FF22BB12CCD'),
  result?: boolean(name='result', example='true'),
}

model CancelSpecReviewTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSpecReviewTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelSpecReviewTask  CancelSpecReviewTaskRequest
  * @return CancelSpecReviewTaskResponse
 */
async function cancelSpecReviewTask(request: CancelSpecReviewTaskRequest): CancelSpecReviewTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelSpecReviewTask', 'DELETE', '/openapi/es-serverless/instances/{appName}/spec-review-tasks/{taskId}', 'json', false, 'json', request);
}

model CreateAppRequest {
  appName: string(name='appName', description='应用名

This parameter is required.', position='Body'),
  authentication: {
    basicAuth?: [ 
      {
        password?: string(name='password'),
        username?: string(name='username'),
      }
    ](name='basicAuth'),
  }(name='authentication', description='This parameter is required.', position='Body'),
  chargeType: string(name='chargeType', description='This parameter is required.', position='Body'),
  description?: string(name='description', description='应用备注', position='Body'),
  network?: [ 
    {
      domain?: string(name='domain'),
      enabled?: boolean(name='enabled'),
      port?: int32(name='port'),
      type?: string(name='type'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network', position='Body'),
  privateNetwork?: [ 
    {
      enabled?: boolean(name='enabled'),
      pvlEndpointId?: string(name='pvlEndpointId'),
      type?: string(name='type'),
      vpcId?: string(name='vpcId'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='privateNetwork', position='Body'),
  quotaInfo?: {
    appType?: string(name='appType'),
    cu?: int32(name='cu'),
    storage?: int32(name='storage'),
  }(name='quotaInfo', position='Body'),
  regionId?: string(name='regionId', position='Body'),
  scenario?: string(name='scenario', position='Body'),
  version?: string(name='version', position='Body'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instaneId?: string(name='instaneId', example='es-serverless-cn-xxx'),
  }(name='result'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApp  CreateAppRequest
  * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApp', 'POST', '/openapi/es-serverless/instances', 'json', false, 'json', request);
}

model CreateEndpointRequest {
  endpointZones: [ 
    {
      vswitchId?: string(name='vswitchId', example='vsw-uf6qmfkqdcw*****'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-h'),
    }
  ](name='endpointZones', description='This parameter is required.', position='Body'),
  name?: string(name='name', example='testendpoint', position='Body'),
  vpcId: string(name='vpcId', description='This parameter is required.', example='vpc-uf664nyle5khp5***', position='Body'),
  type?: string(name='type', example='VPC', position='Query'),
}

model CreateEndpointResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    endpointId?: string(name='endpointId', example='essep-abd***dks'),
  }(name='result'),
}

model CreateEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEndpoint  CreateEndpointRequest
  * @return CreateEndpointResponse
 */
async function createEndpoint(request: CreateEndpointRequest): CreateEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEndpoint', 'POST', '/openapi/es-serverless/endpoints', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  repository: string(name='repository', description='This parameter is required.', example='aliyun_auto_snapshot', position='Path'),
  indices: string(name='indices', description='This parameter is required.', example='product_info', position='Body'),
  snapshot: string(name='snapshot', description='This parameter is required.', example='qingning', position='Body'),
  dryRun?: boolean(name='dryRun', example='false', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='requestId', example='03761BE5-D12F-55B4-9C93-0255C11DE44A'),
  result?: boolean(name='result', example='true'),
}

model CreateSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSnapshot  CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSnapshot', 'POST', '/openapi/es-serverless/instances/{appName}/snapshot-repositories/{repository}/snapshots', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApp  DeleteAppRequest
  * @return DeleteAppResponse
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApp', 'DELETE', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

model DeleteDictRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  name: string(name='name', description='This parameter is required.', example='a.dic', position='Body'),
  type: string(name='type', description='This parameter is required.', example='MAIN', position='Body'),
}

model DeleteDictResponseBody = {
  requestId?: string(name='requestId', example='2BF6B57E-5AAD-5389-80CD-E200BBF91FF9'),
  result?: boolean(name='result', example='true'),
}

model DeleteDictResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDictResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDict  DeleteDictRequest
  * @return DeleteDictResponse
 */
async function deleteDict(request: DeleteDictRequest): DeleteDictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDict', 'POST', '/openapi/es-serverless/instances/{appName}/dicts/actions/remove', 'json', false, 'json', request);
}

model DeleteEndpointRequest {
  endpointId: string(name='endpointId', description='This parameter is required.', example='essep-2f46b743f60****', position='Path'),
}

model DeleteEndpointResponseBody = {
  requestId?: string(name='requestId', example='1305A3E0-A291-54BA-A3B2-7D1C12EC4112'),
  result?: boolean(name='result', example='true'),
}

model DeleteEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEndpoint  DeleteEndpointRequest
  * @return DeleteEndpointResponse
 */
async function deleteEndpoint(request: DeleteEndpointRequest): DeleteEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEndpoint', 'DELETE', '/openapi/es-serverless/endpoints/{endpointId}', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  repository: string(name='repository', description='This parameter is required.', example='aliyun_auto_snapshot', position='Path'),
  snapshot: string(name='snapshot', description='This parameter is required.', example='qingning', position='Path'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='requestId', example='16484F36-A2A3-5A05-B242-0BF2BF6AA326'),
  result?: boolean(name='result', example='true'),
}

model DeleteSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnapshotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSnapshot  DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSnapshot', 'DELETE', '/openapi/es-serverless/instances/{appName}/snapshot-repositories/{repository}/snapshots/{snapshot}', 'json', false, 'json', request);
}

model GetAppRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  detailed?: boolean(name='detailed', example='false', position='Query'),
}

model GetAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    appId?: string(name='appId', example='test-app-abc'),
    appName?: string(name='appName', example='es-severless-test-app'),
    appType?: string(name='appType'),
    createTime?: string(name='createTime', example='2022-08-15T11:20:52.370Z'),
    description?: string(name='description'),
    instanceId?: string(name='instanceId'),
    modifiedTime?: string(name='modifiedTime', example='2022-08-15T11:21:50.000Z'),
    network?: [ 
      {
        domain?: string(name='domain'),
        enabled?: boolean(name='enabled'),
        port?: int32(name='port'),
        type?: string(name='type'),
        whiteIpGroup?: [ 
          {
            groupName?: string(name='groupName'),
            ips?: [ string ](name='ips'),
          }
        ](name='whiteIpGroup'),
      }
    ](name='network'),
    ownerId?: string(name='ownerId', example='*******7595'),
    privateNetwork?: [ 
      {
        domain?: string(name='domain'),
        enabled?: boolean(name='enabled'),
        port?: int32(name='port'),
        pvlEndpointId?: string(name='pvlEndpointId'),
        type?: string(name='type'),
        vpcId?: string(name='vpcId'),
        whiteIpGroup?: [ 
          {
            groupName?: string(name='groupName'),
            ips?: [ string ](name='ips'),
          }
        ](name='whiteIpGroup'),
      }
    ](name='privateNetwork'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    status?: string(name='status', example='ACTIVE'),
    version?: string(name='version', example='7.10'),
  }(name='result'),
}

model GetAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApp  GetAppRequest
  * @return GetAppResponse
 */
async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApp', 'GET', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

model GetAppQuotaRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
}

model GetAppQuotaResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    limiterInfo?: {
      limiters?: [ 
        {
          immutable?: boolean(name='immutable', example='true'),
          maxValue?: long(name='maxValue', example='10'),
          minValue?: long(name='minValue', example='1'),
          type?: string(name='type', example='INDEX_NUMBER_OF_SHARDS'),
        }
      ](name='limiters'),
    }(name='limiterInfo'),
    quotaInfo?: map[string]any(name='quotaInfo'),
  }(name='result'),
}

model GetAppQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAppQuota  GetAppQuotaRequest
  * @return GetAppQuotaResponse
 */
async function getAppQuota(request: GetAppQuotaRequest): GetAppQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppQuota', 'GET', '/openapi/es-serverless/instances/{appName}/quota', 'json', false, 'json', request);
}

model GetMonitorDataRequest {
  body?: string(name='body', example='{"start":1689245180581,"end":1689246950582,"queries":[{"metric":"aliyunes.elasticsearch.index.docs.count","aggregator":"sum","downsample":"avg","tags":{"resource":"{appName}"},"filters":[],"granularity":"auto"}]}', position='Body'),
}

model GetMonitorDataResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      dps?: map[string]any(name='dps', example='{
    "1689480600":28676235.104761902
}'),
      integrity?: float(name='integrity', example='1'),
      messageWatermark?: long(name='messageWatermark', example='1689566839447'),
      metric?: string(name='metric', example='elasticsearch-server.logic_cpu.cpu'),
      summary?: float(name='summary', example='172455913.18935508'),
      tags?: map[string]any(name='tags', example='{
                "indexName":"test"
            }'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model GetMonitorDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMonitorDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMonitorData  GetMonitorDataRequest
  * @return GetMonitorDataResponse
 */
async function getMonitorData(request: GetMonitorDataRequest): GetMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMonitorData', 'POST', '/openapi/es-serverless/emon/metrics/query', 'json', false, 'json', request);
}

model GetSnapshotSettingRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
}

model GetSnapshotSettingResponseBody = {
  requestId?: string(name='requestId', example='7B6CE6E1-5BA0-56DA-BFFD-8D90692F1EFC'),
  result?: {
    enable?: boolean(name='enable', example='true'),
    quartzRegex?: string(name='quartzRegex', example='0 0 01 ? * * *'),
  }(name='result'),
}

model GetSnapshotSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSnapshotSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSnapshotSetting  GetSnapshotSettingRequest
  * @return GetSnapshotSettingResponse
 */
async function getSnapshotSetting(request: GetSnapshotSettingRequest): GetSnapshotSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSnapshotSetting', 'GET', '/openapi/es-serverless/instances/{appName}/auto-snapshot-setting', 'json', false, 'json', request);
}

model GetSpecReviewTaskRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  taskId: int32(name='taskId', description='This parameter is required.', example='339', position='Path'),
}

model GetSpecReviewTaskResponseBody = {
  requestId?: string(name='requestId', example='E310AC54-957A-5FD5-B85B-E972B2BDA8DE'),
  result?: {
    id?: string(name='Id', description='代表资源一级ID的资源属性字段', example='339'),
    appName?: string(name='appName', example='test'),
    applyLimiter?: map[string]any(name='applyLimiter', example='{
               "limiters": [
                    {
                         "type": "INDEX_QUOTA",
                         "maxValue": 500,
                         "immutable": false
                    }
               ]
          }'),
    applyQuota?: map[string]any(name='applyQuota', example='{
               "appType": "TRIAL",
               "cu": 4,
               "storage": 100
          }'),
    applyReason?: string(name='applyReason'),
    effectiveLimiter?: map[string]any(name='effectiveLimiter', example='{
               "limiters": [
                    {
                         "type": "INDEX_QUOTA",
                         "maxValue": 500,
                         "immutable": false
                    }
               ]
          }'),
    effectiveQuota?: map[string]any(name='effectiveQuota', example='{
               "appType": "TRIAL",
               "cu": 4,
               "storage": 100
          }'),
    gmtCreate?: string(name='gmtCreate', example='2024-05-30T06:28:07.000Z'),
    gmtModified?: string(name='gmtModified', example='2024-05-30T06:28:07.000Z'),
    oldLimiter?: map[string]any(name='oldLimiter', example='{
               "limiters": [
                    {
                         "type": "INDEX_QUOTA",
                         "maxValue": 500,
                         "immutable": false
                    }
               ]
          }'),
    oldQuota?: map[string]any(name='oldQuota', example='{
               "appType": "TRIAL",
               "cu": 2,
               "storage": 1
          }'),
    source?: string(name='source', example='USER'),
    status?: string(name='status', example='Pending'),
    type?: string(name='type', example='QUOTA'),
  }(name='result'),
}

model GetSpecReviewTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSpecReviewTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSpecReviewTask  GetSpecReviewTaskRequest
  * @return GetSpecReviewTaskResponse
 */
async function getSpecReviewTask(request: GetSpecReviewTaskRequest): GetSpecReviewTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSpecReviewTask', 'GET', '/openapi/es-serverless/instances/{appName}/spec-review-tasks/{taskId}', 'json', false, 'json', request);
}

model ListAppsRequest {
  appName?: string(name='appName', example='es-severless-test-app', position='Query'),
  createTime?: string(name='createTime', example='2023-08-29T02:37:22Z', position='Query'),
  description?: string(name='description', example='metrics-logs-online', position='Query'),
  orderType?: string(name='orderType', example='desc', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: string(name='status', example='ACTIVE', position='Query'),
}

model ListAppsResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      appId?: string(name='appId', example='test-abc'),
      appName?: string(name='appName', description='代表资源名称的资源属性字段', example='es-severless-test-app'),
      appType?: string(name='appType'),
      createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='2022-12-27T07:09:11.000Z'),
      description?: string(name='description', description='应用备注'),
      instanceId?: string(name='instanceId'),
      modifiedTime?: string(name='modifiedTime', example='2022-12-27T07:09:11.000Z'),
      ownerId?: string(name='ownerId', description='OwnerID账号ID', example='*********7595'),
      regionId?: string(name='regionId', description='代表region的资源属性字段', example='cn-hangzhou'),
      status?: string(name='status', description='代表资源状态的资源属性字段', example='ACTIVE'),
      version?: string(name='version', example='7.10'),
    }
  ](name='result'),
  totalCount: int32(name='totalCount', description='This parameter is required.', example='4', minimum=0),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApps  ListAppsRequest
  * @return ListAppsResponse
 */
async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApps', 'GET', '/openapi/es-serverless/instances', 'json', false, 'json', request);
}

model ListDictsRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
}

model ListDictsResponseBody = {
  requestId?: string(name='requestId', example='E92BCBB9-3CFE-58DD-8D8C-56DF46AB3BF3'),
  result?: [ 
    {
      downloadUrl?: string(name='downloadUrl', example='http://es-serverless-****.oss-cn-hangzhou.aliyuncs.com/app/es7**190/0/config/analysis-ik/stopword.dic?Expires=1705923089&OSSAccessKeyId=STS.NV18q****UkVp6LNj&Signat'),
      name?: string(name='name', example='a.dic'),
      sourceType?: string(name='sourceType', example='OSS'),
      type?: string(name='type', example='MAIN'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount', example='1'),
}

model ListDictsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDictsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDicts  ListDictsRequest
  * @return ListDictsResponse
 */
async function listDicts(request: ListDictsRequest): ListDictsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDicts', 'GET', '/openapi/es-serverless/instances/{appName}/dicts', 'json', false, 'json', request);
}

model ListEndpointsRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  resourceId?: string(name='resourceId', example='ep-bp1id41dd116e52e****', position='Query'),
  type: string(name='type', description='This parameter is required.', example='VPC', position='Query'),
  vpcId?: string(name='vpcId', example='vpc-bp1212sb7cj2j4e6x****', position='Query'),
}

model ListEndpointsResponseBody = {
  requestId?: string(name='requestId', example='D6030CE6-9FEB-5B2F-84AC-3ADE3CBA89E5'),
  result?: [ 
    {
      connectionStatus?: string(name='connectionStatus', example='Pending'),
      created?: int32(name='created', example='1701259721'),
      domain?: string(name='domain', example='ep-bp1i522d****a3.epsrv-bp1f****gei.cn-hangzhou.privatelink.aliyuncs.com'),
      endpointId?: string(name='endpointId', example='essep-2f46b743f60****'),
      endpointZones?: [ 
        {
          vSwitchId?: string(name='vSwitchId', example='vsw-bp194pz9iez****'),
          zoneId?: string(name='zoneId', example='cn-hangzhou-k'),
        }
      ](name='endpointZones'),
      name?: string(name='name', example='test'),
      resourceId?: string(name='resourceId', example='ep-bp1id41dd116e52e****'),
      securityGroupIds?: [ string ](name='securityGroupIds'),
      status?: string(name='status', example='Active'),
      type?: string(name='type', example='VPC'),
      updated?: int32(name='updated', example='1701259721'),
      vpcId?: string(name='vpcId', example='vpc-uf6gykvwcirp886ef****'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount', example='10'),
}

model ListEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEndpoints  ListEndpointsRequest
  * @return ListEndpointsResponse
 */
async function listEndpoints(request: ListEndpointsRequest): ListEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEndpoints', 'GET', '/openapi/es-serverless/endpoints', 'json', false, 'json', request);
}

model ListIndicesRequest {
  appName: string(name='appName', description='This parameter is required.', example='text', position='Path'),
}

model ListIndicesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8C85CCB3-C0C9-521C-B599-F903E14A8793'),
  result?: [ any ](name='result'),
}

model ListIndicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIndices  ListIndicesRequest
  * @return ListIndicesResponse
 */
async function listIndices(request: ListIndicesRequest): ListIndicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndices', 'GET', '/openapi/es-serverless/instances/{appName}/indices', 'json', false, 'json', request);
}

model ListSnapshotRepositoriesRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
}

model ListSnapshotRepositoriesResponseBody = {
  requestId?: string(name='requestId', example='56E0591D-7D62-56A2-993E-952FB2026C69'),
  result?: [  map[string]any ](name='result'),
}

model ListSnapshotRepositoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotRepositoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSnapshotRepositories  ListSnapshotRepositoriesRequest
  * @return ListSnapshotRepositoriesResponse
 */
async function listSnapshotRepositories(request: ListSnapshotRepositoriesRequest): ListSnapshotRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSnapshotRepositories', 'GET', '/openapi/es-serverless/instances/{appName}/snapshot-repositories', 'json', false, 'json', request);
}

model ListSnapshotsRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  repository?: string(name='repository', example='aliyun_auto_snapshot', position='Query'),
  snapshot?: string(name='snapshot', example='qingning', position='Query'),
}

model ListSnapshotsResponseBody = {
  nextToken?: string(name='nextToken', example='ODgyObrnP3'),
  requestId?: string(name='requestId', example='22E9EE78-F567-550A-8F7C-20E9CD3DE489'),
  result?: [  map[string]any ](name='result'),
  totalCount?: int32(name='totalCount', example='1'),
}

model ListSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSnapshots  ListSnapshotsRequest
  * @return ListSnapshotsResponse
 */
async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSnapshots', 'GET', '/openapi/es-serverless/instances/{appName}/snapshots', 'json', false, 'json', request);
}

model ListSpecReviewTasksRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  page?: int32(name='page', example='1', position='Query'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
  status?: string(name='status', position='Query'),
  type?: string(name='type', example='QUOTA', position='Query'),
}

model ListSpecReviewTasksResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='55F7B3FE-05D8-5F0F-BD55-A18967D447DC'),
  result?: [ 
    {
      id?: string(name='Id', description='代表资源一级ID的资源属性字段', example='339'),
      appName?: string(name='appName', example='test'),
      applyReason?: string(name='applyReason'),
      gmtCreate?: string(name='gmtCreate', example='2024-05-27T10:13:22.000Z'),
      source?: string(name='source', example='USER'),
      status?: string(name='status', example='Pending'),
      type?: string(name='type', example='QUOTA'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount', example='1'),
}

model ListSpecReviewTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSpecReviewTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSpecReviewTasks  ListSpecReviewTasksRequest
  * @return ListSpecReviewTasksResponse
 */
async function listSpecReviewTasks(request: ListSpecReviewTasksRequest): ListSpecReviewTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSpecReviewTasks', 'GET', '/openapi/es-serverless/instances/{appName}/spec-review-tasks', 'json', false, 'json', request);
}

model UpdateAppRequest {
  appName: string(name='appName', description='This parameter is required.', example='es-severless-test-app', position='Path'),
  applyReason?: string(name='applyReason', position='Body'),
  authentication?: {
    basicAuth?: [ 
      {
        password?: string(name='password'),
        username?: string(name='username'),
      }
    ](name='basicAuth'),
  }(name='authentication', position='Body'),
  contactInfo?: string(name='contactInfo', position='Body'),
  description?: string(name='description', description='应用备注', position='Body'),
  limiterInfo?: {
    limiters?: [ 
      {
        maxValue?: int32(name='maxValue'),
        minValue?: int32(name='minValue'),
        type?: string(name='type'),
        values?: [ string ](name='values'),
      }
    ](name='limiters'),
  }(name='limiterInfo', position='Body'),
  network?: [ 
    {
      domain?: string(name='domain'),
      enabled?: boolean(name='enabled'),
      port?: int32(name='port'),
      type?: string(name='type'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network', position='Body'),
  privateNetwork?: [ 
    {
      enabled?: boolean(name='enabled'),
      pvlEndpointId?: string(name='pvlEndpointId'),
      type?: string(name='type'),
      vpcId?: string(name='vpcId'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='privateNetwork', position='Body'),
}

model UpdateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model UpdateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApp  UpdateAppRequest
  * @return UpdateAppResponse
 */
async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateApp', 'PATCH', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

model UpdateDictRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  allowCover?: boolean(name='allowCover', example='true', position='Query'),
  files: [ 
    {
      name?: string(name='name', example='dic_0.dic'),
      ossObject?: {
        bucketName?: string(name='bucketName', example='bucket1'),
        key?: string(name='key', example='oss/dic_0.dic'),
      }(name='ossObject'),
    }
  ](name='files', description='This parameter is required.', position='Body'),
  sourceType?: string(name='sourceType', example='OSS', position='Body'),
  type?: string(name='type', example='MAIN', position='Body'),
  dryRun?: boolean(name='dryRun', example='true', position='Query'),
}

model UpdateDictResponseBody = {
  requestId?: string(name='requestId', example='12797BCC-E0B5-5A47-B4B9-A14DDF0B0200'),
  result?: boolean(name='result', example='true'),
}

model UpdateDictResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDictResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDict  UpdateDictRequest
  * @return UpdateDictResponse
 */
async function updateDict(request: UpdateDictRequest): UpdateDictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDict', 'PUT', '/openapi/es-serverless/instances/{appName}/dicts', 'json', false, 'json', request);
}

model UpdateEndpointRequest {
  endpointId: string(name='endpointId', description='This parameter is required.', example='ep-bp1i98bcbb1540d0****', position='Path'),
  endpointZones: [ 
    {
      vSwitchId?: string(name='vSwitchId', example='vsw-bp18r8uwnukv3rvi9****'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-h'),
    }
  ](name='endpointZones', description='This parameter is required.', position='Body'),
  name?: string(name='name', example='test', position='Body'),
}

model UpdateEndpointResponseBody = {
  requestId?: string(name='requestId', example='FBAD8493-87FA-583E-8A4C-D487F2DE90FC'),
  result?: {
    endpointId?: string(name='endpointId', example='ep-bp1i98bcbb1540d0****'),
  }(name='result'),
}

model UpdateEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEndpoint  UpdateEndpointRequest
  * @return UpdateEndpointResponse
 */
async function updateEndpoint(request: UpdateEndpointRequest): UpdateEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEndpoint', 'PUT', '/openapi/es-serverless/endpoints/{endpointId}', 'json', false, 'json', request);
}

model UpdateSnapshotSettingRequest {
  appName: string(name='appName', description='This parameter is required.', example='test', position='Path'),
  enable: boolean(name='enable', description='This parameter is required.', example='true', position='Body'),
  quartzRegex: string(name='quartzRegex', description='This parameter is required.', example='0 0 01 ? * * *', position='Body'),
}

model UpdateSnapshotSettingResponseBody = {
  requestId?: string(name='requestId', example='A7B03723-AA73-5A5F-B71C-270792614DD8'),
  result?: map[string]any(name='result', example='{
    "quartzRegex": "0 0 01 ? * * *",
    "enable": true
  }'),
}

model UpdateSnapshotSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSnapshotSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSnapshotSetting  UpdateSnapshotSettingRequest
  * @return UpdateSnapshotSettingResponse
 */
async function updateSnapshotSetting(request: UpdateSnapshotSettingRequest): UpdateSnapshotSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSnapshotSetting', 'PUT', '/openapi/es-serverless/instances/{appName}/auto-snapshot-setting', 'json', false, 'json', request);
}

