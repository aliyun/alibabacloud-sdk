/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'es-serverless';
  @version = '2023-06-27';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAppRequest {
  appName?: string(name='appName', description='应用名', example='es-severless-test-app', position='Body'),
  authentication?: {
    basicAuth?: [ 
      {
        password?: string(name='password', example='Admin@123'),
        username?: string(name='username', example='test-abc'),
      }
    ](name='basicAuth'),
  }(name='authentication', position='Body'),
  chargeType?: string(name='chargeType', example='POSTPAY', position='Body'),
  description?: string(name='description', description='应用备注', example='test', position='Body'),
  network?: [ 
    {
      domain?: string(name='domain', example='test-75b.public.cn-hangzhou.es-serverless.aliyuncs.com'),
      enabled?: boolean(name='enabled', example='true'),
      port?: int32(name='port', example='80'),
      type?: string(name='type', example='PUBLIC_ES'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName', example='local'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network', position='Body'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Body'),
  version?: string(name='version', example='7.10', position='Body'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instaneId?: string(name='instaneId', example='es-serverless-cn-xxx'),
  }(name='result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApp', 'POST', '/openapi/es-serverless/instances', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appName: string(name='appName', example='test', position='Path'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApp', 'DELETE', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

model GetAppRequest {
  appName: string(name='appName', example='test', position='Path'),
  detailed?: boolean(name='detailed', example='false', position='Query'),
}

model GetAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    appId?: string(name='appId', example='test-app-abc'),
    appName?: string(name='appName', example='es-severless-test-app'),
    createTime?: string(name='createTime', example='2022-08-15T11:20:52.370Z'),
    description?: string(name='description'),
    instanceId?: string(name='instanceId'),
    modifiedTime?: string(name='modifiedTime', example='2022-08-15T11:21:50.000Z'),
    ownerId?: string(name='ownerId', example='*******7595'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    status?: string(name='status', example='ACTIVE'),
    version?: string(name='version', example='7.10'),
  }(name='result'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppResponseBody(name='body'),
}

async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApp', 'GET', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

model GetAppQuotaRequest {
  appName: string(name='appName', example='test', position='Path'),
}

model GetAppQuotaResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    limiterInfo?: {
      limiters?: [ 
        {
          immutable?: boolean(name='immutable', example='true'),
          maxValue?: long(name='maxValue', example='10'),
          minValue?: long(name='minValue', example='1'),
          type?: string(name='type', example='INDEX_NUMBER_OF_SHARDS'),
        }
      ](name='limiters'),
    }(name='limiterInfo'),
    quotaInfo?: map[string]any(name='quotaInfo'),
  }(name='result'),
}

model GetAppQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppQuotaResponseBody(name='body'),
}

async function getAppQuota(request: GetAppQuotaRequest): GetAppQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppQuota', 'GET', '/openapi/es-serverless/instances/{appName}/quota', 'json', false, 'json', request);
}

model GetMonitorDataRequest {
  body?: string(name='body', example='{"start":1689245180581,"end":1689246950582,"queries":[{"metric":"aliyunes.elasticsearch.index.docs.count","aggregator":"sum","downsample":"avg","tags":{"resource":"{appName}"},"filters":[],"granularity":"auto"}]}', position='Body'),
}

model GetMonitorDataResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      dps?: map[string]any(name='dps', example='{
    "1689480600":28676235.104761902
}'),
      integrity?: float(name='integrity', example='1'),
      messageWatermark?: long(name='messageWatermark', example='1689566839447'),
      metric?: string(name='metric', example='elasticsearch-server.logic_cpu.cpu'),
      summary?: float(name='summary', example='172455913.18935508'),
      tags?: map[string]any(name='tags', example='{
                "indexName":"test"
            }'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model GetMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMonitorDataResponseBody(name='body'),
}

async function getMonitorData(request: GetMonitorDataRequest): GetMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMonitorData', 'POST', '/openapi/es-serverless/emon/metrics/query', 'json', false, 'json', request);
}

model ListAppsRequest {
  appName?: string(name='appName', example='es-severless-test-app', position='Query'),
  createTime?: string(name='createTime', example='2023-08-29T02:37:22Z', position='Query'),
  description?: string(name='description', example='metrics-logs-online', position='Query'),
  orderType?: string(name='orderType', example='desc', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: string(name='status', example='ACTIVE', position='Query'),
}

model ListAppsResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      appId?: string(name='appId', example='test-abc'),
      appName?: string(name='appName', description='代表资源名称的资源属性字段', example='es-severless-test-app'),
      createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='2022-12-27T07:09:11.000Z'),
      description?: string(name='description', description='应用备注'),
      instanceId?: string(name='instanceId'),
      modifiedTime?: string(name='modifiedTime', example='2022-12-27T07:09:11.000Z'),
      ownerId?: string(name='ownerId', description='OwnerID账号ID', example='*********7595'),
      regionId?: string(name='regionId', description='代表region的资源属性字段', example='cn-hangzhou'),
      status?: string(name='status', description='代表资源状态的资源属性字段', example='ACTIVE'),
      version?: string(name='version', example='7.10'),
    }
  ](name='result'),
  totalCount: int32(name='totalCount', example='4', minimum=0),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppsResponseBody(name='body'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApps', 'GET', '/openapi/es-serverless/instances', 'json', false, 'json', request);
}

model UpdateAppRequest {
  appName: string(name='appName', example='es-severless-test-app', position='Path'),
  authentication?: {
    basicAuth?: [ 
      {
        password?: string(name='password', example='Admin@123'),
        username?: string(name='username', example='test-abc'),
      }
    ](name='basicAuth'),
  }(name='authentication', position='Body'),
  description?: string(name='description', description='应用备注', position='Body'),
  network?: [ 
    {
      domain?: string(name='domain', example='test-75b.public.cn-hangzhou.es-serverless.aliyuncs.com'),
      enabled?: boolean(name='enabled', example='true'),
      port?: int32(name='port', example='80'),
      type?: string(name='type', example='PRIVATE_ES'),
      whiteIpGroup?: [ 
        {
          groupName?: string(name='groupName', example='local'),
          ips?: [ string ](name='ips'),
        }
      ](name='whiteIpGroup'),
    }
  ](name='network', position='Body'),
}

model UpdateAppResponseBody = {
  requestId?: string(name='requestId', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model UpdateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppResponseBody(name='body'),
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateApp', 'PATCH', '/openapi/es-serverless/instances/{appName}', 'json', false, 'json', request);
}

