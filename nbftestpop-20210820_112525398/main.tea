/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('nbftestpop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model AddResponseBody = {
  sum?: int32(name='sum'),
}

model AddResponse = {
  headers: map[string]string(name='headers'),
  body: AddResponseBody(name='body'),
}

async function add(request: AddRequest): AddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addWithOptions(request, headers, runtime);
}

async function addWithOptions(request: AddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.x)) {
    query.x = request.x;
  }
  if (!Util.isUnset(request.y)) {
    query.y = request.y;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('Add', '2021-08-20_11-25-25-398', 'HTTPS', 'GET', 'AK', `/kxTestNineFive/add`, 'json', req, runtime);
}

model PublishTestRequest {
  x?: int32(name='x'),
  y?: int32(name='y'),
}

model PublishTestResponseBody = {
  sum?: int32(name='sum'),
}

model PublishTestResponse = {
  headers: map[string]string(name='headers'),
  body: PublishTestResponseBody(name='body'),
}

async function publishTest(request: PublishTestRequest): PublishTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishTestWithOptions(request, headers, runtime);
}

async function publishTestWithOptions(request: PublishTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishTestResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.x)) {
    query.x = request.x;
  }
  if (!Util.isUnset(request.y)) {
    query.y = request.y;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('PublishTest', '2021-08-20_11-25-25-398', 'HTTPS', 'POST', 'AK', `/publishTest`, 'json', req, runtime);
}

