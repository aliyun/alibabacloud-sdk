/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloudcontrol';
  @version = '2022-08-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelTaskRequest {
  taskId: string(name='taskId', example='task-433aead756057fff2913e7ce5****', position='Path'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'PUT', '/api/v1/tasks/{taskId}/operation/cancel', 'json', false, 'json', request);
}

model CreateResourceRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/resources/DBInstance/r-8vbf5abe31cxxxxx/Account', position='Path'),
  body?: map[string]any(name='body', example='{
     "AccountName": "cctest",
     "AccountPassword": "Aa1234****"
}', position='Body'),
  clientToken?: string(name='clientToken', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  regionId?: string(name='regionId', example='cn-beijing', position='Query'),
}

model CreateResourceResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceId?: string(name='resourceId', example='cctest'),
  resourcePath?: string(name='resourcePath', example='Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
  taskId?: string(name='taskId', example='task-433aead756057fff8189a7ce5****'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '/api/v1/providers/{provider}/products/{product}/resources/*', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/resources/Instance/r-8vbf5abe31cxxxxx/Account/cctest', position='Path'),
  clientToken?: string(name='clientToken', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  regionId?: string(name='regionId', example='cn-beijing', position='Query'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', example='task-433aead756057fff8189a7ce5****'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '/api/v1/providers/{provider}/products/{product}/resources/*', 'json', false, 'json', request);
}

model GetPriceRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/aliyun/products/SLB/price/LoadBalancer', position='Path'),
  regionId?: string(name='regionId', example='cn-beijing', position='Query'),
  resourceAttributes?: map[string]any(name='resourceAttributes', example='{
        "LoadBalancerName": "cc-test",
        "LoadBalancerSpec": "slb.s3.small",
        "InternetChargeType": "paybybandwidth",
        "AddressType": "internet",
        "PaymentType": "PayAsYouGo",
        "Bandwidth": 6
      }', shrink='json', position='Query'),
}

model GetPriceResponseBody = {
  price?: {
    currency?: string(name='currency', example='CNY'),
    discountPrice?: float(name='discountPrice', example='0.0'),
    moduleDetails?: [ 
      {
        costAfterDiscount?: float(name='costAfterDiscount', example='0.02'),
        invoiceDiscount?: float(name='invoiceDiscount', example='0.0'),
        moduleCode?: string(name='moduleCode', example='InstanceRent'),
        moduleName?: string(name='moduleName', example='InstanceRent'),
        originalCost?: float(name='originalCost', example='1000.0'),
        priceType?: float(name='priceType', example='1.0'),
      }
    ](name='moduleDetails'),
    originalPrice?: float(name='originalPrice', example='760.0'),
    promotionDetails?: [ 
      {
        promotionDesc?: string(name='promotionDesc', example='37284'),
        promotionId?: long(name='promotionId'),
        promotionName?: string(name='promotionName'),
      }
    ](name='promotionDetails'),
    tradePrice?: float(name='tradePrice', example='0.0'),
  }(name='price'),
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model GetPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPriceResponseBody(name='body'),
}

async function getPrice(request: GetPriceRequest): GetPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPrice', 'GET', '/api/v1/providers/{provider}/products/{product}/price/*', 'json', false, 'json', request);
}

model GetResourceTypeRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/resourceTypes/DBInstance', position='Path'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', example='zh_CH', position='Header'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceType?: {
    createOnlyProperties?: [ string ](name='createOnlyProperties'),
    deleteOnlyProperties?: [ string ](name='deleteOnlyProperties'),
    filterProperties?: [ string ](name='filterProperties'),
    getOnlyProperties?: [ string ](name='getOnlyProperties'),
    getResponseProperties?: [ string ](name='getResponseProperties'),
    handlers?: {
      create?: {
        permissions?: [ string ](name='permissions'),
      }(name='create'),
      delete?: {
        permissions?: [ string ](name='permissions'),
      }(name='delete'),
      get?: {
        permissions?: [ string ](name='permissions'),
      }(name='get'),
      list?: {
        permissions?: [ string ](name='permissions'),
      }(name='list'),
      update?: {
        permissions?: [ string ](name='permissions'),
      }(name='update'),
    }(name='handlers'),
    info?: {
      chargeType?: string(name='chargeType', example='paid'),
      deliveryScope?: string(name='deliveryScope', example='region'),
      description?: string(name='description', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
      title?: string(name='title', example='Instance'),
    }(name='info'),
    listOnlyProperties?: [ string ](name='listOnlyProperties'),
    listResponseProperties?: [ string ](name='listResponseProperties'),
    primaryIdentifier?: string(name='primaryIdentifier', example='/properties/InstanceId'),
    product?: string(name='product', example='ECS'),
    properties?: map[string]any(name='properties'),
    publicProperties?: [ string ](name='publicProperties'),
    readOnlyProperties?: [ string ](name='readOnlyProperties'),
    required?: [ string ](name='required'),
    resourceType?: string(name='resourceType', example='Instance'),
    sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties'),
    updateOnlyProperties?: [ string ](name='updateOnlyProperties'),
    updateTypeProperties?: [ string ](name='updateTypeProperties'),
  }(name='resourceType'),
}

model GetResourceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceTypeResponseBody(name='body'),
}

async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceType', 'GET', '/api/v1/providers/{provider}/products/{product}/resourceTypes/*', 'json', false, 'json', request);
}

model GetResourcesRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/resources/DBInstance/r-8vbf5abe31c9****', position='Path'),
  filter?: map[string]any(name='filter', shrink='json', position='Query'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='AAAAAdDWBF2****', position='Query'),
  regionId?: string(name='regionId', example='cn-beijing', position='Query'),
}

model GetResourcesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='AAAAAdDWBF2****'),
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resource?: {
    resourceAttributes?: map[string]any(name='resourceAttributes', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
    resourceId?: string(name='resourceId', example='cctest'),
  }(name='resource'),
  resources?: [ 
    {
      resourceAttributes?: map[string]any(name='resourceAttributes', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
      resourceId?: string(name='resourceId', example='cctest'),
    }
  ](name='resources'),
  totalCount?: int32(name='totalCount', example='20'),
}

model GetResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcesResponseBody(name='body'),
}

async function getResources(request: GetResourcesRequest): GetResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResources', 'GET', '/api/v1/providers/{provider}/products/{product}/resources/*', 'json', false, 'json', request);
}

model GetTaskRequest {
  taskId: string(name='taskId', example='task-433aead756057fff8189a7ce5****', position='Path'),
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  task?: {
    createTime?: string(name='createTime', example='2022-10-09T00:46:03Z'),
    error?: {
      code?: string(name='code', example='OperationFailure.OperationFailed'),
      message?: string(name='message', example='{
     "requestId": "123****",
     "errorCode": "InvalidRamUser.NoPermission",
     "errorMsg": "Ram user is not authorized to perform the operation."
}'),
    }(name='error'),
    product?: string(name='product', example='ECS'),
    regionId?: string(name='regionId', example='cn-beijing'),
    resourceId?: string(name='resourceId', example='i-8vbascjthm7kzhp3****'),
    resourcePath?: string(name='resourcePath', example='Instance/i-8vbascjthm7kzhp3****
Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
    resourceType?: string(name='resourceType', example='Instance'),
    status?: string(name='status', example='Succeeded'),
    taskAction?: string(name='taskAction', example='Create'),
    taskId?: string(name='taskId', example='task-433aead756057fff8189a7ce5****'),
  }(name='task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

/**
  * GET /api/v1/tasks/{taskId}。
  *
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/api/v1/tasks/{taskId}', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/dataSources/DBInstance', position='Path'),
  attributeName: string(name='attributeName', example='RegionId', position='Query'),
  filter?: map[string]any(name='filter', shrink='json', position='Query'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      id?: string(name='id', example='cn-beijing'),
    }
  ](name='dataSources'),
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '/api/v1/providers/{provider}/products/{product}/dataSources/*', 'json', false, 'json', request);
}

model ListProductsRequest {
  provider: string(name='provider', example='Aliyun', position='Path'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='ECS', position='Query'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', example='zh_CH', position='Header'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='Redis'),
  products?: [ 
    {
      productCode?: string(name='productCode', example='ECS'),
      productName?: string(name='productName', example='Elastic Compute Service'),
    }
  ](name='products'),
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: int32(name='totalCount', example='20'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsResponseBody(name='body'),
}

/**
  * GET /api/v1/providers/{provider}/products。
  *
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/api/v1/providers/{provider}/products', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  provider: string(name='provider', example='Aliyun', position='Path'),
  product: string(name='product', example='ECS', position='Path'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='ECS::Disk', position='Query'),
  resourceTypes?: [ string ](name='resourceTypes', shrink='simple', position='Query'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', example='zh_CH', position='Header'),
}

model ListResourceTypesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='ECS::Disk'),
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceTypes?: [ 
    {
      createOnlyProperties?: [ string ](name='createOnlyProperties'),
      deleteOnlyProperties?: [ string ](name='deleteOnlyProperties'),
      filterProperties?: [ string ](name='filterProperties'),
      getOnlyProperties?: [ string ](name='getOnlyProperties'),
      getResponseProperties?: [ string ](name='getResponseProperties'),
      handlers?: {
        create?: {
          permissions?: [ string ](name='permissions'),
        }(name='create'),
        delete?: {
          permissions?: [ string ](name='permissions'),
        }(name='delete'),
        get?: {
          permissions?: [ string ](name='permissions'),
        }(name='get'),
        list?: {
          permissions?: [ string ](name='permissions'),
        }(name='list'),
        update?: {
          permissions?: [ string ](name='permissions'),
        }(name='update'),
      }(name='handlers'),
      info?: {
        chargeType?: string(name='chargeType', example='paid'),
        deliveryScope?: string(name='deliveryScope', example='region'),
        description?: string(name='description', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
        title?: string(name='title', example='Instance'),
      }(name='info'),
      listOnlyProperties?: [ string ](name='listOnlyProperties'),
      listResponseProperties?: [ string ](name='listResponseProperties'),
      primaryIdentifier?: string(name='primaryIdentifier', example='/properties/InstanceId'),
      product?: string(name='product', example='ECS'),
      properties?: map[string]any(name='properties'),
      publicProperties?: [ string ](name='publicProperties'),
      readOnlyProperties?: [ string ](name='readOnlyProperties'),
      required?: [ string ](name='required'),
      resourceType?: string(name='resourceType', example='Instance'),
      sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties'),
      updateOnlyProperties?: [ string ](name='updateOnlyProperties'),
      updateTypeProperties?: [ string ](name='updateTypeProperties'),
    }
  ](name='resourceTypes'),
  totalCount?: int32(name='totalCount', example='20'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceTypesResponseBody(name='body'),
}

/**
  * GET /api/v1/providers/{provider}/products/{product}/resourceTypes。
  *
 */
async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceTypes', 'GET', '/api/v1/providers/{provider}/products/{product}/resourceTypes', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  requestPath?: string(name='requestPath', example='/api/v1/providers/Aliyun/products/Redis/resources/Instance/r-8vbf5abe31cxxxxx/Account/cctest', position='Path'),
  body?: map[string]any(name='body', example='{
     "AccountPassword": "4321****",
     "Description": "cctest"
}', position='Body'),
  clientToken?: string(name='clientToken', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  regionId?: string(name='regionId', example='cn-beijing', position='Query'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='requestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', example='task-433aead756057fff8189a7ce5****'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '/api/v1/providers/{provider}/products/{product}/resources/*', 'json', false, 'json', request);
}

