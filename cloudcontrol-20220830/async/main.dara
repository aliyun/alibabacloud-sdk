/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloudcontrol';
  @version = '2022-08-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelTaskRequest {
  taskId: string(name='taskId', description='The ID of the task.

This parameter is required.', example='task-433aead756057fff2913e7ce5****', position='Path'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelTaskResponseBody(name='body'),
}

/**
  * @description Only tasks that are in the Pending or Running state can be canceled.
  * You can call the CancelTask operation to cancel a Cloud Control API task, but the tasks that have been started in the downstream Alibaba Cloud services cannot be canceled.
  * @param request  the request parameters of CancelTask  CancelTaskRequest
  * @return CancelTaskResponse
 */
async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'PUT', '/api/v1/tasks/{taskId}/operation/cancel', 'json', false, 'json', request);
}

model CreateResourceRequest {
  requestPath?: string(name='requestPath', description='The request path. Specify this parameter in the following format: /api/v1/providers/{provider}/products/{product}/resources/{resourceType}

Variables in the request path:

provider: the Cloud service provider. Only Aliyun is supported.

product: the code of the service.

resourceType: the type of resources. If parent resource is specified, the format is {parent resource type code}/parent resource ID/{resource type code}.', example='/api/v1/providers/Aliyun/products/Redis/resources/DBInstance/r-8vbf5abe31cxxxxx/Account', position='Path'),
  body?: map[string]any(name='body', description='The request body. The property of the resource, which is specified in JSON format.', example='{
     "AccountName": "cctest",
     "AccountPassword": "Aa1234****"
}', position='Body'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  regionId?: string(name='regionId', description='The region ID. This parameter is required if a cloud service is a regionalized.', example='cn-beijing', position='Query'),
}

model CreateResourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
  resourcePath?: string(name='resourcePath', description='The path of the resources. The relative resource ID. The resource path contains the complete resource location (parent resource/child resource).', example='Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
  * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
  * @param request  the request parameters of CreateResource  CreateResourceRequest
  * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '{requestPath}', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  requestPath?: string(name='requestPath', description='The request path. Specify this parameter in the following format: /api/v1/providers/{provider}/products/{product}/resources/{resourceType}/{resourceId}

Variables in the request path:

provider: the Cloud service provider. Only Aliyun is supported.

product: the code of the service.

ResourceType: the type of resources. If parent resource is specified, the format is {parent resource type code}/parent resource ID/{resource type code}.

resourceId: the resource ID.', example='/api/v1/providers/Aliyun/products/Redis/resources/Instance/r-8vbf5abe31cxxxxx/Account/cctest', position='Path'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  filter?: map[string]any(name='filter', shrink='json', position='Query'),
  regionId?: string(name='regionId', description='The region. This parameter is required if a cloud service is a regionalized.', example='cn-beijing', position='Query'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
  * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
  * @param request  the request parameters of DeleteResource  DeleteResourceRequest
  * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '{requestPath}', 'json', false, 'json', request);
}

model GetPriceRequest {
  requestPath?: string(name='requestPath', description='The request path. Format: /api/v1/providers/{provider}/products/{product}/price/{resourceType}

The variables in the request path:

provider: the cloud service provider. Currently, only Aliyun is supported.

product: the code of the product.

resourceType: the type of the resource. For example, the resourceType of Redis Account is DBInstance/Account.

The resources that support price inquiry:

Redis DBInstance: /api/v1/providers/aliyun/products/Redis/price/DBInstance

ECS Instance: /api/v1/providers/aliyun/products/ECS/price/Instance

RDS DBInstance: /api/v1/providers/aliyun/products/RDS/price/DBInstance

SLB LoadBalancer: /api/v1/providers/aliyun/products/SLB/price/LoadBalancer

ClickHouse DBCluster: /api/v1/providers/aliyun/products/ClickHouse/price/DBCluster

AliKafka Instance: /api/v1/providers/aliyun/products/AliKafka/price/Instance', example='/api/v1/providers/aliyun/products/SLB/price/LoadBalancer', position='Path'),
  regionId?: string(name='regionId', description='The region ID. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing', position='Query'),
  resourceAttributes?: map[string]any(name='resourceAttributes', description='The attributes based on which the price is queried (in JSON format).', example='{
        "LoadBalancerName": "cc-test",
        "LoadBalancerSpec": "slb.s3.small",
        "InternetChargeType": "paybybandwidth",
        "AddressType": "internet",
        "PaymentType": "PayAsYouGo",
        "Bandwidth": 6
      }', shrink='json', position='Query'),
}

model GetPriceResponseBody = {
  price?: {
    currency?: string(name='currency', description='The currency type. Valid values: CNY: Chinese Yuan. USD: US dollar. JPY: Japanese Yen.', example='CNY'),
    discountPrice?: float(name='discountPrice', description='The discount.', example='0.0'),
    moduleDetails?: [ 
      {
        costAfterDiscount?: float(name='costAfterDiscount', description='The discount price.', example='0.02'),
        invoiceDiscount?: float(name='invoiceDiscount', description='The discount.', example='0.0'),
        moduleCode?: string(name='moduleCode', description='The code of the pricing module.', example='InstanceRent'),
        moduleName?: string(name='moduleName', description='The name of the pricing module.', example='InstanceRent'),
        originalCost?: float(name='originalCost', description='The original price.', example='1000.0'),
        priceType?: string(name='priceType', description='The price type.', example='1.0'),
      }
    ](name='moduleDetails', description='The order details of the pricing module.'),
    originalPrice?: float(name='originalPrice', description='The original price.', example='760.0'),
    promotionDetails?: [ 
      {
        promotionDesc?: string(name='promotionDesc', description='The description of the promotion.', example='37284'),
        promotionId?: long(name='promotionId', description='The ID of the promotion.'),
        promotionName?: string(name='promotionName', description='The name of the promotion.'),
      }
    ](name='promotionDetails', description='The details of the promotion.'),
    tradePrice?: float(name='tradePrice', description='The discount price.', example='0.0'),
  }(name='price', description='The price.'),
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model GetPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPrice  GetPriceRequest
  * @return GetPriceResponse
 */
async function getPrice(request: GetPriceRequest): GetPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPrice', 'GET', '{requestPath}', 'json', false, 'json', request);
}

model GetResourceTypeRequest {
  requestPath?: string(name='requestPath', description='The request path. Specify this parameter in the following format: /api/v1/providers/{provider}/products/{product}/resourceTypes/{resourceType}

Variables in the request path. Valid values:

provider: the cloud service provider. Currently, only Aliyun is supported.

product: the product code.

resourceType: the type of the resource. If there is a parent resource, the format is {parent resource type code}/{resource type code}', example='/api/v1/providers/Aliyun/products/Redis/resourceTypes/DBInstance', position='Path'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='The language selected for the returned product.

zh_CH: Chinese (default)

en_US: English', example='zh_CH', position='Header'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceType?: {
    createOnlyProperties?: [ string ](name='createOnlyProperties', description='The properties that are specific to the create operation. You need to specify these properties when you create the resource. These properties are not returned when you query the resource.'),
    deleteOnlyProperties?: [ string ](name='deleteOnlyProperties', description='The properties that are specific to the delete operation. You need to specify these properties when you delete the resource. These properties are not returned when you query the resource.'),
    filterProperties?: [ string ](name='filterProperties', description='The properties that can be used to filter the resource when you list the resource.'),
    getOnlyProperties?: [ string ](name='getOnlyProperties', description='The properties that are specific to the query operation. You need to specify these properties when you query the resource. These properties are not returned in the query result.'),
    getResponseProperties?: [ string ](name='getResponseProperties', description='The properties that are returned when you query the resource.'),
    handlers?: {
      create?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='create', description='The information about the create operation.'),
      delete?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='delete', description='The information about the delete operation.'),
      get?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='get', description='The information about the query operation.'),
      list?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='list', description='The information about the list operation.'),
      update?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='update', description='The information about the update operation.'),
    }(name='handlers', description='The information about the operation, including the required Resource Access Management (RAM) permissions.'),
    info?: {
      chargeType?: string(name='chargeType', description='The payment form. Valid values:

paid free', example='paid'),
      deliveryScope?: string(name='deliveryScope', description='The delivery level. Valid values:

center

region

zone', example='region'),
      description?: string(name='description', description='The description of the resource type.', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
      title?: string(name='title', description='The name of the resource type.', example='Instance'),
    }(name='info', description='The basic information about the resource type.'),
    listOnlyProperties?: [ string ](name='listOnlyProperties', description='The properties that are specific to the list operation. You need to specify these properties when you list the resource. These properties are not returned when you query the resource.'),
    listResponseProperties?: [ string ](name='listResponseProperties', description='The properties that are returned when you list the resource.'),
    primaryIdentifier?: string(name='primaryIdentifier', description='The ID of the resource.', example='/properties/InstanceId'),
    product?: string(name='product', description='The code of the service.', example='ECS'),
    properties?: map[string]any(name='properties', description='The resource properties. The key specifies the property name and the value specifies the details of the property.'),
    publicProperties?: [ string ](name='publicProperties', description='The common properties of the resource. The common properties are not operation-specific.'),
    readOnlyProperties?: [ string ](name='readOnlyProperties', description='The read-only properties. These properties are returned only when you perform the List or Get operation. You do not need to specify these properties when you create or update the resource.'),
    required?: [ string ](name='required', description='The properties that must be specified when you create the resource.'),
    resourceType?: string(name='resourceType', description='The type of the resource. If the resource belongs to a parent resource, the return format is {parent resource type code /resource type code}.', example='Instance'),
    sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties', description='The sensitive properties, such as the password.'),
    updateOnlyProperties?: [ string ](name='updateOnlyProperties', description='The properties that are specific to the update operation. You need to specify these properties when you update the resource. These properties are not returned when you query the resource.'),
    updateTypeProperties?: [ string ](name='updateTypeProperties', description='The properties that can be modified.'),
  }(name='resourceType', description='The resource type. Valid values:'),
}

model GetResourceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceType  GetResourceTypeRequest
  * @return GetResourceTypeResponse
 */
async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceType', 'GET', '{requestPath}', 'json', false, 'json', request);
}

model GetResourcesRequest {
  requestPath?: string(name='requestPath', description='The request path. You can call resources List and Get based on different request paths.

1.List: /api/v1/providers/{provider}/products/{product}/resources/{resourceType}

2.Get: /api/v1/providers/{provider}/products/{product}/resources/{resourceType}/{resourceId}

Variables in the request path. Valid values:

provider: the cloud service provider. Currently, only Aliyun is supported.

product: the product code.

resourceType: the type of the resource. If there is a parent resource, the format is {parent resource type code}/parent resource ID/{resource type code}.

resourceId: the ID of the resource.', example='/api/v1/providers/Aliyun/products/Redis/resources/DBInstance/r-8vbf5abe31c9****', position='Path'),
  filter?: map[string]any(name='filter', description='The filter condition. The JSON format. You can use some resource properties as filter conditions.', shrink='json', position='Query'),
  maxResults?: int32(name='maxResults', description='The number of entries per page. Maximum value: 100.', example='10', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='AAAAAdDWBF2****', position='Query'),
  regionId?: string(name='regionId', description='The ID of the region. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing', position='Query'),
}

model GetResourcesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned. Return result of the List operation.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists. Return result of the List operation.', example='AAAAAdDWBF2****'),
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resource?: {
    resourceAttributes?: map[string]any(name='resourceAttributes', description='The resource properties in the JSON format.', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
    resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
  }(name='resource', description='The specified resource. Return result of the Get operation.'),
  resources?: [ 
    {
      resourceAttributes?: map[string]any(name='resourceAttributes', description='The resource properties in the JSON format.', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
    }
  ](name='resources', description='The resource list. Return result of the List operation.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned. Return result of the List operation.', example='20'),
}

model GetResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcesResponseBody(name='body'),
}

/**
  * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out CloudControl API.
  * You can call this operation to query resources List and Get based on different request paths.
  * @param request  the request parameters of GetResources  GetResourcesRequest
  * @return GetResourcesResponse
 */
async function getResources(request: GetResourcesRequest): GetResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResources', 'GET', '{requestPath}', 'json', false, 'json', request);
}

model GetTaskRequest {
  taskId: string(name='taskId', description='The ID of the task.

This parameter is required.', example='task-433aead756057fff8189a7ce5****', position='Path'),
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  task?: {
    createTime?: string(name='createTime', description='The time when the task was created.', example='2022-10-09T00:46:03Z'),
    error?: {
      code?: string(name='code', description='The error code.', example='OperationFailure.OperationFailed'),
      message?: string(name='message', description='The error message.', example='{
     "requestId": "123****",
     "errorCode": "InvalidRamUser.NoPermission",
     "errorMsg": "Ram user is not authorized to perform the operation."
}'),
    }(name='error', description='The error returned for the task.'),
    product?: string(name='product', description='The code of the service.', example='ECS'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
    resourceId?: string(name='resourceId', description='The ID of the resource.', example='i-8vbascjthm7kzhp3****'),
    resourcePath?: string(name='resourcePath', description='The path of the resources. The relative resource ID. The resource path contains the complete resource location (parent resource/child resource).', example='Instance/i-8vbascjthm7kzhp3****
Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
    resourceType?: string(name='resourceType', description='The resource type.', example='Instance'),
    status?: string(name='status', description='The task state.

Pending

Running

Succeeded

Failed

Cancelling

Cancelled.', example='Succeeded'),
    taskAction?: string(name='taskAction', description='The type of the task operation. Valid values: Create, Update, and Delete.', example='Create'),
    taskId?: string(name='taskId', description='The ID of the task.', example='task-433aead756057fff8189a7ce5****'),
  }(name='task', description='The information about the task.'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
  * @description GET /api/v1/tasks/{taskId}.
  * @param request  the request parameters of GetTask  GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/api/v1/tasks/{taskId}', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  requestPath?: string(name='requestPath', description='The request path. Specify this parameter in the following format: /api/v1/providers/{provider}/products/{product}/dataSources/{resourceType}

Variables in the request path. Valid values:

provider: the cloud service provider. Currently, only Aliyun is supported.

product: the product code.

resourceType: the type of the resource.

Sample code:

Redis DBInstance: /api/v1/providers/Aliyun/products/Redis/dataSources/DBInstance', example='/api/v1/providers/Aliyun/products/Redis/dataSources/DBInstance', position='Path'),
  attributeName: string(name='attributeName', description='The name of the property. RegionId is supported.

This parameter is required.', example='RegionId', position='Query'),
  filter?: map[string]any(name='filter', description='The filter conditions. JSON format:{"key1":"value1"}.', shrink='json', position='Query'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      id?: string(name='id', description='The ID of the data.', example='cn-beijing'),
    }
  ](name='dataSources', description='The queried data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSources  ListDataSourcesRequest
  * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSources', 'GET', '{requestPath}', 'json', false, 'json', request);
}

model ListProductsRequest {
  provider: string(name='provider', description='The Cloud service provider. Only Aliyun is supported.

This parameter is required.', example='Aliyun', position='Path'),
  maxResults?: int32(name='maxResults', description='The number of entries per page. Maximum value: 100.', example='10', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='ECS', position='Query'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='Select the language in which the response is returned.

zh_CH: Chinese (default).

en_US: English.', example='zh_CH', position='Header'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='10'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='Redis'),
  products?: [ 
    {
      productCode?: string(name='productCode', description='The code of the service.', example='ECS'),
      productName?: string(name='productName', description='The service name.', example='Elastic Compute Service'),
    }
  ](name='products', description='The cloud services.'),
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='20'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @description GET /api/v1/providers/{provider}/products.
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/api/v1/providers/{provider}/products', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  provider: string(name='provider', description='The Cloud service provider. Only Aliyun is supported.

This parameter is required.', example='Aliyun', position='Path'),
  product: string(name='product', description='The code of the service.

This parameter is required.', example='ECS', position='Path'),
  maxResults?: int32(name='maxResults', description='The number of entries per page.', example='10', position='Query'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='ECS::Disk', position='Query'),
  resourceTypes?: [ string ](name='resourceTypes', description='The information about the resource types.', shrink='simple', position='Query'),
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='Select the language in which the response is returned.

zh_CH: Chinese (default).

en_US: English.', example='zh_CH', position='Header'),
}

model ListResourceTypesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='10'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='ECS::Disk'),
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceTypes?: [ 
    {
      createOnlyProperties?: [ string ](name='createOnlyProperties', description='The properties that are specific to the create operation. You need to specify these properties when you create the resource. These properties are not returned when you query the resource.'),
      deleteOnlyProperties?: [ string ](name='deleteOnlyProperties', description='The properties that are specific to the delete operation. You need to specify these properties when you delete the resource. These properties are not returned when you query the resource.'),
      filterProperties?: [ string ](name='filterProperties', description='The properties that can be used to filter the resource when you list the resource.'),
      getOnlyProperties?: [ string ](name='getOnlyProperties', description='The properties that are specific to the query operation. You need to specify these properties when you query the resource. These properties are not returned in the query result.'),
      getResponseProperties?: [ string ](name='getResponseProperties', description='The properties that are returned when you query the resource.'),
      handlers?: {
        create?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='create', description='The information about the create operation.'),
        delete?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='delete', description='The information about the delete operation.'),
        get?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='get', description='The information about the query operation.'),
        list?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='list', description='The information about the list operation.'),
        update?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='update', description='The information about the update operation.'),
      }(name='handlers', description='The information about the operation, including the required Resource Access Management (RAM) permissions.'),
      info?: {
        chargeType?: string(name='chargeType', description='Billing method\\
paid free', example='paid'),
        deliveryScope?: string(name='deliveryScope', description='The deployment level of the resource.

center

region

zone', example='region'),
        description?: string(name='description', description='The description of the resource type.', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
        title?: string(name='title', description='The name of the resource type.', example='Instance'),
      }(name='info', description='The information about the resource type.'),
      listOnlyProperties?: [ string ](name='listOnlyProperties', description='The properties that are specific to the list operation. You need to specify these properties when you list the resource. These properties are not returned when you query the resource.'),
      listResponseProperties?: [ string ](name='listResponseProperties', description='The properties that are returned when you list the resource.'),
      primaryIdentifier?: string(name='primaryIdentifier', description='The ID of the resource.', example='/properties/InstanceId'),
      product?: string(name='product', description='The code of the service.', example='ECS'),
      properties?: map[string]any(name='properties', description='The resource properties. The key specifies the property name and the value specifies the details of the property.'),
      publicProperties?: [ string ](name='publicProperties', description='The common properties of the resource. The common properties are not operation-specific.'),
      readOnlyProperties?: [ string ](name='readOnlyProperties', description='The read-only properties. These properties are returned only when you list or query the resource. You do not need to specify these properties when you create or update the resource.'),
      required?: [ string ](name='required', description='The properties that must be specified when you create the resource.'),
      resourceType?: string(name='resourceType', description='The resource type.', example='Instance'),
      sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties', description='The sensitive properties, such as the password.'),
      updateOnlyProperties?: [ string ](name='updateOnlyProperties', description='The properties that are specific to the update operation. You need to specify these properties when you update the resource. These properties are not returned when you query the resource.'),
      updateTypeProperties?: [ string ](name='updateTypeProperties', description='The properties that can be modified.'),
    }
  ](name='resourceTypes', description='The information about the resource types.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='20'),
}

model ListResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceTypesResponseBody(name='body'),
}

/**
  * @description GET /api/v1/providers/{provider}/products/{product}/resourceTypes.
  * @param request  the request parameters of ListResourceTypes  ListResourceTypesRequest
  * @return ListResourceTypesResponse
 */
async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceTypes', 'GET', '/api/v1/providers/{provider}/products/{product}/resourceTypes', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  requestPath?: string(name='requestPath', description='The request path. Specify this parameter in the following format: /api/v1/providers/{provider}/products/{product}/resources/{resourceType}/{resourceId}

Variables in the request path:

provider: the Cloud service provider. Only Aliyun is supported.

product: the code of the service.

resourceType: the type of resources. If parent resource is specified, the format is {parent resource type code}/parent resource ID/{resource type code}.

resourceId: the resource ID.', example='/api/v1/providers/Aliyun/products/Redis/resources/Instance/r-8vbf5abe31cxxxxx/Account/cctest', position='Path'),
  body?: map[string]any(name='body', description='The request body. The property of the resource to be updated is specified in JSON format.', example='{
     "AccountPassword": "4321****",
     "Description": "cctest"
}', position='Body'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4', position='Query'),
  regionId?: string(name='regionId', description='The region ID. This parameter is required if a cloud service is a regionalized.', example='cn-beijing', position='Query'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
  * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
  * If resources fail to be updated at any time, the Cloud Control API does not roll the resource back to the original status.
  * The resource APIs cannot be rolled back. If the API operation is partially failed to be called, you can call the GetResource operation to view the latest status of the resource. If necessary, you can call the UpdateResource or DeleteResource operation to manually compensate for the failure.
  * @param request  the request parameters of UpdateResource  UpdateResourceRequest
  * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '{requestPath}', 'json', false, 'json', request);
}

