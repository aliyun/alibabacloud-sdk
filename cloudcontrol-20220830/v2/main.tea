/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudcontrol', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelTaskResponseBody(name='body'),
}

/**
 * @summary Calls this operation to cancel a specified asynchronous task.
 *
 * @description Only tasks that are in the Pending or Running state can be canceled.
 * You can call the CancelTask operation to cancel a Cloud Control API task, but the tasks that have been started in the downstream Alibaba Cloud services cannot be canceled.
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelTaskResponse
 */
@context("cancelTaskWithContext")
async function cancelTaskWithOptions(taskId: string, headers: map[string]string, runtime: $RuntimeOptions): CancelTaskResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelTask',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/tasks/${$URL.percentEncode(taskId)}/operation/cancel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to cancel a specified asynchronous task.
 *
 * @description Only tasks that are in the Pending or Running state can be canceled.
 * You can call the CancelTask operation to cancel a Cloud Control API task, but the tasks that have been started in the downstream Alibaba Cloud services cannot be canceled.
 *
 * @return CancelTaskResponse
 */
async function cancelTask(taskId: string): CancelTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelTaskWithOptions(taskId, headers, runtime);
}

model CreateResourceRequest {
  body?: map[string]any(name='body', description='The request body. The property of the resource, which is specified in JSON format.', example='{
     "AccountName": "cctest",
     "AccountPassword": "Aa1234****"
}'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4'),
  regionId?: string(name='regionId', description='The region ID. This parameter is required if a cloud service is a regionalized.', example='cn-beijing'),
}

model CreateResourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
  resourcePath?: string(name='resourcePath', description='The path of the resources. The relative resource ID. The resource path contains the complete resource location (parent resource/child resource).', example='Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
 * @summary Calls this operation to create resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 *
 * @param requestPath the whole path of resource string
 * @param request CreateResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceResponse
 */
@context("createResourceWithContext")
async function createResourceWithOptions(requestPath: string, request: CreateResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateResourceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.clientToken)) {
    query['clientToken'] = request.clientToken;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateResource',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to create resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 *
 * @param requestPath the whole path of resource string
 * @param request CreateResourceRequest
 * @return CreateResourceResponse
 */
async function createResource(requestPath: string, request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceWithOptions(requestPath, request, headers, runtime);
}

model DeleteResourceRequest {
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4'),
  filter?: map[string]any(name='filter'),
  regionId?: string(name='regionId', description='The region. This parameter is required if a cloud service is a regionalized.', example='cn-beijing'),
}

model DeleteResourceShrinkRequest {
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4'),
  filterShrink?: string(name='filter'),
  regionId?: string(name='regionId', description='The region. This parameter is required if a cloud service is a regionalized.', example='cn-beijing'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
 * @summary Calls this operation to delete resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 *
 * @param requestPath the whole path of resource string
 * @param tmpReq DeleteResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceResponse
 */
@context("deleteResourceWithContext")
async function deleteResourceWithOptions(requestPath: string, tmpReq: DeleteResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteResourceResponse {
  tmpReq.validate();
  var request = new DeleteResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.clientToken)) {
    query['clientToken'] = request.clientToken;
  }
  if (!$isNull(request.filterShrink)) {
    query['filter'] = request.filterShrink;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteResource',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to delete resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 *
 * @param requestPath the whole path of resource string
 * @param request DeleteResourceRequest
 * @return DeleteResourceResponse
 */
async function deleteResource(requestPath: string, request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceWithOptions(requestPath, request, headers, runtime);
}

model GetPriceRequest {
  regionId?: string(name='regionId', description='The region ID. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing'),
  resourceAttributes?: map[string]any(name='resourceAttributes', description='The attributes based on which the price is queried (in JSON format).', example='{
        "LoadBalancerName": "cc-test",
        "LoadBalancerSpec": "slb.s3.small",
        "InternetChargeType": "paybybandwidth",
        "AddressType": "internet",
        "PaymentType": "PayAsYouGo",
        "Bandwidth": 6
      }'),
}

model GetPriceShrinkRequest {
  regionId?: string(name='regionId', description='The region ID. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing'),
  resourceAttributesShrink?: string(name='resourceAttributes', description='The attributes based on which the price is queried (in JSON format).', example='{
        "LoadBalancerName": "cc-test",
        "LoadBalancerSpec": "slb.s3.small",
        "InternetChargeType": "paybybandwidth",
        "AddressType": "internet",
        "PaymentType": "PayAsYouGo",
        "Bandwidth": 6
      }'),
}

model GetPriceResponseBody = {
  price?: {
    currency?: string(name='currency', description='The currency type. Valid values: CNY: Chinese Yuan. USD: US dollar. JPY: Japanese Yen.', example='CNY'),
    discountPrice?: float(name='discountPrice', description='The discount.', example='0.0'),
    moduleDetails?: [ 
      {
        costAfterDiscount?: float(name='costAfterDiscount', description='The discount price.', example='0.02'),
        invoiceDiscount?: float(name='invoiceDiscount', description='The discount.', example='0.0'),
        moduleCode?: string(name='moduleCode', description='The code of the pricing module.', example='InstanceRent'),
        moduleName?: string(name='moduleName', description='The name of the pricing module.', example='InstanceRent'),
        originalCost?: float(name='originalCost', description='The original price.', example='1000.0'),
        priceType?: string(name='priceType', description='The price type.', example='1.0'),
      }
    ](name='moduleDetails', description='The order details of the pricing module.'),
    originalPrice?: float(name='originalPrice', description='The original price.', example='760.0'),
    promotionDetails?: [ 
      {
        promotionDesc?: string(name='promotionDesc', description='The description of the promotion.', example='37284'),
        promotionId?: long(name='promotionId', description='The ID of the promotion.'),
        promotionName?: string(name='promotionName', description='The name of the promotion.'),
      }
    ](name='promotionDetails', description='The details of the promotion.'),
    tradePrice?: float(name='tradePrice', description='The discount price.', example='0.0'),
  }(name='price', description='The price.'),
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model GetPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPriceResponseBody(name='body'),
}

/**
 * @summary An RFQ interface through which users can query resource prices.
 *
 * @param requestPath the whole path of resource string
 * @param tmpReq GetPriceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPriceResponse
 */
@context("getPriceWithContext")
async function getPriceWithOptions(requestPath: string, tmpReq: GetPriceRequest, headers: map[string]string, runtime: $RuntimeOptions): GetPriceResponse {
  tmpReq.validate();
  var request = new GetPriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.resourceAttributes)) {
    request.resourceAttributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceAttributes, 'resourceAttributes', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!$isNull(request.resourceAttributesShrink)) {
    query['resourceAttributes'] = request.resourceAttributesShrink;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPrice',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary An RFQ interface through which users can query resource prices.
 *
 * @param requestPath the whole path of resource string
 * @param request GetPriceRequest
 * @return GetPriceResponse
 */
async function getPrice(requestPath: string, request: GetPriceRequest): GetPriceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getPriceWithOptions(requestPath, request, headers, runtime);
}

model GetResourceTypeHeaders {
  commonHeaders?: map[string]string,
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='The language selected for the returned product.

zh_CH: Chinese (default)

en_US: English', example='zh_CH'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceType?: {
    createOnlyProperties?: [ string ](name='createOnlyProperties', description='The properties that are specific to the create operation. You need to specify these properties when you create the resource. These properties are not returned when you query the resource.'),
    deleteOnlyProperties?: [ string ](name='deleteOnlyProperties', description='The properties that are specific to the delete operation. You need to specify these properties when you delete the resource. These properties are not returned when you query the resource.'),
    filterProperties?: [ string ](name='filterProperties', description='The properties that can be used to filter the resource when you list the resource.'),
    getOnlyProperties?: [ string ](name='getOnlyProperties', description='The properties that are specific to the query operation. You need to specify these properties when you query the resource. These properties are not returned in the query result.'),
    getResponseProperties?: [ string ](name='getResponseProperties', description='The properties that are returned when you query the resource.'),
    handlers?: {
      create?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='create', description='The information about the create operation.'),
      delete?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='delete', description='The information about the delete operation.'),
      get?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='get', description='The information about the query operation.'),
      list?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='list', description='The information about the list operation.'),
      update?: {
        permissions?: [ string ](name='permissions', description='The information about the required RAM permissions.'),
      }(name='update', description='The information about the update operation.'),
    }(name='handlers', description='The information about the operation, including the required Resource Access Management (RAM) permissions.'),
    info?: {
      chargeType?: string(name='chargeType', description='The payment form. Valid values:

paid free', example='paid'),
      deliveryScope?: string(name='deliveryScope', description='The delivery level. Valid values:

center

region

zone', example='region'),
      description?: string(name='description', description='The description of the resource type.', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
      title?: string(name='title', description='The name of the resource type.', example='Instance'),
    }(name='info', description='The basic information about the resource type.'),
    listOnlyProperties?: [ string ](name='listOnlyProperties', description='The properties that are specific to the list operation. You need to specify these properties when you list the resource. These properties are not returned when you query the resource.'),
    listResponseProperties?: [ string ](name='listResponseProperties', description='The properties that are returned when you list the resource.'),
    primaryIdentifier?: string(name='primaryIdentifier', description='The ID of the resource.', example='/properties/InstanceId'),
    product?: string(name='product', description='The code of the service.', example='ECS'),
    properties?: map[string]any(name='properties', description='The resource properties. The key specifies the property name and the value specifies the details of the property.'),
    publicProperties?: [ string ](name='publicProperties', description='The common properties of the resource. The common properties are not operation-specific.'),
    readOnlyProperties?: [ string ](name='readOnlyProperties', description='The read-only properties. These properties are returned only when you perform the List or Get operation. You do not need to specify these properties when you create or update the resource.'),
    required?: [ string ](name='required', description='The properties that must be specified when you create the resource.'),
    resourceType?: string(name='resourceType', description='The type of the resource. If the resource belongs to a parent resource, the return format is {parent resource type code /resource type code}.', example='Instance'),
    sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties', description='The sensitive properties, such as the password.'),
    updateOnlyProperties?: [ string ](name='updateOnlyProperties', description='The properties that are specific to the update operation. You need to specify these properties when you update the resource. These properties are not returned when you query the resource.'),
    updateTypeProperties?: [ string ](name='updateTypeProperties', description='The properties that can be modified.'),
  }(name='resourceType', description='The resource type. Valid values:'),
}

model GetResourceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceTypeResponseBody(name='body'),
}

/**
 * @summary You can call the operation to obtain resource metadata.
 *
 * @param requestPath the whole path of resource string
 * @param headers GetResourceTypeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceTypeResponse
 */
@context("getResourceTypeWithContext")
async function getResourceTypeWithOptions(requestPath: string, headers: GetResourceTypeHeaders, runtime: $RuntimeOptions): GetResourceTypeResponse {
  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAcceptLanguage)) {
    realHeaders['x-acs-accept-language'] = $string(headers.xAcsAcceptLanguage);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResourceType',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call the operation to obtain resource metadata.
 *
 * @param requestPath the whole path of resource string
 * @return GetResourceTypeResponse
 */
async function getResourceType(requestPath: string): GetResourceTypeResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetResourceTypeHeaders{};
  return getResourceTypeWithOptions(requestPath, headers, runtime);
}

model GetResourcesRequest {
  filter?: map[string]any(name='filter', description='The filter condition. The JSON format. You can use some resource properties as filter conditions.'),
  maxResults?: int32(name='maxResults', description='The number of entries per page. Maximum value: 100.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='AAAAAdDWBF2****'),
  regionId?: string(name='regionId', description='The ID of the region. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing'),
}

model GetResourcesShrinkRequest {
  filterShrink?: string(name='filter', description='The filter condition. The JSON format. You can use some resource properties as filter conditions.'),
  maxResults?: int32(name='maxResults', description='The number of entries per page. Maximum value: 100.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='AAAAAdDWBF2****'),
  regionId?: string(name='regionId', description='The ID of the region. This parameter is required if the cloud product is deployed in a region.', example='cn-beijing'),
}

model GetResourcesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned. Return result of the List operation.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists. Return result of the List operation.', example='AAAAAdDWBF2****'),
  requestId?: string(name='requestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resource?: {
    resourceAttributes?: map[string]any(name='resourceAttributes', description='The resource properties in the JSON format.', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
    resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
  }(name='resource', description='The specified resource. Return result of the Get operation.'),
  resources?: [ 
    {
      resourceAttributes?: map[string]any(name='resourceAttributes', description='The resource properties in the JSON format.', example='{"Status":"Available","Description":"","AccountPrivilege":"RoleReadWrite","InstanceId":"r-8vbf5abe31c9c4d4","RegionId":"cn-zhangjiakou","AccountType":"Normal","TypeInfo":{},"AccountName":"cctest"}'),
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='cctest'),
    }
  ](name='resources', description='The resource list. Return result of the List operation.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned. Return result of the List operation.', example='20'),
}

model GetResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcesResponseBody(name='body'),
}

/**
 * @summary You can call the operation to query resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out CloudControl API.
 * You can call this operation to query resources List and Get based on different request paths.
 *
 * @param requestPath the whole path of resource string
 * @param tmpReq GetResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourcesResponse
 */
@context("getResourcesWithContext")
async function getResourcesWithOptions(requestPath: string, tmpReq: GetResourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): GetResourcesResponse {
  tmpReq.validate();
  var request = new GetResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.filterShrink)) {
    query['filter'] = request.filterShrink;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResources',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call the operation to query resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out CloudControl API.
 * You can call this operation to query resources List and Get based on different request paths.
 *
 * @param requestPath the whole path of resource string
 * @param request GetResourcesRequest
 * @return GetResourcesResponse
 */
async function getResources(requestPath: string, request: GetResourcesRequest): GetResourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getResourcesWithOptions(requestPath, request, headers, runtime);
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  task?: {
    createTime?: string(name='createTime', description='The time when the task was created.', example='2022-10-09T00:46:03Z'),
    error?: {
      code?: string(name='code', description='The error code.', example='OperationFailure.OperationFailed'),
      message?: string(name='message', description='The error message.', example='{
     "requestId": "123****",
     "errorCode": "InvalidRamUser.NoPermission",
     "errorMsg": "Ram user is not authorized to perform the operation."
}'),
    }(name='error', description='The error returned for the task.'),
    product?: string(name='product', description='The code of the service.', example='ECS'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
    resourceId?: string(name='resourceId', description='The ID of the resource.', example='i-8vbascjthm7kzhp3****'),
    resourcePath?: string(name='resourcePath', description='The path of the resources. The relative resource ID. The resource path contains the complete resource location (parent resource/child resource).', example='Instance/i-8vbascjthm7kzhp3****
Instance/r-8vbf5abe31c9c4d4/Account/cctest'),
    resourceType?: string(name='resourceType', description='The resource type.', example='Instance'),
    status?: string(name='status', description='The task state.

Pending

Running

Succeeded

Failed

Cancelling

Cancelled.', example='Succeeded'),
    taskAction?: string(name='taskAction', description='The type of the task operation. Valid values: Create, Update, and Delete.', example='Create'),
    taskId?: string(name='taskId', description='The ID of the task.', example='task-433aead756057fff8189a7ce5****'),
  }(name='task', description='The information about the task.'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
 * @summary Calls this operation to query a specified asynchronous task.
 *
 * @description GET /api/v1/tasks/{taskId}.
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskResponse
 */
@context("getTaskWithContext")
async function getTaskWithOptions(taskId: string, headers: map[string]string, runtime: $RuntimeOptions): GetTaskResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTask',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/tasks/${$URL.percentEncode(taskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to query a specified asynchronous task.
 *
 * @description GET /api/v1/tasks/{taskId}.
 *
 * @return GetTaskResponse
 */
async function getTask(taskId: string): GetTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(taskId, headers, runtime);
}

model ListDataSourcesRequest {
  attributeName?: string(name='attributeName', description='The name of the property. RegionId is supported.

This parameter is required.', example='RegionId'),
  filter?: map[string]any(name='filter', description='The filter conditions. JSON format:{"key1":"value1"}.'),
}

model ListDataSourcesShrinkRequest {
  attributeName?: string(name='attributeName', description='The name of the property. RegionId is supported.

This parameter is required.', example='RegionId'),
  filterShrink?: string(name='filter', description='The filter conditions. JSON format:{"key1":"value1"}.'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      id?: string(name='id', description='The ID of the data.', example='cn-beijing'),
    }
  ](name='dataSources', description='The queried data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary You can call the operation to query the valid values of resource attributes, such as RegionID and ZoneId.
 *
 * @param requestPath the whole path of resource string
 * @param tmpReq ListDataSourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
@context("listDataSourcesWithContext")
async function listDataSourcesWithOptions(requestPath: string, tmpReq: ListDataSourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDataSourcesResponse {
  tmpReq.validate();
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'filter', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.attributeName)) {
    query['attributeName'] = request.attributeName;
  }
  if (!$isNull(request.filterShrink)) {
    query['filter'] = request.filterShrink;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSources',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call the operation to query the valid values of resource attributes, such as RegionID and ZoneId.
 *
 * @param requestPath the whole path of resource string
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(requestPath: string, request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(requestPath, request, headers, runtime);
}

model ListProductsHeaders {
  commonHeaders?: map[string]string,
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='Select the language in which the response is returned.

zh_CH: Chinese (default).

en_US: English.', example='zh_CH'),
}

model ListProductsRequest {
  maxResults?: int32(name='maxResults', description='The number of entries per page. Maximum value: 100.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='ECS'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='10'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='Redis'),
  products?: [ 
    {
      productCode?: string(name='productCode', description='The code of the service.', example='ECS'),
      productName?: string(name='productName', description='The service name.', example='Elastic Compute Service'),
    }
  ](name='products', description='The cloud services.'),
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='20'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
 * @summary Calls this operation to list the supported services.
 *
 * @description GET /api/v1/providers/{provider}/products.
 *
 * @param request ListProductsRequest
 * @param headers ListProductsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductsResponse
 */
@context("listProductsWithContext")
async function listProductsWithOptions(provider: string, request: ListProductsRequest, headers: ListProductsHeaders, runtime: $RuntimeOptions): ListProductsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAcceptLanguage)) {
    realHeaders['x-acs-accept-language'] = $string(headers.xAcsAcceptLanguage);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProducts',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${$URL.percentEncode(provider)}/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to list the supported services.
 *
 * @description GET /api/v1/providers/{provider}/products.
 *
 * @param request ListProductsRequest
 * @return ListProductsResponse
 */
async function listProducts(provider: string, request: ListProductsRequest): ListProductsResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new ListProductsHeaders{};
  return listProductsWithOptions(provider, request, headers, runtime);
}

model ListResourceTypesHeaders {
  commonHeaders?: map[string]string,
  xAcsAcceptLanguage?: string(name='x-acs-accept-language', description='Select the language in which the response is returned.

zh_CH: Chinese (default).

en_US: English.', example='zh_CH'),
}

model ListResourceTypesRequest {
  maxResults?: int32(name='maxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='ECS::Disk'),
  resourceTypes?: [ string ](name='resourceTypes', description='The information about the resource types.'),
}

model ListResourceTypesShrinkRequest {
  maxResults?: int32(name='maxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If you leave this parameter empty, the query starts from the beginning.', example='ECS::Disk'),
  resourceTypesShrink?: string(name='resourceTypes', description='The information about the resource types.'),
}

model ListResourceTypesResponseBody = {
  maxResults?: int32(name='maxResults', description='The maximum number of entries returned.', example='10'),
  nextToken?: string(name='nextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='ECS::Disk'),
  requestId?: string(name='requestId', description='The ID of a request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceTypes?: [ 
    {
      createOnlyProperties?: [ string ](name='createOnlyProperties', description='The properties that are specific to the create operation. You need to specify these properties when you create the resource. These properties are not returned when you query the resource.'),
      deleteOnlyProperties?: [ string ](name='deleteOnlyProperties', description='The properties that are specific to the delete operation. You need to specify these properties when you delete the resource. These properties are not returned when you query the resource.'),
      filterProperties?: [ string ](name='filterProperties', description='The properties that can be used to filter the resource when you list the resource.'),
      getOnlyProperties?: [ string ](name='getOnlyProperties', description='The properties that are specific to the query operation. You need to specify these properties when you query the resource. These properties are not returned in the query result.'),
      getResponseProperties?: [ string ](name='getResponseProperties', description='The properties that are returned when you query the resource.'),
      handlers?: {
        create?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='create', description='The information about the create operation.'),
        delete?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='delete', description='The information about the delete operation.'),
        get?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='get', description='The information about the query operation.'),
        list?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='list', description='The information about the list operation.'),
        update?: {
          permissions?: [ string ](name='permissions', description='The RAM permissions required.'),
        }(name='update', description='The information about the update operation.'),
      }(name='handlers', description='The information about the operation, including the required Resource Access Management (RAM) permissions.'),
      info?: {
        chargeType?: string(name='chargeType', description='Billing method\\\\
paid free', example='paid'),
        deliveryScope?: string(name='deliveryScope', description='The deployment level of the resource.

center

region

zone', example='region'),
        description?: string(name='description', description='The description of the resource type.', example='An ECS instance is equivalent to a virtual machine, including the most basic computing components such as CPU, memory, operating system, network, and disk. You can easily customize and change the configuration of the instance. You have full control over the virtual machine.'),
        title?: string(name='title', description='The name of the resource type.', example='Instance'),
      }(name='info', description='The information about the resource type.'),
      listOnlyProperties?: [ string ](name='listOnlyProperties', description='The properties that are specific to the list operation. You need to specify these properties when you list the resource. These properties are not returned when you query the resource.'),
      listResponseProperties?: [ string ](name='listResponseProperties', description='The properties that are returned when you list the resource.'),
      primaryIdentifier?: string(name='primaryIdentifier', description='The ID of the resource.', example='/properties/InstanceId'),
      product?: string(name='product', description='The code of the service.', example='ECS'),
      properties?: map[string]any(name='properties', description='The resource properties. The key specifies the property name and the value specifies the details of the property.'),
      publicProperties?: [ string ](name='publicProperties', description='The common properties of the resource. The common properties are not operation-specific.'),
      readOnlyProperties?: [ string ](name='readOnlyProperties', description='The read-only properties. These properties are returned only when you list or query the resource. You do not need to specify these properties when you create or update the resource.'),
      required?: [ string ](name='required', description='The properties that must be specified when you create the resource.'),
      resourceType?: string(name='resourceType', description='The resource type.', example='Instance'),
      sensitiveInfoProperties?: [ string ](name='sensitiveInfoProperties', description='The sensitive properties, such as the password.'),
      updateOnlyProperties?: [ string ](name='updateOnlyProperties', description='The properties that are specific to the update operation. You need to specify these properties when you update the resource. These properties are not returned when you query the resource.'),
      updateTypeProperties?: [ string ](name='updateTypeProperties', description='The properties that can be modified.'),
    }
  ](name='resourceTypes', description='The information about the resource types.'),
  totalCount?: int32(name='totalCount', description='The total number of entries returned.', example='20'),
}

model ListResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceTypesResponseBody(name='body'),
}

/**
 * @summary Calls this operation to list the resource types of a service.
 *
 * @description GET /api/v1/providers/{provider}/products/{product}/resourceTypes.
 *
 * @param tmpReq ListResourceTypesRequest
 * @param headers ListResourceTypesHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourceTypesResponse
 */
@context("listResourceTypesWithContext")
async function listResourceTypesWithOptions(provider: string, product: string, tmpReq: ListResourceTypesRequest, headers: ListResourceTypesHeaders, runtime: $RuntimeOptions): ListResourceTypesResponse {
  tmpReq.validate();
  var request = new ListResourceTypesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.resourceTypes)) {
    request.resourceTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceTypes, 'resourceTypes', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.resourceTypesShrink)) {
    query['resourceTypes'] = request.resourceTypesShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAcceptLanguage)) {
    realHeaders['x-acs-accept-language'] = $string(headers.xAcsAcceptLanguage);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListResourceTypes',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/providers/${$URL.percentEncode(provider)}/products/${$URL.percentEncode(product)}/resourceTypes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to list the resource types of a service.
 *
 * @description GET /api/v1/providers/{provider}/products/{product}/resourceTypes.
 *
 * @param request ListResourceTypesRequest
 * @return ListResourceTypesResponse
 */
async function listResourceTypes(provider: string, product: string, request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new ListResourceTypesHeaders{};
  return listResourceTypesWithOptions(provider, product, request, headers, runtime);
}

model UpdateResourceRequest {
  body?: map[string]any(name='body', description='The request body. The property of the resource to be updated is specified in JSON format.', example='{
     "AccountPassword": "4321****",
     "Description": "cctest"
}'),
  clientToken?: string(name='clientToken', description='The client token that is used to ensure the idempotence of the request. If a cloud service supports idempotence, the parameter takes effect.', example='1e810dfe1468721d0664a49b9d9f74f4'),
  regionId?: string(name='regionId', description='The region ID. This parameter is required if a cloud service is a regionalized.', example='cn-beijing'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='taskId', description='The ID of the asynchronous task. If the operation is asynchronous, this field is returned. In this case, the HTTP status code 202 is returned.', example='task-433aead756057fff8189a7ce5****'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
 * @summary Calls this operation to update resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 * If resources fail to be updated at any time, the Cloud Control API does not roll the resource back to the original status.
 * The resource APIs cannot be rolled back. If the API operation is partially failed to be called, you can call the GetResource operation to view the latest status of the resource. If necessary, you can call the UpdateResource or DeleteResource operation to manually compensate for the failure.
 *
 * @param requestPath the whole path of resource string
 * @param request UpdateResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceResponse
 */
@context("updateResourceWithContext")
async function updateResourceWithOptions(requestPath: string, request: UpdateResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateResourceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.clientToken)) {
    query['clientToken'] = request.clientToken;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateResource',
    version = '2022-08-30',
    protocol = 'HTTPS',
    pathname = `${requestPath}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Calls this operation to update resources.
 *
 * @description You can go to [OpenAPI Explorer](https://next.api.aliyun.com/cloudcontrol) to view the documentation and try out Cloud Control API.
 * If resources fail to be updated at any time, the Cloud Control API does not roll the resource back to the original status.
 * The resource APIs cannot be rolled back. If the API operation is partially failed to be called, you can call the GetResource operation to view the latest status of the resource. If necessary, you can call the UpdateResource or DeleteResource operation to manually compensate for the failure.
 *
 * @param requestPath the whole path of resource string
 * @param request UpdateResourceRequest
 * @return UpdateResourceResponse
 */
async function updateResource(requestPath: string, request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceWithOptions(requestPath, request, headers, runtime);
}

