/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('expressconnectrouter', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachExpressConnectRouterChildInstanceRequest {
  childInstanceId?: string(name='ChildInstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', example='190550144868****'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', example='cn-hangzhou'),
  childInstanceType?: string(name='ChildInstanceType', example='VBR'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-a5xqrgbeidz1w8****'),
}

model AttachExpressConnectRouterChildInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model AttachExpressConnectRouterChildInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachExpressConnectRouterChildInstanceResponseBody(name='body'),
}

async function attachExpressConnectRouterChildInstanceWithOptions(request: AttachExpressConnectRouterChildInstanceRequest, runtime: Util.RuntimeOptions): AttachExpressConnectRouterChildInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.childInstanceId)) {
    body['ChildInstanceId'] = request.childInstanceId;
  }
  if (!Util.isUnset(request.childInstanceOwnerId)) {
    body['ChildInstanceOwnerId'] = request.childInstanceOwnerId;
  }
  if (!Util.isUnset(request.childInstanceRegionId)) {
    body['ChildInstanceRegionId'] = request.childInstanceRegionId;
  }
  if (!Util.isUnset(request.childInstanceType)) {
    body['ChildInstanceType'] = request.childInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachExpressConnectRouterChildInstance',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachExpressConnectRouterChildInstance(request: AttachExpressConnectRouterChildInstanceRequest): AttachExpressConnectRouterChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachExpressConnectRouterChildInstanceWithOptions(request, runtime);
}

model CheckAddRegionToExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
  freshRegionId?: string(name='FreshRegionId', example='cn-hangzhou'),
}

model CheckAddRegionToExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  anyCrossBorderLink?: boolean(name='AnyCrossBorderLink', example='true'),
  anyInterRegionLink?: boolean(name='AnyInterRegionLink', example='true'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  isCdtCrossBorderEnabled?: boolean(name='IsCdtCrossBorderEnabled', example='true'),
  isCdtInterRegionEnabled?: boolean(name='IsCdtInterRegionEnabled', example='true'),
  isUserAllowedToCreateCrossBorderLink?: boolean(name='IsUserAllowedToCreateCrossBorderLink', example='true'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model CheckAddRegionToExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAddRegionToExpressConnectRouterResponseBody(name='body'),
}

async function checkAddRegionToExpressConnectRouterWithOptions(request: CheckAddRegionToExpressConnectRouterRequest, runtime: Util.RuntimeOptions): CheckAddRegionToExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.freshRegionId)) {
    body['FreshRegionId'] = request.freshRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckAddRegionToExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkAddRegionToExpressConnectRouter(request: CheckAddRegionToExpressConnectRouterRequest): CheckAddRegionToExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAddRegionToExpressConnectRouterWithOptions(request, runtime);
}

model CreateExpressConnectRouterRequest {
  alibabaSideAsn?: long(name='AlibabaSideAsn', example='45104'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  description?: string(name='Description', example='test'),
  dryRun?: boolean(name='DryRun', example='false'),
  name?: string(name='Name', example='test'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvvajg5q****'),
}

model CreateExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.Name'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of Name **** is illegal.'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model CreateExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressConnectRouterResponseBody(name='body'),
}

async function createExpressConnectRouterWithOptions(request: CreateExpressConnectRouterRequest, runtime: Util.RuntimeOptions): CreateExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alibabaSideAsn)) {
    body['AlibabaSideAsn'] = request.alibabaSideAsn;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExpressConnectRouter(request: CreateExpressConnectRouterRequest): CreateExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExpressConnectRouterWithOptions(request, runtime);
}

model CreateExpressConnectRouterAssociationRequest {
  allowedPrefixes?: [ string ](name='AllowedPrefixes'),
  associationRegionId?: string(name='AssociationRegionId', example='cn-hangzhou'),
  cenId?: string(name='CenId', example='cen-of3o1the3i4gwb****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  createAttachment?: boolean(name='CreateAttachment', example='true'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  transitRouterId?: string(name='TransitRouterId', example='tr-2ze4i71c6be454e2l****'),
  transitRouterOwnerId?: long(name='TransitRouterOwnerId', example='189159362009****'),
  vpcId?: string(name='VpcId', example='vpc-bp1h37fchc6jmfyln****'),
  vpcOwnerId?: long(name='VpcOwnerId', example='132193271328****'),
}

model CreateExpressConnectRouterAssociationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='05130E79-588D-5C40-A718-C4863A59****'),
  success?: boolean(name='Success', example='True'),
}

model CreateExpressConnectRouterAssociationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressConnectRouterAssociationResponseBody(name='body'),
}

async function createExpressConnectRouterAssociationWithOptions(request: CreateExpressConnectRouterAssociationRequest, runtime: Util.RuntimeOptions): CreateExpressConnectRouterAssociationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowedPrefixes)) {
    body['AllowedPrefixes'] = request.allowedPrefixes;
  }
  if (!Util.isUnset(request.associationRegionId)) {
    body['AssociationRegionId'] = request.associationRegionId;
  }
  if (!Util.isUnset(request.cenId)) {
    body['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.createAttachment)) {
    body['CreateAttachment'] = request.createAttachment;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.transitRouterId)) {
    body['TransitRouterId'] = request.transitRouterId;
  }
  if (!Util.isUnset(request.transitRouterOwnerId)) {
    body['TransitRouterOwnerId'] = request.transitRouterOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcOwnerId)) {
    body['VpcOwnerId'] = request.vpcOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExpressConnectRouterAssociation',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExpressConnectRouterAssociation(request: CreateExpressConnectRouterAssociationRequest): CreateExpressConnectRouterAssociationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExpressConnectRouterAssociationWithOptions(request, runtime);
}

model DeleteExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
}

model DeleteExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressConnectRouterResponseBody(name='body'),
}

async function deleteExpressConnectRouterWithOptions(request: DeleteExpressConnectRouterRequest, runtime: Util.RuntimeOptions): DeleteExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExpressConnectRouter(request: DeleteExpressConnectRouterRequest): DeleteExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteExpressConnectRouterWithOptions(request, runtime);
}

model DeleteExpressConnectRouterAssociationRequest {
  associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  deleteAttachment?: boolean(name='DeleteAttachment', example='true'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
}

model DeleteExpressConnectRouterAssociationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='05130E79-588D-5C40-A718-C4863A59****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteExpressConnectRouterAssociationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressConnectRouterAssociationResponseBody(name='body'),
}

async function deleteExpressConnectRouterAssociationWithOptions(request: DeleteExpressConnectRouterAssociationRequest, runtime: Util.RuntimeOptions): DeleteExpressConnectRouterAssociationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.associationId)) {
    body['AssociationId'] = request.associationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deleteAttachment)) {
    body['DeleteAttachment'] = request.deleteAttachment;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExpressConnectRouterAssociation',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExpressConnectRouterAssociation(request: DeleteExpressConnectRouterAssociationRequest): DeleteExpressConnectRouterAssociationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteExpressConnectRouterAssociationWithOptions(request, runtime);
}

model DescribeDisabledExpressConnectRouterRouteEntriesRequest {
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFv4fzkNPW8Z+cZ+DBXXQ3Gmf3XlCgpBH43oaTYTAAcGc708Zb+pDyAGVJBo/MKsyrtZfPnX9Ztf02vgdIDyaNe8UuZdf/JJk069qxGKzqSKg='),
}

model DescribeDisabledExpressConnectRouterRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  disabledRouteEntryList?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.100.110/32'),
      ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
      gmtCreate?: string(name='GmtCreate', example='1682317345'),
      nexthopInstanceId?: string(name='NexthopInstanceId', example='br-hp3u4u5f03tfuljis****'),
      nexthopInstanceRegionId?: string(name='NexthopInstanceRegionId', example='cn-hangzhou'),
    }
  ](name='DisabledRouteEntryList'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='6'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='gAAAAABkDTaRFnmxUoMLVOn8YTIgYFeL2ch8j0sJs8VCIU8SS5438m3D9X1VqspCcaUEHRN9I_AfVwMhZHAhcNivifK_OtQxJQ=='),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeDisabledExpressConnectRouterRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDisabledExpressConnectRouterRouteEntriesResponseBody(name='body'),
}

async function describeDisabledExpressConnectRouterRouteEntriesWithOptions(request: DescribeDisabledExpressConnectRouterRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeDisabledExpressConnectRouterRouteEntriesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisabledExpressConnectRouterRouteEntries',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDisabledExpressConnectRouterRouteEntries(request: DescribeDisabledExpressConnectRouterRouteEntriesRequest): DescribeDisabledExpressConnectRouterRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisabledExpressConnectRouterRouteEntriesWithOptions(request, runtime);
}

model DescribeExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
  maxResults?: int32(name='MaxResults', example='10'),
  name?: string(name='Name', example='test'),
  nextToken?: string(name='NextToken', example='e0a2dbeb69a8beeeb8194e92b702df3fd3e7bfe6ce7bfc16e0b5e8707e68181f'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2aq7f4va****'),
  tagModels?: [ 
    {
      tagKey?: string(name='TagKey', example='ecr-tag'),
      tagValue?: string(name='TagValue', example='testTagValueKZqhJi'),
    }
  ](name='TagModels'),
}

model DescribeExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.Name'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of Name **** is illegal.'),
  ecrList?: [ 
    {
      alibabaSideAsn?: long(name='AlibabaSideAsn', example='45104'),
      bizStatus?: string(name='BizStatus', example='Normal'),
      description?: string(name='Description', example='test'),
      ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
      gmtCreate?: string(name='GmtCreate', example='2023-02-16T01:44:50Z'),
      gmtModified?: string(name='GmtModified', example='2023-02-16T01:44:50Z'),
      name?: string(name='Name', example='test'),
      ownerId?: long(name='OwnerId', example='170646818729****'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuscospt****'),
      status?: string(name='Status', example='Active'),
      tags?: [ 
        {
          aliUid?: long(name='AliUid', example='181614792955****'),
          category?: int32(name='Category', example='0'),
          id?: long(name='Id', example='000000100089****'),
          regionNo?: string(name='RegionNo', example='cn-shanghai'),
          resourceId?: string(name='ResourceId', example='rg-aek2aq7f4va****'),
          resuorceType?: string(name='ResuorceType', example='ECR'),
          scope?: int32(name='Scope', example='0'),
          tagKey?: string(name='TagKey', example='test'),
          tagValue?: string(name='TagValue', example='test'),
        }
      ](name='Tags'),
    }
  ](name='EcrList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='10'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2w6Olxc+cMPjUtUMpttDGZkffvHCfhBKKNEyCVaq+WUEzuUWpp9+QOApNf6g=='),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterResponseBody(name='body'),
}

async function describeExpressConnectRouterWithOptions(request: DescribeExpressConnectRouterRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagModels)) {
    body['TagModels'] = request.tagModels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouter(request: DescribeExpressConnectRouterRequest): DescribeExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterWithOptions(request, runtime);
}

model DescribeExpressConnectRouterAllowedPrefixHistoryRequest {
  associationId?: string(name='AssociationId'),
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  instanceId?: string(name='InstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  instanceType?: string(name='InstanceType', example='VPC'),
}

model DescribeExpressConnectRouterAllowedPrefixHistoryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  allowedPrefixHistoryList?: [ 
    {
      allowedPrefix?: [ string ](name='AllowedPrefix'),
      gmtCreate?: string(name='GmtCreate', example='1673751163000'),
    }
  ](name='AllowedPrefixHistoryList'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DescribeExpressConnectRouterAllowedPrefixHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterAllowedPrefixHistoryResponseBody(name='body'),
}

async function describeExpressConnectRouterAllowedPrefixHistoryWithOptions(request: DescribeExpressConnectRouterAllowedPrefixHistoryRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterAllowedPrefixHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.associationId)) {
    body['AssociationId'] = request.associationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterAllowedPrefixHistory',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterAllowedPrefixHistory(request: DescribeExpressConnectRouterAllowedPrefixHistoryRequest): DescribeExpressConnectRouterAllowedPrefixHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterAllowedPrefixHistoryWithOptions(request, runtime);
}

model DescribeExpressConnectRouterAssociationRequest {
  associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
  associationNodeType?: string(name='AssociationNodeType', example='VPC'),
  associationRegionId?: string(name='AssociationRegionId', example='cn-hangzhou'),
  cenId?: string(name='CenId', example='cen-of3o1the3i4gwb****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAYws9fJ0Ur4MGm/5OkDoW/Zn0J0/sCjivzwX9oBcwFnWaaas/kSG+J/WzLOxJHS4****'),
  transitRouterId?: string(name='TransitRouterId', example='tr-2ze4i71c6be454e2l****'),
  vpcId?: string(name='VpcId', example='vpc-bp1h37fchc6jmfyln****'),
}

model DescribeExpressConnectRouterAssociationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  associationList?: [ 
    {
      allowedPrefixes?: [ string ](name='AllowedPrefixes'),
      associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
      associationNodeType?: string(name='AssociationNodeType', example='VPC'),
      cenId?: string(name='CenId', example='cen-5510frtx8zi54q****'),
      ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
      gmtCreate?: string(name='GmtCreate', example='2024-01-09T12:18:23Z'),
      gmtModified?: string(name='GmtModified', example='2024-01-09T12:18:23Z'),
      ownerId?: long(name='OwnerId', example='167509154715****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='ACTIVE'),
      transitRouterId?: string(name='TransitRouterId', example='tr-2ze4i71c6be454e2l****'),
      transitRouterOwnerId?: long(name='TransitRouterOwnerId', example='189159362009****'),
      vpcId?: string(name='VpcId', example='vpc-2zeeaxet4i2j1a7n7****'),
      vpcOwnerId?: long(name='VpcOwnerId', example='146757288406****'),
    }
  ](name='AssociationList'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='20'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='AAAAAYws9fJ0Ur4MGm/5OkDoW/Zn0J0/sCjivzwX9oBcwFnWaaas/kSG+J/WzLOxJHS4****'),
  requestId?: string(name='RequestId', example='05130E79-588D-5C40-A718-C4863A59****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeExpressConnectRouterAssociationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterAssociationResponseBody(name='body'),
}

async function describeExpressConnectRouterAssociationWithOptions(request: DescribeExpressConnectRouterAssociationRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterAssociationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.associationId)) {
    body['AssociationId'] = request.associationId;
  }
  if (!Util.isUnset(request.associationNodeType)) {
    body['AssociationNodeType'] = request.associationNodeType;
  }
  if (!Util.isUnset(request.associationRegionId)) {
    body['AssociationRegionId'] = request.associationRegionId;
  }
  if (!Util.isUnset(request.cenId)) {
    body['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.transitRouterId)) {
    body['TransitRouterId'] = request.transitRouterId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterAssociation',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterAssociation(request: DescribeExpressConnectRouterAssociationRequest): DescribeExpressConnectRouterAssociationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterAssociationWithOptions(request, runtime);
}

model DescribeExpressConnectRouterChildInstanceRequest {
  associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
  childInstanceId?: string(name='ChildInstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', example='cn-hangzhou'),
  childInstanceType?: string(name='ChildInstanceType', example='VBR'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAYws9fJ0Ur4MGm/5OkDoW/Zn0J0/sCjivzwX9oBcwFnWaaas/kSG+J/WzLOxJHS4****'),
}

model DescribeExpressConnectRouterChildInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  childInstanceList?: [ 
    {
      associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
      childInstanceId?: string(name='ChildInstanceId', example='vbr-gw8vjq2zjux3ifsc9****'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId', example='112101171212****'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId', example='cn-hangzhou'),
      childInstanceType?: string(name='ChildInstanceType', example='VBR'),
      ecrId?: string(name='EcrId'),
      gmtCreate?: string(name='GmtCreate', example='2024-01-09T12:18:23Z'),
      gmtModified?: string(name='GmtModified', example='2024-01-09T12:18:23Z'),
      ownerId?: long(name='OwnerId', example='167509154715****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='ACTIVE'),
    }
  ](name='ChildInstanceList'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='20'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='AAAAAYws9fJ0Ur4MGm/5OkDoW/Zn0J0/sCjivzwX9oBcwFnWaaas/kSG+J/WzLOxJHS4****'),
  requestId?: string(name='RequestId', example='05130E79-588D-5C40-A718-C4863A59****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeExpressConnectRouterChildInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterChildInstanceResponseBody(name='body'),
}

async function describeExpressConnectRouterChildInstanceWithOptions(request: DescribeExpressConnectRouterChildInstanceRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterChildInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.associationId)) {
    body['AssociationId'] = request.associationId;
  }
  if (!Util.isUnset(request.childInstanceId)) {
    body['ChildInstanceId'] = request.childInstanceId;
  }
  if (!Util.isUnset(request.childInstanceRegionId)) {
    body['ChildInstanceRegionId'] = request.childInstanceRegionId;
  }
  if (!Util.isUnset(request.childInstanceType)) {
    body['ChildInstanceType'] = request.childInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterChildInstance',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterChildInstance(request: DescribeExpressConnectRouterChildInstanceRequest): DescribeExpressConnectRouterChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterChildInstanceWithOptions(request, runtime);
}

model DescribeExpressConnectRouterInterRegionTransitModeRequest {
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
}

model DescribeExpressConnectRouterInterRegionTransitModeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  interRegionTransitModeList?: [ 
    {
      mode?: string(name='Mode', example='ECMP'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='InterRegionTransitModeList'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DescribeExpressConnectRouterInterRegionTransitModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterInterRegionTransitModeResponseBody(name='body'),
}

async function describeExpressConnectRouterInterRegionTransitModeWithOptions(request: DescribeExpressConnectRouterInterRegionTransitModeRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterInterRegionTransitModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterInterRegionTransitMode',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterInterRegionTransitMode(request: DescribeExpressConnectRouterInterRegionTransitModeRequest): DescribeExpressConnectRouterInterRegionTransitModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterInterRegionTransitModeWithOptions(request, runtime);
}

model DescribeExpressConnectRouterRegionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
}

model DescribeExpressConnectRouterRegionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  regionIdList?: [ string ](name='RegionIdList'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DescribeExpressConnectRouterRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterRegionResponseBody(name='body'),
}

async function describeExpressConnectRouterRegionWithOptions(request: DescribeExpressConnectRouterRegionRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterRegionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterRegion',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterRegion(request: DescribeExpressConnectRouterRegionRequest): DescribeExpressConnectRouterRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterRegionWithOptions(request, runtime);
}

model DescribeExpressConnectRouterRouteEntriesRequest {
  asPath?: string(name='AsPath', example='[64993,64512]'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  community?: string(name='Community', example='9001:9263'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='172.20.47.0/24'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  nexthopInstanceId?: string(name='NexthopInstanceId', example='br-hp3u4u5f03tfuljis****'),
  queryRegionId?: string(name='QueryRegionId', example='cn-hangzhou'),
}

model DescribeExpressConnectRouterRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='6'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='gAAAAABkWwFTUMNCdWC0VMYOIylA56Hx6JUfCZlk5hQ5g_fnKmetN6303tqq5UJ2ouJzyT2fDOdzb-NqyEB5jcY8Z2euX7qHDA=='),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  routeEntriesList?: [ 
    {
      asPath?: string(name='AsPath', example='[64993,64512]'),
      community?: string(name='Community', example='9001:9263'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.0/16'),
      nexthopInstanceId?: string(name='NexthopInstanceId', example='br-hp3u4u5f03tfuljis****'),
      nexthopInstanceRegionId?: string(name='NexthopInstanceRegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='ACTIVE'),
    }
  ](name='RouteEntriesList'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeExpressConnectRouterRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectRouterRouteEntriesResponseBody(name='body'),
}

async function describeExpressConnectRouterRouteEntriesWithOptions(request: DescribeExpressConnectRouterRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeExpressConnectRouterRouteEntriesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.asPath)) {
    body['AsPath'] = request.asPath;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.community)) {
    body['Community'] = request.community;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    body['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.nexthopInstanceId)) {
    body['NexthopInstanceId'] = request.nexthopInstanceId;
  }
  if (!Util.isUnset(request.queryRegionId)) {
    body['QueryRegionId'] = request.queryRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExpressConnectRouterRouteEntries',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExpressConnectRouterRouteEntries(request: DescribeExpressConnectRouterRouteEntriesRequest): DescribeExpressConnectRouterRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpressConnectRouterRouteEntriesWithOptions(request, runtime);
}

model DescribeInstanceGrantedToExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  instanceId?: string(name='InstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  instanceOwnerId?: long(name='InstanceOwnerId', example='129845258050****'),
  instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
  instanceType?: string(name='InstanceType', example='VBR'),
  maxResults?: int32(name='MaxResults', example='6'),
  nextToken?: string(name='NextToken', example='gAAAAABkyGzFbZR2NnxnyVk0EiL7F3qMBtBim8Es0mugRT3qb8yEHAMaHGanzuaHUmiEq9QRmok0RgxJAINBOJZa5KPjopEu_Q=='),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2tsvbnfe****'),
  tagModels?: [ 
    {
      tagKey?: string(name='TagKey', example='key'),
      tagValue?: string(name='TagValue', example='value'),
    }
  ](name='TagModels'),
}

model DescribeInstanceGrantedToExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.Name'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of Name **** is illegal.'),
  ecrGrantedInstanceList?: [ 
    {
      ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
      gmtCreate?: string(name='GmtCreate', example='1669023139000'),
      gmtModified?: string(name='GmtModified', example='1669023139000'),
      grantId?: string(name='GrantId', example='gr-8gdelo13mi99g1****'),
      nodeId?: string(name='NodeId', example='vbr-j6cwxhgg0s5nuephp****'),
      nodeOwnerBid?: string(name='NodeOwnerBid', example='26842'),
      nodeOwnerUid?: long(name='NodeOwnerUid', example='129845258050****'),
      nodeRegionId?: string(name='NodeRegionId', example='cn-hangzhou'),
      nodeType?: string(name='NodeType', example='VBR'),
      status?: string(name='Status', example='Active'),
    }
  ](name='EcrGrantedInstanceList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='6'),
  message?: string(name='Message', example='OK'),
  nextToken?: string(name='NextToken', example='FFlMqGuJ10uN3l+FX/cBrGDNXUOUifNeOuAJlT4dc3vsWD6DsNSFAC2FtpeH5QOSG2WFdyRoun7gSLCm5o69YnAQ=='),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeInstanceGrantedToExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceGrantedToExpressConnectRouterResponseBody(name='body'),
}

async function describeInstanceGrantedToExpressConnectRouterWithOptions(request: DescribeInstanceGrantedToExpressConnectRouterRequest, runtime: Util.RuntimeOptions): DescribeInstanceGrantedToExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceOwnerId)) {
    body['InstanceOwnerId'] = request.instanceOwnerId;
  }
  if (!Util.isUnset(request.instanceRegionId)) {
    body['InstanceRegionId'] = request.instanceRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagModels)) {
    body['TagModels'] = request.tagModels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceGrantedToExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceGrantedToExpressConnectRouter(request: DescribeInstanceGrantedToExpressConnectRouterRequest): DescribeInstanceGrantedToExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceGrantedToExpressConnectRouterWithOptions(request, runtime);
}

model DetachExpressConnectRouterChildInstanceRequest {
  childInstanceId?: string(name='ChildInstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  childInstanceType?: string(name='ChildInstanceType', example='VBR'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
}

model DetachExpressConnectRouterChildInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DetachExpressConnectRouterChildInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachExpressConnectRouterChildInstanceResponseBody(name='body'),
}

async function detachExpressConnectRouterChildInstanceWithOptions(request: DetachExpressConnectRouterChildInstanceRequest, runtime: Util.RuntimeOptions): DetachExpressConnectRouterChildInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.childInstanceId)) {
    body['ChildInstanceId'] = request.childInstanceId;
  }
  if (!Util.isUnset(request.childInstanceType)) {
    body['ChildInstanceType'] = request.childInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetachExpressConnectRouterChildInstance',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachExpressConnectRouterChildInstance(request: DetachExpressConnectRouterChildInstanceRequest): DetachExpressConnectRouterChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachExpressConnectRouterChildInstanceWithOptions(request, runtime);
}

model DisableExpressConnectRouterRouteEntriesRequest {
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.153.32.16/28'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  nexthopInstanceId?: string(name='NexthopInstanceId', example='tr-hp3u4u5f03tfuljis****'),
}

model DisableExpressConnectRouterRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model DisableExpressConnectRouterRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableExpressConnectRouterRouteEntriesResponseBody(name='body'),
}

async function disableExpressConnectRouterRouteEntriesWithOptions(request: DisableExpressConnectRouterRouteEntriesRequest, runtime: Util.RuntimeOptions): DisableExpressConnectRouterRouteEntriesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    body['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.nexthopInstanceId)) {
    body['NexthopInstanceId'] = request.nexthopInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisableExpressConnectRouterRouteEntries',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableExpressConnectRouterRouteEntries(request: DisableExpressConnectRouterRouteEntriesRequest): DisableExpressConnectRouterRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableExpressConnectRouterRouteEntriesWithOptions(request, runtime);
}

model EnableExpressConnectRouterRouteEntriesRequest {
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.153.32.16/28'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  nexthopInstanceId?: string(name='NexthopInstanceId', example='tr-hp3u4u5f03tfuljis****'),
}

model EnableExpressConnectRouterRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model EnableExpressConnectRouterRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableExpressConnectRouterRouteEntriesResponseBody(name='body'),
}

async function enableExpressConnectRouterRouteEntriesWithOptions(request: EnableExpressConnectRouterRouteEntriesRequest, runtime: Util.RuntimeOptions): EnableExpressConnectRouterRouteEntriesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    body['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.nexthopInstanceId)) {
    body['NexthopInstanceId'] = request.nexthopInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableExpressConnectRouterRouteEntries',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableExpressConnectRouterRouteEntries(request: EnableExpressConnectRouterRouteEntriesRequest): EnableExpressConnectRouterRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableExpressConnectRouterRouteEntriesWithOptions(request, runtime);
}

model ForceDeleteExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
}

model ForceDeleteExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model ForceDeleteExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ForceDeleteExpressConnectRouterResponseBody(name='body'),
}

async function forceDeleteExpressConnectRouterWithOptions(request: ForceDeleteExpressConnectRouterRequest, runtime: Util.RuntimeOptions): ForceDeleteExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ForceDeleteExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forceDeleteExpressConnectRouter(request: ForceDeleteExpressConnectRouterRequest): ForceDeleteExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return forceDeleteExpressConnectRouterWithOptions(request, runtime);
}

model GrantInstanceToExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  ecrOwnerAliUid?: long(name='EcrOwnerAliUid', example='121012345612****'),
  instanceId?: string(name='InstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
  instanceType?: string(name='InstanceType', example='VBR'),
}

model GrantInstanceToExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model GrantInstanceToExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantInstanceToExpressConnectRouterResponseBody(name='body'),
}

async function grantInstanceToExpressConnectRouterWithOptions(request: GrantInstanceToExpressConnectRouterRequest, runtime: Util.RuntimeOptions): GrantInstanceToExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.ecrOwnerAliUid)) {
    body['EcrOwnerAliUid'] = request.ecrOwnerAliUid;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceRegionId)) {
    body['InstanceRegionId'] = request.instanceRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantInstanceToExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantInstanceToExpressConnectRouter(request: GrantInstanceToExpressConnectRouterRequest): GrantInstanceToExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantInstanceToExpressConnectRouterWithOptions(request, runtime);
}

model ListExpressConnectRouterSupportedRegionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  nodeType?: string(name='NodeType', example='VBR'),
}

model ListExpressConnectRouterSupportedRegionResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
  supportedRegionIdList?: [ string ](name='SupportedRegionIdList'),
}

model ListExpressConnectRouterSupportedRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExpressConnectRouterSupportedRegionResponseBody(name='body'),
}

async function listExpressConnectRouterSupportedRegionWithOptions(request: ListExpressConnectRouterSupportedRegionRequest, runtime: Util.RuntimeOptions): ListExpressConnectRouterSupportedRegionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nodeType)) {
    body['NodeType'] = request.nodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListExpressConnectRouterSupportedRegion',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExpressConnectRouterSupportedRegion(request: ListExpressConnectRouterSupportedRegionRequest): ListExpressConnectRouterSupportedRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExpressConnectRouterSupportedRegionWithOptions(request, runtime);
}

model ModifyExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  description?: string(name='Description', example='test'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
  name?: string(name='Name', example='test'),
}

model ModifyExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.Name'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of Name **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model ModifyExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectRouterResponseBody(name='body'),
}

async function modifyExpressConnectRouterWithOptions(request: ModifyExpressConnectRouterRequest, runtime: Util.RuntimeOptions): ModifyExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyExpressConnectRouter(request: ModifyExpressConnectRouterRequest): ModifyExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyExpressConnectRouterWithOptions(request, runtime);
}

model ModifyExpressConnectRouterAssociationAllowedPrefixRequest {
  allowedPrefixes?: [ string ](name='AllowedPrefixes'),
  associationId?: string(name='AssociationId', example='ecr-assoc-9p2qxx5phpca2m****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyExpressConnectRouterAssociationAllowedPrefixResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='05130E79-588D-5C40-A718-C4863A59****'),
  success?: boolean(name='Success', example='True'),
}

model ModifyExpressConnectRouterAssociationAllowedPrefixResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectRouterAssociationAllowedPrefixResponseBody(name='body'),
}

async function modifyExpressConnectRouterAssociationAllowedPrefixWithOptions(request: ModifyExpressConnectRouterAssociationAllowedPrefixRequest, runtime: Util.RuntimeOptions): ModifyExpressConnectRouterAssociationAllowedPrefixResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowedPrefixes)) {
    body['AllowedPrefixes'] = request.allowedPrefixes;
  }
  if (!Util.isUnset(request.associationId)) {
    body['AssociationId'] = request.associationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    body['OwnerAccount'] = request.ownerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyExpressConnectRouterAssociationAllowedPrefix',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyExpressConnectRouterAssociationAllowedPrefix(request: ModifyExpressConnectRouterAssociationAllowedPrefixRequest): ModifyExpressConnectRouterAssociationAllowedPrefixResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyExpressConnectRouterAssociationAllowedPrefixWithOptions(request, runtime);
}

model ModifyExpressConnectRouterInterRegionTransitModeRequest {
  clientToken?: string(name='ClientToken', example='FF9nMec/RZ6H9oqFn1pvyir/SLRlxCCyHJonbGzqL01hiM6Jb3wJowdHvjCfog7ww1b9rSHMRFJnrUBfVba68TJg=='),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  transitModeList?: [ 
    {
      mode?: string(name='Mode', example='ECMP'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='TransitModeList'),
}

model ModifyExpressConnectRouterInterRegionTransitModeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model ModifyExpressConnectRouterInterRegionTransitModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectRouterInterRegionTransitModeResponseBody(name='body'),
}

async function modifyExpressConnectRouterInterRegionTransitModeWithOptions(request: ModifyExpressConnectRouterInterRegionTransitModeRequest, runtime: Util.RuntimeOptions): ModifyExpressConnectRouterInterRegionTransitModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.transitModeList)) {
    body['TransitModeList'] = request.transitModeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyExpressConnectRouterInterRegionTransitMode',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyExpressConnectRouterInterRegionTransitMode(request: ModifyExpressConnectRouterInterRegionTransitModeRequest): ModifyExpressConnectRouterInterRegionTransitModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyExpressConnectRouterInterRegionTransitModeWithOptions(request, runtime);
}

model RevokeInstanceFromExpressConnectRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='true'),
  ecrId?: string(name='EcrId', example='ecr-mezk2idmsd0vx2****'),
  ecrOwnerAliUid?: long(name='EcrOwnerAliUid', example='121012345612****'),
  instanceId?: string(name='InstanceId', example='vbr-j6cwxhgg0s5nuephp****'),
  instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
  instanceType?: string(name='InstanceType', example='VBR'),
}

model RevokeInstanceFromExpressConnectRouterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='true'),
}

model RevokeInstanceFromExpressConnectRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeInstanceFromExpressConnectRouterResponseBody(name='body'),
}

async function revokeInstanceFromExpressConnectRouterWithOptions(request: RevokeInstanceFromExpressConnectRouterRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromExpressConnectRouterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  if (!Util.isUnset(request.ecrOwnerAliUid)) {
    body['EcrOwnerAliUid'] = request.ecrOwnerAliUid;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceRegionId)) {
    body['InstanceRegionId'] = request.instanceRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromExpressConnectRouter',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromExpressConnectRouter(request: RevokeInstanceFromExpressConnectRouterRequest): RevokeInstanceFromExpressConnectRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromExpressConnectRouterWithOptions(request, runtime);
}

model SynchronizeExpressConnectRouterInterRegionBandwidthRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****'),
  dryRun?: boolean(name='DryRun', example='false'),
  ecrId?: string(name='EcrId', example='ecr-fu8rszhgv7623c****'),
}

model SynchronizeExpressConnectRouterInterRegionBandwidthResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='Authentication is failed for ****'),
  code?: string(name='Code', example='200'),
  dynamicCode?: string(name='DynamicCode', example='IllegalParamFormat.EcrId'),
  dynamicMessage?: string(name='DynamicMessage', example='The param format of EcrId **** is illegal.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='6FABF516-FED3-5697-BDA2-B18C5D9A****'),
  success?: boolean(name='Success', example='True'),
}

model SynchronizeExpressConnectRouterInterRegionBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SynchronizeExpressConnectRouterInterRegionBandwidthResponseBody(name='body'),
}

async function synchronizeExpressConnectRouterInterRegionBandwidthWithOptions(request: SynchronizeExpressConnectRouterInterRegionBandwidthRequest, runtime: Util.RuntimeOptions): SynchronizeExpressConnectRouterInterRegionBandwidthResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ecrId)) {
    body['EcrId'] = request.ecrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SynchronizeExpressConnectRouterInterRegionBandwidth',
    version = '2023-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function synchronizeExpressConnectRouterInterRegionBandwidth(request: SynchronizeExpressConnectRouterInterRegionBandwidthRequest): SynchronizeExpressConnectRouterInterRegionBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return synchronizeExpressConnectRouterInterRegionBandwidthWithOptions(request, runtime);
}

