/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Airec';
  @version = '2020-11-26';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ExtraDataSource {
  dataSourceId?: string(name='DataSourceId', example='E01D574F-ABD0-4C55-A5E3-8D24FD8D42EA'),
  gmtCreate?: string(name='GmtCreate', example='2021-12-07T13:26:29.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-07T13:26:29.000Z'),
  meta?: {
    internal?: boolean(name='Internal', example='true'),
    metaType?: string(name='MetaType', example='ExtraDataSource'),
    projectName?: string(name='ProjectName', example='test_project'),
    tableName?: string(name='TableName', example='test_table'),
    type?: string(name='Type', example='ODPS'),
    updateFrequency?: long(name='UpdateFrequency', example='86400'),
  }(name='Meta'),
  status?: string(name='Status', example='Ready 待应用；Online 已应用；Failed失败'),
  type?: string(name='Type', example='UserCustomDataSource、ItemCustomDataSource、BehaviorCustomDataSource、SampleCustomDataSource'),
}

model FeatureTable {
  featureTableId?: string(name='FeatureTableId', example='30E70118-FC7C-4438-9287-583CE47266A9'),
  gmtCreate?: string(name='GmtCreate', example='2021-12-10T02:59:54.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-10T02:59:54.000Z'),
  meta?: {
    dataSourceId?: string(name='DataSourceId', example='907648f5-abae-44fd-a4c4-525cc25947e9'),
    featureList?: [ 
      {
        comment?: string(name='Comment', example='com11'),
        featureName?: string(name='FeatureName', example='fn11'),
        fieldName?: string(name='FieldName', example='fieldName11'),
        status?: string(name='Status', example='NotApplied 未应用 Applied 已应用'),
      }
    ](name='FeatureList'),
    internal?: boolean(name='Internal', example='true'),
    metaType?: string(name='MetaType', example='FeatureTable'),
    source?: string(name='Source', example='test_project.test_table'),
    updateFrequency?: long(name='UpdateFrequency', example='86400'),
  }(name='Meta'),
  status?: string(name='Status'),
  type?: string(name='Type', example='ItemFeatureTable 物品特征表 UserFeatureTable 用户特征表'),
}

model RankingModelTemplate {
  meta?: {
    authorized?: boolean(name='Authorized', example='true'),
    autoRun?: boolean(name='AutoRun', example='true'),
    autoRunTime?: long(name='AutoRunTime', example='1'),
    autoRunType?: string(name='AutoRunType', example='DAY'),
    canDeploy?: boolean(name='CanDeploy', example='true'),
    conf?: string(name='Conf', example='train_config {}'),
    deployStatus?: string(name='DeployStatus', example='NOT_DEPLOYED'),
    lastEditTime?: string(name='LastEditTime', example='2021-12-06T03:01:41.217Z'),
    name?: string(name='Name', example='模型A'),
    ossArn?: string(name='OssArn', example='acs:ram::111:role/aliyunodpspaidefaultrole'),
    ossBucket?: string(name='OssBucket', example='bucket-a'),
    ossEndpoint?: string(name='OssEndpoint', example='oss-cn-beijing.aliyuncs.com'),
    sampleId?: string(name='SampleId', example='1111'),
    sampleName?: string(name='SampleName', example='样本1'),
    sampleTimeWindow?: long(name='SampleTimeWindow', example='3'),
    sampleTimeWindowType?: string(name='SampleTimeWindowType', example='DAY'),
    type?: string(name='Type', example='MULTI_TOWER'),
  }(name='Meta'),
  status?: string(name='Status', example='TRAINING_SUCCESS'),
  templateId?: string(name='TemplateId', example='a-a-a'),
  versionNum?: long(name='VersionNum', example='3'),
}

model RankingModelVersion {
  name?: string(name='Name', example='模型A_t1638964800000'),
  runLog?: string(name='RunLog'),
  runResult?: {
    assessAuc?: string(name='AssessAuc', example='0.3'),
    assessGauc?: string(name='AssessGauc', example='0.3'),
    assessLoss?: string(name='AssessLoss', example='0.3'),
    trainAuc?: string(name='TrainAuc', example='0.3'),
    trainGauc?: string(name='TrainGauc', example='0.3'),
    trainLoss?: string(name='TrainLoss', example='0.3'),
  }(name='RunResult'),
  runTime?: string(name='RunTime', example='2021-12-08T20:00:00.0Z'),
  status?: string(name='Status', example='TRAINING'),
  templateId?: string(name='TemplateId', example='a-a-a'),
  templateName?: string(name='TemplateName', example='模型A'),
}

model RankingSystem {
  applyStatus?: string(name='ApplyStatus', example='NOT_APPLIED'),
  deployStatus?: string(name='DeployStatus', example='NOT_DEPLOYED'),
  meta?: {
    autoDeploy?: boolean(name='AutoDeploy', example='true'),
    autoDeployAuc?: string(name='AutoDeployAuc', example='0.3'),
    conf?: string(name='Conf'),
    failMsg?: string(name='FailMsg'),
    modelVersionName?: string(name='ModelVersionName', example='模型A_T1638964800000'),
    predictEngine?: {
      clusterId?: string(name='ClusterId', example='cn-shanghai'),
      resourceId?: string(name='ResourceId', example='eas-oljkkdrggxhx7eizjd'),
      version?: string(name='Version', example='1'),
    }(name='PredictEngine'),
    predictEngineType?: string(name='PredictEngineType', example='EAS'),
  }(name='Meta'),
  modelTemplateId?: string(name='ModelTemplateId', example='a-a-a'),
  name?: string(name='Name', example='servicea'),
  sceneIdList?: [ long ](name='SceneIdList'),
}

model RankingSystemHistory {
  meta?: {
    autoDeploy?: boolean(name='AutoDeploy', example='true'),
    autoDeployAuc?: string(name='AutoDeployAuc', example='0.3'),
    conf?: string(name='Conf'),
    modelTemplateName?: string(name='ModelTemplateName', example='排序模型A'),
    predictEngine?: {
      resourceId?: string(name='ResourceId', example='eas-oljkkdrggxhx7eizjd'),
      version?: string(name='Version', example='1'),
    }(name='PredictEngine'),
    predictEngineType?: string(name='PredictEngineType', example='EAS'),
    previousOperateId?: string(name='PreviousOperateId', example='aaaa'),
  }(name='Meta'),
  name?: string(name='Name', example='servicea'),
  operateId?: string(name='OperateId', example='8AC865AF-37D6-42ED-AA9A-B60D8ECDF640'),
  operateTime?: string(name='OperateTime', example='2021-12-06T03:01:41.217Z'),
  operateType?: string(name='OperateType', example='CONF_CHANGE'),
}

model Sample {
  gmtCreate?: string(name='GmtCreate', example='2021-12-07T12:28:52.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-07T12:28:52.000Z'),
  meta?: {
    autoUpdate?: boolean(name='AutoUpdate', example='true'),
    autoUpdateFrequency?: long(name='AutoUpdateFrequency', example='86400'),
    clonedId?: string(name='ClonedId', example='1638877561147'),
    config?: {
      bhvTableSourceIds?: [ string ](name='BhvTableSourceIds'),
      featureConfig?: {
        itemFeatures?: string(name='ItemFeatures', example='物品特征，支持多值，逗号分隔。'),
        userFeatures?: string(name='UserFeatures', example='用户特征，支持多值，逗号分隔。'),
      }(name='FeatureConfig'),
      labelLogic?: {
        bhvTimeWindow?: long(name='BhvTimeWindow', example='86400'),
        negativeBhvTypes?: string(name='NegativeBhvTypes', example='click,expose'),
        positiveBhvTypes?: string(name='PositiveBhvTypes', example='like'),
      }(name='LabelLogic'),
      weightLogicList?: [ 
        {
          bhv?: string(name='Bhv', example='click'),
          weight?: string(name='Weight', example='1.01'),
        }
      ](name='WeightLogicList'),
    }(name='Config'),
    extendParams?: {
      latestTaskStatus?: long(name='LatestTaskStatus', example='0 没有任务 1 正常 2 异常'),
      sampleCount?: long(name='SampleCount', example='0'),
    }(name='ExtendParams'),
    metaType?: string(name='MetaType', example='Sample'),
    name?: string(name='Name', example='12345'),
    storeConfig?: string(name='StoreConfig', example='projectName.tableName'),
    type?: string(name='Type', example='Cloned 复制的 System 系统的 Custom 自定义的'),
  }(name='Meta'),
  sampleId?: string(name='SampleId', example='1638880131873'),
  status?: string(name='Status', example='样本状态 Unready 未完成配置  Ready   配置完成  Generating 样本生成中  Success  样本生成成功  Failed 样本生成失败  Formatting 格式化中  Formatted 格式化完成  FormatFailed 格式化失败  Applied 已应用到模型中'),
}

model AttachDatasetRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  versionId: string(name='versionId', description='The ID of the version.

This parameter is required.', example='20181023214546', position='Path'),
}

model AttachDatasetResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', description='The time when the data source was created.', example='1544112000000'),
    gmtModified?: long(name='gmtModified', description='The time when the data source was last modified.', example='1544112000000'),
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-o400whm78004'),
    state?: string(name='state', description='The state for the dataset of the current version. Example: Importing. The value indicates that the dataset of the current version is being imported.', example='Importing'),
    versionId?: string(name='versionId', description='The version number of the dataset.', example='20181023214546'),
  }(name='result', description='The details about the dataset.'),
}

model AttachDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachDataset  AttachDatasetRequest
  * @return AttachDatasetResponse
 */
async function attachDataset(request: AttachDatasetRequest): AttachDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachDataset', 'POST', '/v2/openapi/instances/{instanceId}/dataSets/{versionId}/actions/current', 'json', false, 'json', request);
}

model AttachIndexVersionRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', example='123', position='Path'),
  versionId: string(name='versionId', description='This parameter is required.', example='v1', position='Path'),
}

model AttachIndexVersionResponseBody = {
  requestId?: string(name='requestId', example='E63A27A4-3411-4910-B7D5-12EEAC19389B'),
  result?: boolean(name='result', example='true'),
}

model AttachIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachIndexVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachIndexVersion  AttachIndexVersionRequest
  * @return AttachIndexVersionResponse
 */
async function attachIndexVersion(request: AttachIndexVersionRequest): AttachIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachIndexVersion', 'POST', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/index-versions/{versionId}/actions/attach', 'json', false, 'json', request);
}

model CheckRankingModelReachableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-7e22x6f75001', position='Path'),
  rankingModelId: string(name='rankingModelId', description='The ID of the ranking model.

This parameter is required.', example='rankingModelId', position='Path'),
}

model CheckRankingModelReachableResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', description='The returned result.', example='true'),
}

model CheckRankingModelReachableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckRankingModelReachableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckRankingModelReachable  CheckRankingModelReachableRequest
  * @return CheckRankingModelReachableResponse
 */
async function checkRankingModelReachable(request: CheckRankingModelReachableRequest): CheckRankingModelReachableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckRankingModelReachable', 'GET', '/v2/openapi/instances/{instanceId}/ranking-models/{rankingModelId}/actions/check-connectivity', 'json', false, 'json', request);
}

model CloneExperimentRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='1', position='Path'),
  experimentId: string(name='experimentId', description='The experiment ID.

This parameter is required.', example='123', position='Path'),
  dryRun?: boolean(name='dryRun', description='true: verifies experiment information. false (default): creates an experiment.', example='false', position='Query'),
}

model CloneExperimentResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', description='The algorithm category. Valid values: RECALL and RANK.', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', description='The default value of the algorithm.', example='400'),
            experimentValue?: string(name='experimentValue', description='The custom value of the algorithm.', example='swing;commoni2i;pcategory;scategory'),
            key?: string(name='key', description='The algorithm key.', example='I2I-truncedquantity'),
            name?: string(name='name', description='The algorithm name. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)'),
          }
        ](name='config', description='The child configuration items.'),
        defaultValue?: string(name='defaultValue', description='The default value of the algorithm configuration item.', example='i2i;u2x2i;new;hot;embedding;embedding'),
        experimentValue?: string(name='experimentValue', description='The custom value of the algorithm configuration item.', example='300'),
        hasConfig?: boolean(name='hasConfig', description='Indicates whether child configuration items exist. Valid values: true and false.', example='true'),
        key?: string(name='key', description='The algorithm key. Valid values: I2I: the I2I filtering algorithm. u2X2I: the U2X2I filtering algorithm. hot: the filtering algorithm for popular items. new: the filtering algorithm for new items. embedding: the vector filtering algorithm. mtorder: the priority of the filtering algorithm. rankservice: the ranking service.', example='I2I'),
        name?: string(name='name', description='The algorithm name. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)', example='name'),
        type?: string(name='type', description='The algorithm type. Valid values: SYSTEM and CUSTOM.', example='SYSTEM'),
      }
    ](name='algorithms', description='The algorithm configurations.'),
    base?: boolean(name='base', description='N/A', example='true'),
    buckets?: [ string ](name='buckets', description='The buckets.'),
    description?: string(name='description', description='The remarks.', example='xxx'),
    experimentId?: string(name='experimentId', description='The experiment ID.', example='12345'),
    name?: string(name='name', description='The experiment name.', example='xxx'),
    offlineTime?: string(name='offlineTime', description='The time when the experiment was unpublished.', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', description='The time when the experiment was published.', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', description='The experiment state.', example='Init'),
  }(name='result', description='The information about the experiment.'),
}

model CloneExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneExperiment  CloneExperimentRequest
  * @return CloneExperimentResponse
 */
async function cloneExperiment(request: CloneExperimentRequest): CloneExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneExperiment', 'POST', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}/actions/clone', 'json', false, 'json', request);
}

model CloneSampleRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  sampleId: string(name='sampleId', description='The sample ID.

This parameter is required.', example='abc', position='Path'),
}

model CloneSampleResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result', description='The returned result.'),
}

model CloneSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneSample  CloneSampleRequest
  * @return CloneSampleResponse
 */
async function cloneSample(request: CloneSampleRequest): CloneSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneSample', 'PUT', '/v2/openapi/instances/{instanceId}/samples/{sampleId}/actions/clone', 'json', false, 'json', request);
}

model ColdStartRankRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  features?: string(name='features', example='eg: k1:v1|k2:v2|k3:v1,v2,v3', position='Query'),
  imei?: string(name='imei', example='abfsc', position='Query'),
  items?: string(name='items', example='16240:video', position='Query'),
  sceneId?: string(name='sceneId', example='sceneId', position='Query'),
  userId?: string(name='userId', example='1', position='Query'),
}

model ColdStartRankResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      itemId?: string(name='itemId', example='3_Lwm4vy1'),
      itemType?: string(name='itemType', example='article'),
      traceInfo?: string(name='traceInfo', example='1007.62364.131773.100200300000000:d709586e-643c-4fcb-a35c-6c5e8cd6756e:Grr8KG::0:sy_list_gul:::1:content___3_Lwm4vy:article:i2i_common_common:9.385107352002104E-4:0.25131988525390625:null:1677207034118::context__recall_index=253,context__hour=10,context__trigger_num=2::002bc90e-0d30-4682-9de3-1f4bad73702e:i2i_scategory_common,hot_common,i2i_common_common,i2i_swing_common:::::'),
    }
  ](name='result'),
}

model ColdStartRankResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ColdStartRankResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ColdStartRank  ColdStartRankRequest
  * @return ColdStartRankResponse
 */
async function coldStartRank(request: ColdStartRankRequest): ColdStartRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ColdStartRank', 'GET', '/v2/openapi/instances/cold-start/{instanceId}/actions/rank', 'json', false, 'json', request);
}

model CreateCustomAnalysisTaskRequest {
  instanceId: string(name='instanceId', description='16B78383-2803-4964-9605-37B30C073B0E

This parameter is required.', example='airec-test', position='Path'),
  type: string(name='type', description='This parameter is required.', example='ITEM_CUSTOM', position='Query'),
}

model CreateCustomAnalysisTaskResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: map[string]any(name='result', example='123'),
}

model CreateCustomAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomAnalysisTask  CreateCustomAnalysisTaskRequest
  * @return CreateCustomAnalysisTaskResponse
 */
async function createCustomAnalysisTask(request: CreateCustomAnalysisTaskRequest): CreateCustomAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCustomAnalysisTask', 'POST', '/v2/openapi/instances/{instanceId}/dashboard/custom-analysis-tasks', 'json', false, 'json', request);
}

model CreateCustomSampleRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-xxx', position='Path'),
}

model CreateCustomSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model CreateCustomSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomSample  CreateCustomSampleRequest
  * @return CreateCustomSampleResponse
 */
async function createCustomSample(request: CreateCustomSampleRequest): CreateCustomSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCustomSample', 'POST', '/v2/openapi/instances/{instanceId}/samples', 'json', false, 'json', request);
}

model CreateDataDiagnoseTaskRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
}

model CreateDataDiagnoseTaskResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: boolean(name='result', example='true'),
}

model CreateDataDiagnoseTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataDiagnoseTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataDiagnoseTask  CreateDataDiagnoseTaskRequest
  * @return CreateDataDiagnoseTaskResponse
 */
async function createDataDiagnoseTask(request: CreateDataDiagnoseTaskRequest): CreateDataDiagnoseTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataDiagnoseTask', 'POST', '/v2/openapi/instances/{instanceId}/data-diagnose-task', 'json', false, 'json', request);
}

model CreateExtraDataSourceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
}

model CreateExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result', description='The returned result.'),
}

model CreateExtraDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExtraDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExtraDataSource  CreateExtraDataSourceRequest
  * @return CreateExtraDataSourceResponse
 */
async function createExtraDataSource(request: CreateExtraDataSourceRequest): CreateExtraDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExtraDataSource', 'POST', '/v2/openapi/instances/{instanceId}/extra-data-sources', 'json', false, 'json', request);
}

model CreateFilteringAlgorithmRequest {
  instanceId: string(name='instanceId', description='The state of the filtering table.

This parameter is required.', example='xxx', position='Path'),
  dryRun?: string(name='dryRun', description='xxx', example='true', position='Query'),
}

model CreateFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', description='The type of the data source.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    algorithmId?: string(name='algorithmId', description='The additional information.', example='abc'),
    gmtCreate?: string(name='gmtCreate', description='The time when the filtering table was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The fluctuation threshold for the data entries in the source table.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', description='The name of the filtering table.', example='algorithmTest'),
      category?: string(name='category', description='The response body.', example='1_2'),
      cron?: string(name='cron', description='The fluctuation threshold for the size of the index.', example='0 0/12 0 * *'),
      cronEnabled?: boolean(name='cronEnabled', description='The time when the filtering table was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed UTC.', example='true'),
      description?: string(name='description', description='The description of the filtering table.', example='xx'),
      extInfo?: map[string]any(name='extInfo', description='The name of the MaxCompute project.', example='{}'),
      gmtCreate?: string(name='gmtCreate', description='The information about the filtering table.', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', description='Indicates whether the scheduled task is enabled.', example='2018-12-07T02:24:26.000Z'),
      projectName?: string(name='projectName', description='The ID of the filtering table.', example='testname'),
      status?: string(name='status', description='The CRON expression of the scheduled task. Example: 0 0/12 0 \\* \\*, which indicates that the task is scheduled at 00:00 and 12:00 every day.', example='Running'),
      tableName?: string(name='tableName', description='The metadata of the filtering table.', example='table_test'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='The time when the filtering table was modified.', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='The fluctuation threshold for the size of the source table.', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='The category of the filtering table.', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='The fluctuation threshold for the loss of the index data.', example='1'),
      }(name='threshold', description='0 0/12 0 * *"'),
      type?: string(name='type', description='The ID of the request.', example='ODPS'),
    }(name='meta', description='The threshold.'),
    status?: string(name='status', description='The name of the filtering algorithm.', example='Running'),
  }(name='result', description='Specifies whether to perform a dry run. Valid values: true: performs a dry run. false: performs a dry run and sends the request.'),
}

model CreateFilteringAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFilteringAlgorithmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFilteringAlgorithm  CreateFilteringAlgorithmRequest
  * @return CreateFilteringAlgorithmResponse
 */
async function createFilteringAlgorithm(request: CreateFilteringAlgorithmRequest): CreateFilteringAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFilteringAlgorithm', 'POST', '/v2/openapi/instances/{instanceId}/filtering-algorithms', 'json', false, 'json', request);
}

model CreateFlowControlTaskRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-2r42wuy7v002', position='Path'),
  dryRun?: boolean(name='dryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true', position='Query'),
}

model CreateFlowControlTaskResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='EDF43C1F-99E4-431F-A7C0-8B260A5A792E'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the task was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the task was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2018-12-06T11:17:49.000Z'),
    status?: string(name='status', description='The task state.', example='DRAFT'),
    taskId?: string(name='taskId', description='The task ID.', example='1667297014460'),
  }(name='result', description='The returned result.'),
}

model CreateFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFlowControlTask  CreateFlowControlTaskRequest
  * @return CreateFlowControlTaskResponse
 */
async function createFlowControlTask(request: CreateFlowControlTaskRequest): CreateFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFlowControlTask', 'POST', '/v2/openapi/instances/{instanceId}/flowControlTasks', 'json', false, 'json', request);
}

model CreateInstanceRequest {
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-xxxxx'),
  }(name='result', description='The returned results.'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/v2/openapi/instances', 'json', false, 'json', request);
}

model CreateRankingModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  dryRun?: boolean(name='dryRun', example='true', position='Query'),
}

model CreateRankingModelResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: map[string]any(name='meta', example='map'),
    rankingModelId?: string(name='rankingModelId', example='ranktest'),
  }(name='result'),
}

model CreateRankingModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRankingModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRankingModel  CreateRankingModelRequest
  * @return CreateRankingModelResponse
 */
async function createRankingModel(request: CreateRankingModelRequest): CreateRankingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRankingModel', 'POST', '/v2/openapi/instances/{instanceId}/ranking-models', 'json', false, 'json', request);
}

model CreateRankingModelTemplateRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-****', position='Path'),
}

model CreateRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: RankingModelTemplate(name='result'),
}

model CreateRankingModelTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRankingModelTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRankingModelTemplate  CreateRankingModelTemplateRequest
  * @return CreateRankingModelTemplateResponse
 */
async function createRankingModelTemplate(request: CreateRankingModelTemplateRequest): CreateRankingModelTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRankingModelTemplate', 'POST', '/v2/openapi/instances/{instanceId}/ranking-model-templates', 'json', false, 'json', request);
}

model CreateRankingSystemRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
}

model CreateRankingSystemResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: RankingSystem(name='result'),
}

model CreateRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRankingSystem  CreateRankingSystemRequest
  * @return CreateRankingSystemResponse
 */
async function createRankingSystem(request: CreateRankingSystemRequest): CreateRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRankingSystem', 'POST', '/v2/openapi/instances/{instanceId}/ranking-systems', 'json', false, 'json', request);
}

model CreateRuleRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model CreateRuleResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the rule was created.', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the rule was last modified.', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', description='The rule ID.', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    status?: string(name='status', description='Indicates whether the rule is enabled. Valid values: true and false.', example='true'),
  }(name='result', description='The returned results.'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRule  CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRule', 'POST', '/v2/openapi/instances/{instanceId}/rules', 'json', false, 'json', request);
}

model CreateSampleFormatConfigRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', position='Path'),
  body?: map[string]any(name='body', position='Body'),
}

model CreateSampleFormatConfigResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result', example='result'),
}

model CreateSampleFormatConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSampleFormatConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSampleFormatConfig  CreateSampleFormatConfigRequest
  * @return CreateSampleFormatConfigResponse
 */
async function createSampleFormatConfig(request: CreateSampleFormatConfigRequest): CreateSampleFormatConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSampleFormatConfig', 'POST', '/v2/openapi/instances/{instanceId}/samples/{sampleId}/format-configs', 'json', false, 'json', request);
}

model CreateSceneRequest {
  instanceId: string(name='instanceId', description='POST openapi/instances/{instanceId}/scenes?dryRun=false

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  dryRun?: boolean(name='dryRun', example='false', position='Query'),
}

model CreateSceneResponseBody = {
  code?: string(name='code', description='The state of the scene. Valid values: DRAFT, PUBLISHING, and FROZEN', example='InternalServerError'),
  message?: string(name='message', description='The error code.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The time when the scene was created.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the scene was last modified.', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', description='The returned results.', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', description='Specifies whether to perform a dry run. Valid values: true: performs a dry run. false: performs a dry run and sends the request. Default value: false', example='test'),
    status?: string(name='status', description='The ID of the scene.', example='DRAFT'),
  }(name='result', description='The ID of the instance.'),
}

model CreateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSceneResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the Artificial Intelligence Recommendation (AIRec) console to manage scenes.
  * @param request  the request parameters of CreateScene  CreateSceneRequest
  * @return CreateSceneResponse
 */
async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScene', 'POST', '/v2/openapi/instances/{instanceId}/scenes', 'json', false, 'json', request);
}

model CreateUmengTokenRequest {
  code: string(name='code', description='This parameter is required.', position='Query'),
}

model CreateUmengTokenResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model CreateUmengTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUmengTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUmengToken  CreateUmengTokenRequest
  * @return CreateUmengTokenResponse
 */
async function createUmengToken(request: CreateUmengTokenRequest): CreateUmengTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUmengToken', 'POST', '/v2/openapi/umeng/token', 'json', false, 'json', request);
}

model DecribeRankingModelRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  rankingModelId: string(name='rankingModelId', description='The ID of the ranking model.

This parameter is required.', example='ranktest', position='Path'),
}

model DecribeRankingModelResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='xxx'),
  requestId?: string(name='requestId', description='The request ID.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the ranking model was created.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the ranking model was last modified.', example='2020-04-27T06:38:28.000Z'),
    meta?: map[string]any(name='meta', description='The metadata.'),
    rankingModelId?: string(name='rankingModelId', description='The ID of the ranking model.', example='ranktest'),
  }(name='result', description='The returned results.'),
}

model DecribeRankingModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DecribeRankingModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DecribeRankingModel  DecribeRankingModelRequest
  * @return DecribeRankingModelResponse
 */
async function decribeRankingModel(request: DecribeRankingModelRequest): DecribeRankingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DecribeRankingModel', 'GET', '/v2/openapi/instances/{instanceId}/ranking-models/{rankingModelId}', 'json', false, 'json', request);
}

model DeleteDataSetRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  versionId: string(name='versionId', description='The version number of the dataset.

This parameter is required.', example='20181023214546', position='Path'),
}

model DeleteDataSetResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', description='The time when the data source was created.', example='1544112000000'),
    gmtModified?: long(name='gmtModified', description='The time when the data source was last modified.', example='1544112000000'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-o400whm78004'),
    state?: string(name='state', description='The state for the dataset of the current version. Example: Importing. The value indicates that the dataset of the current version is being imported.', example='Importing'),
    versionId?: string(name='versionId', description='The version number of the dataset.', example='20181023214546'),
  }(name='result', description='The details about the dataset.'),
}

model DeleteDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSet  DeleteDataSetRequest
  * @return DeleteDataSetResponse
 */
async function deleteDataSet(request: DeleteDataSetRequest): DeleteDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSet', 'DELETE', '/v2/openapi/instances/{instanceId}/dataSets/{versionId}', 'json', false, 'json', request);
}

model DeleteExperimentRequest {
  instanceId: string(name='instanceId', description='The response body.

This parameter is required.', example='Indicates whether the test was deleted. Valid values: true or false.', position='Path'),
  sceneId: string(name='sceneId', description='The ID of the request.

This parameter is required.', position='Path'),
  experimentId: string(name='experimentId', description='This parameter is required.', example='12345', position='Path'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model DeleteExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperiment  DeleteExperimentRequest
  * @return DeleteExperimentResponse
 */
async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperiment', 'DELETE', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}', 'json', false, 'json', request);
}

model DeleteExtraDataSourceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  type: string(name='type', description='This parameter is required.', example='数据源类型 UserCustomDataSource ItemCustomDataSource BehaviorCustomDataSource SampleCustomDataSource', position='Path'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='123', position='Path'),
}

model DeleteExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', description='请求ID。', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result', description='返回参数。'),
}

model DeleteExtraDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExtraDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExtraDataSource  DeleteExtraDataSourceRequest
  * @return DeleteExtraDataSourceResponse
 */
async function deleteExtraDataSource(request: DeleteExtraDataSourceRequest): DeleteExtraDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExtraDataSource', 'DELETE', '/v2/openapi/instances/{instanceId}/extra-data-sources/{type}/{dataSourceId}', 'json', false, 'json', request);
}

model DeleteFilteringAlgorithmRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='The ID of the specified filtering table.

This parameter is required.', example='1', position='Path'),
}

model DeleteFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='936BE457-5D14-4DBD-85AE-176F7BA8D96D'),
  result?: {
    algorithmId?: string(name='algorithmId', description='The ID of the specified filtering table.', example='123'),
    gmtCreate?: string(name='gmtCreate', description='The time when the filtering table was created.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the filtering table was modified.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', description='The name of the filtering algorithm.', example='user'),
      category?: string(name='category', description='The category of the filtering algorithm.', example='i2i'),
      clusterId?: string(name='clusterId', description='The ID of the cluster.', example='1001'),
      cron?: string(name='cron', description='The CRON expression of the scheduled task. Example: 0 0/12 0 \\* \\*. The value indicates that the task is scheduled at 00:00 and 12:00 every day.', example='0 0/12 0 * *'),
      cronEnabled?: boolean(name='cronEnabled', description='N/A', example='true'),
      description?: string(name='description', description='The description of the filtering table.', example='Training task'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', description='The delimiter that is used to separate items.', example=';'),
        kvSeparator?: string(name='kvSeparator', description='The delimiter that is used to separate keys and values.', example=';'),
      }(name='extInfo', description='The additional information.'),
      metaType?: string(name='metaType', description='The type of the metadata.', example='odps'),
      projectName?: string(name='projectName', description='The name of the project.', example='name01'),
      tableName?: string(name='tableName', description='The name of the table.', example='table01'),
      taskId?: string(name='taskId', description='The ID of the task.', example='test01'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='The fluctuation threshold for the loss of the index data.', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='The fluctuation threshold for the size of the index.', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='The fluctuation threshold for the data entries in the source table.', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='The fluctuation threshold for the size of the source table.', example='1'),
      }(name='threshold', description='The threshold.'),
      type?: string(name='type', description='The type of the data source. Only MaxCompute is supported.', example='ODPS'),
    }(name='meta', description='The metadata of the filtering table.'),
    status?: string(name='status', description='The state of the filtering table. Valid values: Draft, Running, Offline, and Deleted.', example='Running'),
  }(name='result', description='The returned result.'),
}

model DeleteFilteringAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFilteringAlgorithmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFilteringAlgorithm  DeleteFilteringAlgorithmRequest
  * @return DeleteFilteringAlgorithmResponse
 */
async function deleteFilteringAlgorithm(request: DeleteFilteringAlgorithmRequest): DeleteFilteringAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFilteringAlgorithm', 'DELETE', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}', 'json', false, 'json', request);
}

model DeleteFlowControlTaskRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-7e22x6f75001', position='Path'),
  taskId?: string(name='taskId', description='The ID of the task.', example='1661506482', position='Path'),
}

model DeleteFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='6E427B10-30FC-1873-922F-FC176D3398D4'),
  result?: boolean(name='result', description='Indicates whether the task was deleted. Valid values: true and false.', example='true'),
}

model DeleteFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFlowControlTask  DeleteFlowControlTaskRequest
  * @return DeleteFlowControlTaskResponse
 */
async function deleteFlowControlTask(request: DeleteFlowControlTaskRequest): DeleteFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFlowControlTask', 'DELETE', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}', 'json', false, 'json', request);
}

model DeleteRankingModelRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  rankingModelId: string(name='rankingModelId', description='This parameter is required.', example='xxx', position='Path'),
}

model DeleteRankingModelResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='D486768B-8BF8-4D80-B491-43DC3D0AF8AB'),
  result?: {
    meta?: map[string]any(name='meta', description='meta'),
    rankingModelId?: string(name='rankingModelId'),
  }(name='result'),
}

model DeleteRankingModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRankingModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRankingModel  DeleteRankingModelRequest
  * @return DeleteRankingModelResponse
 */
async function deleteRankingModel(request: DeleteRankingModelRequest): DeleteRankingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRankingModel', 'DELETE', '/v2/openapi/instances/{instanceId}/ranking-models/{rankingModelId}', 'json', false, 'json', request);
}

model DeleteRankingModelTemplateRequest {
  instanceId?: string(name='instanceId', example='airec-test', position='Path'),
  templateId?: string(name='templateId', example='a-a-a', position='Path'),
}

model DeleteRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingModelTemplate(name='result'),
}

model DeleteRankingModelTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRankingModelTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRankingModelTemplate  DeleteRankingModelTemplateRequest
  * @return DeleteRankingModelTemplateResponse
 */
async function deleteRankingModelTemplate(request: DeleteRankingModelTemplateRequest): DeleteRankingModelTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRankingModelTemplate', 'DELETE', '/v2/openapi/instances/{instanceId}/ranking-model-templates/{templateId}', 'json', false, 'json', request);
}

model DeleteRankingModelVersionRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  versionId: string(name='versionId', description='This parameter is required.', example='1', position='Path'),
}

model DeleteRankingModelVersionResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
}

model DeleteRankingModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRankingModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRankingModelVersion  DeleteRankingModelVersionRequest
  * @return DeleteRankingModelVersionResponse
 */
async function deleteRankingModelVersion(request: DeleteRankingModelVersionRequest): DeleteRankingModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRankingModelVersion', 'DELETE', '/v2/openapi/instances/{instanceId}/ranking-model-versions/{versionId}', 'json', false, 'json', request);
}

model DeleteRankingSystemRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  name: string(name='name', description='This parameter is required.', example='test', position='Path'),
}

model DeleteRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingSystem(name='result'),
}

model DeleteRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRankingSystem  DeleteRankingSystemRequest
  * @return DeleteRankingSystemResponse
 */
async function deleteRankingSystem(request: DeleteRankingSystemRequest): DeleteRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRankingSystem', 'DELETE', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}', 'json', false, 'json', request);
}

model DeleteSampleRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', example='Sample1', position='Path'),
}

model DeleteSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model DeleteSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSample  DeleteSampleRequest
  * @return DeleteSampleResponse
 */
async function deleteSample(request: DeleteSampleRequest): DeleteSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSample', 'DELETE', '/v2/openapi/instances/{instanceId}/samples/{sampleId}', 'json', false, 'json', request);
}

model DeleteSceneRequest {
  instanceId: string(name='instanceId', description='DELETE openapi/instances/{instanceId}/scenes/{sceneId}

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='testid', position='Path'),
}

model DeleteSceneResponseBody = {
  code?: string(name='code', description='The returned result.', example='InternalServerError'),
  message?: string(name='message', description='The error code.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The scene ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    sceneId?: string(name='sceneId', description='The scene ID.', example='test'),
  }(name='result', description='The instance ID.'),
}

model DeleteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the Artificial Intelligence Recommendation (AIRec) console to manage scenes.
  * @param request  the request parameters of DeleteScene  DeleteSceneRequest
  * @return DeleteSceneResponse
 */
async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScene', 'DELETE', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}', 'json', false, 'json', request);
}

model DeployRankingSystemRequest {
  instanceId?: string(name='instanceId', description='The name of the ranking service.', example='airec-test', position='Path'),
  name?: string(name='name', description='The configuration that you want to modify.', example='test', position='Path'),
  body?: map[string]any(name='body', description='The schema of the response parameters.', example='"meta": {
    "autoDeploy": true,
    "autoDeployAuc": "0.9",
    "conf":"",
    "predictEngineType": "EAS",
    "predictEngine":{
    	"resourceId": "eas-oljkkdrggxhx7eizjd"
    }
  }', position='Body'),
}

model DeployRankingSystemResponseBody = {
  requestId?: string(name='requestId', description='The returned result.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: map[string]any(name='result', description='__null__', example='xxx'),
}

model DeployRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeployRankingSystem  DeployRankingSystemRequest
  * @return DeployRankingSystemResponse
 */
async function deployRankingSystem(request: DeployRankingSystemRequest): DeployRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployRankingSystem', 'POST', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}/actions/deploy', 'json', false, 'json', request);
}

model DescribeBaseExperimentRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
}

model DescribeBaseExperimentResponseBody = {
  requestId?: string(name='requestId', example='A74E3FB7-406C-5CBB-833E-E49308B5DC05'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='400'),
            key?: string(name='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='true'),
        experimentValue?: string(name='experimentValue', example='400'),
        hasConfig?: boolean(name='hasConfig', example='false'),
        key?: string(name='key', example='I2I'),
        name?: string(name='name', example='xxx'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='xxx'),
    experimentId?: string(name='experimentId', example='xxx'),
    name?: string(name='name'),
    offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
    status?: string(name='status', example='Init'),
  }(name='result'),
}

model DescribeBaseExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBaseExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBaseExperiment  DescribeBaseExperimentRequest
  * @return DescribeBaseExperimentResponse
 */
async function describeBaseExperiment(request: DescribeBaseExperimentRequest): DescribeBaseExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBaseExperiment', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/base-experiment', 'json', false, 'json', request);
}

model DescribeCustomAnalysisTaskRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  taskId: string(name='taskId', description='This parameter is required.', example='123', position='Path'),
  type: string(name='type', description='This parameter is required.', example='ITEM_CUSTOM', position='Query'),
}

model DescribeCustomAnalysisTaskResponseBody = {
  code?: string(name='code', example='xxx'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: map[string]any(name='result', example='xxx'),
}

model DescribeCustomAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustomAnalysisTask  DescribeCustomAnalysisTaskRequest
  * @return DescribeCustomAnalysisTaskResponse
 */
async function describeCustomAnalysisTask(request: DescribeCustomAnalysisTaskRequest): DescribeCustomAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeCustomAnalysisTask', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/custom-analysis-tasks/{taskId}', 'json', false, 'json', request);
}

model DescribeDataSetMessageRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  versionId: string(name='versionId', description='This parameter is required.', position='Path'),
}

model DescribeDataSetMessageResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      errorLevel?: string(name='errorLevel', example='warn'),
      errorType?: string(name='errorType'),
      message?: string(name='message'),
      timestamp?: string(name='timestamp', example='20181211 17:27:44'),
    }
  ](name='result'),
}

model DescribeDataSetMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataSetMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataSetMessage  DescribeDataSetMessageRequest
  * @return DescribeDataSetMessageResponse
 */
async function describeDataSetMessage(request: DescribeDataSetMessageRequest): DescribeDataSetMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDataSetMessage', 'GET', '/v2/openapi/instances/{instanceId}/dataSets/{versionId}/messages', 'json', false, 'json', request);
}

model DescribeDefaultAlgorithmsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-xxxxxx', position='Path'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='test', position='Path'),
}

model DescribeDefaultAlgorithmsResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='F60021C4-57AF-5F46-9B3E-FCEF1C7A1459'),
  result?: [ 
    {
      category?: string(name='category', description='The algorithm category. Valid values: RECALL and RANK.', example='RECALL'),
      config?: [ 
        {
          defaultValue?: string(name='defaultValue', description='The default value of the algorithm configuration item.', example='swing;commoni2i;pcategory;scategory'),
          experimentValue?: string(name='experimentValue', description='The custom value of the algorithm configuration item.', example='300'),
          key?: string(name='key', description='The key of the algorithm configuration item.', example='I2I-truncedquantity'),
          name?: string(name='name', description='The name of the algorithm configuration item. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)'),
        }
      ](name='config', description='The information about the child configuration item.'),
      defaultValue?: string(name='defaultValue', description='The default value of the algorithm. If you set key to i2i, hot, or new, the value of this parameter is true or false. If you set key to mtorder, the value of this parameter is a list of filtering algorithms ranked by priority.', example='true'),
      experimentValue?: string(name='experimentValue', description='The custom value of the algorithm.', example='300'),
      hasConfig?: boolean(name='hasConfig', description='Indicates whether child configuration items exist. Valid values: true and false.', example='true'),
      key?: string(name='key', description='The algorithm key. Valid values: i2i: the I2I filtering algorithm. u2x2i: the U2X2I filtering algorithm. hot: the filtering algorithm for popular items. new: the filtering algorithm for new items. embedding: the vector filtering algorithm. mtorder: the priority of the filtering algorithm. rankservice: the ranking service.', example='I2I'),
      name?: string(name='name', description='The algorithm name. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)', example='xxx'),
      type?: string(name='type', description='The algorithm type. Valid values: SYSTEM and CUSTOM.', example='SYSTEM'),
    }
  ](name='result', description='The returned result.'),
}

model DescribeDefaultAlgorithmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDefaultAlgorithmsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDefaultAlgorithms  DescribeDefaultAlgorithmsRequest
  * @return DescribeDefaultAlgorithmsResponse
 */
async function describeDefaultAlgorithms(request: DescribeDefaultAlgorithmsRequest): DescribeDefaultAlgorithmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDefaultAlgorithms', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/default-algorithms', 'json', false, 'json', request);
}

model DescribeExperimentRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='test', position='Path'),
  experimentId: string(name='experimentId', description='The experiment ID.

This parameter is required.', example='23245', position='Path'),
}

model DescribeExperimentResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', description='The category of the item.', example='2'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='400'),
            key?: string(name='key', description='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', description='None', example='true'),
        experimentValue?: string(name='experimentValue', description='None'),
        hasConfig?: boolean(name='hasConfig', description='None', example='false'),
        key?: string(name='key', description='The key.', example='I2I'),
        name?: string(name='name', description='The name of the experiment.', example='test'),
        type?: string(name='type', description='None', example='SYSTEM'),
      }
    ](name='algorithms', description='The parameters about the experiment.'),
    base?: boolean(name='base', description='None', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', description='The description of the experiment.', example='xxx'),
    experimentId?: string(name='experimentId', description='The experiment ID.', example='12345'),
    name?: string(name='name', description='The name of the experiment.', example='test'),
    offlineTime?: string(name='offlineTime', description='The time when the experiment was unpublished.', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', description='The time when the experiment was published.', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', description='The state of the experiment.', example='1'),
  }(name='result', description='The returned results.'),
}

model DescribeExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExperiment  DescribeExperimentRequest
  * @return DescribeExperimentResponse
 */
async function describeExperiment(request: DescribeExperimentRequest): DescribeExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExperiment', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}', 'json', false, 'json', request);
}

model DescribeExperimentEnvRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
}

model DescribeExperimentEnvResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    bucketCount?: int32(name='bucketCount', example='10'),
    divideType?: string(name='divideType', example='UID'),
  }(name='result'),
}

model DescribeExperimentEnvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExperimentEnvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExperimentEnv  DescribeExperimentEnvRequest
  * @return DescribeExperimentEnvResponse
 */
async function describeExperimentEnv(request: DescribeExperimentEnvRequest): DescribeExperimentEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExperimentEnv', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiment-env', 'json', false, 'json', request);
}

model DescribeExperimentEnvProgressRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
}

model DescribeExperimentEnvProgressResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    progress?: int32(name='progress'),
    status?: string(name='status'),
  }(name='result'),
}

model DescribeExperimentEnvProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExperimentEnvProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExperimentEnvProgress  DescribeExperimentEnvProgressRequest
  * @return DescribeExperimentEnvProgressResponse
 */
async function describeExperimentEnvProgress(request: DescribeExperimentEnvProgressRequest): DescribeExperimentEnvProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExperimentEnvProgress', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiment-progress', 'json', false, 'json', request);
}

model DescribeFilteringAlgorithmRequest {
  instanceId: string(name='instanceId', description='The name of the filtering algorithm.

This parameter is required.', example='The additional information.', position='Path'),
  algorithmId: string(name='algorithmId', description='The delimiter that is used to separate items.

This parameter is required.', example='abc', position='Path'),
}

model DescribeFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', description='The metadata of the filtering table.', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', description='The fluctuation threshold for the size of the source table.', example='abc'),
    gmtCreate?: string(name='gmtCreate', description='The category of the filtering table.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The name of the project.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', description='The time when the filtering table was created.', example='test'),
      category?: string(name='category', description='Indicates whether the scheduled task is enabled.', example='1_2'),
      clusterId?: string(name='clusterId', description='N/A', example='244'),
      cron?: string(name='cron', description='The information about the filtering table.', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled', description='The ID of the filtering table.', example='Y'),
      description?: string(name='description', description='The time when the filtering table was modified.', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', description='The description of the filtering table.', example=','),
        kvSeparator?: string(name='kvSeparator', description='The fluctuation threshold for the size of the index.', example=':'),
      }(name='extInfo', description='The ID of the task.'),
      metaType?: string(name='metaType', description='The information about the filtering table.', example='metaType'),
      projectName?: string(name='projectName', description='The status of the filtering table.', example='test'),
      tableName?: string(name='tableName', description='The ID of the specified filtering table.', example='test_table'),
      taskId?: string(name='taskId', description='The CRON expression of the scheduled task.', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='The ID of the specified instance.', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='Queries specific configuration information about a filtering table based on the ID of the filtering table.', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='The type of the data source.', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='The name of the filtering table.', example='1'),
      }(name='threshold', description='The ID of the filtering table.'),
      type?: string(name='type', description='The metadata of the filtering table.', example='ODPS'),
    }(name='meta', description='The time when the filtering table was modified.'),
    status?: string(name='status', description='N/A', example='The threshold for the loss of the index data.'),
  }(name='result', description='The ID of the request.'),
}

model DescribeFilteringAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFilteringAlgorithmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFilteringAlgorithm  DescribeFilteringAlgorithmRequest
  * @return DescribeFilteringAlgorithmResponse
 */
async function describeFilteringAlgorithm(request: DescribeFilteringAlgorithmRequest): DescribeFilteringAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFilteringAlgorithm', 'GET', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-xxxxx', position='Path'),
}

model DescribeInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method. Valid values: PrePaid and PostPaid. Only the PrePaid billing method is supported.', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the recommended item.', example='airecpre'),
    dataSetVersion?: string(name='dataSetVersion', description='The version of the dataset that provides online services.', example='20181206170353'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2019-01-06T16:00:00.000Z'),
    gmtCreate?: string(name='gmtCreate', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-06T06:14:01.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the instance was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-06T11:17:49.000Z'),
    industry?: string(name='industry', description='The type of the industry. Valid values: content, item, news, video, and sns.', example='news'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-o400whm78004'),
    lockMode?: string(name='lockMode', description='The lock mode of the instance. Valid values: Unlock, ManualLock, and LockByExpiration.', example='Unlock'),
    name?: string(name='name', description='The name of the instance.', example='Test instance'),
    regionId?: string(name='regionId', description='The ID of the region where the instance resides.', example='cn-beijing'),
    scene?: string(name='scene', description='The name of the scene. Valid values: gul, rr, hot, and focus.', example='gul'),
    status?: string(name='status', description='The state of the instance. Valid values: Initializing, Ready, and Running.', example='Running'),
    type?: string(name='type', description='The type of the instance. Only the Standard edition is supported.', example='Standard'),
  }(name='result', description='The returned results.'),
}

model DescribeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstance  DescribeInstanceRequest
  * @return DescribeInstanceResponse
 */
async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInstance', 'GET', '/v2/openapi/instances/{instanceId}', 'json', false, 'json', request);
}

model DescribeLatestTaskRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', example='123', position='Path'),
}

model DescribeLatestTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      builtTime?: string(name='builtTime', example='2020-11-08T02:00:00Z'),
      code?: string(name='code', example='400'),
      costSeconds?: int32(name='costSeconds', example='50'),
      flowType?: string(name='flowType', example='Manual'),
      message?: string(name='message', example='xxx'),
      progress?: int32(name='progress', example='80'),
      rollbackEnabled?: boolean(name='rollbackEnabled', example='true'),
      size?: long(name='size', example='2938475566'),
      status?: string(name='status', example='pending'),
      switchedTime?: string(name='switchedTime', example='2020-11-08T02:00:00Z'),
      versionId?: string(name='versionId', example='20102010211'),
    }
  ](name='result'),
}

model DescribeLatestTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLatestTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeLatestTask  DescribeLatestTaskRequest
  * @return DescribeLatestTaskResponse
 */
async function describeLatestTask(request: DescribeLatestTaskRequest): DescribeLatestTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeLatestTask', 'GET', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/tasks/latest', 'json', false, 'json', request);
}

model DescribeQuotaRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model DescribeQuotaResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    currentQps?: int32(name='currentQps', description='The current QPS.', example='8'),
    itemCount?: long(name='itemCount', description='The number of documents in the item table. Valid values:

1000000 to 10000000.', example='1000000'),
    itemCountUsed?: long(name='itemCountUsed', description='The number of items that are used in the item table.', example='100'),
    qps?: int32(name='qps', description='The queries per second (QPS). Valid values:

10 to 500.', example='10'),
    userCount?: long(name='userCount', description='The number of documents in the user table. Valid values:

1000000 to 10000000.', example='1000000'),
    userCountUsed?: long(name='userCountUsed', description='The number of users that are used in the user table.', example='100'),
  }(name='result', description='The quotas of the instance.'),
}

model DescribeQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeQuota  DescribeQuotaRequest
  * @return DescribeQuotaResponse
 */
async function describeQuota(request: DescribeQuotaRequest): DescribeQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeQuota', 'GET', '/v2/openapi/instances/{instanceId}/quota', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='acceptLanguage', description='The language of the response. Default value: zh-cn.', example='zh-cn', position='Query'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='successful'),
  requestId?: string(name='requestId', description='The request ID.', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: [ 
    {
      consoleUrl?: string(name='consoleUrl', description='The console URL.', example='xxx'),
      endpoint?: string(name='endpoint', description='The endpoint.', example='47.109.94.218'),
      localName?: string(name='localName', description='The region name.', example='xxx'),
      regionId?: string(name='regionId', description='The region ID of the instance.', example='cn-beijing'),
      status?: string(name='status', description='The instance state. Valid values: NotOpen, Processing, and Running.', example='Running'),
    }
  ](name='result', description='The returned result.'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/v2/openapi/configurations/regions', 'json', false, 'json', request);
}

model DescribeRuleRequest {
  instanceId: string(name='instanceId', description='The ID of the rule.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  ruleId: string(name='ruleId', description='The ID of the scene.

This parameter is required.', example='xxx', position='Path'),
  ruleType: string(name='ruleType', description='The returned result.

This parameter is required.', example='selection', position='Query'),
  sceneId: string(name='sceneId', description='The type of the rule.

Valid values: selection and operation.

This parameter is required.', example='xxx', position='Query'),
}

model DescribeRuleResponseBody = {
  code?: string(name='code', description='The ID of the request.', example='InternalServerError'),
  message?: string(name='message', description='__null__', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The error message.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The error code.', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', description='The state of the rule.', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', description='The time when the rule was last modified.', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    status?: string(name='status', description='The time when the rule was created.', example='DRAFT'),
  }(name='result', description='The ID of the rule.'),
}

model DescribeRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRule  DescribeRuleRequest
  * @return DescribeRuleResponse
 */
async function describeRule(request: DescribeRuleRequest): DescribeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRule', 'GET', '/v2/openapi/instances/{instanceId}/rules/{ruleId}', 'json', false, 'json', request);
}

model DescribeSceneRequest {
  instanceId: string(name='instanceId', description='GET /openapi/instances/{airec-xxxx}/scenes/{sceneId}

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='testid', position='Path'),
}

model DescribeSceneResponseBody = {
  code?: string(name='code', description='The status of the scene.', example='InternalServerError'),
  message?: string(name='message', description='The error code.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The time when the scene was created.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the scene was last modified.', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', description='The details about the scene.', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', description='The scene ID.', example='test'),
    status?: string(name='status', description='The scene ID.', example='DRAFT'),
  }(name='result', description='The instance ID.'),
}

model DescribeSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the Artificial Intelligence Recommendation (AIRec) console to manage scenes.
  * @param request  the request parameters of DescribeScene  DescribeSceneRequest
  * @return DescribeSceneResponse
 */
async function describeScene(request: DescribeSceneRequest): DescribeSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeScene', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}', 'json', false, 'json', request);
}

model DescribeSceneBucketRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='test', position='Path'),
}

model DescribeSceneBucketResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    detail?: map[string]any(name='detail', example='xxx'),
    inUse?: string(name='inUse', example='1'),
    num?: int32(name='num', example='2'),
  }(name='result'),
}

model DescribeSceneBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneBucketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSceneBucket  DescribeSceneBucketRequest
  * @return DescribeSceneBucketResponse
 */
async function describeSceneBucket(request: DescribeSceneBucketRequest): DescribeSceneBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSceneBucket', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiment-bucket', 'json', false, 'json', request);
}

model DescribeSceneThroughputRequest {
  instanceId: string(name='instanceId', description='DescribeSceneThroughput

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='testid', position='Path'),
}

model DescribeSceneThroughputResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    pvCount?: long(name='pvCount'),
  }(name='result'),
}

model DescribeSceneThroughputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSceneThroughputResponseBody(name='body'),
}

/**
  * @description __null__
  * @param request  the request parameters of DescribeSceneThroughput  DescribeSceneThroughputRequest
  * @return DescribeSceneThroughputResponse
 */
async function describeSceneThroughput(request: DescribeSceneThroughputRequest): DescribeSceneThroughputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSceneThroughput', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/throughput', 'json', false, 'json', request);
}

model DescribeSyncReportDetailRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  levelType: string(name='levelType', description='This parameter is required.', example='error', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  type: string(name='type', description='This parameter is required.', example='behavior', position='Query'),
}

model DescribeSyncReportDetailResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      defaultDisplay?: boolean(name='defaultDisplay', example='false'),
      errorCount?: int32(name='errorCount', example='246165'),
      errorPercent?: float(name='errorPercent', example='84.6'),
      historyData?: [ 
        {
          endTime?: long(name='endTime', example='1586673466'),
          errorPercent?: float(name='errorPercent', example='84.6'),
          startTime?: long(name='startTime', example='1586673466'),
        }
      ](name='historyData'),
      sampleDisplay?: boolean(name='sampleDisplay', example='true'),
      type?: string(name='type', example='bhvTimeBehavior'),
    }
  ](name='result'),
}

model DescribeSyncReportDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSyncReportDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSyncReportDetail  DescribeSyncReportDetailRequest
  * @return DescribeSyncReportDetailResponse
 */
async function describeSyncReportDetail(request: DescribeSyncReportDetailRequest): DescribeSyncReportDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSyncReportDetail', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/detail', 'json', false, 'json', request);
}

model DescribeSyncReportOutliersRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  key: string(name='key', description='This parameter is required.', position='Query'),
  levelType: string(name='levelType', description='This parameter is required.', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  type: string(name='type', description='This parameter is required.', position='Query'),
}

model DescribeSyncReportOutliersResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result'),
}

model DescribeSyncReportOutliersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSyncReportOutliersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSyncReportOutliers  DescribeSyncReportOutliersRequest
  * @return DescribeSyncReportOutliersResponse
 */
async function describeSyncReportOutliers(request: DescribeSyncReportOutliersRequest): DescribeSyncReportOutliersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSyncReportOutliers', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/outliers', 'json', false, 'json', request);
}

model DescribeUserMetricsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='The end time. The value is a timestamp in seconds.

This parameter is required.', example='1567155600', minimum=1565193600, maximum=4102416000, position='Query'),
  metricType: string(name='metricType', description='The type of the user metric that you want to query. Valid values: pvCtr and uvCtr.

This parameter is required.', example='pvCtr', position='Query'),
  startTime: long(name='startTime', description='The start time. The value is a timestamp in seconds.

This parameter is required.', example='1567152000', minimum=1565193600, maximum=4102416000, position='Query'),
}

model DescribeUserMetricsResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      dataPoints?: [ 
        {
          endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1567152000'),
          startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1567152000'),
          val?: float(name='val', description='The value of the corresponding metric.', example='84.6'),
        }
      ](name='dataPoints', description='The returned metrics.'),
      sceneId?: string(name='sceneId', description='The scene ID.', example='all'),
    }
  ](name='result', description='The returned results.'),
}

model DescribeUserMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserMetrics  DescribeUserMetricsRequest
  * @return DescribeUserMetricsResponse
 */
async function describeUserMetrics(request: DescribeUserMetricsRequest): DescribeUserMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserMetrics', 'GET', '/v2/openapi/instances/{instanceId}/metrics', 'json', false, 'json', request);
}

model DowngradeInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-xxxxxx', position='Path'),
}

model DowngradeInstanceResponseBody = {
  code?: string(name='code', description='The ID of the instance.', example='InternalServerError'),
  message?: string(name='message', description='The ID of the instance.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The returned results.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The new quota must be less than the selected quota.

The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) of recommendation requests: 10 to 500.', example='airec-cn-o400whm78004'),
  }(name='result', description='Decreases the quotas of a specified instance.'),
}

model DowngradeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DowngradeInstanceResponseBody(name='body'),
}

/**
  * @description The returned results.
  * @param request  the request parameters of DowngradeInstance  DowngradeInstanceRequest
  * @return DowngradeInstanceResponse
 */
async function downgradeInstance(request: DowngradeInstanceRequest): DowngradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DowngradeInstance', 'POST', '/v2/openapi/instances/{instanceId}/actions/downgrade', 'json', false, 'json', request);
}

model EnableExperimentRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
}

model EnableExperimentResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: boolean(name='result'),
}

model EnableExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableExperiment  EnableExperimentRequest
  * @return EnableExperimentResponse
 */
async function enableExperiment(request: EnableExperimentRequest): EnableExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableExperiment', 'POST', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/actions/enable-experiment', 'json', false, 'json', request);
}

model GenerateSampleRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', example='123', position='Path'),
}

model GenerateSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model GenerateSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateSample  GenerateSampleRequest
  * @return GenerateSampleResponse
 */
async function generateSample(request: GenerateSampleRequest): GenerateSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateSample', 'PUT', '/v2/openapi/instances/{instanceId}/samples/{sampleId}/actions/generate', 'json', false, 'json', request);
}

model GetExtraDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  type: string(name='type', description='The type of the data source. Valid values: UserCustomDataSource, ItemCustomDataSource, BehaviorCustomDataSource, and SampleCustomDataSource.

This parameter is required.', example='UserCustomDataSource', position='Path'),
  dataSourceId: string(name='dataSourceId', description='The data source ID.

This parameter is required.', example='123', position='Path'),
}

model GetExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result'),
}

model GetExtraDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExtraDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExtraDataSource  GetExtraDataSourceRequest
  * @return GetExtraDataSourceResponse
 */
async function getExtraDataSource(request: GetExtraDataSourceRequest): GetExtraDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExtraDataSource', 'GET', '/v2/openapi/instances/{instanceId}/extra-data-sources/{type}/{dataSourceId}', 'json', false, 'json', request);
}

model GetFlowControlTaskRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-wwo30psnd001', position='Path'),
  taskId?: string(name='taskId', description='The task ID.', example='1667979619806', position='Path'),
}

model GetFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', description='The time when the task was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', description='The time when the data source was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2020-04-23T06:08:48.000Z'),
      meta?: {
        description?: string(name='description', description='The task description.', example='xx'),
        endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1656518399'),
        metaType?: string(name='metaType', description='The metadata type.', example='FlowControlTask'),
        sceneIds?: string(name='sceneIds', description='The scene IDs.', example='1,2,3'),
        selectionParams?: [ 
          {
            selectType?: string(name='selectType', description='The type of the filtering condition for the item selection rule.', example='QUERY_PUB_TIME'),
            selectValue?: string(name='selectValue', description='The value of the filtering condition for the item selection rule.', example='10000'),
            selectionOperation?: string(name='selectionOperation', description='The operation on the filtering condition for the item selection rule.', example='OPERATOR_HIGHER'),
          }
        ](name='selectionParams', description='The parameters specified for the item selection rule.'),
        startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1640739600'),
        target?: {
          type?: string(name='type', description='EXPOSE_PERCENT: daily exposure percentage. EXPOSE_COUNT: total number of exposures.', example='EXPOSE_PERCENT'),
          value?: long(name='value', description='The exposure value.', example='20'),
        }(name='target', description='The exposure settings.'),
        taskName?: string(name='taskName', description='The task name.'),
      }(name='meta', description='The metadata of the task.'),
      status?: string(name='status', description='The task state. Valid values: DRAFT, READY, RUNNING, ENDED, and AUTO_END. The value AUTO_END is not used.', example='DRAFT'),
      taskId?: string(name='taskId', description='The task ID.', example='1666854602398'),
    }
  ](name='result', description='The returned result.'),
}

model GetFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFlowControlTask  GetFlowControlTaskRequest
  * @return GetFlowControlTaskResponse
 */
async function getFlowControlTask(request: GetFlowControlTaskRequest): GetFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFlowControlTask', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}', 'json', false, 'json', request);
}

model GetLatestDataDiagnoseTaskStatusRequest {
  instanceId: string(name='instanceId', description='A short description of struct

This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
}

model GetLatestDataDiagnoseTaskStatusResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result', example='RUNNING'),
}

model GetLatestDataDiagnoseTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLatestDataDiagnoseTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLatestDataDiagnoseTaskStatus  GetLatestDataDiagnoseTaskStatusRequest
  * @return GetLatestDataDiagnoseTaskStatusResponse
 */
async function getLatestDataDiagnoseTaskStatus(request: GetLatestDataDiagnoseTaskStatusRequest): GetLatestDataDiagnoseTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLatestDataDiagnoseTaskStatus', 'GET', '/v2/openapi/instances/{instanceId}/data-diagnose-task/status', 'json', false, 'json', request);
}

model GetRankingModelTemplateRequest {
  instanceId?: string(name='instanceId', example='airec-test', position='Path'),
  templateId?: string(name='templateId', example='123', position='Path'),
}

model GetRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingModelTemplate(name='result'),
}

model GetRankingModelTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRankingModelTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRankingModelTemplate  GetRankingModelTemplateRequest
  * @return GetRankingModelTemplateResponse
 */
async function getRankingModelTemplate(request: GetRankingModelTemplateRequest): GetRankingModelTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRankingModelTemplate', 'GET', '/v2/openapi/instances/{instanceId}/ranking-model-templates/{templateId}', 'json', false, 'json', request);
}

model GetRankingModelVersionRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  versionId: string(name='versionId', description='This parameter is required.', example='123', position='Path'),
}

model GetRankingModelVersionResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingModelVersion(name='result'),
}

model GetRankingModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRankingModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRankingModelVersion  GetRankingModelVersionRequest
  * @return GetRankingModelVersionResponse
 */
async function getRankingModelVersion(request: GetRankingModelVersionRequest): GetRankingModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRankingModelVersion', 'GET', '/v2/openapi/instances/{instanceId}/ranking-model-versions/{versionId}', 'json', false, 'json', request);
}

model GetRankingSystemRequest {
  instanceId?: string(name='instanceId', example='airec-test', position='Path'),
  name?: string(name='name', example='test-service', position='Path'),
}

model GetRankingSystemResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: RankingSystem(name='result'),
}

model GetRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRankingSystem  GetRankingSystemRequest
  * @return GetRankingSystemResponse
 */
async function getRankingSystem(request: GetRankingSystemRequest): GetRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRankingSystem', 'GET', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}', 'json', false, 'json', request);
}

model GetRankingSystemHistoryRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  name: string(name='name', description='This parameter is required.', example='service-a', position='Path'),
  operateId: string(name='operateId', description='This parameter is required.', example='u-s-a', position='Path'),
}

model GetRankingSystemHistoryResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingSystemHistory(name='result'),
}

model GetRankingSystemHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRankingSystemHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRankingSystemHistory  GetRankingSystemHistoryRequest
  * @return GetRankingSystemHistoryResponse
 */
async function getRankingSystemHistory(request: GetRankingSystemHistoryRequest): GetRankingSystemHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRankingSystemHistory', 'GET', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}/histories/{operateId}', 'json', false, 'json', request);
}

model GetSampleRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test001', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', example='xxx', position='Path'),
  withExtendParmas?: boolean(name='withExtendParmas', example='true', position='Query'),
}

model GetSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model GetSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSample  GetSampleRequest
  * @return GetSampleResponse
 */
async function getSample(request: GetSampleRequest): GetSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSample', 'GET', '/v2/openapi/instances/{instanceId}/samples/{sampleId}', 'json', false, 'json', request);
}

model InitComputingResourceRequest {
  instanceId?: string(name='instanceId', example='airec-test', position='Path'),
  key?: string(name='key', example='MAX_COMPUTE', position='Query'),
  type?: string(name='type', example='MAX_COMPUTE', position='Query'),
}

model InitComputingResourceResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
}

model InitComputingResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitComputingResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitComputingResource  InitComputingResourceRequest
  * @return InitComputingResourceResponse
 */
async function initComputingResource(request: InitComputingResourceRequest): InitComputingResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InitComputingResource', 'PUT', '/v2/openapi/instances/{instanceId}/computing-resources/actions/init', 'json', false, 'json', request);
}

model ListDashboardDetailsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1588521600', minimum=1565193600, maximum=4102416000, position='Query'),
  experimentIds?: string(name='experimentIds', example='all', position='Query'),
  matchTypes?: string(name='matchTypes', example='hot,emb,u2x2i,hilp,new,', position='Query'),
  metricType: string(name='metricType', description='This parameter is required.', example='xxx', position='Query'),
  sceneIds: string(name='sceneIds', description='This parameter is required.', example='test', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1588521600', minimum=1565193600, maximum=4102416000, position='Query'),
  traceIds: string(name='traceIds', description='This parameter is required.', example='Alibaba', position='Query'),
}

model ListDashboardDetailsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      metricRes?: {
        detail?: map[string]any(name='detail', example='xxx'),
        total?: map[string]any(name='total', example='xxx'),
      }(name='metricRes'),
      sceneId?: string(name='sceneId', example='test'),
      traceId?: string(name='traceId', example='Alibaba'),
    }
  ](name='result'),
}

model ListDashboardDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDashboardDetails  ListDashboardDetailsRequest
  * @return ListDashboardDetailsResponse
 */
async function listDashboardDetails(request: ListDashboardDetailsRequest): ListDashboardDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardDetails', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/details', 'json', false, 'json', request);
}

model ListDashboardDetailsFlowsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1588521600', minimum=1565193600, maximum=4102416000, position='Query'),
  experimentIds?: string(name='experimentIds', example='all', position='Query'),
  metricType: string(name='metricType', description='This parameter is required.', example='USERACTIONUV_COUNT', position='Query'),
  sceneIds: string(name='sceneIds', description='This parameter is required.', example='test', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1588521600', minimum=1565193600, maximum=4102416000, position='Query'),
  traceIds: string(name='traceIds', description='This parameter is required.', example='Alibaba', position='Query'),
}

model ListDashboardDetailsFlowsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    metricData?: [ 
      {
        metricRes?: map[string]any(name='metricRes', example='xxx'),
        sceneId?: string(name='sceneId', example='test'),
        traceId?: string(name='traceId', example='Alibaba'),
      }
    ](name='metricData'),
    metricType?: string(name='metricType', example='USERACTIONUV_COUNT'),
  }(name='result'),
}

model ListDashboardDetailsFlowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardDetailsFlowsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDashboardDetailsFlows  ListDashboardDetailsFlowsRequest
  * @return ListDashboardDetailsFlowsResponse
 */
async function listDashboardDetailsFlows(request: ListDashboardDetailsFlowsRequest): ListDashboardDetailsFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardDetailsFlows', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/details/flows', 'json', false, 'json', request);
}

model ListDashboardMetricsRequest {
  instanceId: string(name='instanceId', description='The type of the metric. Valid values:

USER_ACTION_PV_COUNT: the number of page views

USER_ACTION_UV_COUNT: the number of unique views

USER_ACTION_PV_RATIO: the conversion rate

USER_ACTION_UV_RATIO: the traffic consumed per person

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='The statistical results.

This parameter is required.', example='1586673466', position='Query'),
  metricQuery?: string(name='metricQuery', position='Query'),
  metricType?: string(name='metricType', description='The statistical results.', example='The details about the metric.', position='Query'),
  metricView?: string(name='metricView', position='Query'),
  startTime: long(name='startTime', description='USERACTIONPV_COUNT

This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
}

model ListDashboardMetricsResponseBody = {
  code?: string(name='code', description='__null__', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      detail?: [ 
        {
          endTime?: string(name='endTime', description='The error message.', example='1586673466'),
          startTime?: string(name='startTime', description='The ID of the request.', example='1586673466'),
          val?: string(name='val', description='The error code.', example='13'),
        }
      ](name='detail', description='The end time. The value is a timestamp in seconds.'),
      total?: map[string]any(name='total', description='The start time. The value is a timestamp in seconds.', example='xxx'),
    }
  ](name='result', description='The specific value of the metric.'),
}

model ListDashboardMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDashboardMetrics  ListDashboardMetricsRequest
  * @return ListDashboardMetricsResponse
 */
async function listDashboardMetrics(request: ListDashboardMetricsRequest): ListDashboardMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardMetrics', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/metrics', 'json', false, 'json', request);
}

model ListDashboardMetricsFlowsRequest {
  instanceId: string(name='instanceId', description='The type of the metric. Valid values:

USER_ACTION_PV_COUNT: the number of page views

USER_ACTION_UV_COUNT: the number of unique views

USER_ACTION_PV_RATIO: the conversion rate

USER_ACTION_UV_RATIO: the traffic consumed per person

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='The type of the metric.

This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  metricType: string(name='metricType', description='The metric data.

This parameter is required.', example='The error code.', position='Query'),
  startTime: long(name='startTime', description='The statistical results.

This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
}

model ListDashboardMetricsFlowsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      metricData?: map[string]any(name='metricData', description='__null__', example='xxx'),
      metricType?: string(name='metricType', description='The error message.', example='xxx'),
    }
  ](name='result', description='The ID of the request.'),
}

model ListDashboardMetricsFlowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardMetricsFlowsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDashboardMetricsFlows  ListDashboardMetricsFlowsRequest
  * @return ListDashboardMetricsFlowsResponse
 */
async function listDashboardMetricsFlows(request: ListDashboardMetricsFlowsRequest): ListDashboardMetricsFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardMetricsFlows', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/metrics/flows', 'json', false, 'json', request);
}

model ListDataDiagnoseReportsRequest {
  instanceId: string(name='instanceId', description='A short description of struct

This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  taskCreateTime?: long(name='taskCreateTime', example='1566489600', position='Query'),
}

model ListDataDiagnoseReportsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result', example='{
    "todayTimeLimit":8,
    "totalCount":10,
    "reports":[
        {
            "diagnoseLevel":"low | medium | high",
            "startTime":1566489600,
            "endTime":1566489600,
            "taskCreateTime":1566489600,
            "taskSource":"manual | cycle | firstRun",
            "total":{
                "itemCount":100,
                "userCount":100,
                "bhvCount":100
            },
            "details":[
                {
                    "key":"",
                    "level":"error | warn | info",
                    "errorCount":10,
                    "errorPercent":10,
                    "sampleEnabled":true;
                }
            ]
        },
        {
            "diagnoseLevel":"low | medium | high",
            "startTime":1566489600,
            "endTime":1566489600,
            "taskCreateTime":1566489600,
            "taskSource":"manual | cycle | firstRun",
            "total":{
                "itemCount":100,
                "userCount":100,
                "bhvCount":100
            },
            "details":[
                {
                    "key":"",
                    "level":"error | warn | info",
                    "errorCount":10,
                    "errorPercent":10,
                    "sampleEnabled":true;
                }
            ]
        }
    ]
}'),
}

model ListDataDiagnoseReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataDiagnoseReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataDiagnoseReports  ListDataDiagnoseReportsRequest
  * @return ListDataDiagnoseReportsResponse
 */
async function listDataDiagnoseReports(request: ListDataDiagnoseReportsRequest): ListDataDiagnoseReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataDiagnoseReports', 'GET', '/v2/openapi/instances/{instanceId}/data-diagnose-reports', 'json', false, 'json', request);
}

model ListDataDiagnoseSampleDetailsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1682179200', position='Query'),
  key: string(name='key', description='This parameter is required.', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1665158400', position='Query'),
  taskCreateTime: long(name='taskCreateTime', description='This parameter is required.', example='1665936000000', position='Query'),
  taskSource: string(name='taskSource', description='This parameter is required.', example='cycle', position='Query'),
}

model ListDataDiagnoseSampleDetailsResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result'),
}

model ListDataDiagnoseSampleDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataDiagnoseSampleDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataDiagnoseSampleDetails  ListDataDiagnoseSampleDetailsRequest
  * @return ListDataDiagnoseSampleDetailsResponse
 */
async function listDataDiagnoseSampleDetails(request: ListDataDiagnoseSampleDetailsRequest): ListDataDiagnoseSampleDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataDiagnoseSampleDetails', 'GET', '/v2/openapi/instances/{instanceId}/data-diagnose-reports/sample-details', 'json', false, 'json', request);
}

model ListDataSetRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ListDataSetResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: long(name='gmtCreate', description='The time when the data source was created.', example='1544112000000'),
      gmtModified?: long(name='gmtModified', description='The time when the data source was last modified.', example='1544112000000'),
      instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-o400whm78004'),
      state?: string(name='state', description='The state for the dataset of the current version. Example: Importing. The value indicates that the dataset of the current version is being imported.', example='Importing'),
      versionId?: string(name='versionId', description='The version number of the dataset.', example='20181023214546'),
    }
  ](name='result', description='The returned datasets.'),
}

model ListDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSet  ListDataSetRequest
  * @return ListDataSetResponse
 */
async function listDataSet(request: ListDataSetRequest): ListDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSet', 'GET', '/v2/openapi/instances/{instanceId}/dataSets', 'json', false, 'json', request);
}

model ListDataSourceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ListDataSourceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        accessKeyId?: string(name='accessKeyId', example='xxx'),
        bucketName?: string(name='bucketName', example='airec'),
        partition?: string(name='partition', example='ds=20181122'),
        path?: string(name='path', example='oss://xxx.xxx'),
        projectName?: string(name='projectName', example='openrec_gray'),
        tableName?: string(name='tableName', example='test_maxcompute'),
        timestamp?: long(name='timestamp', example='1544112000000'),
        type?: string(name='type', example='ODPS'),
      }(name='meta'),
      tableName?: string(name='tableName', example='behavior'),
    }
  ](name='result'),
}

model ListDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSource  ListDataSourceRequest
  * @return ListDataSourceResponse
 */
async function listDataSource(request: ListDataSourceRequest): ListDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSource', 'GET', '/v2/openapi/instances/{instanceId}/dataSources', 'json', false, 'json', request);
}

model ListExperimentsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
}

model ListExperimentsResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: [ 
    {
      base?: boolean(name='base', example='true'),
      buckets?: [ string ](name='buckets'),
      description?: string(name='description', example='xxx'),
      experimentId?: string(name='experimentId', example='123'),
      name?: string(name='name', example='test'),
      offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
      onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
      status?: string(name='status', example='init'),
    }
  ](name='result'),
}

model ListExperimentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExperiments  ListExperimentsRequest
  * @return ListExperimentsResponse
 */
async function listExperiments(request: ListExperimentsRequest): ListExperimentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperiments', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments', 'json', false, 'json', request);
}

model ListExtraDataSourcesRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  type?: string(name='type', example='UserCustomDataSource ItemCustomDataSource BehaviorCustomDataSource SampleCustomDataSource', position='Query'),
}

model ListExtraDataSourcesResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    ExtraDataSource
  ](name='result'),
}

model ListExtraDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExtraDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExtraDataSources  ListExtraDataSourcesRequest
  * @return ListExtraDataSourcesResponse
 */
async function listExtraDataSources(request: ListExtraDataSourcesRequest): ListExtraDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExtraDataSources', 'GET', '/v2/openapi/instances/{instanceId}/extra-data-sources', 'json', false, 'json', request);
}

model ListFeatureTablesRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  dataSourceId?: string(name='dataSourceId', example='1', position='Query'),
  type?: string(name='type', example='UserFeatureTable', position='Query'),
  updateFrequency?: string(name='updateFrequency', example='1', position='Query'),
}

model ListFeatureTablesResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    FeatureTable
  ](name='result', example='result'),
}

model ListFeatureTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFeatureTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFeatureTables  ListFeatureTablesRequest
  * @return ListFeatureTablesResponse
 */
async function listFeatureTables(request: ListFeatureTablesRequest): ListFeatureTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFeatureTables', 'GET', '/v2/openapi/instances/{instanceId}/feature-tables', 'json', false, 'json', request);
}

model ListFilteringAlgorithmsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  algorithmId?: string(name='algorithmId', example='123', position='Query'),
  page?: int32(name='page', example='1', position='Query'),
  size?: int32(name='size', example='1', position='Query'),
  status?: string(name='status', example='Running', position='Query'),
}

model ListFilteringAlgorithmsResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count', example='12'),
  }(name='headers'),
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: [ 
    {
      algorithmId?: string(name='algorithmId', example='123'),
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        algorithmName?: string(name='algorithmName', example='test'),
        category?: string(name='category', example='odps'),
        clusterId?: string(name='clusterId', example='123'),
        cron?: string(name='cron', example='0 0/12 0 * *'),
        cronEnabled?: boolean(name='cronEnabled', example='true'),
        description?: string(name='description', example='test'),
        extInfo?: {
          itemSeparator?: string(name='itemSeparator', example=','),
          kvSeparator?: string(name='kvSeparator', example=':'),
        }(name='extInfo'),
        metaType?: string(name='metaType', example='ODPS'),
        projectName?: string(name='projectName', example='airec123'),
        tableName?: string(name='tableName', example='item'),
        taskId?: string(name='taskId', example='123'),
        threshold?: {
          indexLossThreshold?: int32(name='indexLossThreshold', example='1'),
          indexSizeThreshold?: int32(name='indexSizeThreshold', example='1'),
          sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', example='1'),
          sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', example='1'),
        }(name='threshold'),
        type?: string(name='type', example='odps'),
      }(name='meta'),
      status?: string(name='status', example='Running'),
    }
  ](name='result'),
}

model ListFilteringAlgorithmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilteringAlgorithmsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFilteringAlgorithms  ListFilteringAlgorithmsRequest
  * @return ListFilteringAlgorithmsResponse
 */
async function listFilteringAlgorithms(request: ListFilteringAlgorithmsRequest): ListFilteringAlgorithmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFilteringAlgorithms', 'GET', '/v2/openapi/instances/{instanceId}/filtering-algorithms', 'json', false, 'json', request);
}

model ListFlowControlTaskRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  page?: int32(name='page', example='1', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
  status?: string(name='status', example='DRAFT', position='Query'),
  taskId?: string(name='taskId', example='1661506482', position='Query'),
}

model ListFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='6E427B10-30FC-1873-922F-FC176D3398D4'),
  result?: [ 
    {
      taskId?: string(name='TaskId', example='1661506482'),
      gmtCreate?: string(name='gmtCreate', example='2022-08-06T06:14:01.000Z'),
      gmtModified?: string(name='gmtModified', example='2022-08-06T06:14:01.000Z'),
      meta?: {
        description?: string(name='description'),
        endTime?: long(name='endTime', example='1621267200'),
        metaType?: string(name='metaType', example='metaType'),
        sceneIds?: string(name='sceneIds', example='1,2,3'),
        selectionParams?: [ 
          {
            selectType?: string(name='selectType', example='selectType'),
            selectValue?: string(name='selectValue', example='selectValue'),
            selectionOperation?: string(name='selectionOperation', example='selectionOperation'),
          }
        ](name='selectionParams'),
        startTime?: long(name='startTime', example='1621267200'),
        target?: {
          type?: string(name='type', example='EXPOSE_PERCENT'),
          value?: long(name='value', example='50'),
        }(name='target'),
        taskName?: string(name='taskName', example='testtaskname'),
      }(name='meta'),
      status?: string(name='status', example='DRAFT'),
    }
  ](name='result'),
}

model ListFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTask  ListFlowControlTaskRequest
  * @return ListFlowControlTaskResponse
 */
async function listFlowControlTask(request: ListFlowControlTaskRequest): ListFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTask', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks', 'json', false, 'json', request);
}

model ListFlowControlTaskInvalidItemsRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1661506482', position='Path'),
  body?: [ string ](name='body', position='Body'),
}

model ListFlowControlTaskInvalidItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      invalidItems?: [ 
        {
          itemId?: string(name='itemId', example='287723'),
          itemType?: string(name='itemType', example='video'),
        }
      ](name='invalidItems'),
    }
  ](name='result'),
}

model ListFlowControlTaskInvalidItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskInvalidItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTaskInvalidItems  ListFlowControlTaskInvalidItemsRequest
  * @return ListFlowControlTaskInvalidItemsResponse
 */
async function listFlowControlTaskInvalidItems(request: ListFlowControlTaskInvalidItemsRequest): ListFlowControlTaskInvalidItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTaskInvalidItems', 'POST', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/invalidItems', 'json', false, 'json', request);
}

model ListFlowControlTaskItemReportsRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1666854493104', position='Path'),
  count?: string(name='count', example='5', position='Query'),
  selectTimeType?: string(name='selectTimeType', example='yesterDay', position='Query'),
  selectType?: string(name='selectType', example='invalidItem', position='Query'),
}

model ListFlowControlTaskItemReportsResponseBody = {
  requestId?: string(name='requestId', example='D486768B-8BF8-4D80-B491-43DC3D0AF8AB'),
  result?: {
    detail?: [ 
      {
        accClickPercent?: string(name='accClickPercent', example='3.24'),
        accItemClick?: string(name='accItemClick', example='1000'),
        accItemCtr?: string(name='accItemCtr', example='4.56'),
        accItemPv?: string(name='accItemPv', example='500'),
        accPvPercent?: string(name='accPvPercent', example='20.12'),
        accTaskClick?: string(name='accTaskClick', example='600'),
        accTaskCtr?: string(name='accTaskCtr', example='3.22'),
        accTaskPv?: string(name='accTaskPv', example='200'),
        accTaskRank?: string(name='accTaskRank', example='10'),
        clickPercent?: string(name='clickPercent', example='1.23'),
        itemClick?: string(name='itemClick', example='100'),
        itemCtr?: string(name='itemCtr', example='2.34'),
        itemId?: string(name='itemId', example='123'),
        itemPv?: string(name='itemPv', example='100'),
        itemType?: string(name='itemType', example='video'),
        pvPercent?: string(name='pvPercent', example='10.12'),
        taskClick?: string(name='taskClick', example='100'),
        taskCtr?: string(name='taskCtr', example='1.23'),
        taskId?: string(name='taskId', example='1666669577221'),
        taskPv?: string(name='taskPv', example='50'),
        taskRank?: string(name='taskRank', example='12'),
      }
    ](name='detail'),
  }(name='result'),
}

model ListFlowControlTaskItemReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskItemReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTaskItemReports  ListFlowControlTaskItemReportsRequest
  * @return ListFlowControlTaskItemReportsResponse
 */
async function listFlowControlTaskItemReports(request: ListFlowControlTaskItemReportsRequest): ListFlowControlTaskItemReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTaskItemReports', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/itemReports', 'json', false, 'json', request);
}

model ListFlowControlTaskItemsRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1667369058068', position='Path'),
  page?: int32(name='page', example='1', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListFlowControlTaskItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', example='zhangsan'),
        categoryPath?: string(name='categoryPath', example='12_34'),
        channel?: string(name='channel', example='news'),
        duration?: string(name='duration', example='18'),
        expireTime?: string(name='expireTime', example='1612687809'),
        itemId?: string(name='itemId', example='123'),
        itemType?: string(name='itemType', example='video'),
        lastModifyTime?: string(name='lastModifyTime', example='1662346558'),
        pubTime?: string(name='pubTime', example='1661931487'),
        status?: string(name='status', example='1'),
        title?: string(name='title', example='test'),
        weight?: string(name='weight', example='10'),
      }
    ](name='detail'),
    totalCount?: string(name='totalCount', example='1'),
    validCount?: string(name='validCount', example='1'),
  }(name='result'),
}

model ListFlowControlTaskItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTaskItems  ListFlowControlTaskItemsRequest
  * @return ListFlowControlTaskItemsResponse
 */
async function listFlowControlTaskItems(request: ListFlowControlTaskItemsRequest): ListFlowControlTaskItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTaskItems', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/actions/items', 'json', false, 'json', request);
}

model ListFlowControlTaskReferenceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-7mz2wuyd2001', position='Path'),
  taskId?: string(name='taskId', description='The ID of the task.', example='1666670046687', position='Path'),
}

model ListFlowControlTaskReferenceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This helps troubleshoot issues later.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    last7PvPercent?: double(name='last7PvPercent', description='The average exposure rate of the item pool in the last seven days.', example='0.1'),
    last7ScenePv?: double(name='last7ScenePv', description='The average number of exposures for the items in the selected scene in the last seven days.', example='10'),
    last7TaskPv?: double(name='last7TaskPv', description='The average number of exposures for the item pool in the selected scene in the last seven days.', example='10'),
    lastPvPercent?: double(name='lastPvPercent', description='The exposure rate of the item pool yesterday.', example='0.1'),
    lastScenePv?: long(name='lastScenePv', description='The total number of exposures for the items in the selected scene yesterday.', example='10'),
    lastTaskPv?: long(name='lastTaskPv', description='The number of exposures for the item pool in the selected scene yesterday.', example='10'),
    referenceId?: string(name='referenceId', description='The ID of the reference data.', example='421351235918'),
  }(name='result', description='The returned results.'),
}

model ListFlowControlTaskReferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskReferenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTaskReference  ListFlowControlTaskReferenceRequest
  * @return ListFlowControlTaskReferenceResponse
 */
async function listFlowControlTaskReference(request: ListFlowControlTaskReferenceRequest): ListFlowControlTaskReferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTaskReference', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/reference', 'json', false, 'json', request);
}

model ListFlowControlTaskReportsRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1666697299358', position='Path'),
  endTime?: string(name='endTime', example='1668268800', position='Query'),
  startTime?: string(name='startTime', example='1666195200', position='Query'),
}

model ListFlowControlTaskReportsResponseBody = {
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: {
    metrics?: [ 
      {
        details?: [ 
          {
            endTime?: long(name='endTime', example='1664035200'),
            startTime?: long(name='startTime', example='1664000452'),
            val?: long(name='val', example='0'),
          }
        ](name='details'),
        type?: string(name='type', example='taskPv'),
      }
    ](name='metrics'),
    total?: {
      invalidPercent?: double(name='InvalidPercent', example='0.3'),
      accTaskCtr?: double(name='accTaskCtr', example='0.1'),
      accTaskPv?: long(name='accTaskPv', example='1000'),
      accTotalCtr?: double(name='accTotalCtr', example='0.2'),
    }(name='total'),
  }(name='result'),
}

model ListFlowControlTaskReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowControlTaskReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowControlTaskReports  ListFlowControlTaskReportsRequest
  * @return ListFlowControlTaskReportsResponse
 */
async function listFlowControlTaskReports(request: ListFlowControlTaskReportsRequest): ListFlowControlTaskReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowControlTaskReports', 'GET', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/flowTaskReports', 'json', false, 'json', request);
}

model ListIndexVersionsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', example='abc', position='Path'),
}

model ListIndexVersionsResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      builtTime?: string(name='builtTime', example='2020-11-08T02:00:00Z'),
      code?: string(name='code', example='abc'),
      costSeconds?: int32(name='costSeconds', example='600'),
      flowType?: string(name='flowType', example='Auto'),
      message?: string(name='message', example='xxx'),
      progress?: int32(name='progress', example='80'),
      rollbackEnabled?: boolean(name='rollbackEnabled', example='true'),
      size?: long(name='size', example='300922211'),
      status?: string(name='status', example='abc'),
      switchedTime?: string(name='switchedTime', example='2020-11-08T02:00:00Z'),
      versionId?: string(name='versionId', example='2020112301'),
    }
  ](name='result'),
}

model ListIndexVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIndexVersions  ListIndexVersionsRequest
  * @return ListIndexVersionsResponse
 */
async function listIndexVersions(request: ListIndexVersionsRequest): ListIndexVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIndexVersions', 'GET', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/index-versions', 'json', false, 'json', request);
}

model ListInstanceRequest {
  expiredTime?: string(name='expiredTime', description='The state of the instance. Valid values: Running, Ready, Initializing, and Starting.', example='1608533404', position='Query'),
  instanceId?: string(name='instanceId', description='The name of the instance. Fuzzy match is supported.', example='Test instance', position='Query'),
  name?: string(name='name', description='The number of the page to return. Default value: 1.', example='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', position='Query'),
  page?: int32(name='page', description='GET /openapi/instances?name=test&instanceId=abc&page=1&size=10', example='1', minimum=1, maximum=2147483647, position='Query'),
  size?: int32(name='size', example='10', minimum=1, maximum=2147483647, position='Query'),
  status?: string(name='status', example='Running', position='Query'),
}

model ListInstanceResponseBody = {
  code?: string(name='code', description='airec-cn-o400whm78004', example='InternalServerError'),
  message?: string(name='message', description='airec-cn-o400whm78004', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The instance ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='PrePaid'),
      commodityCode?: string(name='commodityCode', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='airecpre'),
      dataSetVersion?: string(name='dataSetVersion', description='The type of the industry. Valid values: content, item, news, video, and sns.', example='20181206170353'),
      expiredTime?: string(name='expiredTime', description='The ID of the region where the instance resides.', example='2019-01-06T16:00:00.000Z'),
      gmtCreate?: string(name='gmtCreate', description='The lock mode of the instance. Valid values: Unlock, ManualLock, and LockByExpiration.', example='2018-12-06T06:14:01.000Z'),
      gmtModified?: string(name='gmtModified', description='The billing method. Valid values: PrePaid and PostPaid. Only the PrePaid billing method is supported.', example='2018-12-06T11:17:49.000Z'),
      industry?: string(name='industry', description='The state of the instance. Valid values: Initializing, Ready, and Running.', example='news'),
      instanceId?: string(name='instanceId', description='The version of the dataset that provides online services.', example='The name of the instance.'),
      lockMode?: string(name='lockMode', description='The returned results.', example='Unlock'),
      name?: string(name='name', description='The commodity code of the instance.', example='The time when the instance was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.'),
      regionId?: string(name='regionId', description='The instance ID. Fuzzy match is supported.', example='cn-beijing'),
      status?: string(name='status', description='The type of the instance. Only the Standard edition is supported.', example='Running'),
      type?: string(name='type', description='airec-cn-xxxxxx', example='Standard'),
    }
  ](name='result', description='The time when the instance expires. The value is a timestamp in seconds. Only instances whose expiration time is greater than the value of this parameter will be returned.'),
}

model ListInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the list of instances. The returned instances are ranked in descending order based on the values of GmtCreate. You can specify multiple request parameters. These request parameters can be used to filter query results. The request parameters that you specify have logical AND relations. Only the specified parameters can be used to filter query results.
  * @param request  the request parameters of ListInstance  ListInstanceRequest
  * @return ListInstanceResponse
 */
async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstance', 'GET', '/v2/openapi/instances', 'json', false, 'json', request);
}

model ListInstanceTaskRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ListInstanceTaskResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      name?: string(name='name', description='The name of the step. Example: DATA_IMPORT. The value indicates that data is being imported.', example='DATA_IMPORT'),
      subProgressInfos?: [ 
        {
          detail?: string(name='detail', description='The detailed description of subtasks.', example='data import progress info'),
          finishedNum?: int32(name='finishedNum', description='The number of completed subtasks.', example='11'),
          progress?: int32(name='progress', description='The progress of subtasks.', example='100'),
          totalNum?: int32(name='totalNum', description='The total number of subtasks.', example='11'),
          type?: string(name='type', description='The type of subtasks.', example='DATA_PROCESS'),
        }
      ](name='subProgressInfos', description='The information about the progress of subtasks.'),
      totalProgress?: int32(name='totalProgress', description='The overall progress of the current task.', example='100'),
    }
  ](name='result', description='The progress of the task that is running on the instance.'),
}

model ListInstanceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceTask  ListInstanceTaskRequest
  * @return ListInstanceTaskResponse
 */
async function listInstanceTask(request: ListInstanceTaskRequest): ListInstanceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceTask', 'GET', '/v2/openapi/instances/{instanceId}/tasks', 'json', false, 'json', request);
}

model ListItemsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  page?: int32(name='page', example='1', minimum=1, maximum=2147483647, position='Query'),
  size?: int32(name='size', example='10', minimum=1, maximum=1000, position='Query'),
  strategyUsed?: boolean(name='strategyUsed', position='Query'),
  withInvalidDetail?: boolean(name='withInvalidDetail', position='Query'),
}

model ListItemsResponseBody = {
  requestId?: string(name='requestId', example='6839AE7C-A984-48C1-AC17-331BAC6D97BC'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', example='abc'),
        brandId?: string(name='brandId', example='1'),
        categoryPath?: string(name='categoryPath', example='1_2'),
        channel?: string(name='channel', example='news'),
        duration?: string(name='duration', example='30'),
        expireTime?: string(name='expireTime', example='1647998107012'),
        itemId?: string(name='itemId', example='123'),
        itemType?: string(name='itemType', example='item'),
        pubTime?: string(name='pubTime', example='1647998107012'),
        shopId?: string(name='shopId', example='1'),
        status?: string(name='status', example='1'),
        title?: string(name='title', example='test'),
      }
    ](name='detail'),
    total?: {
      instanceRecommendItem?: long(name='instanceRecommendItem', example='200'),
      queryCount?: long(name='queryCount', example='3000'),
      sceneRecommendItem?: long(name='sceneRecommendItem', example='200'),
      sceneWeightItem?: long(name='sceneWeightItem', example='10'),
      totalCount?: long(name='totalCount', example='5000'),
      weightItem?: long(name='weightItem', example='10'),
    }(name='total'),
  }(name='result'),
}

model ListItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListItems  ListItemsRequest
  * @return ListItemsResponse
 */
async function listItems(request: ListItemsRequest): ListItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListItems', 'POST', '/v2/openapi/instances/{instanceId}/items/actions/list', 'json', false, 'json', request);
}

model ListLogsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: int32(name='endTime', description='This parameter is required.', minimum=1565193600, maximum=2147483647, position='Query'),
  page?: int32(name='page', example='1', minimum=1, maximum=2147483647, position='Query'),
  queryParams?: string(name='queryParams', position='Query'),
  size?: int32(name='size', minimum=1, maximum=1000, position='Query'),
  startTime: int32(name='startTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=2147483647, position='Query'),
}

model ListLogsResponseBody = {
  code?: string(name='code'),
  headers?: {
    xTotalCount?: int32(name='X-Total-Count'),
  }(name='headers'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [  map[string]any ](name='result'),
}

model ListLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogs  ListLogsRequest
  * @return ListLogsResponse
 */
async function listLogs(request: ListLogsRequest): ListLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogs', 'GET', '/v2/openapi/instances/{instanceId}/logs', 'json', false, 'json', request);
}

model ListMixCategoriesRequest {
}

model ListMixCategoriesResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The error message.', example='Success'),
  requestId?: string(name='requestId', description='The request ID.', example='ED093A1D-1C56-57A2-B078-3C518F632F03'),
  result?: [ 
    {
      categories?: [ long ](name='categories', description='The content type.'),
    }
  ](name='result', description='The returned result.'),
}

model ListMixCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMixCategoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMixCategories  ListMixCategoriesRequest
  * @return ListMixCategoriesResponse
 */
async function listMixCategories(request: ListMixCategoriesRequest): ListMixCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMixCategories', 'GET', '/v2/openapi/configurations/mixCategories', 'json', false, 'json', request);
}

model ListOfflineStoragesRequest {
  instanceId: bytes(name='instanceId', description='instanceId

This parameter is required.', example='airec-cn-xxx', position='Path'),
}

model ListOfflineStoragesResponseBody = {
  requestId?: bytes(name='requestId', description='Id of the request', example='6839AE7C-A984-48C1-AC17-331BAC6D97BC'),
  result?: [ 
    {
      meta?: map[string]any(name='meta'),
      tableName?: bytes(name='tableName', example='item'),
    }
  ](name='result'),
}

model ListOfflineStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOfflineStoragesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOfflineStorages  ListOfflineStoragesRequest
  * @return ListOfflineStoragesResponse
 */
async function listOfflineStorages(request: ListOfflineStoragesRequest): ListOfflineStoragesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOfflineStorages', 'GET', '/v2/openapi/instances/[instanceId]/offlineStorages', 'json', false, 'json', request);
}

model ListRankingModelTemplatesRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='airec-test', position='Path'),
  page?: long(name='page', description='The number of the page to return.', example='1', position='Query'),
  size?: long(name='size', description='The number of entries to return on each page.', example='1', position='Query'),
}

model ListRankingModelTemplatesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [
    RankingModelTemplate
  ](name='result'),
}

model ListRankingModelTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRankingModelTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRankingModelTemplates  ListRankingModelTemplatesRequest
  * @return ListRankingModelTemplatesResponse
 */
async function listRankingModelTemplates(request: ListRankingModelTemplatesRequest): ListRankingModelTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRankingModelTemplates', 'GET', '/v2/openapi/instances/{instanceId}/ranking-model-templates', 'json', false, 'json', request);
}

model ListRankingModelVersionsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  page?: long(name='page', description='The number of the page to return.', example='1', position='Query'),
  size?: long(name='size', description='The number of entries to return on each page.', example='10', position='Query'),
  status?: string(name='status', description='The state of the version. Valid values: DRAFT: The version is in the draft state. EFFECTIVE: The version is effective. PUBLISHING: The version is being published. INEFFECTIVE: The version has expired. FAILED: The version has not taken effect.', example='TRAINING', position='Query'),
  templateId: string(name='templateId', description='The ranking model ID.

This parameter is required.', example='a-a-a', position='Query'),
}

model ListRankingModelVersionsResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingModelVersion
  ](name='result', description='The returned result.'),
}

model ListRankingModelVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRankingModelVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRankingModelVersions  ListRankingModelVersionsRequest
  * @return ListRankingModelVersionsResponse
 */
async function listRankingModelVersions(request: ListRankingModelVersionsRequest): ListRankingModelVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRankingModelVersions', 'GET', '/v2/openapi/instances/{instanceId}/ranking-model-versions', 'json', false, 'json', request);
}

model ListRankingModelsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test001', position='Path'),
  page?: int32(name='page', example='1', minimum=1, maximum=2147483647, position='Query'),
  rankingModelId?: string(name='rankingModelId', example='xxx', position='Query'),
  size?: int32(name='size', minimum=1, maximum=2147483647, position='Query'),
}

model ListRankingModelsResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='2D898E45-B97A-4245-B590-6D0AFEAF626B'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified', example='2020-11-11T09:47:43.000Z'),
      meta?: map[string]any(name='meta'),
      rankingModelId?: string(name='rankingModelId', example='123'),
    }
  ](name='result'),
}

model ListRankingModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRankingModelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRankingModels  ListRankingModelsRequest
  * @return ListRankingModelsResponse
 */
async function listRankingModels(request: ListRankingModelsRequest): ListRankingModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRankingModels', 'GET', '/v2/openapi/instances/{instanceId}/ranking-models', 'json', false, 'json', request);
}

model ListRankingSystemHistoriesRequest {
  instanceId: string(name='instanceId', description='The name of the ranking service.

This parameter is required.', example='airec-test', position='Path'),
  name: string(name='name', description='The type of the operation. Valid values: CONF_CHANGE: configuration changes. DEPLOY_CHANGE: changes in deployment methods.

This parameter is required.', example='service-a', position='Path'),
  operateType?: string(name='operateType', description='The number of the page to return.', example='CONF_CHANGE', position='Query'),
  page?: long(name='page', description='The number of entries to return on each page.', example='1', position='Query'),
  size?: long(name='size', description='The schema of the response parameters.', example='10', position='Query'),
}

model ListRankingSystemHistoriesResponseBody = {
  requestId?: string(name='requestId', description='The returned result.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingSystemHistory
  ](name='result', description='The response body.'),
}

model ListRankingSystemHistoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRankingSystemHistoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRankingSystemHistories  ListRankingSystemHistoriesRequest
  * @return ListRankingSystemHistoriesResponse
 */
async function listRankingSystemHistories(request: ListRankingSystemHistoriesRequest): ListRankingSystemHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRankingSystemHistories', 'GET', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}/histories', 'json', false, 'json', request);
}

model ListRankingSystemsRequest {
  instanceId?: string(name='instanceId', description='Queries the list of ranking services.', example='airec-test', position='Path'),
  deployStatus?: string(name='deployStatus', description='The name of the ranking service.', example='NOT_DEPLOYED', position='Query'),
  name?: string(name='name', description='The ID of the instance.', example='service-a', position='Query'),
  page?: long(name='page', description='The state of the deployment. Valid values: NOT_DEPLOYED: The ranking service is not deployed. DEPLOY_SUCCESS: The ranking service is deployed.', example='1', position='Query'),
  size?: long(name='size', description='The number of the page to return.', example='10', position='Query'),
}

model ListRankingSystemsResponseBody = {
  requestId?: string(name='requestId', description='The schema of the response parameters.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingSystem
  ](name='result', description='The ID of the request.'),
}

model ListRankingSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRankingSystemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRankingSystems  ListRankingSystemsRequest
  * @return ListRankingSystemsResponse
 */
async function listRankingSystems(request: ListRankingSystemsRequest): ListRankingSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRankingSystems', 'GET', '/v2/openapi/instances/{instanceId}/ranking-systems', 'json', false, 'json', request);
}

model ListRuleConditionsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ListRuleConditionsResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      selectType?: string(name='selectType', description='The type of the filtering condition for the item selection rule.', example='QUERY_ITEM_TYPE'),
      selectValue?: string(name='selectValue', description='The specific value of the filtering condition for the item selection rule.', example='xxx'),
      selectionOperation?: string(name='selectionOperation', description='The operation on the filtering condition for the item selection rule.', example='QUERY_VALUE_IN'),
    }
  ](name='result', description='The returned results.'),
}

model ListRuleConditionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRuleConditionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRuleConditions  ListRuleConditionsRequest
  * @return ListRuleConditionsResponse
 */
async function listRuleConditions(request: ListRuleConditionsRequest): ListRuleConditionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuleConditions', 'GET', '/v2/openapi/instances/{instanceId}/rule-conditions', 'json', false, 'json', request);
}

model ListRuleTasksRequest {
  instanceId: string(name='instanceId', description='The ID of the scene.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='The completion rate of the task.

This parameter is required.', example='testid', position='Query'),
}

model ListRuleTasksResponseBody = {
  code?: string(name='code', description='Queries the status of a rule-specific task.', example='InternalServerError'),
  message?: string(name='message', description='The ID of the scene.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the instance.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    finishRate?: int32(name='finishRate', description='The ID of the instance.', example='50'),
    finishTime?: int32(name='finishTime', description='The ID of the request.', example='1588240081'),
  }(name='result', description='The error message.'),
}

model ListRuleTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRuleTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRuleTasks  ListRuleTasksRequest
  * @return ListRuleTasksResponse
 */
async function listRuleTasks(request: ListRuleTasksRequest): ListRuleTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuleTasks', 'GET', '/v2/openapi/instances/{instanceId}/rule-tasks', 'json', false, 'json', request);
}

model ListRulesRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime?: long(name='endTime', example='1567584765', minimum=1565193600, maximum=4102416000, position='Query'),
  page?: int32(name='page', example='1', minimum=1, maximum=2147483647, position='Query'),
  ruleType: string(name='ruleType', description='This parameter is required.', example='selection', position='Query'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='test', position='Query'),
  size?: int32(name='size', example='10', minimum=1, maximum=2147483647, position='Query'),
  startTime?: long(name='startTime', example='1567584765', minimum=1546300800, maximum=4102444800, position='Query'),
  status?: string(name='status', example='EFFECTIVE', position='Query'),
}

model ListRulesResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
      gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
      ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
      status?: string(name='status', example='true'),
    }
  ](name='result'),
}

model ListRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRules  ListRulesRequest
  * @return ListRulesResponse
 */
async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRules', 'GET', '/v2/openapi/instances/{instanceId}/rules', 'json', false, 'json', request);
}

model ListSampleFormatConfigsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', example='123', position='Path'),
}

model ListSampleFormatConfigsResponseBody = {
  requestId?: string(name='requestId', example='EDF43C1F-99E4-431F-A7C0-8B260A5A792E'),
  result?: map[string]any(name='result', example='xxx'),
}

model ListSampleFormatConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSampleFormatConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSampleFormatConfigs  ListSampleFormatConfigsRequest
  * @return ListSampleFormatConfigsResponse
 */
async function listSampleFormatConfigs(request: ListSampleFormatConfigsRequest): ListSampleFormatConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSampleFormatConfigs', 'GET', '/v2/openapi/instances/{instanceId}/samples/{sampleId}/format-configs', 'json', false, 'json', request);
}

model ListSamplesRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-shdjkgkeog', position='Path'),
  page?: long(name='page', example='1', position='Query'),
  sampleId?: string(name='sampleId', example='Sample1', position='Query'),
  size?: long(name='size', example='10', position='Query'),
}

model ListSamplesResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    Sample
  ](name='result', example='result'),
}

model ListSamplesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSamplesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSamples  ListSamplesRequest
  * @return ListSamplesResponse
 */
async function listSamples(request: ListSamplesRequest): ListSamplesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSamples', 'GET', '/v2/openapi/instances/{instanceId}/samples', 'json', false, 'json', request);
}

model ListSceneItemsRequest {
  instanceId: string(name='instanceId', description='GET openapi/instances/{instanceId}/scenes/{sceneId}/items?selectionRuleId=xxx&operrationRuleId=xxx

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='testid', position='Path'),
  operationRuleId?: string(name='operationRuleId', example='1', position='Query'),
  page?: int32(name='page', description='The scene ID.', example='1', minimum=1, maximum=2147483647, position='Query'),
  previewType?: string(name='previewType', description='The ID of the item selection rule.', example='PREVIEW_ITEM', position='Query'),
  queryCount?: int32(name='queryCount', description='The number of the page to return. Default value: 1.', example='20', minimum=1, maximum=2147483647, position='Query'),
  selectionRuleId?: string(name='selectionRuleId', description='The instance ID.', example='1', position='Query'),
  size?: int32(name='size', description='The ID of the operation rule.', example='10', minimum=0, maximum=128, position='Query'),
}

model ListSceneItemsResponseBody = {
  code?: string(name='code', description='The time spent on the page.', example='InternalServerError'),
  message?: string(name='message', description='The time when the item expires.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The author of the item.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', description='The channel of the item.', example='zhangsan'),
        brandId?: string(name='brandId', description='The item ID.', example='123'),
        categoryPath?: string(name='categoryPath', description='The number of items that can be recommended in the instance.', example='12_34'),
        channel?: string(name='channel', description='The brand ID.', example='The store ID.'),
        duration?: string(name='duration', description='The time when the item was published.', example='300'),
        expireTime?: string(name='expireTime', description='Entertainment', example='1612687809'),
        itemId?: string(name='itemId', description='The information about the preview results.', example='123'),
        itemType?: string(name='itemType', description='The title of the item.', example='video'),
        pubTime?: string(name='pubTime', description='Indicates whether the item can be recommended. Valid values: 1: The item can be recommended. 0: The item cannot be recommended.', example='1612687809'),
        shopId?: string(name='shopId', description='The type of the item.', example='123'),
        status?: string(name='status', description='The category path of the item.', example='1'),
        title?: string(name='title', description='The number of weighted items in the instance.', example='title'),
      }
    ](name='detail', description='The number of items that can be recommended in the scene.'),
    total?: {
      instanceRecommendItem?: long(name='instanceRecommendItem', description='The number of weighted items in the scene.', example='1000'),
      sceneRecommendItem?: long(name='sceneRecommendItem', description='The statistical results.', example='1000'),
      sceneWeightItem?: long(name='sceneWeightItem', description='The returned results.', example='1000'),
      totalCount?: long(name='totalCount', description='The number of queries.', example='1000'),
      weightItem?: long(name='weightItem', description='The total number of items in the instance.', example='1000'),
    }(name='total', description='The preview type. Valid values:

PREVIEW_ITEM: previews only the results that are returned based on item selection rules.

PREVIEW_QUERY: previews the results that are returned based on all configurations.'),
  }(name='result', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.'),
}

model ListSceneItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSceneItemsResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the Artificial Intelligence Recommendation (AIRec) console to manage scenes.
  * @param request  the request parameters of ListSceneItems  ListSceneItemsRequest
  * @return ListSceneItemsResponse
 */
async function listSceneItems(request: ListSceneItemsRequest): ListSceneItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSceneItems', 'GET', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/items', 'json', false, 'json', request);
}

model ListSceneParametersRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ListSceneParametersResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: {
    sceneId?: [ string ](name='sceneId'),
    traceId?: [ string ](name='traceId'),
  }(name='result'),
}

model ListSceneParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSceneParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSceneParameters  ListSceneParametersRequest
  * @return ListSceneParametersResponse
 */
async function listSceneParameters(request: ListSceneParametersRequest): ListSceneParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSceneParameters', 'GET', '/v2/openapi/instances/{instanceId}/dashboard/scene-parameters', 'json', false, 'json', request);
}

model ListScenesRequest {
  instanceId: string(name='instanceId', description='GET /openapi/instances/{airec-xxxx}/scenes

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  page?: int32(name='page', description='Specifies whether the item can be recommended.', example='1', minimum=1, maximum=2147483647, position='Query'),
  sceneId?: string(name='sceneId', description='The ID of the instance.', example='test', position='Query'),
  size?: int32(name='size', description='The ID of the scene.', example='10', minimum=1, maximum=2147483647, position='Query'),
  status?: string(name='status', example='1', position='Query'),
}

model ListScenesResponseBody = {
  code?: string(name='code', description='Indicates whether the item can be recommended.', example='InternalServerError'),
  message?: string(name='message', description='The error code.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The time when the scene was created.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', description='The time when the scene was last modified.', example='2020-04-23T06:08:48.000Z'),
      gmtModified?: string(name='gmtModified', description='The returned result.', example='2020-04-23T06:08:48.000Z'),
      sceneId?: string(name='sceneId', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='test'),
      status?: string(name='status', description='The ID of the scene.', example='1'),
    }
  ](name='result', description='The number of the page to return. Default value: 1.'),
}

model ListScenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScenesResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. Go to the Scenario Building page in the AIRec console to manage scenes.
  * @param request  the request parameters of ListScenes  ListScenesRequest
  * @return ListScenesResponse
 */
async function listScenes(request: ListScenesRequest): ListScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScenes', 'GET', '/v2/openapi/instances/{instanceId}/scenes', 'json', false, 'json', request);
}

model ListUmengAppkeysRequest {
}

model ListUmengAppkeysResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      appkey?: string(name='appkey', example='5ddcf39f57729e708b00000e'),
      name?: string(name='name', example='xxx'),
      platform?: string(name='platform', example='ios'),
    }
  ](name='result'),
}

model ListUmengAppkeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUmengAppkeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUmengAppkeys  ListUmengAppkeysRequest
  * @return ListUmengAppkeysResponse
 */
async function listUmengAppkeys(request: ListUmengAppkeysRequest): ListUmengAppkeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUmengAppkeys', 'GET', '/v2/openapi/umeng/appkeys', 'json', false, 'json', request);
}

model ListUserClustersRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
}

model ListUserClustersResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count', example='1'),
  }(name='headers'),
  requestId?: string(name='requestId', example='1E2CBBA8-C623-4FEE-BC84-9672E460CA39'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        description?: string(name='description', example='tst'),
        metaType?: string(name='metaType', example='UserCluster'),
      }(name='meta', description='meta'),
      name?: string(name='name', example='mycluster-for-airec'),
      status?: string(name='status', example='1'),
    }
  ](name='result'),
}

model ListUserClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserClusters  ListUserClustersRequest
  * @return ListUserClustersResponse
 */
async function listUserClusters(request: ListUserClustersRequest): ListUserClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserClusters', 'GET', '/v2/openapi/instances/{instanceId}/user-clusters', 'json', false, 'json', request);
}

model ModifyDataSourceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  tableName?: string(name='tableName', description='The name of the table.', example='behavior', position='Path'),
}

model ModifyDataSourceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the data source was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the data source was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      accessKeyId?: string(name='accessKeyId', description='The AccessKey ID of the Alibaba Cloud account.', example='xxx'),
      bucketName?: string(name='bucketName', description='The name of the Object Storage Service (OSS) bucket.', example='airec'),
      partition?: string(name='partition', description='The partition in the MaxCompute table.', example='ds=20181122'),
      path?: string(name='path', description='The path of the OSS data source.', example='oss://xxx.xxx'),
      projectName?: string(name='projectName', description='The name of the MaxCompute project.', example='openrec_gray'),
      tableName?: string(name='tableName', description='The name of the MaxCompute table.', example='test_maxcompute'),
      timestamp?: long(name='timestamp', description='The timestamp. The value must be accurate to the millisecond.', example='1544112000000'),
      type?: string(name='type', description='The type of the data source. Only MaxCompute is supported.', example='ODPS'),
    }(name='meta', description='The parameters of the data source.'),
    tableName?: string(name='tableName', description='The name of the table.', example='behavior'),
  }(name='result', description='The details about the data source.'),
}

model ModifyDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDataSource  ModifyDataSourceRequest
  * @return ModifyDataSourceResponse
 */
async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDataSource', 'PUT', '/v2/openapi/instances/{instanceId}/dataSources/{tableName}', 'json', false, 'json', request);
}

model ModifyFeatureTableRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-test', position='Path'),
  type: string(name='type', description='PUT /v2/openapi/instances/{instanceId}/feature-tables/{type}/{featureTableId}


{
    
        "metaType":"FeatureTable",
        "featureList":[
            {
                "featureName":"fn11",
                "fieldName":"fieldName11",
                "comment":"com11"
            },
            {
                "featureName":"fn22",
                "fieldName":"fieldName22",
                "comment":"com2222"
            }
        ]
    }
}

This parameter is required.', example='UserFeatureTable', position='Path'),
  featureTableId: string(name='featureTableId', description='The type of the feature table.

This parameter is required.', example='123', position='Path'),
}

model ModifyFeatureTableResponseBody = {
  requestId?: string(name='requestId', description='Modifies a feature table.', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: FeatureTable(name='result'),
}

model ModifyFeatureTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFeatureTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyFeatureTable  ModifyFeatureTableRequest
  * @return ModifyFeatureTableResponse
 */
async function modifyFeatureTable(request: ModifyFeatureTableRequest): ModifyFeatureTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFeatureTable', 'PUT', '/v2/openapi/instances/{instanceId}/feature-tables/{type}/{featureTableId}', 'json', false, 'json', request);
}

model ModifyFilteringAlgorithmMetaRequest {
  instanceId: string(name='instanceId', description='Indicates whether the scheduled task is enabled.

This parameter is required.', example='The request ID.', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', position='Path'),
}

model ModifyFilteringAlgorithmMetaResponseBody = {
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', example='abc'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', example='test'),
      category?: string(name='category', example='1_2'),
      clusterId?: string(name='clusterId', example='244'),
      cron?: string(name='cron', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled'),
      description?: string(name='description', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', example=','),
        kvSeparator?: string(name='kvSeparator', example=':'),
      }(name='extInfo'),
      metaType?: string(name='metaType', example='metaType'),
      projectName?: string(name='projectName', example='test'),
      tableName?: string(name='tableName', example='test_table'),
      taskId?: string(name='taskId', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', example='1'),
      }(name='threshold'),
      type?: string(name='type', example='ODPS'),
    }(name='meta'),
    status?: string(name='status', example='Running'),
  }(name='result'),
}

model ModifyFilteringAlgorithmMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFilteringAlgorithmMetaResponseBody(name='body'),
}

/**
  * @description The name of the filtering algorithm.
  * @param request  the request parameters of ModifyFilteringAlgorithmMeta  ModifyFilteringAlgorithmMetaRequest
  * @return ModifyFilteringAlgorithmMetaResponse
 */
async function modifyFilteringAlgorithmMeta(request: ModifyFilteringAlgorithmMetaRequest): ModifyFilteringAlgorithmMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFilteringAlgorithmMeta', 'PUT', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/meta', 'json', false, 'json', request);
}

model ModifyFlowControlTaskRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-zvp2tu7dz007', position='Path'),
  taskId?: string(name='taskId', description='The ID of the task.', example='1667297014460', position='Path'),
  taskName?: string(name='TaskName', description='The name of the task.', example='testname', position='Body'),
  description?: string(name='description', description='The description of the task.', example='Description', position='Body'),
  endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1639519200', position='Body'),
  metaType?: string(name='metaType', description='The type of the metadata.', example='FlowControlTask', position='Body'),
  sceneIds?: string(name='sceneIds', description='The ID of the scene.', example='all,sy101', position='Body'),
  selectionParams?: [ 
    {
      selectType?: string(name='selectType', description='The type of the filtering condition for the item selection rule.', example='invalidItem'),
      selectValue?: string(name='selectValue', description='The number of filtering conditions for the item selection rule.', example='20'),
      selectionOperation?: string(name='selectionOperation', description='The operation on the filtering condition for the item selection rule.', example='OPERATOR_HIGHER'),
    }
  ](name='selectionParams', description='The parameters specified for the item selection rule.', position='Body'),
  startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1638460800', position='Body'),
  target?: {
    type?: string(name='type', description='The type of the exposure.', example='EXPOSE_PERCENT'),
    value?: long(name='value', description='The number of exposures.', example='50'),
  }(name='target', description='The settings for item exposure.', position='Body'),
}

model ModifyFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This facilitates troubleshooting.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    taskId?: string(name='TaskId', description='The ID of the task.', example='1661506482'),
    gmtCreate?: string(name='gmtCreate', description='The time when the task was created.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the task was modified.', example='2020-11-11T09:47:43.000Z'),
    meta?: {
      description?: string(name='description', description='The description of the task.', example='tst'),
      endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1656518399'),
      metaType?: string(name='metaType', description='The type of the metadata.', example='FlowControlTask'),
      sceneIds?: string(name='sceneIds', description='The IDs of scenes.', example='1,2,3'),
      selectionParams?: [ 
        {
          selectType?: string(name='selectType', description='The type of the filtering condition for the item selection rule.', example='QUERY_PUB_TIME'),
          selectValue?: string(name='selectValue', description='The number of filtering conditions for the item selection rule.', example='10000'),
          selectionOperation?: string(name='selectionOperation', description='The operation on the filtering condition for the item selection rule.', example='OPERATOR_HIGHER'),
        }
      ](name='selectionParams', description='The parameters specified for the item selection rule.'),
      startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1640739600'),
      target?: {
        type?: string(name='type', description='The type of the exposure.', example='EXPOSE_PERCENT'),
        value?: long(name='value', description='The number of exposures.', example='20'),
      }(name='target', description='The settings for item exposure.'),
      taskName?: string(name='taskName', description='The name of the task.', example='Active user test'),
    }(name='meta', description='The metadata.'),
    status?: string(name='status', description='The state of the task.', example='DRAFT'),
  }(name='result', description='The returned result.'),
}

model ModifyFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyFlowControlTask  ModifyFlowControlTaskRequest
  * @return ModifyFlowControlTaskResponse
 */
async function modifyFlowControlTask(request: ModifyFlowControlTaskRequest): ModifyFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFlowControlTask', 'PUT', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-xxxxxx', position='Path'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    chargeType?: string(name='chargeType', description='The billing method. Valid values: PrePaid and PostPaid. Only the PrePaid billing method is supported.', example='PrePaid'),
    commodityCode?: string(name='commodityCode', description='The commodity code of the recommended item.', example='airecpre'),
    dataSetVersion?: string(name='dataSetVersion', description='The version of the dataset that provides online services.', example='20181206170353'),
    expiredTime?: string(name='expiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format.The time is displayed in UTC.', example='2019-01-06T16:00:00.000Z'),
    gmtCreate?: string(name='gmtCreate', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-06T06:14:01.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the instance was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-12-06T11:17:49.000Z'),
    industry?: string(name='industry', description='The type of the industry. Valid values: content, item, news, video, and sns.', example='news'),
    instanceId?: string(name='instanceId', description='The instance ID.', example='airec-cn-o400whm78004'),
    lockMode?: string(name='lockMode', description='The lock mode of the instance. Valid values: Unlock, ManualLock, and LockByExpiration.', example='Unlock'),
    name?: string(name='name', description='The name of the instance.', example='Test instance'),
    regionId?: string(name='regionId', description='The region where the instance resides.', example='cn-beijing'),
    status?: string(name='status', description='The state of the instance. Valid values: Initializing, Ready, and Running.', example='Running'),
    type?: string(name='type', description='The type of the instance. Only the Standard edition is supported.', example='Standard'),
  }(name='result', description='The returned results.'),
}

model ModifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstance  ModifyInstanceRequest
  * @return ModifyInstanceResponse
 */
async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyInstance', 'PUT', '/v2/openapi/instances/{instanceId}', 'json', false, 'json', request);
}

model ModifyItemsRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
}

model ModifyItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', example='true'),
}

model ModifyItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyItems  ModifyItemsRequest
  * @return ModifyItemsResponse
 */
async function modifyItems(request: ModifyItemsRequest): ModifyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyItems', 'POST', '/v2/openapi/instances/{instanceId}/items', 'json', false, 'json', request);
}

model ModifyOfflineStoragesRequest {
  instanceId: bytes(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test-xxx', position='Path'),
}

model ModifyOfflineStoragesResponseBody = {
  requestId?: bytes(name='requestId', description='The request ID.', example='7F176EE8-51DA-4B4D-8FFE-04448CD7A171'),
  result?: boolean(name='result', description='The returned result.', example='true'),
}

model ModifyOfflineStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOfflineStoragesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOfflineStorages  ModifyOfflineStoragesRequest
  * @return ModifyOfflineStoragesResponse
 */
async function modifyOfflineStorages(request: ModifyOfflineStoragesRequest): ModifyOfflineStoragesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyOfflineStorages', 'POST', '/v2/openapi/instances/[instanceId]/offlineStorages', 'json', false, 'json', request);
}

model ModifyRankingModelRequest {
  instanceId: string(name='instanceId', description='The time when the ranking model was modified.

This parameter is required.', example='airec-test', position='Path'),
  rankingModelId: string(name='rankingModelId', description='The time when the ranking model was created.

This parameter is required.', example='test1234', position='Path'),
}

model ModifyRankingModelResponseBody = {
  code?: string(name='code', example='1'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The error message.', example='2020-11-11T09:47:43.000Z'),
    gmtModified?: string(name='gmtModified', description='The ID of the request.', example='2020-11-11T09:47:43.000Z'),
    meta?: map[string]any(name='meta', description='__null__', example='{}'),
    rankingModelId?: string(name='rankingModelId', description='The error code.', example='test1234'),
  }(name='result', description='The data source of the filtering table. Only MaxCompute tables are supported.'),
}

model ModifyRankingModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRankingModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRankingModel  ModifyRankingModelRequest
  * @return ModifyRankingModelResponse
 */
async function modifyRankingModel(request: ModifyRankingModelRequest): ModifyRankingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyRankingModel', 'PUT', '/v2/openapi/instances/{instanceId}/ranking-models/{rankingModelId}', 'json', false, 'json', request);
}

model ModifyRankingModelTemplateRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  templateId: string(name='templateId', description='The ID of the ranking model.

This parameter is required.', example='a-a-a', position='Path'),
  body?: map[string]any(name='body', description='The request body.', example='{}', position='Body'),
}

model ModifyRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingModelTemplate(name='result', description='The information about the ranking model.'),
}

model ModifyRankingModelTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRankingModelTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRankingModelTemplate  ModifyRankingModelTemplateRequest
  * @return ModifyRankingModelTemplateResponse
 */
async function modifyRankingModelTemplate(request: ModifyRankingModelTemplateRequest): ModifyRankingModelTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyRankingModelTemplate', 'PUT', '/v2/openapi/instances/{instanceId}/ranking-model-templates/{templateId}', 'json', false, 'json', request);
}

model ModifyRankingSystemRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-test', position='Path'),
  name: string(name='name', description='The name of the ranking service.

This parameter is required.', example='"service-a', position='Path'),
  body?: map[string]any(name='body', description='The configurations that you want to modify.', example='{}', position='Body'),
}

model ModifyRankingSystemResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingSystem(name='result', description='The ranking service that was modified.'),
}

model ModifyRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRankingSystem  ModifyRankingSystemRequest
  * @return ModifyRankingSystemResponse
 */
async function modifyRankingSystem(request: ModifyRankingSystemRequest): ModifyRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyRankingSystem', 'PUT', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}', 'json', false, 'json', request);
}

model ModifyRuleRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  ruleId: string(name='ruleId', description='The ID of the rule.

This parameter is required.', example='xxx', position='Path'),
}

model ModifyRuleResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the rule was created.', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the rule was last modified.', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', description='The ID of the rule.', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    ruleMeta?: map[string]any(name='ruleMeta', description='The specific information about the rule.', example='xxx'),
    status?: string(name='status', description='Indicates whether the rule is enabled. Valid values: true and false.', example='true'),
  }(name='result', description='The returned result.'),
}

model ModifyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRule  ModifyRuleRequest
  * @return ModifyRuleResponse
 */
async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyRule', 'PUT', '/v2/openapi/instances/{instanceId}/rules/{ruleId}', 'json', false, 'json', request);
}

model ModifySampleRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  sampleId: string(name='sampleId', description='This parameter is required.', example='123', position='Path'),
  body?: map[string]any(name='body', position='Body'),
}

model ModifySampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model ModifySampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySample  ModifySampleRequest
  * @return ModifySampleResponse
 */
async function modifySample(request: ModifySampleRequest): ModifySampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifySample', 'PUT', '/v2/openapi/instances/{instanceId}/samples/{sampleId}', 'json', false, 'json', request);
}

model ModifySceneRequest {
  instanceId: string(name='instanceId', description='PUT openapi/instances/{instanceId}/scenes/{sceneId}

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', example='test', position='Path'),
}

model ModifySceneResponseBody = {
  code?: string(name='code', description='The state of the scene. Valid values: DRAFT: The scene is to be published. PUBLISHING: The scene is being published. FROZEN: The scene is frozen.', example='InternalServerError'),
  message?: string(name='message', description='The error code.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The time when the scene was created.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the scene was last modified.', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', description='The returned results.', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', description='The scene ID.', example='test'),
    status?: string(name='status', description='The scene ID.', example='DRAFT'),
  }(name='result', description='The instance ID.'),
}

model ModifySceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySceneResponseBody(name='body'),
}

/**
  * @description We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the Artificial Intelligence Recommendation (AIRec) console to manage scenes.
  * @param request  the request parameters of ModifyScene  ModifySceneRequest
  * @return ModifySceneResponse
 */
async function modifyScene(request: ModifySceneRequest): ModifySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyScene', 'PUT', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}', 'json', false, 'json', request);
}

model OfflineFilteringAlgorithmRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', example='test', position='Path'),
}

model OfflineFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', example='abc'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', example='test'),
      category?: string(name='category', example='1_2'),
      clusterId?: string(name='clusterId', example='244'),
      cron?: string(name='cron', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled'),
      description?: string(name='description', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', example=','),
        kvSeparator?: string(name='kvSeparator', example=':'),
      }(name='extInfo'),
      metaType?: string(name='metaType', example='metaType'),
      projectName?: string(name='projectName', example='test'),
      tableName?: string(name='tableName', example='test_table'),
      taskId?: string(name='taskId', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', example='1'),
      }(name='threshold'),
      type?: string(name='type', example='ODPS'),
    }(name='meta'),
    status?: string(name='status', example='Init'),
  }(name='result'),
}

model OfflineFilteringAlgorithmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineFilteringAlgorithmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineFilteringAlgorithm  OfflineFilteringAlgorithmRequest
  * @return OfflineFilteringAlgorithmResponse
 */
async function offlineFilteringAlgorithm(request: OfflineFilteringAlgorithmRequest): OfflineFilteringAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OfflineFilteringAlgorithm', 'POST', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/actions/offline', 'json', false, 'json', request);
}

model PublishFlowControlTaskRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1666669577221', position='Path'),
}

model PublishFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model PublishFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishFlowControlTask  PublishFlowControlTaskRequest
  * @return PublishFlowControlTaskResponse
 */
async function publishFlowControlTask(request: PublishFlowControlTaskRequest): PublishFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishFlowControlTask', 'PUT', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/actions/publish', 'json', false, 'json', request);
}

model PublishRuleRequest {
  ruleId: string(name='ruleId', description='The rule ID.

This parameter is required.', example='98493A14-D619-4E88-9F8D-108939817F9F', position='Path'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  ruleType: string(name='ruleType', description='The type of the rule. Example: selection and operation.

This parameter is required.', example='selection', position='Query'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='test', position='Query'),
}

model PublishRuleResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    ruleId?: string(name='ruleId', description='The rule ID.', example='98493A14-D619-4E88-9F8D-108939817F9F'),
  }(name='result', description='The returned result.'),
}

model PublishRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishRule  PublishRuleRequest
  * @return PublishRuleResponse
 */
async function publishRule(request: PublishRuleRequest): PublishRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishRule', 'PUT', '/v2/openapi/instances/{instanceId}/rules/{ruleId}/actions/publish', 'json', false, 'json', request);
}

model PushColdStartDocumentRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  tableName?: string(name='tableName', example='behavior', position='Path'),
  body?: [ 
    {
      cmd?: string(name='cmd', example='add'),
      fields?: any(name='fields', example='userId'),
    }
  ](name='body', position='Body'),
}

model PushColdStartDocumentResponseBody = {
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: boolean(name='result', example='True'),
}

model PushColdStartDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushColdStartDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushColdStartDocument  PushColdStartDocumentRequest
  * @return PushColdStartDocumentResponse
 */
async function pushColdStartDocument(request: PushColdStartDocumentRequest): PushColdStartDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushColdStartDocument', 'POST', '/v2/openapi/instances/cold-start/{instanceId}/tables/{tableName}/actions/bulk', 'json', false, 'json', request);
}

model PushDocumentRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  tableName: string(name='tableName', description='This parameter is required.', example='user', position='Path'),
}

model PushDocumentResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', description='true/false', example='true'),
}

model PushDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushDocument  PushDocumentRequest
  * @return PushDocumentResponse
 */
async function pushDocument(request: PushDocumentRequest): PushDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushDocument', 'POST', '/v2/openapi/instances/{instanceId}/tables/{tableName}/actions/bulk', 'json', false, 'json', request);
}

model PushInterventionRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
}

model PushInterventionResponseBody = {
  code?: string(name='code', example='1'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model PushInterventionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushInterventionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushIntervention  PushInterventionRequest
  * @return PushInterventionResponse
 */
async function pushIntervention(request: PushInterventionRequest): PushInterventionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushIntervention', 'POST', '/v2/openapi/instances/{instanceId}/actions/intervene', 'json', false, 'json', request);
}

model QueryDataMessageRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  table: string(name='table', description='This parameter is required.', example='item', position='Path'),
  bhvType?: string(name='bhvType', example='expose', position='Query'),
  cmdType?: string(name='cmdType', example='update', position='Query'),
  endTime: long(name='endTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  imei?: string(name='imei', position='Query'),
  itemId?: string(name='itemId', example='111', position='Query'),
  itemType?: string(name='itemType', example='video', position='Query'),
  messageSource?: string(name='messageSource', example='CONSOLE', position='Query'),
  page?: int32(name='page', example='1', minimum=1, maximum=2147483647, position='Query'),
  sceneId?: string(name='sceneId', example='test', position='Query'),
  size?: int32(name='size', example='20', minimum=1, maximum=2147483647, position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  traceId?: string(name='traceId', example='Alibaba', position='Query'),
  userId?: string(name='userId', example='222', position='Query'),
  userType?: string(name='userType', example='app', position='Query'),
}

model QueryDataMessageResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QueryDataMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDataMessage  QueryDataMessageRequest
  * @return QueryDataMessageResponse
 */
async function queryDataMessage(request: QueryDataMessageRequest): QueryDataMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDataMessage', 'GET', '/v2/openapi/instances/{instanceId}/tables/{table}/data-message', 'json', false, 'json', request);
}

model QueryDataMessageStatisticsRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  table: string(name='table', description='The name of the table. Valid values: item and user.

This parameter is required.', example='item', position='Path'),
  bhvType?: string(name='bhvType', description='The type of behaviors. Valid values: expose, click, like, comment, collect, stay, cart, buy, and evaluate.', example='expose', position='Query'),
  cmdType?: string(name='cmdType', description='The type of the operation. Valid values: update, delete, and add.', example='update', position='Query'),
  endTime: long(name='endTime', description='The end time. The value is a timestamp in seconds.

This parameter is required.', example='1586673466', minimum=946656000, maximum=4102416000, position='Query'),
  imei?: string(name='imei', position='Query'),
  itemId?: string(name='itemId', description='The ID of the item. This parameter is required when the value of table is set to item.', example='111', position='Query'),
  itemType?: string(name='itemType', description='The type of the item. This parameter is required when the value of table is set to item.', example='video', position='Query'),
  messageSource?: string(name='messageSource', description='The source of the operation. Valid values:

CONSOLE and FEEDER.', example='FEEDER', position='Query'),
  sceneId?: string(name='sceneId', description='The scene ID.', example='test', position='Query'),
  startTime: long(name='startTime', description='The start time. The value is a timestamp in seconds.

This parameter is required.', example='1586673466', minimum=946656000, maximum=4102416000, position='Query'),
  traceId?: string(name='traceId', description='The event tracking ID.', example='Alibaba', position='Query'),
  userId?: string(name='userId', description='The ID of the user. This parameter is required when the value of table is set to user.', example='222', position='Query'),
  userType?: string(name='userType', description='The type of the user. This parameter is required when the value of table is set to user.', example='app', position='Query'),
}

model QueryDataMessageStatisticsResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', description='The returned result.', example='xxx'),
}

model QueryDataMessageStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataMessageStatisticsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query statistics on update messages in a specified data table of a specified instance.
  * @param request  the request parameters of QueryDataMessageStatistics  QueryDataMessageStatisticsRequest
  * @return QueryDataMessageStatisticsResponse
 */
async function queryDataMessageStatistics(request: QueryDataMessageStatisticsRequest): QueryDataMessageStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDataMessageStatistics', 'GET', '/v2/openapi/instances/{instanceId}/tables/{table}/data-message-statistics', 'json', false, 'json', request);
}

model QueryExceptionHistoryRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  type: string(name='type', description='This parameter is required.', position='Query'),
}

model QueryExceptionHistoryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result'),
}

model QueryExceptionHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExceptionHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExceptionHistory  QueryExceptionHistoryRequest
  * @return QueryExceptionHistoryResponse
 */
async function queryExceptionHistory(request: QueryExceptionHistoryRequest): QueryExceptionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryExceptionHistory', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/exception-history', 'json', false, 'json', request);
}

model QueryRawDataRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  table: string(name='table', description='The name of the table. Valid values: item and user.

This parameter is required.', example='item', position='Path'),
  imei?: string(name='imei', position='Query'),
  itemId?: string(name='itemId', description='The item ID. This parameter is required when the table parameter is set to item.', example='112', position='Query'),
  itemType?: string(name='itemType', description='The type of the item. This parameter is required when the table parameter is set to item.', example='video', position='Query'),
  userId?: string(name='userId', description='The user ID. This parameter is required when the table parameter is set to user.', example='111', position='Query'),
  userType?: string(name='userType', description='The type of the user. This parameter is required when the table parameter is set to user.', example='app', position='Query'),
}

model QueryRawDataResponseBody = {
  message?: string(name='Message', description='The error message.', example='An internal server error occurred'),
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', description='The returned result.', example='xxx'),
}

model QueryRawDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRawDataResponseBody(name='body'),
}

/**
  * @description You can call this operation to query raw data in a specific data table of an instance by using the primary key. The returned results need to be confirmed by customers.
  * @param request  the request parameters of QueryRawData  QueryRawDataRequest
  * @return QueryRawDataResponse
 */
async function queryRawData(request: QueryRawDataRequest): QueryRawDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryRawData', 'GET', '/v2/openapi/instances/{instanceId}/tables/{table}/raw-data', 'json', false, 'json', request);
}

model QuerySingleAggregationReportRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model QuerySingleAggregationReportResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result'),
}

model QuerySingleAggregationReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleAggregationReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySingleAggregationReport  QuerySingleAggregationReportRequest
  * @return QuerySingleAggregationReportResponse
 */
async function querySingleAggregationReport(request: QuerySingleAggregationReportRequest): QuerySingleAggregationReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySingleAggregationReport', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/single-aggregation-report', 'json', false, 'json', request);
}

model QuerySingleReportRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  reportType: string(name='reportType', description='The type of the single table report. This parameter is required.

Valid values: typeItemValidScene,

typeItemTag,

typeItemTagScene,

typeItemWeightScene,

typeItemRawScene, and

typeItemExpireScene

This parameter is required.', example='typeItemTagScene', position='Query'),
}

model QuerySingleReportResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', description='The returned result.', example='xxx'),
}

model QuerySingleReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySingleReport  QuerySingleReportRequest
  * @return QuerySingleReportResponse
 */
async function querySingleReport(request: QuerySingleReportRequest): QuerySingleReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySingleReport', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/single-report', 'json', false, 'json', request);
}

model QuerySyncReportAggregationRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  endTime: long(name='endTime', description='The end time. The value is a timestamp in seconds.

This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
  startTime: long(name='startTime', description='The start time. The value is a timestamp in seconds.

This parameter is required.', example='1586673466', minimum=1565193600, maximum=4102416000, position='Query'),
}

model QuerySyncReportAggregationResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', description='The returned results.', example='xxx'),
}

model QuerySyncReportAggregationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySyncReportAggregationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySyncReportAggregation  QuerySyncReportAggregationRequest
  * @return QuerySyncReportAggregationResponse
 */
async function querySyncReportAggregation(request: QuerySyncReportAggregationRequest): QuerySyncReportAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySyncReportAggregation', 'GET', '/v2/openapi/instances/{instanceId}/sync-reports/aggregation', 'json', false, 'json', request);
}

model RebuildIndexRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='The algorithm ID.

This parameter is required.', example='123', position='Path'),
}

model RebuildIndexResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: string(name='result', description='The returned result.', example='true'),
}

model RebuildIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebuildIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebuildIndex  RebuildIndexRequest
  * @return RebuildIndexResponse
 */
async function rebuildIndex(request: RebuildIndexRequest): RebuildIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RebuildIndex', 'POST', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/actions/rebuild', 'json', false, 'json', request);
}

model RecommendRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-test001', position='Path'),
  filter?: string(name='filter', description='The status of the execution.', example='eyJqb2luIjoiYW5kIiwiZmlsdGVycyI6W3siY29uZCI6ImNvbnRhaW4iLCJmaWVsZCI6InRhZ3MiLCJ2YWx1ZSI6IuWPjOS6uiJ9XX0.', position='Query'),
  imei?: string(name='imei', description='The ID of the scene in which the item is to be recommended.', example='06e1565409c9fc4887036b974421****', position='Query'),
  ip?: string(name='ip', description='The HTTP status code.', example='192.168.1.1', position='Query'),
  items?: string(name='items', description='The information about event tracking. The value of this parameter varies based on different items and needs to be uploaded together with the corresponding behavior data.', example='1001', position='Query'),
  rankOpen?: boolean(name='rankOpen', description='N/A', example='true', position='Query'),
  recType?: string(name='recType', description='The type of the recommended item.', example='gul', position='Query'),
  returnCount: int32(name='returnCount', description='The returned results.

This parameter is required.', example='10', position='Query'),
  sceneId?: string(name='sceneId', description='The number of result entries to return. Valid values: 0 to 50.', example='test', position='Query'),
  serviceType?: string(name='serviceType', description='The position at which the recommended item is displayed. The position number starts from 0. The return results are ranked by position. You can ignore this parameter.', example='1', position='Query'),
  strategy?: string(name='strategy', description='如果需要使用坑位策略，请求参数内新增strategy="fixedSlot"，此时系统将按照坑位配置返回推荐结果', example='fixedSlot', position='Query'),
  userId?: string(name='userId', description='The items used for related recommendations in specified scenes.', example='123', position='Query'),
  userInfo?: string(name='userInfo', description='The ID of the request.', example='1', position='Query'),
}

model RecommendResponseBody = {
  code?: string(name='code', description='This parameter may be used in the debugging process. You can ignore this parameter.', example='200'),
  message?: string(name='message', description='Queries the recommendation results of a specified instance.', example='"i2i_common_common;NotFound;1673254401;similar product/content of clicked ones;2023-01-09 16:53:21"'),
  requestId?: string(name='requestId', description='The weight of the specified process.', example='04707E49-642A-4649-827A-F8EEB07D4C27'),
  result?: [ 
    {
      flowWeight?: double(name='flowWeight', description='The ID of the device.', example='0'),
      itemId?: string(name='itemId', description='The returned results.', example='123'),
      itemType?: string(name='itemType', description='The ID of the recommended item.', example='item'),
      matchInfo?: string(name='matchInfo', description='N/A', example='xxx'),
      message?: string(name='message', description='The event tracking ID. This parameter is uploaded together with user behaviors on the recommended item. In this case, the value of this parameter is ali.', example='Successful'),
      position?: int32(name='position', description='The string for filtering during recommendation.', example='1'),
      traceId?: string(name='traceId', description='The status of the execution.', example='ali'),
      traceInfo?: string(name='traceInfo', description='Specifies whether to perform personalized ranking based on the user IDs in the filtering and ranking phases.', example='"1007.62381.131491.100200300000000:bcb946ed-3f09-4e9b-bf4a-c19862f42231:792783::0:s101:::15:content___130788_stall:item:i2i_common_common:0.0205279946753756:null:null:1673258031504::context__recall_index=156,context__hour=17,context__trigger_num=2::C7EF99C9-6C55-5D45-A8D5-0754082E9DCF:hot_common,i2i_common_common,i2i_swing_common,hot_full:::::"'),
      weight?: float(name='weight', description='The weight of the recommended item.', example='1'),
    }
  ](name='result', description='The unique ID of the user.'),
}

model RecommendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecommendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Recommend  RecommendRequest
  * @return RecommendResponse
 */
async function recommend(request: RecommendRequest): RecommendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Recommend', 'GET', '/v2/openapi/instances/{instanceId}/actions/recommend', 'json', false, 'json', request);
}

model RefreshFeatureTableRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  type: string(name='type', description='The type of the feature table.

This parameter is required.', example='xxx', position='Path'),
  featureTableId: string(name='featureTableId', description='The feature table ID.

This parameter is required.', example='123', position='Path'),
}

model RefreshFeatureTableResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: FeatureTable(name='result'),
}

model RefreshFeatureTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshFeatureTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshFeatureTable  RefreshFeatureTableRequest
  * @return RefreshFeatureTableResponse
 */
async function refreshFeatureTable(request: RefreshFeatureTableRequest): RefreshFeatureTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshFeatureTable', 'PUT', '/v2/openapi/instances/{instanceId}/feature-tables/{type}/{featureTableId}/actions/refresh', 'json', false, 'json', request);
}

model RollbackRankingSystemRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-****', position='Path'),
  name: string(name='name', description='This parameter is required.', example='service-a', position='Path'),
  body?: map[string]any(name='body', example='{
	"operateId": "a-b-c"
}', position='Body'),
}

model RollbackRankingSystemResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: map[string]any(name='result'),
}

model RollbackRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RollbackRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RollbackRankingSystem  RollbackRankingSystemRequest
  * @return RollbackRankingSystemResponse
 */
async function rollbackRankingSystem(request: RollbackRankingSystemRequest): RollbackRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RollbackRankingSystem', 'POST', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}/actions/rollback', 'json', false, 'json', request);
}

model RunInstanceRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-cn-xxxxxxxx', position='Path'),
}

model RunInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The request ID.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', description='Indicates whether a dataset was created.', example='false'),
}

model RunInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunInstanceResponseBody(name='body'),
}

/**
  * @description You can call this API operation to run an instance to start a full data import task. After you call this API operation, the system creates a dataset. Then, the system imports all data from your data sources into the dataset for data training.
  * @param request  the request parameters of RunInstance  RunInstanceRequest
  * @return RunInstanceResponse
 */
async function runInstance(request: RunInstanceRequest): RunInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunInstance', 'POST', '/v2/openapi/instances/{instanceId}/actions/import', 'json', false, 'json', request);
}

model RunRankingModelTemplateRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  templateId: string(name='templateId', description='This parameter is required.', example='123', position='Path'),
}

model RunRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: map[string]any(name='result', example='xxx'),
}

model RunRankingModelTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunRankingModelTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunRankingModelTemplate  RunRankingModelTemplateRequest
  * @return RunRankingModelTemplateResponse
 */
async function runRankingModelTemplate(request: RunRankingModelTemplateRequest): RunRankingModelTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunRankingModelTemplate', 'POST', '/v2/openapi/instances/{instanceId}/ranking-model-templates/{templateId}/actions/run', 'json', false, 'json', request);
}

model RunSampleFormatConfigRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  sampleId: string(name='sampleId', description='The sample ID.

This parameter is required.', example='123', position='Path'),
  mode?: string(name='mode', description='The mode of the formatting. Default value: Latest. This value indicates that the latest formatting configurations are used.', example='latest', position='Query'),
}

model RunSampleFormatConfigResponseBody = {
  requestId?: string(name='requestId', description='The instance ID.', example='airec-test'),
  result?: boolean(name='result', description='Indicates whether the sample formatting configurations are triggered.', example='true'),
}

model RunSampleFormatConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSampleFormatConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSampleFormatConfig  RunSampleFormatConfigRequest
  * @return RunSampleFormatConfigResponse
 */
async function runSampleFormatConfig(request: RunSampleFormatConfigRequest): RunSampleFormatConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunSampleFormatConfig', 'PUT', '/v2/openapi/instances/{instanceId}/samples/{sampleId}/format-configs/actions/run', 'json', false, 'json', request);
}

model StopDataSetRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
  versionId: string(name='versionId', description='This parameter is required.', example='20181023214546', position='Path'),
}

model StopDataSetResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', example='1544112000000'),
    gmtModified?: long(name='gmtModified', example='1544112000000'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    state?: string(name='state', example='Importing'),
    versionId?: string(name='versionId', example='20181023214546'),
  }(name='result'),
}

model StopDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDataSet  StopDataSetRequest
  * @return StopDataSetResponse
 */
async function stopDataSet(request: StopDataSetRequest): StopDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopDataSet', 'POST', '/v2/openapi/instances/{instanceId}/dataSets/{versionId}/actions/stop', 'json', false, 'json', request);
}

model StopFlowControlTaskRequest {
  instanceId?: string(name='instanceId', example='airec-cn-****', position='Path'),
  taskId?: string(name='taskId', example='1666854602398', position='Path'),
}

model StopFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model StopFlowControlTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopFlowControlTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopFlowControlTask  StopFlowControlTaskRequest
  * @return StopFlowControlTaskResponse
 */
async function stopFlowControlTask(request: StopFlowControlTaskRequest): StopFlowControlTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopFlowControlTask', 'PUT', '/v2/openapi/instances/{instanceId}/flowControlTasks/{taskId}/actions/stop', 'json', false, 'json', request);
}

model UnLockIndexVersionRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-test', position='Path'),
  algorithmId: string(name='algorithmId', description='This parameter is required.', example='abc', position='Path'),
}

model UnLockIndexVersionResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model UnLockIndexVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnLockIndexVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnLockIndexVersion  UnLockIndexVersionRequest
  * @return UnLockIndexVersionResponse
 */
async function unLockIndexVersion(request: UnLockIndexVersionRequest): UnLockIndexVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnLockIndexVersion', 'POST', '/v2/openapi/instances/{instanceId}/filtering-algorithms/{algorithmId}/actions/unlock', 'json', false, 'json', request);
}

model UpdateExperimentBasicInfoRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='test', position='Path'),
  experimentId: string(name='experimentId', description='The experiment ID.

This parameter is required.', example='12345', position='Path'),
}

model UpdateExperimentBasicInfoResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', description='The category of the algorithm.', example='2'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', description='The default value of the algorithm configuration item.', example='true'),
            experimentValue?: string(name='experimentValue', description='The custom value of the algorithm configuration item.', example='400'),
            key?: string(name='key', description='The key of the algorithm configuration item.', example='I2I'),
            name?: string(name='name', description='The name of the algorithm configuration item.', example='I2I filtering algorithm'),
          }
        ](name='config', description='The information about the child configuration item.'),
        defaultValue?: string(name='defaultValue', description='The default value of the algorithm.', example='400'),
        experimentValue?: string(name='experimentValue', description='The custom value of the algorithm.', example='400'),
        hasConfig?: boolean(name='hasConfig', description='Indicates whether child configuration items exist. Valid values: true and false.', example='false'),
        key?: string(name='key', description='The key of the algorithm.', example='I2I'),
        name?: string(name='name', description='The name of the experiment.', example='test'),
        type?: string(name='type', description='The type of the algorithm.', example='SYSTEM'),
      }
    ](name='algorithms', description='The parameters of the experiment.'),
    base?: boolean(name='base', description='Indicates whether the experiment uses default configurations.', example='true'),
    buckets?: [ string ](name='buckets', description='The traffic buckets.'),
    description?: string(name='description', description='The description of the experiment.', example='demo1'),
    experimentId?: string(name='experimentId', description='The experiment ID.', example='12345'),
    name?: string(name='name', description='The name of the experiment.', example='test'),
    offlineTime?: string(name='offlineTime', description='The time when the experiment was unpublished.', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', description='The time when the experiment was published.', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', description='The status of the experiment.', example='1'),
  }(name='result', description='The information about the experiment.'),
}

model UpdateExperimentBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperimentBasicInfo  UpdateExperimentBasicInfoRequest
  * @return UpdateExperimentBasicInfoResponse
 */
async function updateExperimentBasicInfo(request: UpdateExperimentBasicInfoRequest): UpdateExperimentBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperimentBasicInfo', 'PUT', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}/basic', 'json', false, 'json', request);
}

model UpdateExperimentConfigRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Path'),
  sceneId: string(name='sceneId', description='This parameter is required.', position='Path'),
  experimentId: string(name='experimentId', description='This parameter is required.', example='12345', position='Path'),
}

model UpdateExperimentConfigResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='true'),
            key?: string(name='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='400'),
        experimentValue?: string(name='experimentValue', example='300'),
        hasConfig?: boolean(name='hasConfig', example='true'),
        key?: string(name='key', example='I2I'),
        name?: string(name='name', example='xxx'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='demo1'),
    experimentId?: string(name='experimentId', example='xxx'),
    name?: string(name='name'),
    offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
    status?: string(name='status', example='Online'),
  }(name='result'),
}

model UpdateExperimentConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperimentConfig  UpdateExperimentConfigRequest
  * @return UpdateExperimentConfigResponse
 */
async function updateExperimentConfig(request: UpdateExperimentConfigRequest): UpdateExperimentConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperimentConfig', 'PUT', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}/config', 'json', false, 'json', request);
}

model UpdateExperimentStatusRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='airec-test', position='Path'),
  sceneId: string(name='sceneId', description='The scene ID.

This parameter is required.', example='test', position='Path'),
  experimentId: string(name='experimentId', description='The experiment ID.

This parameter is required.', example='123', position='Path'),
}

model UpdateExperimentStatusResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', description='The algorithm category. Valid values: RECALL and RANK.', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', description='The default value of the algorithm. If you set key to i2i, hot, or new, the value of this parameter is true or false. If you set key to mtorder, the value of this parameter is a list of filtering algorithms ranked by priority.', example='xxx'),
            experimentValue?: string(name='experimentValue', description='The custom value of the algorithm.', example='xxx'),
            key?: string(name='key', description='The algorithm key. Valid values: i2i: the I2I filtering algorithm. u2x2i: the U2X2I filtering algorithm. hot: the filtering algorithm for popular items. new: the filtering algorithm for new items. embedding: the vector filtering algorithm. mtorder: the priority of the filtering algorithm. rankservice: the ranking service.', example='hot'),
            name?: string(name='name', description='The algorithm name. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)', example='xxx'),
          }
        ](name='config', description='The experiment configurations.'),
        defaultValue?: string(name='defaultValue', description='The default value of the algorithm configuration item.', example='swing'),
        experimentValue?: string(name='experimentValue', description='The custom value of the algorithm configuration item.', example='xxx'),
        hasConfig?: boolean(name='hasConfig', description='Indicates whether child configuration items exist. Valid values: true and false.', example='false'),
        key?: string(name='key', description='The algorithm key. Valid values: i2i: the I2I filtering algorithm. u2x2i: the U2X2I filtering algorithm. hot: the filtering algorithm for popular items. new: the filtering algorithm for new items. embedding: the vector filtering algorithm. mtorder: the priority of the filtering algorithm. rankservice: the ranking service.', example='hot'),
        name?: string(name='name', description='The algorithm name. (Note: If you use the default algorithm, the console obtains the algorithm name from Medusa. If you customize an algorithm for the experiment, the algorithm name is directly returned.)', example='xxx'),
        type?: string(name='type', description='The algorithm type. Valid values: SYSTEM and CUSTOM.', example='SYSTEM'),
      }
    ](name='algorithms', description='The algorithm configurations.'),
    base?: boolean(name='base', description='Indicates whether the default configurations are used for the experiment.', example='true'),
    buckets?: [ string ](name='buckets', description='The buckets. This parameter takes effect only when the experiment is published.'),
    description?: string(name='description', description='The remarks of the experiment.', example='xxx'),
    experimentId?: string(name='experimentId', description='The experiment ID.', example='123'),
    name?: string(name='name', description='The experiment name.', example='test'),
    offlineTime?: string(name='offlineTime', description='The time when the experiment was unpublished.', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', description='The time when the experiment was published.', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', description='The experiment state. Valid values: init, online, finish, and offline.', example='init'),
  }(name='result', description='The returned result.'),
}

model UpdateExperimentStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperimentStatus  UpdateExperimentStatusRequest
  * @return UpdateExperimentStatusResponse
 */
async function updateExperimentStatus(request: UpdateExperimentStatusRequest): UpdateExperimentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperimentStatus', 'PUT', '/v2/openapi/instances/{instanceId}/scenes/{sceneId}/experiments/{experimentId}/status', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='airec-cn-xxxxxx', position='Path'),
}

model UpgradeInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-o400whm78004'),
  }(name='result', description='The returned results.'),
}

model UpgradeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeInstanceResponseBody(name='body'),
}

/**
  * @description You can call this operation to modify the quotas of a specified instance.
  * The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) for recommendation requests: 10 to 500.
  * @param request  the request parameters of UpgradeInstance  UpgradeInstanceRequest
  * @return UpgradeInstanceResponse
 */
async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeInstance', 'POST', '/v2/openapi/instances/{instanceId}/actions/upgrade', 'json', false, 'json', request);
}

model ValidateInstanceRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-o400whm78004', position='Path'),
}

model ValidateInstanceResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: boolean(name='result', example='true'),
}

model ValidateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateInstance  ValidateInstanceRequest
  * @return ValidateInstanceResponse
 */
async function validateInstance(request: ValidateInstanceRequest): ValidateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateInstance', 'POST', '/v2/openapi/instances/{instanceId}/actions/validate', 'json', false, 'json', request);
}

model VerifyRankingSystemRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', example='airec-cn-****', position='Path'),
  name: string(name='name', description='This parameter is required.', example='service-a', position='Path'),
  body?: map[string]any(name='body', example='{
  "userFeatures": "a:c,d:b",
  "itemFeatures": "a:1,b:2"
}', position='Body'),
}

model VerifyRankingSystemResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: string(name='result', example='test'),
}

model VerifyRankingSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyRankingSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyRankingSystem  VerifyRankingSystemRequest
  * @return VerifyRankingSystemResponse
 */
async function verifyRankingSystem(request: VerifyRankingSystemRequest): VerifyRankingSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VerifyRankingSystem', 'POST', '/v2/openapi/instances/{instanceId}/ranking-systems/{name}/actions/verify', 'json', false, 'json', request);
}

