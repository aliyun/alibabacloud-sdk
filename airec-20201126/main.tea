/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('airec', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ExtraDataSource {
  dataSourceId?: string(name='DataSourceId', example='E01D574F-ABD0-4C55-A5E3-8D24FD8D42EA'),
  gmtCreate?: string(name='GmtCreate', example='2021-12-07T13:26:29.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-07T13:26:29.000Z'),
  meta?: {
    internal?: boolean(name='Internal', example='true'),
    metaType?: string(name='MetaType', example='ExtraDataSource'),
    projectName?: string(name='ProjectName', example='test_project'),
    tableName?: string(name='TableName', example='test_table'),
    type?: string(name='Type', example='ODPS'),
    updateFrequency?: long(name='UpdateFrequency', example='86400'),
  }(name='Meta'),
  status?: string(name='Status', example='Ready 待应用；Online 已应用；Failed失败'),
  type?: string(name='Type', example='UserCustomDataSource、ItemCustomDataSource、BehaviorCustomDataSource、SampleCustomDataSource'),
}

model FeatureTable {
  featureTableId?: string(name='FeatureTableId', example='30E70118-FC7C-4438-9287-583CE47266A9'),
  gmtCreate?: string(name='GmtCreate', example='2021-12-10T02:59:54.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-10T02:59:54.000Z'),
  meta?: {
    dataSourceId?: string(name='DataSourceId', example='907648f5-abae-44fd-a4c4-525cc25947e9'),
    featureList?: [ 
      {
        comment?: string(name='Comment', example='com11'),
        featureName?: string(name='FeatureName', example='fn11'),
        fieldName?: string(name='FieldName', example='fieldName11'),
        status?: string(name='Status', example='NotApplied 未应用 Applied 已应用'),
      }
    ](name='FeatureList'),
    internal?: boolean(name='Internal', example='true'),
    metaType?: string(name='MetaType', example='FeatureTable'),
    source?: string(name='Source', example='test_project.test_table'),
    updateFrequency?: long(name='UpdateFrequency', example='86400'),
  }(name='Meta'),
  status?: string(name='Status'),
  type?: string(name='Type', example='ItemFeatureTable 物品特征表 UserFeatureTable 用户特征表'),
}

model RankingModelTemplate {
  meta?: {
    authorized?: boolean(name='Authorized', example='true'),
    autoRun?: boolean(name='AutoRun', example='true'),
    autoRunTime?: long(name='AutoRunTime', example='1'),
    autoRunType?: string(name='AutoRunType', example='DAY'),
    canDeploy?: boolean(name='CanDeploy', example='true'),
    conf?: string(name='Conf', example='train_config {}'),
    deployStatus?: string(name='DeployStatus', example='NOT_DEPLOYED'),
    lastEditTime?: string(name='LastEditTime', example='2021-12-06T03:01:41.217Z'),
    name?: string(name='Name', example='模型A'),
    ossArn?: string(name='OssArn', example='acs:ram::111:role/aliyunodpspaidefaultrole'),
    ossBucket?: string(name='OssBucket', example='bucket-a'),
    ossEndpoint?: string(name='OssEndpoint', example='oss-cn-beijing.aliyuncs.com'),
    sampleId?: string(name='SampleId', example='1111'),
    sampleName?: string(name='SampleName', example='样本1'),
    sampleTimeWindow?: long(name='SampleTimeWindow', example='3'),
    sampleTimeWindowType?: string(name='SampleTimeWindowType', example='DAY'),
    type?: string(name='Type', example='MULTI_TOWER'),
  }(name='Meta'),
  status?: string(name='Status', example='TRAINING_SUCCESS'),
  templateId?: string(name='TemplateId', example='a-a-a'),
  versionNum?: long(name='VersionNum', example='3'),
}

model RankingModelVersion {
  name?: string(name='Name', example='模型A_t1638964800000'),
  runLog?: string(name='RunLog'),
  runResult?: {
    assessAuc?: string(name='AssessAuc', example='0.3'),
    assessGauc?: string(name='AssessGauc', example='0.3'),
    assessLoss?: string(name='AssessLoss', example='0.3'),
    trainAuc?: string(name='TrainAuc', example='0.3'),
    trainGauc?: string(name='TrainGauc', example='0.3'),
    trainLoss?: string(name='TrainLoss', example='0.3'),
  }(name='RunResult'),
  runTime?: string(name='RunTime', example='2021-12-08T20:00:00.0Z'),
  status?: string(name='Status', example='TRAINING'),
  templateId?: string(name='TemplateId', example='a-a-a'),
  templateName?: string(name='TemplateName', example='模型A'),
}

model RankingSystem {
  applyStatus?: string(name='ApplyStatus', example='NOT_APPLIED'),
  deployStatus?: string(name='DeployStatus', example='NOT_DEPLOYED'),
  meta?: {
    autoDeploy?: boolean(name='AutoDeploy', example='true'),
    autoDeployAuc?: string(name='AutoDeployAuc', example='0.3'),
    conf?: string(name='Conf'),
    failMsg?: string(name='FailMsg'),
    modelVersionName?: string(name='ModelVersionName', example='模型A_T1638964800000'),
    predictEngine?: {
      clusterId?: string(name='ClusterId', example='cn-shanghai'),
      resourceId?: string(name='ResourceId', example='eas-oljkkdrggxhx7eizjd'),
      version?: string(name='Version', example='1'),
    }(name='PredictEngine'),
    predictEngineType?: string(name='PredictEngineType', example='EAS'),
  }(name='Meta'),
  modelTemplateId?: string(name='ModelTemplateId', example='a-a-a'),
  name?: string(name='Name', example='servicea'),
  sceneIdList?: [ long ](name='SceneIdList'),
}

model RankingSystemHistory {
  meta?: {
    autoDeploy?: boolean(name='AutoDeploy', example='true'),
    autoDeployAuc?: string(name='AutoDeployAuc', example='0.3'),
    conf?: string(name='Conf'),
    modelTemplateName?: string(name='ModelTemplateName', example='排序模型A'),
    predictEngine?: {
      resourceId?: string(name='ResourceId', example='eas-oljkkdrggxhx7eizjd'),
      version?: string(name='Version', example='1'),
    }(name='PredictEngine'),
    predictEngineType?: string(name='PredictEngineType', example='EAS'),
    previousOperateId?: string(name='PreviousOperateId', example='aaaa'),
  }(name='Meta'),
  name?: string(name='Name', example='servicea'),
  operateId?: string(name='OperateId', example='8AC865AF-37D6-42ED-AA9A-B60D8ECDF640'),
  operateTime?: string(name='OperateTime', example='2021-12-06T03:01:41.217Z'),
  operateType?: string(name='OperateType', example='CONF_CHANGE'),
}

model Sample {
  gmtCreate?: string(name='GmtCreate', example='2021-12-07T12:28:52.000Z'),
  gmtModified?: string(name='GmtModified', example='2021-12-07T12:28:52.000Z'),
  meta?: {
    autoUpdate?: boolean(name='AutoUpdate', example='true'),
    autoUpdateFrequency?: long(name='AutoUpdateFrequency', example='86400'),
    clonedId?: string(name='ClonedId', example='1638877561147'),
    config?: {
      bhvTableSourceIds?: [ string ](name='BhvTableSourceIds'),
      featureConfig?: {
        itemFeatures?: string(name='ItemFeatures', example='物品特征，支持多值，逗号分隔。'),
        userFeatures?: string(name='UserFeatures', example='用户特征，支持多值，逗号分隔。'),
      }(name='FeatureConfig'),
      labelLogic?: {
        bhvTimeWindow?: long(name='BhvTimeWindow', example='86400'),
        negativeBhvTypes?: string(name='NegativeBhvTypes', example='click,expose'),
        positiveBhvTypes?: string(name='PositiveBhvTypes', example='like'),
      }(name='LabelLogic'),
      weightLogicList?: [ 
        {
          bhv?: string(name='Bhv', example='click'),
          weight?: string(name='Weight', example='1.01'),
        }
      ](name='WeightLogicList'),
    }(name='Config'),
    extendParams?: {
      latestTaskStatus?: long(name='LatestTaskStatus', example='0 没有任务 1 正常 2 异常'),
      sampleCount?: long(name='SampleCount', example='0'),
    }(name='ExtendParams'),
    metaType?: string(name='MetaType', example='Sample'),
    name?: string(name='Name', example='12345'),
    storeConfig?: string(name='StoreConfig', example='projectName.tableName'),
    type?: string(name='Type', example='Cloned 复制的 System 系统的 Custom 自定义的'),
  }(name='Meta'),
  sampleId?: string(name='SampleId', example='1638880131873'),
  status?: string(name='Status', example='样本状态 Unready 未完成配置  Ready   配置完成  Generating 样本生成中  Success  样本生成成功  Failed 样本生成失败  Formatting 格式化中  Formatted 格式化完成  FormatFailed 格式化失败  Applied 已应用到模型中'),
}

model AttachDatasetResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', example='1544112000000'),
    gmtModified?: long(name='gmtModified', example='1544112000000'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    state?: string(name='state', example='Importing'),
    versionId?: string(name='versionId', example='20181023214546'),
  }(name='result'),
}

model AttachDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDatasetResponseBody(name='body'),
}

async function attachDatasetWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): AttachDatasetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AttachDataset',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSets/${OpenApiUtil.getEncodeParam(versionId)}/actions/current`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachDataset(instanceId: string, versionId: string): AttachDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachDatasetWithOptions(instanceId, versionId, headers, runtime);
}

model AttachIndexVersionResponseBody = {
  requestId?: string(name='requestId', example='E63A27A4-3411-4910-B7D5-12EEAC19389B'),
  result?: boolean(name='result', example='true'),
}

model AttachIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachIndexVersionResponseBody(name='body'),
}

async function attachIndexVersionWithOptions(instanceId: string, algorithmId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): AttachIndexVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AttachIndexVersion',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/index-versions/${OpenApiUtil.getEncodeParam(versionId)}/actions/attach`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachIndexVersion(instanceId: string, algorithmId: string, versionId: string): AttachIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachIndexVersionWithOptions(instanceId, algorithmId, versionId, headers, runtime);
}

model CheckRankingModelReachableResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', example='true'),
}

model CheckRankingModelReachableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckRankingModelReachableResponseBody(name='body'),
}

async function checkRankingModelReachableWithOptions(instanceId: string, rankingModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CheckRankingModelReachableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CheckRankingModelReachable',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models/${OpenApiUtil.getEncodeParam(rankingModelId)}/actions/check-connectivity`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkRankingModelReachable(instanceId: string, rankingModelId: string): CheckRankingModelReachableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return checkRankingModelReachableWithOptions(instanceId, rankingModelId, headers, runtime);
}

model CloneExperimentRequest {
  dryRun?: boolean(name='dryRun', example='false'),
}

model CloneExperimentResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='400'),
            experimentValue?: string(name='experimentValue', example='swing;commoni2i;pcategory;scategory'),
            key?: string(name='key', example='I2I-truncedquantity'),
            name?: string(name='name'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='i2i;u2x2i;new;hot;embedding;embedding'),
        experimentValue?: string(name='experimentValue', example='300'),
        hasConfig?: boolean(name='hasConfig', example='true'),
        key?: string(name='key', example='I2I'),
        name?: string(name='name', example='name'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='xxx'),
    experimentId?: string(name='experimentId', example='12345'),
    name?: string(name='name', example='xxx'),
    offlineTime?: string(name='offlineTime', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', example='Init'),
  }(name='result'),
}

model CloneExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentResponseBody(name='body'),
}

async function cloneExperimentWithOptions(instanceId: string, sceneId: string, experimentId: string, request: CloneExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneExperimentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneExperiment',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}/actions/clone`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneExperiment(instanceId: string, sceneId: string, experimentId: string, request: CloneExperimentRequest): CloneExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneExperimentWithOptions(instanceId, sceneId, experimentId, request, headers, runtime);
}

model CloneSampleResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model CloneSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneSampleResponseBody(name='body'),
}

async function cloneSampleWithOptions(instanceId: string, sampleId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CloneSampleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CloneSample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}/actions/clone`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneSample(instanceId: string, sampleId: string): CloneSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cloneSampleWithOptions(instanceId, sampleId, headers, runtime);
}

model ColdStartRankRequest {
  features?: string(name='features'),
  imei?: string(name='imei'),
  items?: string(name='items'),
  sceneId?: string(name='sceneId'),
  userId?: string(name='userId'),
}

model ColdStartRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      itemId?: string(name='itemId'),
      itemType?: string(name='itemType'),
      traceInfo?: string(name='traceInfo'),
    }
  ](name='result'),
}

model ColdStartRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ColdStartRankResponseBody(name='body'),
}

async function coldStartRankWithOptions(instanceId: string, request: ColdStartRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ColdStartRankResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.features)) {
    query['features'] = request.features;
  }
  if (!Util.isUnset(request.imei)) {
    query['imei'] = request.imei;
  }
  if (!Util.isUnset(request.items)) {
    query['items'] = request.items;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.userId)) {
    query['userId'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ColdStartRank',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/cold-start/${OpenApiUtil.getEncodeParam(instanceId)}/actions/rank`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function coldStartRank(instanceId: string, request: ColdStartRankRequest): ColdStartRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return coldStartRankWithOptions(instanceId, request, headers, runtime);
}

model CreateCustomAnalysisTaskRequest {
  type?: string(name='type', example='ITEM_CUSTOM'),
}

model CreateCustomAnalysisTaskResponseBody = {
  code?: string(name='code', example='xxx'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='xxx'),
  result?: map[string]any(name='result', example='123'),
}

model CreateCustomAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomAnalysisTaskResponseBody(name='body'),
}

async function createCustomAnalysisTaskWithOptions(instanceId: string, request: CreateCustomAnalysisTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustomAnalysisTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomAnalysisTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/custom-analysis-tasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomAnalysisTask(instanceId: string, request: CreateCustomAnalysisTaskRequest): CreateCustomAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCustomAnalysisTaskWithOptions(instanceId, request, headers, runtime);
}

model CreateCustomSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model CreateCustomSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomSampleResponseBody(name='body'),
}

async function createCustomSampleWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustomSampleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomSample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomSample(instanceId: string): CreateCustomSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCustomSampleWithOptions(instanceId, headers, runtime);
}

model CreateDataDiagnoseTaskResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: boolean(name='result'),
}

model CreateDataDiagnoseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataDiagnoseTaskResponseBody(name='body'),
}

async function createDataDiagnoseTaskWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataDiagnoseTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateDataDiagnoseTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-diagnose-task`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataDiagnoseTask(instanceId: string): CreateDataDiagnoseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataDiagnoseTaskWithOptions(instanceId, headers, runtime);
}

model CreateExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result', description='The returned result.'),
}

model CreateExtraDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExtraDataSourceResponseBody(name='body'),
}

async function createExtraDataSourceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateExtraDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateExtraDataSource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/extra-data-sources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExtraDataSource(instanceId: string): CreateExtraDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createExtraDataSourceWithOptions(instanceId, headers, runtime);
}

model CreateFilteringAlgorithmRequest {
  dryRun?: string(name='dryRun', description='Specifies whether to perform a dry run. Valid values: true: performs a dry run. false: performs a dry run and sends the request.', example='true'),
}

model CreateFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    algorithmId?: string(name='algorithmId', description='The ID of the filtering table.', example='abc'),
    gmtCreate?: string(name='gmtCreate', description='The time when the filtering table was created.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the filtering table was modified.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', description='The name of the filtering algorithm.', example='xxx'),
      category?: string(name='category', description='The category of the filtering table.', example='1_2'),
      cron?: string(name='cron', description='The CRON expression of the scheduled task. Example: 0 0/12 0 \\* \\*, which indicates that the task is scheduled at 00:00 and 12:00 every day.', example='0 0/12 0 * *"'),
      cronEnabled?: boolean(name='cronEnabled', description='Indicates whether the scheduled task is enabled.', example='true'),
      description?: string(name='description', description='The description of the filtering table.', example='xx'),
      extInfo?: map[string]any(name='extInfo', description='The additional information.', example='{}'),
      gmtCreate?: string(name='gmtCreate', description='The time when the filtering table was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', description='The time when the filtering table was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed UTC.', example='2018-12-07T02:24:26.000Z'),
      projectName?: string(name='projectName', description='The name of the MaxCompute project.', example='xxx'),
      status?: string(name='status', description='The state of the filtering table.', example='Running'),
      tableName?: string(name='tableName', description='The name of the filtering table.', example='table_test'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='The fluctuation threshold for the loss of the index data.', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='The fluctuation threshold for the size of the index.', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='The fluctuation threshold for the data entries in the source table.', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='The fluctuation threshold for the size of the source table.', example='1'),
      }(name='threshold', description='The threshold.'),
      type?: string(name='type', description='The type of the data source.', example='ODPS'),
    }(name='meta', description='The metadata of the filtering table.'),
    status?: string(name='status', description='The state of the filtering table.', example='Running'),
  }(name='result', description='The information about the filtering table.'),
}

model CreateFilteringAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFilteringAlgorithmResponseBody(name='body'),
}

async function createFilteringAlgorithmWithOptions(instanceId: string, request: CreateFilteringAlgorithmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFilteringAlgorithmResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFilteringAlgorithm',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFilteringAlgorithm(instanceId: string, request: CreateFilteringAlgorithmRequest): CreateFilteringAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFilteringAlgorithmWithOptions(instanceId, request, headers, runtime);
}

model CreateFlowControlTaskRequest {
  dryRun?: boolean(name='dryRun', example='true'),
}

model CreateFlowControlTaskResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='EDF43C1F-99E4-431F-A7C0-8B260A5A792E'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-06T11:17:49.000Z'),
    status?: string(name='status', example='DRAFT'),
    taskId?: string(name='taskId', example='1667297014460'),
  }(name='result'),
}

model CreateFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowControlTaskResponseBody(name='body'),
}

async function createFlowControlTaskWithOptions(instanceId: string, request: CreateFlowControlTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowControlTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFlowControlTask(instanceId: string, request: CreateFlowControlTaskRequest): CreateFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFlowControlTaskWithOptions(instanceId, request, headers, runtime);
}

model CreateInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-xxxxx'),
  }(name='result', description='The returned results.'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(headers, runtime);
}

model CreateRankingModelRequest {
  dryRun?: boolean(name='dryRun', example='true'),
}

model CreateRankingModelResponseBody = {
  code?: string(name='code', example='1'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: map[string]any(name='meta', example='map'),
    rankingModelId?: string(name='rankingModelId', example='ranktest'),
  }(name='result', description='result info'),
}

model CreateRankingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRankingModelResponseBody(name='body'),
}

async function createRankingModelWithOptions(instanceId: string, request: CreateRankingModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRankingModelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRankingModel',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRankingModel(instanceId: string, request: CreateRankingModelRequest): CreateRankingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRankingModelWithOptions(instanceId, request, headers, runtime);
}

model CreateRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingModelTemplate(name='result'),
}

model CreateRankingModelTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRankingModelTemplateResponseBody(name='body'),
}

async function createRankingModelTemplateWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRankingModelTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateRankingModelTemplate',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRankingModelTemplate(instanceId: string): CreateRankingModelTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRankingModelTemplateWithOptions(instanceId, headers, runtime);
}

model CreateRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingSystem(name='result'),
}

model CreateRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRankingSystemResponseBody(name='body'),
}

async function createRankingSystemWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRankingSystemResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRankingSystem(instanceId: string): CreateRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRankingSystemWithOptions(instanceId, headers, runtime);
}

model CreateRuleResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    status?: string(name='status', example='true'),
  }(name='result'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRuleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rules`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRule(instanceId: string): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRuleWithOptions(instanceId, headers, runtime);
}

model CreateSampleFormatConfigRequest {
  body?: map[string]any(name='body'),
}

model CreateSampleFormatConfigResponseBody = {
  requestId?: string(name='requestId', example='EDF43C1F-99E4-431F-A7C0-8B260A5A792E'),
  result?: map[string]any(name='result', example='xxx'),
}

model CreateSampleFormatConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSampleFormatConfigResponseBody(name='body'),
}

async function createSampleFormatConfigWithOptions(instanceId: string, sampleId: string, request: CreateSampleFormatConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSampleFormatConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSampleFormatConfig',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}/format-configs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSampleFormatConfig(instanceId: string, sampleId: string, request: CreateSampleFormatConfigRequest): CreateSampleFormatConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSampleFormatConfigWithOptions(instanceId, sampleId, request, headers, runtime);
}

model CreateSceneRequest {
  dryRun?: boolean(name='dryRun', example='false'),
}

model CreateSceneResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', example='test'),
    status?: string(name='status', example='DRAFT'),
  }(name='result'),
}

model CreateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSceneResponseBody(name='body'),
}

async function createSceneWithOptions(instanceId: string, request: CreateSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSceneResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateScene',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createScene(instanceId: string, request: CreateSceneRequest): CreateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSceneWithOptions(instanceId, request, headers, runtime);
}

model CreateUmengTokenRequest {
  code?: string(name='code'),
}

model CreateUmengTokenResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model CreateUmengTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUmengTokenResponseBody(name='body'),
}

async function createUmengTokenWithOptions(request: CreateUmengTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUmengTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    query['code'] = request.code;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUmengToken',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/umeng/token`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUmengToken(request: CreateUmengTokenRequest): CreateUmengTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUmengTokenWithOptions(request, headers, runtime);
}

model DecribeRankingModelResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
    meta?: map[string]any(name='meta', description='meta'),
    rankingModelId?: string(name='rankingModelId', example='ranktest'),
  }(name='result'),
}

model DecribeRankingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DecribeRankingModelResponseBody(name='body'),
}

async function decribeRankingModelWithOptions(instanceId: string, rankingModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DecribeRankingModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DecribeRankingModel',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models/${OpenApiUtil.getEncodeParam(rankingModelId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function decribeRankingModel(instanceId: string, rankingModelId: string): DecribeRankingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return decribeRankingModelWithOptions(instanceId, rankingModelId, headers, runtime);
}

model DeleteDataSetResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', example='1544112000000'),
    gmtModified?: long(name='gmtModified', example='1544112000000'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    state?: string(name='state', example='Importing'),
    versionId?: string(name='versionId', example='20181023214546'),
  }(name='result'),
}

model DeleteDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSetResponseBody(name='body'),
}

async function deleteDataSetWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataSetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSet',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSets/${OpenApiUtil.getEncodeParam(versionId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSet(instanceId: string, versionId: string): DeleteDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDataSetWithOptions(instanceId, versionId, headers, runtime);
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', description='Indicates whether the test was deleted. Valid values: true or false.', example='true'),
}

model DeleteExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentResponseBody(name='body'),
}

async function deleteExperimentWithOptions(instanceId: string, sceneId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteExperiment',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExperiment(instanceId: string, sceneId: string, experimentId: string): DeleteExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExperimentWithOptions(instanceId, sceneId, experimentId, headers, runtime);
}

model DeleteExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result'),
}

model DeleteExtraDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExtraDataSourceResponseBody(name='body'),
}

async function deleteExtraDataSourceWithOptions(instanceId: string, type: string, dataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExtraDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteExtraDataSource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/extra-data-sources/${OpenApiUtil.getEncodeParam(type)}/${OpenApiUtil.getEncodeParam(dataSourceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExtraDataSource(instanceId: string, type: string, dataSourceId: string): DeleteExtraDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExtraDataSourceWithOptions(instanceId, type, dataSourceId, headers, runtime);
}

model DeleteFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', example='936BE457-5D14-4DBD-85AE-176F7BA8D96D'),
  result?: {
    algorithmId?: string(name='algorithmId', example='123'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', example='user'),
      category?: string(name='category', example='i2i'),
      clusterId?: string(name='clusterId', description='id', example='xxx'),
      cron?: string(name='cron', example='xxx'),
      cronEnabled?: boolean(name='cronEnabled', example='true'),
      description?: string(name='description', example='xxx'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', description='xxx', example='xxx'),
        kvSeparator?: string(name='kvSeparator', description='xxx', example='xxx'),
      }(name='extInfo', description='xxx'),
      metaType?: string(name='metaType', example='xxx'),
      projectName?: string(name='projectName', example='xxx'),
      tableName?: string(name='tableName', example='xxx'),
      taskId?: string(name='taskId', example='xxx'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='xxx', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='xxx', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='xxx', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='xxx', example='1'),
      }(name='threshold', description='xxx'),
      type?: string(name='type', description='xxx', example='xxx'),
    }(name='meta'),
    status?: string(name='status', description='xxx', example='xxx'),
  }(name='result'),
}

model DeleteFilteringAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFilteringAlgorithmResponseBody(name='body'),
}

async function deleteFilteringAlgorithmWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFilteringAlgorithmResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFilteringAlgorithm',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFilteringAlgorithm(instanceId: string, algorithmId: string): DeleteFilteringAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFilteringAlgorithmWithOptions(instanceId, algorithmId, headers, runtime);
}

model DeleteFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='6E427B10-30FC-1873-922F-FC176D3398D4'),
  result?: boolean(name='result', description='delete task status(true/false)', example='true'),
}

model DeleteFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowControlTaskResponseBody(name='body'),
}

async function deleteFlowControlTaskWithOptions(instanceId: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowControlTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFlowControlTask(instanceId: string, taskId: string): DeleteFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFlowControlTaskWithOptions(instanceId, taskId, headers, runtime);
}

model DeleteRankingModelResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='D486768B-8BF8-4D80-B491-43DC3D0AF8AB'),
  result?: {
    meta?: map[string]any(name='meta', example='xxx'),
    rankingModelId?: string(name='rankingModelId', example='123'),
  }(name='result'),
}

model DeleteRankingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRankingModelResponseBody(name='body'),
}

async function deleteRankingModelWithOptions(instanceId: string, rankingModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRankingModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRankingModel',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models/${OpenApiUtil.getEncodeParam(rankingModelId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRankingModel(instanceId: string, rankingModelId: string): DeleteRankingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRankingModelWithOptions(instanceId, rankingModelId, headers, runtime);
}

model DeleteRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingModelTemplate(name='result'),
}

model DeleteRankingModelTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRankingModelTemplateResponseBody(name='body'),
}

async function deleteRankingModelTemplateWithOptions(instanceId: string, templateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRankingModelTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRankingModelTemplate',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates/${OpenApiUtil.getEncodeParam(templateId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRankingModelTemplate(instanceId: string, templateId: string): DeleteRankingModelTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRankingModelTemplateWithOptions(instanceId, templateId, headers, runtime);
}

model DeleteRankingModelVersionResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
}

model DeleteRankingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRankingModelVersionResponseBody(name='body'),
}

async function deleteRankingModelVersionWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRankingModelVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRankingModelVersion',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-versions/${OpenApiUtil.getEncodeParam(versionId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRankingModelVersion(instanceId: string, versionId: string): DeleteRankingModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRankingModelVersionWithOptions(instanceId, versionId, headers, runtime);
}

model DeleteRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingSystem(name='result'),
}

model DeleteRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRankingSystemResponseBody(name='body'),
}

async function deleteRankingSystemWithOptions(instanceId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRankingSystemResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRankingSystem(instanceId: string, name: string): DeleteRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRankingSystemWithOptions(instanceId, name, headers, runtime);
}

model DeleteSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model DeleteSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSampleResponseBody(name='body'),
}

async function deleteSampleWithOptions(instanceId: string, sampleId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSampleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSample(instanceId: string, sampleId: string): DeleteSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSampleWithOptions(instanceId, sampleId, headers, runtime);
}

model DeleteSceneResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    sceneId?: string(name='sceneId', example='test'),
  }(name='result'),
}

model DeleteSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneResponseBody(name='body'),
}

async function deleteSceneWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteScene',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScene(instanceId: string, sceneId: string): DeleteSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSceneWithOptions(instanceId, sceneId, headers, runtime);
}

model DeployRankingSystemRequest {
  body?: map[string]any(name='body', description='The configuration that you want to modify.', example='"meta": {
    "autoDeploy": true,
    "autoDeployAuc": "0.9",
    "conf":"",
    "predictEngineType": "EAS",
    "predictEngine":{
    	"resourceId": "eas-oljkkdrggxhx7eizjd"
    }
  }'),
}

model DeployRankingSystemResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: map[string]any(name='result', description='The returned result.', example='xxx'),
}

model DeployRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployRankingSystemResponseBody(name='body'),
}

async function deployRankingSystemWithOptions(instanceId: string, name: string, request: DeployRankingSystemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployRankingSystemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}/actions/deploy`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployRankingSystem(instanceId: string, name: string, request: DeployRankingSystemRequest): DeployRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deployRankingSystemWithOptions(instanceId, name, request, headers, runtime);
}

model DescribeBaseExperimentResponseBody = {
  requestId?: string(name='requestId', example='A74E3FB7-406C-5CBB-833E-E49308B5DC05'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='400'),
            key?: string(name='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='true'),
        experimentValue?: string(name='experimentValue', example='400'),
        hasConfig?: boolean(name='hasConfig', example='false'),
        key?: string(name='key', example='I2I'),
        name?: string(name='name', example='xxx'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='xxx'),
    experimentId?: string(name='experimentId', example='xxx'),
    name?: string(name='name'),
    offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
    status?: string(name='status', example='Init'),
  }(name='result'),
}

model DescribeBaseExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBaseExperimentResponseBody(name='body'),
}

async function describeBaseExperimentWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeBaseExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeBaseExperiment',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/base-experiment`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBaseExperiment(instanceId: string, sceneId: string): DescribeBaseExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeBaseExperimentWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeCustomAnalysisTaskRequest {
  type?: string(name='type', example='ITEM_CUSTOM'),
}

model DescribeCustomAnalysisTaskResponseBody = {
  code?: string(name='code', example='xxx'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: map[string]any(name='result', example='xxx'),
}

model DescribeCustomAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomAnalysisTaskResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request DescribeCustomAnalysisTaskRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCustomAnalysisTaskResponse
 */
async function describeCustomAnalysisTaskWithOptions(instanceId: string, taskId: string, request: DescribeCustomAnalysisTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeCustomAnalysisTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomAnalysisTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/custom-analysis-tasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request DescribeCustomAnalysisTaskRequest
  * @return DescribeCustomAnalysisTaskResponse
 */
async function describeCustomAnalysisTask(instanceId: string, taskId: string, request: DescribeCustomAnalysisTaskRequest): DescribeCustomAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeCustomAnalysisTaskWithOptions(instanceId, taskId, request, headers, runtime);
}

model DescribeDataSetMessageResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      errorLevel?: string(name='errorLevel', example='warn'),
      errorType?: string(name='errorType'),
      message?: string(name='message'),
      timestamp?: string(name='timestamp', example='20181211 17:27:44'),
    }
  ](name='result'),
}

model DescribeDataSetMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSetMessageResponseBody(name='body'),
}

async function describeDataSetMessageWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeDataSetMessageResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSetMessage',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSets/${OpenApiUtil.getEncodeParam(versionId)}/messages`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataSetMessage(instanceId: string, versionId: string): DescribeDataSetMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeDataSetMessageWithOptions(instanceId, versionId, headers, runtime);
}

model DescribeDefaultAlgorithmsResponseBody = {
  requestId?: string(name='requestId', example='F60021C4-57AF-5F46-9B3E-FCEF1C7A1459'),
  result?: [ 
    {
      category?: string(name='category', example='RECALL'),
      config?: [ 
        {
          defaultValue?: string(name='defaultValue', example='swing;commoni2i;pcategory;scategory'),
          experimentValue?: string(name='experimentValue', example='300'),
          key?: string(name='key', example='I2I-truncedquantity'),
          name?: string(name='name'),
        }
      ](name='config'),
      defaultValue?: string(name='defaultValue', example='true'),
      experimentValue?: string(name='experimentValue', example='300'),
      hasConfig?: boolean(name='hasConfig', example='true'),
      key?: string(name='key', example='I2I'),
      name?: string(name='name', example='xxx'),
      type?: string(name='type', example='SYSTEM'),
    }
  ](name='result'),
}

model DescribeDefaultAlgorithmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefaultAlgorithmsResponseBody(name='body'),
}

async function describeDefaultAlgorithmsWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeDefaultAlgorithmsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefaultAlgorithms',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/default-algorithms`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefaultAlgorithms(instanceId: string, sceneId: string): DescribeDefaultAlgorithmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeDefaultAlgorithmsWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeExperimentResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='2'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='400'),
            key?: string(name='key', description='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='true'),
        experimentValue?: string(name='experimentValue'),
        hasConfig?: boolean(name='hasConfig', example='false'),
        key?: string(name='key', description='key', example='I2I'),
        name?: string(name='name', example='test'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='xxx'),
    experimentId?: string(name='experimentId', example='12345'),
    name?: string(name='name', example='test'),
    offlineTime?: string(name='offlineTime', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', example='1'),
  }(name='result'),
}

model DescribeExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExperimentResponseBody(name='body'),
}

async function describeExperimentWithOptions(instanceId: string, sceneId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeExperiment',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExperiment(instanceId: string, sceneId: string, experimentId: string): DescribeExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExperimentWithOptions(instanceId, sceneId, experimentId, headers, runtime);
}

model DescribeExperimentEnvResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    bucketCount?: int32(name='bucketCount', example='10'),
    divideType?: string(name='divideType', example='UID'),
  }(name='result', description='result'),
}

model DescribeExperimentEnvResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExperimentEnvResponseBody(name='body'),
}

async function describeExperimentEnvWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExperimentEnvResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeExperimentEnv',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiment-env`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExperimentEnv(instanceId: string, sceneId: string): DescribeExperimentEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExperimentEnvWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeExperimentEnvProgressResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    progress?: int32(name='progress', example='1'),
    status?: string(name='status', example='Running'),
  }(name='result'),
}

model DescribeExperimentEnvProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExperimentEnvProgressResponseBody(name='body'),
}

async function describeExperimentEnvProgressWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExperimentEnvProgressResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeExperimentEnvProgress',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiment-progress`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExperimentEnvProgress(instanceId: string, sceneId: string): DescribeExperimentEnvProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExperimentEnvProgressWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', description='The ID of the filtering table.', example='abc'),
    gmtCreate?: string(name='gmtCreate', description='The time when the filtering table was created.', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the filtering table was modified.', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', description='The name of the filtering algorithm.', example='test'),
      category?: string(name='category', description='The category of the filtering table.', example='1_2'),
      clusterId?: string(name='clusterId', description='The ID of the cluster.', example='244'),
      cron?: string(name='cron', description='The CRON expression of the scheduled task.', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled', description='Indicates whether the scheduled task is enabled.', example='Y'),
      description?: string(name='description', description='The description of the filtering table.', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', description='The delimiter that is used to separate items.', example=','),
        kvSeparator?: string(name='kvSeparator', description='The delimiter that is used to separate keys and values.', example=':'),
      }(name='extInfo', description='The additional information.'),
      metaType?: string(name='metaType', description='The type of the metadata.', example='metaType'),
      projectName?: string(name='projectName', description='The name of the project.', example='test'),
      tableName?: string(name='tableName', description='The name of the filtering table.', example='test_table'),
      taskId?: string(name='taskId', description='The ID of the task.', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', description='The threshold for the loss of the index data.', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', description='The fluctuation threshold for the size of the index.', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='The fluctuation threshold for the data entries in the source table.', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='The fluctuation threshold for the size of the source table.', example='1'),
      }(name='threshold', description='The threshold.'),
      type?: string(name='type', description='The type of the data source.', example='ODPS'),
    }(name='meta', description='The metadata of the filtering table.'),
    status?: string(name='status', description='The status of the filtering table.', example='Init'),
  }(name='result', description='The information about the filtering table.'),
}

model DescribeFilteringAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFilteringAlgorithmResponseBody(name='body'),
}

async function describeFilteringAlgorithmWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeFilteringAlgorithmResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeFilteringAlgorithm',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFilteringAlgorithm(instanceId: string, algorithmId: string): DescribeFilteringAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeFilteringAlgorithmWithOptions(instanceId, algorithmId, headers, runtime);
}

model DescribeInstanceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    chargeType?: string(name='chargeType', example='PrePaid'),
    commodityCode?: string(name='commodityCode', example='airecpre'),
    dataSetVersion?: string(name='dataSetVersion', example='20181206170353'),
    expiredTime?: string(name='expiredTime', example='2019-01-06T16:00:00.000Z'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-06T06:14:01.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-06T11:17:49.000Z'),
    industry?: string(name='industry', example='news'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    lockMode?: string(name='lockMode', example='Unlock'),
    name?: string(name='name'),
    regionId?: string(name='regionId', example='cn-beijing'),
    scene?: string(name='scene', example='gul'),
    status?: string(name='status', example='Running'),
    type?: string(name='type', example='Standard'),
  }(name='result'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(instanceId: string): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeInstanceWithOptions(instanceId, headers, runtime);
}

model DescribeLatestTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      builtTime?: string(name='builtTime', example='2020-11-08T02:00:00Z'),
      code?: string(name='code', example='400'),
      costSeconds?: int32(name='costSeconds', example='50'),
      flowType?: string(name='flowType', example='Manual'),
      message?: string(name='message', example='xxx'),
      progress?: int32(name='progress', example='80'),
      rollbackEnabled?: boolean(name='rollbackEnabled', example='true'),
      size?: long(name='size', example='2938475566'),
      status?: string(name='status', example='pending'),
      switchedTime?: string(name='switchedTime', example='2020-11-08T02:00:00Z'),
      versionId?: string(name='versionId', example='20102010211'),
    }
  ](name='result'),
}

model DescribeLatestTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLatestTaskResponseBody(name='body'),
}

async function describeLatestTaskWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeLatestTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeLatestTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/tasks/latest`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLatestTask(instanceId: string, algorithmId: string): DescribeLatestTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeLatestTaskWithOptions(instanceId, algorithmId, headers, runtime);
}

model DescribeQuotaResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    currentQps?: int32(name='currentQps', example='8'),
    itemCount?: long(name='itemCount', example='1000000'),
    itemCountUsed?: long(name='itemCountUsed', example='100'),
    qps?: int32(name='qps', example='10'),
    userCount?: long(name='userCount', example='1000000'),
    userCountUsed?: long(name='userCountUsed', example='100'),
  }(name='result'),
}

model DescribeQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQuotaResponseBody(name='body'),
}

async function describeQuotaWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeQuota',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/quota`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQuota(instanceId: string): DescribeQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeQuotaWithOptions(instanceId, headers, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='acceptLanguage', example='zh-cn'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='successful'),
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: [ 
    {
      consoleUrl?: string(name='consoleUrl', example='xxx'),
      endpoint?: string(name='endpoint', example='47.109.94.218'),
      localName?: string(name='localName', example='xxx'),
      regionId?: string(name='regionId', example='cn-beijing'),
      status?: string(name='status', example='Running'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['acceptLanguage'] = request.acceptLanguage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/configurations/regions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(request, headers, runtime);
}

model DescribeRuleRequest {
  ruleType?: string(name='ruleType', example='selection'),
  sceneId?: string(name='sceneId', example='xxx'),
}

model DescribeRuleResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    status?: string(name='status', example='DRAFT'),
  }(name='result'),
}

model DescribeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleResponseBody(name='body'),
}

async function describeRuleWithOptions(instanceId: string, ruleId: string, request: DescribeRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRuleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.ruleType)) {
    query['ruleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRule',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rules/${OpenApiUtil.getEncodeParam(ruleId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRule(instanceId: string, ruleId: string, request: DescribeRuleRequest): DescribeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRuleWithOptions(instanceId, ruleId, request, headers, runtime);
}

model DescribeSceneResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', example='test'),
    status?: string(name='status', example='DRAFT'),
  }(name='result'),
}

model DescribeSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSceneResponseBody(name='body'),
}

async function describeSceneWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeScene',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScene(instanceId: string, sceneId: string): DescribeSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSceneWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeSceneBucketResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    detail?: map[string]any(name='detail', example='xxx'),
    inUse?: string(name='inUse', example='1'),
    num?: int32(name='num', example='2'),
  }(name='result'),
}

model DescribeSceneBucketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSceneBucketResponseBody(name='body'),
}

async function describeSceneBucketWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSceneBucketResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeSceneBucket',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiment-bucket`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSceneBucket(instanceId: string, sceneId: string): DescribeSceneBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSceneBucketWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeSceneThroughputResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    pvCount?: long(name='pvCount', description='The number of page views.', example='123213'),
  }(name='result', description='The returned result.'),
}

model DescribeSceneThroughputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSceneThroughputResponseBody(name='body'),
}

/**
  * We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the AIRec console to manage scenes. For more information, see [Create a recommendation scene by configuring product selection rules](https://help.aliyun.com/document_detail/171790.html?spm=a2c4g.11186623.6.677.1f6a3483tNyo2M).
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSceneThroughputResponse
 */
async function describeSceneThroughputWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSceneThroughputResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeSceneThroughput',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/throughput`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * We recommend that you do not call an API operation to manage scenes. We recommend that you go to the Scenario Building page in the AIRec console to manage scenes. For more information, see [Create a recommendation scene by configuring product selection rules](https://help.aliyun.com/document_detail/171790.html?spm=a2c4g.11186623.6.677.1f6a3483tNyo2M).
  *
  * @return DescribeSceneThroughputResponse
 */
async function describeSceneThroughput(instanceId: string, sceneId: string): DescribeSceneThroughputResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSceneThroughputWithOptions(instanceId, sceneId, headers, runtime);
}

model DescribeSyncReportDetailRequest {
  endTime?: long(name='endTime', example='1586673466'),
  levelType?: string(name='levelType', description='error/warn/info', example='error'),
  startTime?: long(name='startTime', example='1586673466'),
  type?: string(name='type', description='behavior/item/user', example='behavior'),
}

model DescribeSyncReportDetailResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      defaultDisplay?: boolean(name='defaultDisplay', example='false'),
      errorCount?: int32(name='errorCount', example='246165'),
      errorPercent?: float(name='errorPercent', example='84.6'),
      historyData?: [ 
        {
          endTime?: long(name='endTime', example='1586673466'),
          errorPercent?: float(name='errorPercent', example='84.6'),
          startTime?: long(name='startTime', example='1586673466'),
        }
      ](name='historyData'),
      sampleDisplay?: boolean(name='sampleDisplay', example='true'),
      type?: string(name='type', example='bhvTimeBehavior'),
    }
  ](name='result'),
}

model DescribeSyncReportDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSyncReportDetailResponseBody(name='body'),
}

async function describeSyncReportDetailWithOptions(instanceId: string, request: DescribeSyncReportDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSyncReportDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.levelType)) {
    query['levelType'] = request.levelType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSyncReportDetail',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSyncReportDetail(instanceId: string, request: DescribeSyncReportDetailRequest): DescribeSyncReportDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSyncReportDetailWithOptions(instanceId, request, headers, runtime);
}

model DescribeSyncReportOutliersRequest {
  endTime?: long(name='endTime', example='1586673466'),
  key?: string(name='key', example='xxx'),
  levelType?: string(name='levelType', description='error|info|warn', example='info'),
  startTime?: long(name='startTime', example='1586673466'),
  type?: string(name='type', description='item|hehavoir|user', example='behavior'),
}

model DescribeSyncReportOutliersResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model DescribeSyncReportOutliersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSyncReportOutliersResponseBody(name='body'),
}

async function describeSyncReportOutliersWithOptions(instanceId: string, request: DescribeSyncReportOutliersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSyncReportOutliersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['key'] = request.key;
  }
  if (!Util.isUnset(request.levelType)) {
    query['levelType'] = request.levelType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSyncReportOutliers',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/outliers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSyncReportOutliers(instanceId: string, request: DescribeSyncReportOutliersRequest): DescribeSyncReportOutliersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSyncReportOutliersWithOptions(instanceId, request, headers, runtime);
}

model DescribeUserMetricsRequest {
  endTime?: long(name='endTime', example='1567155600'),
  metricType?: string(name='metricType', example='pvCtr'),
  startTime?: long(name='startTime', example='1567152000'),
}

model DescribeUserMetricsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      dataPoints?: [ 
        {
          endTime?: long(name='endTime', example='1567152000'),
          startTime?: long(name='startTime', example='1567152000'),
          val?: float(name='val', example='84.6'),
        }
      ](name='dataPoints'),
      sceneId?: string(name='sceneId', example='all'),
    }
  ](name='result'),
}

model DescribeUserMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserMetricsResponseBody(name='body'),
}

async function describeUserMetricsWithOptions(instanceId: string, request: DescribeUserMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserMetrics',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserMetrics(instanceId: string, request: DescribeUserMetricsRequest): DescribeUserMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserMetricsWithOptions(instanceId, request, headers, runtime);
}

model DowngradeInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-o400whm78004'),
  }(name='result', description='The returned results.'),
}

model DowngradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DowngradeInstanceResponseBody(name='body'),
}

/**
  * The new quota must be less than the selected quota.
  * The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) of recommendation requests: 10 to 500.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DowngradeInstanceResponse
 */
async function downgradeInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DowngradeInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DowngradeInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/downgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The new quota must be less than the selected quota.
  * The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) of recommendation requests: 10 to 500.
  *
  * @return DowngradeInstanceResponse
 */
async function downgradeInstance(instanceId: string): DowngradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return downgradeInstanceWithOptions(instanceId, headers, runtime);
}

model EnableExperimentResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: boolean(name='result', example='true'),
}

model EnableExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableExperimentResponseBody(name='body'),
}

async function enableExperimentWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): EnableExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'EnableExperiment',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/actions/enable-experiment`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableExperiment(instanceId: string, sceneId: string): EnableExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableExperimentWithOptions(instanceId, sceneId, headers, runtime);
}

model GenerateSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model GenerateSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateSampleResponseBody(name='body'),
}

async function generateSampleWithOptions(instanceId: string, sampleId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateSampleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GenerateSample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}/actions/generate`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateSample(instanceId: string, sampleId: string): GenerateSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateSampleWithOptions(instanceId, sampleId, headers, runtime);
}

model GetExtraDataSourceResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: ExtraDataSource(name='result'),
}

model GetExtraDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExtraDataSourceResponseBody(name='body'),
}

async function getExtraDataSourceWithOptions(instanceId: string, type: string, dataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetExtraDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetExtraDataSource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/extra-data-sources/${OpenApiUtil.getEncodeParam(type)}/${OpenApiUtil.getEncodeParam(dataSourceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExtraDataSource(instanceId: string, type: string, dataSourceId: string): GetExtraDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getExtraDataSourceWithOptions(instanceId, type, dataSourceId, headers, runtime);
}

model GetFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2020-04-23T06:08:48.000Z'),
      meta?: {
        description?: string(name='description', example='xx'),
        endTime?: long(name='endTime', example='1656518399'),
        metaType?: string(name='metaType', example='FlowControlTask'),
        sceneIds?: string(name='sceneIds', example='1,2,3'),
        selectionParams?: [ 
          {
            selectType?: string(name='selectType', example='QUERY_PUB_TIME'),
            selectValue?: string(name='selectValue', example='10000'),
            selectionOperation?: string(name='selectionOperation', example='OPERATOR_HIGHER'),
          }
        ](name='selectionParams'),
        startTime?: long(name='startTime', example='1640739600'),
        target?: {
          type?: string(name='type', example='EXPOSE_PERCENT'),
          value?: long(name='value', example='20'),
        }(name='target'),
        taskName?: string(name='taskName'),
      }(name='meta', description='meta'),
      status?: string(name='status', example='DRAFT'),
      taskId?: string(name='taskId', example='1666854602398'),
    }
  ](name='result'),
}

model GetFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFlowControlTaskResponseBody(name='body'),
}

async function getFlowControlTaskWithOptions(instanceId: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFlowControlTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFlowControlTask(instanceId: string, taskId: string): GetFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFlowControlTaskWithOptions(instanceId, taskId, headers, runtime);
}

model GetLatestDataDiagnoseTaskStatusResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result'),
}

model GetLatestDataDiagnoseTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLatestDataDiagnoseTaskStatusResponseBody(name='body'),
}

async function getLatestDataDiagnoseTaskStatusWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetLatestDataDiagnoseTaskStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetLatestDataDiagnoseTaskStatus',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-diagnose-task/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLatestDataDiagnoseTaskStatus(instanceId: string): GetLatestDataDiagnoseTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLatestDataDiagnoseTaskStatusWithOptions(instanceId, headers, runtime);
}

model GetRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingModelTemplate(name='result'),
}

model GetRankingModelTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRankingModelTemplateResponseBody(name='body'),
}

async function getRankingModelTemplateWithOptions(instanceId: string, templateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRankingModelTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRankingModelTemplate',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates/${OpenApiUtil.getEncodeParam(templateId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRankingModelTemplate(instanceId: string, templateId: string): GetRankingModelTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRankingModelTemplateWithOptions(instanceId, templateId, headers, runtime);
}

model GetRankingModelVersionResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingModelVersion(name='result'),
}

model GetRankingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRankingModelVersionResponseBody(name='body'),
}

async function getRankingModelVersionWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRankingModelVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRankingModelVersion',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-versions/${OpenApiUtil.getEncodeParam(versionId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRankingModelVersion(instanceId: string, versionId: string): GetRankingModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRankingModelVersionWithOptions(instanceId, versionId, headers, runtime);
}

model GetRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: RankingSystem(name='result'),
}

model GetRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRankingSystemResponseBody(name='body'),
}

/**
  * ****
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetRankingSystemResponse
 */
async function getRankingSystemWithOptions(instanceId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRankingSystemResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @return GetRankingSystemResponse
 */
async function getRankingSystem(instanceId: string, name: string): GetRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRankingSystemWithOptions(instanceId, name, headers, runtime);
}

model GetRankingSystemHistoryResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingSystemHistory(name='result'),
}

model GetRankingSystemHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRankingSystemHistoryResponseBody(name='body'),
}

async function getRankingSystemHistoryWithOptions(instanceId: string, name: string, operateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRankingSystemHistoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRankingSystemHistory',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}/histories/${OpenApiUtil.getEncodeParam(operateId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRankingSystemHistory(instanceId: string, name: string, operateId: string): GetRankingSystemHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRankingSystemHistoryWithOptions(instanceId, name, operateId, headers, runtime);
}

model GetSampleRequest {
  withExtendParmas?: boolean(name='withExtendParmas', example='true'),
}

model GetSampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model GetSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSampleResponseBody(name='body'),
}

async function getSampleWithOptions(instanceId: string, sampleId: string, request: GetSampleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSampleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.withExtendParmas)) {
    query['withExtendParmas'] = request.withExtendParmas;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSample(instanceId: string, sampleId: string, request: GetSampleRequest): GetSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSampleWithOptions(instanceId, sampleId, request, headers, runtime);
}

model InitComputingResourceRequest {
  key?: string(name='key', example='MAX_COMPUTE'),
  type?: string(name='type', example='MAX_COMPUTE'),
}

model InitComputingResourceResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
}

model InitComputingResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitComputingResourceResponseBody(name='body'),
}

async function initComputingResourceWithOptions(instanceId: string, request: InitComputingResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitComputingResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.key)) {
    query['key'] = request.key;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitComputingResource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/computing-resources/actions/init`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initComputingResource(instanceId: string, request: InitComputingResourceRequest): InitComputingResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return initComputingResourceWithOptions(instanceId, request, headers, runtime);
}

model ListDashboardDetailsRequest {
  endTime?: long(name='endTime', example='1588521600'),
  experimentIds?: string(name='experimentIds', example='all'),
  matchTypes?: string(name='matchTypes'),
  metricType?: string(name='metricType', example='xxx'),
  sceneIds?: string(name='sceneIds', example='test'),
  startTime?: long(name='startTime', example='1588521600'),
  traceIds?: string(name='traceIds', description='trace_Id', example='Alibaba'),
}

model ListDashboardDetailsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      metricRes?: {
        detail?: map[string]any(name='detail', example='xxx'),
        total?: map[string]any(name='total', example='xxx'),
      }(name='metricRes'),
      sceneId?: string(name='sceneId', example='test'),
      traceId?: string(name='traceId', description='trace_id', example='Alibaba'),
    }
  ](name='result'),
}

model ListDashboardDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDashboardDetailsResponseBody(name='body'),
}

async function listDashboardDetailsWithOptions(instanceId: string, request: ListDashboardDetailsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDashboardDetailsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.experimentIds)) {
    query['experimentIds'] = request.experimentIds;
  }
  if (!Util.isUnset(request.matchTypes)) {
    query['matchTypes'] = request.matchTypes;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.sceneIds)) {
    query['sceneIds'] = request.sceneIds;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceIds)) {
    query['traceIds'] = request.traceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboardDetails',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDashboardDetails(instanceId: string, request: ListDashboardDetailsRequest): ListDashboardDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDashboardDetailsWithOptions(instanceId, request, headers, runtime);
}

model ListDashboardDetailsFlowsRequest {
  endTime?: long(name='endTime', example='1588521600'),
  experimentIds?: string(name='experimentIds', example='all'),
  metricType?: string(name='metricType', example='USERACTIONUV_COUNT'),
  sceneIds?: string(name='sceneIds', example='test'),
  startTime?: long(name='startTime', example='1588521600'),
  traceIds?: string(name='traceIds', description='traceId', example='Alibaba'),
}

model ListDashboardDetailsFlowsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    metricData?: [ 
      {
        metricRes?: map[string]any(name='metricRes', example='xxx'),
        sceneId?: string(name='sceneId', example='test'),
        traceId?: string(name='traceId', description='trace_id', example='Alibaba'),
      }
    ](name='metricData'),
    metricType?: string(name='metricType', example='USERACTIONUV_COUNT'),
  }(name='result'),
}

model ListDashboardDetailsFlowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDashboardDetailsFlowsResponseBody(name='body'),
}

async function listDashboardDetailsFlowsWithOptions(instanceId: string, request: ListDashboardDetailsFlowsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDashboardDetailsFlowsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.experimentIds)) {
    query['experimentIds'] = request.experimentIds;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.sceneIds)) {
    query['sceneIds'] = request.sceneIds;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceIds)) {
    query['traceIds'] = request.traceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboardDetailsFlows',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/details/flows`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDashboardDetailsFlows(instanceId: string, request: ListDashboardDetailsFlowsRequest): ListDashboardDetailsFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDashboardDetailsFlowsWithOptions(instanceId, request, headers, runtime);
}

model ListDashboardMetricsRequest {
  endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1586673466'),
  metricQuery?: string(name='metricQuery'),
  metricType?: string(name='metricType', description='The type of the metric. Valid values:

USER_ACTION_PV_COUNT: the number of page views

USER_ACTION_UV_COUNT: the number of unique views

USER_ACTION_PV_RATIO: the conversion rate

USER_ACTION_UV_RATIO: the traffic consumed per person', example='USERACTIONPV_COUNT'),
  metricView?: string(name='metricView'),
  startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1586673466'),
}

model ListDashboardMetricsResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      detail?: [ 
        {
          endTime?: string(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1586673466'),
          startTime?: string(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1586673466'),
          val?: string(name='val', description='The specific value of the metric.', example='13'),
        }
      ](name='detail', description='The details about the metric.'),
      total?: map[string]any(name='total', description='The statistical results.', example='xxx'),
    }
  ](name='result', description='The statistical results.'),
}

model ListDashboardMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDashboardMetricsResponseBody(name='body'),
}

async function listDashboardMetricsWithOptions(instanceId: string, request: ListDashboardMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDashboardMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricQuery)) {
    query['metricQuery'] = request.metricQuery;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.metricView)) {
    query['metricView'] = request.metricView;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboardMetrics',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDashboardMetrics(instanceId: string, request: ListDashboardMetricsRequest): ListDashboardMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDashboardMetricsWithOptions(instanceId, request, headers, runtime);
}

model ListDashboardMetricsFlowsRequest {
  endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1586673466'),
  metricType?: string(name='metricType', description='The type of the metric. Valid values:

USER_ACTION_PV_COUNT: the number of page views

USER_ACTION_UV_COUNT: the number of unique views

USER_ACTION_PV_RATIO: the conversion rate

USER_ACTION_UV_RATIO: the traffic consumed per person', example='USERACTIONPV_COUNT'),
  startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1586673466'),
}

model ListDashboardMetricsFlowsResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      metricData?: map[string]any(name='metricData', description='The metric data.', example='xxx'),
      metricType?: string(name='metricType', description='The type of the metric.', example='xxx'),
    }
  ](name='result', description='The statistical results.'),
}

model ListDashboardMetricsFlowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDashboardMetricsFlowsResponseBody(name='body'),
}

async function listDashboardMetricsFlowsWithOptions(instanceId: string, request: ListDashboardMetricsFlowsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDashboardMetricsFlowsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboardMetricsFlows',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/metrics/flows`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDashboardMetricsFlows(instanceId: string, request: ListDashboardMetricsFlowsRequest): ListDashboardMetricsFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDashboardMetricsFlowsWithOptions(instanceId, request, headers, runtime);
}

model ListDataDiagnoseReportsRequest {
  taskCreateTime?: long(name='taskCreateTime'),
}

model ListDataDiagnoseReportsResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result'),
}

model ListDataDiagnoseReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataDiagnoseReportsResponseBody(name='body'),
}

async function listDataDiagnoseReportsWithOptions(instanceId: string, request: ListDataDiagnoseReportsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataDiagnoseReportsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.taskCreateTime)) {
    query['taskCreateTime'] = request.taskCreateTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataDiagnoseReports',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-diagnose-reports`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataDiagnoseReports(instanceId: string, request: ListDataDiagnoseReportsRequest): ListDataDiagnoseReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataDiagnoseReportsWithOptions(instanceId, request, headers, runtime);
}

model ListDataDiagnoseSampleDetailsRequest {
  endTime?: long(name='endTime'),
  key?: string(name='key'),
  startTime?: long(name='startTime'),
  taskCreateTime?: long(name='taskCreateTime'),
  taskSource?: string(name='taskSource'),
}

model ListDataDiagnoseSampleDetailsResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: map[string]any(name='result'),
}

model ListDataDiagnoseSampleDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataDiagnoseSampleDetailsResponseBody(name='body'),
}

async function listDataDiagnoseSampleDetailsWithOptions(instanceId: string, request: ListDataDiagnoseSampleDetailsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataDiagnoseSampleDetailsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['key'] = request.key;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskCreateTime)) {
    query['taskCreateTime'] = request.taskCreateTime;
  }
  if (!Util.isUnset(request.taskSource)) {
    query['taskSource'] = request.taskSource;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataDiagnoseSampleDetails',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/data-diagnose-reports/sample-details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataDiagnoseSampleDetails(instanceId: string, request: ListDataDiagnoseSampleDetailsRequest): ListDataDiagnoseSampleDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataDiagnoseSampleDetailsWithOptions(instanceId, request, headers, runtime);
}

model ListDataSetResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: long(name='gmtCreate', example='1544112000000'),
      gmtModified?: long(name='gmtModified', example='1544112000000'),
      instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
      state?: string(name='state', example='Importing'),
      versionId?: string(name='versionId', example='20181023214546'),
    }
  ](name='result'),
}

model ListDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSetResponseBody(name='body'),
}

async function listDataSetWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSet',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSets`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSet(instanceId: string): ListDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSetWithOptions(instanceId, headers, runtime);
}

model ListDataSourceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        accessKeyId?: string(name='accessKeyId', example='xxx'),
        bucketName?: string(name='bucketName', example='airec'),
        partition?: string(name='partition', example='ds=20181122'),
        path?: string(name='path', example='oss://xxx.xxx'),
        projectName?: string(name='projectName', description='ODPS project name。', example='openrec_gray'),
        tableName?: string(name='tableName', description='ODPS table name。', example='test_maxcompute'),
        timestamp?: long(name='timestamp', example='1544112000000'),
        type?: string(name='type', example='ODPS'),
      }(name='meta'),
      tableName?: string(name='tableName', example='behavior'),
    }
  ](name='result'),
}

model ListDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceResponseBody(name='body'),
}

async function listDataSourceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSource(instanceId: string): ListDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourceWithOptions(instanceId, headers, runtime);
}

model ListExperimentsResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: [ 
    {
      base?: boolean(name='base', example='true'),
      buckets?: [ string ](name='buckets'),
      description?: string(name='description', example='xxx'),
      experimentId?: string(name='experimentId', example='123'),
      name?: string(name='name', example='test'),
      offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
      onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
      status?: string(name='status', example='init'),
    }
  ](name='result'),
}

model ListExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentsResponseBody(name='body'),
}

async function listExperimentsWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListExperimentsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListExperiments',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperiments(instanceId: string, sceneId: string): ListExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listExperimentsWithOptions(instanceId, sceneId, headers, runtime);
}

model ListExtraDataSourcesRequest {
  type?: string(name='type', example='UserCustomDataSource ItemCustomDataSource BehaviorCustomDataSource SampleCustomDataSource'),
}

model ListExtraDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    ExtraDataSource
  ](name='result'),
}

model ListExtraDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExtraDataSourcesResponseBody(name='body'),
}

async function listExtraDataSourcesWithOptions(instanceId: string, request: ListExtraDataSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExtraDataSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExtraDataSources',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/extra-data-sources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExtraDataSources(instanceId: string, request: ListExtraDataSourcesRequest): ListExtraDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listExtraDataSourcesWithOptions(instanceId, request, headers, runtime);
}

model ListFeatureTablesRequest {
  dataSourceId?: string(name='dataSourceId', example='1'),
  type?: string(name='type', example='UserFeatureTable'),
  updateFrequency?: string(name='updateFrequency', example='1'),
}

model ListFeatureTablesResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    FeatureTable
  ](name='result', example='result'),
}

model ListFeatureTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFeatureTablesResponseBody(name='body'),
}

async function listFeatureTablesWithOptions(instanceId: string, request: ListFeatureTablesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureTablesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.updateFrequency)) {
    query['updateFrequency'] = request.updateFrequency;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatureTables',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/feature-tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFeatureTables(instanceId: string, request: ListFeatureTablesRequest): ListFeatureTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeatureTablesWithOptions(instanceId, request, headers, runtime);
}

model ListFilteringAlgorithmsRequest {
  algorithmId?: string(name='algorithmId', example='123'),
  page?: int32(name='page', example='1'),
  size?: int32(name='size', example='1'),
  status?: string(name='status', example='xxx'),
}

model ListFilteringAlgorithmsResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count', example='12'),
  }(name='headers'),
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: [ 
    {
      algorithmId?: string(name='algorithmId', example='123'),
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        algorithmName?: string(name='algorithmName', example='test'),
        category?: string(name='category', example='odps'),
        clusterId?: string(name='clusterId', description='xxx', example='123'),
        cron?: string(name='cron', description='xxx', example='xxx'),
        cronEnabled?: boolean(name='cronEnabled', description='xxx', example='true'),
        description?: string(name='description', example='xxx'),
        extInfo?: {
          itemSeparator?: string(name='itemSeparator', description='xxx', example='xxx'),
          kvSeparator?: string(name='kvSeparator', description='xxx', example='xxx'),
        }(name='extInfo', description='xxx'),
        metaType?: string(name='metaType', description='xxx', example='xxx'),
        projectName?: string(name='projectName', description='xxx', example='xxx'),
        tableName?: string(name='tableName', example='xxx'),
        taskId?: string(name='taskId', example='123'),
        threshold?: {
          indexLossThreshold?: int32(name='indexLossThreshold', description='xxx', example='1'),
          indexSizeThreshold?: int32(name='indexSizeThreshold', description='xxx', example='1'),
          sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', description='xxx', example='1'),
          sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', description='xxx', example='1'),
        }(name='threshold', description='xxx'),
        type?: string(name='type', example='odps'),
      }(name='meta'),
      status?: string(name='status', example='xxx'),
    }
  ](name='result'),
}

model ListFilteringAlgorithmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilteringAlgorithmsResponseBody(name='body'),
}

async function listFilteringAlgorithmsWithOptions(instanceId: string, request: ListFilteringAlgorithmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFilteringAlgorithmsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.algorithmId)) {
    query['algorithmId'] = request.algorithmId;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFilteringAlgorithms',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFilteringAlgorithms(instanceId: string, request: ListFilteringAlgorithmsRequest): ListFilteringAlgorithmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFilteringAlgorithmsWithOptions(instanceId, request, headers, runtime);
}

model ListFlowControlTaskRequest {
  page?: int32(name='page', example='1'),
  size?: int32(name='size', example='10'),
  status?: string(name='status', example='DRAFT'),
  taskId?: string(name='taskId', example='1661506482'),
}

model ListFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='6E427B10-30FC-1873-922F-FC176D3398D4'),
  result?: [ 
    {
      taskId?: string(name='TaskId', example='1661506482'),
      gmtCreate?: string(name='gmtCreate', example='2022-08-06T06:14:01.000Z'),
      gmtModified?: string(name='gmtModified', example='2022-08-06T06:14:01.000Z'),
      meta?: {
        description?: string(name='description'),
        endTime?: long(name='endTime', example='1621267200'),
        metaType?: string(name='metaType', example='metaType'),
        sceneIds?: string(name='sceneIds', example='1,2,3'),
        selectionParams?: [ 
          {
            selectType?: string(name='selectType', example='selectType'),
            selectValue?: string(name='selectValue', example='selectValue'),
            selectionOperation?: string(name='selectionOperation', example='selectionOperation'),
          }
        ](name='selectionParams'),
        startTime?: long(name='startTime', example='1621267200'),
        target?: {
          type?: string(name='type', example='EXPOSE_PERCENT'),
          value?: long(name='value', example='50'),
        }(name='target'),
        taskName?: string(name='taskName', example='testtaskname'),
      }(name='meta'),
      status?: string(name='status', example='DRAFT'),
    }
  ](name='result'),
}

model ListFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskResponseBody(name='body'),
}

async function listFlowControlTaskWithOptions(instanceId: string, request: ListFlowControlTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['taskId'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTask(instanceId: string, request: ListFlowControlTaskRequest): ListFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskWithOptions(instanceId, request, headers, runtime);
}

model ListFlowControlTaskInvalidItemsRequest {
  body?: [ string ](name='body'),
}

model ListFlowControlTaskInvalidItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      invalidItems?: [ 
        {
          itemId?: string(name='itemId', example='287723'),
          itemType?: string(name='itemType', example='video'),
        }
      ](name='invalidItems'),
    }
  ](name='result'),
}

model ListFlowControlTaskInvalidItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskInvalidItemsResponseBody(name='body'),
}

async function listFlowControlTaskInvalidItemsWithOptions(instanceId: string, taskId: string, request: ListFlowControlTaskInvalidItemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskInvalidItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTaskInvalidItems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/invalidItems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTaskInvalidItems(instanceId: string, taskId: string, request: ListFlowControlTaskInvalidItemsRequest): ListFlowControlTaskInvalidItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskInvalidItemsWithOptions(instanceId, taskId, request, headers, runtime);
}

model ListFlowControlTaskItemReportsRequest {
  count?: string(name='count', example='5'),
  selectTimeType?: string(name='selectTimeType', example='yesterDay'),
  selectType?: string(name='selectType', example='invalidItem'),
}

model ListFlowControlTaskItemReportsResponseBody = {
  requestId?: string(name='requestId', example='D486768B-8BF8-4D80-B491-43DC3D0AF8AB'),
  result?: {
    detail?: [ 
      {
        accClickPercent?: string(name='accClickPercent', example='3.24'),
        accItemClick?: string(name='accItemClick', example='1000'),
        accItemCtr?: string(name='accItemCtr', example='4.56'),
        accItemPv?: string(name='accItemPv', example='500'),
        accPvPercent?: string(name='accPvPercent', example='20.12'),
        accTaskClick?: string(name='accTaskClick', example='600'),
        accTaskCtr?: string(name='accTaskCtr', example='3.22'),
        accTaskPv?: string(name='accTaskPv', example='200'),
        accTaskRank?: string(name='accTaskRank', example='10'),
        clickPercent?: string(name='clickPercent', example='1.23'),
        itemClick?: string(name='itemClick', example='100'),
        itemCtr?: string(name='itemCtr', example='2.34'),
        itemId?: string(name='itemId', example='123'),
        itemPv?: string(name='itemPv', example='100'),
        itemType?: string(name='itemType', example='video'),
        pvPercent?: string(name='pvPercent', example='10.12'),
        taskClick?: string(name='taskClick', example='100'),
        taskCtr?: string(name='taskCtr', example='1.23'),
        taskId?: string(name='taskId', example='1666669577221'),
        taskPv?: string(name='taskPv', example='50'),
        taskRank?: string(name='taskRank', example='12'),
      }
    ](name='detail'),
  }(name='result'),
}

model ListFlowControlTaskItemReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskItemReportsResponseBody(name='body'),
}

async function listFlowControlTaskItemReportsWithOptions(instanceId: string, taskId: string, request: ListFlowControlTaskItemReportsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskItemReportsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.selectTimeType)) {
    query['selectTimeType'] = request.selectTimeType;
  }
  if (!Util.isUnset(request.selectType)) {
    query['selectType'] = request.selectType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTaskItemReports',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/itemReports`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTaskItemReports(instanceId: string, taskId: string, request: ListFlowControlTaskItemReportsRequest): ListFlowControlTaskItemReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskItemReportsWithOptions(instanceId, taskId, request, headers, runtime);
}

model ListFlowControlTaskItemsRequest {
  page?: int32(name='page', example='1'),
  size?: int32(name='size', example='10'),
}

model ListFlowControlTaskItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', example='zhangsan'),
        categoryPath?: string(name='categoryPath', example='12_34'),
        channel?: string(name='channel', example='news'),
        duration?: string(name='duration', example='18'),
        expireTime?: string(name='expireTime', example='1612687809'),
        itemId?: string(name='itemId', example='123'),
        itemType?: string(name='itemType', example='video'),
        lastModifyTime?: string(name='lastModifyTime', example='1662346558'),
        pubTime?: string(name='pubTime', example='1661931487'),
        status?: string(name='status', example='1'),
        title?: string(name='title', example='test'),
        weight?: string(name='weight', example='10'),
      }
    ](name='detail'),
    totalCount?: string(name='totalCount', example='1'),
    validCount?: string(name='validCount', example='1'),
  }(name='result'),
}

model ListFlowControlTaskItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskItemsResponseBody(name='body'),
}

async function listFlowControlTaskItemsWithOptions(instanceId: string, taskId: string, request: ListFlowControlTaskItemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskItemsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTaskItems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/actions/items`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTaskItems(instanceId: string, taskId: string, request: ListFlowControlTaskItemsRequest): ListFlowControlTaskItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskItemsWithOptions(instanceId, taskId, request, headers, runtime);
}

model ListFlowControlTaskReferenceResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request. The value is unique for each request. This helps troubleshoot issues later.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    last7PvPercent?: double(name='last7PvPercent', description='The average exposure rate of the item pool in the last seven days.', example='0.1'),
    last7ScenePv?: double(name='last7ScenePv', description='The average number of exposures for the items in the selected scene in the last seven days.', example='10'),
    last7TaskPv?: double(name='last7TaskPv', description='The average number of exposures for the item pool in the selected scene in the last seven days.', example='10'),
    lastPvPercent?: double(name='lastPvPercent', description='The exposure rate of the item pool yesterday.', example='0.1'),
    lastScenePv?: long(name='lastScenePv', description='The total number of exposures for the items in the selected scene yesterday.', example='10'),
    lastTaskPv?: long(name='lastTaskPv', description='The number of exposures for the item pool in the selected scene yesterday.', example='10'),
    referenceId?: string(name='referenceId', description='The ID of the reference data.', example='421351235918'),
  }(name='result', description='The returned results.'),
}

model ListFlowControlTaskReferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskReferenceResponseBody(name='body'),
}

async function listFlowControlTaskReferenceWithOptions(instanceId: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskReferenceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTaskReference',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/reference`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTaskReference(instanceId: string, taskId: string): ListFlowControlTaskReferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskReferenceWithOptions(instanceId, taskId, headers, runtime);
}

model ListFlowControlTaskReportsRequest {
  endTime?: string(name='endTime', example='1668268800'),
  startTime?: string(name='startTime', example='1666195200'),
}

model ListFlowControlTaskReportsResponseBody = {
  requestId?: string(name='requestId', example='16B78383-2803-4964-9605-37B30C073B0E'),
  result?: {
    metrics?: [ 
      {
        details?: [ 
          {
            endTime?: long(name='endTime', example='1664035200'),
            startTime?: long(name='startTime', example='1664000452'),
            val?: long(name='val', example='0'),
          }
        ](name='details'),
        type?: string(name='type', example='taskPv'),
      }
    ](name='metrics'),
    total?: {
      invalidPercent?: double(name='InvalidPercent', example='0.3'),
      accTaskCtr?: double(name='accTaskCtr', example='0.1'),
      accTaskPv?: long(name='accTaskPv', example='1000'),
      accTotalCtr?: double(name='accTotalCtr', example='0.2'),
    }(name='total'),
  }(name='result'),
}

model ListFlowControlTaskReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowControlTaskReportsResponseBody(name='body'),
}

async function listFlowControlTaskReportsWithOptions(instanceId: string, taskId: string, request: ListFlowControlTaskReportsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowControlTaskReportsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowControlTaskReports',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/flowTaskReports`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlowControlTaskReports(instanceId: string, taskId: string, request: ListFlowControlTaskReportsRequest): ListFlowControlTaskReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowControlTaskReportsWithOptions(instanceId, taskId, request, headers, runtime);
}

model ListIndexVersionsResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [ 
    {
      builtTime?: string(name='builtTime', example='2020-11-08T02:00:00Z'),
      code?: string(name='code', example='abc'),
      costSeconds?: int32(name='costSeconds', example='600'),
      flowType?: string(name='flowType', example='Auto'),
      message?: string(name='message', example='xxx'),
      progress?: int32(name='progress', example='80'),
      rollbackEnabled?: boolean(name='rollbackEnabled', example='true'),
      size?: long(name='size', example='300922211'),
      status?: string(name='status', example='abc'),
      switchedTime?: string(name='switchedTime', example='2020-11-08T02:00:00Z'),
      versionId?: string(name='versionId', example='2020112301'),
    }
  ](name='result'),
}

model ListIndexVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIndexVersionsResponseBody(name='body'),
}

async function listIndexVersionsWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListIndexVersionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListIndexVersions',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/index-versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIndexVersions(instanceId: string, algorithmId: string): ListIndexVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIndexVersionsWithOptions(instanceId, algorithmId, headers, runtime);
}

model ListInstanceRequest {
  expiredTime?: string(name='expiredTime', example='1608533404'),
  instanceId?: string(name='instanceId', example='airec-cn-xxxxxx'),
  name?: string(name='name'),
  page?: int32(name='page', example='1'),
  size?: int32(name='size', example='10'),
  status?: string(name='status', example='Running'),
}

model ListInstanceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      chargeType?: string(name='chargeType', example='PrePaid'),
      commodityCode?: string(name='commodityCode', example='airecpre'),
      dataSetVersion?: string(name='dataSetVersion', example='20181206170353'),
      expiredTime?: string(name='expiredTime', example='2019-01-06T16:00:00.000Z'),
      gmtCreate?: string(name='gmtCreate', example='2018-12-06T06:14:01.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-06T11:17:49.000Z'),
      industry?: string(name='industry', example='news'),
      instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
      lockMode?: string(name='lockMode', example='Unlock'),
      name?: string(name='name', example='airec-cn-o400whm78004'),
      regionId?: string(name='regionId', example='cn-beijing'),
      status?: string(name='status', example='Running'),
      type?: string(name='type', example='Standard'),
    }
  ](name='result'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstanceWithOptions(request: ListInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.expiredTime)) {
    query['expiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['instanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceWithOptions(request, headers, runtime);
}

model ListInstanceTaskResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      name?: string(name='name', example='DATA_IMPORT'),
      subProgressInfos?: [ 
        {
          detail?: string(name='detail', example='data import progress info'),
          finishedNum?: int32(name='finishedNum', example='11'),
          progress?: int32(name='progress', example='100'),
          totalNum?: int32(name='totalNum', example='11'),
          type?: string(name='type', example='DATA_PROCESS'),
        }
      ](name='subProgressInfos'),
      totalProgress?: int32(name='totalProgress', example='100'),
    }
  ](name='result'),
}

model ListInstanceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceTaskResponseBody(name='body'),
}

async function listInstanceTaskWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstanceTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceTask(instanceId: string): ListInstanceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstanceTaskWithOptions(instanceId, headers, runtime);
}

model ListItemsRequest {
  page?: int32(name='page', example='1'),
  size?: int32(name='size', example='10'),
  strategyUsed?: boolean(name='strategyUsed'),
  withInvalidDetail?: boolean(name='withInvalidDetail'),
}

model ListItemsResponseBody = {
  requestId?: string(name='requestId', example='6839AE7C-A984-48C1-AC17-331BAC6D97BC'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', example='abc'),
        brandId?: string(name='brandId', example='1'),
        categoryPath?: string(name='categoryPath', example='1_2'),
        channel?: string(name='channel', example='news'),
        duration?: string(name='duration', example='30'),
        expireTime?: string(name='expireTime', example='1647998107012'),
        itemId?: string(name='itemId', description='itemId', example='123'),
        itemType?: string(name='itemType', description='itemType', example='item'),
        pubTime?: string(name='pubTime', example='1647998107012'),
        shopId?: string(name='shopId', example='1'),
        status?: string(name='status', example='1'),
        title?: string(name='title', example='test'),
      }
    ](name='detail'),
    total?: {
      instanceRecommendItem?: long(name='instanceRecommendItem', example='200'),
      queryCount?: long(name='queryCount', example='3000'),
      sceneRecommendItem?: long(name='sceneRecommendItem', example='200'),
      sceneWeightItem?: long(name='sceneWeightItem', example='10'),
      totalCount?: long(name='totalCount', example='5000'),
      weightItem?: long(name='weightItem', example='10'),
    }(name='total', description='total'),
  }(name='result'),
}

model ListItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListItemsResponseBody(name='body'),
}

async function listItemsWithOptions(instanceId: string, request: ListItemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListItemsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.strategyUsed)) {
    query['strategyUsed'] = request.strategyUsed;
  }
  if (!Util.isUnset(request.withInvalidDetail)) {
    query['withInvalidDetail'] = request.withInvalidDetail;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListItems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/items/actions/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listItems(instanceId: string, request: ListItemsRequest): ListItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listItemsWithOptions(instanceId, request, headers, runtime);
}

model ListLogsRequest {
  endTime?: int32(name='endTime', example='1586673466'),
  page?: int32(name='page', example='1'),
  queryParams?: string(name='queryParams', example='requestId:xxxx;requestUri:xxx;'),
  size?: int32(name='size', example='10'),
  startTime?: int32(name='startTime', example='1586673466'),
}

model ListLogsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  headers?: {
    xTotalCount?: int32(name='X-Total-Count', example='1000'),
  }(name='headers'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [  map[string]any ](name='result'),
}

model ListLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogsResponseBody(name='body'),
}

async function listLogsWithOptions(instanceId: string, request: ListLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLogsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.queryParams)) {
    query['queryParams'] = request.queryParams;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogs',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogs(instanceId: string, request: ListLogsRequest): ListLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listLogsWithOptions(instanceId, request, headers, runtime);
}

model ListMixCategoriesResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='Success'),
  requestId?: string(name='requestId', example='ED093A1D-1C56-57A2-B078-3C518F632F03'),
  result?: [ 
    {
      categories?: [ long ](name='categories'),
    }
  ](name='result'),
}

model ListMixCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMixCategoriesResponseBody(name='body'),
}

async function listMixCategoriesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListMixCategoriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListMixCategories',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/configurations/mixCategories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMixCategories(): ListMixCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMixCategoriesWithOptions(headers, runtime);
}

model ListOfflineStoragesResponseBody = {
  requestId?: bytes(name='requestId', example='6839AE7C-A984-48C1-AC17-331BAC6D97BC'),
  result?: [ 
    {
      meta?: map[string]any(name='meta'),
      tableName?: bytes(name='tableName', example='item'),
    }
  ](name='result'),
}

model ListOfflineStoragesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOfflineStoragesResponseBody(name='body'),
}

async function listOfflineStoragesWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListOfflineStoragesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListOfflineStorages',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/%5BinstanceId%5D/offlineStorages`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOfflineStorages(instanceId: string): ListOfflineStoragesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listOfflineStoragesWithOptions(instanceId, headers, runtime);
}

model ListRankingModelTemplatesRequest {
  page?: long(name='page', example='1'),
  size?: long(name='size', example='1'),
}

model ListRankingModelTemplatesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [
    RankingModelTemplate
  ](name='result'),
}

model ListRankingModelTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRankingModelTemplatesResponseBody(name='body'),
}

async function listRankingModelTemplatesWithOptions(instanceId: string, request: ListRankingModelTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRankingModelTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRankingModelTemplates',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRankingModelTemplates(instanceId: string, request: ListRankingModelTemplatesRequest): ListRankingModelTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRankingModelTemplatesWithOptions(instanceId, request, headers, runtime);
}

model ListRankingModelVersionsRequest {
  page?: long(name='page', description='The number of the page to return.', example='1'),
  size?: long(name='size', description='The number of entries to return on each page.', example='10'),
  status?: string(name='status', description='The state of the version.', example='TRAINING'),
  templateId?: string(name='templateId', description='The ID of the model.', example='a-a-a'),
}

model ListRankingModelVersionsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingModelVersion
  ](name='result', description='The returned key-value pairs.'),
}

model ListRankingModelVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRankingModelVersionsResponseBody(name='body'),
}

async function listRankingModelVersionsWithOptions(instanceId: string, request: ListRankingModelVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRankingModelVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    query['templateId'] = request.templateId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRankingModelVersions',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRankingModelVersions(instanceId: string, request: ListRankingModelVersionsRequest): ListRankingModelVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRankingModelVersionsWithOptions(instanceId, request, headers, runtime);
}

model ListRankingModelsRequest {
  page?: int32(name='page', example='1'),
  rankingModelId?: string(name='rankingModelId', example='xxx'),
  size?: int32(name='size', example='1'),
}

model ListRankingModelsResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='xxx'),
  requestId?: string(name='requestId', example='2D898E45-B97A-4245-B590-6D0AFEAF626B'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2020-11-11T09:47:43.000Z'),
      gmtModified?: string(name='gmtModified', example='2020-11-11T09:47:43.000Z'),
      meta?: map[string]any(name='meta', example='xxx'),
      rankingModelId?: string(name='rankingModelId', example='123'),
    }
  ](name='result'),
}

model ListRankingModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRankingModelsResponseBody(name='body'),
}

async function listRankingModelsWithOptions(instanceId: string, request: ListRankingModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRankingModelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.rankingModelId)) {
    query['rankingModelId'] = request.rankingModelId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRankingModels',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRankingModels(instanceId: string, request: ListRankingModelsRequest): ListRankingModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRankingModelsWithOptions(instanceId, request, headers, runtime);
}

model ListRankingSystemHistoriesRequest {
  operateType?: string(name='operateType', description='The type of the operation. Valid values: CONF_CHANGE: configuration changes. DEPLOY_CHANGE: changes in deployment methods.', example='CONF_CHANGE'),
  page?: long(name='page', description='The number of the page to return.', example='1'),
  size?: long(name='size', description='The number of entries to return on each page.', example='10'),
}

model ListRankingSystemHistoriesResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingSystemHistory
  ](name='result', description='The returned result.'),
}

model ListRankingSystemHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRankingSystemHistoriesResponseBody(name='body'),
}

async function listRankingSystemHistoriesWithOptions(instanceId: string, name: string, request: ListRankingSystemHistoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRankingSystemHistoriesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.operateType)) {
    query['operateType'] = request.operateType;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRankingSystemHistories',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}/histories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRankingSystemHistories(instanceId: string, name: string, request: ListRankingSystemHistoriesRequest): ListRankingSystemHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRankingSystemHistoriesWithOptions(instanceId, name, request, headers, runtime);
}

model ListRankingSystemsRequest {
  deployStatus?: string(name='deployStatus', description='The state of the deployment. Valid values: NOT_DEPLOYED: The ranking service is not deployed. DEPLOY_SUCCESS: The ranking service is deployed.', example='NOT_DEPLOYED'),
  name?: string(name='name', description='The name of the ranking service.', example='service-a'),
  page?: long(name='page', description='The number of the page to return.', example='1'),
  size?: long(name='size', description='The number of entries to return on each page.', example='10'),
}

model ListRankingSystemsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: [
    RankingSystem
  ](name='result', description='The returned result.'),
}

model ListRankingSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRankingSystemsResponseBody(name='body'),
}

async function listRankingSystemsWithOptions(instanceId: string, request: ListRankingSystemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRankingSystemsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.deployStatus)) {
    query['deployStatus'] = request.deployStatus;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRankingSystems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRankingSystems(instanceId: string, request: ListRankingSystemsRequest): ListRankingSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRankingSystemsWithOptions(instanceId, request, headers, runtime);
}

model ListRuleConditionsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      selectType?: string(name='selectType', example='QUERY_ITEM_TYPE'),
      selectValue?: string(name='selectValue', example='xxx'),
      selectionOperation?: string(name='selectionOperation', example='QUERY_VALUE_IN'),
    }
  ](name='result'),
}

model ListRuleConditionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleConditionsResponseBody(name='body'),
}

async function listRuleConditionsWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListRuleConditionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListRuleConditions',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rule-conditions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRuleConditions(instanceId: string): ListRuleConditionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRuleConditionsWithOptions(instanceId, headers, runtime);
}

model ListRuleTasksRequest {
  sceneId?: string(name='sceneId', description='The ID of the scene.', example='testid'),
}

model ListRuleTasksResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    finishRate?: int32(name='finishRate', description='The completion rate of the task.', example='50'),
    finishTime?: int32(name='finishTime', description='The time when the task was complete.', example='1588240081'),
  }(name='result', description='The returned results.'),
}

model ListRuleTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleTasksResponseBody(name='body'),
}

async function listRuleTasksWithOptions(instanceId: string, request: ListRuleTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRuleTasksResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRuleTasks',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rule-tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRuleTasks(instanceId: string, request: ListRuleTasksRequest): ListRuleTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRuleTasksWithOptions(instanceId, request, headers, runtime);
}

model ListRulesRequest {
  endTime?: long(name='endTime', example='1567584765'),
  page?: int32(name='page', example='1'),
  ruleType?: string(name='ruleType', example='selection'),
  sceneId?: string(name='sceneId', example='test'),
  size?: int32(name='size', example='10'),
  startTime?: long(name='startTime', example='1567584765'),
  status?: string(name='status', example='EFFECTIVE'),
}

model ListRulesResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
      gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
      ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
      status?: string(name='status', example='true'),
    }
  ](name='result'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(instanceId: string, request: ListRulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['ruleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRules',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rules`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRules(instanceId: string, request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRulesWithOptions(instanceId, request, headers, runtime);
}

model ListSampleFormatConfigsResponseBody = {
  requestId?: string(name='requestId', example='EDF43C1F-99E4-431F-A7C0-8B260A5A792E'),
  result?: map[string]any(name='result', example='xxx'),
}

model ListSampleFormatConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSampleFormatConfigsResponseBody(name='body'),
}

async function listSampleFormatConfigsWithOptions(instanceId: string, sampleId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSampleFormatConfigsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSampleFormatConfigs',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}/format-configs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSampleFormatConfigs(instanceId: string, sampleId: string): ListSampleFormatConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSampleFormatConfigsWithOptions(instanceId, sampleId, headers, runtime);
}

model ListSamplesRequest {
  page?: long(name='page', example='1'),
  sampleId?: string(name='sampleId', example='Sample1'),
  size?: long(name='size', example='10'),
}

model ListSamplesResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: [
    Sample
  ](name='result', example='result'),
}

model ListSamplesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSamplesResponseBody(name='body'),
}

async function listSamplesWithOptions(instanceId: string, request: ListSamplesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSamplesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.sampleId)) {
    query['sampleId'] = request.sampleId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSamples',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSamples(instanceId: string, request: ListSamplesRequest): ListSamplesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSamplesWithOptions(instanceId, request, headers, runtime);
}

model ListSceneItemsRequest {
  operationRuleId?: string(name='operationRuleId', example='1'),
  page?: int32(name='page', example='1'),
  previewType?: string(name='previewType', example='PREVIEW_ITEM'),
  queryCount?: int32(name='queryCount', example='20'),
  selectionRuleId?: string(name='selectionRuleId', example='1'),
  size?: int32(name='size', example='10'),
}

model ListSceneItemsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    detail?: [ 
      {
        author?: string(name='author', example='zhangsan'),
        brandId?: string(name='brandId', example='123'),
        categoryPath?: string(name='categoryPath', example='12_34'),
        channel?: string(name='channel'),
        duration?: string(name='duration', example='300'),
        expireTime?: string(name='expireTime', example='1612687809'),
        itemId?: string(name='itemId', description='item_id', example='123'),
        itemType?: string(name='itemType', description='item_type', example='video'),
        pubTime?: string(name='pubTime', example='1612687809'),
        shopId?: string(name='shopId', example='123'),
        status?: string(name='status', example='1'),
        title?: string(name='title', example='title'),
      }
    ](name='detail'),
    total?: {
      instanceRecommendItem?: long(name='instanceRecommendItem', example='1000'),
      sceneRecommendItem?: long(name='sceneRecommendItem', example='1000'),
      sceneWeightItem?: long(name='sceneWeightItem', example='1000'),
      totalCount?: long(name='totalCount', example='1000'),
      weightItem?: long(name='weightItem', example='1000'),
    }(name='total'),
  }(name='result'),
}

model ListSceneItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSceneItemsResponseBody(name='body'),
}

async function listSceneItemsWithOptions(instanceId: string, sceneId: string, request: ListSceneItemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSceneItemsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.operationRuleId)) {
    query['operationRuleId'] = request.operationRuleId;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.previewType)) {
    query['previewType'] = request.previewType;
  }
  if (!Util.isUnset(request.queryCount)) {
    query['queryCount'] = request.queryCount;
  }
  if (!Util.isUnset(request.selectionRuleId)) {
    query['selectionRuleId'] = request.selectionRuleId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSceneItems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/items`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSceneItems(instanceId: string, sceneId: string, request: ListSceneItemsRequest): ListSceneItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSceneItemsWithOptions(instanceId, sceneId, request, headers, runtime);
}

model ListSceneParametersResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    sceneId?: [ string ](name='sceneId'),
    traceId?: [ string ](name='traceId'),
  }(name='result'),
}

model ListSceneParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSceneParametersResponseBody(name='body'),
}

async function listSceneParametersWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSceneParametersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSceneParameters',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dashboard/scene-parameters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSceneParameters(instanceId: string): ListSceneParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSceneParametersWithOptions(instanceId, headers, runtime);
}

model ListScenesRequest {
  page?: int32(name='page', example='1'),
  sceneId?: string(name='sceneId', example='test'),
  size?: int32(name='size', example='10'),
  status?: string(name='status', example='1'),
}

model ListScenesResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2020-04-23T06:08:48.000Z'),
      gmtModified?: string(name='gmtModified', example='2020-04-23T06:08:48.000Z'),
      sceneId?: string(name='sceneId', example='test'),
      status?: string(name='status', example='1'),
    }
  ](name='result'),
}

model ListScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListScenesResponseBody(name='body'),
}

async function listScenesWithOptions(instanceId: string, request: ListScenesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListScenesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScenes',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listScenes(instanceId: string, request: ListScenesRequest): ListScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listScenesWithOptions(instanceId, request, headers, runtime);
}

model ListUmengAppkeysResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: [ 
    {
      appkey?: string(name='appkey', description='appkey', example='5ddcf39f57729e708b00000e'),
      name?: string(name='name', example='xxx'),
      platform?: string(name='platform', description='Android/ios', example='ios'),
    }
  ](name='result'),
}

model ListUmengAppkeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUmengAppkeysResponseBody(name='body'),
}

async function listUmengAppkeysWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListUmengAppkeysResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListUmengAppkeys',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/umeng/appkeys`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUmengAppkeys(): ListUmengAppkeysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUmengAppkeysWithOptions(headers, runtime);
}

model ListUserClustersResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count', example='1'),
  }(name='headers', description='headers info'),
  requestId?: string(name='requestId', example='1E2CBBA8-C623-4FEE-BC84-9672E460CA39'),
  result?: [ 
    {
      gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
      gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
      meta?: {
        description?: string(name='description', example='tst'),
        metaType?: string(name='metaType', example='UserCluster'),
      }(name='meta', description='meta'),
      name?: string(name='name', example='mycluster-for-airec'),
      status?: string(name='status', example='1'),
    }
  ](name='result'),
}

model ListUserClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserClustersResponseBody(name='body'),
}

async function listUserClustersWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserClustersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListUserClusters',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/user-clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserClusters(instanceId: string): ListUserClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserClustersWithOptions(instanceId, headers, runtime);
}

model ModifyDataSourceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      accessKeyId?: string(name='accessKeyId', example='xxx'),
      bucketName?: string(name='bucketName', example='airec'),
      partition?: string(name='partition', example='ds=20181122'),
      path?: string(name='path', example='oss://xxx.xxx'),
      projectName?: string(name='projectName', description='ODPS project name。', example='openrec_gray'),
      tableName?: string(name='tableName', description='ODPS table name。', example='test_maxcompute'),
      timestamp?: long(name='timestamp', example='1544112000000'),
      type?: string(name='type', example='ODPS'),
    }(name='meta'),
    tableName?: string(name='tableName', example='behavior'),
  }(name='result'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSourceWithOptions(instanceId: string, tableName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyDataSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataSource',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSources/${OpenApiUtil.getEncodeParam(tableName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataSource(instanceId: string, tableName: string): ModifyDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyDataSourceWithOptions(instanceId, tableName, headers, runtime);
}

model ModifyFeatureTableResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: FeatureTable(name='result'),
}

model ModifyFeatureTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFeatureTableResponseBody(name='body'),
}

async function modifyFeatureTableWithOptions(instanceId: string, type: string, featureTableId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFeatureTableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyFeatureTable',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/feature-tables/${OpenApiUtil.getEncodeParam(type)}/${OpenApiUtil.getEncodeParam(featureTableId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFeatureTable(instanceId: string, type: string, featureTableId: string): ModifyFeatureTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFeatureTableWithOptions(instanceId, type, featureTableId, headers, runtime);
}

model ModifyFilteringAlgorithmMetaResponseBody = {
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', example='abc'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', example='test'),
      category?: string(name='category', example='1_2'),
      clusterId?: string(name='clusterId', example='244'),
      cron?: string(name='cron', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled', example='Y'),
      description?: string(name='description', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', example=','),
        kvSeparator?: string(name='kvSeparator', example=':'),
      }(name='extInfo'),
      metaType?: string(name='metaType', example='metaType'),
      projectName?: string(name='projectName', example='test'),
      tableName?: string(name='tableName', example='test_table'),
      taskId?: string(name='taskId', description='taskId', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', example='1'),
      }(name='threshold'),
      type?: string(name='type', example='ODPS'),
    }(name='meta'),
    status?: string(name='status', example='Running'),
  }(name='result'),
}

model ModifyFilteringAlgorithmMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFilteringAlgorithmMetaResponseBody(name='body'),
}

async function modifyFilteringAlgorithmMetaWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFilteringAlgorithmMetaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyFilteringAlgorithmMeta',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/meta`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFilteringAlgorithmMeta(instanceId: string, algorithmId: string): ModifyFilteringAlgorithmMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFilteringAlgorithmMetaWithOptions(instanceId, algorithmId, headers, runtime);
}

model ModifyFlowControlTaskRequest {
  taskName?: string(name='TaskName', example='testname'),
  description?: string(name='description'),
  endTime?: long(name='endTime', example='1639519200'),
  metaType?: string(name='metaType', example='FlowControlTask'),
  sceneIds?: string(name='sceneIds', example='all,sy101'),
  selectionParams?: [ 
    {
      selectType?: string(name='selectType', example='invalidItem'),
      selectValue?: string(name='selectValue', example='20'),
      selectionOperation?: string(name='selectionOperation', example='OPERATOR_HIGHER'),
    }
  ](name='selectionParams'),
  startTime?: long(name='startTime', example='1638460800'),
  target?: {
    type?: string(name='type', example='EXPOSE_PERCENT'),
    value?: long(name='value', example='50'),
  }(name='target'),
}

model ModifyFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    taskId?: string(name='TaskId', example='1661506482'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-11-11T09:47:43.000Z'),
    meta?: {
      description?: string(name='description', example='tst'),
      endTime?: long(name='endTime', example='1656518399'),
      metaType?: string(name='metaType', example='FlowControlTask'),
      sceneIds?: string(name='sceneIds', example='1,2,3'),
      selectionParams?: [ 
        {
          selectType?: string(name='selectType', example='QUERY_PUB_TIME'),
          selectValue?: string(name='selectValue', example='10000'),
          selectionOperation?: string(name='selectionOperation', example='OPERATOR_HIGHER'),
        }
      ](name='selectionParams'),
      startTime?: long(name='startTime', example='1640739600'),
      target?: {
        type?: string(name='type', example='EXPOSE_PERCENT'),
        value?: long(name='value', example='20'),
      }(name='target'),
      taskName?: string(name='taskName'),
    }(name='meta', description='meta'),
    status?: string(name='status', example='DRAFT'),
  }(name='result'),
}

model ModifyFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFlowControlTaskResponseBody(name='body'),
}

async function modifyFlowControlTaskWithOptions(instanceId: string, taskId: string, request: ModifyFlowControlTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFlowControlTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    body['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metaType)) {
    body['metaType'] = request.metaType;
  }
  if (!Util.isUnset(request.sceneIds)) {
    body['sceneIds'] = request.sceneIds;
  }
  if (!Util.isUnset(request.selectionParams)) {
    body['selectionParams'] = request.selectionParams;
  }
  if (!Util.isUnset(request.startTime)) {
    body['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.target)) {
    body['target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFlowControlTask(instanceId: string, taskId: string, request: ModifyFlowControlTaskRequest): ModifyFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFlowControlTaskWithOptions(instanceId, taskId, request, headers, runtime);
}

model ModifyInstanceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    chargeType?: string(name='chargeType', example='PrePaid'),
    commodityCode?: string(name='commodityCode', example='airecpre'),
    dataSetVersion?: string(name='dataSetVersion', example='20181206170353'),
    expiredTime?: string(name='expiredTime', example='2019-01-06T16:00:00.000Z'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-06T06:14:01.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-06T11:17:49.000Z'),
    industry?: string(name='industry', example='news'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    lockMode?: string(name='lockMode', example='Unlock'),
    name?: string(name='name'),
    regionId?: string(name='regionId', example='cn-beijing'),
    status?: string(name='status', example='Running'),
    type?: string(name='type', example='Standard'),
  }(name='result'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstance(instanceId: string): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyInstanceWithOptions(instanceId, headers, runtime);
}

model ModifyItemsResponseBody = {
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', example='true'),
}

model ModifyItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyItemsResponseBody(name='body'),
}

async function modifyItemsWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyItemsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyItems',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/items`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyItems(instanceId: string): ModifyItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyItemsWithOptions(instanceId, headers, runtime);
}

model ModifyOfflineStoragesResponseBody = {
  requestId?: bytes(name='requestId', example='7F176EE8-51DA-4B4D-8FFE-04448CD7A171'),
  result?: boolean(name='result', example='true'),
}

model ModifyOfflineStoragesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfflineStoragesResponseBody(name='body'),
}

async function modifyOfflineStoragesWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyOfflineStoragesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfflineStorages',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/%5BinstanceId%5D/offlineStorages`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfflineStorages(instanceId: string): ModifyOfflineStoragesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyOfflineStoragesWithOptions(instanceId, headers, runtime);
}

model ModifyRankingModelResponseBody = {
  code?: string(name='code', description='The error code.', example='1'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    gmtCreate?: string(name='gmtCreate', description='The time when the ranking model was created.', example='2020-11-11T09:47:43.000Z'),
    gmtModified?: string(name='gmtModified', description='The time when the ranking model was modified.', example='2020-11-11T09:47:43.000Z'),
    meta?: map[string]any(name='meta', description='The data source of the filtering table. Only MaxCompute tables are supported.', example='{}'),
    rankingModelId?: string(name='rankingModelId', description='The ID of the ranking model.', example='test1234'),
  }(name='result', description='The returned results.'),
}

model ModifyRankingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRankingModelResponseBody(name='body'),
}

async function modifyRankingModelWithOptions(instanceId: string, rankingModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyRankingModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyRankingModel',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-models/${OpenApiUtil.getEncodeParam(rankingModelId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRankingModel(instanceId: string, rankingModelId: string): ModifyRankingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyRankingModelWithOptions(instanceId, rankingModelId, headers, runtime);
}

model ModifyRankingModelTemplateRequest {
  body?: map[string]any(name='body', example='{}'),
}

model ModifyRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingModelTemplate(name='result'),
}

model ModifyRankingModelTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRankingModelTemplateResponseBody(name='body'),
}

async function modifyRankingModelTemplateWithOptions(instanceId: string, templateId: string, request: ModifyRankingModelTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyRankingModelTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRankingModelTemplate',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates/${OpenApiUtil.getEncodeParam(templateId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRankingModelTemplate(instanceId: string, templateId: string, request: ModifyRankingModelTemplateRequest): ModifyRankingModelTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyRankingModelTemplateWithOptions(instanceId, templateId, request, headers, runtime);
}

model ModifyRankingSystemRequest {
  body?: map[string]any(name='body', example='{}'),
}

model ModifyRankingSystemResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: RankingSystem(name='result'),
}

model ModifyRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRankingSystemResponseBody(name='body'),
}

async function modifyRankingSystemWithOptions(instanceId: string, name: string, request: ModifyRankingSystemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyRankingSystemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRankingSystem(instanceId: string, name: string, request: ModifyRankingSystemRequest): ModifyRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyRankingSystemWithOptions(instanceId, name, request, headers, runtime);
}

model ModifyRuleResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-27T06:38:28.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-27T06:38:28.000Z'),
    ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
    ruleMeta?: map[string]any(name='ruleMeta', example='xxx'),
    status?: string(name='status', example='true'),
  }(name='result'),
}

model ModifyRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRuleResponseBody(name='body'),
}

async function modifyRuleWithOptions(instanceId: string, ruleId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyRuleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyRule',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rules/${OpenApiUtil.getEncodeParam(ruleId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRule(instanceId: string, ruleId: string): ModifyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyRuleWithOptions(instanceId, ruleId, headers, runtime);
}

model ModifySampleRequest {
  body?: map[string]any(name='body'),
}

model ModifySampleResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: Sample(name='result'),
}

model ModifySampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySampleResponseBody(name='body'),
}

async function modifySampleWithOptions(instanceId: string, sampleId: string, request: ModifySampleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifySampleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySample',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySample(instanceId: string, sampleId: string, request: ModifySampleRequest): ModifySampleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifySampleWithOptions(instanceId, sampleId, request, headers, runtime);
}

model ModifySceneResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: string(name='gmtCreate', example='2020-04-23T06:08:48.000Z'),
    gmtModified?: string(name='gmtModified', example='2020-04-23T06:08:48.000Z'),
    sceneId?: string(name='sceneId', example='test'),
    status?: string(name='status', example='DRAFT'),
  }(name='result'),
}

model ModifySceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySceneResponseBody(name='body'),
}

async function modifySceneWithOptions(instanceId: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifySceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyScene',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyScene(instanceId: string, sceneId: string): ModifySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifySceneWithOptions(instanceId, sceneId, headers, runtime);
}

model OfflineFilteringAlgorithmResponseBody = {
  requestId?: string(name='requestId', example='7585C2B2-0D61-4C96-AC5D-B960BFEDD4A3'),
  result?: {
    algorithmId?: string(name='algorithmId', example='abc'),
    gmtCreate?: string(name='gmtCreate', example='2018-12-07T02:24:26.000Z'),
    gmtModified?: string(name='gmtModified', example='2018-12-07T02:24:26.000Z'),
    meta?: {
      algorithmName?: string(name='algorithmName', example='test'),
      category?: string(name='category', example='1_2'),
      clusterId?: string(name='clusterId', example='244'),
      cron?: string(name='cron', example='* * 24 7 0'),
      cronEnabled?: boolean(name='cronEnabled', example='Y'),
      description?: string(name='description', example='test'),
      extInfo?: {
        itemSeparator?: string(name='itemSeparator', example=','),
        kvSeparator?: string(name='kvSeparator', example=':'),
      }(name='extInfo'),
      metaType?: string(name='metaType', example='metaType'),
      projectName?: string(name='projectName', example='test'),
      tableName?: string(name='tableName', example='test_table'),
      taskId?: string(name='taskId', description='taskId', example='taskId'),
      threshold?: {
        indexLossThreshold?: int32(name='indexLossThreshold', example='1'),
        indexSizeThreshold?: int32(name='indexSizeThreshold', example='1'),
        sourceDataRecordThreshold?: int32(name='sourceDataRecordThreshold', example='1'),
        sourceDataSizeThreshold?: int32(name='sourceDataSizeThreshold', example='1'),
      }(name='threshold'),
      type?: string(name='type', example='ODPS'),
    }(name='meta'),
    status?: string(name='status', example='Init'),
  }(name='result'),
}

model OfflineFilteringAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineFilteringAlgorithmResponseBody(name='body'),
}

async function offlineFilteringAlgorithmWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineFilteringAlgorithmResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'OfflineFilteringAlgorithm',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/actions/offline`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineFilteringAlgorithm(instanceId: string, algorithmId: string): OfflineFilteringAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return offlineFilteringAlgorithmWithOptions(instanceId, algorithmId, headers, runtime);
}

model PublishFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model PublishFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishFlowControlTaskResponseBody(name='body'),
}

async function publishFlowControlTaskWithOptions(instanceId: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishFlowControlTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/actions/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishFlowControlTask(instanceId: string, taskId: string): PublishFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishFlowControlTaskWithOptions(instanceId, taskId, headers, runtime);
}

model PublishRuleRequest {
  ruleType?: string(name='ruleType', description='selection
opertaion', example='selection'),
  sceneId?: string(name='sceneId', example='test'),
}

model PublishRuleResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    ruleId?: string(name='ruleId', example='98493A14-D619-4E88-9F8D-108939817F9F'),
  }(name='result'),
}

model PublishRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishRuleResponseBody(name='body'),
}

async function publishRuleWithOptions(ruleId: string, instanceId: string, request: PublishRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishRuleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.ruleType)) {
    query['ruleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishRule',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/rules/${OpenApiUtil.getEncodeParam(ruleId)}/actions/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishRule(ruleId: string, instanceId: string, request: PublishRuleRequest): PublishRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishRuleWithOptions(ruleId, instanceId, request, headers, runtime);
}

model PushColdStartDocumentRequest {
  body?: [ 
    {
      cmd?: string(name='cmd'),
      fields?: any(name='fields'),
    }
  ](name='body'),
}

model PushColdStartDocumentResponseBody = {
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model PushColdStartDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushColdStartDocumentResponseBody(name='body'),
}

async function pushColdStartDocumentWithOptions(instanceId: string, tableName: string, request: PushColdStartDocumentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushColdStartDocumentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PushColdStartDocument',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/cold-start/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}/actions/bulk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushColdStartDocument(instanceId: string, tableName: string, request: PushColdStartDocumentRequest): PushColdStartDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushColdStartDocumentWithOptions(instanceId, tableName, request, headers, runtime);
}

model PushDocumentResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model PushDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushDocumentResponseBody(name='body'),
}

async function pushDocumentWithOptions(instanceId: string, tableName: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushDocumentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PushDocument',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(tableName)}/actions/bulk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushDocument(instanceId: string, tableName: string): PushDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushDocumentWithOptions(instanceId, tableName, headers, runtime);
}

model PushInterventionResponseBody = {
  code?: string(name='code', description='code', example='1'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', description='result true/false', example='true'),
}

model PushInterventionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushInterventionResponseBody(name='body'),
}

async function pushInterventionWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushInterventionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PushIntervention',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/intervene`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushIntervention(instanceId: string): PushInterventionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushInterventionWithOptions(instanceId, headers, runtime);
}

model QueryDataMessageRequest {
  bhvType?: string(name='bhvType', example='expose'),
  cmdType?: string(name='cmdType', example='update'),
  endTime?: long(name='endTime', example='1586673466'),
  imei?: string(name='imei'),
  itemId?: string(name='itemId', example='111'),
  itemType?: string(name='itemType', example='video'),
  messageSource?: string(name='messageSource', description='CONSOLE   

FEEDER', example='CONSOLE'),
  page?: int32(name='page', example='1'),
  sceneId?: string(name='sceneId', example='test'),
  size?: int32(name='size', example='20'),
  startTime?: long(name='startTime', example='1586673466'),
  traceId?: string(name='traceId', description='trace_id', example='Alibaba'),
  userId?: string(name='userId', example='222'),
  userType?: string(name='userType', example='app'),
}

model QueryDataMessageResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QueryDataMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDataMessageResponseBody(name='body'),
}

async function queryDataMessageWithOptions(instanceId: string, table: string, request: QueryDataMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataMessageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.bhvType)) {
    query['bhvType'] = request.bhvType;
  }
  if (!Util.isUnset(request.cmdType)) {
    query['cmdType'] = request.cmdType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.imei)) {
    query['imei'] = request.imei;
  }
  if (!Util.isUnset(request.itemId)) {
    query['itemId'] = request.itemId;
  }
  if (!Util.isUnset(request.itemType)) {
    query['itemType'] = request.itemType;
  }
  if (!Util.isUnset(request.messageSource)) {
    query['messageSource'] = request.messageSource;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceId)) {
    query['traceId'] = request.traceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['userId'] = request.userId;
  }
  if (!Util.isUnset(request.userType)) {
    query['userType'] = request.userType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDataMessage',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(table)}/data-message`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDataMessage(instanceId: string, table: string, request: QueryDataMessageRequest): QueryDataMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryDataMessageWithOptions(instanceId, table, request, headers, runtime);
}

model QueryDataMessageStatisticsRequest {
  bhvType?: string(name='bhvType', example='expose'),
  cmdType?: string(name='cmdType', example='update'),
  endTime?: long(name='endTime', example='1586673466'),
  imei?: string(name='imei'),
  itemId?: string(name='itemId', example='111'),
  itemType?: string(name='itemType', example='video'),
  messageSource?: string(name='messageSource', description='CONSOLE

FEEDER', example='FEEDER'),
  sceneId?: string(name='sceneId', example='test'),
  startTime?: long(name='startTime', example='1586673466'),
  traceId?: string(name='traceId', description='trace_id', example='Alibaba'),
  userId?: string(name='userId', example='222'),
  userType?: string(name='userType', example='app'),
}

model QueryDataMessageStatisticsResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QueryDataMessageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDataMessageStatisticsResponseBody(name='body'),
}

async function queryDataMessageStatisticsWithOptions(instanceId: string, table: string, request: QueryDataMessageStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataMessageStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.bhvType)) {
    query['bhvType'] = request.bhvType;
  }
  if (!Util.isUnset(request.cmdType)) {
    query['cmdType'] = request.cmdType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.imei)) {
    query['imei'] = request.imei;
  }
  if (!Util.isUnset(request.itemId)) {
    query['itemId'] = request.itemId;
  }
  if (!Util.isUnset(request.itemType)) {
    query['itemType'] = request.itemType;
  }
  if (!Util.isUnset(request.messageSource)) {
    query['messageSource'] = request.messageSource;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceId)) {
    query['traceId'] = request.traceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['userId'] = request.userId;
  }
  if (!Util.isUnset(request.userType)) {
    query['userType'] = request.userType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDataMessageStatistics',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(table)}/data-message-statistics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDataMessageStatistics(instanceId: string, table: string, request: QueryDataMessageStatisticsRequest): QueryDataMessageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryDataMessageStatisticsWithOptions(instanceId, table, request, headers, runtime);
}

model QueryExceptionHistoryRequest {
  endTime?: long(name='endTime', example='1586673466'),
  startTime?: long(name='startTime', example='1586673466'),
  type?: string(name='type', example='behavior'),
}

model QueryExceptionHistoryResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QueryExceptionHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExceptionHistoryResponseBody(name='body'),
}

async function queryExceptionHistoryWithOptions(instanceId: string, request: QueryExceptionHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryExceptionHistoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExceptionHistory',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/exception-history`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExceptionHistory(instanceId: string, request: QueryExceptionHistoryRequest): QueryExceptionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryExceptionHistoryWithOptions(instanceId, request, headers, runtime);
}

model QueryRawDataRequest {
  imei?: string(name='imei'),
  itemId?: string(name='itemId', example='112'),
  itemType?: string(name='itemType', example='video'),
  userId?: string(name='userId', example='111'),
  userType?: string(name='userType', example='app'),
}

model QueryRawDataResponseBody = {
  message?: string(name='Message', example='An internal server error occurred'),
  code?: string(name='code', example='InternalServerError'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QueryRawDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRawDataResponseBody(name='body'),
}

async function queryRawDataWithOptions(instanceId: string, table: string, request: QueryRawDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRawDataResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.imei)) {
    query['imei'] = request.imei;
  }
  if (!Util.isUnset(request.itemId)) {
    query['itemId'] = request.itemId;
  }
  if (!Util.isUnset(request.itemType)) {
    query['itemType'] = request.itemType;
  }
  if (!Util.isUnset(request.userId)) {
    query['userId'] = request.userId;
  }
  if (!Util.isUnset(request.userType)) {
    query['userType'] = request.userType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRawData',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/tables/${OpenApiUtil.getEncodeParam(table)}/raw-data`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRawData(instanceId: string, table: string, request: QueryRawDataRequest): QueryRawDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryRawDataWithOptions(instanceId, table, request, headers, runtime);
}

model QuerySingleAggregationReportResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QuerySingleAggregationReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySingleAggregationReportResponseBody(name='body'),
}

async function querySingleAggregationReportWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySingleAggregationReportResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'QuerySingleAggregationReport',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/single-aggregation-report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySingleAggregationReport(instanceId: string): QuerySingleAggregationReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return querySingleAggregationReportWithOptions(instanceId, headers, runtime);
}

model QuerySingleReportRequest {
  reportType?: string(name='reportType', example='typeItemTagScene'),
}

model QuerySingleReportResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', example='xxx'),
}

model QuerySingleReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySingleReportResponseBody(name='body'),
}

async function querySingleReportWithOptions(instanceId: string, request: QuerySingleReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySingleReportResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.reportType)) {
    query['reportType'] = request.reportType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySingleReport',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/single-report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySingleReport(instanceId: string, request: QuerySingleReportRequest): QuerySingleReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return querySingleReportWithOptions(instanceId, request, headers, runtime);
}

model QuerySyncReportAggregationRequest {
  endTime?: long(name='endTime', description='The end time. The value is a timestamp in seconds.', example='1586673466'),
  startTime?: long(name='startTime', description='The start time. The value is a timestamp in seconds.', example='1586673466'),
}

model QuerySyncReportAggregationResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: map[string]any(name='result', description='The returned results.', example='xxx'),
}

model QuerySyncReportAggregationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySyncReportAggregationResponseBody(name='body'),
}

async function querySyncReportAggregationWithOptions(instanceId: string, request: QuerySyncReportAggregationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySyncReportAggregationResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySyncReportAggregation',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/sync-reports/aggregation`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySyncReportAggregation(instanceId: string, request: QuerySyncReportAggregationRequest): QuerySyncReportAggregationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return querySyncReportAggregationWithOptions(instanceId, request, headers, runtime);
}

model RebuildIndexResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: string(name='result', example='true'),
}

model RebuildIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebuildIndexResponseBody(name='body'),
}

async function rebuildIndexWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RebuildIndexResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RebuildIndex',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/actions/rebuild`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebuildIndex(instanceId: string, algorithmId: string): RebuildIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return rebuildIndexWithOptions(instanceId, algorithmId, headers, runtime);
}

model RecommendRequest {
  filter?: string(name='filter', description='The string for filtering during recommendation.', example='eyJqb2luIjoiYW5kIiwiZmlsdGVycyI6W3siY29uZCI6ImNvbnRhaW4iLCJmaWVsZCI6InRhZ3MiLCJ2YWx1ZSI6IuWPjOS6uiJ9XX0.'),
  imei?: string(name='imei', description='The ID of the device.', example='06e1565409c9fc4887036b974421****'),
  ip?: string(name='ip', description='The last logon IP address of the user.', example='192.168.1.1'),
  items?: string(name='items', description='The items used for related recommendations in specified scenes.', example='1001'),
  rankOpen?: boolean(name='rankOpen', description='Specifies whether to perform personalized ranking based on the user IDs in the filtering and ranking phases.', example='true'),
  recType?: string(name='recType', description='The type of the recommendation service.', example='gul'),
  returnCount?: int32(name='returnCount', description='The number of result entries to return. Valid values: 0 to 50.', example='10'),
  sceneId?: string(name='sceneId', description='The ID of the scene in which the item is to be recommended.', example='test'),
  serviceType?: string(name='serviceType', description='N/A', example='1'),
  strategy?: string(name='strategy', description='如果需要使用坑位策略，请求参数内新增strategy="fixedSlot"，此时系统将按照坑位配置返回推荐结果', example='fixedSlot'),
  userId?: string(name='userId', description='The unique ID of the user.', example='123'),
  userInfo?: string(name='userInfo', description='N/A', example='1'),
}

model RecommendResponseBody = {
  code?: string(name='code', description='The HTTP status code.', example='200'),
  message?: string(name='message', description='The status of the execution.', example='"i2i_common_common;NotFound;1673254401;similar product/content of clicked ones;2023-01-09 16:53:21"'),
  requestId?: string(name='requestId', description='The ID of the request.', example='04707E49-642A-4649-827A-F8EEB07D4C27'),
  result?: [ 
    {
      flowWeight?: double(name='flowWeight', description='The weight of the specified process.', example='0'),
      itemId?: string(name='itemId', description='The ID of the recommended item.', example='123'),
      itemType?: string(name='itemType', description='The type of the recommended item.', example='item'),
      matchInfo?: string(name='matchInfo', description='This parameter may be used in the debugging process. You can ignore this parameter.', example='xxx'),
      message?: string(name='message', description='The status of the execution.', example='Successful'),
      position?: int32(name='position', description='The position at which the recommended item is displayed. The position number starts from 0. The return results are ranked by position. You can ignore this parameter.', example='1'),
      traceId?: string(name='traceId', description='The event tracking ID. This parameter is uploaded together with user behaviors on the recommended item. In this case, the value of this parameter is ali.', example='ali'),
      traceInfo?: string(name='traceInfo', description='The information about event tracking. The value of this parameter varies based on different items and needs to be uploaded together with the corresponding behavior data.', example='"1007.62381.131491.100200300000000:bcb946ed-3f09-4e9b-bf4a-c19862f42231:792783::0:s101:::15:content___130788_stall:item:i2i_common_common:0.0205279946753756:null:null:1673258031504::context__recall_index=156,context__hour=17,context__trigger_num=2::C7EF99C9-6C55-5D45-A8D5-0754082E9DCF:hot_common,i2i_common_common,i2i_swing_common,hot_full:::::"'),
      weight?: float(name='weight', description='The weight of the recommended item.', example='1'),
    }
  ](name='result', description='The returned results.'),
}

model RecommendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecommendResponseBody(name='body'),
}

async function recommendWithOptions(instanceId: string, request: RecommendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecommendResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    query['filter'] = request.filter;
  }
  if (!Util.isUnset(request.imei)) {
    query['imei'] = request.imei;
  }
  if (!Util.isUnset(request.ip)) {
    query['ip'] = request.ip;
  }
  if (!Util.isUnset(request.items)) {
    query['items'] = request.items;
  }
  if (!Util.isUnset(request.rankOpen)) {
    query['rankOpen'] = request.rankOpen;
  }
  if (!Util.isUnset(request.recType)) {
    query['recType'] = request.recType;
  }
  if (!Util.isUnset(request.returnCount)) {
    query['returnCount'] = request.returnCount;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['sceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['serviceType'] = request.serviceType;
  }
  if (!Util.isUnset(request.strategy)) {
    query['strategy'] = request.strategy;
  }
  if (!Util.isUnset(request.userId)) {
    query['userId'] = request.userId;
  }
  if (!Util.isUnset(request.userInfo)) {
    query['userInfo'] = request.userInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Recommend',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/recommend`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recommend(instanceId: string, request: RecommendRequest): RecommendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return recommendWithOptions(instanceId, request, headers, runtime);
}

model RefreshFeatureTableResponseBody = {
  requestId?: string(name='requestId', example='8B90B646-1678-41A3-B23F-EAC6587B0E48'),
  result?: FeatureTable(name='result'),
}

model RefreshFeatureTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshFeatureTableResponseBody(name='body'),
}

async function refreshFeatureTableWithOptions(instanceId: string, type: string, featureTableId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RefreshFeatureTableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RefreshFeatureTable',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/feature-tables/${OpenApiUtil.getEncodeParam(type)}/${OpenApiUtil.getEncodeParam(featureTableId)}/actions/refresh`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshFeatureTable(instanceId: string, type: string, featureTableId: string): RefreshFeatureTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return refreshFeatureTableWithOptions(instanceId, type, featureTableId, headers, runtime);
}

model RollbackRankingSystemRequest {
  body?: map[string]any(name='body'),
}

model RollbackRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model RollbackRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackRankingSystemResponseBody(name='body'),
}

async function rollbackRankingSystemWithOptions(instanceId: string, name: string, request: RollbackRankingSystemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackRankingSystemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RollbackRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}/actions/rollback`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackRankingSystem(instanceId: string, name: string, request: RollbackRankingSystemRequest): RollbackRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return rollbackRankingSystemWithOptions(instanceId, name, request, headers, runtime);
}

model RunInstanceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: boolean(name='result', example='true'),
}

model RunInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunInstanceResponseBody(name='body'),
}

async function runInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RunInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RunInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/import`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runInstance(instanceId: string): RunInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runInstanceWithOptions(instanceId, headers, runtime);
}

model RunRankingModelTemplateResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: map[string]any(name='result', example='xxx'),
}

model RunRankingModelTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunRankingModelTemplateResponseBody(name='body'),
}

async function runRankingModelTemplateWithOptions(instanceId: string, templateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RunRankingModelTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RunRankingModelTemplate',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-model-templates/${OpenApiUtil.getEncodeParam(templateId)}/actions/run`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runRankingModelTemplate(instanceId: string, templateId: string): RunRankingModelTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runRankingModelTemplateWithOptions(instanceId, templateId, headers, runtime);
}

model RunSampleFormatConfigRequest {
  mode?: string(name='mode', example='latest'),
}

model RunSampleFormatConfigResponseBody = {
  requestId?: string(name='requestId', example='airec-test'),
  result?: boolean(name='result', example='true'),
}

model RunSampleFormatConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunSampleFormatConfigResponseBody(name='body'),
}

async function runSampleFormatConfigWithOptions(instanceId: string, sampleId: string, request: RunSampleFormatConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunSampleFormatConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.mode)) {
    query['mode'] = request.mode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunSampleFormatConfig',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/samples/${OpenApiUtil.getEncodeParam(sampleId)}/format-configs/actions/run`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runSampleFormatConfig(instanceId: string, sampleId: string, request: RunSampleFormatConfigRequest): RunSampleFormatConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runSampleFormatConfigWithOptions(instanceId, sampleId, request, headers, runtime);
}

model StopDataSetResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    gmtCreate?: long(name='gmtCreate', example='1544112000000'),
    gmtModified?: long(name='gmtModified', example='1544112000000'),
    instanceId?: string(name='instanceId', example='airec-cn-o400whm78004'),
    state?: string(name='state', example='Importing'),
    versionId?: string(name='versionId', example='20181023214546'),
  }(name='result'),
}

model StopDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDataSetResponseBody(name='body'),
}

async function stopDataSetWithOptions(instanceId: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopDataSetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopDataSet',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/dataSets/${OpenApiUtil.getEncodeParam(versionId)}/actions/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDataSet(instanceId: string, versionId: string): StopDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopDataSetWithOptions(instanceId, versionId, headers, runtime);
}

model StopFlowControlTaskResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model StopFlowControlTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopFlowControlTaskResponseBody(name='body'),
}

async function stopFlowControlTaskWithOptions(instanceId: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopFlowControlTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopFlowControlTask',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/flowControlTasks/${OpenApiUtil.getEncodeParam(taskId)}/actions/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopFlowControlTask(instanceId: string, taskId: string): StopFlowControlTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopFlowControlTaskWithOptions(instanceId, taskId, headers, runtime);
}

model UnLockIndexVersionResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: boolean(name='result', example='true'),
}

model UnLockIndexVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnLockIndexVersionResponseBody(name='body'),
}

async function unLockIndexVersionWithOptions(instanceId: string, algorithmId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UnLockIndexVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UnLockIndexVersion',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/filtering-algorithms/${OpenApiUtil.getEncodeParam(algorithmId)}/actions/unlock`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unLockIndexVersion(instanceId: string, algorithmId: string): UnLockIndexVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unLockIndexVersionWithOptions(instanceId, algorithmId, headers, runtime);
}

model UpdateExperimentBasicInfoResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='2'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='400'),
            key?: string(name='key', description='Key', example='I2I'),
            name?: string(name='name'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='400'),
        experimentValue?: string(name='experimentValue', example='400'),
        hasConfig?: boolean(name='hasConfig', example='false'),
        key?: string(name='key', description='key', example='I2I'),
        name?: string(name='name', example='test'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='demo1'),
    experimentId?: string(name='experimentId', example='12345'),
    name?: string(name='name', example='test'),
    offlineTime?: string(name='offlineTime', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', example='1'),
  }(name='result'),
}

model UpdateExperimentBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentBasicInfoResponseBody(name='body'),
}

async function updateExperimentBasicInfoWithOptions(instanceId: string, sceneId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExperimentBasicInfoResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentBasicInfo',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}/basic`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentBasicInfo(instanceId: string, sceneId: string, experimentId: string): UpdateExperimentBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentBasicInfoWithOptions(instanceId, sceneId, experimentId, headers, runtime);
}

model UpdateExperimentConfigResponseBody = {
  requestId?: string(name='requestId', example='829F38F6-E2D6-4109-90A6-888160BD16C2'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='true'),
            experimentValue?: string(name='experimentValue', example='true'),
            key?: string(name='key', example='I2I'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='400'),
        experimentValue?: string(name='experimentValue', example='300'),
        hasConfig?: boolean(name='hasConfig', example='true'),
        key?: string(name='key', example='I2I'),
        name?: string(name='name', example='xxx'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='demo1'),
    experimentId?: string(name='experimentId', example='xxx'),
    name?: string(name='name'),
    offlineTime?: string(name='offlineTime', example='2020-12-07T06:47:30.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-12-07T06:47:30.000Z'),
    status?: string(name='status', example='Online'),
  }(name='result'),
}

model UpdateExperimentConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentConfigResponseBody(name='body'),
}

async function updateExperimentConfigWithOptions(instanceId: string, sceneId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExperimentConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentConfig',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}/config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentConfig(instanceId: string, sceneId: string, experimentId: string): UpdateExperimentConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentConfigWithOptions(instanceId, sceneId, experimentId, headers, runtime);
}

model UpdateExperimentStatusResponseBody = {
  requestId?: string(name='requestId', example='E3D6FE3B-B7C2-43DA-9A13-5EA837ACED9B'),
  result?: {
    algorithms?: [ 
      {
        category?: string(name='category', example='RECALL'),
        config?: [ 
          {
            defaultValue?: string(name='defaultValue', example='xxx'),
            experimentValue?: string(name='experimentValue', example='xxx'),
            key?: string(name='key', example='hot'),
            name?: string(name='name', example='xxx'),
          }
        ](name='config'),
        defaultValue?: string(name='defaultValue', example='swing'),
        experimentValue?: string(name='experimentValue', example='xxx'),
        hasConfig?: boolean(name='hasConfig', example='false'),
        key?: string(name='key', example='hot'),
        name?: string(name='name', example='xxx'),
        type?: string(name='type', example='SYSTEM'),
      }
    ](name='algorithms'),
    base?: boolean(name='base', example='true'),
    buckets?: [ string ](name='buckets'),
    description?: string(name='description', example='xxx'),
    experimentId?: string(name='experimentId', example='123'),
    name?: string(name='name', example='test'),
    offlineTime?: string(name='offlineTime', example='2020-11-11T09:47:43.000Z'),
    onlineTime?: string(name='onlineTime', example='2020-11-11T09:47:43.000Z'),
    status?: string(name='status', example='init'),
  }(name='result'),
}

model UpdateExperimentStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentStatusResponseBody(name='body'),
}

async function updateExperimentStatusWithOptions(instanceId: string, sceneId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExperimentStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentStatus',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scenes/${OpenApiUtil.getEncodeParam(sceneId)}/experiments/${OpenApiUtil.getEncodeParam(experimentId)}/status`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentStatus(instanceId: string, sceneId: string, experimentId: string): UpdateExperimentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentStatusWithOptions(instanceId, sceneId, experimentId, headers, runtime);
}

model UpgradeInstanceResponseBody = {
  code?: string(name='code', description='The error code.', example='InternalServerError'),
  message?: string(name='message', description='The error message.', example='An internal server error occurred'),
  requestId?: string(name='requestId', description='The ID of the request.', example='8F81A922-6C81-46D6-B78C-CC35E16B1691'),
  result?: {
    instanceId?: string(name='instanceId', description='The ID of the instance.', example='airec-cn-o400whm78004'),
  }(name='result', description='The returned results.'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to modify the quotas of a specified instance.
  * The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) for recommendation requests: 10 to 500.
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpgradeInstanceResponse
 */
async function upgradeInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpgradeInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to modify the quotas of a specified instance.
  * The limits on the number of users: 1,000,000 to 10,000,000. The limits on the number of items: 1,000,000 to 10,000,000. The limits on the queries per second (QPS) for recommendation requests: 10 to 500.
  *
  * @return UpgradeInstanceResponse
 */
async function upgradeInstance(instanceId: string): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeInstanceWithOptions(instanceId, headers, runtime);
}

model ValidateInstanceResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='An internal server error occurred'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: boolean(name='result', example='true'),
}

model ValidateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateInstanceResponseBody(name='body'),
}

async function validateInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ValidateInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ValidateInstance',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/actions/validate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateInstance(instanceId: string): ValidateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return validateInstanceWithOptions(instanceId, headers, runtime);
}

model VerifyRankingSystemRequest {
  body?: map[string]any(name='body'),
}

model VerifyRankingSystemResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model VerifyRankingSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyRankingSystemResponseBody(name='body'),
}

async function verifyRankingSystemWithOptions(instanceId: string, name: string, request: VerifyRankingSystemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyRankingSystemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'VerifyRankingSystem',
    version = '2020-11-26',
    protocol = 'HTTPS',
    pathname = `/v2/openapi/instances/${OpenApiUtil.getEncodeParam(instanceId)}/ranking-systems/${OpenApiUtil.getEncodeParam(name)}/actions/verify`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyRankingSystem(instanceId: string, name: string, request: VerifyRankingSystemRequest): VerifyRankingSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return verifyRankingSystemWithOptions(instanceId, name, request, headers, runtime);
}

