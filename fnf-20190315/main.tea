/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'cn-beijing.fnf.aliyuncs.com',
    cn-hangzhou = 'cn-hangzhou.fnf.aliyuncs.com',
    cn-shanghai = 'cn-shanghai.fnf.aliyuncs.com',
    cn-shenzhen = 'cn-shenzhen.fnf.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('fnf', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateFlowRequest {
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  type?: string(name='Type'),
}

model CreateFlowResponseBody = {
  createdTime?: string(name='CreatedTime'),
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  id?: string(name='Id'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  type?: string(name='Type'),
}

model CreateFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowResponseBody(name='body'),
}

async function createFlowWithOptions(request: CreateFlowRequest, runtime: Util.RuntimeOptions): CreateFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.definition)) {
    body['Definition'] = request.definition;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.externalStorageLocation)) {
    body['ExternalStorageLocation'] = request.externalStorageLocation;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.roleArn)) {
    body['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlow',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowWithOptions(request, runtime);
}

model CreateScheduleRequest {
  cronExpression?: string(name='CronExpression'),
  description?: string(name='Description'),
  enable?: boolean(name='Enable'),
  flowName?: string(name='FlowName'),
  payload?: string(name='Payload'),
  requestId?: string(name='RequestId'),
  scheduleName?: string(name='ScheduleName'),
}

model CreateScheduleResponseBody = {
  createdTime?: string(name='CreatedTime'),
  cronExpression?: string(name='CronExpression'),
  description?: string(name='Description'),
  enable?: boolean(name='Enable'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  payload?: string(name='Payload'),
  requestId?: string(name='RequestId'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model CreateScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScheduleResponseBody(name='body'),
}

async function createScheduleWithOptions(request: CreateScheduleRequest, runtime: Util.RuntimeOptions): CreateScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cronExpression)) {
    body['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.payload)) {
    body['Payload'] = request.payload;
  }
  if (!Util.isUnset(request.scheduleName)) {
    body['ScheduleName'] = request.scheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSchedule',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSchedule(request: CreateScheduleRequest): CreateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduleWithOptions(request, runtime);
}

model DeleteFlowRequest {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model DeleteFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowResponseBody(name='body'),
}

async function deleteFlowWithOptions(request: DeleteFlowRequest, runtime: Util.RuntimeOptions): DeleteFlowResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlow',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowWithOptions(request, runtime);
}

model DeleteScheduleRequest {
  flowName?: string(name='FlowName'),
  requestId?: string(name='RequestId'),
  scheduleName?: string(name='ScheduleName'),
}

model DeleteScheduleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteScheduleResponseBody(name='body'),
}

async function deleteScheduleWithOptions(request: DeleteScheduleRequest, runtime: Util.RuntimeOptions): DeleteScheduleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedule',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSchedule(request: DeleteScheduleRequest): DeleteScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleWithOptions(request, runtime);
}

model DescribeExecutionRequest {
  executionName?: string(name='ExecutionName'),
  flowName?: string(name='FlowName'),
  requestId?: string(name='RequestId'),
  waitTimeSeconds?: int32(name='WaitTimeSeconds'),
}

model DescribeExecutionResponseBody = {
  flowDefinition?: string(name='FlowDefinition'),
  flowName?: string(name='FlowName'),
  input?: string(name='Input'),
  name?: string(name='Name'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  startedTime?: string(name='StartedTime'),
  status?: string(name='Status'),
  stoppedTime?: string(name='StoppedTime'),
}

model DescribeExecutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExecutionResponseBody(name='body'),
}

async function describeExecutionWithOptions(request: DescribeExecutionRequest, runtime: Util.RuntimeOptions): DescribeExecutionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExecution',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExecution(request: DescribeExecutionRequest): DescribeExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExecutionWithOptions(request, runtime);
}

model DescribeFlowRequest {
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowResponseBody = {
  createdTime?: string(name='CreatedTime'),
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  id?: string(name='Id'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  type?: string(name='Type'),
}

model DescribeFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowResponseBody(name='body'),
}

async function describeFlowWithOptions(request: DescribeFlowRequest, runtime: Util.RuntimeOptions): DescribeFlowResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlow',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlow(request: DescribeFlowRequest): DescribeFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowWithOptions(request, runtime);
}

model DescribeScheduleRequest {
  flowName?: string(name='FlowName'),
  requestId?: string(name='RequestId'),
  scheduleName?: string(name='ScheduleName'),
}

model DescribeScheduleResponseBody = {
  createdTime?: string(name='CreatedTime'),
  cronExpression?: string(name='CronExpression'),
  description?: string(name='Description'),
  enable?: boolean(name='Enable'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  payload?: string(name='Payload'),
  requestId?: string(name='RequestId'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model DescribeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScheduleResponseBody(name='body'),
}

async function describeScheduleWithOptions(request: DescribeScheduleRequest, runtime: Util.RuntimeOptions): DescribeScheduleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSchedule',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSchedule(request: DescribeScheduleRequest): DescribeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleWithOptions(request, runtime);
}

model GetExecutionHistoryRequest {
  executionName?: string(name='ExecutionName'),
  flowName?: string(name='FlowName'),
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetExecutionHistoryResponseBody = {
  events?: [ 
    {
      eventDetail?: string(name='EventDetail'),
      eventId?: long(name='EventId'),
      scheduleEventId?: long(name='ScheduleEventId'),
      stepName?: string(name='StepName'),
      time?: string(name='Time'),
      type?: string(name='Type'),
    }
  ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExecutionHistoryResponseBody(name='body'),
}

async function getExecutionHistoryWithOptions(request: GetExecutionHistoryRequest, runtime: Util.RuntimeOptions): GetExecutionHistoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExecutionHistory',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExecutionHistory(request: GetExecutionHistoryRequest): GetExecutionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExecutionHistoryWithOptions(request, runtime);
}

model ListExecutionsRequest {
  executionNamePrefix?: string(name='ExecutionNamePrefix'),
  flowName?: string(name='FlowName'),
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  startedTimeBegin?: string(name='StartedTimeBegin'),
  startedTimeEnd?: string(name='StartedTimeEnd'),
  status?: string(name='Status'),
}

model ListExecutionsResponseBody = {
  executions?: [ 
    {
      flowDefinition?: string(name='FlowDefinition'),
      flowName?: string(name='FlowName'),
      input?: string(name='Input'),
      name?: string(name='Name'),
      output?: string(name='Output'),
      startedTime?: string(name='StartedTime'),
      status?: string(name='Status'),
      stoppedTime?: string(name='StoppedTime'),
    }
  ](name='Executions'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListExecutionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExecutionsResponseBody(name='body'),
}

async function listExecutionsWithOptions(request: ListExecutionsRequest, runtime: Util.RuntimeOptions): ListExecutionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExecutions',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExecutions(request: ListExecutionsRequest): ListExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExecutionsWithOptions(request, runtime);
}

model ListFlowsRequest {
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListFlowsResponseBody = {
  flows?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      definition?: string(name='Definition'),
      description?: string(name='Description'),
      id?: string(name='Id'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      name?: string(name='Name'),
      roleArn?: string(name='RoleArn'),
      type?: string(name='Type'),
    }
  ](name='Flows'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListFlowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowsResponseBody(name='body'),
}

async function listFlowsWithOptions(request: ListFlowsRequest, runtime: Util.RuntimeOptions): ListFlowsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlows',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFlows(request: ListFlowsRequest): ListFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFlowsWithOptions(request, runtime);
}

model ListSchedulesRequest {
  flowName?: string(name='FlowName'),
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListSchedulesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  schedules?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      cronExpression?: string(name='CronExpression'),
      description?: string(name='Description'),
      enable?: boolean(name='Enable'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      payload?: string(name='Payload'),
      scheduleId?: string(name='ScheduleId'),
      scheduleName?: string(name='ScheduleName'),
    }
  ](name='Schedules'),
}

model ListSchedulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSchedulesResponseBody(name='body'),
}

async function listSchedulesWithOptions(request: ListSchedulesRequest, runtime: Util.RuntimeOptions): ListSchedulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSchedules',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSchedules(request: ListSchedulesRequest): ListSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSchedulesWithOptions(request, runtime);
}

model ReportTaskFailedRequest {
  cause?: string(name='Cause'),
  error?: string(name='Error'),
  requestId?: string(name='RequestId'),
  taskToken?: string(name='TaskToken'),
}

model ReportTaskFailedResponseBody = {
  eventId?: long(name='EventId'),
  requestId?: string(name='RequestId'),
}

model ReportTaskFailedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportTaskFailedResponseBody(name='body'),
}

async function reportTaskFailedWithOptions(request: ReportTaskFailedRequest, runtime: Util.RuntimeOptions): ReportTaskFailedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.taskToken)) {
    query['TaskToken'] = request.taskToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cause)) {
    body['Cause'] = request.cause;
  }
  if (!Util.isUnset(request.error)) {
    body['Error'] = request.error;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReportTaskFailed',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportTaskFailed(request: ReportTaskFailedRequest): ReportTaskFailedResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportTaskFailedWithOptions(request, runtime);
}

model ReportTaskSucceededRequest {
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  taskToken?: string(name='TaskToken'),
}

model ReportTaskSucceededResponseBody = {
  eventId?: long(name='EventId'),
  requestId?: string(name='RequestId'),
}

model ReportTaskSucceededResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportTaskSucceededResponseBody(name='body'),
}

async function reportTaskSucceededWithOptions(request: ReportTaskSucceededRequest, runtime: Util.RuntimeOptions): ReportTaskSucceededResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.taskToken)) {
    query['TaskToken'] = request.taskToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.output)) {
    body['Output'] = request.output;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReportTaskSucceeded',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportTaskSucceeded(request: ReportTaskSucceededRequest): ReportTaskSucceededResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportTaskSucceededWithOptions(request, runtime);
}

model StartExecutionRequest {
  callbackFnFTaskToken?: string(name='CallbackFnFTaskToken'),
  executionName?: string(name='ExecutionName'),
  flowName?: string(name='FlowName'),
  input?: string(name='Input'),
  requestId?: string(name='RequestId'),
}

model StartExecutionResponseBody = {
  flowDefinition?: string(name='FlowDefinition'),
  flowName?: string(name='FlowName'),
  input?: string(name='Input'),
  name?: string(name='Name'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  startedTime?: string(name='StartedTime'),
  status?: string(name='Status'),
  stoppedTime?: string(name='StoppedTime'),
}

model StartExecutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartExecutionResponseBody(name='body'),
}

async function startExecutionWithOptions(request: StartExecutionRequest, runtime: Util.RuntimeOptions): StartExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.callbackFnFTaskToken)) {
    body['CallbackFnFTaskToken'] = request.callbackFnFTaskToken;
  }
  if (!Util.isUnset(request.executionName)) {
    body['ExecutionName'] = request.executionName;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartExecution',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startExecution(request: StartExecutionRequest): StartExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startExecutionWithOptions(request, runtime);
}

model StopExecutionRequest {
  cause?: string(name='Cause'),
  error?: string(name='Error'),
  executionName?: string(name='ExecutionName'),
  flowName?: string(name='FlowName'),
  requestId?: string(name='RequestId'),
}

model StopExecutionResponseBody = {
  flowDefinition?: string(name='FlowDefinition'),
  flowName?: string(name='FlowName'),
  input?: string(name='Input'),
  name?: string(name='Name'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  startedTime?: string(name='StartedTime'),
  status?: string(name='Status'),
  stoppedTime?: string(name='StoppedTime'),
}

model StopExecutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopExecutionResponseBody(name='body'),
}

async function stopExecutionWithOptions(request: StopExecutionRequest, runtime: Util.RuntimeOptions): StopExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cause)) {
    body['Cause'] = request.cause;
  }
  if (!Util.isUnset(request.error)) {
    body['Error'] = request.error;
  }
  if (!Util.isUnset(request.executionName)) {
    body['ExecutionName'] = request.executionName;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopExecution',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopExecution(request: StopExecutionRequest): StopExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopExecutionWithOptions(request, runtime);
}

model UpdateFlowRequest {
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  type?: string(name='Type'),
}

model UpdateFlowResponseBody = {
  createdTime?: string(name='CreatedTime'),
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
  id?: string(name='Id'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  type?: string(name='Type'),
}

model UpdateFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFlowResponseBody(name='body'),
}

async function updateFlowWithOptions(request: UpdateFlowRequest, runtime: Util.RuntimeOptions): UpdateFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.definition)) {
    body['Definition'] = request.definition;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.roleArn)) {
    body['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFlow',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFlow(request: UpdateFlowRequest): UpdateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFlowWithOptions(request, runtime);
}

model UpdateScheduleRequest {
  cronExpression?: string(name='CronExpression'),
  description?: string(name='Description'),
  enable?: boolean(name='Enable'),
  flowName?: string(name='FlowName'),
  payload?: string(name='Payload'),
  requestId?: string(name='RequestId'),
  scheduleName?: string(name='ScheduleName'),
}

model UpdateScheduleResponseBody = {
  createdTime?: string(name='CreatedTime'),
  cronExpression?: string(name='CronExpression'),
  description?: string(name='Description'),
  enable?: boolean(name='Enable'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  payload?: string(name='Payload'),
  requestId?: string(name='RequestId'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model UpdateScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateScheduleResponseBody(name='body'),
}

async function updateScheduleWithOptions(request: UpdateScheduleRequest, runtime: Util.RuntimeOptions): UpdateScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cronExpression)) {
    body['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.payload)) {
    body['Payload'] = request.payload;
  }
  if (!Util.isUnset(request.scheduleName)) {
    body['ScheduleName'] = request.scheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSchedule',
    version = '2019-03-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSchedule(request: UpdateScheduleRequest): UpdateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleWithOptions(request, runtime);
}

