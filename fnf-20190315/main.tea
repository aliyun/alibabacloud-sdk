/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-beijing = 'cn-beijing.fnf.aliyuncs.com',
    cn-hangzhou = 'cn-hangzhou.fnf.aliyuncs.com',
    cn-shanghai = 'cn-shanghai.fnf.aliyuncs.com',
    cn-shenzhen = 'cn-shenzhen.fnf.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('fnf', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateFlowRequest {
  requestId?: string(name='RequestId'),
  name?: string(name='Name'),
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  roleArn?: string(name='RoleArn'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
}

model CreateFlowResponseBody = {
  type?: string(name='Type'),
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  definition?: string(name='Definition'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  id?: string(name='Id'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
  roleArn?: string(name='RoleArn'),
  name?: string(name='Name'),
}

model CreateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowResponseBody(name='body'),
}

async function createFlowWithOptions(request: CreateFlowRequest, runtime: Util.RuntimeOptions): CreateFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFlow', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowWithOptions(request, runtime);
}

model CreateScheduleRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  scheduleName?: string(name='ScheduleName'),
  description?: string(name='Description'),
  payload?: string(name='Payload'),
  cronExpression?: string(name='CronExpression'),
  enable?: boolean(name='Enable'),
}

model CreateScheduleResponseBody = {
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  enable?: boolean(name='Enable'),
  payload?: string(name='Payload'),
  cronExpression?: string(name='CronExpression'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model CreateScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduleResponseBody(name='body'),
}

async function createScheduleWithOptions(request: CreateScheduleRequest, runtime: Util.RuntimeOptions): CreateScheduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSchedule', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSchedule(request: CreateScheduleRequest): CreateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduleWithOptions(request, runtime);
}

model DeleteFlowRequest {
  requestId?: string(name='RequestId'),
  name?: string(name='Name'),
}

model DeleteFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowResponseBody(name='body'),
}

async function deleteFlowWithOptions(request: DeleteFlowRequest, runtime: Util.RuntimeOptions): DeleteFlowResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteFlow', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowWithOptions(request, runtime);
}

model DeleteScheduleRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  scheduleName?: string(name='ScheduleName'),
}

model DeleteScheduleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduleResponseBody(name='body'),
}

async function deleteScheduleWithOptions(request: DeleteScheduleRequest, runtime: Util.RuntimeOptions): DeleteScheduleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteSchedule', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteSchedule(request: DeleteScheduleRequest): DeleteScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleWithOptions(request, runtime);
}

model DescribeExecutionRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  executionName?: string(name='ExecutionName'),
  waitTimeSeconds?: int32(name='WaitTimeSeconds'),
}

model DescribeExecutionResponseBody = {
  status?: string(name='Status'),
  input?: string(name='Input'),
  stoppedTime?: string(name='StoppedTime'),
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  output?: string(name='Output'),
  externalOutputUri?: string(name='ExternalOutputUri'),
  startedTime?: string(name='StartedTime'),
  externalInputUri?: string(name='ExternalInputUri'),
  flowDefinition?: string(name='FlowDefinition'),
  name?: string(name='Name'),
}

model DescribeExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExecutionResponseBody(name='body'),
}

async function describeExecutionWithOptions(request: DescribeExecutionRequest, runtime: Util.RuntimeOptions): DescribeExecutionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeExecution', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeExecution(request: DescribeExecutionRequest): DescribeExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExecutionWithOptions(request, runtime);
}

model DescribeFlowRequest {
  requestId?: string(name='RequestId'),
  name?: string(name='Name'),
}

model DescribeFlowResponseBody = {
  type?: string(name='Type'),
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  definition?: string(name='Definition'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  id?: string(name='Id'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
  roleArn?: string(name='RoleArn'),
  name?: string(name='Name'),
}

model DescribeFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowResponseBody(name='body'),
}

async function describeFlowWithOptions(request: DescribeFlowRequest, runtime: Util.RuntimeOptions): DescribeFlowResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeFlow', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeFlow(request: DescribeFlowRequest): DescribeFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowWithOptions(request, runtime);
}

model DescribeScheduleRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  scheduleName?: string(name='ScheduleName'),
}

model DescribeScheduleResponseBody = {
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  enable?: boolean(name='Enable'),
  payload?: string(name='Payload'),
  cronExpression?: string(name='CronExpression'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model DescribeScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleResponseBody(name='body'),
}

async function describeScheduleWithOptions(request: DescribeScheduleRequest, runtime: Util.RuntimeOptions): DescribeScheduleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeSchedule', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeSchedule(request: DescribeScheduleRequest): DescribeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleWithOptions(request, runtime);
}

model GetExecutionHistoryRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  executionName?: string(name='ExecutionName'),
  nextToken?: string(name='NextToken'),
  limit?: int32(name='Limit'),
}

model GetExecutionHistoryResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      type?: string(name='Type'),
      eventId?: long(name='EventId'),
      time?: string(name='Time'),
      scheduleEventId?: long(name='ScheduleEventId'),
      eventDetail?: string(name='EventDetail'),
      stepName?: string(name='StepName'),
    }
  ](name='Events'),
}

model GetExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetExecutionHistoryResponseBody(name='body'),
}

async function getExecutionHistoryWithOptions(request: GetExecutionHistoryRequest, runtime: Util.RuntimeOptions): GetExecutionHistoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetExecutionHistory', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getExecutionHistory(request: GetExecutionHistoryRequest): GetExecutionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExecutionHistoryWithOptions(request, runtime);
}

model ListExecutionsRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  nextToken?: string(name='NextToken'),
  limit?: int32(name='Limit'),
  status?: string(name='Status'),
  startedTimeBegin?: string(name='StartedTimeBegin'),
  startedTimeEnd?: string(name='StartedTimeEnd'),
  executionNamePrefix?: string(name='ExecutionNamePrefix'),
}

model ListExecutionsResponseBody = {
  executions?: [ 
    {
      status?: string(name='Status'),
      stoppedTime?: string(name='StoppedTime'),
      startedTime?: string(name='StartedTime'),
      flowDefinition?: string(name='FlowDefinition'),
      externalInputUri?: string(name='ExternalInputUri'),
      output?: string(name='Output'),
      flowName?: string(name='FlowName'),
      externalOutputUri?: string(name='ExternalOutputUri'),
      name?: string(name='Name'),
      input?: string(name='Input'),
    }
  ](name='Executions'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListExecutionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListExecutionsResponseBody(name='body'),
}

async function listExecutionsWithOptions(request: ListExecutionsRequest, runtime: Util.RuntimeOptions): ListExecutionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListExecutions', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listExecutions(request: ListExecutionsRequest): ListExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExecutionsWithOptions(request, runtime);
}

model ListFlowsRequest {
  requestId?: string(name='RequestId'),
  nextToken?: string(name='NextToken'),
  limit?: int32(name='Limit'),
}

model ListFlowsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  flows?: [ 
    {
      type?: string(name='Type'),
      definition?: string(name='Definition'),
      roleArn?: string(name='RoleArn'),
      description?: string(name='Description'),
      externalStorageLocation?: string(name='ExternalStorageLocation'),
      name?: string(name='Name'),
      createdTime?: string(name='CreatedTime'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      id?: string(name='Id'),
    }
  ](name='Flows'),
}

model ListFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowsResponseBody(name='body'),
}

async function listFlowsWithOptions(request: ListFlowsRequest, runtime: Util.RuntimeOptions): ListFlowsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListFlows', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listFlows(request: ListFlowsRequest): ListFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFlowsWithOptions(request, runtime);
}

model ListSchedulesRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  nextToken?: string(name='NextToken'),
  limit?: int32(name='Limit'),
}

model ListSchedulesResponseBody = {
  schedules?: [ 
    {
      description?: string(name='Description'),
      scheduleId?: string(name='ScheduleId'),
      payload?: string(name='Payload'),
      scheduleName?: string(name='ScheduleName'),
      createdTime?: string(name='CreatedTime'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      cronExpression?: string(name='CronExpression'),
      enable?: boolean(name='Enable'),
    }
  ](name='Schedules'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListSchedulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchedulesResponseBody(name='body'),
}

async function listSchedulesWithOptions(request: ListSchedulesRequest, runtime: Util.RuntimeOptions): ListSchedulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSchedules', '2019-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSchedules(request: ListSchedulesRequest): ListSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSchedulesWithOptions(request, runtime);
}

model ReportTaskFailedRequest {
  requestId?: string(name='RequestId'),
  taskToken?: string(name='TaskToken'),
  error?: string(name='Error'),
  cause?: string(name='Cause'),
}

model ReportTaskFailedResponseBody = {
  requestId?: string(name='RequestId'),
  eventId?: long(name='EventId'),
}

model ReportTaskFailedResponse = {
  headers: map[string]string(name='headers'),
  body: ReportTaskFailedResponseBody(name='body'),
}

async function reportTaskFailedWithOptions(request: ReportTaskFailedRequest, runtime: Util.RuntimeOptions): ReportTaskFailedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportTaskFailed', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportTaskFailed(request: ReportTaskFailedRequest): ReportTaskFailedResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportTaskFailedWithOptions(request, runtime);
}

model ReportTaskSucceededRequest {
  requestId?: string(name='RequestId'),
  taskToken?: string(name='TaskToken'),
  output?: string(name='Output'),
}

model ReportTaskSucceededResponseBody = {
  requestId?: string(name='RequestId'),
  eventId?: long(name='EventId'),
}

model ReportTaskSucceededResponse = {
  headers: map[string]string(name='headers'),
  body: ReportTaskSucceededResponseBody(name='body'),
}

async function reportTaskSucceededWithOptions(request: ReportTaskSucceededRequest, runtime: Util.RuntimeOptions): ReportTaskSucceededResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportTaskSucceeded', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportTaskSucceeded(request: ReportTaskSucceededRequest): ReportTaskSucceededResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportTaskSucceededWithOptions(request, runtime);
}

model StartExecutionRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  executionName?: string(name='ExecutionName'),
  input?: string(name='Input'),
  callbackFnFTaskToken?: string(name='CallbackFnFTaskToken'),
}

model StartExecutionResponseBody = {
  status?: string(name='Status'),
  input?: string(name='Input'),
  stoppedTime?: string(name='StoppedTime'),
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  output?: string(name='Output'),
  externalOutputUri?: string(name='ExternalOutputUri'),
  startedTime?: string(name='StartedTime'),
  externalInputUri?: string(name='ExternalInputUri'),
  flowDefinition?: string(name='FlowDefinition'),
  name?: string(name='Name'),
}

model StartExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: StartExecutionResponseBody(name='body'),
}

async function startExecutionWithOptions(request: StartExecutionRequest, runtime: Util.RuntimeOptions): StartExecutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartExecution', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startExecution(request: StartExecutionRequest): StartExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startExecutionWithOptions(request, runtime);
}

model StopExecutionRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  executionName?: string(name='ExecutionName'),
  cause?: string(name='Cause'),
  error?: string(name='Error'),
}

model StopExecutionResponseBody = {
  status?: string(name='Status'),
  input?: string(name='Input'),
  stoppedTime?: string(name='StoppedTime'),
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  output?: string(name='Output'),
  externalOutputUri?: string(name='ExternalOutputUri'),
  startedTime?: string(name='StartedTime'),
  externalInputUri?: string(name='ExternalInputUri'),
  flowDefinition?: string(name='FlowDefinition'),
  name?: string(name='Name'),
}

model StopExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: StopExecutionResponseBody(name='body'),
}

async function stopExecutionWithOptions(request: StopExecutionRequest, runtime: Util.RuntimeOptions): StopExecutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopExecution', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopExecution(request: StopExecutionRequest): StopExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopExecutionWithOptions(request, runtime);
}

model UpdateFlowRequest {
  requestId?: string(name='RequestId'),
  name?: string(name='Name'),
  definition?: string(name='Definition'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  roleArn?: string(name='RoleArn'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
}

model UpdateFlowResponseBody = {
  type?: string(name='Type'),
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  definition?: string(name='Definition'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  id?: string(name='Id'),
  externalStorageLocation?: string(name='ExternalStorageLocation'),
  roleArn?: string(name='RoleArn'),
  name?: string(name='Name'),
}

model UpdateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowResponseBody(name='body'),
}

async function updateFlowWithOptions(request: UpdateFlowRequest, runtime: Util.RuntimeOptions): UpdateFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFlow', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFlow(request: UpdateFlowRequest): UpdateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFlowWithOptions(request, runtime);
}

model UpdateScheduleRequest {
  requestId?: string(name='RequestId'),
  flowName?: string(name='FlowName'),
  scheduleName?: string(name='ScheduleName'),
  description?: string(name='Description'),
  payload?: string(name='Payload'),
  cronExpression?: string(name='CronExpression'),
  enable?: boolean(name='Enable'),
}

model UpdateScheduleResponseBody = {
  description?: string(name='Description'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  lastModifiedTime?: string(name='LastModifiedTime'),
  enable?: boolean(name='Enable'),
  payload?: string(name='Payload'),
  cronExpression?: string(name='CronExpression'),
  scheduleId?: string(name='ScheduleId'),
  scheduleName?: string(name='ScheduleName'),
}

model UpdateScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScheduleResponseBody(name='body'),
}

async function updateScheduleWithOptions(request: UpdateScheduleRequest, runtime: Util.RuntimeOptions): UpdateScheduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSchedule', '2019-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSchedule(request: UpdateScheduleRequest): UpdateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleWithOptions(request, runtime);
}

