/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'fnf';
  @version = '2019-03-15';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-beijing' = 'cn-beijing.fnf.aliyuncs.com',
    'cn-hangzhou' = 'cn-hangzhou.fnf.aliyuncs.com',
    'cn-shanghai' = 'cn-shanghai.fnf.aliyuncs.com',
    'cn-shenzhen' = 'cn-shenzhen.fnf.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateFlowRequest {
  definition: string(name='Definition', description='The definition of the workflow. The definition must comply with the flow definition language (FDL) syntax. Considering compatibility, the system supports two flow definition specifications.

>  In the preceding flow definition example, Name:my_flow_name is the workflow name, which must be consistent with the input parameter Name

This parameter is required.', example='version:&nbsp;v1.0<br/>type:&nbsp;flow<br/>steps:<br/>&nbsp;-&nbsp;type:&nbsp;pass<br/>&nbsp;name:&nbsp;mypass', position='Body'),
  description: string(name='Description', description='The description of the flow.

This parameter is required.', example='test flow', position='Body'),
  environment?: {
    variables?: [ 
      {
        description?: string(name='Description', example='description'),
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment', shrink='json', position='Body'),
  executionMode?: string(name='ExecutionMode', description='The execution mode. Valid values: Express and Standard. Considering compatibility, an empty string is equivalent to the Standard execution mode.', example='Standard', position='Body'),
  externalStorageLocation?: string(name='ExternalStorageLocation', description='The path of the external storage.', example='/path', position='Body'),
  name: string(name='Name', description='The name of the flow. The name is unique within the same region and cannot be modified after the flow is created. Set this parameter based on the following rules:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='flow', position='Body'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the authorized role on which the execution of the flow relies. During the execution of the flow, CloudFlow assumes the role to call API operations of relevant services.', example='acs:ram:${region}:${accountID}:${role}', position='Body'),
  type: string(name='Type', description='The type of the flow. Set this parameter to **FDL**.

This parameter is required.', example='FDL', position='Body'),
}

model CreateFlowResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the flow was created.', example='2019-01-01T01:01:01.001Z'),
  definition?: string(name='Definition', description='Considering compatibility, the system supports two flow definition specifications.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
  description?: string(name='Description', description='The description of the flow.', example='test flow'),
  environment?: {
    variables?: [ 
      {
        description?: string(name='Description', example='description'),
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment'),
  executionMode?: string(name='ExecutionMode', description='The execution mode. Valid values: Express and Standard. Considering compatibility, an empty string is equivalent to the Standard execution mode.', example='Standard'),
  id?: string(name='Id', description='The unique ID of the flow.', example='e589e092-e2c0-4dee-b306-3574ddfdddf5****'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the flow was last modified.', example='2019-01-01T01:01:01.001Z'),
  name?: string(name='Name', description='The name of the flow.', example='flow'),
  requestId?: string(name='RequestId', description='The request ID. Each time an `HTTP status code` is returned, Serverless Workflow returns a value for the parameter.', example='testRequestID'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the authorized role on which the execution of the flow relies. During the execution of the flow, CloudFlow assumes the role to call API operations of relevant services.', example='acs:ram:${region}:${accountID}:${role}'),
  type?: string(name='Type', description='The type of the flow.

Valid value:

*   FDL

    <!-- -->

    <!-- -->

    <!-- -->', example='FDL'),
}

model CreateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * *   The number of flows that each user can create is restricted by resources. For more information, see [Limits](https://help.aliyun.com/document_detail/122093.html). If you want to create more flows, submit a ticket.
  * *   At the user level, flows are distinguished by name. The name of a flow within one account must be unique.
  * @param request  the request parameters of CreateFlow  CreateFlowRequest
  * @return CreateFlowResponse
 */
async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlow', 'POST', '/', 'json', true, 'form', request);
}

model CreateFlowAliasRequest {
  description?: string(name='Description', example='example description', position='Body'),
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='example-alias-name', position='Body'),
  routingConfigurations: [ 
    {
      version: string(name='Version', description='This parameter is required.', example='1'),
      weight: int32(name='Weight', description='This parameter is required.', example='30'),
    }
  ](name='RoutingConfigurations', description='This parameter is required.', shrink='json', position='Body'),
}

model CreateFlowAliasResponseBody = {
  createdTime?: string(name='CreatedTime', example='2020-01-01T01:01:01.001Z'),
  description?: string(name='Description', example='example description'),
  flowName?: string(name='FlowName', example='example-flow-name'),
  name?: string(name='Name', example='exampe-alias-name'),
  requestId?: string(name='RequestId', description='Id of the request', example='testRequestID'),
  routingConfigurations?: [ 
    {
      version?: string(name='Version', example='1'),
      weight?: int32(name='Weight', example='30'),
    }
  ](name='RoutingConfigurations'),
}

model CreateFlowAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFlowAlias  CreateFlowAliasRequest
  * @return CreateFlowAliasResponse
 */
async function createFlowAlias(request: CreateFlowAliasRequest): CreateFlowAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowAlias', 'POST', '/', 'json', true, 'form', request);
}

model CreateScheduleRequest {
  cronExpression: string(name='CronExpression', description='The CRON expression.

This parameter is required.', example='0 * * * * *', position='Body'),
  description?: string(name='Description', description='The description of the time-based schedule.', example='test description', position='Body'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the time-based schedule. Valid values:

*   **true**
*   **false**', example='true', position='Body'),
  flowName: string(name='FlowName', description='The name of the workflow that is associated with the time-based schedule.

This parameter is required.', example='flow', position='Body'),
  payload?: string(name='Payload', description='The trigger message of the time-based schedule. Specify the value in the JSON format.', example='{"key": "value"}', position='Body'),
  scheduleName: string(name='ScheduleName', description='The name of the time-based schedule. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   It is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testScheduleName', position='Body'),
  signatureVersion?: string(name='SignatureVersion', position='Query'),
}

model CreateScheduleResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the time-based schedule was created.', example='2020-01-01T01:01:01.001Z'),
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 * * * * *'),
  description?: string(name='Description', description='The description of the time-based schedule.', example='test description'),
  enable?: boolean(name='Enable', description='Indicates whether the time-based schedule is enabled.', example='true'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the time-based schedule was last modified.', example='2020-01-01T01:01:01.001Z'),
  payload?: string(name='Payload', description='The trigger message of the time-based schedule.', example='{"key": "value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  scheduleId?: string(name='ScheduleId', description='The ID of the time-based schedule.', example='testScheduleId'),
  scheduleName?: string(name='ScheduleName', description='The name of the time-based schedule.', example='testScheduleName'),
}

model CreateScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSchedule  CreateScheduleRequest
  * @return CreateScheduleResponse
 */
async function createSchedule(request: CreateScheduleRequest): CreateScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchedule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFlowRequest {
  name: string(name='Name', description='This parameter is required.', position='Body'),
}

model DeleteFlowResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model DeleteFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * A delete operation is asynchronous. If this operation is successful, the system returns a successful response. If an existing flow is pending to be deleted, a new flow of the same name will not be affected by the existing one. After you delete a flow, you cannot query its historical executions. All executions in progress will stop after their most recent steps are complete.
  * @param request  the request parameters of DeleteFlow  DeleteFlowRequest
  * @return DeleteFlowResponse
 */
async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlow', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFlowAliasRequest {
  flowName: string(name='FlowName', description='This parameter is required.', example='my_flow_name', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='alias_name', position='Body'),
}

model DeleteFlowAliasResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='3A44E113-9962-5B0B-AB92-14060EFE3164'),
}

model DeleteFlowAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFlowAlias  DeleteFlowAliasRequest
  * @return DeleteFlowAliasResponse
 */
async function deleteFlowAlias(request: DeleteFlowAliasRequest): DeleteFlowAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowAlias', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFlowVersionRequest {
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow', position='Body'),
  flowVersion: string(name='FlowVersion', description='This parameter is required.', example='1', position='Body'),
}

model DeleteFlowVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='3A44E113-9962-5B0B-AB92-14060EFE3164'),
}

model DeleteFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFlowVersion  DeleteFlowVersionRequest
  * @return DeleteFlowVersionResponse
 */
async function deleteFlowVersion(request: DeleteFlowVersionRequest): DeleteFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteScheduleRequest {
  flowName: string(name='FlowName', description='This parameter is required.', position='Body'),
  scheduleName: string(name='ScheduleName', description='This parameter is required.', position='Body'),
}

model DeleteScheduleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model DeleteScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSchedule  DeleteScheduleRequest
  * @return DeleteScheduleResponse
 */
async function deleteSchedule(request: DeleteScheduleRequest): DeleteScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchedule', 'POST', '/', 'json', true, 'form', request);
}

model DescribeExecutionRequest {
  executionName: string(name='ExecutionName', description='The name of the execution.

This parameter is required.', example='exec', position='Query'),
  flowName: string(name='FlowName', description='The name of the workflow.

This parameter is required.', example='flow', position='Query'),
  waitTimeSeconds?: int32(name='WaitTimeSeconds', description='The maximum period of time for long polling waits. Valid values: 0 to 60. Unit: seconds. Configure this parameter based on the following rules:

*   If the value is 0, the system immediately returns the current execution status.
*   If the value is greater than 0, the long polling request waits until the execution ends or the specified period elapses.', example='20', position='Query'),
}

model DescribeExecutionResponseBody = {
  environment?: {
    variables?: [ 
      {
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment'),
  flowDefinition?: string(name='FlowDefinition', description='The definition of the flow.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
  flowName?: string(name='FlowName', description='The name of the flow.', example='flow'),
  input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}'),
  name?: string(name='Name', description='The name of the execution.', example='exec'),
  output?: string(name='Output', description='The execution result, which is in the JSON format.', example='{"key":"value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  startedTime?: string(name='StartedTime', description='The time when the execution started.', example='2019-01-01T01:01:01.001Z'),
  status?: string(name='Status', description='The execution status. Valid values:

*   **Starting**
*   **Running**
*   **Stopped**
*   **Succeeded**
*   **Failed**
*   **TimedOut**', example='Succeeded'),
  stoppedTime?: string(name='StoppedTime', description='The time when the execution stopped.', example='2019-01-01T01:01:01.001Z'),
}

model DescribeExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExecution  DescribeExecutionRequest
  * @return DescribeExecutionResponse
 */
async function describeExecution(request: DescribeExecutionRequest): DescribeExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExecution', 'GET', '/', 'json', false, 'json', request);
}

model DescribeFlowRequest {
  flowVersion?: string(name='FlowVersion', example='1', position='Query'),
  name: string(name='Name', description='The name of the flow.

This parameter is required.', example='flow', position='Query'),
}

model DescribeFlowResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the flow was created.', example='2019-01-01T01:01:01.001Z'),
  definition?: string(name='Definition', description='The definition of the workflow. The definition must comply with the flow definition language (FDL) syntax. Considering compatibility, the system supports the flow definition specifications of the old version and new version.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
  description?: string(name='Description', description='The description of the flow.', example='test flow'),
  environment?: {
    variables?: [ 
      {
        description?: string(name='Description', example='description'),
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment'),
  executionMode?: string(name='ExecutionMode', description='The execution mode or the enumeration type. Valid values: Express and Standard. A value of Standard indicates an empty string.', example='Standard'),
  id?: string(name='Id', description='The unique ID of the flow.', example='e589e092-e2c0-4dee-b306-3574ddfdddf5****'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the flow was last modified.', example='2019-01-01T01:01:01.001Z'),
  name?: string(name='Name', description='The name of the flow.', example='flow'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the authorized role on which the execution of the flow relies. During the execution of the flow, CloudFlow assumes the role to call API operations of relevant services.', example='acs:ram::${accountID}:${role}'),
  type?: string(name='Type', description='The type of the workflow.', example='FDL'),
}

model DescribeFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFlow  DescribeFlowRequest
  * @return DescribeFlowResponse
 */
async function describeFlow(request: DescribeFlowRequest): DescribeFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlow', 'GET', '/', 'json', false, 'json', request);
}

model DescribeFlowAliasRequest {
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='example-alias-name', position='Query'),
}

model DescribeFlowAliasResponseBody = {
  alias?: {
    createdTime?: string(name='CreatedTime', example='2024-04-22T06:09:39.907Z'),
    description?: string(name='Description', example='alias description'),
    name?: string(name='Name', example='alias-name'),
    routingConfigurations?: [ 
      {
        version?: string(name='Version', example='1'),
        weight?: int32(name='Weight', example='10'),
      }
    ](name='RoutingConfigurations'),
  }(name='Alias'),
  requestId?: string(name='RequestId', description='Id of the request', example='294D68C1-5108-5971-853A-1A9CC87B4816'),
}

model DescribeFlowAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFlowAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFlowAlias  DescribeFlowAliasRequest
  * @return DescribeFlowAliasResponse
 */
async function describeFlowAlias(request: DescribeFlowAliasRequest): DescribeFlowAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowAlias', 'GET', '/', 'json', false, 'json', request);
}

model DescribeMapRunRequest {
  executionName: string(name='ExecutionName', description='This parameter is required.', example='my_exec_name', position='Query'),
  flowName: string(name='FlowName', description='This parameter is required.', example='my_flow_name', position='Query'),
  mapRunName: string(name='MapRunName', description='This parameter is required.', example='c39142f1345b196d678333c41f113200', position='Query'),
  requestId?: string(name='RequestId', example='3A44E113-9962-5B0B-AB92-14060EFE3164', position='Query'),
}

model DescribeMapRunResponseBody = {
  concurrency?: long(name='Concurrency', example='1'),
  executionName?: string(name='ExecutionName', example='my_exec_name'),
  itemCounts?: {
    aborted?: long(name='Aborted', example='100'),
    failed?: long(name='Failed', example='100'),
    pending?: long(name='Pending', example='100'),
    running?: long(name='Running', example='100'),
    succeed?: long(name='Succeed', example='100'),
    total?: long(name='Total', example='500'),
  }(name='ItemCounts'),
  mapRunName?: string(name='MapRunName', example='c39142f1345b196d678333c41f113000'),
  requestId?: string(name='RequestId', example='3A44E113-9962-5B0B-AB92-14060EFE3164'),
  startedTime?: string(name='StartedTime', example='2025-10-24T14:11:26+08:00'),
  status?: string(name='Status', example='Succeeded'),
  stoppedTime?: string(name='StoppedTime', example='2025-10-24T14:11:28+08:00'),
  toleratedFailedCount?: long(name='ToleratedFailedCount', example='100'),
  toleratedFailedPercentage?: float(name='ToleratedFailedPercentage', example='20'),
}

model DescribeMapRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMapRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMapRun  DescribeMapRunRequest
  * @return DescribeMapRunResponse
 */
async function describeMapRun(request: DescribeMapRunRequest): DescribeMapRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMapRun', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
      {
        localName?: string(name='LocalName'),
        regionEndpoint?: string(name='RegionEndpoint', example='cn-qingdao.fnf.aliyuncs.com'),
        regionId?: string(name='RegionId', example='cn-qingdao'),
      }
    ](name='Region'),
  }(name='Regions'),
  requestId?: string(name='RequestId', example='0aa3f793-6e5f-8472-c7a2-70d2b84c04ac'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeScheduleRequest {
  flowName: string(name='FlowName', description='The name of the flow that is associated with the time-based schedule. The name must be unique within the region and cannot be modified after the time-based schedule is created. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testFlowName', position='Query'),
  scheduleName: string(name='ScheduleName', description='The name of the time-based schedule. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testScheduleName', position='Query'),
}

model DescribeScheduleResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the time-based schedule was created.', example='2020-01-01T01:01:01.001Z'),
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 * * * * *'),
  description?: string(name='Description', description='The description of the time-based schedule.', example='test description'),
  enable?: boolean(name='Enable', description='Indicates whether the time-based schedule is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the time-based schedule was last modified.', example='2020-01-01T01:01:01.001Z'),
  payload?: string(name='Payload', description='The trigger message of the time-based schedule.', example='{"key": "value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  scheduleId?: string(name='ScheduleId', description='The ID of the time-based schedule.', example='testScheduleId'),
  scheduleName?: string(name='ScheduleName', description='The name of the time-based schedule.', example='testScheduleName'),
}

model DescribeScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSchedule  DescribeScheduleRequest
  * @return DescribeScheduleResponse
 */
async function describeSchedule(request: DescribeScheduleRequest): DescribeScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchedule', 'GET', '/', 'json', false, 'json', request);
}

model GetExecutionHistoryRequest {
  executionName: string(name='ExecutionName', description='The name of the execution.

This parameter is required.', example='exec', position='Query'),
  flowName: string(name='FlowName', description='The name of the workflow.

This parameter is required.', example='flow', position='Query'),
  limit?: int32(name='Limit', description='The number of workflows that you want to query. Valid values: 1-999. Default value: 60.', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='The name of the event to start the query. You can obtain the value from the response data.', example='flow_xxx', position='Query'),
}

model GetExecutionHistoryResponseBody = {
  events?: [ 
    {
      eventDetail?: string(name='EventDetail', description='The details about the execution step.', example='{}'),
      eventId?: long(name='EventId', description='The ID of the execution step.', example='2'),
      scheduleEventId?: long(name='ScheduleEventId', description='The ID of the scheduling step.', example='1'),
      stepName?: string(name='StepName', description='The name of the execution step.', example='passStep'),
      time?: string(name='Time', description='The time when the event was updated.', example='2019-01-01T01:01:01.001Z'),
      type?: string(name='Type', description='The type of the execution step. Valid values:

*   **StepEntered**
*   **StepStarted**
*   **StepSucceeded**
*   **StepFailed**
*   **StepExited**
*   **BranchEntered**
*   **BranchExited**
*   **IterationEntered**
*   **IterationExited**
*   **TaskScheduled**
*   **TaskStarted**
*   **TaskSubmitted**
*   **TaskSubmitFailed**
*   **TaskSucceeded**
*   **TaskFailed**
*   **TaskTimedOut**
*   **ExecutionStarted**
*   **ExecutionStopped**
*   **ExecutionSucceeded**
*   **ExecutionFailed**
*   **ExecutionTimedOut**', example='TaskSucceeded'),
    }
  ](name='Events', description='The events.'),
  nextToken?: string(name='NextToken', description='You do not need to specify this parameter for the first request. The returned value of **ScheduleEventId** is used as the token for the next query. No value is returned for the last query.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model GetExecutionHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExecutionHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExecutionHistory  GetExecutionHistoryRequest
  * @return GetExecutionHistoryResponse
 */
async function getExecutionHistory(request: GetExecutionHistoryRequest): GetExecutionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecutionHistory', 'GET', '/', 'json', false, 'json', request);
}

model ListExecutionsRequest {
  executionNamePrefix?: string(name='ExecutionNamePrefix', description='The name prefix of the execution.', example='run', position='Query'),
  flowName: string(name='FlowName', description='The name of the flow. The name must be unique within the region and cannot be modified after the flow is created. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='flow', position='Query'),
  limit?: int32(name='Limit', description='The number of executions that you want to query. Valid values: 1-99. Default value: 60.', example='1', position='Query'),
  mapRunName?: string(name='MapRunName', position='Query'),
  metadataOnly?: boolean(name='MetadataOnly', position='Query'),
  nextToken?: string(name='NextToken', description='The name of the execution to start the query. You can obtain the value from the response data. You do not need to specify this parameter for the first request.', example='flow_xxx', position='Query'),
  qualifier?: string(name='Qualifier', example='1', position='Query'),
  startedTimeBegin?: string(name='StartedTimeBegin', description='The beginning of the time range to query executions. Specify the value in the UTC RFC3339 format.', example='2020-12-02T02:39:20.402Z', position='Query'),
  startedTimeEnd?: string(name='StartedTimeEnd', description='The end of the time range to query executions. Specify the value in the UTC RFC3339 format.', example='2020-12-02T02:23:54.817Z', position='Query'),
  status?: string(name='Status', description='The status of the execution that you want to filter. Valid values:

*   **Starting**
*   **Running**
*   **Stopped**
*   **Succeeded**
*   **Failed**
*   **TimedOut**', example='Succeeded', position='Query'),
}

model ListExecutionsResponseBody = {
  executions?: [ 
    {
      environment?: {
        variables?: [ 
          {
            name?: string(name='Name', example='key'),
            value?: string(name='Value', example='value'),
          }
        ](name='Variables'),
      }(name='Environment'),
      flowDefinition?: string(name='FlowDefinition', description='The definition of the flow.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n  - type: pass\\n    name: mypass'),
      flowName?: string(name='FlowName', description='The name of the flow.', example='flow'),
      input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}'),
      name?: string(name='Name', description='The name of the execution.', example='exec'),
      output?: string(name='Output', description='The output of the execution, which is in the JSON format', example='{"key":"value"}'),
      startedTime?: string(name='StartedTime', description='The time when the execution started.', example='2019-01-01T01:01:01.001Z'),
      status?: string(name='Status', description='The status of the execution.', example='Succeeded'),
      stoppedTime?: string(name='StoppedTime', description='The time when the execution stopped.', example='2019-01-01T01:01:01.001Z'),
    }
  ](name='Executions', description='The information about executions.'),
  nextToken?: string(name='NextToken', description='The start key for the next query. This parameter is not returned if this is the last query.

>  This parameter may not be displayed in the response because no next page exists.', example='exec2'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model ListExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutionsResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * After you delete a flow, you cannot query its historical executions, even if you create a flow of the same name.
  * @param request  the request parameters of ListExecutions  ListExecutionsRequest
  * @return ListExecutionsResponse
 */
async function listExecutions(request: ListExecutionsRequest): ListExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutions', 'GET', '/', 'json', false, 'json', request);
}

model ListFlowAliasesRequest {
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Query'),
  limit?: int32(name='Limit', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='list token', example='token', position='Query'),
}

model ListFlowAliasesResponseBody = {
  aliases?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2025-10-24T14:11:26+08:00'),
      description?: string(name='Description', example='my alias description'),
      name?: string(name='Name', example='my-alias-name'),
      routingConfigurations?: [ 
        {
          version?: string(name='Version', example='1'),
          weight?: string(name='Weight', example='20'),
        }
      ](name='RoutingConfigurations'),
    }
  ](name='Aliases'),
  nextToken?: string(name='NextToken', description='list token', example='testNextToken'),
  requestId?: string(name='RequestId', description='Id of the request', example='3A44E113-9962-5B0B-AB92-14060EFE3164'),
}

model ListFlowAliasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowAliasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowAliases  ListFlowAliasesRequest
  * @return ListFlowAliasesResponse
 */
async function listFlowAliases(request: ListFlowAliasesRequest): ListFlowAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowAliases', 'GET', '/', 'json', false, 'json', request);
}

model ListFlowVersionsRequest {
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Query'),
  limit?: string(name='Limit', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='list token', example='token', position='Query'),
}

model ListFlowVersionsResponseBody = {
  flowVersions?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2025-10-24T14:11:26+08:00'),
      description?: string(name='Description', example='version description'),
      version?: string(name='Version', example='1'),
    }
  ](name='FlowVersions'),
  nextToken?: string(name='NextToken', description='list token', example='token'),
  requestId?: string(name='RequestId', description='Id of the request', example='294D68C1-5108-5971-853A-1A9CC87B4816'),
}

model ListFlowVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowVersions  ListFlowVersionsRequest
  * @return ListFlowVersionsResponse
 */
async function listFlowVersions(request: ListFlowVersionsRequest): ListFlowVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowVersions', 'GET', '/', 'json', false, 'json', request);
}

model ListFlowsRequest {
  limit?: int32(name='Limit', description='The number of workflows that you want to query. Valid values: 1 - 999. Default value: 60.', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='The token to start the query.', example='flow_nextxxx', position='Query'),
}

model ListFlowsResponseBody = {
  flows?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the flow was created.', example='2019-01-01T01:01:01.001Z'),
      definition?: string(name='Definition', description='The definition of the flow. The definition must comply with the Flow Definition Language (FDL) syntax.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
      description?: string(name='Description', description='The description of the flow.', example='test flow'),
      environment?: {
        variables?: [ 
          {
            description?: string(name='Description', example='description'),
            name?: string(name='Name', example='key'),
            value?: string(name='Value', example='value'),
          }
        ](name='Variables'),
      }(name='Environment'),
      executionMode?: string(name='ExecutionMode', description='The execution mode or the enumeration type. Valid values: Express and Standard. A value of Standard indicates an empty string.', example='Standard'),
      id?: string(name='Id', description='The unique ID of the flow.', example='e589e092-e2c0-4dee-b306-3574ddf5****'),
      lastModifiedTime?: string(name='LastModifiedTime', description='The time when the flow was last modified.', example='2019-01-01T01:01:01.001Z'),
      name?: string(name='Name', description='The name of the flow.', example='flow'),
      roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the specified Resource Access Management (RAM) role that Serverless Workflow assumes to invoke resources when the flow is executed.', example='acs:ram::${accountID}:${role}'),
      type?: string(name='Type', description='The type of the flow.', example='FDL'),
    }
  ](name='Flows', description='The details of flows.'),
  nextToken?: string(name='NextToken', description='The start key for the next query. This parameter is not returned if all results have been returned.', example='flow_nextxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model ListFlowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlows  ListFlowsRequest
  * @return ListFlowsResponse
 */
async function listFlows(request: ListFlowsRequest): ListFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlows', 'GET', '/', 'json', false, 'json', request);
}

model ListSchedulesRequest {
  flowName: string(name='FlowName', description='The name of the flow that is associated with the time-based schedules. The name is unique within the region and cannot be modified after the flow is created. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testFlowName', position='Query'),
  limit?: int32(name='Limit', description='The number of schedules that you want to query. Valid values: 1 to 1000.', example='1', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', description='For the first query, you do not need to specify this parameter. The system uses the value of the **FlowName** parameter as the value of the **NextToken** parameter. When the query ends, no value is returned for this parameter.', example='testNextToken', position='Query'),
}

model ListSchedulesResponseBody = {
  nextToken?: string(name='NextToken', description='The token for the next query.', example='testNextToken'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  schedules?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the time-based schedule was created.', example='2020-01-01T01:01:01.001Z'),
      cronExpression?: string(name='CronExpression', description='The cron expression of the scheduled task.', example='0 * * * * *'),
      description?: string(name='Description', description='The description of the time-based schedule.', example='test description'),
      enable?: boolean(name='Enable', description='Indicates whether the time-based schedule is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      lastModifiedTime?: string(name='LastModifiedTime', description='The time when the time-based schedule was last modified.', example='2020-01-01T01:01:01.001Z'),
      payload?: string(name='Payload', description='The trigger message of the time-based schedule.', example='{"key": "value"}'),
      scheduleId?: string(name='ScheduleId', description='The ID of the time-based schedule.', example='testScheduleId'),
      scheduleName?: string(name='ScheduleName', description='The name of the time-based schedule.', example='testScheduleName'),
    }
  ](name='Schedules', description='The time-based schedules that are queried.'),
}

model ListSchedulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSchedulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSchedules  ListSchedulesRequest
  * @return ListSchedulesResponse
 */
async function listSchedules(request: ListSchedulesRequest): ListSchedulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSchedules', 'GET', '/', 'json', false, 'json', request);
}

model PublishFlowVersionRequest {
  description?: string(name='Description', example='example flow description', position='Body'),
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Body'),
}

model PublishFlowVersionResponseBody = {
  createdTime?: string(name='CreatedTime', example='2025-10-24T14:11:26+08:00'),
  description?: string(name='Description', example='my flow description'),
  flowName?: string(name='FlowName', example='my-flow-name'),
  requestId?: string(name='RequestId', description='Id of the request', example='294D68C1-5108-5971-853A-1A9CC87B4816'),
  version?: string(name='Version', example='1'),
}

model PublishFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishFlowVersion  PublishFlowVersionRequest
  * @return PublishFlowVersionResponse
 */
async function publishFlowVersion(request: PublishFlowVersionRequest): PublishFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishFlowVersion', 'POST', '/', 'json', true, 'form', request);
}

model ReportTaskFailedRequest {
  cause?: string(name='Cause', description='The cause of the failure. The value must be 1 to 4,096 characters in length.', example='emptyString', position='Body'),
  error: string(name='Error', description='The error code for the failed task. The error code must be 1 to 128 characters in length.

This parameter is required.', example='nill', position='Body'),
  taskToken: string(name='TaskToken', description='The token of the task whose execution you want to report. The task token is passed to the called service, such as Message Service (MNS) or Function Compute. For MNS, the value of this parameter can be obtained from a message. For Function Compute, the value of this parameter can be obtained from an event. For more information, see [Service integration modes](https://help.aliyun.com/document_detail/2592915.html).

This parameter is required.', example='emptyString', position='Query'),
}

model ReportTaskFailedResponseBody = {
  eventId?: long(name='EventId', description='The ID of the event.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model ReportTaskFailedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportTaskFailedResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * In the previous service (Serverless Workflow), the task step that ReportTaskFailed is used to call back `pattern: waitForCallback` indicates that the current task fails to be executed.
  * In the new service (CloudFlow), the task step that ReportTaskFailed is used to call back `TaskMode: WaitForCustomCallback` indicates that the current task fails to be executed.
  * @param request  the request parameters of ReportTaskFailed  ReportTaskFailedRequest
  * @return ReportTaskFailedResponse
 */
async function reportTaskFailed(request: ReportTaskFailedRequest): ReportTaskFailedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportTaskFailed', 'POST', '/', 'json', true, 'form', request);
}

model ReportTaskSucceededRequest {
  output: string(name='Output', description='The output information of the task whose execution success you want to report.

This parameter is required.', example='{"key":"value"}', position='Body'),
  taskToken: string(name='TaskToken', description='The token of the task whose execution you want to report. The task token is passed to the called service, such as Message Service (MNS) or Function Compute. For MNS, the value of this parameter can be obtained from a message. For Function Compute, the value of this parameter can be obtained from an event. For more information, see [Service integration modes](https://help.aliyun.com/document_detail/2592915.html).

This parameter is required.', example='emptyString', position='Query'),
}

model ReportTaskSucceededResponseBody = {
  eventId?: long(name='EventId', description='The ID of the event.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
}

model ReportTaskSucceededResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportTaskSucceededResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * In the previous service (Serverless Workflow), the task step that ReportTaskSucceeded is used to call back pattern: waitForCallback indicates that the current task is successfully executed.
  * In the new service (CloudFlow), the task step that ReportTaskSucceeded is used to call back TaskMode: WaitForCustomCallback indicates that the current task is successfully executed.
  * @param request  the request parameters of ReportTaskSucceeded  ReportTaskSucceededRequest
  * @return ReportTaskSucceededResponse
 */
async function reportTaskSucceeded(request: ReportTaskSucceededRequest): ReportTaskSucceededResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportTaskSucceeded', 'POST', '/', 'json', true, 'form', request);
}

model StartExecutionRequest {
  callbackFnFTaskToken?: string(name='CallbackFnFTaskToken', description='Specifies that the **TaskToken**-related tasks are called back after the execution in the flow ends.', example='12', position='Body'),
  executionName?: string(name='ExecutionName', description='The name of the execution. The execution name is unique within a workflow. Configure this parameter based on the following rules:

*   The name must start with a letter or an underscore (_).
*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.', example='exec', position='Body'),
  flowName: string(name='FlowName', description='The name of the workflow to be executed.

This parameter is required.', example='flow', position='Body'),
  input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}', position='Body'),
  qualifier?: string(name='Qualifier', example='1', position='Body'),
}

model StartExecutionResponseBody = {
  flowDefinition?: string(name='FlowDefinition', description='The definition of the flow.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
  flowName?: string(name='FlowName', description='The name of the workflow.', example='flow'),
  input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}'),
  name?: string(name='Name', description='The name of the execution.', example='exec1'),
  output?: string(name='Output', description='The execution result, which is in the JSON format.', example='{"key":"value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  startedTime?: string(name='StartedTime', description='The time when the execution started.', example='2019-01-01T01:01:01.001Z'),
  status?: string(name='Status', description='The execution status. Valid values:

*   **Starting**
*   **Running**
*   **Stopped**
*   **Succeeded**
*   **Failed**
*   **TimedOut**', example='Succeeded'),
  stoppedTime?: string(name='StoppedTime', description='The time when the execution stopped.', example='2019-01-01T01:01:01.001Z'),
}

model StartExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartExecutionResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * *   The flow is created. A flow only in standard mode is supported.
  * *   If you do not specify an execution, the system automatically generates an execution and starts the execution.
  * *   If an ongoing execution has the same name as that of the execution to be started, the system directly returns the ongoing execution.
  * *   If the ongoing execution with the same name has ended (succeeded or failed), `ExecutionAlreadyExists` is returned.
  * *   If no execution with the same name exists, the system starts a new execution.
  * @param request  the request parameters of StartExecution  StartExecutionRequest
  * @return StartExecutionResponse
 */
async function startExecution(request: StartExecutionRequest): StartExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartExecution', 'POST', '/', 'json', true, 'form', request);
}

model StartSyncExecutionRequest {
  executionName?: string(name='ExecutionName', description='The name of the execution that you want to start. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

Different from the StartExecution operation, in the synchronous execution mode, the execution name is no longer required to be unique within a flow. You can choose to provide an execution name to identify the current execution. In this case, the system adds a UUID to the current execution name. The used format is {ExecutionName}:{UUID}. If you do not specify the execution name, the system automatically generates an execution name.', example='my_exec_name', position='Body'),
  flowName: string(name='FlowName', description='The name of the workflow to be executed.

This parameter is required.', example='my_flow_name', position='Body'),
  input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}', position='Body'),
  qualifier?: string(name='Qualifier', example='1', position='Body'),
}

model StartSyncExecutionResponseBody = {
  environment?: {
    variables?: [ 
      {
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned if the execution failed.', example='ActionNotSupported'),
  errorMessage?: string(name='ErrorMessage', description='The error message that indicates the execution timed out.', example='Standard execution is not supported'),
  flowName?: string(name='FlowName', description='The name of the flow.', example='my_flow_name'),
  name?: string(name='Name', description='The name of the execution.', example='my_exec_name:{UUID}'),
  output?: string(name='Output', description='The output of the execution, which is in the JSON format.', example='{"key":"value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  startedTime?: string(name='StartedTime', description='The time when the execution started.', example='2019-01-01T01:01:01.001Z'),
  status?: string(name='Status', description='The status of the execution. Valid values:

*   **Starting**
*   **Running**
*   **Stopped**
*   **Succeeded**
*   **Failed**
*   **TimedOut**', example='Succeeded'),
  stoppedTime?: string(name='StoppedTime', description='The time when the execution stopped.', example='2019-01-01T01:01:01.001Z'),
}

model StartSyncExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSyncExecutionResponseBody(name='body'),
}

/**
  * @description *   Only flows of the express execution mode are supported.
  * @param request  the request parameters of StartSyncExecution  StartSyncExecutionRequest
  * @return StartSyncExecutionResponse
 */
async function startSyncExecution(request: StartSyncExecutionRequest): StartSyncExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSyncExecution', 'POST', '/', 'json', true, 'form', request);
}

model StopExecutionRequest {
  cause?: string(name='Cause', description='The reason for stopping the execution. The value must be 1 to 4,096 characters in length.', example='for test', position='Body'),
  error?: string(name='Error', description='The error code for stopping the execution. The error code must be 1 to 128 characters in length.', example='nill', position='Body'),
  executionName: string(name='ExecutionName', description='The name of the execution to be stopped. You can call the **ListExecutions** operation to obtain the value of this parameter.

This parameter is required.', example='exec', position='Body'),
  flowName: string(name='FlowName', description='The name of the workflow to be stopped. You can call the **ListFlows** operation to obtain the value of this parameter.

This parameter is required.', example='flow', position='Body'),
}

model StopExecutionResponseBody = {
  flowDefinition?: string(name='FlowDefinition', description='The definition of the flow.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n - type: pass\\n name: mypass'),
  flowName?: string(name='FlowName', description='The name of the flow.', example='flow'),
  input?: string(name='Input', description='The input of the execution, which is in the JSON format.', example='{"key":"value"}'),
  name?: string(name='Name', description='The name of the execution.', example='exec'),
  output?: string(name='Output', description='The execution result, which is in the JSON format.', example='{"key":"value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the role that executed the flow. If the RoleArn in the flow definition is changed during the execution of the flow, the system records and returns a snapshot of the original RoleArn.

>  If you do not specify the RoleArn parameter in the request parameters, the response parameters do not contain the RoleArn parameter.', example='acs:ram:${region}:${accountID}:${role}'),
  startedTime?: string(name='StartedTime', description='The time when the execution started.', example='2019-01-01T01:01:01.001Z'),
  status?: string(name='Status', description='The execution status. Valid values:

*   **Starting**
*   **Running**
*   **Stopped**
*   **Succeeded**
*   **Failed**
*   **TimedOut**', example='Running'),
  stoppedTime?: string(name='StoppedTime', description='The time when the execution stopped.', example='2019-01-01T01:01:01.001Z'),
}

model StopExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopExecutionResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * The flow must be in progress.
  * @param request  the request parameters of StopExecution  StopExecutionRequest
  * @return StopExecutionResponse
 */
async function stopExecution(request: StopExecutionRequest): StopExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopExecution', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFlowRequest {
  definition?: string(name='Definition', description='The definition of the workflow. The definition must comply with the flow definition language (FDL) syntax. Considering compatibility, the system supports the two workflow definition specifications.

>  In the preceding workflow definition example, Name:my_flow_name is the workflow name, which must be consistent with the input parameter Name', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n  - type: pass\\n    name: mypass', position='Body'),
  description?: string(name='Description', description='The description of the flow.', example='test definition', position='Body'),
  environment?: {
    variables?: [ 
      {
        description?: string(name='Description', example='description'),
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment', shrink='json', position='Body'),
  name: string(name='Name', description='The name of the workflow.

This parameter is required.', example='flow', position='Body'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the authorized role on which the execution of the flow relies. During the execution of the flow, the flow execution engine assumes the role to call API operations of relevant services.', example='acs:ram::${accountID}:${role}', position='Body'),
  type?: string(name='Type', description='The type of the flow. Valid value: **FDL**.', example='FDL', position='Body'),
}

model UpdateFlowResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the flow was created.', example='2019-01-01T01:01:01.001Z'),
  definition?: string(name='Definition', description='The flow definition, which follows the FDL syntax standard. Considering compatibility, the system supports the two flow definition specifications.', example='version: v1.0\\ntype: flow\\nname: test\\nsteps:\\n  - type: pass\\n    name: mypass'),
  description?: string(name='Description', description='The description of the flow.', example='test definition'),
  environment?: {
    variables?: [ 
      {
        description?: string(name='Description', example='description'),
        name?: string(name='Name', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='Variables'),
  }(name='Environment'),
  externalStorageLocation?: string(name='ExternalStorageLocation', description='The path of the external storage.', example='/path'),
  id?: string(name='Id', description='The unique ID of the flow.', example='e589e092-e2c0-4dee-b306-3574ddfdddf5****'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the flow was last modified.', example='2019-01-01T01:01:01.001Z'),
  name?: string(name='Name', description='The name of the flow.', example='flow'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestID'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud resource name (ARN) of the authorized role on which the execution of the flow relies. During the execution of the flow, the flow execution engine assumes the role to call API operations of relevant services.', example='acs:ram::${accountID}:${role}'),
  type?: string(name='Type', description='The type of the flow.', example='FDL'),
}

model UpdateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFlow  UpdateFlowRequest
  * @return UpdateFlowResponse
 */
async function updateFlow(request: UpdateFlowRequest): UpdateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlow', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFlowAliasRequest {
  description?: string(name='Description', example='example description', position='Body'),
  flowName: string(name='FlowName', description='This parameter is required.', example='example-flow-name', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='alias name', position='Body'),
  routingConfigurations?: [ 
    {
      version?: string(name='Version', example='1'),
      weight?: int32(name='Weight', example='20'),
    }
  ](name='RoutingConfigurations', shrink='json', position='Body'),
}

model UpdateFlowAliasResponseBody = {
  alias?: {
    createdTime?: string(name='CreatedTime', example='2025-10-24T14:11:26+08:00'),
    description?: string(name='Description', example='my alias description'),
    name?: string(name='Name', example='my-alias-name'),
    routingConfigurations?: [ 
      {
        version?: string(name='Version', example='1'),
        weight?: int32(name='Weight', example='20'),
      }
    ](name='RoutingConfigurations'),
  }(name='Alias'),
  requestId?: string(name='RequestId', description='Id of the request', example='294D68C1-5108-5971-853A-1A9CC87B4816'),
}

model UpdateFlowAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFlowAlias  UpdateFlowAliasRequest
  * @return UpdateFlowAliasResponse
 */
async function updateFlowAlias(request: UpdateFlowAliasRequest): UpdateFlowAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlowAlias', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMapRunRequest {
  concurrency?: long(name='Concurrency', example='1', position='Query'),
  executionName: string(name='ExecutionName', description='This parameter is required.', example='my_exec_name', position='Query'),
  flowName: string(name='FlowName', description='This parameter is required.', example='my_flow_name', position='Query'),
  mapRunName: string(name='MapRunName', description='This parameter is required.', example='c39142f1345b196d678333c41f113100', position='Query'),
  requestId?: string(name='RequestId', example='3A44E113-9962-5B0B-AB92-14060EFE3164', position='Query'),
  toleratedFailedCount?: long(name='ToleratedFailedCount', example='100', position='Query'),
  toleratedFailedPercentage?: float(name='ToleratedFailedPercentage', example='20', position='Query'),
}

model UpdateMapRunResponseBody = {
  concurrency?: long(name='Concurrency', example='1'),
  executionName?: string(name='ExecutionName', example='my_exec_name'),
  flowName?: string(name='FlowName', example='my_flow_name'),
  mapRunName?: string(name='MapRunName', example='c39142f1345b196d678333c41f113000'),
  requestId?: string(name='RequestId', description='Id of the request', example='3A44E113-9962-5B0B-AB92-14060EFE3164'),
  toleratedFailedCount?: long(name='ToleratedFailedCount', example='100'),
  toleratedFailedPercentage?: float(name='ToleratedFailedPercentage', example='20'),
}

model UpdateMapRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMapRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMapRun  UpdateMapRunRequest
  * @return UpdateMapRunResponse
 */
async function updateMapRun(request: UpdateMapRunRequest): UpdateMapRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMapRun', 'GET', '/', 'json', false, 'json', request);
}

model UpdateScheduleRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 * * * * *', position='Body'),
  description?: string(name='Description', description='The description of the time-based schedule.', example='test description', position='Body'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the time-based schedule. Valid values:

*   **true**
*   **false**', example='true', position='Body'),
  flowName: string(name='FlowName', description='The name of the flow that is associated with the time-based schedule. The name must be unique within the region and cannot be modified after the time-based schedule is created. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testFlowName', position='Body'),
  payload?: string(name='Payload', description='The trigger message of the time-based schedule. It must be in the JSON format.', example='{"key": "value"}', position='Body'),
  scheduleName: string(name='ScheduleName', description='The name of the time-based schedule. The name must meet the following conventions:

*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must start with a letter or an underscore (_).
*   The name is case-sensitive.
*   The name must be 1 to 128 characters in length.

This parameter is required.', example='testScheduleName', position='Body'),
}

model UpdateScheduleResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the time-based schedule was created.', example='2020-01-01T01:01:01.001Z'),
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 * * * * *'),
  description?: string(name='Description', description='The description of the time-based schedule.', example='test description'),
  enable?: boolean(name='Enable', description='Indicates whether the time-based schedule is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  lastModifiedTime?: string(name='LastModifiedTime', description='The time when the time-based schedule was last updated.', example='2020-01-01T01:01:01.001Z'),
  payload?: string(name='Payload', description='The trigger message of the time-based schedule.', example='{"key": "value"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='testRequestId'),
  scheduleId?: string(name='ScheduleId', description='The ID of the time-based schedule.', example='testScheduleId'),
  scheduleName?: string(name='ScheduleName', description='The name of the time-based schedule.', example='testScheduleName'),
}

model UpdateScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSchedule  UpdateScheduleRequest
  * @return UpdateScheduleResponse
 */
async function updateSchedule(request: UpdateScheduleRequest): UpdateScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchedule', 'POST', '/', 'json', true, 'form', request);
}

