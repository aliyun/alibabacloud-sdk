/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('mhub', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateAppRequest {
  productId?: string(name='ProductId'),
  name?: string(name='Name'),
  type?: int32(name='Type'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
  encodedIcon?: string(name='EncodedIcon'),
  industryId?: string(name='IndustryId'),
}

model CreateAppResponseBody = {
  requestId?: string(name='RequestId'),
  appInfo?: {
    type?: int32(name='Type'),
    appKey?: string(name='AppKey'),
    description?: string(name='Description'),
    packageName?: string(name='PackageName'),
    createTime?: string(name='CreateTime'),
    productId?: int32(name='ProductId'),
    bundleId?: string(name='BundleId'),
    name?: string(name='Name'),
    modifyTime?: string(name='ModifyTime'),
  }(name='AppInfo'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query = {};
  query["ProductId"] = request.productId;
  query["Name"] = request.name;
  query["Type"] = request.type;
  query["BundleId"] = request.bundleId;
  query["PackageName"] = request.packageName;
  query["EncodedIcon"] = request.encodedIcon;
  query["IndustryId"] = request.industryId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateProductRequest {
  name?: string(name='Name'),
}

model CreateProductResponseBody = {
  requestId?: string(name='RequestId'),
  productId?: long(name='ProductId'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductResponseBody(name='body'),
}

async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model DeleteAppRequest {
  appKey?: string(name='AppKey'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppKey"] = request.appKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteProductRequest {
  productId?: string(name='ProductId'),
}

model DeleteProductResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var query = {};
  query["ProductId"] = request.productId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model ListAppsRequest {
  productId?: string(name='ProductId'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
  osType?: int32(name='OsType'),
}

model ListAppsResponseBody = {
  requestId?: string(name='RequestId'),
  ubsmsStatus?: string(name='UbsmsStatus'),
  total?: int32(name='Total'),
  appInfos?: {
    appInfo?: [ 
    {
      type?: int32(name='Type'),
      industryId?: int32(name='IndustryId'),
      appKey?: string(name='AppKey'),
      packageName?: string(name='PackageName'),
      encodedIcon?: string(name='EncodedIcon'),
      name?: string(name='Name'),
      bundleId?: string(name='BundleId'),
      readonly?: boolean(name='Readonly'),
    }
  ](name='AppInfo')
  }(name='AppInfos'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var query = {};
  query["ProductId"] = request.productId;
  query["Page"] = request.page;
  query["PageSize"] = request.pageSize;
  query["OsType"] = request.osType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListApps',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model ListProductsRequest {
  offset?: int32(name='Offset'),
  size?: int32(name='Size'),
  simple?: boolean(name='Simple'),
  productName?: string(name='ProductName'),
}

model ListProductsResponseBody = {
  requestId?: string(name='RequestId'),
  ubsmsStatus?: string(name='UbsmsStatus'),
  total?: int32(name='Total'),
  productInfos?: {
    productInfo?: [ 
    {
      industryId?: int32(name='IndustryId'),
      platforms?: string(name='Platforms'),
      createTime?: string(name='CreateTime'),
      encodedIcon?: string(name='EncodedIcon'),
      productId?: int32(name='ProductId'),
      name?: string(name='Name'),
      readonly?: boolean(name='Readonly'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProductsWithOptions(request: ListProductsRequest, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  var query = {};
  query["Offset"] = request.offset;
  query["Size"] = request.size;
  query["Simple"] = request.simple;
  query["ProductName"] = request.productName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListProducts',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsWithOptions(request, runtime);
}

model ModifyAppRequest {
  appKey?: string(name='AppKey'),
  name?: string(name='Name'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
  encodedIcon?: string(name='EncodedIcon'),
  industryId?: int32(name='IndustryId'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  query["AppKey"] = request.appKey;
  query["Name"] = request.name;
  query["BundleId"] = request.bundleId;
  query["PackageName"] = request.packageName;
  query["EncodedIcon"] = request.encodedIcon;
  query["IndustryId"] = request.industryId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyProductRequest {
  productId?: string(name='ProductId'),
  name?: string(name='Name'),
}

model ModifyProductResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProductResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProductResponseBody(name='body'),
}

async function modifyProductWithOptions(request: ModifyProductRequest, runtime: Util.RuntimeOptions): ModifyProductResponse {
  Util.validateModel(request);
  var query = {};
  query["ProductId"] = request.productId;
  query["Name"] = request.name;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProduct',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProduct(request: ModifyProductRequest): ModifyProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProductWithOptions(request, runtime);
}

model OpenEmasServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenEmasServiceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model OpenEmasServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenEmasServiceResponseBody(name='body'),
}

async function openEmasServiceWithOptions(request: OpenEmasServiceRequest, runtime: Util.RuntimeOptions): OpenEmasServiceResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'OpenEmasService',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openEmasService(request: OpenEmasServiceRequest): OpenEmasServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openEmasServiceWithOptions(request, runtime);
}

model QueryAppInfoRequest {
  appKey?: string(name='AppKey'),
}

model QueryAppInfoResponseBody = {
  requestId?: string(name='RequestId'),
  appInfo?: {
    certDevelopExpiration?: string(name='CertDevelopExpiration'),
    type?: int32(name='Type'),
    status?: int32(name='Status'),
    industryId?: int32(name='IndustryId'),
    packageName?: string(name='PackageName'),
    createTime?: string(name='CreateTime'),
    readonly?: boolean(name='Readonly'),
    certProductExpiration?: string(name='CertProductExpiration'),
    appName?: string(name='AppName'),
    appKey?: string(name='AppKey'),
    encodedIcon?: string(name='EncodedIcon'),
    certDevelopAvail?: boolean(name='CertDevelopAvail'),
    productId?: long(name='ProductId'),
    bundleId?: string(name='BundleId'),
    certProductAvail?: boolean(name='CertProductAvail'),
  }(name='AppInfo'),
}

model QueryAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppInfoResponseBody(name='body'),
}

async function queryAppInfoWithOptions(request: QueryAppInfoRequest, runtime: Util.RuntimeOptions): QueryAppInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["AppKey"] = request.appKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppInfo',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppInfo(request: QueryAppInfoRequest): QueryAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppInfoWithOptions(request, runtime);
}

model QueryAppSecurityInfoRequest {
  appKey?: string(name='AppKey'),
}

model QueryAppSecurityInfoResponseBody = {
  requestId?: string(name='RequestId'),
  appSecurityInfo?: {
    appSecret?: string(name='AppSecret'),
    appKey?: string(name='AppKey'),
  }(name='AppSecurityInfo'),
}

model QueryAppSecurityInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppSecurityInfoResponseBody(name='body'),
}

async function queryAppSecurityInfoWithOptions(request: QueryAppSecurityInfoRequest, runtime: Util.RuntimeOptions): QueryAppSecurityInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["AppKey"] = request.appKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppSecurityInfo',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppSecurityInfo(request: QueryAppSecurityInfoRequest): QueryAppSecurityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppSecurityInfoWithOptions(request, runtime);
}

model QueryProductInfoRequest {
  productId?: string(name='ProductId'),
}

model QueryProductInfoResponseBody = {
  productInfo?: {
    industryId?: int32(name='IndustryId'),
    encodedIcon?: string(name='EncodedIcon'),
    name?: string(name='Name'),
    readonly?: boolean(name='Readonly'),
    iconName?: string(name='IconName'),
  }(name='ProductInfo'),
  requestId?: string(name='RequestId'),
}

model QueryProductInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductInfoResponseBody(name='body'),
}

async function queryProductInfoWithOptions(request: QueryProductInfoRequest, runtime: Util.RuntimeOptions): QueryProductInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["ProductId"] = request.productId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductInfo',
    version = '2017-08-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductInfo(request: QueryProductInfoRequest): QueryProductInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductInfoWithOptions(request, runtime);
}

