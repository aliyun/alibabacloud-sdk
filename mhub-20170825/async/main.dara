/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mhub';
  @version = '2017-08-25';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAppRequest {
  bundleId?: string(name='BundleId', example='com.test.ios', position='Query'),
  encodedIcon?: string(name='EncodedIcon', position='Query'),
  industryId?: string(name='IndustryId', example='1', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  packageName?: string(name='PackageName', example='com.test.android', position='Query'),
  productId: string(name='ProductId', description='This parameter is required.', example='123456', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model CreateAppResponseBody = {
  appInfo?: {
    appKey?: string(name='AppKey', example='123456'),
    bundleId?: string(name='BundleId', example='com.test.ios'),
    createTime?: string(name='CreateTime', example='2020-12-16T06:25:52Z'),
    description?: string(name='Description'),
    modifyTime?: string(name='ModifyTime', example='2020-12-16T06:25:52Z'),
    name?: string(name='Name'),
    packageName?: string(name='PackageName', example='com.test.android'),
    productId?: int32(name='ProductId', example='123456'),
    type?: int32(name='Type', example='1'),
  }(name='AppInfo'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929****'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApp  CreateAppRequest
  * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductRequest {
  description?: string(name='Description', example='AAA', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
}

model CreateProductResponseBody = {
  productId?: long(name='ProductId', example='123456'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProduct  CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appKey: string(name='AppKey', description='This parameter is required.', example='123456', position='Query'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApp  DeleteAppRequest
  * @return DeleteAppResponse
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductRequest {
  productId: string(name='ProductId', description='This parameter is required.', example='12345', position='Query'),
}

model DeleteProductResponseBody = {
  message?: string(name='Message', example='PRODUCT_NOT_ALONE'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model DeleteProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProduct  DeleteProductRequest
  * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDashboardRequest {
  appKey?: string(name='AppKey', example='29201799', position='Query'),
  appType?: int32(name='AppType', example='1', position='Query'),
  appVersion?: string(name='AppVersion', example='4.8', position='Query'),
  endTime?: long(name='EndTime', example='1681985390256', position='Query'),
  keyword?: string(name='Keyword', example='4.8', position='Query'),
  proxyAction?: string(name='ProxyAction', example='queryAppVersions', position='Query'),
  serviceName?: string(name='ServiceName', example='mqc', position='Query'),
  startTime?: long(name='StartTime', example='1681369984564', position='Query'),
}

model DescribeDashboardResponseBody = {
  model?: string(name='Model', example='{
	"success":true,
	"model":{
		"perfMonthCount":0,
		"compatibilityMonthCount":0,
		"perfLastMonthCount":0,
		"compatibilityLastMonthCount":0,
		"automationMonthCount":0,
		"automationLastMonthCount":0
	}
}'),
  requestId?: string(name='RequestId', example='4CC30A8F-787C-55CA-87A6-7D1BED56067E'),
}

model DescribeDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDashboardResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDashboard  DescribeDashboardRequest
  * @return DescribeDashboardResponse
 */
async function describeDashboard(request: DescribeDashboardRequest): DescribeDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDashboard', 'POST', '/', 'json', false, 'json', request);
}

model ListAppsRequest {
  osType?: int32(name='OsType', example='1', minimum=0, maximum=2, position='Query'),
  page?: string(name='Page', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  productId: string(name='ProductId', description='This parameter is required.', example='123456', position='Query'),
}

model ListAppsResponseBody = {
  appInfos?: {
    appInfo?: [ 
    {
      appKey?: string(name='AppKey', example='123456'),
      appName?: string(name='AppName', example='mobile-live-service'),
      bundleId?: string(name='BundleId', example='com.test.ios'),
      encodedIcon?: string(name='EncodedIcon', example='图片 base64 字符串'),
      industryId?: int32(name='IndustryId', example='1'),
      name?: string(name='Name', example='我的应用'),
      packageName?: string(name='PackageName', example='com.test.android'),
      readonly?: boolean(name='Readonly', example='false'),
      type?: int32(name='Type', example='1'),
    }
  ](name='AppInfo')
  }(name='AppInfos'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
  total?: int32(name='Total', example='10'),
  ubsmsStatus?: string(name='UbsmsStatus', example='enabled'),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApps  ListAppsRequest
  * @return ListAppsResponse
 */
async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApps', 'POST', '/', 'json', false, 'json', request);
}

model ListProductsRequest {
  offset?: int32(name='Offset', example='1', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productName?: string(name='ProductName', position='Query'),
  searchKeyWord?: string(name='SearchKeyWord', position='Query'),
  simple?: boolean(name='Simple', example='false', position='Query'),
  size?: int32(name='Size', example='20', position='Query'),
}

model ListProductsResponseBody = {
  productInfos?: {
    productInfo?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-16T06:25:52Z'),
      description?: string(name='Description', example='xxxx'),
      encodedIcon?: string(name='EncodedIcon', example='图片 base64'),
      industryId?: int32(name='IndustryId', example='1'),
      name?: string(name='Name', example='我的项目'),
      platforms?: string(name='Platforms', example='iOS'),
      productId?: int32(name='ProductId', example='1234'),
      readonly?: boolean(name='Readonly', example='false'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
  total?: int32(name='Total', example='10'),
  ubsmsStatus?: string(name='UbsmsStatus', example='enabled'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProducts', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appKey: string(name='AppKey', description='This parameter is required.', example='123456', position='Query'),
  bundleId?: string(name='BundleId', example='com.test.ios', position='Query'),
  encodedIcon?: string(name='EncodedIcon', position='Query'),
  industryId?: int32(name='IndustryId', example='1', position='Query'),
  name?: string(name='Name', position='Query'),
  packageName?: string(name='PackageName', example='com.test.android', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyApp  ModifyAppRequest
  * @return ModifyAppResponse
 */
async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyProductRequest {
  description?: string(name='Description', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  productId: string(name='ProductId', description='This parameter is required.', example='1234', position='Query'),
}

model ModifyProductResponseBody = {
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model ModifyProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyProduct  ModifyProductRequest
  * @return ModifyProductResponse
 */
async function modifyProduct(request: ModifyProductRequest): ModifyProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProduct', 'POST', '/', 'json', false, 'json', request);
}

model OpenEmasServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model OpenEmasServiceResponseBody = {
  orderId?: string(name='OrderId', example='20671870151****'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model OpenEmasServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenEmasServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenEmasService  OpenEmasServiceRequest
  * @return OpenEmasServiceResponse
 */
async function openEmasService(request: OpenEmasServiceRequest): OpenEmasServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenEmasService', 'POST', '/', 'json', false, 'json', request);
}

model QueryAppInfoRequest {
  appKey: string(name='AppKey', description='This parameter is required.', example='123456', position='Query'),
}

model QueryAppInfoResponseBody = {
  appInfo?: {
    appKey?: string(name='AppKey', example='123456'),
    appName?: string(name='AppName'),
    bundleId?: string(name='BundleId', example='com.test.ios'),
    certDevelopAvail?: boolean(name='CertDevelopAvail', example='false'),
    certDevelopExpiration?: string(name='CertDevelopExpiration', example='2020-12-16T06:25:52Z'),
    certProductAvail?: boolean(name='CertProductAvail', example='false'),
    certProductExpiration?: string(name='CertProductExpiration', example='2020-12-16T06:25:52Z'),
    createTime?: string(name='CreateTime', example='2020-12-16T06:25:52Z'),
    encodedIcon?: string(name='EncodedIcon'),
    industryId?: int32(name='IndustryId', example='1'),
    packageName?: string(name='PackageName', example='com.test.android'),
    productId?: long(name='ProductId', example='1234'),
    readonly?: boolean(name='Readonly', example='false'),
    status?: int32(name='Status', example='0'),
    type?: int32(name='Type', example='1'),
  }(name='AppInfo'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model QueryAppInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAppInfo  QueryAppInfoRequest
  * @return QueryAppInfoResponse
 */
async function queryAppInfo(request: QueryAppInfoRequest): QueryAppInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAppInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryAppSecurityInfoRequest {
  appKey: string(name='AppKey', description='This parameter is required.', example='123456', position='Query'),
}

model QueryAppSecurityInfoResponseBody = {
  appSecurityInfo?: {
    appKey?: string(name='AppKey', example='123456'),
    appSecret?: string(name='AppSecret', example='abc123abc123'),
    extConfig?: {
      tlogRsaSecret?: string(name='TlogRsaSecret'),
    }(name='ExtConfig'),
  }(name='AppSecurityInfo'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model QueryAppSecurityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppSecurityInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAppSecurityInfo  QueryAppSecurityInfoRequest
  * @return QueryAppSecurityInfoResponse
 */
async function queryAppSecurityInfo(request: QueryAppSecurityInfoRequest): QueryAppSecurityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAppSecurityInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductInfoRequest {
  productId: string(name='ProductId', description='This parameter is required.', example='1234', position='Query'),
}

model QueryProductInfoResponseBody = {
  productInfo?: {
    createTime?: string(name='CreateTime', example='2022-12-02T09:50:01Z'),
    description?: string(name='Description', example='endpoint for ecs: kangaroo-xuanji-cn-hangzhou-ecs-console-mirror-0(i-bp1fs84ua5zw4aljdlh1)'),
    encodedIcon?: string(name='EncodedIcon', example='icon图片base64字符串'),
    iconName?: string(name='IconName', example='icon图片名称'),
    industryId?: int32(name='IndustryId', example='1'),
    name?: string(name='Name', example='我的项目'),
    platforms?: string(name='Platforms', example='linux/amd64'),
    productId?: int32(name='ProductId', example='3910360'),
    readonly?: boolean(name='Readonly', example='false'),
  }(name='ProductInfo'),
  requestId?: string(name='RequestId', example='126D4DDD-05A5-49B1-B18C-39C4A929BFB2'),
}

model QueryProductInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryProductInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryProductInfo  QueryProductInfoRequest
  * @return QueryProductInfoResponse
 */
async function queryProductInfo(request: QueryProductInfoRequest): QueryProductInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductInfo', 'POST', '/', 'json', false, 'json', request);
}

