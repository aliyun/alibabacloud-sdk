/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('imp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssetsAuditAssetResponse {
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsCreateAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsDeleteAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsGetAssetResponse {
  asset?: CommonAsset(name='Asset', description='Asset'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsListAssetsRequest {
  appId?: string(name='AppId', description='AppId'),
  fieldMask?: string(name='FieldMask', description='Optional. Used to specify a subset of fields that should be
returned by a get operation or modified by an update operation.'),
  maxResults?: int32(name='MaxResults', description='每页显示个数，最大支持20，参数为空默认显示个数为10。'),
  nextToken?: string(name='NextToken', description='分页Token Optional.'),
  params?: string(name='Params', description='参数'),
  topic?: string(name='Topic', description='订阅Topic'),
}

model AssetsListAssetsResponse {
  assets?: [
    CommonAsset
  ](name='Assets', description='Asset列表'),
  nextToken?: string(name='NextToken', description='分页Token'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsUpdateAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model CommonAddress {
  address?: string(name='Address', description='地址'),
  city?: string(name='City', description='城市'),
  country?: string(name='Country', description='国家'),
  state?: string(name='State', description='区域'),
  zip?: string(name='Zip', description='zip'),
}

model CommonAsset {
  address?: CommonAddress(name='Address', description='行政区域地址'),
  appId?: string(name='AppId', description='应用ID'),
  auditStatus?: string(name='AuditStatus', description='审核状态'),
  author?: string(name='Author', description='作者'),
  createdAt?: string(name='CreatedAt', description='创建时间'),
  description?: string(name='Description', description='资产描述'),
  extends?: map[string]any(name='Extends', description='扩展字段'),
  id?: string(name='Id', description='资产ID'),
  images?: [
    CommonMediaResource
  ](name='Images', description='图像资源'),
  labels?: map[string]any(name='Labels', description='定义Label， eg:type:advertise 支持广告类型的label'),
  location?: TypeLatLng(name='Location', description='经纬度地理位置'),
  source?: string(name='Source', description='资产来源'),
  status?: string(name='Status', description='资产状态'),
  synopsis?: string(name='Synopsis', description='概要'),
  tags?: [ string ](name='Tags', description='标签'),
  title?: string(name='Title', description='标题'),
  updatedAt?: string(name='UpdatedAt', description='更新时间'),
  videos?: [
    CommonMediaResource
  ](name='Videos', description='视频资源'),
}

model CommonMediaResource {
  format?: string(name='Format', description='media format'),
  id?: string(name='Id', description='media id'),
  name?: string(name='Name', description='name'),
  sha1?: string(name='Sha1', description='media sha1'),
  size?: long(name='Size', description='media size'),
  url?: string(name='Url', description='resource url'),
}

model CommonSimpleAsset {
  address?: CommonAddress(name='Address', description='行政区域地址'),
  appId?: string(name='AppId', description='应用ID'),
  auditStatus?: string(name='AuditStatus', description='审核状态'),
  author?: string(name='Author', description='作者'),
  description?: string(name='Description', description='资产描述'),
  extends?: map[string]any(name='Extends', description='扩展字段'),
  id?: string(name='Id', description='资产ID'),
  image?: CommonMediaResource(name='Image', description='图像资源'),
  labels?: map[string]any(name='Labels', description='定义Label， eg:type:advertise 支持广告类型的label'),
  location?: TypeLatLng(name='Location', description='经纬度地理位置'),
  source?: string(name='Source', description='资产来源'),
  status?: string(name='Status', description='资产状态'),
  synopsis?: string(name='Synopsis', description='概要'),
  tags?: [ string ](name='Tags', description='标签'),
  title?: string(name='Title', description='标题'),
  video?: CommonMediaResource(name='Video', description='视频资源'),
}

model RpcStatus {
  code?: int32(name='Code', description='错误码'),
  detail?: string(name='Detail', description='错误详情'),
  message?: string(name='Message', description='错误消息'),
}

model TypeLatLng {
  latitude?: double(name='Latitude', description='The latitude in degrees. It must be in the range [-90.0, +90.0].'),
  longitude?: double(name='Longitude', description='The longitude in degrees. It must be in the range [-180.0, +180.0].'),
}

model BanAllCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
  userId?: string(name='UserId', description='用户在房间内的唯一标识'),
}

model BanAllCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model BanAllCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BanAllCommentResponseBody(name='body'),
}

async function banAllCommentWithOptions(request: BanAllCommentRequest, runtime: Util.RuntimeOptions): BanAllCommentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BanAllComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function banAllComment(request: BanAllCommentRequest): BanAllCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return banAllCommentWithOptions(request, runtime);
}

model BanCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  banCommentTime?: long(name='BanCommentTime', description='禁言时长（秒）'),
  banCommentUser?: string(name='BanCommentUser', description='被禁言的用户在房间内的唯一标识'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
  userId?: string(name='UserId', description='用户在房间内的唯一标识'),
}

model BanCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作是否成功'),
}

model BanCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BanCommentResponseBody(name='body'),
}

async function banCommentWithOptions(request: BanCommentRequest, runtime: Util.RuntimeOptions): BanCommentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.banCommentTime)) {
    body['BanCommentTime'] = request.banCommentTime;
  }
  if (!Util.isUnset(request.banCommentUser)) {
    body['BanCommentUser'] = request.banCommentUser;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BanComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function banComment(request: BanCommentRequest): BanCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return banCommentWithOptions(request, runtime);
}

model CancelBanAllCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
  userId?: string(name='UserId', description='用户在房间内的唯一标识'),
}

model CancelBanAllCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model CancelBanAllCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelBanAllCommentResponseBody(name='body'),
}

async function cancelBanAllCommentWithOptions(request: CancelBanAllCommentRequest, runtime: Util.RuntimeOptions): CancelBanAllCommentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelBanAllComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelBanAllComment(request: CancelBanAllCommentRequest): CancelBanAllCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelBanAllCommentWithOptions(request, runtime);
}

model CancelBanCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  banCommentUser?: string(name='BanCommentUser', description='取消禁言的用户唯一标识'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
  userId?: string(name='UserId', description='用户在房间内的唯一标识'),
}

model CancelBanCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model CancelBanCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelBanCommentResponseBody(name='body'),
}

async function cancelBanCommentWithOptions(request: CancelBanCommentRequest, runtime: Util.RuntimeOptions): CancelBanCommentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.banCommentUser)) {
    body['BanCommentUser'] = request.banCommentUser;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelBanComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelBanComment(request: CancelBanCommentRequest): CancelBanCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelBanCommentWithOptions(request, runtime);
}

model CancelUserAdminRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
  userId?: string(name='UserId', description='用户ID'),
}

model CancelUserAdminResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelUserAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelUserAdminResponseBody(name='body'),
}

async function cancelUserAdminWithOptions(request: CancelUserAdminRequest, runtime: Util.RuntimeOptions): CancelUserAdminResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelUserAdmin',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelUserAdmin(request: CancelUserAdminRequest): CancelUserAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUserAdminWithOptions(request, runtime);
}

model CreateClassRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  createNickname?: string(name='CreateNickname', description='创建人用户昵称。'),
  createUserId?: string(name='CreateUserId', description='创建人用户ID。'),
  title?: string(name='Title', description='课堂标题'),
}

model CreateClassResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    classId?: string(name='ClassId', description='课堂唯一标识。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    createNickname?: string(name='CreateNickname', description='创建人昵称。'),
    createUserId?: string(name='CreateUserId', description='创建人ID。'),
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
    roomId?: string(name='RoomId', description='房间ID'),
    status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
    title?: string(name='Title', description='课堂标题。'),
    whiteboardId?: string(name='WhiteboardId', description='白板ID'),
    whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model CreateClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClassResponseBody(name='body'),
}

async function createClassWithOptions(request: CreateClassRequest, runtime: Util.RuntimeOptions): CreateClassResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.createNickname)) {
    body['CreateNickname'] = request.createNickname;
  }
  if (!Util.isUnset(request.createUserId)) {
    body['CreateUserId'] = request.createUserId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateClass',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClass(request: CreateClassRequest): CreateClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClassWithOptions(request, runtime);
}

model CreateLiveRequest {
  anchorId?: string(name='AnchorId', description='主播ID，支持中英文，最大长度128位，缺省时主播为当前创建直播用户。'),
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  codeLevel?: int32(name='CodeLevel', description='直播推流码率，缺省时默认为3。取值：  -1：流畅lld。 1：标清lsd。 2：高清lhd。 3：超清lud。'),
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位。'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID，缺省时系统自动生成36位随机uuid字符串。'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36个字符，传空值，则随机生成一个房间ID。'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位。'),
  userId?: string(name='UserId', description='创建直播用户。'),
}

model CreateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
  }(name='Result'),
}

model CreateLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLiveResponseBody(name='body'),
}

async function createLiveWithOptions(request: CreateLiveRequest, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.anchorId)) {
    body['AnchorId'] = request.anchorId;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.codeLevel)) {
    body['CodeLevel'] = request.codeLevel;
  }
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveWithOptions(request, runtime);
}

model CreateLiveRecordSliceFileRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  endTime?: long(name='EndTime', description='片段结束时间，时间戳。'),
  fileName?: string(name='FileName', description='自定义文件名称。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  startTime?: long(name='StartTime', description='片段开始时间，时间戳。'),
}

model CreateLiveRecordSliceFileResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    sliceRecordUrl?: string(name='SliceRecordUrl', description='片段录制文件的地址。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model CreateLiveRecordSliceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLiveRecordSliceFileResponseBody(name='body'),
}

async function createLiveRecordSliceFileWithOptions(request: CreateLiveRecordSliceFileRequest, runtime: Util.RuntimeOptions): CreateLiveRecordSliceFileResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveRecordSliceFile',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLiveRecordSliceFile(request: CreateLiveRecordSliceFileRequest): CreateLiveRecordSliceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRecordSliceFileWithOptions(request, runtime);
}

model CreateLiveRoomRequest {
  anchorId?: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。'),
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式'),
  enableLinkMic?: boolean(name='EnableLinkMic', description='是否开启连麦。'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。最大支持4096个字节。'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。'),
  title?: string(name='Title', description='标题，支持中英文，最大长度32位。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model CreateLiveRoomShrinkRequest {
  anchorId?: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。'),
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式'),
  enableLinkMic?: boolean(name='EnableLinkMic', description='是否开启连麦。'),
  extensionShrink?: string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。最大支持4096个字节。'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。'),
  title?: string(name='Title', description='标题，支持中英文，最大长度32位。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model CreateLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID。'),
    anchorNick?: string(name='AnchorNick', description='主播昵称。'),
    appId?: string(name='AppId', description='应用ID。'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='RTS转码流地址，推荐web端使用。'),
      artcUrl?: string(name='ArtcUrl', description='RTS原码流地址，推荐移动端使用。'),
    }(name='ArtcInfo', description='RTS低延迟播流信息。'),
    chatId?: string(name='ChatId', description='聊天ID。'),
    coverUrl?: string(name='CoverUrl', description='封面。'),
    extension?: map[string]string(name='Extension', description='直播拓展字段。'),
    hlsUrl?: string(name='HlsUrl', description='原画HLS播放地址。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    notice?: string(name='Notice', description='公告。'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址。'),
    pluginInstanceInfoList?: [ 
      {
        createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='插件拓展字段。'),
        pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
        pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
      }
    ](name='PluginInstanceInfoList', description='活跃插件列表。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    title?: string(name='Title', description='标题。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model CreateLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLiveRoomResponseBody(name='body'),
}

async function createLiveRoomWithOptions(tmpReq: CreateLiveRoomRequest, runtime: Util.RuntimeOptions): CreateLiveRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLiveRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extension)) {
    request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, 'Extension', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.anchorId)) {
    body['AnchorId'] = request.anchorId;
  }
  if (!Util.isUnset(request.anchorNick)) {
    body['AnchorNick'] = request.anchorNick;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.enableLinkMic)) {
    body['EnableLinkMic'] = request.enableLinkMic;
  }
  if (!Util.isUnset(request.extensionShrink)) {
    body['Extension'] = request.extensionShrink;
  }
  if (!Util.isUnset(request.notice)) {
    body['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLiveRoom(request: CreateLiveRoomRequest): CreateLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRoomWithOptions(request, runtime);
}

model CreateRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  templateId?: string(name='TemplateId', description='房间模板唯一标识，当前支持的取值：default，传空默认为default。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
}

model CreateRoomShrinkRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  extensionShrink?: string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  templateId?: string(name='TemplateId', description='房间模板唯一标识，当前支持的取值：default，传空默认为default。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
}

model CreateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomId?: string(name='RoomId', description='房间id'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoomWithOptions(tmpReq: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extension)) {
    request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, 'Extension', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.extensionShrink)) {
    body['Extension'] = request.extensionShrink;
  }
  if (!Util.isUnset(request.notice)) {
    body['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.roomOwnerId)) {
    body['RoomOwnerId'] = request.roomOwnerId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model CreateSensitiveWordRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成。包含小写字母、数字，长度为6个字符。'),
  wordList?: [ string ](name='WordList'),
}

model CreateSensitiveWordShrinkRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成。包含小写字母、数字，长度为6个字符。'),
  wordListShrink?: string(name='WordList'),
}

model CreateSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model CreateSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSensitiveWordResponseBody(name='body'),
}

async function createSensitiveWordWithOptions(tmpReq: CreateSensitiveWordRequest, runtime: Util.RuntimeOptions): CreateSensitiveWordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSensitiveWordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.wordList)) {
    request.wordListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.wordList, 'WordList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.wordListShrink)) {
    body['WordList'] = request.wordListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSensitiveWord',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSensitiveWord(request: CreateSensitiveWordRequest): CreateSensitiveWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSensitiveWordWithOptions(request, runtime);
}

model DeleteClassRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课堂唯一标识。'),
  userId?: string(name='UserId', description='操作人用户ID，仅支持中英文数字，下划线，中划线，1~36个字符。'),
}

model DeleteClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClassResponseBody(name='body'),
}

async function deleteClassWithOptions(request: DeleteClassRequest, runtime: Util.RuntimeOptions): DeleteClassResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClass',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClass(request: DeleteClassRequest): DeleteClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClassWithOptions(request, runtime);
}

model DeleteCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  commentIdList?: [ string ](name='CommentIdList', description='需要删除的弹幕id列表'),
  roomId?: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。'),
  userId?: string(name='UserId', description='删除的操作人ID。'),
}

model DeleteCommentResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    deleteResult?: boolean(name='DeleteResult', description='删除的结果'),
  }(name='Result', description='调用删除直播间弹幕的返回结果。'),
}

model DeleteCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCommentResponseBody(name='body'),
}

async function deleteCommentWithOptions(request: DeleteCommentRequest, runtime: Util.RuntimeOptions): DeleteCommentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.commentIdList)) {
    bodyFlat['CommentIdList'] = request.commentIdList;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteComment(request: DeleteCommentRequest): DeleteCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommentWithOptions(request, runtime);
}

model DeleteCommentByCreatorIdRequest {
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  commentIdList?: [ string ](name='CommentIdList', description='需要删除的弹幕id列表'),
  creatorId?: string(name='CreatorId', description='弹幕的创建者ID。'),
  roomId?: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。'),
  userId?: string(name='UserId', description='删除的操作人ID。'),
}

model DeleteCommentByCreatorIdResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    deleteResult?: boolean(name='DeleteResult', description='删除的结果'),
  }(name='Result', description='调用删除直播间弹幕的返回结果。'),
}

model DeleteCommentByCreatorIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCommentByCreatorIdResponseBody(name='body'),
}

async function deleteCommentByCreatorIdWithOptions(request: DeleteCommentByCreatorIdRequest, runtime: Util.RuntimeOptions): DeleteCommentByCreatorIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.commentIdList)) {
    bodyFlat['CommentIdList'] = request.commentIdList;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCommentByCreatorId',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCommentByCreatorId(request: DeleteCommentByCreatorIdRequest): DeleteCommentByCreatorIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommentByCreatorIdWithOptions(request, runtime);
}

model DeleteConferenceRequest {
  appId?: string(name='AppId', description='租户名'),
  conferenceId?: string(name='ConferenceId', description='会议资源的唯一标识ID'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36位'),
  userId?: string(name='UserId', description='创建会议用户ID'),
}

model DeleteConferenceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConferenceResponseBody(name='body'),
}

async function deleteConferenceWithOptions(request: DeleteConferenceRequest, runtime: Util.RuntimeOptions): DeleteConferenceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConference',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConference(request: DeleteConferenceRequest): DeleteConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConferenceWithOptions(request, runtime);
}

model DeleteLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLiveResponseBody(name='body'),
}

async function deleteLiveWithOptions(request: DeleteLiveRequest, runtime: Util.RuntimeOptions): DeleteLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveWithOptions(request, runtime);
}

model DeleteLiveRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model DeleteLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLiveRoomResponseBody(name='body'),
}

async function deleteLiveRoomWithOptions(request: DeleteLiveRoomRequest, runtime: Util.RuntimeOptions): DeleteLiveRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLiveRoom(request: DeleteLiveRoomRequest): DeleteLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRoomWithOptions(request, runtime);
}

model DeleteRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
}

model DeleteRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRoomResponseBody(name='body'),
}

async function deleteRoomWithOptions(request: DeleteRoomRequest, runtime: Util.RuntimeOptions): DeleteRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoomWithOptions(request, runtime);
}

model DeleteSensitiveWordRequest {
  appId?: string(name='AppId', description='弹幕发送者的用户ID，最大长度不超过32个字节。'),
  wordList?: [ string ](name='WordList'),
}

model DeleteSensitiveWordShrinkRequest {
  appId?: string(name='AppId', description='弹幕发送者的用户ID，最大长度不超过32个字节。'),
  wordListShrink?: string(name='WordList'),
}

model DeleteSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model DeleteSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSensitiveWordResponseBody(name='body'),
}

async function deleteSensitiveWordWithOptions(tmpReq: DeleteSensitiveWordRequest, runtime: Util.RuntimeOptions): DeleteSensitiveWordResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSensitiveWordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.wordList)) {
    request.wordListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.wordList, 'WordList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.wordListShrink)) {
    body['WordList'] = request.wordListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSensitiveWord',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSensitiveWord(request: DeleteSensitiveWordRequest): DeleteSensitiveWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSensitiveWordWithOptions(request, runtime);
}

model DescribeMeterImpPlayBackTimeByLiveIdRequest {
  appId?: string(name='AppId'),
  endTs?: long(name='EndTs'),
  liveId?: string(name='LiveId'),
  startTs?: long(name='StartTs'),
}

model DescribeMeterImpPlayBackTimeByLiveIdResponseBody = {
  data?: [ 
    {
      watchTime?: long(name='WatchTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImpPlayBackTimeByLiveIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMeterImpPlayBackTimeByLiveIdResponseBody(name='body'),
}

async function describeMeterImpPlayBackTimeByLiveIdWithOptions(request: DescribeMeterImpPlayBackTimeByLiveIdRequest, runtime: Util.RuntimeOptions): DescribeMeterImpPlayBackTimeByLiveIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImpPlayBackTimeByLiveId',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMeterImpPlayBackTimeByLiveId(request: DescribeMeterImpPlayBackTimeByLiveIdRequest): DescribeMeterImpPlayBackTimeByLiveIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImpPlayBackTimeByLiveIdWithOptions(request, runtime);
}

model DescribeMeterImpWatchLiveTimeByLiveIdRequest {
  appId?: string(name='AppId'),
  liveId?: string(name='LiveId'),
}

model DescribeMeterImpWatchLiveTimeByLiveIdResponseBody = {
  data?: [ 
    {
      watchTimeInLatency?: long(name='WatchTimeInLatency'),
      watchTimeInLowLatency?: long(name='WatchTimeInLowLatency'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImpWatchLiveTimeByLiveIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMeterImpWatchLiveTimeByLiveIdResponseBody(name='body'),
}

async function describeMeterImpWatchLiveTimeByLiveIdWithOptions(request: DescribeMeterImpWatchLiveTimeByLiveIdRequest, runtime: Util.RuntimeOptions): DescribeMeterImpWatchLiveTimeByLiveIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    query['LiveId'] = request.liveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeterImpWatchLiveTimeByLiveId',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMeterImpWatchLiveTimeByLiveId(request: DescribeMeterImpWatchLiveTimeByLiveIdRequest): DescribeMeterImpWatchLiveTimeByLiveIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeterImpWatchLiveTimeByLiveIdWithOptions(request, runtime);
}

model GetAuthTokenRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成'),
  appKey?: string(name='AppKey', description='终端设备类型,通过控制台创建和查询'),
  deviceId?: string(name='DeviceId', description='终端设备ID'),
  userId?: string(name='UserId', description='用户UserId,在AppId下单独唯一'),
}

model GetAuthTokenResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    accessToken?: string(name='AccessToken', description='用于长连接建连的token'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', description='登录token过期时间(毫秒)'),
    refreshToken?: string(name='RefreshToken', description='更新Token，若AccessToken过期，则可以使用RefreshToken再次获取新Token'),
  }(name='Result'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: Util.RuntimeOptions): GetAuthTokenResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    body['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthToken',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthTokenWithOptions(request, runtime);
}

model GetClassDetailRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
  userId?: string(name='UserId', description='操作人用户ID。'),
}

model GetClassDetailResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    createNickname?: string(name='CreateNickname', description='创建人昵称。'),
    createUserId?: string(name='CreateUserId', description='创建人ID。'),
    endTime?: long(name='EndTime', description='下课时间戳，毫秒。'),
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
    roomId?: string(name='RoomId', description='房间ID'),
    startTime?: long(name='StartTime', description='开始上课时间戳，毫秒。'),
    status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
    title?: string(name='Title', description='课堂标题。'),
    whiteboardId?: string(name='WhiteboardId', description='白板ID'),
    whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetClassDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClassDetailResponseBody(name='body'),
}

async function getClassDetailWithOptions(request: GetClassDetailRequest, runtime: Util.RuntimeOptions): GetClassDetailResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetClassDetail',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClassDetail(request: GetClassDetailRequest): GetClassDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClassDetailWithOptions(request, runtime);
}

model GetClassRecordRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课程唯一标识，由调用CreateClass返回。'),
  userId?: string(name='UserId', description='操作人用户ID。'),
}

model GetClassRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    playbackUrlMap?: map[string][ string ](name='PlaybackUrlMap'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetClassRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClassRecordResponseBody(name='body'),
}

async function getClassRecordWithOptions(request: GetClassRecordRequest, runtime: Util.RuntimeOptions): GetClassRecordResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetClassRecord',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClassRecord(request: GetClassRecordRequest): GetClassRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClassRecordWithOptions(request, runtime);
}

model GetConferenceRequest {
  conferenceId?: string(name='ConferenceId', description='会议资源唯一标识。'),
}

model GetConferenceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appId?: string(name='AppId', description='租户名'),
    conferenceId?: string(name='ConferenceId', description='会议资源唯一标识。'),
    createTime?: long(name='CreateTime', description='会议创建时间戳，单位：毫秒。'),
    playbackUrl?: string(name='PlaybackUrl', description='录制回放地址，m3u8格式，会议结束后10秒才会生成。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    status?: string(name='Status', description='会议状态。'),
    title?: string(name='Title', description='会议标题。'),
    userId?: string(name='UserId', description='创建会议用户。'),
  }(name='Result', description='返回结果'),
}

model GetConferenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConferenceResponseBody(name='body'),
}

async function getConferenceWithOptions(request: GetConferenceRequest, runtime: Util.RuntimeOptions): GetConferenceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetConference',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConference(request: GetConferenceRequest): GetConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConferenceWithOptions(request, runtime);
}

model GetLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
}

model GetLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID'),
    appId?: string(name='AppId', description='租户名'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='原画转码地址'),
      artcUrl?: string(name='ArtcUrl', description='源码地址'),
    }(name='ArtcInfo', description='rts播流信息'),
    codeLevel?: int32(name='CodeLevel', description='直播推送分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
    coverUrl?: string(name='CoverUrl', description='封面图片'),
    createTime?: long(name='CreateTime', description='直播创建时间（毫秒ms）'),
    duration?: long(name='Duration', description='直播持续时间（毫秒ms）'),
    endTime?: long(name='EndTime', description='直播结束时间（毫秒ms）'),
    hlsUrl?: string(name='HlsUrl', description='hls播放地址'),
    introduction?: string(name='Introduction', description='直播简介'),
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
    playUrlInfoList?: [ 
      {
        codeLevel?: int32(name='CodeLevel', description='直播拉取分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
        flvUrl?: string(name='FlvUrl', description='flv拉流地址'),
        hlsUrl?: string(name='HlsUrl', description='hls拉流地址'),
        rtmpUrl?: string(name='RtmpUrl', description='rtmp拉流地址'),
      }
    ](name='PlayUrlInfoList', description='多分辨率多协议播放信息'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    roomId?: string(name='RoomId', description='房间id'),
    status?: string(name='Status', description='直播状态：Created-已创建，未开播，Living-直播中，End-直播结束'),
    title?: string(name='Title', description='直播标题'),
    userDefineField?: string(name='UserDefineField', description='用户自定义数据存储'),
    userId?: string(name='UserId', description='创建直播用户'),
  }(name='Result'),
}

model GetLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLiveResponseBody(name='body'),
}

async function getLiveWithOptions(request: GetLiveRequest, runtime: Util.RuntimeOptions): GetLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLive(request: GetLiveRequest): GetLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveWithOptions(request, runtime);
}

model GetLiveRecordRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播唯一标识，由调用CreateLiveRoom返回。'),
  userId?: string(name='UserId', description='操作人用户ID。'),
}

model GetLiveRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    playbackUrlMap?: map[string][ string ](name='PlaybackUrlMap'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetLiveRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLiveRecordResponseBody(name='body'),
}

async function getLiveRecordWithOptions(request: GetLiveRecordRequest, runtime: Util.RuntimeOptions): GetLiveRecordResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRecord',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveRecord(request: GetLiveRecordRequest): GetLiveRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRecordWithOptions(request, runtime);
}

model GetLiveRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
}

model GetLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID。'),
    anchorNick?: string(name='AnchorNick', description='主播昵称'),
    appId?: string(name='AppId', description='应用ID。'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='RTS转码流地址，推荐web端使用。'),
      artcUrl?: string(name='ArtcUrl', description='RTS原码流地址，推荐移动端使用。'),
    }(name='ArtcInfo', description='RTS低延迟播流信息。'),
    chatId?: string(name='ChatId', description='聊天ID。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    coverUrl?: string(name='CoverUrl', description='封面。'),
    createTime?: long(name='CreateTime', description='直播创建时间，单位：毫秒。'),
    enableLinkMic?: boolean(name='EnableLinkMic', description='是否开启连麦。'),
    endTime?: long(name='EndTime', description='直播结束时间，单位：毫秒。'),
    extension?: map[string]string(name='Extension', description='直播拓展字段。'),
    hlsUrl?: string(name='HlsUrl', description='原画HLS播放地址。'),
    hlsUrlHttps?: string(name='HlsUrlHttps', description='https协议的原画HLS播放地址。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    liveUrlHttps?: string(name='LiveUrlHttps', description='https协议的直播拉流地址。'),
    notice?: string(name='Notice', description='公告。'),
    onlineCount?: long(name='OnlineCount', description='在线用户数。'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址。'),
    playbackUrlHttps?: string(name='PlaybackUrlHttps', description='https协议的直播回放地址'),
    pluginInstanceInfoList?: [ 
      {
        createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='插件拓展字段。'),
        pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
        pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
      }
    ](name='PluginInstanceInfoList', description='活跃插件列表。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
    pv?: long(name='Pv', description='访问用户人次。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    rtmpUrl?: string(name='RtmpUrl', description='rtmp协议的播放地址'),
    startTime?: long(name='StartTime', description='直播开始时间，单位：毫秒。'),
    status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
    title?: string(name='Title', description='标题。'),
    uv?: long(name='Uv', description='访问用户数。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLiveRoomResponseBody(name='body'),
}

async function getLiveRoomWithOptions(request: GetLiveRoomRequest, runtime: Util.RuntimeOptions): GetLiveRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveRoom(request: GetLiveRoomRequest): GetLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRoomWithOptions(request, runtime);
}

model GetLiveRoomStatisticsRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
}

model GetLiveRoomStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    endTime?: long(name='EndTime', description='直播结束时间，单位：毫秒。'),
    likeCount?: long(name='LikeCount', description='点赞数。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    messageCount?: long(name='MessageCount', description='互动消息数。'),
    onlineCount?: long(name='OnlineCount', description='在线用户数。'),
    pv?: long(name='Pv', description='访问用户人次。'),
    startTime?: long(name='StartTime', description='直播开始时间，单位：毫秒。'),
    status?: int32(name='Status', description='直播状态，0-已创建 1-直播中 2-已关闭。'),
    uv?: long(name='Uv', description='访问用户数。'),
    watchLiveTime?: long(name='WatchLiveTime', description='总观看时长，单位：毫秒。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLiveRoomStatisticsResponseBody(name='body'),
}

async function getLiveRoomStatisticsWithOptions(request: GetLiveRoomStatisticsRequest, runtime: Util.RuntimeOptions): GetLiveRoomStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRoomStatistics',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveRoomStatistics(request: GetLiveRoomStatisticsRequest): GetLiveRoomStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRoomStatisticsWithOptions(request, runtime);
}

model GetLiveRoomUserStatisticsRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  pageNumber?: string(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: string(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
}

model GetLiveRoomUserStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    pageTotal?: int32(name='PageTotal', description='用户总页数。'),
    totalCount?: int32(name='TotalCount', description='用户总数'),
    userStatisticsList?: [ 
      {
        commentCount?: int32(name='CommentCount'),
        likeCount?: int32(name='LikeCount'),
        userId?: string(name='UserId', description='用户ID。'),
        watchLiveTime?: long(name='WatchLiveTime', description='观看时长，单位：毫秒。'),
      }
    ](name='UserStatisticsList', description='用户观看数据列表。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomUserStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLiveRoomUserStatisticsResponseBody(name='body'),
}

async function getLiveRoomUserStatisticsWithOptions(request: GetLiveRoomUserStatisticsRequest, runtime: Util.RuntimeOptions): GetLiveRoomUserStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLiveRoomUserStatistics',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLiveRoomUserStatistics(request: GetLiveRoomUserStatisticsRequest): GetLiveRoomUserStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveRoomUserStatisticsWithOptions(request, runtime);
}

model GetRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
}

model GetRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomInfo?: {
      adminIdList?: [ string ](name='AdminIdList', description='管理员ID列表。'),
      appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
      createTime?: long(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
      extension?: map[string]string(name='Extension', description='房间拓展字段。'),
      notice?: string(name='Notice', description='房间公告。'),
      onlineCount?: long(name='OnlineCount', description='在线用户数。'),
      pluginInstanceInfoList?: [ 
        {
          createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
          extension?: map[string]string(name='Extension', description='插件拓展字段。'),
          pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
          pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
        }
      ](name='PluginInstanceInfoList', description='活跃插件列表。'),
      pv?: long(name='Pv', description='访问用户人次。'),
      roomId?: string(name='RoomId', description='房间唯一标识。'),
      roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
      templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
      title?: string(name='Title', description='房间标题。'),
      uv?: long(name='Uv', description='访问用户数。'),
    }(name='RoomInfo', description='房间信息。'),
  }(name='Result', description='查询房间信息返回结果。'),
}

model GetRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRoomResponseBody(name='body'),
}

async function getRoomWithOptions(request: GetRoomRequest, runtime: Util.RuntimeOptions): GetRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRoom(request: GetRoomRequest): GetRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoomWithOptions(request, runtime);
}

model GetStandardRoomJumpUrlRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成'),
  appKey?: string(name='AppKey', description='终端设备类型,通过控制台创建和查询'),
  bizId?: string(name='BizId', description='资源ID：根据业务类型来定，比如直播ID，课堂ID等'),
  bizType?: string(name='BizType', description='业务类型：互动直播live，互动课堂class'),
  platform?: string(name='Platform', description='平台：win, mac, android, ios, web'),
  userId?: string(name='UserId', description='用户UserId,在AppId下单独唯一'),
  userNick?: string(name='UserNick', description='用户昵称'),
}

model GetStandardRoomJumpUrlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    standardRoomJumpUrl?: string(name='StandardRoomJumpUrl', description='样板间跳转协议地址'),
  }(name='Result'),
}

model GetStandardRoomJumpUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStandardRoomJumpUrlResponseBody(name='body'),
}

async function getStandardRoomJumpUrlWithOptions(request: GetStandardRoomJumpUrlRequest, runtime: Util.RuntimeOptions): GetStandardRoomJumpUrlResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.bizId)) {
    body['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.platform)) {
    body['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userNick)) {
    body['UserNick'] = request.userNick;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStandardRoomJumpUrl',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStandardRoomJumpUrl(request: GetStandardRoomJumpUrlRequest): GetStandardRoomJumpUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStandardRoomJumpUrlWithOptions(request, runtime);
}

model KickRoomUserRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  blockTime?: long(name='BlockTime'),
  kickUser?: string(name='KickUser', description='被踢出房间的用户ID。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。'),
  userId?: string(name='UserId', description='操作人的用户ID，用于表示谁执行了踢人操作。'),
}

model KickRoomUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model KickRoomUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KickRoomUserResponseBody(name='body'),
}

async function kickRoomUserWithOptions(request: KickRoomUserRequest, runtime: Util.RuntimeOptions): KickRoomUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.blockTime)) {
    body['BlockTime'] = request.blockTime;
  }
  if (!Util.isUnset(request.kickUser)) {
    body['KickUser'] = request.kickUser;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KickRoomUser',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function kickRoomUser(request: KickRoomUserRequest): KickRoomUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickRoomUserWithOptions(request, runtime);
}

model ListClassesRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
  status?: int32(name='Status', description='课程状态，0-未开课 1-上课中 2-已下课，不传则返回所有课程。'),
}

model ListClassesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    classList?: [ 
      {
        classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
        confId?: string(name='ConfId', description='连麦会议唯一标识。'),
        createNickname?: string(name='CreateNickname', description='创建人昵称。'),
        createUserId?: string(name='CreateUserId', description='创建人ID。'),
        endTime?: long(name='EndTime', description='下课时间戳，毫秒。'),
        liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
        roomId?: string(name='RoomId', description='房间ID'),
        startTime?: long(name='StartTime', description='开始上课时间戳，毫秒。'),
        status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
        title?: string(name='Title', description='课堂标题。'),
        whiteboardId?: string(name='WhiteboardId', description='白板ID'),
        whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
      }
    ](name='ClassList', description='课程列表信息。'),
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    pageTotal?: int32(name='PageTotal', description='课程总页数。'),
    totalCount?: int32(name='TotalCount', description='课程总数。'),
  }(name='Result', description='创建课程返回的结果。'),
}

model ListClassesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClassesResponseBody(name='body'),
}

async function listClassesWithOptions(request: ListClassesRequest, runtime: Util.RuntimeOptions): ListClassesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListClasses',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClasses(request: ListClassesRequest): ListClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClassesWithOptions(request, runtime);
}

model ListCommentsRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成。包含小写字母、数字，长度为6个字符。'),
  creatorId?: string(name='CreatorId', description='弹幕创建者ID。'),
  pageNum?: int32(name='PageNum', description='查询弹幕消息列表的分页页数。应该从1开始，每次分页拉取时递增。'),
  pageSize?: int32(name='PageSize', description='查询弹幕消息列表的分页大小。最小不得小于1，最大不得超过100。如果超过100，会被截断为前100条。'),
  roomId?: string(name='RoomId', description='房间的唯一标识，在调用CreateRoom时返回。'),
  sortType?: int32(name='SortType', description='查询弹幕消息列表的排序方式。取值仅限0和1，其中0表示按照弹幕消息创建时间递增的顺序拉取，1表示按照弹幕消息创建时间递减的时间拉取。'),
  userId?: string(name='UserId', description='操作人用户ID，表示谁执行了查询弹幕消息列表的操作。'),
}

model ListCommentsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    commentVOList?: [ 
      {
        appId?: string(name='AppId', description='应用ID。'),
        commentId?: string(name='CommentId', description='弹幕消息的唯一ID标识。'),
        content?: string(name='Content', description='弹幕消息的内容。'),
        createAt?: long(name='CreateAt', description='弹幕消息的创建时间，Unix时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='扩展字段。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        senderId?: string(name='SenderId', description='弹幕消息的发送者ID标识。'),
        senderNick?: string(name='SenderNick', description='弹幕消息发送者的昵称。'),
      }
    ](name='CommentVOList', description='弹幕消息列表。'),
    hasMore?: boolean(name='HasMore', description='是否还有下一页数据。true表示还有，false表示没有。'),
    pageTotal?: int32(name='PageTotal', description='分页查询弹幕消息列表的总页数。'),
    totalCount?: int32(name='TotalCount', description='弹幕消息的总数。'),
  }(name='Result', description='调用查询弹幕消息列表的返回结果。'),
}

model ListCommentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCommentsResponseBody(name='body'),
}

async function listCommentsWithOptions(request: ListCommentsRequest, runtime: Util.RuntimeOptions): ListCommentsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.sortType)) {
    body['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListComments',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listComments(request: ListCommentsRequest): ListCommentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCommentsWithOptions(request, runtime);
}

model ListConferenceUsersRequest {
  conferenceId?: string(name='ConferenceId', description='会议唯一标识符'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从第1页开始。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大显示个数为100。'),
}

model ListConferenceUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    conferenceUserList?: [ 
      {
        status?: string(name='Status', description='用户状态。'),
        userId?: string(name='UserId', description='用户ID。'),
      }
    ](name='ConferenceUserList', description='会议用户列表。'),
    hasMore?: boolean(name='HasMore', description='是否还有数据'),
    pageTotal?: int32(name='PageTotal', description='总页数'),
    totalCount?: int32(name='TotalCount', description='总条目数'),
  }(name='Result', description='返回结果'),
}

model ListConferenceUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConferenceUsersResponseBody(name='body'),
}

async function listConferenceUsersWithOptions(request: ListConferenceUsersRequest, runtime: Util.RuntimeOptions): ListConferenceUsersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListConferenceUsers',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConferenceUsers(request: ListConferenceUsersRequest): ListConferenceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConferenceUsersWithOptions(request, runtime);
}

model ListLiveRoomsRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
  status?: int32(name='Status', description='直播状态，0-在播 1-下播，不传则返回所有直播。'),
}

model ListLiveRoomsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    liveList?: [ 
      {
        anchorId?: string(name='AnchorId', description='主播ID。'),
        anchorNick?: string(name='AnchorNick', description='主播昵称。'),
        appId?: string(name='AppId', description='应用ID。'),
        chatId?: string(name='ChatId', description='聊天ID。'),
        coverUrl?: string(name='CoverUrl', description='封面。'),
        createTime?: long(name='CreateTime', description='直播的创建时间。单位为ms。'),
        endTime?: long(name='EndTime', description='直播的结束时间。单位为ms。'),
        extension?: map[string]string(name='Extension', description='直播拓展字段。'),
        liveId?: string(name='LiveId', description='直播ID。'),
        notice?: string(name='Notice', description='公告。'),
        onlineCount?: long(name='OnlineCount', description='在线用户数。'),
        pv?: long(name='Pv', description='访问用户人次。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        startTime?: long(name='StartTime', description='直播的开始时间。单位为ms。'),
        status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
        title?: string(name='Title', description='标题。'),
        uv?: long(name='Uv', description='访问用户数。'),
      }
    ](name='LiveList', description='直播列表信息。'),
    pageTotal?: int32(name='PageTotal', description='直播总页数。'),
    totalCount?: int32(name='TotalCount', description='直播总数。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model ListLiveRoomsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLiveRoomsResponseBody(name='body'),
}

async function listLiveRoomsWithOptions(request: ListLiveRoomsRequest, runtime: Util.RuntimeOptions): ListLiveRoomsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRooms',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLiveRooms(request: ListLiveRoomsRequest): ListLiveRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRoomsWithOptions(request, runtime);
}

model ListLiveRoomsByIdRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveIdList?: [ string ](name='LiveIdList', description='直播ID列表。'),
}

model ListLiveRoomsByIdShrinkRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveIdListShrink?: string(name='LiveIdList', description='直播ID列表。'),
}

model ListLiveRoomsByIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    liveList?: [ 
      {
        anchorId?: string(name='AnchorId', description='主播ID。'),
        anchorNick?: string(name='AnchorNick', description='主播昵称。'),
        appId?: string(name='AppId', description='应用ID。'),
        chatId?: string(name='ChatId', description='聊天ID。'),
        coverUrl?: string(name='CoverUrl', description='封面。'),
        createTime?: long(name='CreateTime', description='直播的创建时间。单位为ms。'),
        endTime?: long(name='EndTime', description='直播的结束时间。单位为ms。'),
        extension?: map[string]string(name='Extension', description='直播拓展字段。'),
        liveId?: string(name='LiveId', description='直播ID。'),
        notice?: string(name='Notice', description='公告。'),
        onlineCount?: long(name='OnlineCount', description='在线用户数。'),
        pv?: long(name='Pv', description='访问用户人次。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        startTime?: long(name='StartTime', description='直播的开始时间。单位为ms。'),
        status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
        title?: string(name='Title', description='标题。'),
        uv?: long(name='Uv', description='访问用户数。'),
      }
    ](name='LiveList', description='直播列表信息。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model ListLiveRoomsByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLiveRoomsByIdResponseBody(name='body'),
}

async function listLiveRoomsByIdWithOptions(tmpReq: ListLiveRoomsByIdRequest, runtime: Util.RuntimeOptions): ListLiveRoomsByIdResponse {
  Util.validateModel(tmpReq);
  var request = new ListLiveRoomsByIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.liveIdList)) {
    request.liveIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.liveIdList, 'LiveIdList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveIdListShrink)) {
    body['LiveIdList'] = request.liveIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListLiveRoomsById',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLiveRoomsById(request: ListLiveRoomsByIdRequest): ListLiveRoomsByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRoomsByIdWithOptions(request, runtime);
}

model ListRoomUsersRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36个字符。'),
}

model ListRoomUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页用户列表。'),
    pageTotal?: int32(name='PageTotal', description='该房间的用户总页数。'),
    roomUserList?: [ 
      {
        extension?: map[string]string(name='Extension', description='用户拓展字段。'),
        nick?: string(name='Nick', description='用户昵称。'),
        userId?: string(name='UserId', description='用户唯一标识。'),
      }
    ](name='RoomUserList', description='房间用户列表信息。'),
    totalCount?: int32(name='TotalCount', description='该房间的用户总数。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model ListRoomUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRoomUsersResponseBody(name='body'),
}

async function listRoomUsersWithOptions(request: ListRoomUsersRequest, runtime: Util.RuntimeOptions): ListRoomUsersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRoomUsers',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRoomUsers(request: ListRoomUsersRequest): ListRoomUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoomUsersWithOptions(request, runtime);
}

model ListRoomsRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
}

model ListRoomsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页房间列表。'),
    pageTotal?: int32(name='PageTotal', description='该应用的房间总页数。'),
    roomInfoList?: [ 
      {
        appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
        createTime?: string(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='房间拓展字段。'),
        notice?: string(name='Notice', description='房间公告。'),
        onlineCount?: long(name='OnlineCount', description='用户在线数。'),
        pluginInstanceInfoList?: [ 
          {
            createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
            extension?: map[string]string(name='Extension', description='插件拓展字段。'),
            pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
            pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
          }
        ](name='PluginInstanceInfoList', description='活跃插件列表。'),
        roomId?: string(name='RoomId', description='房间唯一标识。'),
        roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
        templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
        title?: string(name='Title', description='房间标题。'),
        uv?: long(name='Uv', description='用户访问数。'),
      }
    ](name='RoomInfoList', description='房间列表信息。'),
    totalCount?: int32(name='TotalCount', description='该应用的房间总数。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model ListRoomsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRoomsResponseBody(name='body'),
}

async function listRoomsWithOptions(request: ListRoomsRequest, runtime: Util.RuntimeOptions): ListRoomsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRooms',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRooms(request: ListRoomsRequest): ListRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoomsWithOptions(request, runtime);
}

model ListSensitiveWordRequest {
  appId?: string(name='AppId', description='弹幕发送者的用户ID，最大长度不超过32个字节。'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model ListSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    totalCount?: int32(name='TotalCount'),
    wordList?: [ string ](name='WordList'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model ListSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSensitiveWordResponseBody(name='body'),
}

async function listSensitiveWordWithOptions(request: ListSensitiveWordRequest, runtime: Util.RuntimeOptions): ListSensitiveWordResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNum)) {
    body['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSensitiveWord',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSensitiveWord(request: ListSensitiveWordRequest): ListSensitiveWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveWordWithOptions(request, runtime);
}

model PublishLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
  userId?: string(name='UserId', description='当前用户Id'),
}

model PublishLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID'),
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    status?: string(name='Status', description='直播状态：Created-已创建未开播，Living-直播中，End-直播结束'),
  }(name='Result'),
}

model PublishLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishLiveResponseBody(name='body'),
}

async function publishLiveWithOptions(request: PublishLiveRequest, runtime: Util.RuntimeOptions): PublishLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishLive(request: PublishLiveRequest): PublishLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishLiveWithOptions(request, runtime);
}

model PublishLiveRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model PublishLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model PublishLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishLiveRoomResponseBody(name='body'),
}

async function publishLiveRoomWithOptions(request: PublishLiveRoomRequest, runtime: Util.RuntimeOptions): PublishLiveRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishLiveRoom(request: PublishLiveRoomRequest): PublishLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishLiveRoomWithOptions(request, runtime);
}

model RemoveMemberRequest {
  conferenceId?: string(name='ConferenceId', description='会议唯一标识'),
  fromUserId?: string(name='FromUserId', description='邀请者用户ID'),
  toUserId?: string(name='ToUserId', description='被邀请用户ID'),
}

model RemoveMemberResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model RemoveMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveMemberResponseBody(name='body'),
}

async function removeMemberWithOptions(request: RemoveMemberRequest, runtime: Util.RuntimeOptions): RemoveMemberResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.conferenceId)) {
    body['ConferenceId'] = request.conferenceId;
  }
  if (!Util.isUnset(request.fromUserId)) {
    body['FromUserId'] = request.fromUserId;
  }
  if (!Util.isUnset(request.toUserId)) {
    body['ToUserId'] = request.toUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveMember',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeMember(request: RemoveMemberRequest): RemoveMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeMemberWithOptions(request, runtime);
}

model SendCommentRequest {
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  content?: string(name='Content', description='发送的文本内容。最大的长度不超过256个字节。'),
  extension?: map[string]string(name='Extension', description='扩展字段，服务端仅做透传。'),
  roomId?: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。'),
  senderId?: string(name='SenderId', description='弹幕发送者的用户ID，最大长度不超过32个字节。'),
  senderNick?: string(name='SenderNick', description='弹幕消息发送者的昵称。'),
}

model SendCommentShrinkRequest {
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  content?: string(name='Content', description='发送的文本内容。最大的长度不超过256个字节。'),
  extensionShrink?: string(name='Extension', description='扩展字段，服务端仅做透传。'),
  roomId?: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。'),
  senderId?: string(name='SenderId', description='弹幕发送者的用户ID，最大长度不超过32个字节。'),
  senderNick?: string(name='SenderNick', description='弹幕消息发送者的昵称。'),
}

model SendCommentResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    commentVO?: {
      commentId?: string(name='CommentId', description='弹幕的唯一ID。'),
      content?: string(name='Content', description='弹幕的内容。'),
      createAt?: long(name='CreateAt', description='弹幕的创建时间，Unix时间戳，单位：毫秒。'),
      extension?: map[string]string(name='Extension', description='扩展字段。'),
      senderId?: string(name='SenderId', description='弹幕的发送者ID标识。'),
      senderNick?: string(name='SenderNick', description='弹幕发送者的昵称。'),
    }(name='CommentVO', description='返回的弹幕数据模型。'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model SendCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCommentResponseBody(name='body'),
}

async function sendCommentWithOptions(tmpReq: SendCommentRequest, runtime: Util.RuntimeOptions): SendCommentResponse {
  Util.validateModel(tmpReq);
  var request = new SendCommentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extension)) {
    request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, 'Extension', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.extensionShrink)) {
    body['Extension'] = request.extensionShrink;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.senderId)) {
    body['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    body['SenderNick'] = request.senderNick;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendComment',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendComment(request: SendCommentRequest): SendCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendCommentWithOptions(request, runtime);
}

model SendCustomMessageToAllRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  body?: string(name='Body', description='消息体内容。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
}

model SendCustomMessageToAllResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='消息的唯一ID标识。由数字、大小写字母组成，长度不超过20。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model SendCustomMessageToAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCustomMessageToAllResponseBody(name='body'),
}

async function sendCustomMessageToAllWithOptions(request: SendCustomMessageToAllRequest, runtime: Util.RuntimeOptions): SendCustomMessageToAllResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.body)) {
    body['Body'] = request.body;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendCustomMessageToAll',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendCustomMessageToAll(request: SendCustomMessageToAllRequest): SendCustomMessageToAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendCustomMessageToAllWithOptions(request, runtime);
}

model SendCustomMessageToUsersRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  body?: string(name='Body', description='消息体内容。'),
  receiverList?: [ string ](name='ReceiverList', description='消息指定的接收人ID列表。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。'),
}

model SendCustomMessageToUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='消息的唯一ID标识。由数字、大小写字母组成，长度不超过20。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model SendCustomMessageToUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCustomMessageToUsersResponseBody(name='body'),
}

async function sendCustomMessageToUsersWithOptions(request: SendCustomMessageToUsersRequest, runtime: Util.RuntimeOptions): SendCustomMessageToUsersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.body)) {
    body['Body'] = request.body;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.receiverList)) {
    bodyFlat['ReceiverList'] = request.receiverList;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendCustomMessageToUsers',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendCustomMessageToUsers(request: SendCustomMessageToUsersRequest): SendCustomMessageToUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendCustomMessageToUsersWithOptions(request, runtime);
}

model SetUserAdminRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
  userId?: string(name='UserId', description='用户ID'),
}

model SetUserAdminResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SetUserAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserAdminResponseBody(name='body'),
}

async function setUserAdminWithOptions(request: SetUserAdminRequest, runtime: Util.RuntimeOptions): SetUserAdminResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetUserAdmin',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setUserAdmin(request: SetUserAdminRequest): SetUserAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserAdminWithOptions(request, runtime);
}

model StopClassRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课堂唯一标识。'),
  userId?: string(name='UserId', description='操作者用户ID。'),
}

model StopClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopClassResponseBody(name='body'),
}

async function stopClassWithOptions(request: StopClassRequest, runtime: Util.RuntimeOptions): StopClassResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopClass',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopClass(request: StopClassRequest): StopClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopClassWithOptions(request, runtime);
}

model StopLiveRequest {
  appId?: string(name='AppId', description='租户名'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36位'),
  userId?: string(name='UserId', description='创建直播用户ID'),
}

model StopLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopLiveResponseBody(name='body'),
}

async function stopLiveWithOptions(request: StopLiveRequest, runtime: Util.RuntimeOptions): StopLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopLive(request: StopLiveRequest): StopLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveWithOptions(request, runtime);
}

model StopLiveRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model StopLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopLiveRoomResponseBody(name='body'),
}

async function stopLiveRoomWithOptions(request: StopLiveRoomRequest, runtime: Util.RuntimeOptions): StopLiveRoomResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopLiveRoom(request: StopLiveRoomRequest): StopLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveRoomWithOptions(request, runtime);
}

model UpdateClassRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课堂唯一标识。'),
  createNickname?: string(name='CreateNickname', description='创建人用户昵称，1~32个字符。'),
  createUserId?: string(name='CreateUserId', description='创建人用户ID，仅支持中英文数字，下划线，中划线，1~36个字符。'),
  title?: string(name='Title', description='课堂标题，1~32个字符。'),
}

model UpdateClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClassResponseBody(name='body'),
}

async function updateClassWithOptions(request: UpdateClassRequest, runtime: Util.RuntimeOptions): UpdateClassResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.createNickname)) {
    body['CreateNickname'] = request.createNickname;
  }
  if (!Util.isUnset(request.createUserId)) {
    body['CreateUserId'] = request.createUserId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateClass',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateClass(request: UpdateClassRequest): UpdateClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClassWithOptions(request, runtime);
}

model UpdateLiveRequest {
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateLiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLiveResponseBody(name='body'),
}

async function updateLiveWithOptions(request: UpdateLiveRequest, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.introduction)) {
    body['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLive',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveWithOptions(request, runtime);
}

model UpdateLiveRoomRequest {
  anchorId?: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。'),
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。'),
  title?: string(name='Title', description='标题，支持中英文，最大长度32位。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model UpdateLiveRoomShrinkRequest {
  anchorId?: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。'),
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式'),
  extensionShrink?: string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  liveId?: string(name='LiveId', description='直播ID。'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。'),
  title?: string(name='Title', description='标题，支持中英文，最大长度32位。'),
  userId?: string(name='UserId', description='操作人ID。'),
}

model UpdateLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLiveRoomResponseBody(name='body'),
}

async function updateLiveRoomWithOptions(tmpReq: UpdateLiveRoomRequest, runtime: Util.RuntimeOptions): UpdateLiveRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLiveRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extension)) {
    request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, 'Extension', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.anchorId)) {
    body['AnchorId'] = request.anchorId;
  }
  if (!Util.isUnset(request.anchorNick)) {
    body['AnchorNick'] = request.anchorNick;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.coverUrl)) {
    body['CoverUrl'] = request.coverUrl;
  }
  if (!Util.isUnset(request.extensionShrink)) {
    body['Extension'] = request.extensionShrink;
  }
  if (!Util.isUnset(request.liveId)) {
    body['LiveId'] = request.liveId;
  }
  if (!Util.isUnset(request.notice)) {
    body['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLiveRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLiveRoom(request: UpdateLiveRoomRequest): UpdateLiveRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRoomWithOptions(request, runtime);
}

model UpdateRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomId?: string(name='RoomId', description='房间唯一标识。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
}

model UpdateRoomShrinkRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  extensionShrink?: string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomId?: string(name='RoomId', description='房间唯一标识。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
}

model UpdateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRoomResponseBody(name='body'),
}

async function updateRoomWithOptions(tmpReq: UpdateRoomRequest, runtime: Util.RuntimeOptions): UpdateRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extension)) {
    request.extensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extension, 'Extension', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.extensionShrink)) {
    body['Extension'] = request.extensionShrink;
  }
  if (!Util.isUnset(request.notice)) {
    body['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.roomId)) {
    body['RoomId'] = request.roomId;
  }
  if (!Util.isUnset(request.roomOwnerId)) {
    body['RoomOwnerId'] = request.roomOwnerId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRoom',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRoom(request: UpdateRoomRequest): UpdateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoomWithOptions(request, runtime);
}

model UpdateShareScreenLayoutRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
  enableOverlay?: boolean(name='EnableOverlay', description='是否开启叠加老师画面'),
  overlayHeight?: float(name='OverlayHeight', description='叠加画面高度，归一化为1'),
  overlayWidth?: float(name='OverlayWidth', description='叠加画面宽度，归一化为1'),
  overlayX?: float(name='OverlayX', description='叠加画面X坐标，归一化为1'),
  overlayY?: float(name='OverlayY', description='叠加画面Y坐标，归一化为1'),
}

model UpdateShareScreenLayoutResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateShareScreenLayoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateShareScreenLayoutResponseBody(name='body'),
}

async function updateShareScreenLayoutWithOptions(request: UpdateShareScreenLayoutRequest, runtime: Util.RuntimeOptions): UpdateShareScreenLayoutResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.enableOverlay)) {
    body['EnableOverlay'] = request.enableOverlay;
  }
  if (!Util.isUnset(request.overlayHeight)) {
    body['OverlayHeight'] = request.overlayHeight;
  }
  if (!Util.isUnset(request.overlayWidth)) {
    body['OverlayWidth'] = request.overlayWidth;
  }
  if (!Util.isUnset(request.overlayX)) {
    body['OverlayX'] = request.overlayX;
  }
  if (!Util.isUnset(request.overlayY)) {
    body['OverlayY'] = request.overlayY;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateShareScreenLayout',
    version = '2021-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateShareScreenLayout(request: UpdateShareScreenLayoutRequest): UpdateShareScreenLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateShareScreenLayoutWithOptions(request, runtime);
}

