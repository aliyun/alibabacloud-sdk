/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('imp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateLiveRequest {
  appId?: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36个字符，传空值，则随机生成一个房间ID。'),
  userId?: string(name='UserId', description='创建直播用户。'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID，缺省时系统自动生成36位随机uuid字符串。'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位。'),
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位。'),
  anchorId?: string(name='AnchorId', description='主播ID，支持中英文，最大长度128位，缺省时主播为当前创建直播用户。'),
  codeLevel?: int32(name='CodeLevel', description='直播推流码率，缺省时默认为3。取值：  -1：流畅lld。 1：标清lsd。 2：高清lhd。 3：超清lud。'),
}

model CreateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
  }(name='Result'),
}

model CreateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveResponseBody(name='body'),
}

async function createLiveWithOptions(request: CreateLiveRequest, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveWithOptions(request, runtime);
}

model DeleteAppRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApp', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model UpdateRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
}

model UpdateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoomResponseBody(name='body'),
}

async function updateRoomWithOptions(request: UpdateRoomRequest, runtime: Util.RuntimeOptions): UpdateRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRoom', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRoom(request: UpdateRoomRequest): UpdateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoomWithOptions(request, runtime);
}

model GetAppTemplateRequest {
  appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
}

model GetAppTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appTemplateName?: string(name='AppTemplateName', description='应用模板名称'),
    appTemplateCreator?: string(name='AppTemplateCreator', description='应用模板创建者'),
    status?: string(name='Status', description='应用模板使用状态'),
    componentList?: [ string ](name='ComponentList', description='组件列表'),
    createTime?: string(name='CreateTime', description='创建时间'),
    sdkInfo?: string(name='SdkInfo'),
    configList?: [ 
      {
        key?: string(name='Key', description='配置项'),
        value?: string(name='Value', description='配置项内容'),
      }
    ](name='ConfigList', description='配置列表'),
  }(name='Result', description='返回结果'),
}

model GetAppTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppTemplateResponseBody(name='body'),
}

async function getAppTemplateWithOptions(request: GetAppTemplateRequest, runtime: Util.RuntimeOptions): GetAppTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAppTemplate', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAppTemplate(request: GetAppTemplateRequest): GetAppTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppTemplateWithOptions(request, runtime);
}

model GetRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
}

model GetRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomInfo?: {
      roomId?: string(name='RoomId', description='房间唯一标识。'),
      title?: string(name='Title', description='房间标题。'),
      createTime?: long(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
      notice?: string(name='Notice', description='房间公告。'),
      roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
      uv?: long(name='Uv', description='访问用户数。'),
      onlineCount?: long(name='OnlineCount', description='在线用户数。'),
      pluginInstanceInfoList?: [ 
        {
          pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
          pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
          createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
          extension?: map[string]string(name='Extension', description='插件拓展字段。'),
        }
      ](name='PluginInstanceInfoList', description='活跃插件列表。'),
      appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
      templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
      extension?: map[string]string(name='Extension', description='房间拓展字段。'),
    }(name='RoomInfo', description='房间信息。'),
  }(name='Result', description='查询房间信息返回结果。'),
}

model GetRoomResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoomResponseBody(name='body'),
}

async function getRoomWithOptions(request: GetRoomRequest, runtime: Util.RuntimeOptions): GetRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRoom', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRoom(request: GetRoomRequest): GetRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoomWithOptions(request, runtime);
}

model CreateAppTemplateRequest {
  appTemplateName?: string(name='AppTemplateName', description='应用模板名称'),
  componentList?: [ string ](name='ComponentList', description='组件列表'),
}

model CreateAppTemplateShrinkRequest {
  appTemplateName?: string(name='AppTemplateName', description='应用模板名称'),
  componentListShrink?: string(name='ComponentList', description='组件列表'),
}

model CreateAppTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标示'),
  }(name='Result', description='返回结果'),
}

model CreateAppTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppTemplateResponseBody(name='body'),
}

async function createAppTemplateWithOptions(tmpReq: CreateAppTemplateRequest, runtime: Util.RuntimeOptions): CreateAppTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.componentList)) {
    request.componentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.componentList, 'ComponentList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAppTemplate', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAppTemplate(request: CreateAppTemplateRequest): CreateAppTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppTemplateWithOptions(request, runtime);
}

model ListAppsRequest {
  pageNumber?: int32(name='PageNumber', description='查询页码，参数为空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，参数为空默认显示个数为10。'),
}

model ListAppsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    totalCount?: int32(name='TotalCount', description='总条目数'),
    pageTotal?: int32(name='PageTotal', description='总页数'),
    appInfoList?: [ 
      {
        appId?: string(name='AppId', description='应用唯一标识符'),
        appName?: string(name='AppName', description='应用名称'),
        appTemplateId?: string(name='AppTemplateId', description='模板唯一标识'),
        appTemplateName?: string(name='AppTemplateName', description='模板名称'),
        appKey?: string(name='AppKey', description='应用Key'),
        appStatus?: string(name='AppStatus', description='应用状态'),
        createTime?: string(name='CreateTime', description='应用创建时间'),
        componentList?: [ string ](name='ComponentList', description='应用组件列表'),
      }
    ](name='AppInfoList', description='App信息列表'),
  }(name='Result', description='返回结果体'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApps', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model ListRoomsRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。'),
}

model ListRoomsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    totalCount?: int32(name='TotalCount', description='该应用的房间总数。'),
    pageTotal?: int32(name='PageTotal', description='该应用的房间总页数。'),
    hasMore?: boolean(name='HasMore', description='是否还有下一页房间列表。'),
    roomInfoList?: [ 
      {
        roomId?: string(name='RoomId', description='房间唯一标识。'),
        title?: string(name='Title', description='房间标题。'),
        roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
        notice?: string(name='Notice', description='房间公告。'),
        uv?: long(name='Uv', description='用户访问数。'),
        onlineCount?: long(name='OnlineCount', description='用户在线数。'),
        pluginInstanceInfoList?: [ 
          {
            pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
            pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
            createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
            extension?: map[string]string(name='Extension', description='插件拓展字段。'),
          }
        ](name='PluginInstanceInfoList', description='活跃插件列表。'),
        createTime?: string(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
        appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
        templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
        extension?: map[string]string(name='Extension', description='房间拓展字段。'),
      }
    ](name='RoomInfoList', description='房间列表信息。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model ListRoomsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRoomsResponseBody(name='body'),
}

async function listRoomsWithOptions(request: ListRoomsRequest, runtime: Util.RuntimeOptions): ListRoomsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRooms', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRooms(request: ListRoomsRequest): ListRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoomsWithOptions(request, runtime);
}

model DeleteAppTemplateRequest {
  appTemplateId?: string(name='AppTemplateId', description='模板唯一标识'),
}

model DeleteAppTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteAppTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppTemplateResponseBody(name='body'),
}

async function deleteAppTemplateWithOptions(request: DeleteAppTemplateRequest, runtime: Util.RuntimeOptions): DeleteAppTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAppTemplate', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAppTemplate(request: DeleteAppTemplateRequest): DeleteAppTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppTemplateWithOptions(request, runtime);
}

model ListAppTemplatesRequest {
  pageNumber?: string(name='PageNumber', description='查询页码，参数为空默认查询第1页。'),
  pageSize?: string(name='PageSize', description='每页显示个数，参数为空默认显示个数为10。'),
}

model ListAppTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    totalCount?: int32(name='TotalCount', description='总条目数'),
    pageTotal?: int32(name='PageTotal', description='总页数'),
    appTemplateInfoList?: [ 
      {
        appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
        appTemplateName?: string(name='AppTemplateName', description='应用模板名称'),
        appTemplateCreator?: string(name='AppTemplateCreator', description='应用模板创建者'),
        status?: string(name='Status', description='应用模板使用状态'),
        componentList?: [ string ](name='ComponentList', description='组件列表'),
        createTime?: string(name='CreateTime', description='创建时间'),
        sdkInfo?: string(name='SdkInfo', description='SDK信息'),
        configList?: [ 
          {
            key?: string(name='Key', description='配置项'),
            value?: string(name='Value', description='配置项内容'),
          }
        ](name='ConfigList', description='配置列表'),
      }
    ](name='AppTemplateInfoList', description='应用模板信息列表'),
  }(name='Result', description='返回结果'),
}

model ListAppTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppTemplatesResponseBody(name='body'),
}

async function listAppTemplatesWithOptions(request: ListAppTemplatesRequest, runtime: Util.RuntimeOptions): ListAppTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAppTemplates', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAppTemplates(request: ListAppTemplatesRequest): ListAppTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppTemplatesWithOptions(request, runtime);
}

model ListComponentsRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
  appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
}

model ListComponentsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    componentCategory?: [ 
      {
        type?: string(name='Type', description='组件类别'),
        list?: [ 
          {
            componentType?: string(name='ComponentType', description='组件类型'),
            componentName?: string(name='ComponentName', description='组件名称'),
            inUse?: string(name='InUse', description='是否使用'),
          }
        ](name='List', description='类别下的组件列表'),
      }
    ](name='ComponentCategory', description='组件信息'),
    configGroup?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
        category?: string(name='Category'),
      }
    ](name='ConfigGroup', description='配置信息'),
  }(name='Result', description='返回结果体'),
}

model ListComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListComponentsResponseBody(name='body'),
}

async function listComponentsWithOptions(request: ListComponentsRequest, runtime: Util.RuntimeOptions): ListComponentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListComponents', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listComponents(request: ListComponentsRequest): ListComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listComponentsWithOptions(request, runtime);
}

model UpdateLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位'),
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveResponseBody(name='body'),
}

async function updateLiveWithOptions(request: UpdateLiveRequest, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveWithOptions(request, runtime);
}

model UpdateAppTemplateConfigRequest {
  appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
  configList?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ConfigList', description='更新配置'),
}

model UpdateAppTemplateConfigShrinkRequest {
  appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
  configListShrink?: string(name='ConfigList', description='更新配置'),
}

model UpdateAppTemplateConfigResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateAppTemplateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppTemplateConfigResponseBody(name='body'),
}

async function updateAppTemplateConfigWithOptions(tmpReq: UpdateAppTemplateConfigRequest, runtime: Util.RuntimeOptions): UpdateAppTemplateConfigResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAppTemplateConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configList)) {
    request.configListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configList, 'ConfigList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppTemplateConfig', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppTemplateConfig(request: UpdateAppTemplateConfigRequest): UpdateAppTemplateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppTemplateConfigWithOptions(request, runtime);
}

model StopLiveRequest {
  appId?: string(name='AppId', description='租户名'),
  roomId?: string(name='RoomId', description='房间ID，最大长度36位'),
  userId?: string(name='UserId', description='创建直播用户ID'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
}

model StopLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopLiveResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveResponseBody(name='body'),
}

async function stopLiveWithOptions(request: StopLiveRequest, runtime: Util.RuntimeOptions): StopLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopLive(request: StopLiveRequest): StopLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveWithOptions(request, runtime);
}

model GetAppRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
}

model GetAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appName?: string(name='AppName', description='应用名称'),
    appTemplateId?: string(name='AppTemplateId', description='模板唯一标识'),
    appTemplateName?: string(name='AppTemplateName', description='模板名称'),
    appStatus?: string(name='AppStatus', description='应用状态'),
    appKey?: string(name='AppKey', description='应用Key'),
    createTime?: string(name='CreateTime', description='创建时间'),
    componentList?: [ string ](name='ComponentList', description='组件列表。'),
  }(name='Result', description='返回结果'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppResponseBody(name='body'),
}

async function getAppWithOptions(request: GetAppRequest, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApp', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppWithOptions(request, runtime);
}

model DeleteLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteLiveResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveResponseBody(name='body'),
}

async function deleteLiveWithOptions(request: DeleteLiveRequest, runtime: Util.RuntimeOptions): DeleteLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveWithOptions(request, runtime);
}

model GetLiveDomainStatusRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
  liveDomainList?: [ string ](name='LiveDomainList', description='直播域名列表'),
}

model GetLiveDomainStatusShrinkRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
  liveDomainListShrink?: string(name='LiveDomainList', description='直播域名列表'),
}

model GetLiveDomainStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    liveDomainInfoList?: [ 
      {
        domain?: string(name='Domain', description='直播域名'),
        cname?: string(name='Cname', description='直播域名CNAME'),
        status?: string(name='Status', description='直播域名状态'),
      }
    ](name='LiveDomainInfoList', description='直播域名信息列表'),
  }(name='Result', description='返回结果'),
}

model GetLiveDomainStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveDomainStatusResponseBody(name='body'),
}

async function getLiveDomainStatusWithOptions(tmpReq: GetLiveDomainStatusRequest, runtime: Util.RuntimeOptions): GetLiveDomainStatusResponse {
  Util.validateModel(tmpReq);
  var request = new GetLiveDomainStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.liveDomainList)) {
    request.liveDomainListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.liveDomainList, 'LiveDomainList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLiveDomainStatus', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLiveDomainStatus(request: GetLiveDomainStatusRequest): GetLiveDomainStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveDomainStatusWithOptions(request, runtime);
}

model GetAuthTokenRequest {
  appId?: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成'),
  userId?: string(name='UserId', description='用户UserId,在AppId下单独唯一'),
  appKey?: string(name='AppKey', description='终端设备类型,通过控制台创建和查询'),
  deviceId?: string(name='DeviceId', description='终端设备ID'),
}

model GetAuthTokenResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    accessToken?: string(name='AccessToken', description='用于长链接建连的token'),
    refreshToken?: string(name='RefreshToken', description='更新Token，若AccessToken过期，则可以使用RefreshToken再次获取新Token'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', description='登录token过期时间(毫秒)'),
  }(name='Result'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: Util.RuntimeOptions): GetAuthTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthToken', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthTokenWithOptions(request, runtime);
}

model UpdateAppTemplateRequest {
  appTemplateId?: string(name='AppTemplateId', description='应用模板唯一标识'),
  appTemplateName?: string(name='AppTemplateName', description='应用模板名称'),
}

model UpdateAppTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateAppTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppTemplateResponseBody(name='body'),
}

async function updateAppTemplateWithOptions(request: UpdateAppTemplateRequest, runtime: Util.RuntimeOptions): UpdateAppTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppTemplate', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppTemplate(request: UpdateAppTemplateRequest): UpdateAppTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppTemplateWithOptions(request, runtime);
}

model GetImpProductStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: boolean(name='Result', description='开通状态'),
}

model GetImpProductStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetImpProductStatusResponseBody(name='body'),
}

async function getImpProductStatusWithOptions(runtime: Util.RuntimeOptions): GetImpProductStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetImpProductStatus', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImpProductStatus(): GetImpProductStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImpProductStatusWithOptions(runtime);
}

model PublishLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
  userId?: string(name='UserId', description='当前用户Id'),
}

model PublishLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    anchorId?: string(name='AnchorId', description='主播ID'),
    status?: string(name='Status', description='直播状态：Created-已创建未开播，Living-直播中，End-直播结束'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
  }(name='Result'),
}

model PublishLiveResponse = {
  headers: map[string]string(name='headers'),
  body: PublishLiveResponseBody(name='body'),
}

async function publishLiveWithOptions(request: PublishLiveRequest, runtime: Util.RuntimeOptions): PublishLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishLive(request: PublishLiveRequest): PublishLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishLiveWithOptions(request, runtime);
}

model GetLiveRequest {
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
}

model GetLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID'),
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    title?: string(name='Title', description='直播标题'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址'),
    createTime?: long(name='CreateTime', description='直播创建时间（毫秒ms）'),
    endTime?: long(name='EndTime', description='直播结束时间（毫秒ms）'),
    duration?: long(name='Duration', description='直播持续时间（毫秒ms）'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
    status?: string(name='Status', description='直播状态：Created-已创建，未开播，Living-直播中，End-直播结束'),
    introduction?: string(name='Introduction', description='直播简介'),
    roomId?: string(name='RoomId', description='房间id'),
    appId?: string(name='AppId', description='租户名'),
    userId?: string(name='UserId', description='创建直播用户'),
    codeLevel?: int32(name='CodeLevel', description='直播推送分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
    playUrlInfoList?: [ 
      {
        codeLevel?: int32(name='CodeLevel', description='直播拉取分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
        flvUrl?: string(name='FlvUrl', description='flv拉流地址'),
        hlsUrl?: string(name='HlsUrl', description='hls拉流地址'),
        rtmpUrl?: string(name='RtmpUrl', description='rtmp拉流地址'),
      }
    ](name='PlayUrlInfoList', description='多分辨率多协议播放信息'),
  }(name='Result'),
}

model GetLiveResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveResponseBody(name='body'),
}

async function getLiveWithOptions(request: GetLiveRequest, runtime: Util.RuntimeOptions): GetLiveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLive', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLive(request: GetLiveRequest): GetLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLiveWithOptions(request, runtime);
}

model DeleteRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。'),
}

model DeleteRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoomResponseBody(name='body'),
}

async function deleteRoomWithOptions(request: DeleteRoomRequest, runtime: Util.RuntimeOptions): DeleteRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRoom', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoomWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName', description='应用名称'),
  appTemplateId?: string(name='AppTemplateId', description='模板ID'),
}

model CreateAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appId?: string(name='AppId', description='应用唯一标示'),
  }(name='Result', description='返回结果'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApp', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateRoomRequest {
  appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
  templateId?: string(name='TemplateId', description='房间模板唯一标识，当前支持的取值：default，传空默认为default。'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。'),
}

model CreateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomId?: string(name='RoomId', description='房间id'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoomWithOptions(request: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRoom', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model UpdateAppRequest {
  appId?: string(name='AppId', description='应用唯一标识'),
  appName?: string(name='AppName', description='应用名称'),
  appStatus?: string(name='AppStatus', description='应用状态'),
}

model UpdateAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppResponseBody(name='body'),
}

async function updateAppWithOptions(request: UpdateAppRequest, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateApp', '2021-06-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppWithOptions(request, runtime);
}

