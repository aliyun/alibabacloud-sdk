/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imp';
  @version = '2021-06-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AppsDomain {
  domain?: string(name='Domain', description='域名'),
}

model AppsInteractiveVideoSettings {
  domain?: AppsDomain(name='Domain'),
  severity?: AppsSecurity(name='Severity'),
  transcoding?: AppsTranscoding(name='Transcoding'),
  type?: AppsInteractiveVideoType(name='Type'),
}

enum AppsInteractiveVideoType: string {
  VIDEO(value='Video', description='VIDEO'),
  AUDIO(value='Audio', description='AUDIO'),
  IMAGE(value='Image', description='IMAGE'),
}

model AppsSecurity {
  playUrlTtl?: int32(name='PlayUrlTtl'),
}

model AppsSettings {
  appId?: string(name='AppId', description='AppId'),
  cloudUid?: string(name='CloudUid', description='云帐号Id'),
  customer?: CommonCustomer(name='Customer', description='客户非敏感信息'),
  interactiveVideoSettings?: AppsInteractiveVideoSettings(name='InteractiveVideoSettings', description='互动视频配置'),
}

model AppsTranscoding {
  flowId?: string(name='FlowId'),
  type?: string(name='Type'),
}

model AssetsAuditAssetRequest {
  appId?: string(name='AppId', description='AppId'),
  auditStatus?: CommonAuditStatus(name='AuditStatus', description='审核状态'),
  id?: string(name='Id', description='AssetId'),
}

model AssetsAuditAssetResponse {
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsCreateAssetRequest {
  asset?: CommonSimpleAsset(name='Asset', description='Asset请求Item'),
}

model AssetsCreateAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsDeleteAssetRequest {
  asset?: CommonAsset(name='Asset', description='Asset'),
}

model AssetsDeleteAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsGetAssetRequest {
  id?: string(name='Id', description='AssetId'),
}

model AssetsGetAssetResponse {
  asset?: CommonAsset(name='Asset', description='Asset'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsListAssetsRequest {
  appId?: string(name='AppId', description='AppId'),
  fieldMask?: string(name='FieldMask', description='Optional. Used to specify a subset of fields that should be
returned by a get operation or modified by an update operation.'),
  maxResults?: int32(name='MaxResults', description='每页显示个数，最大支持20，参数为空默认显示个数为10。'),
  nextToken?: string(name='NextToken', description='分页Token Optional.'),
  params?: string(name='Params', description='参数'),
  topic?: string(name='Topic', description='订阅Topic'),
}

model AssetsListAssetsResponse {
  assets?: [
    CommonAsset
  ](name='Assets', description='Asset列表'),
  nextToken?: string(name='NextToken', description='分页Token'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model AssetsUpdateAssetRequest {
  asset?: CommonAsset(name='Asset', description='Asset'),
}

model AssetsUpdateAssetResponse {
  asset?: CommonAsset(name='Asset', description='资产信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  status?: RpcStatus(name='Status', description='响应状态'),
}

model CommonAddress {
  address?: string(name='Address', description='地址'),
  city?: string(name='City', description='城市'),
  country?: string(name='Country', description='国家'),
  state?: string(name='State', description='区域'),
  zip?: string(name='Zip', description='zip'),
}

model CommonAsset {
  address?: CommonAddress(name='Address', description='行政区域地址'),
  appId?: string(name='AppId', description='应用ID'),
  auditStatus?: CommonAuditStatus(name='AuditStatus', description='审核状态'),
  author?: string(name='Author', description='作者'),
  createdAt?: string(name='CreatedAt', description='创建时间'),
  description?: string(name='Description', description='资产描述'),
  extends?: map[string]any(name='Extends', description='扩展字段'),
  id?: string(name='Id', description='资产ID'),
  images?: [
    CommonMediaResource
  ](name='Images', description='图像资源'),
  labels?: map[string]any(name='Labels', description='定义Label， eg:type:advertise 支持广告类型的label'),
  location?: TypeLatLng(name='Location', description='经纬度地理位置'),
  source?: CommonAssetSource(name='Source', description='资产来源'),
  status?: CommonAssetStatus(name='Status', description='资产状态'),
  synopsis?: string(name='Synopsis', description='概要'),
  tags?: [ string ](name='Tags', description='标签'),
  title?: string(name='Title', description='标题'),
  updatedAt?: string(name='UpdatedAt', description='更新时间'),
  videos?: [
    CommonMediaResource
  ](name='Videos', description='视频资源'),
}

enum CommonAssetSource: string {
  PGC(value='PGC', description='PGC'),
  UGC(value='UGC', description='UGC'),
  OGC(value='OGC', description='OGC'),
  PUGC(value='PUGC', description='PUGC'),
  MGC(value='MGC', description='MGC'),
  MCN(value='MCN', description='MCN'),
}

enum CommonAssetStatus: string {
  BLANK(value='Blank', description='BLANK'),
  NORMAL(value='Normal', description='NORMAL'),
  ABNORMAL(value='Abnormal', description='ABNORMAL'),
  TRANSCODING(value='Transcoding', description='TRANSCODING'),
  AUDITING(value='Auditing', description='AUDITING'),
}

enum CommonAuditStatus: string {
  UNPUBLISH(value='Unpublish', description='UNPUBLISH'),
  PUBLICH(value='Publich', description='PUBLICH'),
}

model CommonCustomer {
  cloudUid?: string(name='CloudUid', description='云帐号Id'),
}

model CommonMediaResource {
  format?: string(name='Format', description='media format'),
  id?: string(name='Id', description='media id'),
  name?: string(name='Name', description='name'),
  sha1?: string(name='Sha1', description='media sha1'),
  size?: long(name='Size', description='media size'),
  url?: string(name='Url', description='resource url'),
}

model CommonSTS {
  accessKeyId?: string(name='AccessKeyId', description='AccessKey ID 标识用户'),
  accessKeySecret?: string(name='AccessKeySecret', description='AccessKey Secret 验证用户的密钥'),
  securityToken?: string(name='SecurityToken', description='临时token'),
}

model CommonSimpleAsset {
  address?: CommonAddress(name='Address', description='行政区域地址'),
  appId?: string(name='AppId', description='应用ID'),
  auditStatus?: CommonAuditStatus(name='AuditStatus', description='审核状态'),
  author?: string(name='Author', description='作者'),
  description?: string(name='Description', description='资产描述'),
  extends?: map[string]any(name='Extends', description='扩展字段'),
  id?: string(name='Id', description='资产ID'),
  image?: CommonMediaResource(name='Image', description='图像资源'),
  labels?: map[string]any(name='Labels', description='定义Label， eg:type:advertise 支持广告类型的label'),
  location?: TypeLatLng(name='Location', description='经纬度地理位置'),
  source?: CommonAssetSource(name='Source', description='资产来源'),
  status?: CommonAssetStatus(name='Status', description='资产状态'),
  synopsis?: string(name='Synopsis', description='概要'),
  tags?: [ string ](name='Tags', description='标签'),
  title?: string(name='Title', description='标题'),
  video?: CommonMediaResource(name='Video', description='视频资源'),
}

model CommonStorage {
  bucket?: string(name='Bucket', description='OSS bucket'),
  object?: string(name='Object', description='OSS object path'),
  region?: string(name='Region', description='阿里云Region，比如 cn-shanghai'),
  signUrl?: string(name='SignUrl', description='OSS的签名URL'),
  sts?: CommonSTS(name='Sts', description='Security Token Service'),
}

model RpcStatus {
  code?: int32(name='Code', description='错误码'),
  detail?: string(name='Detail', description='错误详情'),
  message?: string(name='Message', description='错误消息'),
}

model TypeLatLng {
  latitude?: double(name='Latitude', description='The latitude in degrees. It must be in the range [-90.0, +90.0].'),
  longitude?: double(name='Longitude', description='The longitude in degrees. It must be in the range [-180.0, +180.0].'),
}

model V1MediaSecurityStorageRequest {
  appId?: string(name='AppId'),
  appSettings?: AppsSettings(name='AppSettings'),
  assetId?: string(name='AssetId'),
  customer?: CommonCustomer(name='Customer'),
  image?: CommonMediaResource(name='Image'),
  imageStorage?: CommonStorage(name='ImageStorage'),
  video?: CommonMediaResource(name='Video'),
  videoStorage?: CommonStorage(name='VideoStorage'),
}

model V1MediaSecurityStorageResponse {
  assetId?: string(name='AssetId'),
  image?: CommonMediaResource(name='Image'),
  imageStorage?: CommonStorage(name='ImageStorage'),
  mediaId?: string(name='MediaId'),
  video?: CommonMediaResource(name='Video'),
  videoStorage?: CommonStorage(name='VideoStorage'),
}

model BanAllCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='用户在房间内的唯一标识', position='Body'),
}

model BanAllCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model BanAllCommentResponse = {
  headers: map[string]string(name='headers'),
  body: BanAllCommentResponseBody(name='body'),
}

async function banAllComment(request: BanAllCommentRequest): BanAllCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BanAllComment', 'POST', '/', 'json', true, 'form', request);
}

model BanCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  banCommentTime?: long(name='BanCommentTime', description='禁言时长（秒）', position='Body'),
  banCommentUser: string(name='BanCommentUser', description='被禁言的用户在房间内的唯一标识', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='用户在房间内的唯一标识', position='Body'),
}

model BanCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作是否成功'),
}

model BanCommentResponse = {
  headers: map[string]string(name='headers'),
  body: BanCommentResponseBody(name='body'),
}

async function banComment(request: BanCommentRequest): BanCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BanComment', 'POST', '/', 'json', true, 'form', request);
}

model CancelBanAllCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='用户在房间内的唯一标识', position='Body'),
}

model CancelBanAllCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model CancelBanAllCommentResponse = {
  headers: map[string]string(name='headers'),
  body: CancelBanAllCommentResponseBody(name='body'),
}

async function cancelBanAllComment(request: CancelBanAllCommentRequest): CancelBanAllCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelBanAllComment', 'POST', '/', 'json', true, 'form', request);
}

model CancelBanCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  banCommentUser: string(name='BanCommentUser', description='取消禁言的用户唯一标识', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='用户在房间内的唯一标识', position='Body'),
}

model CancelBanCommentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: boolean(name='Result', description='操作成功标识'),
}

model CancelBanCommentResponse = {
  headers: map[string]string(name='headers'),
  body: CancelBanCommentResponseBody(name='body'),
}

async function cancelBanComment(request: CancelBanCommentRequest): CancelBanCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelBanComment', 'POST', '/', 'json', true, 'form', request);
}

model CancelUserAdminRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。', position='Body'),
  userId: string(name='UserId', description='用户ID', position='Body'),
}

model CancelUserAdminResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelUserAdminResponse = {
  headers: map[string]string(name='headers'),
  body: CancelUserAdminResponseBody(name='body'),
}

async function cancelUserAdmin(request: CancelUserAdminRequest): CancelUserAdminResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelUserAdmin', 'POST', '/', 'json', true, 'form', request);
}

model CreateClassRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  createNickname: string(name='CreateNickname', description='创建人用户昵称。', position='Body'),
  createUserId: string(name='CreateUserId', description='创建人用户ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  title: string(name='Title', description='课堂标题', position='Body'),
}

model CreateClassResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    classId?: string(name='ClassId', description='课堂唯一标识。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    createNickname?: string(name='CreateNickname', description='创建人昵称。'),
    createUserId?: string(name='CreateUserId', description='创建人ID。'),
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
    roomId?: string(name='RoomId', description='房间ID'),
    status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
    title?: string(name='Title', description='课堂标题。'),
    whiteboardId?: string(name='WhiteboardId', description='白板ID'),
    whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model CreateClassResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClassResponseBody(name='body'),
}

async function createClass(request: CreateClassRequest): CreateClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClass', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveRequest {
  anchorId?: string(name='AnchorId', description='主播ID，支持中英文，最大长度128位，缺省时主播为当前创建直播用户。', position='Body'),
  appId: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。', position='Body'),
  codeLevel?: int32(name='CodeLevel', description='直播推流码率，缺省时默认为3。取值：  -1：流畅lld。 1：标清lsd。 2：高清lhd。 3：超清lud。', position='Body'),
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位。', position='Body'),
  liveId?: string(name='LiveId', description='直播资源的唯一标识ID，缺省时系统自动生成36位随机uuid字符串。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间ID，最大长度36个字符，传空值，则随机生成一个房间ID。', position='Body'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位。', position='Body'),
  userId: string(name='UserId', description='创建直播用户。', position='Body'),
}

model CreateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
  }(name='Result'),
}

model CreateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveResponseBody(name='body'),
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLive', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveRecordSliceFileRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  endTime: long(name='EndTime', description='片段结束时间，时间戳。', position='Body'),
  fileName: string(name='FileName', description='自定义文件名称。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: long(name='StartTime', description='片段开始时间，时间戳。', position='Body'),
}

model CreateLiveRecordSliceFileResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    sliceRecordUrl?: string(name='SliceRecordUrl', description='片段录制文件的地址。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model CreateLiveRecordSliceFileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRecordSliceFileResponseBody(name='body'),
}

async function createLiveRecordSliceFile(request: CreateLiveRecordSliceFileRequest): CreateLiveRecordSliceFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRecordSliceFile', 'POST', '/', 'json', true, 'form', request);
}

model CreateLiveRoomRequest {
  anchorId: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。', position='Body'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。', position='Body'),
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式', position='Body'),
  enableLinkMic?: boolean(name='EnableLinkMic', description='是否开启连麦。', position='Body'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。最大支持4096个字节。', shrink='json', position='Body'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  title: string(name='Title', description='标题，支持中英文，最大长度32位。', position='Body'),
  userId?: string(name='UserId', description='操作人ID。', position='Body'),
}

model CreateLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID。'),
    anchorNick?: string(name='AnchorNick', description='主播昵称。'),
    appId?: string(name='AppId', description='应用ID。'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='RTS转码流地址，推荐web端使用。'),
      artcUrl?: string(name='ArtcUrl', description='RTS原码流地址，推荐移动端使用。'),
    }(name='ArtcInfo', description='RTS低延迟播流信息。'),
    chatId?: string(name='ChatId', description='聊天ID。'),
    coverUrl?: string(name='CoverUrl', description='封面。'),
    extension?: map[string]string(name='Extension', description='直播拓展字段。'),
    hlsUrl?: string(name='HlsUrl', description='原画HLS播放地址。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    notice?: string(name='Notice', description='公告。'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址。'),
    pluginInstanceInfoList?: [ 
      {
        createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='插件拓展字段。'),
        pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
        pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
      }
    ](name='PluginInstanceInfoList', description='活跃插件列表。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    title?: string(name='Title', description='标题。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model CreateLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLiveRoomResponseBody(name='body'),
}

async function createLiveRoom(request: CreateLiveRoomRequest): CreateLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model CreateRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。', shrink='json', position='Body'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId?: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。', position='Body'),
  roomOwnerId: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。', position='Body'),
  templateId?: string(name='TemplateId', description='房间模板唯一标识，当前支持的取值：default，传空默认为default。', position='Body'),
  title: string(name='Title', description='房间标题，支持中英文，最大长度32位。', position='Body'),
}

model CreateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomId?: string(name='RoomId', description='房间id'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoom', 'POST', '/', 'json', true, 'form', request);
}

model CreateSensitiveWordRequest {
  appId: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成。包含小写字母、数字，长度为6个字符。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  wordList: [ string ](name='WordList', shrink='json', position='Body'),
}

model CreateSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model CreateSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSensitiveWordResponseBody(name='body'),
}

async function createSensitiveWord(request: CreateSensitiveWordRequest): CreateSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSensitiveWord', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClassRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课堂唯一标识。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人用户ID，仅支持中英文数字，下划线，中划线，1~36个字符。', position='Body'),
}

model DeleteClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteClassResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClassResponseBody(name='body'),
}

async function deleteClass(request: DeleteClassRequest): DeleteClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClass', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。', position='Body'),
  commentIdList: [ string ](name='CommentIdList', description='需要删除的弹幕id列表', position='Body'),
  creatorId?: string(name='CreatorId', description='弹幕的创建者ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='删除的操作人ID。', position='Body'),
}

model DeleteCommentResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    deleteResult?: boolean(name='DeleteResult', description='删除的结果'),
  }(name='Result', description='调用删除直播间弹幕的返回结果。'),
}

model DeleteCommentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommentResponseBody(name='body'),
}

async function deleteComment(request: DeleteCommentRequest): DeleteCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteComment', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCommentByCreatorIdRequest {
  appId: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。', position='Body'),
  commentIdList?: [ string ](name='CommentIdList', description='需要删除的弹幕id列表', position='Body'),
  creatorId: string(name='CreatorId', description='弹幕的创建者ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。', position='Body'),
  userId: string(name='UserId', description='删除的操作人ID。', position='Body'),
}

model DeleteCommentByCreatorIdResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    deleteResult?: boolean(name='DeleteResult', description='删除的结果'),
  }(name='Result', description='调用删除直播间弹幕的返回结果。'),
}

model DeleteCommentByCreatorIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommentByCreatorIdResponseBody(name='body'),
}

async function deleteCommentByCreatorId(request: DeleteCommentByCreatorIdRequest): DeleteCommentByCreatorIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommentByCreatorId', 'POST', '/', 'json', true, 'form', request);
}

model DeleteConferenceRequest {
  appId: string(name='AppId', description='租户名', position='Body'),
  conferenceId: string(name='ConferenceId', description='会议资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间ID，最大长度36位', position='Body'),
  userId: string(name='UserId', description='创建会议用户ID', position='Body'),
}

model DeleteConferenceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConferenceResponseBody(name='body'),
}

async function deleteConference(request: DeleteConferenceRequest): DeleteConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConference', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLiveRequest {
  liveId: string(name='LiveId', description='直播资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteLiveResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveResponseBody(name='body'),
}

async function deleteLive(request: DeleteLiveRequest): DeleteLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLive', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLiveRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人ID。', position='Body'),
}

model DeleteLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLiveRoomResponseBody(name='body'),
}

async function deleteLiveRoom(request: DeleteLiveRoomRequest): DeleteLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRecordFileInfoRequest {
  appId: string(name='AppId', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量', position='Query'),
  nextToken: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始', position='Query'),
}

model DeleteRecordFileInfoResponseBody = {
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model DeleteRecordFileInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordFileInfoResponseBody(name='body'),
}

async function deleteRecordFileInfo(request: DeleteRecordFileInfoRequest): DeleteRecordFileInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecordFileInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。', position='Body'),
}

model DeleteRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoomResponseBody(name='body'),
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoom', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSensitiveWordRequest {
  appId: string(name='AppId', description='弹幕发送者的用户ID，最大长度不超过32个字节。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  wordList?: [ string ](name='WordList', shrink='json', position='Body'),
}

model DeleteSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    success?: boolean(name='Success'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model DeleteSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSensitiveWordResponseBody(name='body'),
}

async function deleteSensitiveWord(request: DeleteSensitiveWordRequest): DeleteSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSensitiveWord', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMeterImpPlayBackTimeByLiveIdRequest {
  appId: string(name='AppId', position='Query'),
  endTs: long(name='EndTs', position='Query'),
  liveId: string(name='LiveId', position='Query'),
  startTs: long(name='StartTs', position='Query'),
}

model DescribeMeterImpPlayBackTimeByLiveIdResponseBody = {
  data?: [ 
    {
      watchTime?: long(name='WatchTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImpPlayBackTimeByLiveIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImpPlayBackTimeByLiveIdResponseBody(name='body'),
}

async function describeMeterImpPlayBackTimeByLiveId(request: DescribeMeterImpPlayBackTimeByLiveIdRequest): DescribeMeterImpPlayBackTimeByLiveIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImpPlayBackTimeByLiveId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterImpWatchLiveTimeByLiveIdRequest {
  appId: string(name='AppId', position='Query'),
  liveId: string(name='LiveId', position='Query'),
}

model DescribeMeterImpWatchLiveTimeByLiveIdResponseBody = {
  data?: [ 
    {
      watchTimeInLatency?: long(name='WatchTimeInLatency'),
      watchTimeInLowLatency?: long(name='WatchTimeInLowLatency'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id'),
}

model DescribeMeterImpWatchLiveTimeByLiveIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeterImpWatchLiveTimeByLiveIdResponseBody(name='body'),
}

async function describeMeterImpWatchLiveTimeByLiveId(request: DescribeMeterImpWatchLiveTimeByLiveIdRequest): DescribeMeterImpWatchLiveTimeByLiveIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterImpWatchLiveTimeByLiveId', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthTokenRequest {
  appId: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成', position='Body'),
  appKey: string(name='AppKey', description='终端设备类型,通过控制台创建和查询', position='Body'),
  deviceId: string(name='DeviceId', description='终端设备ID', position='Body'),
  regionId?: string(name='RegionId', description='cn-shanghai', position='Host'),
  userId: string(name='UserId', description='用户UserId,在AppId下单独唯一', position='Body'),
}

model GetAuthTokenResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    accessToken?: string(name='AccessToken', description='用于长连接建连的token'),
    accessTokenExpiredTime?: long(name='AccessTokenExpiredTime', description='登录token过期时间(毫秒)'),
    refreshToken?: string(name='RefreshToken', description='更新Token，若AccessToken过期，则可以使用RefreshToken再次获取新Token'),
  }(name='Result'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthToken', 'POST', '/', 'json', true, 'form', request);
}

model GetClassDetailRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人用户ID。', position='Body'),
}

model GetClassDetailResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    createNickname?: string(name='CreateNickname', description='创建人昵称。'),
    createUserId?: string(name='CreateUserId', description='创建人ID。'),
    endTime?: long(name='EndTime', description='下课时间戳，毫秒。'),
    liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
    roomId?: string(name='RoomId', description='房间ID'),
    startTime?: long(name='StartTime', description='开始上课时间戳，毫秒。'),
    status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
    title?: string(name='Title', description='课堂标题。'),
    whiteboardId?: string(name='WhiteboardId', description='白板ID'),
    whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetClassDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetClassDetailResponseBody(name='body'),
}

async function getClassDetail(request: GetClassDetailRequest): GetClassDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClassDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetClassRecordRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课程唯一标识，由调用CreateClass返回。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人用户ID。', position='Body'),
}

model GetClassRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    playbackUrlMap?: map[string][ string ](name='PlaybackUrlMap'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetClassRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetClassRecordResponseBody(name='body'),
}

async function getClassRecord(request: GetClassRecordRequest): GetClassRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClassRecord', 'POST', '/', 'json', true, 'form', request);
}

model GetConferenceRequest {
  conferenceId: string(name='ConferenceId', description='会议资源唯一标识。', position='Body'),
  regionId?: string(name='RegionId', description='地域', position='Host'),
}

model GetConferenceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    appId?: string(name='AppId', description='租户名'),
    conferenceId?: string(name='ConferenceId', description='会议资源唯一标识。'),
    createTime?: long(name='CreateTime', description='会议创建时间戳，单位：毫秒。'),
    playbackUrl?: string(name='PlaybackUrl', description='录制回放地址，m3u8格式，会议结束后10秒才会生成。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    status?: string(name='Status', description='会议状态。'),
    title?: string(name='Title', description='会议标题。'),
    userId?: string(name='UserId', description='创建会议用户。'),
  }(name='Result', description='返回结果'),
}

model GetConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: GetConferenceResponseBody(name='body'),
}

async function getConference(request: GetConferenceRequest): GetConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConference', 'POST', '/', 'json', true, 'form', request);
}

model GetLiveRequest {
  liveId: string(name='LiveId', description='直播资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID'),
    appId?: string(name='AppId', description='租户名'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='原画转码地址'),
      artcUrl?: string(name='ArtcUrl', description='源码地址'),
    }(name='ArtcInfo', description='rts播流信息'),
    codeLevel?: int32(name='CodeLevel', description='直播推送分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
    coverUrl?: string(name='CoverUrl', description='封面图片'),
    createTime?: long(name='CreateTime', description='直播创建时间（毫秒ms）'),
    duration?: long(name='Duration', description='直播持续时间（毫秒ms）'),
    endTime?: long(name='EndTime', description='直播结束时间（毫秒ms）'),
    hlsUrl?: string(name='HlsUrl', description='hls播放地址'),
    introduction?: string(name='Introduction', description='直播简介'),
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
    playUrlInfoList?: [ 
      {
        codeLevel?: int32(name='CodeLevel', description='直播拉取分辨率 -1:lld 1:lsd 2:lhd 3:lud'),
        flvUrl?: string(name='FlvUrl', description='flv拉流地址'),
        hlsUrl?: string(name='HlsUrl', description='hls拉流地址'),
        rtmpUrl?: string(name='RtmpUrl', description='rtmp拉流地址'),
      }
    ](name='PlayUrlInfoList', description='多分辨率多协议播放信息'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    roomId?: string(name='RoomId', description='房间id'),
    status?: string(name='Status', description='直播状态：Created-已创建，未开播，Living-直播中，End-直播结束'),
    title?: string(name='Title', description='直播标题'),
    userDefineField?: string(name='UserDefineField', description='用户自定义数据存储'),
    userId?: string(name='UserId', description='创建直播用户'),
  }(name='Result'),
}

model GetLiveResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveResponseBody(name='body'),
}

async function getLive(request: GetLiveRequest): GetLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLive', 'POST', '/', 'json', true, 'form', request);
}

model GetLiveRecordRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播唯一标识，由调用CreateLiveRoom返回。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人用户ID。', position='Body'),
}

model GetLiveRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    playbackUrlMap?: map[string][ string ](name='PlaybackUrlMap'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model GetLiveRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRecordResponseBody(name='body'),
}

async function getLiveRecord(request: GetLiveRecordRequest): GetLiveRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRecord', 'POST', '/', 'json', true, 'form', request);
}

model GetLiveRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID。'),
    anchorNick?: string(name='AnchorNick', description='主播昵称'),
    appId?: string(name='AppId', description='应用ID。'),
    artcInfo?: {
      artcH5Url?: string(name='ArtcH5Url', description='RTS转码流地址，推荐web端使用。'),
      artcUrl?: string(name='ArtcUrl', description='RTS原码流地址，推荐移动端使用。'),
    }(name='ArtcInfo', description='RTS低延迟播流信息。'),
    chatId?: string(name='ChatId', description='聊天ID。'),
    confId?: string(name='ConfId', description='连麦会议唯一标识。'),
    coverUrl?: string(name='CoverUrl', description='封面。'),
    createTime?: long(name='CreateTime', description='直播创建时间，单位：毫秒。'),
    enableLinkMic?: boolean(name='EnableLinkMic', description='是否开启连麦。'),
    endTime?: long(name='EndTime', description='直播结束时间，单位：毫秒。'),
    extension?: map[string]string(name='Extension', description='直播拓展字段。'),
    hlsUrl?: string(name='HlsUrl', description='原画HLS播放地址。'),
    hlsUrlHttps?: string(name='HlsUrlHttps', description='https协议的原画HLS播放地址。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    liveUrlHttps?: string(name='LiveUrlHttps', description='https协议的直播拉流地址。'),
    notice?: string(name='Notice', description='公告。'),
    onlineCount?: long(name='OnlineCount', description='在线用户数。'),
    playbackUrl?: string(name='PlaybackUrl', description='直播回放地址。'),
    playbackUrlHttps?: string(name='PlaybackUrlHttps', description='https协议的直播回放地址'),
    pluginInstanceInfoList?: [ 
      {
        createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='插件拓展字段。'),
        pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
        pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
      }
    ](name='PluginInstanceInfoList', description='活跃插件列表。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
    pv?: long(name='Pv', description='访问用户人次。'),
    roomId?: string(name='RoomId', description='房间ID。'),
    rtmpUrl?: string(name='RtmpUrl', description='rtmp协议的播放地址'),
    startTime?: long(name='StartTime', description='直播开始时间，单位：毫秒。'),
    status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
    title?: string(name='Title', description='标题。'),
    uv?: long(name='Uv', description='访问用户数。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRoomResponseBody(name='body'),
}

async function getLiveRoom(request: GetLiveRoomRequest): GetLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model GetLiveRoomStatisticsRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetLiveRoomStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    endTime?: long(name='EndTime', description='直播结束时间，单位：毫秒。'),
    likeCount?: long(name='LikeCount', description='点赞数。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    messageCount?: long(name='MessageCount', description='互动消息数。'),
    onlineCount?: long(name='OnlineCount', description='在线用户数。'),
    pv?: long(name='Pv', description='访问用户人次。'),
    startTime?: long(name='StartTime', description='直播开始时间，单位：毫秒。'),
    status?: int32(name='Status', description='直播状态，0-已创建 1-直播中 2-已关闭。'),
    uv?: long(name='Uv', description='访问用户数。'),
    watchLiveTime?: long(name='WatchLiveTime', description='总观看时长，单位：毫秒。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRoomStatisticsResponseBody(name='body'),
}

async function getLiveRoomStatistics(request: GetLiveRoomStatisticsRequest): GetLiveRoomStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRoomStatistics', 'POST', '/', 'json', true, 'form', request);
}

model GetLiveRoomUserStatisticsRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  pageNumber?: string(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。', position='Body'),
  pageSize?: string(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetLiveRoomUserStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    liveId?: string(name='LiveId', description='直播ID。'),
    pageTotal?: int32(name='PageTotal', description='用户总页数。'),
    totalCount?: int32(name='TotalCount', description='用户总数'),
    userStatisticsList?: [ 
      {
        commentCount?: int32(name='CommentCount'),
        likeCount?: int32(name='LikeCount'),
        userId?: string(name='UserId', description='用户ID。'),
        watchLiveTime?: long(name='WatchLiveTime', description='观看时长，单位：毫秒。'),
      }
    ](name='UserStatisticsList', description='用户观看数据列表。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model GetLiveRoomUserStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLiveRoomUserStatisticsResponseBody(name='body'),
}

async function getLiveRoomUserStatistics(request: GetLiveRoomUserStatisticsRequest): GetLiveRoomUserStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLiveRoomUserStatistics', 'POST', '/', 'json', true, 'form', request);
}

model GetRecordFileInfoRequest {
  appId: string(name='AppId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model GetRecordFileInfoResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    eTag?: string(name='ETag'),
    expireTime?: string(name='ExpireTime'),
    fileName?: string(name='FileName'),
  }(name='Result'),
}

model GetRecordFileInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordFileInfoResponseBody(name='body'),
}

async function getRecordFileInfo(request: GetRecordFileInfoRequest): GetRecordFileInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordFileInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。', position='Body'),
}

model GetRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    roomInfo?: {
      adminIdList?: [ string ](name='AdminIdList', description='管理员ID列表。'),
      appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
      createTime?: long(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
      extension?: map[string]string(name='Extension', description='房间拓展字段。'),
      notice?: string(name='Notice', description='房间公告。'),
      onlineCount?: long(name='OnlineCount', description='在线用户数。'),
      pluginInstanceInfoList?: [ 
        {
          createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
          extension?: map[string]string(name='Extension', description='插件拓展字段。'),
          pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
          pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
        }
      ](name='PluginInstanceInfoList', description='活跃插件列表。'),
      pv?: long(name='Pv', description='访问用户人次。'),
      roomId?: string(name='RoomId', description='房间唯一标识。'),
      roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
      templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
      title?: string(name='Title', description='房间标题。'),
      uv?: long(name='Uv', description='访问用户数。'),
    }(name='RoomInfo', description='房间信息。'),
  }(name='Result', description='查询房间信息返回结果。'),
}

model GetRoomResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoomResponseBody(name='body'),
}

async function getRoom(request: GetRoomRequest): GetRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoom', 'POST', '/', 'json', true, 'form', request);
}

model GetStandardRoomJumpUrlRequest {
  appId: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成', position='Body'),
  appKey: string(name='AppKey', description='终端设备类型,通过控制台创建和查询', position='Body'),
  bizId: string(name='BizId', description='资源ID：根据业务类型来定，比如直播ID，课堂ID等', position='Body'),
  bizType: string(name='BizType', description='业务类型：互动直播live，互动课堂class', position='Body'),
  platform: string(name='Platform', description='平台：win, mac, android, ios, web', position='Body'),
  regionId?: string(name='RegionId', description='cn-shanghai', position='Host'),
  userId: string(name='UserId', description='用户UserId,在AppId下单独唯一', position='Body'),
  userNick: string(name='UserNick', description='用户昵称', position='Body'),
}

model GetStandardRoomJumpUrlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    standardRoomJumpUrl?: string(name='StandardRoomJumpUrl', description='样板间跳转协议地址'),
  }(name='Result'),
}

model GetStandardRoomJumpUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetStandardRoomJumpUrlResponseBody(name='body'),
}

async function getStandardRoomJumpUrl(request: GetStandardRoomJumpUrlRequest): GetStandardRoomJumpUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStandardRoomJumpUrl', 'POST', '/', 'json', true, 'form', request);
}

model KickRoomUserRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  blockTime?: long(name='BlockTime', position='Body'),
  kickUser: string(name='KickUser', description='被踢出房间的用户ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位，传空则随机生成一个房间id。', position='Body'),
  userId: string(name='UserId', description='操作人的用户ID，用于表示谁执行了踢人操作。', position='Body'),
}

model KickRoomUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model KickRoomUserResponse = {
  headers: map[string]string(name='headers'),
  body: KickRoomUserResponseBody(name='body'),
}

async function kickRoomUser(request: KickRoomUserRequest): KickRoomUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KickRoomUser', 'POST', '/', 'json', true, 'form', request);
}

model ListClassesRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。', position='Body'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  status?: int32(name='Status', description='课程状态，0-未开课 1-上课中 2-已下课，不传则返回所有课程。', position='Body'),
}

model ListClassesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    classList?: [ 
      {
        classId?: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。'),
        confId?: string(name='ConfId', description='连麦会议唯一标识。'),
        createNickname?: string(name='CreateNickname', description='创建人昵称。'),
        createUserId?: string(name='CreateUserId', description='创建人ID。'),
        endTime?: long(name='EndTime', description='下课时间戳，毫秒。'),
        liveId?: string(name='LiveId', description='直播的唯一标识ID。'),
        roomId?: string(name='RoomId', description='房间ID'),
        startTime?: long(name='StartTime', description='开始上课时间戳，毫秒。'),
        status?: int32(name='Status', description='课堂状态，0:未开始 1:上课中 2:已下课。'),
        title?: string(name='Title', description='课堂标题。'),
        whiteboardId?: string(name='WhiteboardId', description='白板ID'),
        whiteboardRecordId?: string(name='WhiteboardRecordId', description='白板录制ID'),
      }
    ](name='ClassList', description='课程列表信息。'),
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    pageTotal?: int32(name='PageTotal', description='课程总页数。'),
    totalCount?: int32(name='TotalCount', description='课程总数。'),
  }(name='Result', description='创建课程返回的结果。'),
}

model ListClassesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClassesResponseBody(name='body'),
}

async function listClasses(request: ListClassesRequest): ListClassesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClasses', 'POST', '/', 'json', true, 'form', request);
}

model ListCommentsRequest {
  appId: string(name='AppId', description='用户的应用ID，在控制台创建应用时生成。包含小写字母、数字，长度为6个字符。', position='Body'),
  creatorId?: string(name='CreatorId', description='弹幕创建者ID。', position='Body'),
  pageNum: int32(name='PageNum', description='查询弹幕消息列表的分页页数。应该从1开始，每次分页拉取时递增。', position='Body'),
  pageSize: int32(name='PageSize', description='查询弹幕消息列表的分页大小。最小不得小于1，最大不得超过100。如果超过100，会被截断为前100条。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间的唯一标识，在调用CreateRoom时返回。', position='Body'),
  sortType: int32(name='SortType', description='查询弹幕消息列表的排序方式。取值仅限0和1，其中0表示按照弹幕消息创建时间递增的顺序拉取，1表示按照弹幕消息创建时间递减的时间拉取。', position='Body'),
  userId?: string(name='UserId', description='操作人用户ID，表示谁执行了查询弹幕消息列表的操作。', position='Body'),
}

model ListCommentsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    commentVOList?: [ 
      {
        appId?: string(name='AppId', description='应用ID。'),
        commentId?: string(name='CommentId', description='弹幕消息的唯一ID标识。'),
        content?: string(name='Content', description='弹幕消息的内容。'),
        createAt?: long(name='CreateAt', description='弹幕消息的创建时间，Unix时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='扩展字段。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        senderId?: string(name='SenderId', description='弹幕消息的发送者ID标识。'),
        senderNick?: string(name='SenderNick', description='弹幕消息发送者的昵称。'),
      }
    ](name='CommentVOList', description='弹幕消息列表。'),
    hasMore?: boolean(name='HasMore', description='是否还有下一页数据。true表示还有，false表示没有。'),
    pageTotal?: int32(name='PageTotal', description='分页查询弹幕消息列表的总页数。'),
    totalCount?: int32(name='TotalCount', description='弹幕消息的总数。'),
  }(name='Result', description='调用查询弹幕消息列表的返回结果。'),
}

model ListCommentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommentsResponseBody(name='body'),
}

async function listComments(request: ListCommentsRequest): ListCommentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListComments', 'POST', '/', 'json', true, 'form', request);
}

model ListConferenceUsersRequest {
  conferenceId: string(name='ConferenceId', description='会议唯一标识符', position='Body'),
  pageNumber: int32(name='PageNumber', description='查询页码，从第1页开始。', position='Body'),
  pageSize: int32(name='PageSize', description='每页显示个数，最大显示个数为100。', position='Body'),
  regionId?: string(name='RegionId', description='地域', position='Host'),
}

model ListConferenceUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    conferenceUserList?: [ 
      {
        status?: string(name='Status', description='用户状态。'),
        userId?: string(name='UserId', description='用户ID。'),
      }
    ](name='ConferenceUserList', description='会议用户列表。'),
    hasMore?: boolean(name='HasMore', description='是否还有数据'),
    pageTotal?: int32(name='PageTotal', description='总页数'),
    totalCount?: int32(name='TotalCount', description='总条目数'),
  }(name='Result', description='返回结果'),
}

model ListConferenceUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListConferenceUsersResponseBody(name='body'),
}

async function listConferenceUsers(request: ListConferenceUsersRequest): ListConferenceUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConferenceUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListLiveFilesRequest {
  appId: string(name='AppId', position='Query'),
  liveId?: string(name='LiveId', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量', position='Query'),
  nextToken: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
}

model ListLiveFilesResponseBody = {
  fileName?: string(name='FileName'),
  maxResults?: int32(name='MaxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
}

model ListLiveFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveFilesResponseBody(name='body'),
}

async function listLiveFiles(request: ListLiveFilesRequest): ListLiveFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListLiveRoomsRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。', position='Body'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  status?: int32(name='Status', description='直播状态，0-在播 1-下播，不传则返回所有直播。', position='Body'),
}

model ListLiveRoomsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页。'),
    liveList?: [ 
      {
        anchorId?: string(name='AnchorId', description='主播ID。'),
        anchorNick?: string(name='AnchorNick', description='主播昵称。'),
        appId?: string(name='AppId', description='应用ID。'),
        chatId?: string(name='ChatId', description='聊天ID。'),
        coverUrl?: string(name='CoverUrl', description='封面。'),
        createTime?: long(name='CreateTime', description='直播的创建时间。单位为ms。'),
        endTime?: long(name='EndTime', description='直播的结束时间。单位为ms。'),
        extension?: map[string]string(name='Extension', description='直播拓展字段。'),
        liveId?: string(name='LiveId', description='直播ID。'),
        notice?: string(name='Notice', description='公告。'),
        onlineCount?: long(name='OnlineCount', description='在线用户数。'),
        pv?: long(name='Pv', description='访问用户人次。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        startTime?: long(name='StartTime', description='直播的开始时间。单位为ms。'),
        status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
        title?: string(name='Title', description='标题。'),
        uv?: long(name='Uv', description='访问用户数。'),
      }
    ](name='LiveList', description='直播列表信息。'),
    pageTotal?: int32(name='PageTotal', description='直播总页数。'),
    totalCount?: int32(name='TotalCount', description='直播总数。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model ListLiveRoomsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRoomsResponseBody(name='body'),
}

async function listLiveRooms(request: ListLiveRoomsRequest): ListLiveRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRooms', 'POST', '/', 'json', true, 'form', request);
}

model ListLiveRoomsByIdRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveIdList: [ string ](name='LiveIdList', description='直播ID列表。', shrink='json', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListLiveRoomsByIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    liveList?: [ 
      {
        anchorId?: string(name='AnchorId', description='主播ID。'),
        anchorNick?: string(name='AnchorNick', description='主播昵称。'),
        appId?: string(name='AppId', description='应用ID。'),
        chatId?: string(name='ChatId', description='聊天ID。'),
        coverUrl?: string(name='CoverUrl', description='封面。'),
        extension?: map[string]string(name='Extension', description='直播拓展字段。'),
        liveId?: string(name='LiveId', description='直播ID。'),
        notice?: string(name='Notice', description='公告。'),
        onlineCount?: long(name='OnlineCount', description='在线用户数。'),
        pv?: long(name='Pv', description='访问用户人次。'),
        roomId?: string(name='RoomId', description='房间ID。'),
        status?: int32(name='Status', description='直播状态，0-在播 1-下播。'),
        title?: string(name='Title', description='标题。'),
        uv?: long(name='Uv', description='访问用户数。'),
      }
    ](name='LiveList', description='直播列表信息。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model ListLiveRoomsByIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRoomsByIdResponseBody(name='body'),
}

async function listLiveRoomsById(request: ListLiveRoomsByIdRequest): ListLiveRoomsByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLiveRoomsById', 'POST', '/', 'json', true, 'form', request);
}

model ListRoomUsersRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。', minimum=1, maximum=50, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间ID，最大长度36个字符。', position='Body'),
}

model ListRoomUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页用户列表。'),
    pageTotal?: int32(name='PageTotal', description='该房间的用户总页数。'),
    roomUserList?: [ 
      {
        extension?: map[string]string(name='Extension', description='用户拓展字段。'),
        nick?: string(name='Nick', description='用户昵称。'),
        userId?: string(name='UserId', description='用户唯一标识。'),
      }
    ](name='RoomUserList', description='房间用户列表信息。'),
    totalCount?: int32(name='TotalCount', description='该房间的用户总数。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model ListRoomUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListRoomUsersResponseBody(name='body'),
}

async function listRoomUsers(request: ListRoomUsersRequest): ListRoomUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoomUsers', 'POST', '/', 'json', true, 'form', request);
}

model ListRoomsRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  pageNumber?: int32(name='PageNumber', description='查询页码，从1开始，传空默认查询第1页。', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', description='每页显示个数，最大支持50，参数为空默认显示个数为10。', minimum=1, maximum=50, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListRoomsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    hasMore?: boolean(name='HasMore', description='是否还有下一页房间列表。'),
    pageTotal?: int32(name='PageTotal', description='该应用的房间总页数。'),
    roomInfoList?: [ 
      {
        appId?: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。'),
        createTime?: string(name='CreateTime', description='房间创建时间戳，单位：毫秒。'),
        extension?: map[string]string(name='Extension', description='房间拓展字段。'),
        notice?: string(name='Notice', description='房间公告。'),
        onlineCount?: long(name='OnlineCount', description='用户在线数。'),
        pluginInstanceInfoList?: [ 
          {
            createTime?: long(name='CreateTime', description='插件实例创建时间戳，单位：毫秒。'),
            extension?: map[string]string(name='Extension', description='插件拓展字段。'),
            pluginId?: string(name='PluginId', description='插件实例唯一标识。'),
            pluginType?: string(name='PluginType', description='插件唯一标识，取值：live-直播，wb-白板，chat-聊天，rtc。'),
          }
        ](name='PluginInstanceInfoList', description='活跃插件列表。'),
        roomId?: string(name='RoomId', description='房间唯一标识。'),
        roomOwnerId?: string(name='RoomOwnerId', description='房主用户id。'),
        templateId?: string(name='TemplateId', description='创建房间使用的模板id。'),
        title?: string(name='Title', description='房间标题。'),
        uv?: long(name='Uv', description='用户访问数。'),
      }
    ](name='RoomInfoList', description='房间列表信息。'),
    totalCount?: int32(name='TotalCount', description='该应用的房间总数。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model ListRoomsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRoomsResponseBody(name='body'),
}

async function listRooms(request: ListRoomsRequest): ListRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRooms', 'POST', '/', 'json', true, 'form', request);
}

model ListSensitiveWordRequest {
  appId: string(name='AppId', description='弹幕发送者的用户ID，最大长度不超过32个字节。', position='Body'),
  pageNum?: int32(name='PageNum', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListSensitiveWordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    totalCount?: int32(name='TotalCount'),
    wordList?: [ string ](name='WordList'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model ListSensitiveWordResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveWordResponseBody(name='body'),
}

async function listSensitiveWord(request: ListSensitiveWordRequest): ListSensitiveWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveWord', 'POST', '/', 'json', true, 'form', request);
}

model PublishLiveRequest {
  liveId: string(name='LiveId', description='直播资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId: string(name='UserId', description='当前用户Id', position='Body'),
}

model PublishLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    anchorId?: string(name='AnchorId', description='主播ID'),
    liveId?: string(name='LiveId', description='直播资源的唯一标识ID'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址'),
    pushUrl?: string(name='PushUrl', description='直播推流地址'),
    status?: string(name='Status', description='直播状态：Created-已创建未开播，Living-直播中，End-直播结束'),
  }(name='Result'),
}

model PublishLiveResponse = {
  headers: map[string]string(name='headers'),
  body: PublishLiveResponseBody(name='body'),
}

async function publishLive(request: PublishLiveRequest): PublishLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishLive', 'POST', '/', 'json', true, 'form', request);
}

model PublishLiveRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人ID。', position='Body'),
}

model PublishLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    liveId?: string(name='LiveId', description='直播ID。'),
    liveUrl?: string(name='LiveUrl', description='直播拉流地址。'),
    pushUrl?: string(name='PushUrl', description='直播推流地址。'),
  }(name='Result', description='创建场景化直播返回的结果。'),
}

model PublishLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: PublishLiveRoomResponseBody(name='body'),
}

async function publishLiveRoom(request: PublishLiveRoomRequest): PublishLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model RemoveMemberRequest {
  conferenceId: string(name='ConferenceId', description='会议唯一标识', position='Body'),
  fromUserId: string(name='FromUserId', description='邀请者用户ID', position='Body'),
  regionId?: string(name='RegionId', description='地域', position='Host'),
  toUserId: string(name='ToUserId', description='被邀请用户ID', position='Body'),
}

model RemoveMemberResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model RemoveMemberResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMemberResponseBody(name='body'),
}

async function removeMember(request: RemoveMemberRequest): RemoveMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveMember', 'POST', '/', 'json', true, 'form', request);
}

model SendCommentRequest {
  appId: string(name='AppId', description='应用唯一标识，可以包含小写字母、数字，长度为6个字符。', position='Body'),
  content: string(name='Content', description='发送的文本内容。最大的长度不超过256个字节。', position='Body'),
  extension?: map[string]string(name='Extension', description='扩展字段，服务端仅做透传。', shrink='json', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='直播间唯一标识，在调用CreateRoom返回。', position='Body'),
  senderId: string(name='SenderId', description='弹幕发送者的用户ID，最大长度不超过32个字节。', position='Body'),
  senderNick?: string(name='SenderNick', description='弹幕消息发送者的昵称。', position='Body'),
}

model SendCommentResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  result?: {
    commentVO?: {
      commentId?: string(name='CommentId', description='弹幕的唯一ID。'),
      content?: string(name='Content', description='弹幕的内容。'),
      createAt?: long(name='CreateAt', description='弹幕的创建时间，Unix时间戳，单位：毫秒。'),
      extension?: map[string]string(name='Extension', description='扩展字段。'),
      senderId?: string(name='SenderId', description='弹幕的发送者ID标识。'),
      senderNick?: string(name='SenderNick', description='弹幕发送者的昵称。'),
    }(name='CommentVO', description='返回的弹幕数据模型。'),
  }(name='Result', description='调用发送直播间弹幕的返回结果。'),
}

model SendCommentResponse = {
  headers: map[string]string(name='headers'),
  body: SendCommentResponseBody(name='body'),
}

async function sendComment(request: SendCommentRequest): SendCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendComment', 'POST', '/', 'json', true, 'form', request);
}

model SendCustomMessageToAllRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  body: string(name='Body', description='消息体内容。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
}

model SendCustomMessageToAllResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='消息的唯一ID标识。由数字、大小写字母组成，长度不超过20。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model SendCustomMessageToAllResponse = {
  headers: map[string]string(name='headers'),
  body: SendCustomMessageToAllResponseBody(name='body'),
}

async function sendCustomMessageToAll(request: SendCustomMessageToAllRequest): SendCustomMessageToAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCustomMessageToAll', 'POST', '/', 'json', true, 'form', request);
}

model SendCustomMessageToUsersRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  body: string(name='Body', description='消息体内容。', position='Body'),
  receiverList: [ string ](name='ReceiverList', description='消息指定的接收人ID列表。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由调用CreateRoom返回。', position='Body'),
}

model SendCustomMessageToUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  result?: {
    messageId?: string(name='MessageId', description='消息的唯一ID标识。由数字、大小写字母组成，长度不超过20。'),
  }(name='Result', description='API请求的返回结果结构体。'),
}

model SendCustomMessageToUsersResponse = {
  headers: map[string]string(name='headers'),
  body: SendCustomMessageToUsersResponseBody(name='body'),
}

async function sendCustomMessageToUsers(request: SendCustomMessageToUsersRequest): SendCustomMessageToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCustomMessageToUsers', 'POST', '/', 'json', true, 'form', request);
}

model SetUserAdminRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识，由字母、数字、符号.和-组成，最大长度36位。', position='Body'),
  userId: string(name='UserId', description='用户ID', position='Body'),
}

model SetUserAdminResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SetUserAdminResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserAdminResponseBody(name='body'),
}

async function setUserAdmin(request: SetUserAdminRequest): SetUserAdminResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserAdmin', 'POST', '/', 'json', true, 'form', request);
}

model StopClassRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课堂唯一标识。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作者用户ID。', position='Body'),
}

model StopClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopClassResponse = {
  headers: map[string]string(name='headers'),
  body: StopClassResponseBody(name='body'),
}

async function stopClass(request: StopClassRequest): StopClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopClass', 'POST', '/', 'json', true, 'form', request);
}

model StopLiveRequest {
  appId: string(name='AppId', description='租户名', position='Body'),
  liveId: string(name='LiveId', description='直播资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间ID，最大长度36位', position='Body'),
  userId: string(name='UserId', description='创建直播用户ID', position='Body'),
}

model StopLiveResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopLiveResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveResponseBody(name='body'),
}

async function stopLive(request: StopLiveRequest): StopLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLive', 'POST', '/', 'json', true, 'form', request);
}

model StopLiveRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  userId?: string(name='UserId', description='操作人ID。', position='Body'),
}

model StopLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: StopLiveRoomResponseBody(name='body'),
}

async function stopLiveRoom(request: StopLiveRoomRequest): StopLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model UpdateClassRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课堂唯一标识。', position='Body'),
  createNickname?: string(name='CreateNickname', description='创建人用户昵称，1~32个字符。', position='Body'),
  createUserId?: string(name='CreateUserId', description='创建人用户ID，仅支持中英文数字，下划线，中划线，1~36个字符。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  title?: string(name='Title', description='课堂标题，1~32个字符。', position='Body'),
}

model UpdateClassResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateClassResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClassResponseBody(name='body'),
}

async function updateClass(request: UpdateClassRequest): UpdateClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClass', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveRequest {
  introduction?: string(name='Introduction', description='直播简介，支持中英文，最大长度2048位', position='Body'),
  liveId: string(name='LiveId', description='直播资源的唯一标识ID', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  title?: string(name='Title', description='直播标题，支持中英文，最大长度256位', position='Body'),
}

model UpdateLiveResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateLiveResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveResponseBody(name='body'),
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLive', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLiveRoomRequest {
  anchorId?: string(name='AnchorId', description='主播id，仅支持英文和数字，最大长度36位。', position='Body'),
  anchorNick?: string(name='AnchorNick', description='主播昵称。', position='Body'),
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  coverUrl?: string(name='CoverUrl', description='封面，支持图片地址链接格式', position='Body'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。', shrink='json', position='Body'),
  liveId: string(name='LiveId', description='直播ID。', position='Body'),
  notice?: string(name='Notice', description='公告，支持中英文，最大长度256位。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  title?: string(name='Title', description='标题，支持中英文，最大长度32位。', position='Body'),
  userId?: string(name='UserId', description='操作人ID。', position='Body'),
}

model UpdateLiveRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateLiveRoomResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveRoomResponseBody(name='body'),
}

async function updateLiveRoom(request: UpdateLiveRoomRequest): UpdateLiveRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveRoom', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRoomRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  extension?: map[string]string(name='Extension', description='拓展字段，按需传递，需要额外记录的房间属性。', shrink='json', position='Body'),
  notice?: string(name='Notice', description='房间公告，支持中英文，最大长度256位。', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  roomId: string(name='RoomId', description='房间唯一标识。', position='Body'),
  roomOwnerId?: string(name='RoomOwnerId', description='房主用户id，仅支持英文和数字，最大长度36位。', position='Body'),
  title?: string(name='Title', description='房间标题，支持中英文，最大长度32位。', position='Body'),
}

model UpdateRoomResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoomResponseBody(name='body'),
}

async function updateRoom(request: UpdateRoomRequest): UpdateRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRoom', 'POST', '/', 'json', true, 'form', request);
}

model UpdateShareScreenLayoutRequest {
  appId: string(name='AppId', description='应用唯一标识，由6位小写字母、数字组成。', position='Body'),
  classId: string(name='ClassId', description='课堂唯一标识，由调用CreateClass返回。', position='Body'),
  enableOverlay: boolean(name='EnableOverlay', description='是否开启叠加老师画面', position='Body'),
  overlayHeight?: float(name='OverlayHeight', description='叠加画面高度，归一化为1', position='Body'),
  overlayWidth?: float(name='OverlayWidth', description='叠加画面宽度，归一化为1', position='Body'),
  overlayX?: float(name='OverlayX', description='叠加画面X坐标，归一化为1', position='Body'),
  overlayY?: float(name='OverlayY', description='叠加画面Y坐标，归一化为1', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateShareScreenLayoutResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateShareScreenLayoutResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateShareScreenLayoutResponseBody(name='body'),
}

async function updateShareScreenLayout(request: UpdateShareScreenLayoutRequest): UpdateShareScreenLayoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateShareScreenLayout', 'POST', '/', 'json', true, 'form', request);
}

