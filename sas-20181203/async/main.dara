/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sas';
  @version = '2018-12-03';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'tds.aliyuncs.com',
    ap-southeast-3 = 'tds.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'tds.aliyuncs.com',
    ap-northeast-2-pop = 'tds.aliyuncs.com',
    ap-south-1 = 'tds.aliyuncs.com',
    ap-southeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'tds.aliyuncs.com',
    ap-southeast-5 = 'tds.aliyuncs.com',
    cn-beijing = 'tds.aliyuncs.com',
    cn-beijing-finance-1 = 'tds.aliyuncs.com',
    cn-beijing-finance-pop = 'tds.aliyuncs.com',
    cn-beijing-gov-1 = 'tds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'tds.aliyuncs.com',
    cn-chengdu = 'tds.aliyuncs.com',
    cn-edge-1 = 'tds.aliyuncs.com',
    cn-fujian = 'tds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'tds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'tds.aliyuncs.com',
    cn-hangzhou-finance = 'tds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'tds.aliyuncs.com',
    cn-hangzhou-test-306 = 'tds.aliyuncs.com',
    cn-hongkong = 'tds.aliyuncs.com',
    cn-hongkong-finance-pop = 'tds.aliyuncs.com',
    cn-huhehaote = 'tds.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'tds.aliyuncs.com',
    cn-north-2-gov-1 = 'tds.aliyuncs.com',
    cn-qingdao = 'tds.aliyuncs.com',
    cn-qingdao-nebula = 'tds.aliyuncs.com',
    cn-shanghai = 'tds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'tds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'tds.aliyuncs.com',
    cn-shanghai-finance-1 = 'tds.aliyuncs.com',
    cn-shanghai-inner = 'tds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'tds.aliyuncs.com',
    cn-shenzhen = 'tds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'tds.aliyuncs.com',
    cn-shenzhen-inner = 'tds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'tds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'tds.aliyuncs.com',
    cn-wuhan = 'tds.aliyuncs.com',
    cn-wulanchabu = 'tds.aliyuncs.com',
    cn-yushanfang = 'tds.aliyuncs.com',
    cn-zhangbei = 'tds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'tds.aliyuncs.com',
    cn-zhangjiakou = 'tds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'tds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'tds.aliyuncs.com',
    eu-central-1 = 'tds.aliyuncs.com',
    eu-west-1 = 'tds.aliyuncs.com',
    eu-west-1-oxs = 'tds.aliyuncs.com',
    me-east-1 = 'tds.aliyuncs.com',
    rus-west-1-pop = 'tds.aliyuncs.com',
    us-east-1 = 'tds.aliyuncs.com',
    us-west-1 = 'tds.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddVpcHoneyPotRequest {
  vpcId: string(name='VpcId', position='Query'),
}

model AddVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: AddVpcHoneyPotResponseBody(name='body'),
}

async function addVpcHoneyPot(request: AddVpcHoneyPotRequest): AddVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model CheckQuaraFileIdRequest {
  quaraFileIds?: [ string ](name='QuaraFileIds', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model CheckQuaraFileIdResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckQuaraFileIdResponse = {
  headers: map[string]string(name='headers'),
  body: CheckQuaraFileIdResponseBody(name='body'),
}

async function checkQuaraFileId(request: CheckQuaraFileIdRequest): CheckQuaraFileIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckQuaraFileId', 'POST', '/', 'json', false, 'json', request);
}

model CheckSecurityEventIdRequest {
  securityEventIds?: [ string ](name='SecurityEventIds', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model CheckSecurityEventIdResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckSecurityEventIdResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSecurityEventIdResponseBody(name='body'),
}

async function checkSecurityEventId(request: CheckSecurityEventIdRequest): CheckSecurityEventIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSecurityEventId', 'POST', '/', 'json', false, 'json', request);
}

model CreateAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', position='Query'),
  failCount: int32(name='FailCount', position='Query'),
  forbiddenTime: int32(name='ForbiddenTime', position='Query'),
  name: string(name='Name', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  span: int32(name='Span', position='Query'),
  uuidList: [ string ](name='UuidList', position='Query'),
}

model CreateAntiBruteForceRuleResponseBody = {
  createAntiBruteForceRule?: {
    ruleId?: long(name='RuleId'),
  }(name='CreateAntiBruteForceRule'),
  requestId?: string(name='RequestId'),
}

model CreateAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntiBruteForceRuleResponseBody(name='body'),
}

async function createAntiBruteForceRule(request: CreateAntiBruteForceRuleRequest): CreateAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPolicyRequest {
  name: string(name='Name', position='Query'),
  policy: map[string]any(name='Policy', shrink='json', position='Query'),
  policyRegionId?: string(name='PolicyRegionId', position='Query'),
  policyVersion: string(name='PolicyVersion', position='Query'),
  uuidList: [ string ](name='UuidList', position='Query'),
}

model CreateBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrUpdateAssetGroupRequest {
  groupId?: long(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model CreateOrUpdateAssetGroupResponseBody = {
  groupId?: long(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model CreateOrUpdateAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateAssetGroupResponseBody(name='body'),
}

async function createOrUpdateAssetGroup(request: CreateOrUpdateAssetGroupRequest): CreateOrUpdateAssetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateAssetGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimilarSecurityEventsQueryTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId?: long(name='SecurityEventId', position='Query'),
  similarEventScenarioCode?: string(name='SimilarEventScenarioCode', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateSimilarSecurityEventsQueryTaskResponseBody = {
  createSimilarSecurityEventsQueryTaskResponse?: {
    status?: string(name='Status'),
    taskId?: long(name='TaskId'),
  }(name='CreateSimilarSecurityEventsQueryTaskResponse'),
  requestId?: string(name='RequestId'),
}

model CreateSimilarSecurityEventsQueryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimilarSecurityEventsQueryTaskResponseBody(name='body'),
}

async function createSimilarSecurityEventsQueryTask(request: CreateSimilarSecurityEventsQueryTaskRequest): CreateSimilarSecurityEventsQueryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimilarSecurityEventsQueryTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSuspEventNoteRequest {
  eventId?: long(name='EventId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model CreateSuspEventNoteResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSuspEventNoteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSuspEventNoteResponseBody(name='body'),
}

async function createSuspEventNote(request: CreateSuspEventNoteRequest): CreateSuspEventNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSuspEventNote', 'POST', '/', 'json', false, 'json', request);
}

model CreateVulAutoRepairConfigRequest {
  reason?: string(name='Reason', position='Query'),
  type: string(name='Type', description='漏洞类型', position='Query'),
  vulAutoRepairConfigList: [ 
    {
      aliasName: string(name='AliasName', description='漏洞别名'),
      name: string(name='Name', description='漏洞名称'),
    }
  ](name='VulAutoRepairConfigList', position='Query'),
}

model CreateVulAutoRepairConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVulAutoRepairConfigResponseBody(name='body'),
}

async function createVulAutoRepairConfig(request: CreateVulAutoRepairConfigRequest): CreateVulAutoRepairConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVulAutoRepairConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupPolicyRequest {
  id: long(name='Id', position='Query'),
  policyVersion: string(name='PolicyVersion', position='Query'),
}

model DeleteBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPolicyResponseBody(name='body'),
}

async function deleteBackupPolicy(request: DeleteBackupPolicyRequest): DeleteBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupPolicyMachineRequest {
  policyId: long(name='PolicyId', position='Query'),
  policyVersion: string(name='PolicyVersion', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model DeleteBackupPolicyMachineResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPolicyMachineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPolicyMachineResponseBody(name='body'),
}

async function deleteBackupPolicyMachine(request: DeleteBackupPolicyMachineRequest): DeleteBackupPolicyMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupPolicyMachine', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupId: long(name='GroupId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoginBaseConfigRequest {
  config: string(name='Config', position='Query'),
  target?: string(name='Target', position='Query'),
  type: string(name='Type', position='Query'),
}

model DeleteLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoginBaseConfigResponseBody(name='body'),
}

async function deleteLoginBaseConfig(request: DeleteLoginBaseConfigRequest): DeleteLoginBaseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoginBaseConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStrategyRequest {
  id: string(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStrategyResponseBody(name='body'),
}

async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagWithUuidRequest {
  tagName: string(name='TagName', position='Query'),
  uuidList?: string(name='UuidList', position='Query'),
}

model DeleteTagWithUuidResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagWithUuidResponseBody(name='body'),
}

async function deleteTagWithUuid(request: DeleteTagWithUuidRequest): DeleteTagWithUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagWithUuid', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcHoneyPotRequest {
  vpcId: string(name='VpcId', position='Query'),
}

model DeleteVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcHoneyPotResponseBody(name='body'),
}

async function deleteVpcHoneyPot(request: DeleteVpcHoneyPotRequest): DeleteVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccesskeyLeakListRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeAccesskeyLeakListResponseBody = {
  accessKeyLeakList?: [ 
    {
      accesskeyId?: string(name='AccesskeyId'),
      aliUserName?: string(name='AliUserName'),
      asset?: string(name='Asset'),
      dealTime?: string(name='DealTime'),
      dealType?: string(name='DealType'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      userType?: string(name='UserType'),
    }
  ](name='AccessKeyLeakList'),
  akLeakCount?: int32(name='AkLeakCount'),
  currentPage?: int32(name='CurrentPage'),
  gmtLast?: long(name='GmtLast'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccesskeyLeakListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccesskeyLeakListResponseBody(name='body'),
}

async function describeAccesskeyLeakList(request: DescribeAccesskeyLeakListRequest): DescribeAccesskeyLeakListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccesskeyLeakList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAffectedMaliciousFileImagesRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  imageDigest?: string(name='ImageDigest', position='Query'),
  imageLayer?: string(name='ImageLayer', position='Query'),
  imageTag?: string(name='ImageTag', position='Query'),
  lang?: string(name='Lang', position='Query'),
  maliciousMd5?: string(name='MaliciousMd5', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  repoId?: string(name='RepoId', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespace?: string(name='RepoNamespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', position='Query'),
}

model DescribeAffectedMaliciousFileImagesResponseBody = {
  affectedMaliciousFileImagesResponse?: [ 
    {
      digest?: string(name='Digest'),
      downloadUrl?: string(name='DownloadUrl'),
      filePath?: string(name='FilePath'),
      firstScanTimestamp?: long(name='FirstScanTimestamp'),
      highLight?: string(name='HighLight'),
      imageUuid?: string(name='ImageUuid'),
      latestScanTimestamp?: long(name='LatestScanTimestamp'),
      latestVerifyTimestamp?: long(name='LatestVerifyTimestamp'),
      layer?: string(name='Layer'),
      level?: string(name='Level'),
      maliciousMd5?: string(name='MaliciousMd5'),
      namespace?: string(name='Namespace'),
      repoId?: string(name='RepoId'),
      repoInstanceId?: string(name='RepoInstanceId'),
      repoName?: string(name='RepoName'),
      repoRegionId?: string(name='RepoRegionId'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
    }
  ](name='AffectedMaliciousFileImagesResponse'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeAffectedMaliciousFileImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAffectedMaliciousFileImagesResponseBody(name='body'),
}

async function describeAffectedMaliciousFileImages(request: DescribeAffectedMaliciousFileImagesRequest): DescribeAffectedMaliciousFileImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAffectedMaliciousFileImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmEventDetailRequest {
  alarmUniqueInfo: string(name='AlarmUniqueInfo', position='Query'),
  from: string(name='From', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeAlarmEventDetailResponseBody = {
  data?: {
    alarmEventAliasName?: string(name='AlarmEventAliasName'),
    alarmEventDesc?: string(name='AlarmEventDesc'),
    alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
    appName?: string(name='AppName'),
    canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
    canCancelFault?: boolean(name='CanCancelFault'),
    causeDetails?: [ 
      {
        key?: string(name='Key'),
        value?: [ 
          {
            name?: string(name='Name'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='Value'),
      }
    ](name='CauseDetails'),
    containHwMode?: boolean(name='ContainHwMode'),
    containerId?: string(name='ContainerId'),
    containerImageId?: string(name='ContainerImageId'),
    containerImageName?: string(name='ContainerImageName'),
    dataSource?: string(name='DataSource'),
    endTime?: long(name='EndTime'),
    instanceName?: string(name='InstanceName'),
    internetIp?: string(name='InternetIp'),
    intranetIp?: string(name='IntranetIp'),
    k8sClusterId?: string(name='K8sClusterId'),
    k8sClusterName?: string(name='K8sClusterName'),
    k8sNamespace?: string(name='K8sNamespace'),
    k8sNodeId?: string(name='K8sNodeId'),
    k8sNodeName?: string(name='K8sNodeName'),
    k8sPodName?: string(name='K8sPodName'),
    level?: string(name='Level'),
    solution?: string(name='Solution'),
    startTime?: long(name='StartTime'),
    type?: string(name='Type'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeAlarmEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventDetailResponseBody(name='body'),
}

async function describeAlarmEventDetail(request: DescribeAlarmEventDetailRequest): DescribeAlarmEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarmEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmEventListRequest {
  alarmEventName?: string(name='AlarmEventName', position='Query'),
  alarmEventType?: string(name='AlarmEventType', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  from: string(name='From', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  id?: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  levels?: string(name='Levels', position='Query'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  remark?: string(name='Remark', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  tacticId?: string(name='TacticId', position='Query'),
}

model DescribeAlarmEventListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameOriginal?: string(name='AlarmEventNameOriginal'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      dataSource?: string(name='DataSource'),
      dealed?: boolean(name='Dealed'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      gmtModified?: long(name='GmtModified'),
      hasTraceInfo?: boolean(name='HasTraceInfo'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      level?: string(name='Level'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateTime?: long(name='OperateTime'),
      saleVersion?: string(name='SaleVersion'),
      securityEventIds?: string(name='SecurityEventIds'),
      solution?: string(name='Solution'),
      stages?: string(name='Stages'),
      startTime?: long(name='StartTime'),
      suspiciousEventCount?: int32(name='SuspiciousEventCount'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName'),
          tacticId?: string(name='TacticId'),
        }
      ](name='TacticItems', description='攻击阶段展示名'),
      uuid?: string(name='Uuid'),
    }
  ](name='SuspEvents'),
}

model DescribeAlarmEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventListResponseBody(name='body'),
}

async function describeAlarmEventList(request: DescribeAlarmEventListRequest): DescribeAlarmEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarmEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmEventStackInfoRequest {
  eventName: string(name='EventName', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uniqueInfo: string(name='UniqueInfo', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId'),
  stackInfo?: string(name='StackInfo'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarmEventStackInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllEntityRequest {
}

model DescribeAllEntityResponseBody = {
  entityList?: [ 
    {
      groupId?: int32(name='GroupId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      os?: string(name='Os'),
      uuid?: string(name='Uuid'),
    }
  ](name='EntityList'),
  requestId?: string(name='RequestId'),
}

model DescribeAllEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllEntityResponseBody(name='body'),
}

async function describeAllEntity(request: DescribeAllEntityRequest): DescribeAllEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllEntity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllGroupsRequest {
  lang?: string(name='Lang', position='Query'),
}

model DescribeAllGroupsResponseBody = {
  count?: int32(name='Count'),
  groups?: [ 
    {
      groupFlag?: int32(name='GroupFlag'),
      groupId?: int32(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='Groups'),
  requestId?: string(name='RequestId'),
}

model DescribeAllGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllGroupsResponseBody(name='body'),
}

async function describeAllGroups(request: DescribeAllGroupsRequest): DescribeAllGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntiBruteForceRulesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      defaultRule?: boolean(name='DefaultRule'),
      enableSmartRule?: boolean(name='EnableSmartRule'),
      failCount?: int32(name='FailCount'),
      forbiddenTime?: int32(name='ForbiddenTime'),
      id?: long(name='Id'),
      machineCount?: int32(name='MachineCount'),
      name?: string(name='Name'),
      span?: int32(name='Span'),
      uuidList?: [ string ](name='UuidList'),
    }
  ](name='Rules'),
}

model DescribeAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntiBruteForceRulesResponseBody(name='body'),
}

async function describeAntiBruteForceRules(request: DescribeAntiBruteForceRulesRequest): DescribeAntiBruteForceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntiBruteForceRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetDetailByUuidRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model DescribeAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType'),
    authModifyTime?: long(name='AuthModifyTime'),
    authVersion?: int32(name='AuthVersion'),
    bind?: boolean(name='Bind'),
    clientStatus?: string(name='ClientStatus'),
    clientVersion?: string(name='ClientVersion'),
    cpu?: int32(name='Cpu'),
    cpuInfo?: string(name='CpuInfo'),
    createTime?: long(name='CreateTime'),
    diskInfoList?: [ string ](name='DiskInfoList'),
    flag?: int32(name='Flag'),
    groupTrace?: string(name='GroupTrace'),
    hostName?: string(name='HostName'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    internetIp?: string(name='InternetIp'),
    intranetIp?: string(name='IntranetIp'),
    ip?: string(name='Ip'),
    ipList?: [ string ](name='IpList'),
    kernel?: string(name='Kernel'),
    macList?: [ string ](name='MacList'),
    mem?: int32(name='Mem'),
    memory?: long(name='Memory'),
    os?: string(name='Os'),
    osDetail?: string(name='OsDetail'),
    osName?: string(name='OsName'),
    region?: string(name='Region'),
    regionId?: string(name='RegionId'),
    regionName?: string(name='RegionName'),
    sysInfo?: string(name='SysInfo'),
    tag?: string(name='Tag'),
    uuid?: string(name='Uuid'),
    vpcInstanceId?: string(name='VpcInstanceId'),
  }(name='AssetDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetDetailByUuidResponseBody(name='body'),
}

async function describeAssetDetailByUuid(request: DescribeAssetDetailByUuidRequest): DescribeAssetDetailByUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetDetailByUuid', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetDetailByUuidsRequest {
  uuids: string(name='Uuids', position='Query'),
}

model DescribeAssetDetailByUuidsResponseBody = {
  assetList?: [ 
    {
      assetType?: string(name='AssetType'),
      clientStatus?: string(name='ClientStatus'),
      flag?: int32(name='Flag'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      os?: string(name='Os'),
      osName?: string(name='OsName'),
      region?: string(name='Region'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      uuid?: string(name='Uuid'),
      vpcInstanceId?: string(name='VpcInstanceId'),
    }
  ](name='AssetList'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetDetailByUuidsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetDetailByUuidsResponseBody(name='body'),
}

async function describeAssetDetailByUuids(request: DescribeAssetDetailByUuidsRequest): DescribeAssetDetailByUuidsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetDetailByUuids', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetSummaryRequest {
}

model DescribeAssetSummaryResponseBody = {
  assetsSummary?: {
    totalCoreNum?: int32(name='TotalCoreNum'),
  }(name='AssetsSummary'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetSummaryResponseBody(name='body'),
}

async function describeAssetSummary(request: DescribeAssetSummaryRequest): DescribeAssetSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAttackAnalysisDataRequest {
  base64?: string(name='Base64', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  data?: string(name='Data', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeAttackAnalysisDataResponseBody = {
  data?: string(name='Data'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeAttackAnalysisDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAttackAnalysisDataResponseBody(name='body'),
}

async function describeAttackAnalysisData(request: DescribeAttackAnalysisDataRequest): DescribeAttackAnalysisDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttackAnalysisData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoDelConfigRequest {
}

model DescribeAutoDelConfigResponseBody = {
  days?: int32(name='Days'),
  requestId?: string(name='RequestId'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfig(request: DescribeAutoDelConfigRequest): DescribeAutoDelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoDelConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupClientsRequest {
  supportRegionId: string(name='SupportRegionId', position='Query'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      clientId?: string(name='ClientId'),
      clientStatus?: string(name='ClientStatus'),
      instanceId?: string(name='InstanceId'),
      uuid?: string(name='Uuid'),
    }
  ](name='Clients'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupClients', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupFilesRequest {
  currentPage: string(name='CurrentPage', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  path?: string(name='Path', position='Query'),
  snapshotHash: string(name='SnapshotHash', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model DescribeBackupFilesResponseBody = {
  backupFiles?: [ 
    {
      name?: string(name='Name'),
      size?: long(name='Size'),
      subtree?: string(name='Subtree'),
      type?: string(name='Type'),
    }
  ](name='BackupFiles'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupFilesResponseBody(name='body'),
}

async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPoliciesRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  machineRemark?: string(name='MachineRemark', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  policies?: [ 
    {
      clientErrorCount?: int32(name='ClientErrorCount'),
      clientErrorUuidList?: [ string ](name='ClientErrorUuidList'),
      clientStatus?: string(name='ClientStatus'),
      healthClientCount?: int32(name='HealthClientCount'),
      healthClientUuidList?: [ string ](name='HealthClientUuidList'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      policy?: string(name='Policy'),
      policyRegionId?: string(name='PolicyRegionId'),
      policyVersion?: string(name='PolicyVersion'),
      remarkedUuidList?: [ string ](name='RemarkedUuidList'),
      serviceErrorCount?: int32(name='ServiceErrorCount'),
      serviceErrorUuidList?: [ string ](name='ServiceErrorUuidList'),
      status?: string(name='Status'),
      upgradeStatus?: string(name='UpgradeStatus'),
      uuidList?: [ string ](name='UuidList'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPoliciesResponseBody(name='body'),
}

async function describeBackupPolicies(request: DescribeBackupPoliciesRequest): DescribeBackupPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupRestoreCountRequest {
}

model DescribeBackupRestoreCountResponseBody = {
  backupRestoreCount?: {
    recovering?: int32(name='Recovering'),
    total?: int32(name='Total'),
  }(name='BackupRestoreCount'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupRestoreCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupRestoreCountResponseBody(name='body'),
}

async function describeBackupRestoreCount(request: DescribeBackupRestoreCountRequest): DescribeBackupRestoreCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupRestoreCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBruteForceSummaryRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeBruteForceSummaryResponseBody = {
  bruteForceSummary?: {
    allStrategyCount?: int32(name='AllStrategyCount'),
    effectiveCount?: int32(name='EffectiveCount'),
  }(name='BruteForceSummary'),
  requestId?: string(name='RequestId'),
}

model DescribeBruteForceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBruteForceSummaryResponseBody(name='body'),
}

async function describeBruteForceSummary(request: DescribeBruteForceSummaryRequest): DescribeBruteForceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBruteForceSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckEcsWarningsRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeCheckEcsWarningsResponseBody = {
  canTry?: string(name='CanTry'),
  requestId?: string(name='RequestId'),
  sasVersion?: string(name='SasVersion'),
  weakPasswordCount?: string(name='WeakPasswordCount'),
}

model DescribeCheckEcsWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckEcsWarningsResponseBody(name='body'),
}

async function describeCheckEcsWarnings(request: DescribeCheckEcsWarningsRequest): DescribeCheckEcsWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckEcsWarnings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningDetailRequest {
  checkWarningId: long(name='CheckWarningId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeCheckWarningDetailResponseBody = {
  advice?: string(name='Advice'),
  checkId?: long(name='CheckId'),
  description?: string(name='Description'),
  item?: string(name='Item'),
  level?: string(name='Level'),
  prompt?: string(name='Prompt'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarningDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningSummaryRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskName?: string(name='RiskName', position='Query'),
  riskStatus?: int32(name='RiskStatus', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
  strategyId?: long(name='StrategyId', position='Query'),
  targetType?: string(name='TargetType', position='Query'),
  typeName?: string(name='TypeName', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeCheckWarningSummaryResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  warningSummarys?: [ 
    {
      checkCount?: int32(name='CheckCount'),
      highWarningCount?: int32(name='HighWarningCount'),
      lastFoundTime?: string(name='LastFoundTime'),
      level?: string(name='Level'),
      lowWarningCount?: int32(name='LowWarningCount'),
      mediumWarningCount?: int32(name='MediumWarningCount'),
      riskId?: long(name='RiskId'),
      riskName?: string(name='RiskName'),
      subTypeAlias?: string(name='SubTypeAlias'),
      typeAlias?: string(name='TypeAlias'),
      warningMachineCount?: int32(name='WarningMachineCount'),
    }
  ](name='WarningSummarys'),
}

model DescribeCheckWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningSummaryResponseBody(name='body'),
}

async function describeCheckWarningSummary(request: DescribeCheckWarningSummaryRequest): DescribeCheckWarningSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarningSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningsRequest {
  checkId?: long(name='CheckId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskId: long(name='RiskId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model DescribeCheckWarningsResponseBody = {
  checkWarnings?: [ 
    {
      checkId?: long(name='CheckId'),
      checkWarningId?: long(name='CheckWarningId'),
      item?: string(name='Item'),
      level?: string(name='Level'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='CheckWarnings'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningsResponseBody(name='body'),
}

async function describeCheckWarnings(request: DescribeCheckWarningsRequest): DescribeCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudCenterInstancesRequest {
  criteria?: string(name='Criteria', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  importance?: int32(name='Importance', position='Query'),
  logicalExp?: string(name='LogicalExp', position='Query'),
  machineTypes?: string(name='MachineTypes', position='Query'),
  noGroupTrace?: boolean(name='NoGroupTrace', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeCloudCenterInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus'),
      assetType?: string(name='AssetType'),
      authModifyTime?: long(name='AuthModifyTime'),
      authVersion?: int32(name='AuthVersion'),
      authVersionName?: string(name='AuthVersionName'),
      bind?: boolean(name='Bind'),
      clientStatus?: string(name='ClientStatus'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      cores?: int32(name='Cores'),
      cpuInfo?: string(name='CpuInfo'),
      createdTime?: long(name='CreatedTime'),
      exposedStatus?: int32(name='ExposedStatus'),
      flag?: int32(name='Flag'),
      groupId?: long(name='GroupId'),
      groupTrace?: string(name='GroupTrace'),
      hcStatus?: string(name='HcStatus'),
      healthCheckCount?: int32(name='HealthCheckCount'),
      importance?: int32(name='Importance'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      ipListString?: string(name='IpListString'),
      kernel?: string(name='Kernel'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp'),
      macListString?: string(name='MacListString'),
      mem?: int32(name='Mem'),
      os?: string(name='Os'),
      osName?: string(name='OsName'),
      podCount?: int32(name='PodCount'),
      region?: string(name='Region'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      riskCount?: string(name='RiskCount'),
      riskStatus?: string(name='RiskStatus'),
      safeEventCount?: int32(name='SafeEventCount'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
      tagId?: string(name='TagId'),
      uuid?: string(name='Uuid'),
      vendor?: int32(name='Vendor'),
      vendorName?: string(name='VendorName'),
      vpcInstanceId?: string(name='VpcInstanceId'),
      vulCount?: int32(name='VulCount'),
      vulStatus?: string(name='VulStatus'),
    }
  ](name='Instances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCloudCenterInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudCenterInstancesResponseBody(name='body'),
}

async function describeCloudCenterInstances(request: DescribeCloudCenterInstancesRequest): DescribeCloudCenterInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudCenterInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudProductFieldStatisticsRequest {
}

model DescribeCloudProductFieldStatisticsResponseBody = {
  groupedFields?: {
    categoryCount?: string(name='CategoryCount'),
    instanceCount?: int32(name='InstanceCount'),
    riskInstanceCount?: int32(name='RiskInstanceCount'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId'),
}

model DescribeCloudProductFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudProductFieldStatisticsResponseBody(name='body'),
}

async function describeCloudProductFieldStatistics(request: DescribeCloudProductFieldStatisticsRequest): DescribeCloudProductFieldStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudProductFieldStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConcernNecessityRequest {
  lang?: string(name='Lang', position='Query'),
}

model DescribeConcernNecessityResponseBody = {
  concernNecessity?: [ string ](name='ConcernNecessity'),
  requestId?: string(name='RequestId'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConcernNecessity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerStatisticsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeContainerStatisticsResponseBody = {
  data?: {
    remindAlarmCount?: int32(name='RemindAlarmCount'),
    seriousAlarmCount?: int32(name='SeriousAlarmCount'),
    suspiciousAlarmCount?: int32(name='SuspiciousAlarmCount'),
    totalAlarmCount?: int32(name='TotalAlarmCount'),
    totalNode?: int32(name='TotalNode'),
    hasRiskNode?: int32(name='hasRiskNode'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeContainerStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContainerStatisticsResponseBody(name='body'),
}

async function describeContainerStatistics(request: DescribeContainerStatisticsRequest): DescribeContainerStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCriteriaRequest {
  machineTypes?: string(name='MachineTypes', position='Query'),
  supportAutoTag?: boolean(name='SupportAutoTag', position='Query'),
  value?: string(name='Value', position='Query'),
}

model DescribeCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCriteriaResponseBody(name='body'),
}

async function describeCriteria(request: DescribeCriteriaRequest): DescribeCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDingTalkRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  ruleActionName?: string(name='RuleActionName', position='Query'),
}

model DescribeDingTalkResponseBody = {
  actionList?: [ 
    {
      actionName?: string(name='ActionName'),
      aliUid?: long(name='AliUid'),
      configList?: string(name='ConfigList'),
      dingTalkLang?: string(name='DingTalkLang'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      groupIdList?: string(name='GroupIdList'),
      id?: int32(name='Id'),
      intervalTime?: int32(name='IntervalTime'),
      status?: int32(name='Status'),
      url?: string(name='Url'),
    }
  ](name='ActionList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDingTalkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDingTalkResponseBody(name='body'),
}

async function describeDingTalk(request: DescribeDingTalkRequest): DescribeDingTalkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDingTalk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainCountRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeDomainCountResponseBody = {
  requestId?: string(name='RequestId'),
  rootDomainsCount?: int32(name='RootDomainsCount'),
  subDomainsCount?: int32(name='SubDomainsCount'),
  totalDomainsCount?: int32(name='TotalDomainsCount'),
}

model DescribeDomainCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCountResponseBody(name='body'),
}

async function describeDomainCount(request: DescribeDomainCountRequest): DescribeDomainCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeDomainDetailResponseBody = {
  alarmCount?: int32(name='AlarmCount'),
  domain?: string(name='Domain'),
  domainDetailItems?: [ 
    {
      assetType?: string(name='AssetType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      uuid?: string(name='Uuid'),
    }
  ](name='DomainDetailItems'),
  requestId?: string(name='RequestId'),
  rootDomain?: string(name='RootDomain'),
  vulCount?: int32(name='VulCount'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  domainType?: string(name='DomainType', position='Query'),
  fuzzyDomain?: string(name='FuzzyDomain', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeDomainListResponseBody = {
  domainListResponseList?: [ 
    {
      domain?: string(name='Domain'),
      ipList?: string(name='IpList'),
    }
  ](name='DomainListResponseList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEmgVulItemRequest {
  checkType?: int32(name='CheckType', description='检测方式', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskStatus?: string(name='RiskStatus', position='Query'),
  scanType?: string(name='ScanType', position='Query'),
  vulName?: string(name='VulName', position='Query'),
}

model DescribeEmgVulItemResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      checkType?: int32(name='CheckType'),
      gmtLastCheck?: long(name='GmtLastCheck'),
      gmtPublish?: long(name='GmtPublish'),
      name?: string(name='Name'),
      pendingCount?: int32(name='PendingCount'),
      progress?: int32(name='Progress'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEmgVulItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEmgVulItemResponseBody(name='body'),
}

async function describeEmgVulItem(request: DescribeEmgVulItemRequest): DescribeEmgVulItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEmgVulItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExportInfoRequest {
  exportId: long(name='ExportId', position='Query'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount'),
  exportStatus?: string(name='ExportStatus'),
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  link?: string(name='Link'),
  message?: string(name='Message'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeExportInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportInfoResponseBody(name='body'),
}

async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceCriteriaRequest {
  value?: string(name='Value', position='Query'),
}

model DescribeExposedInstanceCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceCriteriaResponseBody(name='body'),
}

async function describeExposedInstanceCriteria(request: DescribeExposedInstanceCriteriaRequest): DescribeExposedInstanceCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceDetailRequest {
  uuid?: string(name='Uuid', position='Query'),
}

model DescribeExposedInstanceDetailResponseBody = {
  exposedChains?: [ 
    {
      allVulList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
          necessity?: string(name='Necessity'),
          type?: string(name='Type'),
          uuid?: string(name='Uuid'),
        }
      ](name='AllVulList'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      groupNo?: string(name='GroupNo'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      realVulList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
          necessity?: string(name='Necessity'),
          type?: string(name='Type'),
          uuid?: string(name='Uuid'),
        }
      ](name='RealVulList'),
      regionId?: string(name='RegionId'),
      uuid?: string(name='Uuid'),
    }
  ](name='ExposedChains'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceDetailResponseBody(name='body'),
}

async function describeExposedInstanceDetail(request: DescribeExposedInstanceDetailRequest): DescribeExposedInstanceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  exposureComponent?: string(name='ExposureComponent', position='Query'),
  exposureIp?: string(name='ExposureIp', position='Query'),
  exposurePort?: string(name='ExposurePort', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  healthStatus?: boolean(name='HealthStatus', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  vulStatus?: boolean(name='VulStatus', position='Query'),
}

model DescribeExposedInstanceListResponseBody = {
  exposedInstances?: [ 
    {
      asapVulCount?: int32(name='AsapVulCount'),
      exploitHealthCount?: int32(name='ExploitHealthCount'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      laterVulCount?: int32(name='LaterVulCount'),
      nntfVulCount?: int32(name='NntfVulCount'),
      regionId?: string(name='RegionId'),
      totalVulCount?: int32(name='TotalVulCount'),
      uuid?: string(name='Uuid'),
    }
  ](name='ExposedInstances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceListResponseBody(name='body'),
}

async function describeExposedInstanceList(request: DescribeExposedInstanceListRequest): DescribeExposedInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedStatisticsRequest {
}

model DescribeExposedStatisticsResponseBody = {
  exposedAsapVulCount?: int32(name='ExposedAsapVulCount'),
  exposedComponentCount?: int32(name='ExposedComponentCount'),
  exposedInstanceCount?: int32(name='ExposedInstanceCount'),
  exposedIpCount?: int32(name='ExposedIpCount'),
  exposedLaterVulCount?: int32(name='ExposedLaterVulCount'),
  exposedNntfVulCount?: int32(name='ExposedNntfVulCount'),
  exposedPortCount?: int32(name='ExposedPortCount'),
  exposedWeekPasswordMachineCount?: int32(name='ExposedWeekPasswordMachineCount'),
  gatewayAssetCount?: int32(name='GatewayAssetCount'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedStatisticsResponseBody(name='body'),
}

async function describeExposedStatistics(request: DescribeExposedStatisticsRequest): DescribeExposedStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedStatisticsDetailRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  statisticsType: string(name='StatisticsType', position='Query'),
  statisticsTypeGatewayType?: string(name='StatisticsTypeGatewayType', position='Query'),
  statisticsTypeInstanceValue?: string(name='StatisticsTypeInstanceValue', position='Query'),
}

model DescribeExposedStatisticsDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  statisticsDetails?: [ 
    {
      exposedCount?: int32(name='ExposedCount'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      exposureTypeInstanceName?: string(name='ExposureTypeInstanceName'),
      regionId?: string(name='RegionId'),
    }
  ](name='StatisticsDetails'),
}

model DescribeExposedStatisticsDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedStatisticsDetailResponseBody(name='body'),
}

async function describeExposedStatisticsDetail(request: DescribeExposedStatisticsDetailRequest): DescribeExposedStatisticsDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedStatisticsDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldStatisticsRequest {
  machineTypes?: string(name='MachineTypes', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeFieldStatisticsResponseBody = {
  groupedFields?: {
    aliYunInstanceCount?: int32(name='AliYunInstanceCount'),
    awsInstanceCount?: int32(name='AwsInstanceCount'),
    exposedInstanceCount?: int32(name='ExposedInstanceCount'),
    generalAssetCount?: int32(name='GeneralAssetCount'),
    groupCount?: int32(name='GroupCount'),
    huaweiInstanceCount?: int32(name='HuaweiInstanceCount'),
    idcInstanceCount?: int32(name='IdcInstanceCount'),
    importantAssetCount?: int32(name='ImportantAssetCount'),
    instanceCount?: int32(name='InstanceCount'),
    instanceSyncTaskCount?: int32(name='InstanceSyncTaskCount'),
    newInstanceCount?: int32(name='NewInstanceCount'),
    notRunningStatusCount?: int32(name='NotRunningStatusCount'),
    offlineInstanceCount?: int32(name='OfflineInstanceCount'),
    pauseInstanceCount?: int32(name='PauseInstanceCount'),
    regionCount?: int32(name='RegionCount'),
    riskInstanceCount?: int32(name='RiskInstanceCount'),
    tencentInstanceCount?: int32(name='TencentInstanceCount'),
    testAssetCount?: int32(name='TestAssetCount'),
    unprotectedInstanceCount?: int32(name='UnprotectedInstanceCount'),
    vpcCount?: int32(name='VpcCount'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId'),
}

model DescribeFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFieldStatisticsResponseBody(name='body'),
}

async function describeFieldStatistics(request: DescribeFieldStatisticsRequest): DescribeFieldStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFrontVulPatchListRequest {
  info: string(name='Info', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      patchList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
        }
      ](name='PatchList'),
      uuid?: string(name='Uuid'),
    }
  ](name='FrontPatchList'),
  requestId?: string(name='RequestId'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFrontVulPatchList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedContainerInstancesRequest {
  criteria?: string(name='Criteria', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  fieldValue?: string(name='FieldValue', position='Query'),
  groupField: string(name='GroupField', position='Query'),
  logicalExp?: string(name='LogicalExp', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeGroupedContainerInstancesResponseBody = {
  groupedContainerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount'),
      appName?: string(name='AppName'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      clusterType?: string(name='ClusterType'),
      createTime?: long(name='CreateTime'),
      custerState?: string(name='CusterState'),
      hcCount?: int32(name='HcCount'),
      hostIp?: string(name='HostIp'),
      image?: string(name='Image'),
      imageDigest?: string(name='ImageDigest'),
      imageRepoName?: string(name='ImageRepoName'),
      imageRepoNamespace?: string(name='ImageRepoNamespace'),
      imageRepoTag?: string(name='ImageRepoTag'),
      imageUuid?: string(name='ImageUuid'),
      instanceCount?: int32(name='InstanceCount'),
      instanceId?: string(name='InstanceId'),
      namespace?: string(name='Namespace'),
      pod?: string(name='Pod'),
      podIp?: string(name='PodIp'),
      regionId?: string(name='RegionId'),
      riskInstanceCount?: int32(name='RiskInstanceCount'),
      riskLevel?: string(name='RiskLevel'),
      riskStatus?: string(name='RiskStatus'),
      vulCount?: int32(name='VulCount'),
    }
  ](name='GroupedContainerInstanceList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedContainerInstancesResponseBody(name='body'),
}

async function describeGroupedContainerInstances(request: DescribeGroupedContainerInstancesRequest): DescribeGroupedContainerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedContainerInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedInstancesRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  fieldValue?: string(name='FieldValue', position='Query'),
  groupField: string(name='GroupField', position='Query'),
  lang?: string(name='Lang', position='Query'),
  machineTypes?: string(name='MachineTypes', position='Query'),
  noPage?: boolean(name='NoPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeGroupedInstancesResponseBody = {
  instances?: [ 
    {
      asapVulInstanceCount?: long(name='AsapVulInstanceCount'),
      fieldAliasName?: string(name='FieldAliasName'),
      groupFlag?: int32(name='GroupFlag'),
      instanceCount?: string(name='InstanceCount'),
      riskInstanceCount?: string(name='RiskInstanceCount'),
      unProtectedInstanceCount?: string(name='UnProtectedInstanceCount'),
    }
  ](name='Instances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedInstancesResponseBody(name='body'),
}

async function describeGroupedInstances(request: DescribeGroupedInstancesRequest): DescribeGroupedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedMaliciousFilesRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName', position='Query'),
  imageDigest?: string(name='ImageDigest', position='Query'),
  imageLayer?: string(name='ImageLayer', position='Query'),
  imageTag?: string(name='ImageTag', position='Query'),
  lang?: string(name='Lang', position='Query'),
  levels?: string(name='Levels', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  repoId?: string(name='RepoId', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespace?: string(name='RepoNamespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', position='Query'),
}

model DescribeGroupedMaliciousFilesResponseBody = {
  groupedMaliciousFileResponse?: [ 
    {
      firstScanTimestamp?: long(name='FirstScanTimestamp'),
      imageCount?: long(name='ImageCount'),
      latestScanTimestamp?: long(name='LatestScanTimestamp'),
      level?: string(name='Level'),
      maliciousMd5?: string(name='MaliciousMd5'),
      maliciousName?: string(name='MaliciousName'),
      status?: int32(name='Status'),
    }
  ](name='GroupedMaliciousFileResponse'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedMaliciousFilesResponseBody(name='body'),
}

async function describeGroupedMaliciousFiles(request: DescribeGroupedMaliciousFilesRequest): DescribeGroupedMaliciousFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedMaliciousFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedTagsRequest {
  machineTypes?: string(name='MachineTypes', position='Query'),
}

model DescribeGroupedTagsResponseBody = {
  count?: int32(name='Count'),
  groupedFileds?: [ 
    {
      count?: string(name='Count'),
      name?: string(name='Name'),
      tagId?: int32(name='TagId'),
    }
  ](name='GroupedFileds'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGroupedTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedTagsResponseBody(name='body'),
}

async function describeGroupedTags(request: DescribeGroupedTagsRequest): DescribeGroupedTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedVulRequest {
  aliasName?: string(name='AliasName', position='Query'),
  attachTypes?: string(name='AttachTypes', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  searchTags?: string(name='SearchTags', position='Query'),
  type?: string(name='Type', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount'),
      gmtLast?: long(name='GmtLast'),
      handledCount?: int32(name='HandledCount'),
      laterCount?: int32(name='LaterCount'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount'),
      tags?: string(name='Tags'),
      totalFixCount?: long(name='TotalFixCount'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedVul', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHoneyPotAuthRequest {
}

model DescribeHoneyPotAuthResponseBody = {
  honeyPotAuthCount?: long(name='HoneyPotAuthCount'),
  honeyPotCount?: int32(name='HoneyPotCount'),
  requestId?: string(name='RequestId'),
}

model DescribeHoneyPotAuthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHoneyPotAuthResponseBody(name='body'),
}

async function describeHoneyPotAuth(request: DescribeHoneyPotAuthRequest): DescribeHoneyPotAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHoneyPotAuth', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHoneyPotSuspStatisticsRequest {
  from: string(name='From', position='Query'),
  statisticsDays: int32(name='StatisticsDays', position='Query'),
  statisticsKeyType: string(name='StatisticsKeyType', position='Query'),
}

model DescribeHoneyPotSuspStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  suspHoneyPotStatisticsResponse?: [ 
    {
      count?: int32(name='Count'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      type?: string(name='Type'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='SuspHoneyPotStatisticsResponse'),
}

model DescribeHoneyPotSuspStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHoneyPotSuspStatisticsResponseBody(name='body'),
}

async function describeHoneyPotSuspStatistics(request: DescribeHoneyPotSuspStatisticsRequest): DescribeHoneyPotSuspStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHoneyPotSuspStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineCheckSummaryRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  criteria?: string(name='Criteria', position='Query'),
  criteriaType?: string(name='CriteriaType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskLevel?: string(name='RiskLevel', position='Query'),
}

model DescribeImageBaselineCheckSummaryResponseBody = {
  baselineResultSummary?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias'),
      baselineClassKey?: string(name='BaselineClassKey'),
      baselineNameAlias?: string(name='BaselineNameAlias'),
      baselineNameKey?: string(name='BaselineNameKey'),
      baselineNameLevel?: string(name='BaselineNameLevel'),
      firstScanTime?: long(name='FirstScanTime'),
      highRiskImage?: int32(name='HighRiskImage'),
      lastScanTime?: long(name='LastScanTime'),
      lowRiskImage?: int32(name='LowRiskImage'),
      middleRiskImage?: int32(name='MiddleRiskImage'),
      status?: int32(name='Status'),
    }
  ](name='BaselineResultSummary'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeImageBaselineCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageBaselineCheckSummaryResponseBody(name='body'),
}

async function describeImageBaselineCheckSummary(request: DescribeImageBaselineCheckSummaryRequest): DescribeImageBaselineCheckSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineCheckSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageFixTaskRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeImageFixTaskResponseBody = {
  buildTasks?: [ 
    {
      buildTaskId?: string(name='BuildTaskId'),
      finishTime?: string(name='FinishTime'),
      fixTime?: string(name='FixTime'),
      newTag?: string(name='NewTag'),
      newUuid?: string(name='NewUuid'),
      oldTag?: string(name='OldTag'),
      oldUuid?: string(name='OldUuid'),
      regionId?: string(name='RegionId'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      status?: int32(name='Status'),
      taskType?: string(name='TaskType'),
    }
  ](name='BuildTasks'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeImageFixTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageFixTaskResponseBody(name='body'),
}

async function describeImageFixTask(request: DescribeImageFixTaskRequest): DescribeImageFixTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageFixTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageGroupedVulListRequest {
  aliasName?: string(name='AliasName', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  cveId?: string(name='CveId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  imageDigest?: string(name='ImageDigest', position='Query'),
  imageLayer?: string(name='ImageLayer', position='Query'),
  imageTag?: string(name='ImageTag', position='Query'),
  isLatest?: int32(name='IsLatest', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  patchId?: long(name='PatchId', position='Query'),
  repoId?: string(name='RepoId', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespace?: string(name='RepoNamespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', position='Query'),
  type?: string(name='Type', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeImageGroupedVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount'),
      gmtLast?: long(name='GmtLast'),
      lastScanTime?: long(name='LastScanTime'),
      laterCount?: int32(name='LaterCount'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount'),
      status?: int32(name='Status'),
      tags?: string(name='Tags'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImageGroupedVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageGroupedVulListResponseBody(name='body'),
}

async function describeImageGroupedVulList(request: DescribeImageGroupedVulListRequest): DescribeImageGroupedVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageGroupedVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageListWithBaselineNameRequest {
  baselineNameKey: string(name='BaselineNameKey', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  criteria?: string(name='Criteria', position='Query'),
  criteriaType?: string(name='CriteriaType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  imageDigest?: string(name='ImageDigest', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespace?: string(name='RepoNamespace', position='Query'),
}

model DescribeImageListWithBaselineNameResponseBody = {
  imageInfos?: [ 
    {
      digest?: string(name='Digest'),
      highRiskImage?: int32(name='HighRiskImage'),
      imageCreate?: long(name='ImageCreate'),
      imageId?: string(name='ImageId'),
      imageSize?: int32(name='ImageSize'),
      imageUpdate?: long(name='ImageUpdate'),
      instanceId?: string(name='InstanceId'),
      lowRiskImage?: int32(name='LowRiskImage'),
      middleRiskImage?: int32(name='MiddleRiskImage'),
      noRiskImage?: int32(name='NoRiskImage'),
      regionId?: string(name='RegionId'),
      repoId?: string(name='RepoId'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      repoType?: string(name='RepoType'),
      riskStatus?: string(name='RiskStatus'),
      tag?: string(name='Tag'),
      totalItemCount?: int32(name='TotalItemCount'),
      uuid?: string(name='Uuid'),
    }
  ](name='ImageInfos'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeImageListWithBaselineNameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageListWithBaselineNameResponseBody(name='body'),
}

async function describeImageListWithBaselineName(request: DescribeImageListWithBaselineNameRequest): DescribeImageListWithBaselineNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageListWithBaselineName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageScanAuthCountRequest {
}

model DescribeImageScanAuthCountResponseBody = {
  imageScan?: {
    imageScanCapacity?: long(name='ImageScanCapacity'),
    instanceId?: string(name='InstanceId'),
    scanCount?: long(name='ScanCount'),
  }(name='ImageScan'),
  requestId?: string(name='RequestId'),
}

model DescribeImageScanAuthCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageScanAuthCountResponseBody(name='body'),
}

async function describeImageScanAuthCount(request: DescribeImageScanAuthCountRequest): DescribeImageScanAuthCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageScanAuthCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageStatisticsRequest {
}

model DescribeImageStatisticsResponseBody = {
  instanceCount?: int32(name='InstanceCount'),
  requestId?: string(name='RequestId'),
  riskInstanceCount?: int32(name='RiskInstanceCount'),
}

model DescribeImageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageStatisticsResponseBody(name='body'),
}

async function describeImageStatistics(request: DescribeImageStatisticsRequest): DescribeImageStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageVulListRequest {
  aliasName?: string(name='AliasName', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  digest?: string(name='Digest', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  repoId?: string(name='RepoId', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', position='Query'),
  repoName?: string(name='RepoName', position='Query'),
  repoNamespace?: string(name='RepoNamespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', position='Query'),
  statusList?: string(name='StatusList', position='Query'),
  tag?: string(name='Tag', position='Query'),
  type: string(name='Type', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeImageVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      canFix?: string(name='CanFix'),
      canUpdate?: boolean(name='CanUpdate'),
      extendContentJson?: {
        os?: string(name='Os'),
        osRelease?: string(name='OsRelease'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion'),
            layer?: string(name='Layer'),
            matchDetail?: string(name='MatchDetail'),
            matchList?: [ string ](name='MatchList'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            updateCmd?: string(name='UpdateCmd'),
            version?: string(name='Version'),
          }
        ](name='RpmEntityList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs'),
      imageDigest?: string(name='ImageDigest'),
      lastTs?: long(name='LastTs'),
      layers?: [ string ](name='Layers'),
      modifyTs?: long(name='ModifyTs'),
      name?: string(name='Name'),
      necessity?: string(name='Necessity'),
      primaryId?: long(name='PrimaryId'),
      related?: string(name='Related'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='VulRecords'),
}

model DescribeImageVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageVulListResponseBody(name='body'),
}

async function describeImageVulList(request: DescribeImageVulListRequest): DescribeImageVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstallCaptchaRequest {
  deadline?: string(name='Deadline', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeInstallCaptchaResponseBody = {
  captchaCode?: string(name='CaptchaCode'),
  deadline?: string(name='Deadline'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCaptchaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstallCaptchaResponseBody(name='body'),
}

async function describeInstallCaptcha(request: DescribeInstallCaptchaRequest): DescribeInstallCaptchaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstallCaptcha', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstallCodesRequest {
}

model DescribeInstallCodesResponseBody = {
  installCodes?: [ 
    {
      captchaCode?: string(name='CaptchaCode'),
      expiredDate?: long(name='ExpiredDate'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      onlyImage?: boolean(name='OnlyImage'),
      os?: string(name='Os'),
      vendorName?: string(name='VendorName'),
    }
  ](name='InstallCodes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstallCodesResponseBody(name='body'),
}

async function describeInstallCodes(request: DescribeInstallCodesRequest): DescribeInstallCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstallCodes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAntiBruteForceRulesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model DescribeInstanceAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
      uuid?: string(name='Uuid'),
    }
  ](name='Rules'),
}

model DescribeInstanceAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAntiBruteForceRulesResponseBody(name='body'),
}

async function describeInstanceAntiBruteForceRules(request: DescribeInstanceAntiBruteForceRulesRequest): DescribeInstanceAntiBruteForceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAntiBruteForceRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatisticsRequest {
  from: string(name='From', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model DescribeInstanceStatisticsResponseBody = {
  data?: [ 
    {
      account?: int32(name='Account'),
      appNum?: int32(name='AppNum'),
      cmsNum?: int32(name='CmsNum'),
      cveNum?: int32(name='CveNum'),
      emgNum?: int32(name='EmgNum'),
      health?: int32(name='Health'),
      scaNum?: int32(name='ScaNum'),
      suspicious?: int32(name='Suspicious'),
      sysNum?: int32(name='SysNum'),
      trojan?: int32(name='Trojan'),
      uuid?: string(name='Uuid'),
      vul?: int32(name='Vul'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoginBaseConfigsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  target?: string(name='Target', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeLoginBaseConfigsResponseBody = {
  baseConfigs?: [ 
    {
      account?: string(name='Account'),
      endTime?: string(name='EndTime'),
      ip?: string(name='Ip'),
      location?: string(name='Location'),
      startTime?: string(name='StartTime'),
      targetList?: [ 
        {
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='TargetList'),
      totalCount?: int32(name='TotalCount'),
      uuidCount?: int32(name='UuidCount'),
    }
  ](name='BaseConfigs'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLoginBaseConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoginBaseConfigsResponseBody(name='body'),
}

async function describeLoginBaseConfigs(request: DescribeLoginBaseConfigsRequest): DescribeLoginBaseConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoginBaseConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogstoreStorageRequest {
  from?: string(name='From', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DescribeLogstoreStorageResponseBody = {
  logstore?: string(name='Logstore'),
  preserve?: long(name='Preserve'),
  requestId?: string(name='RequestId'),
  ttl?: int32(name='Ttl'),
  used?: long(name='Used'),
}

model DescribeLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogstoreStorageResponseBody(name='body'),
}

async function describeLogstoreStorage(request: DescribeLogstoreStorageRequest): DescribeLogstoreStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogstoreStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModuleConfigRequest {
}

model DescribeModuleConfigResponseBody = {
  count?: int32(name='Count'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName'),
      items?: [ 
        {
          groupId?: int32(name='GroupId'),
          instanceId?: string(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
          ip?: string(name='Ip'),
          region?: string(name='Region'),
          uuid?: string(name='Uuid'),
        }
      ](name='Items'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='ModuleConfigList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModuleConfigResponseBody(name='body'),
}

async function describeModuleConfig(request: DescribeModuleConfigRequest): DescribeModuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNoticeConfigRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeNoticeConfigResponseBody = {
  noticeConfigList?: [ 
    {
      aliUid?: long(name='AliUid'),
      currentPage?: int32(name='CurrentPage'),
      project?: string(name='Project'),
      route?: int32(name='Route'),
      timeLimit?: int32(name='TimeLimit'),
    }
  ](name='NoticeConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNoticeConfigResponseBody(name='body'),
}

async function describeNoticeConfig(request: DescribeNoticeConfigRequest): DescribeNoticeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNoticeConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnceTaskRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  endTimeQuery?: long(name='EndTimeQuery', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  rootTaskId?: string(name='RootTaskId', position='Query'),
  startTimeQuery?: long(name='StartTimeQuery', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
}

model DescribeOnceTaskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  taskManageResponseList?: [ 
    {
      detailData?: string(name='DetailData'),
      progress?: string(name='Progress'),
      taskEndTime?: long(name='TaskEndTime'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
      taskStartTime?: long(name='TaskStartTime'),
      taskStatus?: int32(name='TaskStatus'),
      taskStatusText?: string(name='TaskStatusText'),
      taskType?: string(name='TaskType'),
    }
  ](name='TaskManageResponseList'),
}

model DescribeOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOnceTaskResponseBody(name='body'),
}

async function describeOnceTask(request: DescribeOnceTaskRequest): DescribeOnceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnceTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyCountRequest {
  type?: string(name='Type', position='Query'),
  uuidList?: string(name='UuidList', position='Query'),
}

model DescribePropertyCountResponseBody = {
  autorun?: int32(name='Autorun'),
  cron?: int32(name='Cron'),
  database?: int32(name='Database'),
  lkm?: int32(name='Lkm'),
  port?: int32(name='Port'),
  process?: int32(name='Process'),
  requestId?: string(name='RequestId'),
  sca?: int32(name='Sca'),
  software?: int32(name='Software'),
  user?: int32(name='User'),
  web?: int32(name='Web'),
  webserver?: int32(name='Webserver'),
}

model DescribePropertyCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyCountResponseBody(name='body'),
}

async function describePropertyCount(request: DescribePropertyCountRequest): DescribePropertyCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyCronDetailRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  extend?: string(name='Extend', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  remark?: string(name='Remark', position='Query'),
  source?: string(name='Source', position='Query'),
  user?: string(name='User', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertyCronDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      cmd?: string(name='Cmd'),
      createTimestamp?: long(name='CreateTimestamp'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      md5?: string(name='Md5'),
      period?: string(name='Period'),
      source?: string(name='Source'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyCronDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyCronDetailResponseBody(name='body'),
}

async function describePropertyCronDetail(request: DescribePropertyCronDetailRequest): DescribePropertyCronDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyCronDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyPortDetailRequest {
  bindIp?: string(name='BindIp', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  extend?: string(name='Extend', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  port?: string(name='Port', position='Query'),
  procName?: string(name='ProcName', position='Query'),
  remark?: string(name='Remark', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertyPortDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      bindIp?: string(name='BindIp'),
      createTimestamp?: long(name='CreateTimestamp'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      procName?: string(name='ProcName'),
      proto?: string(name='Proto'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyPortDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyPortDetailResponseBody(name='body'),
}

async function describePropertyPortDetail(request: DescribePropertyPortDetailRequest): DescribePropertyPortDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyPortDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyPortItemRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  forceFlush?: boolean(name='ForceFlush', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  port?: string(name='Port', position='Query'),
}

model DescribePropertyPortItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      port?: string(name='Port'),
      proto?: string(name='Proto'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyPortItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyPortItemResponseBody(name='body'),
}

async function describePropertyPortItem(request: DescribePropertyPortItemRequest): DescribePropertyPortItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyPortItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyProcDetailRequest {
  cmdline?: string(name='Cmdline', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  extend?: string(name='Extend', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  procTimeEnd?: long(name='ProcTimeEnd', position='Query'),
  procTimeStart?: long(name='ProcTimeStart', position='Query'),
  remark?: string(name='Remark', position='Query'),
  user?: string(name='User', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertyProcDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      cmdline?: string(name='Cmdline'),
      createTimestamp?: long(name='CreateTimestamp'),
      euidName?: string(name='EuidName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      isPackage?: int32(name='IsPackage'),
      md5?: string(name='Md5'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      pid?: string(name='Pid'),
      pname?: string(name='Pname'),
      startTime?: string(name='StartTime'),
      startTimeDt?: long(name='StartTimeDt'),
      state?: string(name='State'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyProcDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyProcDetailResponseBody(name='body'),
}

async function describePropertyProcDetail(request: DescribePropertyProcDetailRequest): DescribePropertyProcDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyProcDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyProcItemRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  forceFlush?: boolean(name='ForceFlush', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribePropertyProcItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      name?: string(name='Name'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyProcItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyProcItemResponseBody(name='body'),
}

async function describePropertyProcItem(request: DescribePropertyProcItemRequest): DescribePropertyProcItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyProcItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyScaDetailRequest {
  biz?: string(name='Biz', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: long(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  pid?: string(name='Pid', position='Query'),
  port?: string(name='Port', position='Query'),
  processStartedEnd?: long(name='ProcessStartedEnd', position='Query'),
  processStartedStart?: long(name='ProcessStartedStart', position='Query'),
  remark?: string(name='Remark', position='Query'),
  scaName?: string(name='ScaName', position='Query'),
  scaNamePattern?: string(name='ScaNamePattern', position='Query'),
  scaVersion?: string(name='ScaVersion', position='Query'),
  searchInfo?: string(name='SearchInfo', position='Query'),
  searchInfoSub?: string(name='SearchInfoSub', position='Query'),
  searchItem?: string(name='SearchItem', position='Query'),
  searchItemSub?: string(name='SearchItemSub', position='Query'),
  user?: string(name='User', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertyScaDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      bizType?: string(name='BizType'),
      bizTypeDispaly?: string(name='BizTypeDispaly'),
      cmdline?: string(name='Cmdline'),
      configPath?: string(name='ConfigPath'),
      containerName?: string(name='ContainerName'),
      createTimestamp?: long(name='CreateTimestamp'),
      imageName?: string(name='ImageName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      listenIp?: string(name='ListenIp'),
      listenProtocol?: string(name='ListenProtocol'),
      listenStatus?: string(name='ListenStatus'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      ppid?: string(name='Ppid'),
      processStarted?: long(name='ProcessStarted'),
      processUser?: string(name='ProcessUser'),
      proof?: string(name='Proof'),
      runtimeEnvVersion?: string(name='RuntimeEnvVersion'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
      webPath?: string(name='WebPath'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyScaDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyScaDetailResponseBody(name='body'),
}

async function describePropertyScaDetail(request: DescribePropertyScaDetailRequest): DescribePropertyScaDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyScaDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertySoftwareDetailRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  extend?: string(name='Extend', position='Query'),
  installTimeEnd?: long(name='InstallTimeEnd', position='Query'),
  installTimeStart?: long(name='InstallTimeStart', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  path?: string(name='Path', position='Query'),
  remark?: string(name='Remark', position='Query'),
  softwareVersion?: string(name='SoftwareVersion', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertySoftwareDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp'),
      installTime?: string(name='InstallTime'),
      installTimeDt?: long(name='InstallTimeDt'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertySoftwareDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertySoftwareDetailResponseBody(name='body'),
}

async function describePropertySoftwareDetail(request: DescribePropertySoftwareDetailRequest): DescribePropertySoftwareDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertySoftwareDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertySoftwareItemRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  forceFlush?: boolean(name='ForceFlush', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribePropertySoftwareItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      name?: string(name='Name'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertySoftwareItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertySoftwareItemResponseBody(name='body'),
}

async function describePropertySoftwareItem(request: DescribePropertySoftwareItemRequest): DescribePropertySoftwareItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertySoftwareItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUsageNewestRequest {
  type?: string(name='Type', position='Query'),
}

model DescribePropertyUsageNewestResponseBody = {
  itemCount?: int32(name='ItemCount'),
  newestStatisticItems?: [ 
    {
      create?: long(name='Create'),
      name?: string(name='Name'),
    }
  ](name='NewestStatisticItems'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
}

model DescribePropertyUsageNewestResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUsageNewestResponseBody(name='body'),
}

async function describePropertyUsageNewest(request: DescribePropertyUsageNewestRequest): DescribePropertyUsageNewestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUsageNewest', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUserDetailRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  extend?: string(name='Extend', position='Query'),
  isRoot?: string(name='IsRoot', position='Query'),
  lastLoginTimeEnd?: long(name='LastLoginTimeEnd', position='Query'),
  lastLoginTimeStart?: long(name='LastLoginTimeStart', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  remark?: string(name='Remark', position='Query'),
  user?: string(name='User', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribePropertyUserDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      accountsExpirationDate?: string(name='AccountsExpirationDate'),
      createTimestamp?: long(name='CreateTimestamp'),
      groupNames?: [ string ](name='GroupNames'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      isCouldLogin?: int32(name='IsCouldLogin'),
      isPasswdExpired?: int32(name='IsPasswdExpired'),
      isPasswdLocked?: int32(name='IsPasswdLocked'),
      isRoot?: string(name='IsRoot'),
      isSudoer?: int32(name='IsSudoer'),
      isUserExpired?: int32(name='IsUserExpired'),
      lastLoginIp?: string(name='LastLoginIp'),
      lastLoginTime?: string(name='LastLoginTime'),
      lastLoginTimeDt?: long(name='LastLoginTimeDt'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp'),
      passwordExpirationDate?: string(name='PasswordExpirationDate'),
      status?: string(name='Status'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyUserDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUserDetailResponseBody(name='body'),
}

async function describePropertyUserDetail(request: DescribePropertyUserDetailRequest): DescribePropertyUserDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUserDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUserItemRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  forceFlush?: boolean(name='ForceFlush', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  user?: string(name='User', position='Query'),
}

model DescribePropertyUserItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      user?: string(name='User'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyUserItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUserItemResponseBody(name='body'),
}

async function describePropertyUserItem(request: DescribePropertyUserItemRequest): DescribePropertyUserItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUserItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreJobsRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  machineRemark?: string(name='MachineRemark', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeRestoreJobsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  restoreJobs?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      completeTime?: long(name='CompleteTime'),
      createdTime?: long(name='CreatedTime'),
      duration?: long(name='Duration'),
      errorCount?: long(name='ErrorCount'),
      errorFile?: string(name='ErrorFile'),
      errorFileUrl?: string(name='ErrorFileUrl'),
      errorType?: string(name='ErrorType'),
      eta?: long(name='Eta'),
      excludes?: string(name='Excludes'),
      exitCode?: string(name='ExitCode'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      includes?: string(name='Includes'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      message?: string(name='Message'),
      percentage?: int32(name='Percentage'),
      requestId?: string(name='RequestId'),
      restoreId?: string(name='RestoreId'),
      restoreName?: string(name='RestoreName'),
      restoreType?: string(name='RestoreType'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      snapshotVersion?: string(name='SnapshotVersion'),
      source?: string(name='Source'),
      sourceClientId?: string(name='SourceClientId'),
      speed?: long(name='Speed'),
      status?: string(name='Status'),
      target?: string(name='Target'),
      updatedTime?: long(name='UpdatedTime'),
      uuid?: string(name='Uuid'),
      vaultId?: string(name='VaultId'),
    }
  ](name='RestoreJobs'),
}

model DescribeRestoreJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreJobsResponseBody(name='body'),
}

async function describeRestoreJobs(request: DescribeRestoreJobsRequest): DescribeRestoreJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckItemResultRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  itemId: long(name='ItemId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRiskCheckItemResultResponseBody = {
  pageContentResource?: {
    contentResource?: string(name='ContentResource'),
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageContentResource'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskCheckItemResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckItemResultResponseBody(name='body'),
}

async function describeRiskCheckItemResult(request: DescribeRiskCheckItemResultRequest): DescribeRiskCheckItemResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckItemResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckResultRequest {
  assetType?: string(name='AssetType', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  itemIds?: [ string ](name='ItemIds', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryFlag?: string(name='QueryFlag', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  riskLevel?: string(name='RiskLevel', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeRiskCheckResultResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  list?: [ 
    {
      affectedCount?: int32(name='AffectedCount'),
      checkTime?: long(name='CheckTime'),
      itemId?: long(name='ItemId'),
      remainingTime?: int32(name='RemainingTime'),
      repairStatus?: string(name='RepairStatus'),
      riskAssertType?: string(name='RiskAssertType'),
      riskItemResources?: [ 
        {
          contentResource?: map[string]string(name='ContentResource'),
          resourceName?: string(name='ResourceName'),
        }
      ](name='RiskItemResources'),
      riskLevel?: string(name='RiskLevel'),
      sort?: int32(name='Sort'),
      startStatus?: string(name='StartStatus'),
      status?: string(name='Status'),
      taskId?: long(name='TaskId'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='List'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRiskCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckResultResponseBody(name='body'),
}

async function describeRiskCheckResult(request: DescribeRiskCheckResultRequest): DescribeRiskCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckSummaryRequest {
  lang?: string(name='Lang', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRiskCheckSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  riskCheckSummary?: {
    affectedAssetCount?: int32(name='AffectedAssetCount'),
    disabledRiskCount?: int32(name='DisabledRiskCount'),
    enabledRiskCount?: int32(name='EnabledRiskCount'),
    groups?: [ 
      {
        countByStatus?: [ 
          {
            count?: int32(name='Count'),
            status?: string(name='Status'),
          }
        ](name='CountByStatus'),
        id?: long(name='Id'),
        remainingTime?: int32(name='RemainingTime'),
        sort?: int32(name='Sort'),
        status?: string(name='Status'),
        title?: string(name='Title'),
      }
    ](name='Groups'),
    itemCount?: int32(name='ItemCount'),
    previousCount?: int32(name='PreviousCount'),
    previousTime?: long(name='PreviousTime'),
    riskCount?: int32(name='RiskCount'),
    riskLevelCount?: [ 
      {
        count?: int32(name='Count'),
        key?: string(name='Key'),
      }
    ](name='RiskLevelCount'),
    riskRate?: float(name='RiskRate'),
  }(name='RiskCheckSummary'),
}

model DescribeRiskCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckSummaryResponseBody(name='body'),
}

async function describeRiskCheckSummary(request: DescribeRiskCheckSummaryRequest): DescribeRiskCheckSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskItemTypeRequest {
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRiskItemTypeResponseBody = {
  list?: [ 
    {
      id?: long(name='Id'),
      title?: string(name='Title'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskItemTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskItemTypeResponseBody(name='body'),
}

async function describeRiskItemType(request: DescribeRiskItemTypeRequest): DescribeRiskItemTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskItemType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskListCheckResultRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRiskListCheckResultResponseBody = {
  list?: [ 
    {
      instanceId?: string(name='InstanceId'),
      riskCount?: long(name='riskCount'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskListCheckResultResponseBody(name='body'),
}

async function describeRiskListCheckResult(request: DescribeRiskListCheckResultRequest): DescribeRiskListCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskListCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskTypeRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeRiskTypeResponseBody = {
  requestId?: string(name='RequestId'),
  riskTypes?: [ 
    {
      alias?: string(name='Alias'),
      subTypes?: [ 
        {
          alias?: string(name='Alias'),
          checkDetails?: [ 
            {
              checkDesc?: string(name='CheckDesc'),
              checkId?: long(name='CheckId'),
              checkItem?: string(name='CheckItem'),
              rules?: [ 
                {
                  optional?: int32(name='Optional'),
                  paramList?: [ 
                    {
                      enumValue?: string(name='EnumValue'),
                      maxValue?: int32(name='MaxValue'),
                      minValue?: int32(name='MinValue'),
                      paramDefaultValue?: string(name='ParamDefaultValue'),
                      paramDesc?: string(name='ParamDesc'),
                      paramName?: string(name='ParamName'),
                      paramType?: int32(name='ParamType'),
                    }
                  ](name='ParamList'),
                  ruleDesc?: string(name='RuleDesc'),
                  ruleId?: string(name='RuleId'),
                }
              ](name='Rules'),
            }
          ](name='CheckDetails'),
          typeName?: string(name='TypeName'),
        }
      ](name='SubTypes'),
      typeName?: string(name='TypeName'),
    }
  ](name='RiskTypes'),
}

model DescribeRiskTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskTypeResponseBody(name='body'),
}

async function describeRiskType(request: DescribeRiskTypeRequest): DescribeRiskTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScanTaskProgressRequest {
  taskId: long(name='TaskId', position='Query'),
}

model DescribeScanTaskProgressResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskProgress?: string(name='ScanTaskProgress'),
  targetInfo?: string(name='TargetInfo'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScanTaskProgress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSearchConditionRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeSearchConditionResponseBody = {
  conditionList?: [ 
    {
      conditionType?: string(name='ConditionType'),
      filterConditions?: string(name='FilterConditions'),
      name?: string(name='Name'),
      nameKey?: string(name='NameKey'),
    }
  ](name='ConditionList'),
  requestId?: string(name='RequestId'),
}

model DescribeSearchConditionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSearchConditionResponseBody(name='body'),
}

async function describeSearchCondition(request: DescribeSearchConditionRequest): DescribeSearchConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSearchCondition', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecureSuggestionRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSecureSuggestionResponseBody = {
  requestId?: string(name='RequestId'),
  suggestions?: [ 
    {
      detail?: [ 
        {
          description?: string(name='Description'),
          subType?: string(name='SubType'),
          title?: string(name='Title'),
        }
      ](name='Detail'),
      points?: int32(name='Points'),
      suggestType?: string(name='SuggestType'),
    }
  ](name='Suggestions'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecureSuggestionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecureSuggestionResponseBody(name='body'),
}

async function describeSecureSuggestion(request: DescribeSecureSuggestionRequest): DescribeSecureSuggestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecureSuggestion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityCheckScheduleConfigRequest {
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId'),
  riskCheckJobConfig?: {
    daysOfWeek?: string(name='DaysOfWeek'),
    endTime?: int32(name='EndTime'),
    startTime?: int32(name='StartTime'),
  }(name='RiskCheckJobConfig'),
}

model DescribeSecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityCheckScheduleConfigResponseBody(name='body'),
}

async function describeSecurityCheckScheduleConfig(request: DescribeSecurityCheckScheduleConfigRequest): DescribeSecurityCheckScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityCheckScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityEventOperationStatusRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventIds: [ string ](name='SecurityEventIds', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperationStatusResponse?: {
    securityEventOperationStatuses?: [ 
      {
        errorCode?: string(name='ErrorCode'),
        securityEventId?: string(name='SecurityEventId'),
        status?: string(name='Status'),
      }
    ](name='SecurityEventOperationStatuses'),
    taskStatus?: string(name='TaskStatus'),
  }(name='SecurityEventOperationStatusResponse'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityEventOperationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityEventOperationsRequest {
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId: long(name='SecurityEventId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName'),
          filedName?: string(name='FiledName'),
          markMisType?: string(name='MarkMisType'),
          markMisValue?: string(name='MarkMisValue'),
          supportedMisType?: [ string ](name='SupportedMisType'),
          uuid?: string(name='Uuid', description='资产uuid'),
        }
      ](name='MarkField'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName'),
          filedName?: string(name='FiledName'),
          markMisValue?: string(name='MarkMisValue'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkFieldsSource'),
      operationCode?: string(name='OperationCode'),
      operationParams?: string(name='OperationParams'),
      userCanOperate?: boolean(name='UserCanOperate'),
    }
  ](name='SecurityEventOperationsResponse'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityEventOperations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityStatInfoRequest {
  lang?: string(name='Lang', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='AttackEvent'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray'),
    highCount?: int32(name='HighCount'),
    highList?: [ string ](name='HighList'),
    levelsOn?: [ string ](name='LevelsOn'),
    lowCount?: int32(name='LowCount'),
    lowList?: [ string ](name='LowList'),
    mediumCount?: int32(name='MediumCount'),
    mediumList?: [ string ](name='MediumList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='HealthCheck'),
  requestId?: string(name='RequestId'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray'),
    levelsOn?: [ string ](name='LevelsOn'),
    remindCount?: int32(name='RemindCount'),
    remindList?: [ string ](name='RemindList'),
    seriousCount?: int32(name='SeriousCount'),
    seriousList?: [ string ](name='SeriousList'),
    suspiciousCount?: int32(name='SuspiciousCount'),
    suspiciousList?: [ string ](name='SuspiciousList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='SecurityEvent'),
  success?: boolean(name='Success'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount'),
    asapList?: [ string ](name='AsapList'),
    dateArray?: [ string ](name='DateArray'),
    laterCount?: int32(name='LaterCount'),
    laterList?: [ string ](name='LaterList'),
    levelsOn?: [ string ](name='LevelsOn'),
    nntfCount?: int32(name='NntfCount'),
    nntfList?: [ string ](name='NntfList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='Vulnerability'),
}

model DescribeSecurityStatInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityStatInfoResponseBody(name='body'),
}

async function describeSecurityStatInfo(request: DescribeSecurityStatInfoRequest): DescribeSecurityStatInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityStatInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceLinkedRoleStatusRequest {
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId'),
  roleStatus?: {
    status?: boolean(name='Status'),
  }(name='RoleStatus'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceLinkedRoleStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimilarEventScenariosRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId: long(name='SecurityEventId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSimilarEventScenariosResponseBody = {
  requestId?: string(name='RequestId'),
  scenarios?: [ 
    {
      code?: string(name='Code'),
    }
  ](name='Scenarios'),
}

model DescribeSimilarEventScenariosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSimilarEventScenariosResponseBody(name='body'),
}

async function describeSimilarEventScenarios(request: DescribeSimilarEventScenariosRequest): DescribeSimilarEventScenariosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimilarEventScenarios', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimilarSecurityEventsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model DescribeSimilarSecurityEventsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  securityEventsResponse?: [ 
    {
      eventName?: string(name='EventName'),
      eventType?: string(name='EventType'),
      lastTime?: long(name='LastTime'),
      occurrenceTime?: long(name='OccurrenceTime'),
      securityEventId?: long(name='SecurityEventId'),
      uuid?: string(name='Uuid'),
    }
  ](name='SecurityEventsResponse'),
}

model DescribeSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSimilarSecurityEventsResponseBody(name='body'),
}

async function describeSimilarSecurityEvents(request: DescribeSimilarSecurityEventsRequest): DescribeSimilarSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimilarSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyRequest {
  customType?: string(name='CustomType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  strategyIds?: string(name='StrategyIds', position='Query'),
}

model DescribeStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategies?: [ 
    {
      configTargets?: [ 
        {
          flag?: string(name='Flag'),
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='ConfigTargets'),
      customType?: string(name='CustomType'),
      cycleDays?: int32(name='CycleDays'),
      cycleStartTime?: int32(name='CycleStartTime'),
      ecsCount?: int32(name='EcsCount'),
      execStatus?: int32(name='ExecStatus'),
      id?: int32(name='Id'),
      name?: string(name='Name'),
      passRate?: int32(name='PassRate'),
      processRate?: int32(name='ProcessRate'),
      riskCount?: int32(name='RiskCount'),
      type?: int32(name='Type'),
    }
  ](name='Strategies'),
}

model DescribeStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyResponseBody(name='body'),
}

async function describeStrategy(request: DescribeStrategyRequest): DescribeStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyDetailRequest {
  id?: string(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeStrategyDetailResponseBody = {
  requestId?: string(name='RequestId'),
  strategy?: {
    cycleDays?: int32(name='CycleDays'),
    cycleStartTime?: int32(name='CycleStartTime'),
    id?: int32(name='Id'),
    name?: string(name='Name'),
    riskTypeWhiteListQueryResultList?: [ 
      {
        alias?: string(name='Alias'),
        on?: boolean(name='On'),
        subTypes?: [ 
          {
            alias?: string(name='Alias'),
            checkDetails?: [ 
              {
                checkDesc?: string(name='CheckDesc'),
                checkId?: long(name='CheckId'),
                checkItem?: string(name='CheckItem'),
                rules?: [ 
                  {
                    defaultValue?: int32(name='DefaultValue'),
                    optional?: int32(name='Optional'),
                    paramList?: [ 
                      {
                        enumValue?: string(name='EnumValue'),
                        maxValue?: int32(name='MaxValue'),
                        minValue?: int32(name='MinValue'),
                        paramDefaultValue?: string(name='ParamDefaultValue'),
                        paramDesc?: string(name='ParamDesc'),
                        paramName?: string(name='ParamName'),
                        paramType?: int32(name='ParamType'),
                        value?: string(name='Value'),
                      }
                    ](name='ParamList'),
                    ruleDesc?: string(name='RuleDesc'),
                    ruleId?: string(name='RuleId'),
                  }
                ](name='Rules'),
              }
            ](name='CheckDetails'),
            on?: boolean(name='On'),
            typeName?: string(name='TypeName'),
          }
        ](name='SubTypes'),
        typeName?: string(name='TypeName'),
      }
    ](name='RiskTypeWhiteListQueryResultList'),
    type?: int32(name='Type'),
  }(name='Strategy'),
}

model DescribeStrategyDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyDetailResponseBody(name='body'),
}

async function describeStrategyDetail(request: DescribeStrategyDetailRequest): DescribeStrategyDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyExecDetailRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  strategyId: int32(name='StrategyId', position='Query'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime'),
  failCount?: int32(name='FailCount'),
  failedEcsList?: [ 
    {
      ip?: string(name='IP'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      reason?: string(name='Reason'),
    }
  ](name='FailedEcsList'),
  inProcessCount?: int32(name='InProcessCount'),
  percent?: string(name='Percent'),
  requestId?: string(name='RequestId'),
  source?: string(name='Source'),
  startTime?: string(name='StartTime'),
  successCount?: int32(name='SuccessCount'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyExecDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyTargetRequest {
  config: string(name='Config', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeStrategyTargetResponseBody = {
  requestId?: string(name='RequestId'),
  strategyTargets?: [ 
    {
      bindUuidCount?: int32(name='BindUuidCount'),
      flag?: string(name='Flag'),
      target?: string(name='Target'),
      targetType?: string(name='TargetType'),
    }
  ](name='StrategyTargets'),
}

model DescribeStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyTargetResponseBody(name='body'),
}

async function describeStrategyTarget(request: DescribeStrategyTargetRequest): DescribeStrategyTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyTarget', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSummaryInfoRequest {
  lang?: string(name='Lang', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount'),
  requestId?: string(name='RequestId'),
  securityScore?: int32(name='SecurityScore'),
  success?: boolean(name='Success'),
}

model DescribeSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSummaryInfoResponseBody(name='body'),
}

async function describeSummaryInfo(request: DescribeSummaryInfoRequest): DescribeSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportRegionRequest {
}

model DescribeSupportRegionResponseBody = {
  requestId?: string(name='RequestId'),
  supportRegion?: [ string ](name='SupportRegion'),
}

model DescribeSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportRegionResponseBody(name='body'),
}

async function describeSupportRegion(request: DescribeSupportRegionRequest): DescribeSupportRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportRegion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventDetailRequest {
  from: string(name='From', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  suspiciousEventId?: int32(name='SuspiciousEventId', position='Query'),
}

model DescribeSuspEventDetailResponseBody = {
  canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
  dataSource?: string(name='DataSource'),
  details?: [ 
    {
      nameDisplay?: string(name='NameDisplay'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Details'),
  eventDesc?: string(name='EventDesc'),
  eventName?: string(name='EventName'),
  eventStatus?: string(name='EventStatus'),
  eventTypeDesc?: string(name='EventTypeDesc'),
  id?: int32(name='Id'),
  instanceName?: string(name='InstanceName'),
  internetIp?: string(name='InternetIp'),
  intranetIp?: string(name='IntranetIp'),
  lastTime?: string(name='LastTime'),
  level?: string(name='Level'),
  operateErrorCode?: string(name='OperateErrorCode'),
  operateMsg?: string(name='OperateMsg'),
  requestId?: string(name='RequestId'),
  saleVersion?: string(name='SaleVersion'),
  uuid?: string(name='Uuid'),
}

model DescribeSuspEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventDetailResponseBody(name='body'),
}

async function describeSuspEventDetail(request: DescribeSuspEventDetailRequest): DescribeSuspEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: string(name='CurrentPage', position='Query'),
  from?: string(name='From', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  groupingId?: long(name='GroupingId', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  quaraTag?: string(name='QuaraTag', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  quaraFiles?: [ 
    {
      eventName?: string(name='EventName'),
      eventType?: string(name='EventType'),
      id?: int32(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      ip?: string(name='Ip'),
      link?: string(name='Link'),
      md5?: string(name='Md5'),
      modifyTime?: string(name='ModifyTime'),
      path?: string(name='Path'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
      uuid?: string(name='Uuid'),
    }
  ](name='QuaraFiles'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventQuaraFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', position='Query'),
  currentPage?: string(name='CurrentPage', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  eventNames?: string(name='EventNames', position='Query'),
  from?: string(name='From', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  id?: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  levels?: string(name='Levels', position='Query'),
  name?: string(name='Name', position='Query'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  parentEventTypes?: string(name='ParentEventTypes', position='Query'),
  remark?: string(name='Remark', position='Query'),
  source?: string(name='Source', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
  tacticId?: string(name='TacticId', position='Body'),
  targetType?: string(name='TargetType', position='Query'),
  uniqueInfo?: string(name='UniqueInfo', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeSuspEventsResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      advanced?: boolean(name='Advanced'),
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      appName?: string(name='AppName'),
      autoBreaking?: boolean(name='AutoBreaking'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      containHwMode?: boolean(name='ContainHwMode'),
      containerId?: string(name='ContainerId'),
      containerImageId?: string(name='ContainerImageId'),
      containerImageName?: string(name='ContainerImageName'),
      dataSource?: string(name='DataSource'),
      desc?: string(name='Desc'),
      details?: [ 
        {
          nameDisplay?: string(name='NameDisplay'),
          type?: string(name='Type'),
          value?: string(name='Value'),
          valueDisplay?: string(name='ValueDisplay'),
        }
      ](name='Details'),
      eventNotes?: [ 
        {
          note?: string(name='Note'),
          noteId?: long(name='NoteId'),
          noteTime?: string(name='NoteTime'),
        }
      ](name='EventNotes'),
      eventStatus?: int32(name='EventStatus'),
      eventSubType?: string(name='EventSubType'),
      hasTraceInfo?: boolean(name='HasTraceInfo'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      k8sClusterId?: string(name='K8sClusterId'),
      k8sClusterName?: string(name='K8sClusterName'),
      k8sNamespace?: string(name='K8sNamespace'),
      k8sNodeId?: string(name='K8sNodeId'),
      k8sNodeName?: string(name='K8sNodeName'),
      k8sPodName?: string(name='K8sPodName'),
      lastTime?: string(name='LastTime'),
      lastTimeStamp?: long(name='LastTimeStamp'),
      level?: string(name='Level'),
      maliciousRuleStatus?: string(name='MaliciousRuleStatus'),
      markMisRules?: string(name='MarkMisRules'),
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      occurrenceTimeStamp?: long(name='OccurrenceTimeStamp'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateMsg?: string(name='OperateMsg'),
      operateTime?: long(name='OperateTime'),
      saleVersion?: string(name='SaleVersion'),
      securityEventIds?: string(name='SecurityEventIds'),
      stages?: string(name='Stages'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName'),
          tacticId?: string(name='TacticId'),
        }
      ](name='TacticItems', description='攻击阶段展示名'),
      uniqueInfo?: string(name='UniqueInfo'),
      uuid?: string(name='Uuid'),
    }
  ](name='SuspEvents'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEvents', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSuspiciousUUIDConfigRequest {
  type: string(name='Type', position='Query'),
}

model DescribeSuspiciousUUIDConfigResponseBody = {
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
  UUIDList?: [ string ](name='UUIDList'),
}

model DescribeSuspiciousUUIDConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspiciousUUIDConfigResponseBody(name='body'),
}

async function describeSuspiciousUUIDConfig(request: DescribeSuspiciousUUIDConfigRequest): DescribeSuspiciousUUIDConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspiciousUUIDConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBackupMachinesRequest {
}

model DescribeUserBackupMachinesResponseBody = {
  machines?: [ 
    {
      id?: long(name='Id'),
      policyName?: string(name='PolicyName'),
      uuid?: string(name='Uuid'),
    }
  ](name='Machines'),
  requestId?: string(name='RequestId'),
}

model DescribeUserBackupMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBackupMachinesResponseBody(name='body'),
}

async function describeUserBackupMachines(request: DescribeUserBackupMachinesRequest): DescribeUserBackupMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBackupMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBaselineAuthorizationRequest {
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserBaselineAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  userBaselineAuthorization?: {
    status?: int32(name='Status'),
  }(name='UserBaselineAuthorization'),
}

model DescribeUserBaselineAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBaselineAuthorizationResponseBody(name='body'),
}

async function describeUserBaselineAuthorization(request: DescribeUserBaselineAuthorizationRequest): DescribeUserBaselineAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBaselineAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserLayoutAuthorizationRequest {
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserLayoutAuthorizationResponseBody = {
  authorized?: boolean(name='Authorized'),
  requestId?: string(name='RequestId'),
}

model DescribeUserLayoutAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLayoutAuthorizationResponseBody(name='body'),
}

async function describeUserLayoutAuthorization(request: DescribeUserLayoutAuthorizationRequest): DescribeUserLayoutAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserLayoutAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUuidsByVulNamesRequest {
  dealed?: string(name='Dealed', position='Query'),
  fieldName?: string(name='FieldName', position='Query'),
  fieldValue?: string(name='FieldValue', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  level?: string(name='Level', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  remark?: string(name='Remark', position='Query'),
  searchTags?: string(name='SearchTags', position='Query'),
  statusList?: string(name='StatusList', position='Query'),
  tag?: string(name='Tag', position='Query'),
  targetType?: string(name='TargetType', position='Query'),
  type: string(name='Type', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', position='Query'),
  vulNames: [ string ](name='VulNames', position='Query'),
}

model DescribeUuidsByVulNamesResponseBody = {
  machineInfoStatistics?: [ 
    {
      machineInstanceId?: string(name='MachineInstanceId'),
      machineIp?: string(name='MachineIp'),
      machineName?: string(name='MachineName'),
      os?: string(name='Os'),
      regionId?: string(name='RegionId'),
      uuid?: string(name='Uuid'),
    }
  ](name='MachineInfoStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeUuidsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUuidsByVulNamesResponseBody(name='body'),
}

async function describeUuidsByVulNames(request: DescribeUuidsByVulNamesRequest): DescribeUuidsByVulNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUuidsByVulNames', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVersionConfigRequest {
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeVersionConfigResponseBody = {
  allowPartialBuy?: int32(name='AllowPartialBuy'),
  appWhiteList?: int32(name='AppWhiteList'),
  appWhiteListAuthCount?: long(name='AppWhiteListAuthCount'),
  assetLevel?: int32(name='AssetLevel'),
  highestVersion?: int32(name='HighestVersion'),
  honeypotCapacity?: long(name='HoneypotCapacity'),
  imageScanCapacity?: long(name='ImageScanCapacity'),
  instanceId?: string(name='InstanceId'),
  isOverBalance?: boolean(name='IsOverBalance'),
  isTrialVersion?: int32(name='IsTrialVersion'),
  lastTrailEndTime?: long(name='LastTrailEndTime'),
  MVAuthCount?: int32(name='MVAuthCount'),
  MVUnusedAuthCount?: int32(name='MVUnusedAuthCount'),
  releaseTime?: long(name='ReleaseTime'),
  requestId?: string(name='RequestId'),
  sasLog?: int32(name='SasLog'),
  sasScreen?: int32(name='SasScreen'),
  slsCapacity?: long(name='SlsCapacity'),
  userDefinedAlarms?: int32(name='UserDefinedAlarms'),
  version?: int32(name='Version'),
  vmCores?: int32(name='VmCores'),
  webLock?: int32(name='WebLock'),
  webLockAuthCount?: long(name='WebLockAuthCount'),
}

model DescribeVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVersionConfigResponseBody(name='body'),
}

async function describeVersionConfig(request: DescribeVersionConfigRequest): DescribeVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVersionConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcHoneyPotCriteriaRequest {
}

model DescribeVpcHoneyPotCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeVpcHoneyPotCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcHoneyPotCriteriaResponseBody(name='body'),
}

async function describeVpcHoneyPotCriteria(request: DescribeVpcHoneyPotCriteriaRequest): DescribeVpcHoneyPotCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcHoneyPotCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcHoneyPotListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  honeyPotExistence?: boolean(name='HoneyPotExistence', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  vpcName?: string(name='VpcName', position='Query'),
  vpcRegionId?: string(name='VpcRegionId', position='Query'),
}

model DescribeVpcHoneyPotListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  vpcHoneyPotDTOList?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      createTime?: long(name='CreateTime'),
      honeyPotEcsInstanceStatus?: string(name='HoneyPotEcsInstanceStatus'),
      honeyPotEniInstanceId?: string(name='HoneyPotEniInstanceId'),
      honeyPotExistence?: boolean(name='HoneyPotExistence'),
      honeyPotInstanceStatus?: string(name='HoneyPotInstanceStatus'),
      honeyPotVpcSwitchId?: string(name='HoneyPotVpcSwitchId'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcRegionId?: string(name='VpcRegionId'),
      vpcStatus?: string(name='VpcStatus'),
      vpcSwitchIdList?: [ 
        {
          vpcSwitchId?: string(name='VpcSwitchId'),
          vpcSwitchName?: string(name='VpcSwitchName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='VpcSwitchIdList'),
    }
  ](name='VpcHoneyPotDTOList'),
}

model DescribeVpcHoneyPotListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcHoneyPotListResponseBody(name='body'),
}

async function describeVpcHoneyPotList(request: DescribeVpcHoneyPotListRequest): DescribeVpcHoneyPotListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcHoneyPotList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcListRequest {
}

model DescribeVpcListResponseBody = {
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
  vpcList?: [ 
    {
      ecsCount?: int32(name='EcsCount'),
      instanceDesc?: string(name='InstanceDesc'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      regionId?: string(name='RegionId'),
    }
  ](name='VpcList'),
}

model DescribeVpcListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcListResponseBody(name='body'),
}

async function describeVpcList(request: DescribeVpcListRequest): DescribeVpcListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', position='Query'),
  lang: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      classify?: string(name='Classify'),
      classifys?: [ 
        {
          classify?: string(name='Classify'),
          demoVideoUrl?: string(name='DemoVideoUrl'),
          description?: string(name='Description'),
        }
      ](name='Classifys'),
      cnvdId?: string(name='CnvdId'),
      complexity?: string(name='Complexity'),
      content?: string(name='Content'),
      cveId?: string(name='CveId'),
      cvssScore?: string(name='CvssScore'),
      cvssVector?: string(name='CvssVector'),
      poc?: string(name='Poc'),
      pocCreateTime?: long(name='PocCreateTime'),
      pocDisclosureTime?: long(name='PocDisclosureTime'),
      product?: string(name='Product'),
      reference?: string(name='Reference'),
      releaseTime?: long(name='ReleaseTime'),
      solution?: string(name='Solution'),
      summary?: string(name='Summary'),
      title?: string(name='Title'),
      vendor?: string(name='Vendor'),
      vulLevel?: string(name='VulLevel'),
    }
  ](name='Cves'),
  requestId?: string(name='RequestId'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulExportInfoRequest {
  exportId: long(name='ExportId', position='Query'),
}

model DescribeVulExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount'),
  exportStatus?: string(name='ExportStatus'),
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  link?: string(name='Link'),
  message?: string(name='Message'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVulExportInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulExportInfoResponseBody(name='body'),
}

async function describeVulExportInfo(request: DescribeVulExportInfoRequest): DescribeVulExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', position='Query'),
  attachTypes?: string(name='AttachTypes', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  remark?: string(name='Remark', position='Query'),
  type: string(name='Type', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', position='Query'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      extendContentJson?: {
        absolutePath?: string(name='AbsolutePath'),
        aliasName?: string(name='AliasName'),
        description?: string(name='Description'),
        ip?: string(name='Ip'),
        lastTs?: long(name='LastTs'),
        necessity?: {
          assetsFactor?: string(name='Assets_factor'),
          cvssFactor?: string(name='Cvss_factor'),
          enviromentFactor?: string(name='Enviroment_factor'),
          isCalc?: string(name='Is_calc'),
          status?: string(name='Status'),
          timeFactor?: string(name='Time_factor'),
          totalScore?: string(name='Total_score'),
        }(name='Necessity'),
        os?: string(name='Os'),
        osRelease?: string(name='OsRelease'),
        primaryId?: long(name='PrimaryId'),
        rpmEntityList?: [ 
          {
            containerName?: string(name='ContainerName'),
            fullVersion?: string(name='FullVersion'),
            imageName?: string(name='ImageName'),
            matchDetail?: string(name='MatchDetail'),
            matchList?: [ string ](name='MatchList'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            pid?: string(name='Pid'),
            updateCmd?: string(name='UpdateCmd'),
            version?: string(name='Version'),
          }
        ](name='RpmEntityList'),
        status?: string(name='Status'),
        tag?: string(name='Tag'),
        cveList?: [ string ](name='cveList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs'),
      groupId?: int32(name='GroupId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lastTs?: long(name='LastTs'),
      modifyTs?: long(name='ModifyTs'),
      name?: string(name='Name'),
      necessity?: string(name='Necessity'),
      online?: boolean(name='Online'),
      osVersion?: string(name='OsVersion'),
      primaryId?: long(name='PrimaryId'),
      regionId?: string(name='RegionId'),
      related?: string(name='Related'),
      repairTs?: long(name='RepairTs'),
      resultCode?: string(name='ResultCode'),
      resultMessage?: string(name='ResultMessage'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='VulRecords'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulWhitelistRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeVulWhitelistResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulWhitelists?: [ 
    {
      aliasName?: string(name='AliasName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
      targetInfo?: string(name='TargetInfo'),
      type?: string(name='Type'),
    }
  ](name='VulWhitelists'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWarningMachinesRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  machineName?: string(name='MachineName', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskId: long(name='RiskId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  strategyId?: long(name='StrategyId', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model DescribeWarningMachinesResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  warningMachines?: [ 
    {
      highWarningCount?: int32(name='HighWarningCount'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lowWarningCount?: int32(name='LowWarningCount'),
      mediumWarningCount?: int32(name='MediumWarningCount'),
      passCount?: int32(name='PassCount'),
      portOpen?: boolean(name='PortOpen'),
      regionId?: string(name='RegionId'),
      status?: int32(name='Status'),
      uuid?: string(name='Uuid'),
    }
  ](name='WarningMachines'),
}

model DescribeWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWarningMachinesResponseBody(name='body'),
}

async function describeWarningMachines(request: DescribeWarningMachinesRequest): DescribeWarningMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWarningMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockBindListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  remark?: string(name='Remark', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeWebLockBindListResponseBody = {
  bindList?: [ 
    {
      auditCount?: string(name='AuditCount'),
      blockCount?: string(name='BlockCount'),
      dirCount?: string(name='DirCount'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      os?: string(name='Os'),
      percent?: int32(name='Percent'),
      serviceCode?: string(name='ServiceCode'),
      serviceDetail?: string(name='ServiceDetail'),
      serviceStatus?: string(name='ServiceStatus'),
      status?: string(name='Status'),
      uuid?: string(name='Uuid'),
    }
  ](name='BindList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockBindListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebLockBindListResponseBody(name='body'),
}

async function describeWebLockBindList(request: DescribeWebLockBindListRequest): DescribeWebLockBindListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockBindList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockConfigListRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribeWebLockConfigListResponseBody = {
  configList?: [ 
    {
      defenceMode?: string(name='DefenceMode'),
      dir?: string(name='Dir'),
      exclusiveDir?: string(name='ExclusiveDir'),
      exclusiveFile?: string(name='ExclusiveFile'),
      exclusiveFileType?: string(name='ExclusiveFileType'),
      id?: string(name='Id'),
      inclusiveFile?: string(name='InclusiveFile'),
      inclusiveFileType?: string(name='InclusiveFileType'),
      localBackupDir?: string(name='LocalBackupDir'),
      mode?: string(name='Mode'),
      uuid?: string(name='Uuid'),
    }
  ](name='ConfigList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebLockConfigListResponseBody(name='body'),
}

async function describeWebLockConfigList(request: DescribeWebLockConfigListRequest): DescribeWebLockConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockConfigList', 'POST', '/', 'json', false, 'json', request);
}

model ExportRecordRequest {
  exportType: string(name='ExportType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  params?: string(name='Params', position='Query'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model ExportRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ExportRecordResponseBody(name='body'),
}

async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportRecord', 'POST', '/', 'json', false, 'json', request);
}

model ExportVulRequest {
  aliasName?: string(name='AliasName', position='Query'),
  attachTypes?: string(name='AttachTypes', position='Query'),
  dealed?: string(name='Dealed', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  necessity?: string(name='Necessity', position='Query'),
  searchTags?: string(name='SearchTags', position='Query'),
  type?: string(name='Type', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', position='Query'),
}

model ExportVulResponseBody = {
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model ExportVulResponse = {
  headers: map[string]string(name='headers'),
  body: ExportVulResponseBody(name='body'),
}

async function exportVul(request: ExportVulRequest): ExportVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportVul', 'POST', '/', 'json', false, 'json', request);
}

model ExportWarningRequest {
  dealed?: string(name='Dealed', position='Query'),
  exportType?: string(name='ExportType', position='Query'),
  isCleartextPwd?: int32(name='IsCleartextPwd', position='Query'),
  isSummaryExport?: int32(name='IsSummaryExport', position='Query'),
  lang?: string(name='Lang', position='Query'),
  riskIds?: string(name='RiskIds', position='Query'),
  riskLevels?: string(name='RiskLevels', position='Query'),
  riskName?: string(name='RiskName', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  statusList?: string(name='StatusList', position='Query'),
  strategyId?: long(name='StrategyId', position='Query'),
  subTypeNames?: string(name='SubTypeNames', position='Query'),
  typeName?: string(name='TypeName', position='Query'),
  typeNames?: string(name='TypeNames', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model ExportWarningResponseBody = {
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model ExportWarningResponse = {
  headers: map[string]string(name='headers'),
  body: ExportWarningResponseBody(name='body'),
}

async function exportWarning(request: ExportWarningRequest): ExportWarningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportWarning', 'POST', '/', 'json', false, 'json', request);
}

model FixCheckWarningsRequest {
  checkParams: string(name='CheckParams', position='Query'),
  lang?: string(name='Lang', position='Query'),
  riskId: long(name='RiskId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuids: string(name='Uuids', position='Query'),
}

model FixCheckWarningsResponseBody = {
  batchId?: long(name='BatchId'),
  requestId?: string(name='RequestId'),
}

model FixCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: FixCheckWarningsResponseBody(name='body'),
}

async function fixCheckWarnings(request: FixCheckWarningsRequest): FixCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FixCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupStorageCountRequest {
}

model GetBackupStorageCountResponseBody = {
  backupStorageCount?: {
    buyStorageByte?: long(name='BuyStorageByte'),
    ecsUsageStorageByte?: long(name='EcsUsageStorageByte'),
    overflow?: int32(name='Overflow'),
    uniUsageStorageByte?: long(name='UniUsageStorageByte'),
    usageStorageByte?: long(name='UsageStorageByte'),
  }(name='BackupStorageCount'),
  requestId?: string(name='RequestId'),
}

model GetBackupStorageCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetBackupStorageCountResponseBody(name='body'),
}

async function getBackupStorageCount(request: GetBackupStorageCountRequest): GetBackupStorageCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackupStorageCount', 'POST', '/', 'json', false, 'json', request);
}

model GetSuspiciousStatisticsRequest {
  groupIdList: string(name='GroupIdList', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model GetSuspiciousStatisticsResponseBody = {
  remindCount?: int32(name='RemindCount'),
  requestId?: string(name='RequestId'),
  seriousCount?: int32(name='SeriousCount'),
  suspiciousCount?: int32(name='SuspiciousCount'),
  totalCount?: int32(name='TotalCount'),
}

model GetSuspiciousStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSuspiciousStatisticsResponseBody(name='body'),
}

async function getSuspiciousStatistics(request: GetSuspiciousStatisticsRequest): GetSuspiciousStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuspiciousStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetVulStatisticsRequest {
  groupIdList: string(name='GroupIdList', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  typeList: string(name='TypeList', position='Query'),
}

model GetVulStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  vulAsapSum?: int32(name='VulAsapSum'),
  vulLaterSum?: int32(name='VulLaterSum'),
  vulNntfSum?: int32(name='VulNntfSum'),
}

model GetVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetVulStatisticsResponseBody(name='body'),
}

async function getVulStatistics(request: GetVulStatisticsRequest): GetVulStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulStatistics', 'POST', '/', 'json', false, 'json', request);
}

model HandleSecurityEventsRequest {
  markBatch?: string(name='MarkBatch', position='Query'),
  markMissParam?: string(name='MarkMissParam', position='Query'),
  operationCode?: string(name='OperationCode', position='Query'),
  operationParams?: string(name='OperationParams', position='Query'),
  securityEventIds?: [ string ](name='SecurityEventIds', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model HandleSecurityEventsResponseBody = {
  handleSecurityEventsResponse?: {
    taskId?: long(name='TaskId'),
  }(name='HandleSecurityEventsResponse'),
  requestId?: string(name='RequestId'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model HandleSimilarSecurityEventsRequest {
  markMissParam?: string(name='MarkMissParam', position='Query'),
  operationCode: string(name='OperationCode', position='Query'),
  operationParams?: string(name='OperationParams', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model HandleSimilarSecurityEventsResponseBody = {
  requestId?: string(name='RequestId'),
}

model HandleSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: HandleSimilarSecurityEventsResponseBody(name='body'),
}

async function handleSimilarSecurityEvents(request: HandleSimilarSecurityEventsRequest): HandleSimilarSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleSimilarSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model IgnoreHcCheckWarningsRequest {
  checkIds?: string(name='CheckIds', position='Query'),
  checkWarningIds?: string(name='CheckWarningIds', position='Query'),
  reason?: string(name='Reason', position='Query'),
  riskId: string(name='RiskId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type: long(name='Type', position='Query'),
}

model IgnoreHcCheckWarningsResponseBody = {
  requestId?: string(name='RequestId'),
}

model IgnoreHcCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreHcCheckWarningsResponseBody(name='body'),
}

async function ignoreHcCheckWarnings(request: IgnoreHcCheckWarningsRequest): IgnoreHcCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IgnoreHcCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model InstallBackupClientRequest {
  policyVersion: string(name='PolicyVersion', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model InstallBackupClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  body: InstallBackupClientResponseBody(name='body'),
}

async function installBackupClient(request: InstallBackupClientRequest): InstallBackupClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallBackupClient', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudMonitorRequest {
  agentAccessKey?: string(name='AgentAccessKey', description='非阿里云主机安装云监控插件时所需要的AccessKey', position='Query'),
  agentSecretKey?: string(name='AgentSecretKey', description='非阿里云主机安装云监控插件时所需要的AccessSecret', position='Query'),
  argusVersion: string(name='ArgusVersion', description='云监控版本', position='Query'),
  instanceIdList?: [ string ](name='InstanceIdList', description='实例 instanceId', position='Query'),
  uuidList?: [ string ](name='UuidList', description='uuid 列表', position='Query'),
}

model InstallCloudMonitorResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InstallCloudMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: InstallCloudMonitorResponseBody(name='body'),
}

async function installCloudMonitor(request: InstallCloudMonitorRequest): InstallCloudMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudMonitor', 'POST', '/', 'json', false, 'json', request);
}

model ListVulAutoRepairConfigRequest {
  aliasName?: string(name='AliasName', description='漏洞别名', position='Query'),
  currentPage?: int32(name='CurrentPage', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  type?: string(name='Type', description='漏洞类型', position='Query'),
}

model ListVulAutoRepairConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='VulAutoRepairConfigList'),
}

model ListVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListVulAutoRepairConfigResponseBody(name='body'),
}

async function listVulAutoRepairConfig(request: ListVulAutoRepairConfigRequest): ListVulAutoRepairConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVulAutoRepairConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', position='Query'),
  failCount?: int32(name='FailCount', position='Query'),
  forbiddenTime?: int32(name='ForbiddenTime', position='Query'),
  id?: long(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  span?: int32(name='Span', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model ModifyAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyAntiBruteForceRule(request: ModifyAntiBruteForceRuleRequest): ModifyAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAssetGroupRequest {
  groupId: long(name='GroupId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuids: string(name='Uuids', position='Query'),
}

model ModifyAssetGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAssetGroupResponseBody(name='body'),
}

async function modifyAssetGroup(request: ModifyAssetGroupRequest): ModifyAssetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAssetGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  id: long(name='Id', position='Query'),
  name: string(name='Name', position='Query'),
  policy: map[string]any(name='Policy', shrink='json', position='Query'),
  policyRegionId?: string(name='PolicyRegionId', position='Query'),
  policyVersion?: string(name='PolicyVersion', position='Query'),
  uuidList: [ string ](name='UuidList', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyStatusRequest {
  id: long(name='Id', position='Query'),
  policyVersion: string(name='PolicyVersion', position='Query'),
  status: string(name='Status', position='Query'),
}

model ModifyBackupPolicyStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyStatusResponseBody(name='body'),
}

async function modifyBackupPolicyStatus(request: ModifyBackupPolicyStatusRequest): ModifyBackupPolicyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicyStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCreateVulWhitelistRequest {
  reason?: string(name='Reason', position='Query'),
  targetInfo?: string(name='TargetInfo', position='Query'),
  whitelist?: string(name='Whitelist', position='Query'),
}

model ModifyCreateVulWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCreateVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCreateVulWhitelistResponseBody(name='body'),
}

async function modifyCreateVulWhitelist(request: ModifyCreateVulWhitelistRequest): ModifyCreateVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCreateVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEmgVulSubmitRequest {
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  userAgreement: string(name='UserAgreement', position='Query'),
}

model ModifyEmgVulSubmitResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEmgVulSubmitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEmgVulSubmitResponseBody(name='body'),
}

async function modifyEmgVulSubmit(request: ModifyEmgVulSubmitRequest): ModifyEmgVulSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEmgVulSubmit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupPropertyRequest {
  data: string(name='Data', position='Query'),
}

model ModifyGroupPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGroupPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGroupPropertyResponseBody(name='body'),
}

async function modifyGroupProperty(request: ModifyGroupPropertyRequest): ModifyGroupPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroupProperty', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAntiBruteForceRuleRequest {
  newRuleId: long(name='NewRuleId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model ModifyInstanceAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyInstanceAntiBruteForceRule(request: ModifyInstanceAntiBruteForceRuleRequest): ModifyInstanceAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLoginBaseConfigRequest {
  config: string(name='Config', position='Query'),
  target: string(name='Target', position='Query'),
  type: string(name='Type', position='Query'),
}

model ModifyLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLoginBaseConfigResponseBody(name='body'),
}

async function modifyLoginBaseConfig(request: ModifyLoginBaseConfigRequest): ModifyLoginBaseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLoginBaseConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLoginSwitchConfigRequest {
  item: string(name='Item', position='Query'),
  status: int32(name='Status', position='Query'),
}

model ModifyLoginSwitchConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLoginSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLoginSwitchConfigResponseBody(name='body'),
}

async function modifyLoginSwitchConfig(request: ModifyLoginSwitchConfigRequest): ModifyLoginSwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLoginSwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOpenLogShipperRequest {
  from?: string(name='From', position='Query'),
}

model ModifyOpenLogShipperResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOpenLogShipperResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOpenLogShipperResponseBody(name='body'),
}

async function modifyOpenLogShipper(request: ModifyOpenLogShipperRequest): ModifyOpenLogShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOpenLogShipper', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOperateVulRequest {
  info: string(name='Info', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  reason?: string(name='Reason', position='Query'),
  type: string(name='Type', position='Query'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOperateVul', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPropertyScheduleConfigRequest {
  scheduleTime: string(name='ScheduleTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model ModifyPropertyScheduleConfigResponseBody = {
  modifyResult?: boolean(name='ModifyResult'),
  requestId?: string(name='RequestId'),
}

model ModifyPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPropertyScheduleConfigResponseBody(name='body'),
}

async function modifyPropertyScheduleConfig(request: ModifyPropertyScheduleConfigRequest): ModifyPropertyScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPropertyScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPushAllTaskRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
  tasks: string(name='Tasks', position='Query'),
  uuids: string(name='Uuids', position='Query'),
}

model ModifyPushAllTaskResponseBody = {
  pushTaskRsp?: {
    pushTaskResultList?: [ 
      {
        groupId?: long(name='GroupId'),
        instanceId?: string(name='InstanceId'),
        instanceName?: string(name='InstanceName'),
        ip?: string(name='Ip'),
        message?: string(name='Message'),
        online?: boolean(name='Online'),
        osVersion?: string(name='OsVersion'),
        region?: string(name='Region'),
        success?: boolean(name='Success'),
        uuid?: string(name='Uuid'),
      }
    ](name='PushTaskResultList'),
  }(name='PushTaskRsp'),
  requestId?: string(name='RequestId'),
}

model ModifyPushAllTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPushAllTaskResponseBody(name='body'),
}

async function modifyPushAllTask(request: ModifyPushAllTaskRequest): ModifyPushAllTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPushAllTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRiskCheckStatusRequest {
  itemId: long(name='ItemId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status: string(name='Status', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model ModifyRiskCheckStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRiskCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRiskCheckStatusResponseBody(name='body'),
}

async function modifyRiskCheckStatus(request: ModifyRiskCheckStatusRequest): ModifyRiskCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRiskCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRiskSingleResultStatusRequest {
  ids?: [ string ](name='Ids', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId: long(name='TaskId', position='Query'),
}

model ModifyRiskSingleResultStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRiskSingleResultStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRiskSingleResultStatusResponseBody(name='body'),
}

async function modifyRiskSingleResultStatus(request: ModifyRiskSingleResultStatusRequest): ModifyRiskSingleResultStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRiskSingleResultStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityCheckScheduleConfigRequest {
  daysOfWeek: string(name='DaysOfWeek', position='Query'),
  endTime: int32(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
}

model ModifySecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityCheckScheduleConfigResponseBody(name='body'),
}

async function modifySecurityCheckScheduleConfig(request: ModifySecurityCheckScheduleConfigRequest): ModifySecurityCheckScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityCheckScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStartVulScanRequest {
  types?: string(name='Types', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model ModifyStartVulScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStartVulScanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStartVulScanResponseBody(name='body'),
}

async function modifyStartVulScan(request: ModifyStartVulScanRequest): ModifyStartVulScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStartVulScan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStrategyRequest {
  customType?: string(name='CustomType', position='Query'),
  cycleDays?: string(name='CycleDays', position='Query'),
  cycleStartTime?: string(name='CycleStartTime', position='Query'),
  id?: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  riskCustomParams?: string(name='RiskCustomParams', position='Query'),
  riskSubTypeName?: string(name='RiskSubTypeName', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model ModifyStrategyResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  result?: {
    strategyId?: int32(name='StrategyId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ModifyStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStrategyResponseBody(name='body'),
}

async function modifyStrategy(request: ModifyStrategyRequest): ModifyStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStrategyTargetRequest {
  config?: string(name='Config', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  target?: string(name='Target', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ModifyStrategyTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStrategyTargetResponseBody(name='body'),
}

async function modifyStrategyTarget(request: ModifyStrategyTargetRequest): ModifyStrategyTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStrategyTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTagWithUuidRequest {
  machineTypes?: string(name='MachineTypes', position='Query'),
  tagId?: string(name='TagId', position='Query'),
  tagList: string(name='TagList', position='Query'),
  uuidList?: string(name='UuidList', position='Query'),
}

model ModifyTagWithUuidResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTagWithUuidResponseBody(name='body'),
}

async function modifyTagWithUuid(request: ModifyTagWithUuidRequest): ModifyTagWithUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTagWithUuid', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcHoneyPotRequest {
  honeyPotAction: string(name='HoneyPotAction', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model ModifyVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcHoneyPotResponseBody(name='body'),
}

async function modifyVpcHoneyPot(request: ModifyVpcHoneyPotRequest): ModifyVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVulTargetConfigRequest {
  config: string(name='Config', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type?: string(name='Type', position='Query'),
  uuid: string(name='Uuid', position='Query'),
}

model ModifyVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVulTargetConfigResponseBody(name='body'),
}

async function modifyVulTargetConfig(request: ModifyVulTargetConfigRequest): ModifyVulTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVulTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockCreateConfigRequest {
  defenceMode?: string(name='DefenceMode', position='Query'),
  dir?: string(name='Dir', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', position='Query'),
  inclusiveFile?: string(name='InclusiveFile', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  localBackupDir?: string(name='LocalBackupDir', position='Query'),
  mode?: string(name='Mode', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ModifyWebLockCreateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockCreateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockCreateConfigResponseBody(name='body'),
}

async function modifyWebLockCreateConfig(request: ModifyWebLockCreateConfigRequest): ModifyWebLockCreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockCreateConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockDeleteConfigRequest {
  id?: int32(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ModifyWebLockDeleteConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockDeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockDeleteConfigResponseBody(name='body'),
}

async function modifyWebLockDeleteConfig(request: ModifyWebLockDeleteConfigRequest): ModifyWebLockDeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockDeleteConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockStartRequest {
  defenceMode?: string(name='DefenceMode', position='Query'),
  dir?: string(name='Dir', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', position='Query'),
  localBackupDir?: string(name='LocalBackupDir', position='Query'),
  mode?: string(name='Mode', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ModifyWebLockStartResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockStartResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockStartResponseBody(name='body'),
}

async function modifyWebLockStart(request: ModifyWebLockStartRequest): ModifyWebLockStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockStart', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockStatusRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  status?: string(name='Status', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ModifyWebLockStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockStatusResponseBody(name='body'),
}

async function modifyWebLockStatus(request: ModifyWebLockStatusRequest): ModifyWebLockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockUpdateConfigRequest {
  defenceMode?: string(name='DefenceMode', position='Query'),
  dir?: string(name='Dir', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', position='Query'),
  id?: int32(name='Id', position='Query'),
  inclusiveFile?: string(name='InclusiveFile', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  localBackupDir?: string(name='LocalBackupDir', position='Query'),
  mode?: string(name='Mode', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ModifyWebLockUpdateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockUpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockUpdateConfigResponseBody(name='body'),
}

async function modifyWebLockUpdateConfig(request: ModifyWebLockUpdateConfigRequest): ModifyWebLockUpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockUpdateConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateAgentClientInstallRequest {
  instanceIds?: string(name='InstanceIds', position='Query'),
  uuids?: string(name='Uuids', position='Query'),
}

model OperateAgentClientInstallResponseBody = {
  aegisCelintInstallResposeList?: [ 
    {
      instanceId?: string(name='InstanceId'),
      recordId?: long(name='RecordId'),
      uuid?: string(name='Uuid'),
    }
  ](name='AegisCelintInstallResposeList'),
  requestId?: string(name='RequestId'),
}

model OperateAgentClientInstallResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAgentClientInstallResponseBody(name='body'),
}

async function operateAgentClientInstall(request: OperateAgentClientInstallRequest): OperateAgentClientInstallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAgentClientInstall', 'POST', '/', 'json', false, 'json', request);
}

model OperateSuspiciousTargetConfigRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  targetOperations: string(name='TargetOperations', position='Query'),
  targetType: string(name='TargetType', position='Query'),
  type: string(name='Type', position='Query'),
}

model OperateSuspiciousTargetConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateSuspiciousTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: OperateSuspiciousTargetConfigResponseBody(name='body'),
}

async function operateSuspiciousTargetConfig(request: OperateSuspiciousTargetConfigRequest): OperateSuspiciousTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateSuspiciousTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateVulsRequest {
  operateType: string(name='OperateType', position='Query'),
  type: string(name='Type', position='Query'),
  uuids: [ string ](name='Uuids', position='Query'),
  vulNames: [ string ](name='VulNames', position='Query'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateVuls', 'POST', '/', 'json', false, 'json', request);
}

model OperationSuspEventsRequest {
  from?: string(name='From', position='Query'),
  operation?: string(name='Operation', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  subOperation?: string(name='SubOperation', position='Query'),
  suspiciousEventIds?: string(name='SuspiciousEventIds', position='Query'),
  warnType?: string(name='WarnType', position='Query'),
}

model OperationSuspEventsResponseBody = {
  accessCode?: string(name='AccessCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperationSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  body: OperationSuspEventsResponseBody(name='body'),
}

async function operationSuspEvents(request: OperationSuspEventsRequest): OperationSuspEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperationSuspEvents', 'POST', '/', 'json', false, 'json', request);
}

model PauseClientRequest {
  uuids: string(name='Uuids', position='Query'),
  value: string(name='Value', position='Query'),
}

model PauseClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model PauseClientResponse = {
  headers: map[string]string(name='headers'),
  body: PauseClientResponseBody(name='body'),
}

async function pauseClient(request: PauseClientRequest): PauseClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseClient', 'POST', '/', 'json', false, 'json', request);
}

model PublicCreateImageScanTaskRequest {
  digests?: string(name='Digests', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  regionIds?: string(name='RegionIds', position='Query'),
  registryTypes?: string(name='RegistryTypes', position='Query'),
  repoIds?: string(name='RepoIds', position='Query'),
  repoNames?: string(name='RepoNames', position='Query'),
  repoNamespaces?: string(name='RepoNamespaces', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model PublicCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate'),
    collectTime?: long(name='CollectTime'),
    execTime?: long(name='ExecTime'),
    finishCount?: int32(name='FinishCount'),
    progress?: int32(name='Progress'),
    result?: string(name='Result'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PublicCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: PublicCreateImageScanTaskResponseBody(name='body'),
}

async function publicCreateImageScanTask(request: PublicCreateImageScanTaskRequest): PublicCreateImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicCreateImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model PublicPreCheckImageScanTaskRequest {
  digests?: string(name='Digests', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  regionIds?: string(name='RegionIds', position='Query'),
  registryTypes?: string(name='RegistryTypes', position='Query'),
  repoIds?: string(name='RepoIds', position='Query'),
  repoNames?: string(name='RepoNames', position='Query'),
  repoNamespaces?: string(name='RepoNamespaces', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model PublicPreCheckImageScanTaskResponseBody = {
  data?: {
    needAuthCount?: int32(name='NeedAuthCount'),
    scanImageCount?: int32(name='ScanImageCount'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PublicPreCheckImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: PublicPreCheckImageScanTaskResponseBody(name='body'),
}

async function publicPreCheckImageScanTask(request: PublicPreCheckImageScanTaskRequest): PublicPreCheckImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicPreCheckImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model PublicSyncAndCreateImageScanTaskRequest {
  images: string(name='Images', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model PublicSyncAndCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate'),
    collectTime?: long(name='CollectTime'),
    execTime?: long(name='ExecTime'),
    finishCount?: int32(name='FinishCount'),
    progress?: int32(name='Progress'),
    result?: string(name='Result'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PublicSyncAndCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: PublicSyncAndCreateImageScanTaskResponseBody(name='body'),
}

async function publicSyncAndCreateImageScanTask(request: PublicSyncAndCreateImageScanTaskRequest): PublicSyncAndCreateImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicSyncAndCreateImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupIdByGroupNameRequest {
  groupName: string(name='GroupName', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model QueryGroupIdByGroupNameResponseBody = {
  groupId?: long(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model QueryGroupIdByGroupNameResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGroupIdByGroupNameResponseBody(name='body'),
}

async function queryGroupIdByGroupName(request: QueryGroupIdByGroupNameRequest): QueryGroupIdByGroupNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupIdByGroupName', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupedSecurityEventMarkMissListRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  eventName?: string(name='EventName', description='告警事件名称（子类型）', position='Body'),
  from?: string(name='From', position='Body'),
  lang?: string(name='Lang', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  remark?: string(name='Remark', description='资产名', position='Body'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model QueryGroupedSecurityEventMarkMissListResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      aliUid?: long(name='AliUid', description='用户统一编号'),
      eventName?: string(name='EventName', description='告警事件名称（子类型）'),
      eventNameOriginal?: string(name='EventNameOriginal', description='告警事件名称（子类型）'),
      eventType?: string(name='EventType', description='告警事件名称（父类型）'),
      eventTypeOriginal?: string(name='EventTypeOriginal', description='告警事件名称（父类型）'),
      field?: string(name='Field', description='加白字段'),
      fieldValue?: string(name='FieldValue', description='加白值'),
      filedAliasName?: string(name='FiledAliasName', description='加白字段别名'),
      operate?: string(name='Operate', description='操作符'),
      uuids?: string(name='Uuids', description='资产ids，逗号分割'),
    }
  ](name='List'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGroupedSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGroupedSecurityEventMarkMissListResponseBody(name='body'),
}

async function queryGroupedSecurityEventMarkMissList(request: QueryGroupedSecurityEventMarkMissListRequest): QueryGroupedSecurityEventMarkMissListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupedSecurityEventMarkMissList', 'POST', '/', 'json', true, 'form', request);
}

model RefreshAssetsRequest {
  assetType?: string(name='AssetType', position='Query'),
}

model RefreshAssetsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefreshAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshAssetsResponseBody(name='body'),
}

async function refreshAssets(request: RefreshAssetsRequest): RefreshAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAssets', 'POST', '/', 'json', false, 'json', request);
}

model RefreshContainerAssetsRequest {
  assetType: string(name='AssetType', position='Query'),
}

model RefreshContainerAssetsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefreshContainerAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshContainerAssetsResponseBody(name='body'),
}

async function refreshContainerAssets(request: RefreshContainerAssetsRequest): RefreshContainerAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshContainerAssets', 'POST', '/', 'json', false, 'json', request);
}

model RollbackSuspEventQuaraFileRequest {
  from?: string(name='From', position='Query'),
  quaraFileId?: int32(name='QuaraFileId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackSuspEventQuaraFile', 'POST', '/', 'json', false, 'json', request);
}

model SasInstallCodeRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model SasInstallCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model SasInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  body: SasInstallCodeResponseBody(name='body'),
}

async function sasInstallCode(request: SasInstallCodeRequest): SasInstallCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SasInstallCode', 'POST', '/', 'json', false, 'json', request);
}

model StartBaselineSecurityCheckRequest {
  itemIds?: [ long ](name='ItemIds', position='Query'),
  lang?: string(name='Lang', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  type: string(name='Type', position='Query'),
}

model StartBaselineSecurityCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartBaselineSecurityCheckResponse = {
  headers: map[string]string(name='headers'),
  body: StartBaselineSecurityCheckResponseBody(name='body'),
}

async function startBaselineSecurityCheck(request: StartBaselineSecurityCheckRequest): StartBaselineSecurityCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBaselineSecurityCheck', 'POST', '/', 'json', false, 'json', request);
}

model StartVirusScanTaskRequest {
  targetInfo: string(name='TargetInfo', position='Query'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskId?: long(name='ScanTaskId'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartVirusScanTask', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAegisRequest {
  uuids: string(name='Uuids', position='Query'),
}

model UnbindAegisResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAegisResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAegisResponseBody(name='body'),
}

async function unbindAegis(request: UnbindAegisRequest): UnbindAegisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAegis', 'POST', '/', 'json', false, 'json', request);
}

model UninstallBackupClientRequest {
  policyVersion: string(name='PolicyVersion', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model UninstallBackupClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model UninstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallBackupClientResponseBody(name='body'),
}

async function uninstallBackupClient(request: UninstallBackupClientRequest): UninstallBackupClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallBackupClient', 'POST', '/', 'json', false, 'json', request);
}

model ValidateHcWarningsRequest {
  riskIds: string(name='RiskIds', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  uuids: string(name='Uuids', position='Query'),
}

model ValidateHcWarningsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ValidateHcWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateHcWarningsResponseBody(name='body'),
}

async function validateHcWarnings(request: ValidateHcWarningsRequest): ValidateHcWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateHcWarnings', 'POST', '/', 'json', false, 'json', request);
}

