/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-hangzhou = 'tds.aliyuncs.com',
    ap-southeast-3 = 'tds.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'tds.aliyuncs.com',
    ap-northeast-2-pop = 'tds.aliyuncs.com',
    ap-south-1 = 'tds.aliyuncs.com',
    ap-southeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'tds.aliyuncs.com',
    ap-southeast-5 = 'tds.aliyuncs.com',
    cn-beijing = 'tds.aliyuncs.com',
    cn-beijing-finance-1 = 'tds.aliyuncs.com',
    cn-beijing-finance-pop = 'tds.aliyuncs.com',
    cn-beijing-gov-1 = 'tds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'tds.aliyuncs.com',
    cn-chengdu = 'tds.aliyuncs.com',
    cn-edge-1 = 'tds.aliyuncs.com',
    cn-fujian = 'tds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'tds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'tds.aliyuncs.com',
    cn-hangzhou-finance = 'tds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'tds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'tds.aliyuncs.com',
    cn-hangzhou-test-306 = 'tds.aliyuncs.com',
    cn-hongkong = 'tds.aliyuncs.com',
    cn-hongkong-finance-pop = 'tds.aliyuncs.com',
    cn-huhehaote = 'tds.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'tds.aliyuncs.com',
    cn-north-2-gov-1 = 'tds.aliyuncs.com',
    cn-qingdao = 'tds.aliyuncs.com',
    cn-qingdao-nebula = 'tds.aliyuncs.com',
    cn-shanghai = 'tds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'tds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'tds.aliyuncs.com',
    cn-shanghai-finance-1 = 'tds.aliyuncs.com',
    cn-shanghai-inner = 'tds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'tds.aliyuncs.com',
    cn-shenzhen = 'tds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'tds.aliyuncs.com',
    cn-shenzhen-inner = 'tds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'tds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'tds.aliyuncs.com',
    cn-wuhan = 'tds.aliyuncs.com',
    cn-wulanchabu = 'tds.aliyuncs.com',
    cn-yushanfang = 'tds.aliyuncs.com',
    cn-zhangbei = 'tds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'tds.aliyuncs.com',
    cn-zhangjiakou = 'tds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'tds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'tds.aliyuncs.com',
    eu-central-1 = 'tds.aliyuncs.com',
    eu-west-1 = 'tds.aliyuncs.com',
    eu-west-1-oxs = 'tds.aliyuncs.com',
    me-east-1 = 'tds.aliyuncs.com',
    rus-west-1-pop = 'tds.aliyuncs.com',
    us-east-1 = 'tds.aliyuncs.com',
    us-west-1 = 'tds.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('sas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddVpcHoneyPotRequest {
  vpcId?: string(name='VpcId'),
  vpcSwitchId?: string(name='VpcSwitchId'),
}

model AddVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: AddVpcHoneyPotResponseBody(name='body'),
}

async function addVpcHoneyPotWithOptions(request: AddVpcHoneyPotRequest, runtime: Util.RuntimeOptions): AddVpcHoneyPotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVpcHoneyPot', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVpcHoneyPot(request: AddVpcHoneyPotRequest): AddVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVpcHoneyPotWithOptions(request, runtime);
}

model CheckQuaraFileIdRequest {
  quaraFileIds?: [ string ](name='QuaraFileIds'),
  uuid?: string(name='Uuid'),
}

model CheckQuaraFileIdResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckQuaraFileIdResponse = {
  headers: map[string]string(name='headers'),
  body: CheckQuaraFileIdResponseBody(name='body'),
}

async function checkQuaraFileIdWithOptions(request: CheckQuaraFileIdRequest, runtime: Util.RuntimeOptions): CheckQuaraFileIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckQuaraFileId', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkQuaraFileId(request: CheckQuaraFileIdRequest): CheckQuaraFileIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkQuaraFileIdWithOptions(request, runtime);
}

model CheckSecurityEventIdRequest {
  securityEventIds?: [ string ](name='SecurityEventIds'),
  uuid?: string(name='Uuid'),
}

model CheckSecurityEventIdResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckSecurityEventIdResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSecurityEventIdResponseBody(name='body'),
}

async function checkSecurityEventIdWithOptions(request: CheckSecurityEventIdRequest, runtime: Util.RuntimeOptions): CheckSecurityEventIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckSecurityEventId', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkSecurityEventId(request: CheckSecurityEventIdRequest): CheckSecurityEventIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSecurityEventIdWithOptions(request, runtime);
}

model CreateAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule'),
  failCount?: int32(name='FailCount'),
  forbiddenTime?: int32(name='ForbiddenTime'),
  name?: string(name='Name'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  span?: int32(name='Span'),
  uuidList?: [ string ](name='UuidList'),
}

model CreateAntiBruteForceRuleResponseBody = {
  createAntiBruteForceRule?: {
    ruleId?: long(name='RuleId'),
  }(name='CreateAntiBruteForceRule'),
  requestId?: string(name='RequestId'),
}

model CreateAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAntiBruteForceRuleResponseBody(name='body'),
}

async function createAntiBruteForceRuleWithOptions(request: CreateAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): CreateAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAntiBruteForceRule', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAntiBruteForceRule(request: CreateAntiBruteForceRuleRequest): CreateAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntiBruteForceRuleWithOptions(request, runtime);
}

model CreateAssetRequest {
  instanceName?: string(name='InstanceName'),
  internetIp?: string(name='InternetIp'),
  intranetIp?: string(name='IntranetIp'),
  os?: string(name='Os'),
  osName?: string(name='OsName'),
  status?: string(name='Status'),
}

model CreateAssetResponseBody = {
  requestId?: string(name='RequestId'),
  uuid?: string(name='Uuid'),
}

model CreateAssetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAssetResponseBody(name='body'),
}

async function createAssetWithOptions(request: CreateAssetRequest, runtime: Util.RuntimeOptions): CreateAssetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAsset', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAsset(request: CreateAssetRequest): CreateAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAssetWithOptions(request, runtime);
}

model CreateBackupPolicyRequest {
  name?: string(name='Name'),
  policy?: map[string]any(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model CreateBackupPolicyShrinkRequest {
  name?: string(name='Name'),
  policyShrink?: string(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model CreateBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicyWithOptions(tmpReq: CreateBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPolicyWithOptions(request, runtime);
}

model CreateOrUpdateAssetGroupRequest {
  groupId?: long(name='GroupId'),
  groupName?: string(name='GroupName'),
  uuids?: string(name='Uuids'),
}

model CreateOrUpdateAssetGroupResponseBody = {
  groupId?: long(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model CreateOrUpdateAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateAssetGroupResponseBody(name='body'),
}

async function createOrUpdateAssetGroupWithOptions(request: CreateOrUpdateAssetGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateAssetGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrUpdateAssetGroup', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrUpdateAssetGroup(request: CreateOrUpdateAssetGroupRequest): CreateOrUpdateAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateAssetGroupWithOptions(request, runtime);
}

model CreateRestoreJobRequest {
  includes?: string(name='Includes'),
  snapshotHash?: string(name='SnapshotHash'),
  snapshotId?: string(name='SnapshotId'),
  snapshotVersion?: string(name='SnapshotVersion'),
  sourceType?: string(name='SourceType'),
  target?: string(name='Target'),
  uuid?: string(name='Uuid'),
  vaultId?: string(name='VaultId'),
}

model CreateRestoreJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRestoreJobResponseBody(name='body'),
}

async function createRestoreJobWithOptions(request: CreateRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRestoreJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRestoreJob', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRestoreJob(request: CreateRestoreJobRequest): CreateRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRestoreJobWithOptions(request, runtime);
}

model CreateSasOrderRequest {
  autoPay?: boolean(name='AutoPay'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  autoUseCoupon?: boolean(name='AutoUseCoupon'),
  containerImageScan?: string(name='ContainerImageScan'),
  instanceCount?: string(name='InstanceCount'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  sasAntiRansomware?: string(name='SasAntiRansomware'),
  sasProductService?: string(name='SasProductService'),
  sasSc?: string(name='SasSc'),
  sasSlsStorage?: string(name='SasSlsStorage'),
  sasWebguardBoolean?: string(name='SasWebguardBoolean'),
  sasWebguardOrderNum?: string(name='SasWebguardOrderNum'),
  spec?: string(name='Spec'),
  vcore?: string(name='Vcore'),
}

model CreateSasOrderResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateSasOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSasOrderResponseBody(name='body'),
}

async function createSasOrderWithOptions(request: CreateSasOrderRequest, runtime: Util.RuntimeOptions): CreateSasOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSasOrder', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSasOrder(request: CreateSasOrderRequest): CreateSasOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSasOrderWithOptions(request, runtime);
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('CreateServiceLinkedRole', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceLinkedRole(): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(runtime);
}

model CreateSimilarSecurityEventsQueryTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId'),
  similarEventScenarioCode?: string(name='SimilarEventScenarioCode'),
  sourceIp?: string(name='SourceIp'),
}

model CreateSimilarSecurityEventsQueryTaskResponseBody = {
  createSimilarSecurityEventsQueryTaskResponse?: {
    status?: string(name='Status'),
    taskId?: long(name='TaskId'),
  }(name='CreateSimilarSecurityEventsQueryTaskResponse'),
  requestId?: string(name='RequestId'),
}

model CreateSimilarSecurityEventsQueryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimilarSecurityEventsQueryTaskResponseBody(name='body'),
}

async function createSimilarSecurityEventsQueryTaskWithOptions(request: CreateSimilarSecurityEventsQueryTaskRequest, runtime: Util.RuntimeOptions): CreateSimilarSecurityEventsQueryTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSimilarSecurityEventsQueryTask', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSimilarSecurityEventsQueryTask(request: CreateSimilarSecurityEventsQueryTaskRequest): CreateSimilarSecurityEventsQueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
}

model CreateUniBackupPolicyRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  databaseAddByUser?: string(name='DatabaseAddByUser'),
  databaseType?: string(name='DatabaseType'),
  fullPlan?: map[string]any(name='FullPlan'),
  incPlan?: map[string]any(name='IncPlan'),
  instanceId?: string(name='InstanceId'),
  policyName?: string(name='PolicyName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retention?: int32(name='Retention'),
  sourceIp?: string(name='SourceIp'),
  speedLimiter?: long(name='SpeedLimiter'),
  uniRegionId?: string(name='UniRegionId'),
  uuid?: string(name='Uuid'),
}

model CreateUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  databaseAddByUser?: string(name='DatabaseAddByUser'),
  databaseType?: string(name='DatabaseType'),
  fullPlanShrink?: string(name='FullPlan'),
  incPlanShrink?: string(name='IncPlan'),
  instanceId?: string(name='InstanceId'),
  policyName?: string(name='PolicyName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retention?: int32(name='Retention'),
  sourceIp?: string(name='SourceIp'),
  speedLimiter?: long(name='SpeedLimiter'),
  uniRegionId?: string(name='UniRegionId'),
  uuid?: string(name='Uuid'),
}

model CreateUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUniBackupPolicyResponseBody(name='body'),
}

async function createUniBackupPolicyWithOptions(tmpReq: CreateUniBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUniBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUniBackupPolicy(request: CreateUniBackupPolicyRequest): CreateUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniBackupPolicyWithOptions(request, runtime);
}

model CreateUniRestorePlanRequest {
  database?: string(name='Database'),
  instanceUuid?: string(name='InstanceUuid'),
  policyId?: long(name='PolicyId'),
  resetScn?: string(name='ResetScn'),
  resetTime?: string(name='ResetTime'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  restoreInfo?: string(name='RestoreInfo'),
  sourceIp?: string(name='SourceIp'),
  timePoint?: long(name='TimePoint'),
}

model CreateUniRestorePlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUniRestorePlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUniRestorePlanResponseBody(name='body'),
}

async function createUniRestorePlanWithOptions(request: CreateUniRestorePlanRequest, runtime: Util.RuntimeOptions): CreateUniRestorePlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUniRestorePlan', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUniRestorePlan(request: CreateUniRestorePlanRequest): CreateUniRestorePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniRestorePlanWithOptions(request, runtime);
}

model DeleteAssetRequest {
  uuid?: string(name='Uuid'),
}

model DeleteAssetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAssetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAssetResponseBody(name='body'),
}

async function deleteAssetWithOptions(request: DeleteAssetRequest, runtime: Util.RuntimeOptions): DeleteAssetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAsset', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAsset(request: DeleteAssetRequest): DeleteAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAssetWithOptions(request, runtime);
}

model DeleteBackupPolicyRequest {
  id?: long(name='Id'),
  policyVersion?: string(name='PolicyVersion'),
}

model DeleteBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPolicyResponseBody(name='body'),
}

async function deleteBackupPolicyWithOptions(request: DeleteBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackupPolicy(request: DeleteBackupPolicyRequest): DeleteBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyWithOptions(request, runtime);
}

model DeleteBackupPolicyMachineRequest {
  policyId?: long(name='PolicyId'),
  policyVersion?: string(name='PolicyVersion'),
  uuid?: string(name='Uuid'),
  uuidList?: [ string ](name='UuidList'),
}

model DeleteBackupPolicyMachineResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPolicyMachineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPolicyMachineResponseBody(name='body'),
}

async function deleteBackupPolicyMachineWithOptions(request: DeleteBackupPolicyMachineRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyMachineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackupPolicyMachine', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackupPolicyMachine(request: DeleteBackupPolicyMachineRequest): DeleteBackupPolicyMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyMachineWithOptions(request, runtime);
}

model DeleteGroupRequest {
  groupId?: long(name='GroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroupWithOptions(request: DeleteGroupRequest, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteGroup', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupWithOptions(request, runtime);
}

model DeleteLoginBaseConfigRequest {
  config?: string(name='Config'),
  target?: string(name='Target'),
  type?: string(name='Type'),
}

model DeleteLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoginBaseConfigResponseBody(name='body'),
}

async function deleteLoginBaseConfigWithOptions(request: DeleteLoginBaseConfigRequest, runtime: Util.RuntimeOptions): DeleteLoginBaseConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLoginBaseConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLoginBaseConfig(request: DeleteLoginBaseConfigRequest): DeleteLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoginBaseConfigWithOptions(request, runtime);
}

model DeleteStrategyRequest {
  id?: string(name='Id'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStrategyResponseBody(name='body'),
}

async function deleteStrategyWithOptions(request: DeleteStrategyRequest, runtime: Util.RuntimeOptions): DeleteStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStrategy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStrategyWithOptions(request, runtime);
}

model DeleteTagWithUuidRequest {
  tagName?: string(name='TagName'),
  uuidList?: string(name='UuidList'),
}

model DeleteTagWithUuidResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagWithUuidResponseBody(name='body'),
}

async function deleteTagWithUuidWithOptions(request: DeleteTagWithUuidRequest, runtime: Util.RuntimeOptions): DeleteTagWithUuidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTagWithUuid', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTagWithUuid(request: DeleteTagWithUuidRequest): DeleteTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithUuidWithOptions(request, runtime);
}

model DeleteUniBackupPolicyRequest {
  policyId?: long(name='PolicyId'),
  policyIds?: string(name='PolicyIds'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUniBackupPolicyResponseBody(name='body'),
}

async function deleteUniBackupPolicyWithOptions(request: DeleteUniBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteUniBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUniBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUniBackupPolicy(request: DeleteUniBackupPolicyRequest): DeleteUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUniBackupPolicyWithOptions(request, runtime);
}

model DeleteVpcHoneyPotRequest {
  vpcId?: string(name='VpcId'),
}

model DeleteVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcHoneyPotResponseBody(name='body'),
}

async function deleteVpcHoneyPotWithOptions(request: DeleteVpcHoneyPotRequest, runtime: Util.RuntimeOptions): DeleteVpcHoneyPotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpcHoneyPot', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpcHoneyPot(request: DeleteVpcHoneyPotRequest): DeleteVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcHoneyPotWithOptions(request, runtime);
}

model DescribeAccesskeyLeakListRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  startTs?: long(name='StartTs'),
  status?: string(name='Status'),
}

model DescribeAccesskeyLeakListResponseBody = {
  accessKeyLeakList?: [ 
    {
      accesskeyId?: string(name='AccesskeyId'),
      aliUserName?: string(name='AliUserName'),
      asset?: string(name='Asset'),
      dealTime?: string(name='DealTime'),
      dealType?: string(name='DealType'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      url?: string(name='Url'),
      userType?: string(name='UserType'),
    }
  ](name='AccessKeyLeakList'),
  akLeakCount?: int32(name='AkLeakCount'),
  currentPage?: int32(name='CurrentPage'),
  gmtLast?: long(name='GmtLast'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccesskeyLeakListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccesskeyLeakListResponseBody(name='body'),
}

async function describeAccesskeyLeakListWithOptions(request: DescribeAccesskeyLeakListRequest, runtime: Util.RuntimeOptions): DescribeAccesskeyLeakListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccesskeyLeakList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccesskeyLeakList(request: DescribeAccesskeyLeakListRequest): DescribeAccesskeyLeakListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccesskeyLeakListWithOptions(request, runtime);
}

model DescribeAffectedMaliciousFileImagesRequest {
  currentPage?: int32(name='CurrentPage'),
  imageDigest?: string(name='ImageDigest'),
  imageLayer?: string(name='ImageLayer'),
  imageTag?: string(name='ImageTag'),
  lang?: string(name='Lang'),
  maliciousMd5?: string(name='MaliciousMd5'),
  pageSize?: string(name='PageSize'),
  repoId?: string(name='RepoId'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  repoRegionId?: string(name='RepoRegionId'),
}

model DescribeAffectedMaliciousFileImagesResponseBody = {
  affectedMaliciousFileImagesResponse?: [ 
    {
      digest?: string(name='Digest'),
      filePath?: string(name='FilePath'),
      firstScanTimestamp?: long(name='FirstScanTimestamp'),
      imageUuid?: string(name='ImageUuid'),
      latestScanTimestamp?: long(name='LatestScanTimestamp'),
      latestVerifyTimestamp?: long(name='LatestVerifyTimestamp'),
      layer?: string(name='Layer'),
      level?: string(name='Level'),
      maliciousMd5?: string(name='MaliciousMd5'),
      namespace?: string(name='Namespace'),
      repoId?: string(name='RepoId'),
      repoInstanceId?: string(name='RepoInstanceId'),
      repoName?: string(name='RepoName'),
      repoRegionId?: string(name='RepoRegionId'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
    }
  ](name='AffectedMaliciousFileImagesResponse'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeAffectedMaliciousFileImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAffectedMaliciousFileImagesResponseBody(name='body'),
}

async function describeAffectedMaliciousFileImagesWithOptions(request: DescribeAffectedMaliciousFileImagesRequest, runtime: Util.RuntimeOptions): DescribeAffectedMaliciousFileImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAffectedMaliciousFileImages', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAffectedMaliciousFileImages(request: DescribeAffectedMaliciousFileImagesRequest): DescribeAffectedMaliciousFileImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAffectedMaliciousFileImagesWithOptions(request, runtime);
}

model DescribeAlarmEventDetailRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
  from?: string(name='From'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeAlarmEventDetailResponseBody = {
  data?: {
    alarmEventAliasName?: string(name='AlarmEventAliasName'),
    alarmEventDesc?: string(name='AlarmEventDesc'),
    alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
    appName?: string(name='AppName'),
    canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
    canCancelFault?: boolean(name='CanCancelFault'),
    causeDetails?: [ 
      {
        key?: string(name='Key'),
        value?: [ 
          {
            name?: string(name='Name'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='Value'),
      }
    ](name='CauseDetails'),
    containHwMode?: boolean(name='ContainHwMode'),
    containerId?: string(name='ContainerId'),
    containerImageId?: string(name='ContainerImageId'),
    containerImageName?: string(name='ContainerImageName'),
    dataSource?: string(name='DataSource'),
    endTime?: long(name='EndTime'),
    instanceName?: string(name='InstanceName'),
    internetIp?: string(name='InternetIp'),
    intranetIp?: string(name='IntranetIp'),
    k8sClusterId?: string(name='K8sClusterId'),
    k8sClusterName?: string(name='K8sClusterName'),
    k8sNamespace?: string(name='K8sNamespace'),
    k8sNodeId?: string(name='K8sNodeId'),
    k8sNodeName?: string(name='K8sNodeName'),
    k8sPodName?: string(name='K8sPodName'),
    level?: string(name='Level'),
    solution?: string(name='Solution'),
    startTime?: long(name='StartTime'),
    type?: string(name='Type'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeAlarmEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventDetailResponseBody(name='body'),
}

async function describeAlarmEventDetailWithOptions(request: DescribeAlarmEventDetailRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlarmEventDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlarmEventDetail(request: DescribeAlarmEventDetailRequest): DescribeAlarmEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventDetailWithOptions(request, runtime);
}

model DescribeAlarmEventListRequest {
  alarmEventName?: string(name='AlarmEventName'),
  alarmEventType?: string(name='AlarmEventType'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  from?: string(name='From'),
  groupId?: string(name='GroupId'),
  lang?: string(name='Lang'),
  levels?: string(name='Levels'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList'),
  pageSize?: string(name='PageSize'),
  remark?: string(name='Remark'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeAlarmEventListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameOriginal?: string(name='AlarmEventNameOriginal'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      dataSource?: string(name='DataSource'),
      dealed?: boolean(name='Dealed'),
      description?: string(name='Description'),
      endTime?: long(name='EndTime'),
      gmtModified?: long(name='GmtModified'),
      hasTraceInfo?: boolean(name='HasTraceInfo'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      level?: string(name='Level'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateTime?: long(name='OperateTime'),
      saleVersion?: string(name='SaleVersion'),
      securityEventIds?: string(name='SecurityEventIds'),
      solution?: string(name='Solution'),
      stages?: string(name='Stages'),
      startTime?: long(name='StartTime'),
      suspiciousEventCount?: int32(name='SuspiciousEventCount'),
      uuid?: string(name='Uuid'),
    }
  ](name='SuspEvents'),
}

model DescribeAlarmEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventListResponseBody(name='body'),
}

async function describeAlarmEventListWithOptions(request: DescribeAlarmEventListRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlarmEventList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlarmEventList(request: DescribeAlarmEventListRequest): DescribeAlarmEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventListWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  eventName?: string(name='EventName'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  uniqueInfo?: string(name='UniqueInfo'),
  uuid?: string(name='Uuid'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId'),
  stackInfo?: string(name='StackInfo'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlarmEventStackInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeAllEntityResponseBody = {
  entityList?: [ 
    {
      groupId?: int32(name='GroupId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      os?: string(name='Os'),
      uuid?: string(name='Uuid'),
    }
  ](name='EntityList'),
  requestId?: string(name='RequestId'),
}

model DescribeAllEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllEntityResponseBody(name='body'),
}

async function describeAllEntityWithOptions(runtime: Util.RuntimeOptions): DescribeAllEntityResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeAllEntity', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllEntity(): DescribeAllEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllEntityWithOptions(runtime);
}

model DescribeAllGroupsRequest {
  lang?: string(name='Lang'),
}

model DescribeAllGroupsResponseBody = {
  count?: int32(name='Count'),
  groups?: [ 
    {
      groupFlag?: int32(name='GroupFlag'),
      groupId?: int32(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='Groups'),
  requestId?: string(name='RequestId'),
}

model DescribeAllGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllGroupsResponseBody(name='body'),
}

async function describeAllGroupsWithOptions(request: DescribeAllGroupsRequest, runtime: Util.RuntimeOptions): DescribeAllGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllGroups', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllGroups(request: DescribeAllGroupsRequest): DescribeAllGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllGroupsWithOptions(request, runtime);
}

model DescribeAllRegionsStatisticsRequest {
  action1?: int32(name='Action1'),
  allRegion?: boolean(name='AllRegion'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  endTime?: string(name='EndTime'),
  flow?: int32(name='Flow'),
  from?: string(name='From'),
  groupId?: long(name='GroupId'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  ruleType?: int32(name='RuleType'),
  saleId?: string(name='SaleId'),
  secureToken?: string(name='SecureToken'),
  sourceIp?: string(name='SourceIp'),
  startTime?: string(name='StartTime'),
  status?: int32(name='Status'),
  statusList?: string(name='StatusList'),
  tag?: string(name='Tag'),
  type?: string(name='Type'),
  uuid?: string(name='Uuid'),
  webGroupId?: long(name='WebGroupId'),
}

model DescribeAllRegionsStatisticsResponseBody = {
  data?: {
    account?: int32(name='Account'),
    health?: int32(name='Health'),
    newSuspicious?: int32(name='NewSuspicious'),
    suspicious?: int32(name='Suspicious'),
    trojan?: int32(name='Trojan'),
    vul?: int32(name='Vul'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeAllRegionsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllRegionsStatisticsResponseBody(name='body'),
}

async function describeAllRegionsStatisticsWithOptions(request: DescribeAllRegionsStatisticsRequest, runtime: Util.RuntimeOptions): DescribeAllRegionsStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllRegionsStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllRegionsStatistics(request: DescribeAllRegionsStatisticsRequest): DescribeAllRegionsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllRegionsStatisticsWithOptions(request, runtime);
}

model DescribeAntiBruteForceRulesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      defaultRule?: boolean(name='DefaultRule'),
      enableSmartRule?: boolean(name='EnableSmartRule'),
      failCount?: int32(name='FailCount'),
      forbiddenTime?: int32(name='ForbiddenTime'),
      id?: long(name='Id'),
      machineCount?: int32(name='MachineCount'),
      name?: string(name='Name'),
      span?: int32(name='Span'),
      uuidList?: [ string ](name='UuidList'),
    }
  ](name='Rules'),
}

model DescribeAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAntiBruteForceRulesResponseBody(name='body'),
}

async function describeAntiBruteForceRulesWithOptions(request: DescribeAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAntiBruteForceRules', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAntiBruteForceRules(request: DescribeAntiBruteForceRulesRequest): DescribeAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeAssetDetailByUuidRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model DescribeAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType'),
    authModifyTime?: long(name='AuthModifyTime'),
    authVersion?: int32(name='AuthVersion'),
    bind?: boolean(name='Bind'),
    clientStatus?: string(name='ClientStatus'),
    cpu?: int32(name='Cpu'),
    cpuInfo?: string(name='CpuInfo'),
    createTime?: long(name='CreateTime'),
    diskInfoList?: [ string ](name='DiskInfoList'),
    groupTrace?: string(name='GroupTrace'),
    hostName?: string(name='HostName'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    internetIp?: string(name='InternetIp'),
    intranetIp?: string(name='IntranetIp'),
    ip?: string(name='Ip'),
    ipList?: [ string ](name='IpList'),
    kernel?: string(name='Kernel'),
    macList?: [ string ](name='MacList'),
    mem?: int32(name='Mem'),
    os?: string(name='Os'),
    osDetail?: string(name='OsDetail'),
    osName?: string(name='OsName'),
    region?: string(name='Region'),
    regionId?: string(name='RegionId'),
    regionName?: string(name='RegionName'),
    sysInfo?: string(name='SysInfo'),
    tag?: string(name='Tag'),
    uuid?: string(name='Uuid'),
    vpcInstanceId?: string(name='VpcInstanceId'),
  }(name='AssetDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetDetailByUuidResponseBody(name='body'),
}

async function describeAssetDetailByUuidWithOptions(request: DescribeAssetDetailByUuidRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAssetDetailByUuid', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAssetDetailByUuid(request: DescribeAssetDetailByUuidRequest): DescribeAssetDetailByUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidWithOptions(request, runtime);
}

model DescribeAssetDetailByUuidsRequest {
  uuids?: string(name='Uuids'),
}

model DescribeAssetDetailByUuidsResponseBody = {
  assetList?: [ 
    {
      assetType?: string(name='AssetType'),
      clientStatus?: string(name='ClientStatus'),
      flag?: int32(name='Flag'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      os?: string(name='Os'),
      osName?: string(name='OsName'),
      region?: string(name='Region'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      uuid?: string(name='Uuid'),
      vpcInstanceId?: string(name='VpcInstanceId'),
    }
  ](name='AssetList'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetDetailByUuidsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetDetailByUuidsResponseBody(name='body'),
}

async function describeAssetDetailByUuidsWithOptions(request: DescribeAssetDetailByUuidsRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAssetDetailByUuids', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAssetDetailByUuids(request: DescribeAssetDetailByUuidsRequest): DescribeAssetDetailByUuidsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidsWithOptions(request, runtime);
}

model DescribeAssetSummaryResponseBody = {
  assetsSummary?: {
    totalCoreNum?: int32(name='TotalCoreNum'),
  }(name='AssetsSummary'),
  requestId?: string(name='RequestId'),
}

model DescribeAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetSummaryResponseBody(name='body'),
}

async function describeAssetSummaryWithOptions(runtime: Util.RuntimeOptions): DescribeAssetSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeAssetSummary', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAssetSummary(): DescribeAssetSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetSummaryWithOptions(runtime);
}

model DescribeAttackAnalysisDataRequest {
  base64?: string(name='Base64'),
  currentPage?: int32(name='CurrentPage'),
  data?: string(name='Data'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  type?: string(name='Type'),
}

model DescribeAttackAnalysisDataResponseBody = {
  data?: string(name='Data'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeAttackAnalysisDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAttackAnalysisDataResponseBody(name='body'),
}

async function describeAttackAnalysisDataWithOptions(request: DescribeAttackAnalysisDataRequest, runtime: Util.RuntimeOptions): DescribeAttackAnalysisDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAttackAnalysisData', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAttackAnalysisData(request: DescribeAttackAnalysisDataRequest): DescribeAttackAnalysisDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackAnalysisDataWithOptions(request, runtime);
}

model DescribeAutoDelConfigResponseBody = {
  days?: int32(name='Days'),
  requestId?: string(name='RequestId'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfigWithOptions(runtime: Util.RuntimeOptions): DescribeAutoDelConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeAutoDelConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoDelConfig(): DescribeAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoDelConfigWithOptions(runtime);
}

model DescribeBackupClientsRequest {
  supportRegionId?: string(name='SupportRegionId'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      clientId?: string(name='ClientId'),
      clientStatus?: string(name='ClientStatus'),
      instanceId?: string(name='InstanceId'),
      uuid?: string(name='Uuid'),
    }
  ](name='Clients'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

async function describeBackupClientsWithOptions(request: DescribeBackupClientsRequest, runtime: Util.RuntimeOptions): DescribeBackupClientsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupClients', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupClientsWithOptions(request, runtime);
}

model DescribeBackupDirsRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  policyId?: long(name='PolicyId'),
  uuid?: string(name='Uuid'),
}

model DescribeBackupDirsResponseBody = {
  backupDirs?: [ 
    {
      backupJobId?: long(name='BackupJobId'),
      source?: string(name='Source'),
    }
  ](name='BackupDirs'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupDirsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDirsResponseBody(name='body'),
}

async function describeBackupDirsWithOptions(request: DescribeBackupDirsRequest, runtime: Util.RuntimeOptions): DescribeBackupDirsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupDirs', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupDirs(request: DescribeBackupDirsRequest): DescribeBackupDirsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDirsWithOptions(request, runtime);
}

model DescribeBackupFilesRequest {
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  path?: string(name='Path'),
  snapshotHash?: string(name='SnapshotHash'),
  uuid?: string(name='Uuid'),
}

model DescribeBackupFilesResponseBody = {
  backupFiles?: [ 
    {
      name?: string(name='Name'),
      size?: long(name='Size'),
      subtree?: string(name='Subtree'),
      type?: string(name='Type'),
    }
  ](name='BackupFiles'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupFilesResponseBody(name='body'),
}

async function describeBackupFilesWithOptions(request: DescribeBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeBackupFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupFiles', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupFilesWithOptions(request, runtime);
}

model DescribeBackupMachineStatusRequest {
  policyId?: long(name='PolicyId'),
  policyVersion?: string(name='PolicyVersion'),
  uuid?: string(name='Uuid'),
}

model DescribeBackupMachineStatusResponseBody = {
  backupMachineStatus?: {
    clientId?: string(name='ClientId'),
    clientStatus?: string(name='ClientStatus'),
    clientVersion?: string(name='ClientVersion'),
    errorCode?: string(name='ErrorCode'),
    errorList?: [ 
      {
        errorCode?: string(name='ErrorCode'),
        errorFile?: string(name='ErrorFile'),
        errorFileUrl?: string(name='ErrorFileUrl'),
        errorMsg?: string(name='ErrorMsg'),
        errorStatus?: string(name='ErrorStatus'),
        errorTime?: long(name='ErrorTime'),
        errorType?: string(name='ErrorType'),
        key?: string(name='Key'),
        path?: string(name='Path'),
        requestId?: string(name='RequestId'),
      }
    ](name='ErrorList'),
    instanceId?: string(name='InstanceId'),
    regionId?: string(name='RegionId'),
    requestId?: string(name='RequestId'),
    savedBackupCount?: int32(name='SavedBackupCount'),
    status?: string(name='Status'),
    uuid?: string(name='Uuid'),
    vaultId?: string(name='VaultId'),
  }(name='BackupMachineStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupMachineStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupMachineStatusResponseBody(name='body'),
}

async function describeBackupMachineStatusWithOptions(request: DescribeBackupMachineStatusRequest, runtime: Util.RuntimeOptions): DescribeBackupMachineStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupMachineStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupMachineStatus(request: DescribeBackupMachineStatusRequest): DescribeBackupMachineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupMachineStatusWithOptions(request, runtime);
}

model DescribeBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage'),
  machineRemark?: string(name='MachineRemark'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  policies?: [ 
    {
      clientErrorCount?: int32(name='ClientErrorCount'),
      clientErrorUuidList?: [ string ](name='ClientErrorUuidList'),
      clientStatus?: string(name='ClientStatus'),
      healthClientCount?: int32(name='HealthClientCount'),
      healthClientUuidList?: [ string ](name='HealthClientUuidList'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      policy?: string(name='Policy'),
      policyRegionId?: string(name='PolicyRegionId'),
      policyVersion?: string(name='PolicyVersion'),
      remarkedUuidList?: [ string ](name='RemarkedUuidList'),
      serviceErrorCount?: int32(name='ServiceErrorCount'),
      serviceErrorUuidList?: [ string ](name='ServiceErrorUuidList'),
      status?: string(name='Status'),
      upgradeStatus?: string(name='UpgradeStatus'),
      uuidList?: [ string ](name='UuidList'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPoliciesResponseBody(name='body'),
}

async function describeBackupPoliciesWithOptions(request: DescribeBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeBackupPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicies', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicies(request: DescribeBackupPoliciesRequest): DescribeBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPoliciesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  id?: long(name='Id'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDetail?: {
    clientStatus?: string(name='ClientStatus'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    policy?: string(name='Policy'),
    policyVersion?: string(name='PolicyVersion'),
    regionId?: string(name='RegionId'),
    status?: string(name='Status'),
    uuidList?: [ string ](name='UuidList'),
  }(name='BackupPolicyDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupRestoreCountResponseBody = {
  backupRestoreCount?: {
    recovering?: int32(name='Recovering'),
    total?: int32(name='Total'),
  }(name='BackupRestoreCount'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupRestoreCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupRestoreCountResponseBody(name='body'),
}

async function describeBackupRestoreCountWithOptions(runtime: Util.RuntimeOptions): DescribeBackupRestoreCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeBackupRestoreCount', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupRestoreCount(): DescribeBackupRestoreCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupRestoreCountWithOptions(runtime);
}

model DescribeBruteForceSummaryRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeBruteForceSummaryResponseBody = {
  bruteForceSummary?: {
    allStrategyCount?: int32(name='AllStrategyCount'),
    effectiveCount?: int32(name='EffectiveCount'),
  }(name='BruteForceSummary'),
  requestId?: string(name='RequestId'),
}

model DescribeBruteForceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBruteForceSummaryResponseBody(name='body'),
}

async function describeBruteForceSummaryWithOptions(request: DescribeBruteForceSummaryRequest, runtime: Util.RuntimeOptions): DescribeBruteForceSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBruteForceSummary', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBruteForceSummary(request: DescribeBruteForceSummaryRequest): DescribeBruteForceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBruteForceSummaryWithOptions(request, runtime);
}

model DescribeCheckEcsWarningsRequest {
  sourceIp?: string(name='SourceIp'),
}

model DescribeCheckEcsWarningsResponseBody = {
  canTry?: string(name='CanTry'),
  requestId?: string(name='RequestId'),
  sasVersion?: string(name='SasVersion'),
  weakPasswordCount?: string(name='WeakPasswordCount'),
}

model DescribeCheckEcsWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckEcsWarningsResponseBody(name='body'),
}

async function describeCheckEcsWarningsWithOptions(request: DescribeCheckEcsWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckEcsWarningsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckEcsWarnings', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckEcsWarnings(request: DescribeCheckEcsWarningsRequest): DescribeCheckEcsWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckEcsWarningsWithOptions(request, runtime);
}

model DescribeCheckWarningDetailRequest {
  checkWarningId?: long(name='CheckWarningId'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeCheckWarningDetailResponseBody = {
  advice?: string(name='Advice'),
  checkId?: long(name='CheckId'),
  description?: string(name='Description'),
  item?: string(name='Item'),
  level?: string(name='Level'),
  prompt?: string(name='Prompt'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetailWithOptions(request: DescribeCheckWarningDetailRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckWarningDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningDetailWithOptions(request, runtime);
}

model DescribeCheckWarningSummaryRequest {
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  riskName?: string(name='RiskName'),
  riskStatus?: int32(name='RiskStatus'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  strategyId?: long(name='StrategyId'),
  typeName?: string(name='TypeName'),
  uuids?: string(name='Uuids'),
}

model DescribeCheckWarningSummaryResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  warningSummarys?: [ 
    {
      checkCount?: int32(name='CheckCount'),
      highWarningCount?: int32(name='HighWarningCount'),
      lastFoundTime?: string(name='LastFoundTime'),
      level?: string(name='Level'),
      lowWarningCount?: int32(name='LowWarningCount'),
      mediumWarningCount?: int32(name='MediumWarningCount'),
      riskId?: long(name='RiskId'),
      riskName?: string(name='RiskName'),
      subTypeAlias?: string(name='SubTypeAlias'),
      typeAlias?: string(name='TypeAlias'),
      warningMachineCount?: int32(name='WarningMachineCount'),
    }
  ](name='WarningSummarys'),
}

model DescribeCheckWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningSummaryResponseBody(name='body'),
}

async function describeCheckWarningSummaryWithOptions(request: DescribeCheckWarningSummaryRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckWarningSummary', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckWarningSummary(request: DescribeCheckWarningSummaryRequest): DescribeCheckWarningSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningSummaryWithOptions(request, runtime);
}

model DescribeCheckWarningsRequest {
  checkId?: long(name='CheckId'),
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  riskId?: long(name='RiskId'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model DescribeCheckWarningsResponseBody = {
  checkWarnings?: [ 
    {
      checkId?: long(name='CheckId'),
      checkWarningId?: long(name='CheckWarningId'),
      item?: string(name='Item'),
      level?: string(name='Level'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='CheckWarnings'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningsResponseBody(name='body'),
}

async function describeCheckWarningsWithOptions(request: DescribeCheckWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckWarnings', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckWarnings(request: DescribeCheckWarningsRequest): DescribeCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningsWithOptions(request, runtime);
}

model DescribeCloudCenterInstancesRequest {
  criteria?: string(name='Criteria'),
  currentPage?: int32(name='CurrentPage'),
  importance?: int32(name='Importance'),
  logicalExp?: string(name='LogicalExp'),
  machineTypes?: string(name='MachineTypes'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeCloudCenterInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus'),
      assetType?: string(name='AssetType'),
      authModifyTime?: long(name='AuthModifyTime'),
      authVersion?: int32(name='AuthVersion'),
      authVersionName?: string(name='AuthVersionName'),
      bind?: boolean(name='Bind'),
      clientStatus?: string(name='ClientStatus'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      cores?: int32(name='Cores'),
      cpuInfo?: string(name='CpuInfo'),
      createdTime?: long(name='CreatedTime'),
      exposedStatus?: int32(name='ExposedStatus'),
      flag?: int32(name='Flag'),
      groupId?: string(name='GroupId'),
      groupTrace?: string(name='GroupTrace'),
      hcStatus?: string(name='HcStatus'),
      healthCheckCount?: int32(name='HealthCheckCount'),
      importance?: int32(name='Importance'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      ipListString?: string(name='IpListString'),
      kernel?: string(name='Kernel'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp'),
      macListString?: string(name='MacListString'),
      mem?: int32(name='Mem'),
      os?: string(name='Os'),
      osName?: string(name='OsName'),
      podCount?: int32(name='PodCount'),
      region?: string(name='Region'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      riskCount?: string(name='RiskCount'),
      riskStatus?: string(name='RiskStatus'),
      safeEventCount?: int32(name='SafeEventCount'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
      tagId?: string(name='TagId'),
      uuid?: string(name='Uuid'),
      vendor?: int32(name='Vendor'),
      vendorName?: string(name='VendorName'),
      vpcInstanceId?: string(name='VpcInstanceId'),
      vulCount?: int32(name='VulCount'),
      vulStatus?: string(name='VulStatus'),
    }
  ](name='Instances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCloudCenterInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudCenterInstancesResponseBody(name='body'),
}

async function describeCloudCenterInstancesWithOptions(request: DescribeCloudCenterInstancesRequest, runtime: Util.RuntimeOptions): DescribeCloudCenterInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCloudCenterInstances', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCloudCenterInstances(request: DescribeCloudCenterInstancesRequest): DescribeCloudCenterInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudCenterInstancesWithOptions(request, runtime);
}

model DescribeCloudProductFieldStatisticsResponseBody = {
  groupedFields?: {
    categoryCount?: string(name='CategoryCount'),
    instanceCount?: int32(name='InstanceCount'),
    riskInstanceCount?: int32(name='RiskInstanceCount'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId'),
}

model DescribeCloudProductFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudProductFieldStatisticsResponseBody(name='body'),
}

async function describeCloudProductFieldStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeCloudProductFieldStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeCloudProductFieldStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCloudProductFieldStatistics(): DescribeCloudProductFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudProductFieldStatisticsWithOptions(runtime);
}

model DescribeConcernNecessityRequest {
  lang?: string(name='Lang'),
}

model DescribeConcernNecessityResponseBody = {
  concernNecessity?: [ string ](name='ConcernNecessity'),
  requestId?: string(name='RequestId'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessityWithOptions(request: DescribeConcernNecessityRequest, runtime: Util.RuntimeOptions): DescribeConcernNecessityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConcernNecessity', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConcernNecessityWithOptions(request, runtime);
}

model DescribeContainerStatisticsRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeContainerStatisticsResponseBody = {
  data?: {
    remindAlarmCount?: int32(name='RemindAlarmCount'),
    seriousAlarmCount?: int32(name='SeriousAlarmCount'),
    suspiciousAlarmCount?: int32(name='SuspiciousAlarmCount'),
    totalAlarmCount?: int32(name='TotalAlarmCount'),
    totalNode?: int32(name='TotalNode'),
    hasRiskNode?: int32(name='hasRiskNode'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeContainerStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContainerStatisticsResponseBody(name='body'),
}

async function describeContainerStatisticsWithOptions(request: DescribeContainerStatisticsRequest, runtime: Util.RuntimeOptions): DescribeContainerStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeContainerStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeContainerStatistics(request: DescribeContainerStatisticsRequest): DescribeContainerStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerStatisticsWithOptions(request, runtime);
}

model DescribeCriteriaRequest {
  machineTypes?: string(name='MachineTypes'),
  supportAutoTag?: boolean(name='SupportAutoTag'),
  value?: string(name='Value'),
}

model DescribeCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCriteriaResponseBody(name='body'),
}

async function describeCriteriaWithOptions(request: DescribeCriteriaRequest, runtime: Util.RuntimeOptions): DescribeCriteriaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCriteria', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCriteria(request: DescribeCriteriaRequest): DescribeCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCriteriaWithOptions(request, runtime);
}

model DescribeDialogMessagesRequest {
  sourceIp?: string(name='SourceIp'),
}

model DescribeDialogMessagesResponseBody = {
  dialogList?: [ 
    {
      dialogKey?: string(name='DialogKey'),
      ID?: long(name='ID'),
      params?: string(name='Params'),
    }
  ](name='DialogList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDialogMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDialogMessagesResponseBody(name='body'),
}

async function describeDialogMessagesWithOptions(request: DescribeDialogMessagesRequest, runtime: Util.RuntimeOptions): DescribeDialogMessagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDialogMessages', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDialogMessages(request: DescribeDialogMessagesRequest): DescribeDialogMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDialogMessagesWithOptions(request, runtime);
}

model DescribeDingTalkRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  ruleActionName?: string(name='RuleActionName'),
}

model DescribeDingTalkResponseBody = {
  actionList?: [ 
    {
      actionName?: string(name='ActionName'),
      aliUid?: long(name='AliUid'),
      configList?: string(name='ConfigList'),
      dingTalkLang?: string(name='DingTalkLang'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      groupIdList?: string(name='GroupIdList'),
      id?: int32(name='Id'),
      intervalTime?: int32(name='IntervalTime'),
      status?: int32(name='Status'),
      url?: string(name='Url'),
    }
  ](name='ActionList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDingTalkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDingTalkResponseBody(name='body'),
}

async function describeDingTalkWithOptions(request: DescribeDingTalkRequest, runtime: Util.RuntimeOptions): DescribeDingTalkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDingTalk', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDingTalk(request: DescribeDingTalkRequest): DescribeDingTalkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDingTalkWithOptions(request, runtime);
}

model DescribeDomainCountRequest {
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainCountResponseBody = {
  requestId?: string(name='RequestId'),
  rootDomainsCount?: int32(name='RootDomainsCount'),
  subDomainsCount?: int32(name='SubDomainsCount'),
  totalDomainsCount?: int32(name='TotalDomainsCount'),
}

model DescribeDomainCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCountResponseBody(name='body'),
}

async function describeDomainCountWithOptions(request: DescribeDomainCountRequest, runtime: Util.RuntimeOptions): DescribeDomainCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainCount', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainCount(request: DescribeDomainCountRequest): DescribeDomainCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCountWithOptions(request, runtime);
}

model DescribeDomainDetailRequest {
  domainName?: string(name='DomainName'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainDetailResponseBody = {
  alarmCount?: int32(name='AlarmCount'),
  domain?: string(name='Domain'),
  domainDetailItems?: [ 
    {
      assetType?: string(name='AssetType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      uuid?: string(name='Uuid'),
    }
  ](name='DomainDetailItems'),
  requestId?: string(name='RequestId'),
  rootDomain?: string(name='RootDomain'),
  vulCount?: int32(name='VulCount'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetailWithOptions(request: DescribeDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailWithOptions(request, runtime);
}

model DescribeDomainListRequest {
  currentPage?: int32(name='CurrentPage'),
  domainType?: string(name='DomainType'),
  fuzzyDomain?: string(name='FuzzyDomain'),
  pageSize?: int32(name='PageSize'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainListResponseBody = {
  domainListResponseList?: [ 
    {
      domain?: string(name='Domain'),
      ipList?: string(name='IpList'),
    }
  ](name='DomainListResponseList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainListWithOptions(request: DescribeDomainListRequest, runtime: Util.RuntimeOptions): DescribeDomainListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainListWithOptions(request, runtime);
}

model DescribeEmgVulItemRequest {
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  riskStatus?: string(name='RiskStatus'),
  scanType?: string(name='ScanType'),
  vulName?: string(name='VulName'),
}

model DescribeEmgVulItemResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      gmtLastCheck?: long(name='GmtLastCheck'),
      gmtPublish?: long(name='GmtPublish'),
      name?: string(name='Name'),
      pendingCount?: int32(name='PendingCount'),
      progress?: int32(name='Progress'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEmgVulItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEmgVulItemResponseBody(name='body'),
}

async function describeEmgVulItemWithOptions(request: DescribeEmgVulItemRequest, runtime: Util.RuntimeOptions): DescribeEmgVulItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEmgVulItem', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEmgVulItem(request: DescribeEmgVulItemRequest): DescribeEmgVulItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmgVulItemWithOptions(request, runtime);
}

model DescribeExcludeSystemPathRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeExcludeSystemPathResponseBody = {
  excludePaths?: [ 
    {
      os?: string(name='Os'),
      path?: string(name='Path'),
    }
  ](name='ExcludePaths'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeExcludeSystemPathResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExcludeSystemPathResponseBody(name='body'),
}

async function describeExcludeSystemPathWithOptions(request: DescribeExcludeSystemPathRequest, runtime: Util.RuntimeOptions): DescribeExcludeSystemPathResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExcludeSystemPath', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExcludeSystemPath(request: DescribeExcludeSystemPathRequest): DescribeExcludeSystemPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExcludeSystemPathWithOptions(request, runtime);
}

model DescribeExportInfoRequest {
  exportId?: long(name='ExportId'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount'),
  exportStatus?: string(name='ExportStatus'),
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  link?: string(name='Link'),
  message?: string(name='Message'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeExportInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportInfoResponseBody(name='body'),
}

async function describeExportInfoWithOptions(request: DescribeExportInfoRequest, runtime: Util.RuntimeOptions): DescribeExportInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExportInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportInfoWithOptions(request, runtime);
}

model DescribeExposedInstanceCriteriaRequest {
  value?: string(name='Value'),
}

model DescribeExposedInstanceCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceCriteriaResponseBody(name='body'),
}

async function describeExposedInstanceCriteriaWithOptions(request: DescribeExposedInstanceCriteriaRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceCriteriaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExposedInstanceCriteria', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedInstanceCriteria(request: DescribeExposedInstanceCriteriaRequest): DescribeExposedInstanceCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceCriteriaWithOptions(request, runtime);
}

model DescribeExposedInstanceDetailRequest {
  uuid?: string(name='Uuid'),
}

model DescribeExposedInstanceDetailResponseBody = {
  exposedChains?: [ 
    {
      allVulList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
          necessity?: string(name='Necessity'),
          type?: string(name='Type'),
          uuid?: string(name='Uuid'),
        }
      ](name='AllVulList'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      groupNo?: string(name='GroupNo'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      realVulList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
          necessity?: string(name='Necessity'),
          type?: string(name='Type'),
          uuid?: string(name='Uuid'),
        }
      ](name='RealVulList'),
      regionId?: string(name='RegionId'),
      uuid?: string(name='Uuid'),
    }
  ](name='ExposedChains'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceDetailResponseBody(name='body'),
}

async function describeExposedInstanceDetailWithOptions(request: DescribeExposedInstanceDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExposedInstanceDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedInstanceDetail(request: DescribeExposedInstanceDetailRequest): DescribeExposedInstanceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceDetailWithOptions(request, runtime);
}

model DescribeExposedInstanceListRequest {
  currentPage?: int32(name='CurrentPage'),
  exposureComponent?: string(name='ExposureComponent'),
  exposureIp?: string(name='ExposureIp'),
  exposurePort?: string(name='ExposurePort'),
  groupId?: long(name='GroupId'),
  healthStatus?: boolean(name='HealthStatus'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  pageSize?: int32(name='PageSize'),
  vulStatus?: boolean(name='VulStatus'),
}

model DescribeExposedInstanceListResponseBody = {
  exposedInstances?: [ 
    {
      asapVulCount?: int32(name='AsapVulCount'),
      exploitHealthCount?: int32(name='ExploitHealthCount'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      laterVulCount?: int32(name='LaterVulCount'),
      nntfVulCount?: int32(name='NntfVulCount'),
      regionId?: string(name='RegionId'),
      totalVulCount?: int32(name='TotalVulCount'),
      uuid?: string(name='Uuid'),
    }
  ](name='ExposedInstances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedInstanceListResponseBody(name='body'),
}

async function describeExposedInstanceListWithOptions(request: DescribeExposedInstanceListRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExposedInstanceList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedInstanceList(request: DescribeExposedInstanceListRequest): DescribeExposedInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceListWithOptions(request, runtime);
}

model DescribeExposedRiskNumResponseBody = {
  exposedInstanceCount?: int32(name='ExposedInstanceCount'),
  requestId?: string(name='RequestId'),
  riskExposedInstanceCount?: int32(name='RiskExposedInstanceCount'),
}

model DescribeExposedRiskNumResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedRiskNumResponseBody(name='body'),
}

async function describeExposedRiskNumWithOptions(runtime: Util.RuntimeOptions): DescribeExposedRiskNumResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeExposedRiskNum', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedRiskNum(): DescribeExposedRiskNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedRiskNumWithOptions(runtime);
}

model DescribeExposedStatisticsResponseBody = {
  exposedAsapVulCount?: int32(name='ExposedAsapVulCount'),
  exposedComponentCount?: int32(name='ExposedComponentCount'),
  exposedInstanceCount?: int32(name='ExposedInstanceCount'),
  exposedIpCount?: int32(name='ExposedIpCount'),
  exposedLaterVulCount?: int32(name='ExposedLaterVulCount'),
  exposedNntfVulCount?: int32(name='ExposedNntfVulCount'),
  exposedPortCount?: int32(name='ExposedPortCount'),
  exposedWeekPasswordMachineCount?: int32(name='ExposedWeekPasswordMachineCount'),
  gatewayAssetCount?: int32(name='GatewayAssetCount'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedStatisticsResponseBody(name='body'),
}

async function describeExposedStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeExposedStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeExposedStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedStatistics(): DescribeExposedStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsWithOptions(runtime);
}

model DescribeExposedStatisticsDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  statisticsType?: string(name='StatisticsType'),
  statisticsTypeGatewayType?: string(name='StatisticsTypeGatewayType'),
  statisticsTypeInstanceValue?: string(name='StatisticsTypeInstanceValue'),
}

model DescribeExposedStatisticsDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  statisticsDetails?: [ 
    {
      exposedCount?: int32(name='ExposedCount'),
      exposureComponent?: string(name='ExposureComponent'),
      exposureIp?: string(name='ExposureIp'),
      exposurePort?: string(name='ExposurePort'),
      exposureType?: string(name='ExposureType'),
      exposureTypeId?: string(name='ExposureTypeId'),
      exposureTypeInstanceName?: string(name='ExposureTypeInstanceName'),
      regionId?: string(name='RegionId'),
    }
  ](name='StatisticsDetails'),
}

model DescribeExposedStatisticsDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposedStatisticsDetailResponseBody(name='body'),
}

async function describeExposedStatisticsDetailWithOptions(request: DescribeExposedStatisticsDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedStatisticsDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExposedStatisticsDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExposedStatisticsDetail(request: DescribeExposedStatisticsDetailRequest): DescribeExposedStatisticsDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsDetailWithOptions(request, runtime);
}

model DescribeFieldStatisticsRequest {
  machineTypes?: string(name='MachineTypes'),
  regionId?: string(name='RegionId'),
}

model DescribeFieldStatisticsResponseBody = {
  groupedFields?: {
    aliYunInstanceCount?: int32(name='AliYunInstanceCount'),
    exposedInstanceCount?: int32(name='ExposedInstanceCount'),
    generalAssetCount?: int32(name='GeneralAssetCount'),
    groupCount?: int32(name='GroupCount'),
    idcInstanceCount?: int32(name='IdcInstanceCount'),
    importantAssetCount?: int32(name='ImportantAssetCount'),
    instanceCount?: int32(name='InstanceCount'),
    instanceSyncTaskCount?: int32(name='InstanceSyncTaskCount'),
    newInstanceCount?: int32(name='NewInstanceCount'),
    notRunningStatusCount?: int32(name='NotRunningStatusCount'),
    offlineInstanceCount?: int32(name='OfflineInstanceCount'),
    pauseInstanceCount?: int32(name='PauseInstanceCount'),
    regionCount?: int32(name='RegionCount'),
    riskInstanceCount?: int32(name='RiskInstanceCount'),
    tencentInstanceCount?: int32(name='TencentInstanceCount'),
    testAssetCount?: int32(name='TestAssetCount'),
    unprotectedInstanceCount?: int32(name='UnprotectedInstanceCount'),
    vpcCount?: int32(name='VpcCount'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId'),
}

model DescribeFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFieldStatisticsResponseBody(name='body'),
}

async function describeFieldStatisticsWithOptions(request: DescribeFieldStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFieldStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFieldStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFieldStatistics(request: DescribeFieldStatisticsRequest): DescribeFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFieldStatisticsWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  info?: string(name='Info'),
  operateType?: string(name='OperateType'),
  type?: string(name='Type'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      patchList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
        }
      ](name='PatchList'),
      uuid?: string(name='Uuid'),
    }
  ](name='FrontPatchList'),
  requestId?: string(name='RequestId'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFrontVulPatchList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGraph4InvestigationOnlineRequest {
  anomalyId?: string(name='AnomalyId'),
  anomalyUuid?: string(name='AnomalyUuid'),
  direction?: string(name='Direction'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pathLength?: int32(name='PathLength'),
  vertexId?: string(name='VertexId'),
}

model DescribeGraph4InvestigationOnlineResponseBody = {
  data?: {
    edgeList?: [ 
      {
        endId?: string(name='EndId'),
        endType?: string(name='EndType'),
        id?: int32(name='Id'),
        name?: string(name='Name'),
        startId?: string(name='StartId'),
        startType?: string(name='StartType'),
        time?: string(name='Time'),
        type?: string(name='Type'),
      }
    ](name='EdgeList'),
    entityTypeList?: [ 
      {
        displayColor?: string(name='DisplayColor'),
        displayIcon?: string(name='DisplayIcon'),
        displayOrder?: string(name='DisplayOrder'),
        id?: string(name='Id'),
        name?: string(name='Name'),
      }
    ](name='EntityTypeList'),
    relationTypeList?: [ 
      {
        directed?: int32(name='Directed'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        showType?: string(name='ShowType'),
      }
    ](name='RelationTypeList'),
    vertexList?: [ 
      {
        aliuid?: string(name='Aliuid'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        neighborList?: [ 
          {
            count?: int32(name='Count'),
            hasMore?: boolean(name='HasMore'),
            type?: string(name='Type'),
          }
        ](name='NeighborList'),
        position?: string(name='Position'),
        positionId?: string(name='PositionId'),
        properties?: string(name='Properties'),
        time?: string(name='Time'),
        type?: string(name='Type'),
        uuid?: string(name='Uuid'),
      }
    ](name='VertexList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeGraph4InvestigationOnlineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGraph4InvestigationOnlineResponseBody(name='body'),
}

async function describeGraph4InvestigationOnlineWithOptions(request: DescribeGraph4InvestigationOnlineRequest, runtime: Util.RuntimeOptions): DescribeGraph4InvestigationOnlineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGraph4InvestigationOnline', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGraph4InvestigationOnline(request: DescribeGraph4InvestigationOnlineRequest): DescribeGraph4InvestigationOnlineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGraph4InvestigationOnlineWithOptions(request, runtime);
}

model DescribeGroupedContainerInstancesRequest {
  criteria?: string(name='Criteria'),
  currentPage?: int32(name='CurrentPage'),
  fieldValue?: string(name='FieldValue'),
  groupField?: string(name='GroupField'),
  logicalExp?: string(name='LogicalExp'),
  pageSize?: int32(name='PageSize'),
}

model DescribeGroupedContainerInstancesResponseBody = {
  groupedContainerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount'),
      appName?: string(name='AppName'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      clusterType?: string(name='ClusterType'),
      createTime?: long(name='CreateTime'),
      custerState?: string(name='CusterState'),
      hostIp?: string(name='HostIp'),
      instanceCount?: int32(name='InstanceCount'),
      instanceId?: string(name='InstanceId'),
      namespace?: string(name='Namespace'),
      pod?: string(name='Pod'),
      podIp?: string(name='PodIp'),
      regionId?: string(name='RegionId'),
      riskInstanceCount?: int32(name='RiskInstanceCount'),
      riskLevel?: string(name='RiskLevel'),
      riskStatus?: string(name='RiskStatus'),
      vulCount?: int32(name='VulCount'),
    }
  ](name='GroupedContainerInstanceList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedContainerInstancesResponseBody(name='body'),
}

async function describeGroupedContainerInstancesWithOptions(request: DescribeGroupedContainerInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedContainerInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedContainerInstances', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedContainerInstances(request: DescribeGroupedContainerInstancesRequest): DescribeGroupedContainerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedContainerInstancesWithOptions(request, runtime);
}

model DescribeGroupedInstancesRequest {
  currentPage?: int32(name='CurrentPage'),
  fieldValue?: string(name='FieldValue'),
  groupField?: string(name='GroupField'),
  lang?: string(name='Lang'),
  machineTypes?: string(name='MachineTypes'),
  noPage?: boolean(name='NoPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeGroupedInstancesResponseBody = {
  instances?: [ 
    {
      asapVulInstanceCount?: long(name='AsapVulInstanceCount'),
      fieldAliasName?: string(name='FieldAliasName'),
      groupFlag?: int32(name='GroupFlag'),
      instanceCount?: string(name='InstanceCount'),
      riskInstanceCount?: string(name='RiskInstanceCount'),
      unProtectedInstanceCount?: string(name='UnProtectedInstanceCount'),
    }
  ](name='Instances'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedInstancesResponseBody(name='body'),
}

async function describeGroupedInstancesWithOptions(request: DescribeGroupedInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedInstances', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedInstances(request: DescribeGroupedInstancesRequest): DescribeGroupedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedInstancesWithOptions(request, runtime);
}

model DescribeGroupedMaliciousFilesRequest {
  currentPage?: int32(name='CurrentPage'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName'),
  imageDigest?: string(name='ImageDigest'),
  imageLayer?: string(name='ImageLayer'),
  imageTag?: string(name='ImageTag'),
  lang?: string(name='Lang'),
  levels?: string(name='Levels'),
  pageSize?: string(name='PageSize'),
  repoId?: string(name='RepoId'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  repoRegionId?: string(name='RepoRegionId'),
}

model DescribeGroupedMaliciousFilesResponseBody = {
  groupedMaliciousFileResponse?: [ 
    {
      firstScanTimestamp?: long(name='FirstScanTimestamp'),
      imageCount?: long(name='ImageCount'),
      latestScanTimestamp?: long(name='LatestScanTimestamp'),
      level?: string(name='Level'),
      maliciousMd5?: string(name='MaliciousMd5'),
      maliciousName?: string(name='MaliciousName'),
      status?: int32(name='Status'),
    }
  ](name='GroupedMaliciousFileResponse'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeGroupedMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedMaliciousFilesResponseBody(name='body'),
}

async function describeGroupedMaliciousFilesWithOptions(request: DescribeGroupedMaliciousFilesRequest, runtime: Util.RuntimeOptions): DescribeGroupedMaliciousFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedMaliciousFiles', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedMaliciousFiles(request: DescribeGroupedMaliciousFilesRequest): DescribeGroupedMaliciousFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedMaliciousFilesWithOptions(request, runtime);
}

model DescribeGroupedTagsRequest {
  machineTypes?: string(name='MachineTypes'),
}

model DescribeGroupedTagsResponseBody = {
  count?: int32(name='Count'),
  groupedFileds?: [ 
    {
      count?: string(name='Count'),
      name?: string(name='Name'),
      tagId?: int32(name='TagId'),
    }
  ](name='GroupedFileds'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeGroupedTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedTagsResponseBody(name='body'),
}

async function describeGroupedTagsWithOptions(request: DescribeGroupedTagsRequest, runtime: Util.RuntimeOptions): DescribeGroupedTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedTags', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedTags(request: DescribeGroupedTagsRequest): DescribeGroupedTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedTagsWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  aliasName?: string(name='AliasName'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  groupId?: string(name='GroupId'),
  lang?: string(name='Lang'),
  necessity?: string(name='Necessity'),
  pageSize?: int32(name='PageSize'),
  searchTags?: string(name='SearchTags'),
  type?: string(name='Type'),
  uuids?: string(name='Uuids'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount'),
      gmtLast?: long(name='GmtLast'),
      handledCount?: int32(name='HandledCount'),
      laterCount?: int32(name='LaterCount'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount'),
      tags?: string(name='Tags'),
      totalFixCount?: long(name='TotalFixCount'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedVul', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeHoneyPotAuthResponseBody = {
  honeyPotAuthCount?: long(name='HoneyPotAuthCount'),
  honeyPotCount?: int32(name='HoneyPotCount'),
  requestId?: string(name='RequestId'),
}

model DescribeHoneyPotAuthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHoneyPotAuthResponseBody(name='body'),
}

async function describeHoneyPotAuthWithOptions(runtime: Util.RuntimeOptions): DescribeHoneyPotAuthResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeHoneyPotAuth', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHoneyPotAuth(): DescribeHoneyPotAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotAuthWithOptions(runtime);
}

model DescribeHoneyPotSuspStatisticsRequest {
  from?: string(name='From'),
  statisticsDays?: int32(name='StatisticsDays'),
  statisticsKeyType?: string(name='StatisticsKeyType'),
}

model DescribeHoneyPotSuspStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  suspHoneyPotStatisticsResponse?: [ 
    {
      count?: int32(name='Count'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      type?: string(name='Type'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='SuspHoneyPotStatisticsResponse'),
}

model DescribeHoneyPotSuspStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHoneyPotSuspStatisticsResponseBody(name='body'),
}

async function describeHoneyPotSuspStatisticsWithOptions(request: DescribeHoneyPotSuspStatisticsRequest, runtime: Util.RuntimeOptions): DescribeHoneyPotSuspStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHoneyPotSuspStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHoneyPotSuspStatistics(request: DescribeHoneyPotSuspStatisticsRequest): DescribeHoneyPotSuspStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotSuspStatisticsWithOptions(request, runtime);
}

model DescribeImageFixTaskRequest {
  currentPage?: int32(name='CurrentPage'),
  endTime?: long(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
}

model DescribeImageFixTaskResponseBody = {
  buildTasks?: [ 
    {
      buildTaskId?: string(name='BuildTaskId'),
      finishTime?: string(name='FinishTime'),
      fixTime?: string(name='FixTime'),
      newTag?: string(name='NewTag'),
      newUuid?: string(name='NewUuid'),
      oldTag?: string(name='OldTag'),
      oldUuid?: string(name='OldUuid'),
      regionId?: string(name='RegionId'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      status?: int32(name='Status'),
      taskType?: string(name='TaskType'),
    }
  ](name='BuildTasks'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeImageFixTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageFixTaskResponseBody(name='body'),
}

async function describeImageFixTaskWithOptions(request: DescribeImageFixTaskRequest, runtime: Util.RuntimeOptions): DescribeImageFixTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageFixTask', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageFixTask(request: DescribeImageFixTaskRequest): DescribeImageFixTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFixTaskWithOptions(request, runtime);
}

model DescribeImageGroupedVulListRequest {
  aliasName?: string(name='AliasName'),
  currentPage?: int32(name='CurrentPage'),
  cveId?: string(name='CveId'),
  groupId?: string(name='GroupId'),
  imageDigest?: string(name='ImageDigest'),
  imageLayer?: string(name='ImageLayer'),
  imageTag?: string(name='ImageTag'),
  isLatest?: int32(name='IsLatest'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  necessity?: string(name='Necessity'),
  pageSize?: int32(name='PageSize'),
  patchId?: long(name='PatchId'),
  repoId?: string(name='RepoId'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  repoRegionId?: string(name='RepoRegionId'),
  type?: string(name='Type'),
  uuids?: string(name='Uuids'),
}

model DescribeImageGroupedVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount'),
      gmtLast?: long(name='GmtLast'),
      lastScanTime?: long(name='LastScanTime'),
      laterCount?: int32(name='LaterCount'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount'),
      status?: int32(name='Status'),
      tags?: string(name='Tags'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImageGroupedVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageGroupedVulListResponseBody(name='body'),
}

async function describeImageGroupedVulListWithOptions(request: DescribeImageGroupedVulListRequest, runtime: Util.RuntimeOptions): DescribeImageGroupedVulListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageGroupedVulList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageGroupedVulList(request: DescribeImageGroupedVulListRequest): DescribeImageGroupedVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageGroupedVulListWithOptions(request, runtime);
}

model DescribeImageInstancesRequest {
  criteria?: string(name='Criteria'),
  currentPage?: int32(name='CurrentPage'),
  logicalExp?: string(name='LogicalExp'),
  pageSize?: int32(name='PageSize'),
}

model DescribeImageInstancesResponseBody = {
  imageInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount'),
      alarmStatus?: string(name='AlarmStatus'),
      digest?: string(name='Digest'),
      endpoints?: string(name='Endpoints'),
      hcCount?: int32(name='HcCount'),
      hcStatus?: string(name='HcStatus'),
      imageCreate?: string(name='ImageCreate'),
      imageId?: string(name='ImageId'),
      imageSize?: string(name='ImageSize'),
      imageUpdate?: string(name='ImageUpdate'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
      registryType?: string(name='RegistryType'),
      repoId?: string(name='RepoId'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      repoType?: string(name='RepoType'),
      riskStatus?: string(name='RiskStatus'),
      scaProgress?: int32(name='ScaProgress'),
      scaResult?: string(name='ScaResult'),
      scaStatus?: string(name='ScaStatus'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
      uuid?: string(name='Uuid'),
      vulCount?: int32(name='VulCount'),
      vulStatus?: string(name='VulStatus'),
    }
  ](name='ImageInstanceList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeImageInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageInstancesResponseBody(name='body'),
}

async function describeImageInstancesWithOptions(request: DescribeImageInstancesRequest, runtime: Util.RuntimeOptions): DescribeImageInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageInstances', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageInstances(request: DescribeImageInstancesRequest): DescribeImageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInstancesWithOptions(request, runtime);
}

model DescribeImageScanAuthCountResponseBody = {
  imageScan?: {
    imageScanCapacity?: long(name='ImageScanCapacity'),
    instanceId?: string(name='InstanceId'),
    scanCount?: long(name='ScanCount'),
  }(name='ImageScan'),
  requestId?: string(name='RequestId'),
}

model DescribeImageScanAuthCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageScanAuthCountResponseBody(name='body'),
}

async function describeImageScanAuthCountWithOptions(runtime: Util.RuntimeOptions): DescribeImageScanAuthCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeImageScanAuthCount', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageScanAuthCount(): DescribeImageScanAuthCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageScanAuthCountWithOptions(runtime);
}

model DescribeImageStatisticsResponseBody = {
  instanceCount?: int32(name='InstanceCount'),
  requestId?: string(name='RequestId'),
  riskInstanceCount?: int32(name='RiskInstanceCount'),
}

model DescribeImageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageStatisticsResponseBody(name='body'),
}

async function describeImageStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeImageStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeImageStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageStatistics(): DescribeImageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageStatisticsWithOptions(runtime);
}

model DescribeImageVulListRequest {
  aliasName?: string(name='AliasName'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  digest?: string(name='Digest'),
  instanceId?: string(name='InstanceId'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  necessity?: string(name='Necessity'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  repoId?: string(name='RepoId'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  repoRegionId?: string(name='RepoRegionId'),
  statusList?: string(name='StatusList'),
  tag?: string(name='Tag'),
  type?: string(name='Type'),
  uuids?: string(name='Uuids'),
}

model DescribeImageVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      canUpdate?: boolean(name='CanUpdate'),
      extendContentJson?: {
        os?: string(name='Os'),
        osRelease?: string(name='OsRelease'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion'),
            layer?: string(name='Layer'),
            matchDetail?: string(name='MatchDetail'),
            matchList?: string(name='MatchList'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            updateCmd?: string(name='UpdateCmd'),
            version?: string(name='Version'),
          }
        ](name='RpmEntityList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs'),
      imageDigest?: string(name='ImageDigest'),
      lastTs?: long(name='LastTs'),
      layers?: [ string ](name='Layers'),
      modifyTs?: long(name='ModifyTs'),
      name?: string(name='Name'),
      necessity?: string(name='Necessity'),
      primaryId?: long(name='PrimaryId'),
      related?: string(name='Related'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='VulRecords'),
}

model DescribeImageVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageVulListResponseBody(name='body'),
}

async function describeImageVulListWithOptions(request: DescribeImageVulListRequest, runtime: Util.RuntimeOptions): DescribeImageVulListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageVulList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageVulList(request: DescribeImageVulListRequest): DescribeImageVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageVulListWithOptions(request, runtime);
}

model DescribeInstallCaptchaRequest {
  deadline?: string(name='Deadline'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeInstallCaptchaResponseBody = {
  captchaCode?: string(name='CaptchaCode'),
  deadline?: string(name='Deadline'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCaptchaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstallCaptchaResponseBody(name='body'),
}

async function describeInstallCaptchaWithOptions(request: DescribeInstallCaptchaRequest, runtime: Util.RuntimeOptions): DescribeInstallCaptchaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstallCaptcha', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstallCaptcha(request: DescribeInstallCaptchaRequest): DescribeInstallCaptchaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCaptchaWithOptions(request, runtime);
}

model DescribeInstallCodesRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
  subAccountName?: string(name='SubAccountName'),
}

model DescribeInstallCodesResponseBody = {
  installCodes?: [ 
    {
      captchaCode?: string(name='CaptchaCode'),
      expiredDate?: long(name='ExpiredDate'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      onlyImage?: boolean(name='OnlyImage'),
      os?: string(name='Os'),
      tag?: string(name='Tag'),
      vendor?: int32(name='Vendor'),
      vendorName?: string(name='VendorName'),
    }
  ](name='InstallCodes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstallCodesResponseBody(name='body'),
}

async function describeInstallCodesWithOptions(request: DescribeInstallCodesRequest, runtime: Util.RuntimeOptions): DescribeInstallCodesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstallCodes', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstallCodes(request: DescribeInstallCodesRequest): DescribeInstallCodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCodesWithOptions(request, runtime);
}

model DescribeInstanceAntiBruteForceRulesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  uuidList?: [ string ](name='UuidList'),
}

model DescribeInstanceAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
      uuid?: string(name='Uuid'),
    }
  ](name='Rules'),
}

model DescribeInstanceAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAntiBruteForceRulesResponseBody(name='body'),
}

async function describeInstanceAntiBruteForceRulesWithOptions(request: DescribeInstanceAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeInstanceAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAntiBruteForceRules', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAntiBruteForceRules(request: DescribeInstanceAntiBruteForceRulesRequest): DescribeInstanceAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  from?: string(name='From'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model DescribeInstanceStatisticsResponseBody = {
  data?: [ 
    {
      account?: int32(name='Account'),
      appNum?: int32(name='AppNum'),
      cmsNum?: int32(name='CmsNum'),
      cveNum?: int32(name='CveNum'),
      emgNum?: int32(name='EmgNum'),
      health?: int32(name='Health'),
      scaNum?: int32(name='ScaNum'),
      suspicious?: int32(name='Suspicious'),
      sysNum?: int32(name='SysNum'),
      trojan?: int32(name='Trojan'),
      uuid?: string(name='Uuid'),
      vul?: int32(name='Vul'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeIpInfoRequest {
  field?: string(name='Field'),
  ip?: string(name='Ip'),
}

model DescribeIpInfoResponseBody = {
  requestId?: string(name='RequestId'),
  c2DayTrace?: string(name='c2_day_trace'),
  city?: string(name='city'),
  country?: string(name='country'),
  dayCnt30dTor?: string(name='day_cnt_30d_tor'),
  dayCnt30dWebAttack?: string(name='day_cnt_30d_web_attack'),
  dayCnt7dTor?: string(name='day_cnt_7d_tor'),
  dayCnt7dWebAttack?: string(name='day_cnt_7d_web_attack'),
  geo?: string(name='geo'),
  gmtFirstC2?: string(name='gmt_first_c2'),
  gmtFirstMiningPool?: string(name='gmt_first_mining_pool'),
  gmtLastC2?: string(name='gmt_last_c2'),
  gmtLastMaliciousLogin?: string(name='gmt_last_malicious_login'),
  gmtLastMaliciousSource?: string(name='gmt_last_malicious_source'),
  gmtLastMiningPool?: string(name='gmt_last_mining_pool'),
  gmtLastNat?: string(name='gmt_last_nat'),
  gmtLastProxy?: string(name='gmt_last_proxy'),
  gmtLastTor?: string(name='gmt_last_tor'),
  gmtLastWebAttack?: string(name='gmt_last_web_attack'),
  idcName?: string(name='idc_name'),
  ip?: string(name='ip'),
  isC2?: string(name='is_c2'),
  isC21d?: string(name='is_c2_1d'),
  isC27d?: string(name='is_c2_7d'),
  isIdc?: string(name='is_idc'),
  isMaliciousLogin?: string(name='is_malicious_login'),
  isMaliciousLogin1d?: string(name='is_malicious_login_1d'),
  isMaliciousLogin7d?: string(name='is_malicious_login_7d'),
  isMaliciousSource?: string(name='is_malicious_source'),
  isMaliciousSource1d?: string(name='is_malicious_source_1d'),
  isMaliciousSource30d?: string(name='is_malicious_source_30d'),
  isMaliciousSource7d?: string(name='is_malicious_source_7d'),
  isMiningPool?: string(name='is_mining_pool'),
  isMiningPool1d?: string(name='is_mining_pool_1d'),
  isMiningPool7d?: string(name='is_mining_pool_7d'),
  isNat?: string(name='is_nat'),
  isNat1d?: string(name='is_nat_1d'),
  isNat7d?: string(name='is_nat_7d'),
  isProxy?: string(name='is_proxy'),
  isProxy1d?: string(name='is_proxy_1d'),
  isProxy7d?: string(name='is_proxy_7d'),
  isTor?: string(name='is_tor'),
  isTor1d?: string(name='is_tor_1d'),
  isTor7d?: string(name='is_tor_7d'),
  isWebAttack?: string(name='is_web_attack'),
  isWebAttack1d?: string(name='is_web_attack_1d'),
  isWebAttack30d?: string(name='is_web_attack_30d'),
  isWebAttack7d?: string(name='is_web_attack_7d'),
  isp?: string(name='isp'),
  maliciousLoginDayTrace?: string(name='malicious_login_day_trace'),
  maliciousScore?: string(name='malicious_score'),
  maliciousSourceDayTrace?: string(name='malicious_source_day_trace'),
  miningPoolDayTrace?: string(name='mining_pool_day_trace'),
  natDayTrace?: string(name='nat_day_trace'),
  province?: string(name='province'),
  proxyDayTrace?: string(name='proxy_day_trace'),
  rdns?: string(name='rdns'),
  tags?: string(name='tags'),
  torDayTrace?: string(name='tor_day_trace'),
  totalDayCntTor?: string(name='total_day_cnt_tor'),
  totalDayCntWebAttack?: string(name='total_day_cnt_web_attack'),
  webAttackDayTrace?: string(name='web_attack_day_trace'),
}

model DescribeIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpInfoResponseBody(name='body'),
}

async function describeIpInfoWithOptions(request: DescribeIpInfoRequest, runtime: Util.RuntimeOptions): DescribeIpInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpInfo(request: DescribeIpInfoRequest): DescribeIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpInfoWithOptions(request, runtime);
}

model DescribeLogstoreStorageRequest {
  from?: string(name='From'),
  lang?: string(name='Lang'),
}

model DescribeLogstoreStorageResponseBody = {
  logstore?: string(name='Logstore'),
  preserve?: long(name='Preserve'),
  requestId?: string(name='RequestId'),
  ttl?: int32(name='Ttl'),
  used?: long(name='Used'),
}

model DescribeLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogstoreStorageResponseBody(name='body'),
}

async function describeLogstoreStorageWithOptions(request: DescribeLogstoreStorageRequest, runtime: Util.RuntimeOptions): DescribeLogstoreStorageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogstoreStorage', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogstoreStorage(request: DescribeLogstoreStorageRequest): DescribeLogstoreStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogstoreStorageWithOptions(request, runtime);
}

model DescribeModuleConfigResponseBody = {
  count?: int32(name='Count'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName'),
      items?: [ 
        {
          groupId?: int32(name='GroupId'),
          instanceId?: string(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
          ip?: string(name='Ip'),
          region?: string(name='Region'),
          uuid?: string(name='Uuid'),
        }
      ](name='Items'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='ModuleConfigList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModuleConfigResponseBody(name='body'),
}

async function describeModuleConfigWithOptions(runtime: Util.RuntimeOptions): DescribeModuleConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeModuleConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeModuleConfig(): DescribeModuleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModuleConfigWithOptions(runtime);
}

model DescribeNoticeConfigRequest {
  sourceIp?: string(name='SourceIp'),
}

model DescribeNoticeConfigResponseBody = {
  noticeConfigList?: [ 
    {
      aliUid?: long(name='AliUid'),
      currentPage?: int32(name='CurrentPage'),
      project?: string(name='Project'),
      route?: int32(name='Route'),
      timeLimit?: int32(name='TimeLimit'),
    }
  ](name='NoticeConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNoticeConfigResponseBody(name='body'),
}

async function describeNoticeConfigWithOptions(request: DescribeNoticeConfigRequest, runtime: Util.RuntimeOptions): DescribeNoticeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNoticeConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNoticeConfig(request: DescribeNoticeConfigRequest): DescribeNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNoticeConfigWithOptions(request, runtime);
}

model DescribePropertyCountRequest {
  type?: string(name='Type'),
  uuidList?: string(name='UuidList'),
}

model DescribePropertyCountResponseBody = {
  autoRun?: int32(name='AutoRun'),
  cron?: int32(name='Cron'),
  port?: int32(name='Port'),
  process?: int32(name='Process'),
  requestId?: string(name='RequestId'),
  sca?: int32(name='Sca'),
  software?: int32(name='Software'),
  user?: int32(name='User'),
}

model DescribePropertyCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyCountResponseBody(name='body'),
}

async function describePropertyCountWithOptions(request: DescribePropertyCountRequest, runtime: Util.RuntimeOptions): DescribePropertyCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyCount', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyCount(request: DescribePropertyCountRequest): DescribePropertyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCountWithOptions(request, runtime);
}

model DescribePropertyCronDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  source?: string(name='Source'),
  user?: string(name='User'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyCronDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      cmd?: string(name='Cmd'),
      create?: string(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      md5?: string(name='Md5'),
      period?: string(name='Period'),
      source?: string(name='Source'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyCronDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyCronDetailResponseBody(name='body'),
}

async function describePropertyCronDetailWithOptions(request: DescribePropertyCronDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyCronDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyCronDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyCronDetail(request: DescribePropertyCronDetailRequest): DescribePropertyCronDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCronDetailWithOptions(request, runtime);
}

model DescribePropertyPortDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  port?: string(name='Port'),
  procName?: string(name='ProcName'),
  remark?: string(name='Remark'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyPortDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      bindIp?: string(name='BindIp'),
      create?: string(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      procName?: string(name='ProcName'),
      proto?: string(name='Proto'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyPortDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyPortDetailResponseBody(name='body'),
}

async function describePropertyPortDetailWithOptions(request: DescribePropertyPortDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyPortDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyPortDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyPortDetail(request: DescribePropertyPortDetailRequest): DescribePropertyPortDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortDetailWithOptions(request, runtime);
}

model DescribePropertyPortItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  pageSize?: int32(name='PageSize'),
  port?: string(name='Port'),
}

model DescribePropertyPortItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      port?: string(name='Port'),
      proto?: string(name='Proto'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyPortItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyPortItemResponseBody(name='body'),
}

async function describePropertyPortItemWithOptions(request: DescribePropertyPortItemRequest, runtime: Util.RuntimeOptions): DescribePropertyPortItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyPortItem', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyPortItem(request: DescribePropertyPortItemRequest): DescribePropertyPortItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortItemWithOptions(request, runtime);
}

model DescribePropertyProcDetailRequest {
  cmdline?: string(name='Cmdline'),
  currentPage?: int32(name='CurrentPage'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  user?: string(name='User'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyProcDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      cmdline?: string(name='Cmdline'),
      create?: string(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      euidName?: string(name='EuidName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      md5?: string(name='Md5'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      pid?: string(name='Pid'),
      pname?: string(name='Pname'),
      startTime?: string(name='StartTime'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyProcDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyProcDetailResponseBody(name='body'),
}

async function describePropertyProcDetailWithOptions(request: DescribePropertyProcDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyProcDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyProcDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyProcDetail(request: DescribePropertyProcDetailRequest): DescribePropertyProcDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcDetailWithOptions(request, runtime);
}

model DescribePropertyProcItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
}

model DescribePropertyProcItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      name?: string(name='Name'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyProcItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyProcItemResponseBody(name='body'),
}

async function describePropertyProcItemWithOptions(request: DescribePropertyProcItemRequest, runtime: Util.RuntimeOptions): DescribePropertyProcItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyProcItem', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyProcItem(request: DescribePropertyProcItemRequest): DescribePropertyProcItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcItemWithOptions(request, runtime);
}

model DescribePropertyScaDetailRequest {
  bizType?: string(name='BizType'),
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  name?: long(name='Name'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  scaName?: string(name='ScaName'),
  searchInfo?: string(name='SearchInfo'),
  searchInfoSub?: string(name='SearchInfoSub'),
  searchItem?: string(name='SearchItem'),
  searchItemSub?: string(name='SearchItemSub'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyScaDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      bizType?: string(name='BizType'),
      bizTypeDispaly?: string(name='BizTypeDispaly'),
      cmdline?: string(name='Cmdline'),
      configPath?: string(name='ConfigPath'),
      containerName?: string(name='ContainerName'),
      create?: string(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      imageName?: string(name='ImageName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      listenIp?: string(name='ListenIp'),
      listenProtocol?: string(name='ListenProtocol'),
      listenStatus?: string(name='ListenStatus'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      ppid?: string(name='Ppid'),
      processStarted?: long(name='ProcessStarted'),
      processUser?: string(name='ProcessUser'),
      proof?: string(name='Proof'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
      webPath?: string(name='WebPath'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyScaDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyScaDetailResponseBody(name='body'),
}

async function describePropertyScaDetailWithOptions(request: DescribePropertyScaDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyScaDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyScaDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyScaDetail(request: DescribePropertyScaDetailRequest): DescribePropertyScaDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScaDetailWithOptions(request, runtime);
}

model DescribePropertySoftwareDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
  path?: string(name='Path'),
  remark?: string(name='Remark'),
  softwareVersion?: string(name='SoftwareVersion'),
  uuid?: string(name='Uuid'),
}

model DescribePropertySoftwareDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      create?: long(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      installTime?: string(name='InstallTime'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertySoftwareDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertySoftwareDetailResponseBody(name='body'),
}

async function describePropertySoftwareDetailWithOptions(request: DescribePropertySoftwareDetailRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertySoftwareDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertySoftwareDetail(request: DescribePropertySoftwareDetailRequest): DescribePropertySoftwareDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareDetailWithOptions(request, runtime);
}

model DescribePropertySoftwareItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
}

model DescribePropertySoftwareItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      name?: string(name='Name'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertySoftwareItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertySoftwareItemResponseBody(name='body'),
}

async function describePropertySoftwareItemWithOptions(request: DescribePropertySoftwareItemRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertySoftwareItem', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertySoftwareItem(request: DescribePropertySoftwareItemRequest): DescribePropertySoftwareItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareItemWithOptions(request, runtime);
}

model DescribePropertyUsageNewestRequest {
  type?: string(name='Type'),
}

model DescribePropertyUsageNewestResponseBody = {
  itemCount?: int32(name='ItemCount'),
  newestStatisticItems?: [ 
    {
      create?: long(name='Create'),
      name?: string(name='Name'),
    }
  ](name='NewestStatisticItems'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
}

model DescribePropertyUsageNewestResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUsageNewestResponseBody(name='body'),
}

async function describePropertyUsageNewestWithOptions(request: DescribePropertyUsageNewestRequest, runtime: Util.RuntimeOptions): DescribePropertyUsageNewestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyUsageNewest', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyUsageNewest(request: DescribePropertyUsageNewestRequest): DescribePropertyUsageNewestResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUsageNewestWithOptions(request, runtime);
}

model DescribePropertyUserDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  isRoot?: string(name='IsRoot'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  user?: string(name='User'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyUserDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      accountsExpirationDate?: string(name='AccountsExpirationDate'),
      create?: string(name='Create'),
      createTimestamp?: long(name='CreateTimestamp'),
      groupNames?: [ string ](name='GroupNames'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      isRoot?: string(name='IsRoot'),
      lastLoginIp?: string(name='LastLoginIp'),
      lastLoginTime?: string(name='LastLoginTime'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp'),
      passwordExpirationDate?: string(name='PasswordExpirationDate'),
      status?: string(name='Status'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyUserDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUserDetailResponseBody(name='body'),
}

async function describePropertyUserDetailWithOptions(request: DescribePropertyUserDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyUserDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyUserDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyUserDetail(request: DescribePropertyUserDetailRequest): DescribePropertyUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserDetailWithOptions(request, runtime);
}

model DescribePropertyUserItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  pageSize?: int32(name='PageSize'),
  user?: string(name='User'),
}

model DescribePropertyUserItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      user?: string(name='User'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyUserItemResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePropertyUserItemResponseBody(name='body'),
}

async function describePropertyUserItemWithOptions(request: DescribePropertyUserItemRequest, runtime: Util.RuntimeOptions): DescribePropertyUserItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePropertyUserItem', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePropertyUserItem(request: DescribePropertyUserItemRequest): DescribePropertyUserItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserItemWithOptions(request, runtime);
}

model DescribeQuaraFileDownloadInfoRequest {
  from?: string(name='From'),
  quaraFileId?: int32(name='QuaraFileId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeQuaraFileDownloadInfoResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  md5?: string(name='Md5'),
  path?: string(name='Path'),
  quaraFileId?: int32(name='QuaraFileId'),
  requestId?: string(name='RequestId'),
  tag?: string(name='Tag'),
  uuid?: string(name='Uuid'),
}

model DescribeQuaraFileDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQuaraFileDownloadInfoResponseBody(name='body'),
}

async function describeQuaraFileDownloadInfoWithOptions(request: DescribeQuaraFileDownloadInfoRequest, runtime: Util.RuntimeOptions): DescribeQuaraFileDownloadInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeQuaraFileDownloadInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeQuaraFileDownloadInfo(request: DescribeQuaraFileDownloadInfoRequest): DescribeQuaraFileDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQuaraFileDownloadInfoWithOptions(request, runtime);
}

model DescribeRestoreJobsRequest {
  currentPage?: int32(name='CurrentPage'),
  machineRemark?: string(name='MachineRemark'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeRestoreJobsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  restoreJobs?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      completeTime?: long(name='CompleteTime'),
      createdTime?: long(name='CreatedTime'),
      duration?: long(name='Duration'),
      errorCount?: long(name='ErrorCount'),
      errorFile?: string(name='ErrorFile'),
      errorFileUrl?: string(name='ErrorFileUrl'),
      errorType?: string(name='ErrorType'),
      eta?: long(name='Eta'),
      excludes?: string(name='Excludes'),
      exitCode?: string(name='ExitCode'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      includes?: string(name='Includes'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      message?: string(name='Message'),
      percentage?: int32(name='Percentage'),
      requestId?: string(name='RequestId'),
      restoreId?: string(name='RestoreId'),
      restoreName?: string(name='RestoreName'),
      restoreType?: string(name='RestoreType'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      snapshotVersion?: string(name='SnapshotVersion'),
      source?: string(name='Source'),
      sourceClientId?: string(name='SourceClientId'),
      speed?: long(name='Speed'),
      status?: string(name='Status'),
      target?: string(name='Target'),
      updatedTime?: long(name='UpdatedTime'),
      uuid?: string(name='Uuid'),
      vaultId?: string(name='VaultId'),
    }
  ](name='RestoreJobs'),
}

model DescribeRestoreJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreJobsResponseBody(name='body'),
}

async function describeRestoreJobsWithOptions(request: DescribeRestoreJobsRequest, runtime: Util.RuntimeOptions): DescribeRestoreJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRestoreJobs', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRestoreJobs(request: DescribeRestoreJobsRequest): DescribeRestoreJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreJobsWithOptions(request, runtime);
}

model DescribeRestorePlansRequest {
  currentPage?: int32(name='CurrentPage'),
  instanceName?: string(name='InstanceName'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
}

model DescribeRestorePlansResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  restorePlans?: [ 
    {
      createdTime?: long(name='CreatedTime'),
      databaseName?: string(name='DatabaseName'),
      instanceName?: string(name='InstanceName'),
      policyId?: long(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      restorePoint?: long(name='RestorePoint'),
      status?: string(name='Status'),
      targetDatabaseName?: string(name='TargetDatabaseName'),
      targetInstanceId?: string(name='TargetInstanceId'),
      targetInstanceName?: string(name='TargetInstanceName'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='RestorePlans'),
}

model DescribeRestorePlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestorePlansResponseBody(name='body'),
}

async function describeRestorePlansWithOptions(request: DescribeRestorePlansRequest, runtime: Util.RuntimeOptions): DescribeRestorePlansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRestorePlans', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRestorePlans(request: DescribeRestorePlansRequest): DescribeRestorePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestorePlansWithOptions(request, runtime);
}

model DescribeRiskCheckItemResultRequest {
  currentPage?: int32(name='CurrentPage'),
  itemId?: long(name='ItemId'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeRiskCheckItemResultResponseBody = {
  pageContentResource?: {
    contentResource?: map[string]any(name='ContentResource'),
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageContentResource'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskCheckItemResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckItemResultResponseBody(name='body'),
}

async function describeRiskCheckItemResultWithOptions(request: DescribeRiskCheckItemResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckItemResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskCheckItemResult', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskCheckItemResult(request: DescribeRiskCheckItemResultRequest): DescribeRiskCheckItemResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckItemResultWithOptions(request, runtime);
}

model DescribeRiskCheckResultRequest {
  assetType?: string(name='AssetType'),
  currentPage?: int32(name='CurrentPage'),
  groupId?: long(name='GroupId'),
  itemIds?: [ string ](name='ItemIds'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
  queryFlag?: string(name='QueryFlag'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  riskLevel?: string(name='RiskLevel'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
}

model DescribeRiskCheckResultResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  list?: [ 
    {
      affectedCount?: int32(name='AffectedCount'),
      checkTime?: long(name='CheckTime'),
      itemId?: long(name='ItemId'),
      remainingTime?: int32(name='RemainingTime'),
      repairStatus?: string(name='RepairStatus'),
      riskAssertType?: string(name='RiskAssertType'),
      riskItemResources?: [ 
        {
          contentResource?: map[string]any(name='ContentResource'),
          resourceName?: string(name='ResourceName'),
        }
      ](name='RiskItemResources'),
      riskLevel?: string(name='RiskLevel'),
      sort?: int32(name='Sort'),
      startStatus?: string(name='StartStatus'),
      status?: string(name='Status'),
      taskId?: long(name='TaskId'),
      title?: string(name='Title'),
      type?: string(name='Type'),
    }
  ](name='List'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRiskCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckResultResponseBody(name='body'),
}

async function describeRiskCheckResultWithOptions(request: DescribeRiskCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskCheckResult', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskCheckResult(request: DescribeRiskCheckResultRequest): DescribeRiskCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckResultWithOptions(request, runtime);
}

model DescribeRiskCheckSummaryRequest {
  lang?: string(name='Lang'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeRiskCheckSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  riskCheckSummary?: {
    affectedAssetCount?: int32(name='AffectedAssetCount'),
    disabledRiskCount?: int32(name='DisabledRiskCount'),
    enabledRiskCount?: int32(name='EnabledRiskCount'),
    groups?: [ 
      {
        countByStatus?: [ 
          {
            count?: int32(name='Count'),
            status?: string(name='Status'),
          }
        ](name='CountByStatus'),
        id?: long(name='Id'),
        remainingTime?: int32(name='RemainingTime'),
        sort?: int32(name='Sort'),
        status?: string(name='Status'),
        title?: string(name='Title'),
      }
    ](name='Groups'),
    itemCount?: int32(name='ItemCount'),
    previousCount?: int32(name='PreviousCount'),
    previousTime?: long(name='PreviousTime'),
    riskCount?: int32(name='RiskCount'),
    riskLevelCount?: [ 
      {
        count?: int32(name='Count'),
        key?: string(name='Key'),
      }
    ](name='RiskLevelCount'),
    riskRate?: float(name='RiskRate'),
  }(name='RiskCheckSummary'),
}

model DescribeRiskCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskCheckSummaryResponseBody(name='body'),
}

async function describeRiskCheckSummaryWithOptions(request: DescribeRiskCheckSummaryRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskCheckSummary', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskCheckSummary(request: DescribeRiskCheckSummaryRequest): DescribeRiskCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckSummaryWithOptions(request, runtime);
}

model DescribeRiskItemTypeRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeRiskItemTypeResponseBody = {
  list?: [ 
    {
      id?: long(name='Id'),
      title?: string(name='Title'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskItemTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskItemTypeResponseBody(name='body'),
}

async function describeRiskItemTypeWithOptions(request: DescribeRiskItemTypeRequest, runtime: Util.RuntimeOptions): DescribeRiskItemTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskItemType', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskItemType(request: DescribeRiskItemTypeRequest): DescribeRiskItemTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskItemTypeWithOptions(request, runtime);
}

model DescribeRiskListCheckResultRequest {
  currentPage?: int32(name='CurrentPage'),
  instanceIds?: [ string ](name='InstanceIds'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeRiskListCheckResultResponseBody = {
  list?: [ 
    {
      instanceId?: string(name='InstanceId'),
      riskCount?: long(name='riskCount'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskListCheckResultResponseBody(name='body'),
}

async function describeRiskListCheckResultWithOptions(request: DescribeRiskListCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskListCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskListCheckResult', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskListCheckResult(request: DescribeRiskListCheckResultRequest): DescribeRiskListCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskListCheckResultWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  taskId?: long(name='TaskId'),
}

model DescribeScanTaskProgressResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskProgress?: string(name='ScanTaskProgress'),
  targetInfo?: string(name='TargetInfo'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScanTaskProgress', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeSearchConditionRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  type?: string(name='Type'),
}

model DescribeSearchConditionResponseBody = {
  conditionList?: [ 
    {
      conditionType?: string(name='ConditionType'),
      filterConditions?: string(name='FilterConditions'),
      name?: string(name='Name'),
      nameKey?: string(name='NameKey'),
    }
  ](name='ConditionList'),
  requestId?: string(name='RequestId'),
}

model DescribeSearchConditionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSearchConditionResponseBody(name='body'),
}

async function describeSearchConditionWithOptions(request: DescribeSearchConditionRequest, runtime: Util.RuntimeOptions): DescribeSearchConditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSearchCondition', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSearchCondition(request: DescribeSearchConditionRequest): DescribeSearchConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSearchConditionWithOptions(request, runtime);
}

model DescribeSecureSuggestionRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSecureSuggestionResponseBody = {
  requestId?: string(name='RequestId'),
  suggestions?: [ 
    {
      detail?: [ 
        {
          description?: string(name='Description'),
          subType?: string(name='SubType'),
          title?: string(name='Title'),
        }
      ](name='Detail'),
      points?: int32(name='Points'),
      suggestType?: string(name='SuggestType'),
    }
  ](name='Suggestions'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecureSuggestionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecureSuggestionResponseBody(name='body'),
}

async function describeSecureSuggestionWithOptions(request: DescribeSecureSuggestionRequest, runtime: Util.RuntimeOptions): DescribeSecureSuggestionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecureSuggestion', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecureSuggestion(request: DescribeSecureSuggestionRequest): DescribeSecureSuggestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecureSuggestionWithOptions(request, runtime);
}

model DescribeSecurityCheckScheduleConfigRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId'),
  riskCheckJobConfig?: {
    daysOfWeek?: string(name='DaysOfWeek'),
    endTime?: int32(name='EndTime'),
    startTime?: int32(name='StartTime'),
  }(name='RiskCheckJobConfig'),
}

model DescribeSecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityCheckScheduleConfigResponseBody(name='body'),
}

async function describeSecurityCheckScheduleConfigWithOptions(request: DescribeSecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): DescribeSecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityCheckScheduleConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityCheckScheduleConfig(request: DescribeSecurityCheckScheduleConfigRequest): DescribeSecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityCheckScheduleConfigWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventIds?: [ string ](name='SecurityEventIds'),
  sourceIp?: string(name='SourceIp'),
  taskId?: long(name='TaskId'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperationStatusResponse?: {
    securityEventOperationStatuses?: [ 
      {
        errorCode?: string(name='ErrorCode'),
        securityEventId?: string(name='SecurityEventId'),
        status?: string(name='Status'),
      }
    ](name='SecurityEventOperationStatuses'),
    taskStatus?: string(name='TaskStatus'),
  }(name='SecurityEventOperationStatusResponse'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityEventOperationStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName'),
          filedName?: string(name='FiledName'),
          markMisType?: string(name='MarkMisType'),
          markMisValue?: string(name='MarkMisValue'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkField'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName'),
          filedName?: string(name='FiledName'),
          markMisValue?: string(name='MarkMisValue'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkFieldsSource'),
      operationCode?: string(name='OperationCode'),
      operationParams?: string(name='OperationParams'),
      userCanOperate?: boolean(name='UserCanOperate'),
    }
  ](name='SecurityEventOperationsResponse'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityEventOperations', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSecurityStatInfoRequest {
  lang?: string(name='Lang'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='AttackEvent'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray'),
    highCount?: int32(name='HighCount'),
    highList?: [ string ](name='HighList'),
    levelsOn?: [ string ](name='LevelsOn'),
    lowCount?: int32(name='LowCount'),
    lowList?: [ string ](name='LowList'),
    mediumCount?: int32(name='MediumCount'),
    mediumList?: [ string ](name='MediumList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='HealthCheck'),
  requestId?: string(name='RequestId'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray'),
    levelsOn?: [ string ](name='LevelsOn'),
    remindCount?: int32(name='RemindCount'),
    remindList?: [ string ](name='RemindList'),
    seriousCount?: int32(name='SeriousCount'),
    seriousList?: [ string ](name='SeriousList'),
    suspiciousCount?: int32(name='SuspiciousCount'),
    suspiciousList?: [ string ](name='SuspiciousList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='SecurityEvent'),
  success?: boolean(name='Success'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount'),
    asapList?: [ string ](name='AsapList'),
    dateArray?: [ string ](name='DateArray'),
    laterCount?: int32(name='LaterCount'),
    laterList?: [ string ](name='LaterList'),
    levelsOn?: [ string ](name='LevelsOn'),
    nntfCount?: int32(name='NntfCount'),
    nntfList?: [ string ](name='NntfList'),
    timeArray?: [ string ](name='TimeArray'),
    totalCount?: int32(name='TotalCount'),
    valueArray?: [ string ](name='ValueArray'),
  }(name='Vulnerability'),
}

model DescribeSecurityStatInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityStatInfoResponseBody(name='body'),
}

async function describeSecurityStatInfoWithOptions(request: DescribeSecurityStatInfoRequest, runtime: Util.RuntimeOptions): DescribeSecurityStatInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityStatInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityStatInfo(request: DescribeSecurityStatInfoRequest): DescribeSecurityStatInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityStatInfoWithOptions(request, runtime);
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId'),
  roleStatus?: {
    status?: boolean(name='Status'),
  }(name='RoleStatus'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

async function describeServiceLinkedRoleStatusWithOptions(runtime: Util.RuntimeOptions): DescribeServiceLinkedRoleStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeServiceLinkedRoleStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeServiceLinkedRoleStatus(): DescribeServiceLinkedRoleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceLinkedRoleStatusWithOptions(runtime);
}

model DescribeSimilarEventScenariosRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSimilarEventScenariosResponseBody = {
  requestId?: string(name='RequestId'),
  scenarios?: [ 
    {
      code?: string(name='Code'),
    }
  ](name='Scenarios'),
}

model DescribeSimilarEventScenariosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSimilarEventScenariosResponseBody(name='body'),
}

async function describeSimilarEventScenariosWithOptions(request: DescribeSimilarEventScenariosRequest, runtime: Util.RuntimeOptions): DescribeSimilarEventScenariosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSimilarEventScenarios', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSimilarEventScenarios(request: DescribeSimilarEventScenariosRequest): DescribeSimilarEventScenariosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarEventScenariosWithOptions(request, runtime);
}

model DescribeSimilarSecurityEventsRequest {
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  taskId?: long(name='TaskId'),
}

model DescribeSimilarSecurityEventsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  securityEventsResponse?: [ 
    {
      eventName?: string(name='EventName'),
      eventType?: string(name='EventType'),
      lastTime?: long(name='LastTime'),
      occurrenceTime?: long(name='OccurrenceTime'),
      securityEventId?: long(name='SecurityEventId'),
      uuid?: string(name='Uuid'),
    }
  ](name='SecurityEventsResponse'),
}

model DescribeSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSimilarSecurityEventsResponseBody(name='body'),
}

async function describeSimilarSecurityEventsWithOptions(request: DescribeSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): DescribeSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSimilarSecurityEvents', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSimilarSecurityEvents(request: DescribeSimilarSecurityEventsRequest): DescribeSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarSecurityEventsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  apiVersion?: string(name='ApiVersion'),
  currentPage?: int32(name='CurrentPage'),
  isAliYunEcs?: string(name='IsAliYunEcs'),
  machineRegion?: string(name='MachineRegion'),
  machineRemark?: string(name='MachineRemark'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  statusList?: string(name='StatusList'),
  uuid?: string(name='Uuid'),
}

model DescribeSnapshotsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    nextToken?: string(name='NextToken'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      actualItems?: long(name='ActualItems'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      containerSnapshotId?: string(name='ContainerSnapshotId'),
      createdTime?: long(name='CreatedTime'),
      duration?: long(name='Duration'),
      errorCount?: long(name='ErrorCount'),
      errorFile?: string(name='ErrorFile'),
      errorMessage?: string(name='ErrorMessage'),
      errorType?: string(name='ErrorType'),
      exitCode?: string(name='ExitCode'),
      instanceId?: string(name='InstanceId'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      jobId?: string(name='JobId'),
      parentHash?: string(name='ParentHash'),
      parentSnapshotHash?: string(name='ParentSnapshotHash'),
      path?: string(name='Path'),
      paths?: [ string ](name='Paths'),
      planId?: string(name='PlanId'),
      regionId?: string(name='RegionId'),
      retention?: long(name='Retention'),
      size?: long(name='Size'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      snapshotOption?: string(name='SnapshotOption'),
      snapshotType?: string(name='SnapshotType'),
      source?: string(name='Source'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      uuid?: string(name='Uuid'),
      vaultId?: string(name='VaultId'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshots', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeStrategyRequest {
  customType?: string(name='CustomType'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  strategyIds?: string(name='StrategyIds'),
}

model DescribeStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategies?: [ 
    {
      configTargets?: [ 
        {
          flag?: string(name='Flag'),
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='ConfigTargets'),
      customType?: string(name='CustomType'),
      cycleDays?: int32(name='CycleDays'),
      cycleStartTime?: int32(name='CycleStartTime'),
      ecsCount?: int32(name='EcsCount'),
      execStatus?: int32(name='ExecStatus'),
      id?: int32(name='Id'),
      name?: string(name='Name'),
      passRate?: int32(name='PassRate'),
      processRate?: int32(name='ProcessRate'),
      riskCount?: int32(name='RiskCount'),
      type?: int32(name='Type'),
    }
  ](name='Strategies'),
}

model DescribeStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyResponseBody(name='body'),
}

async function describeStrategyWithOptions(request: DescribeStrategyRequest, runtime: Util.RuntimeOptions): DescribeStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStrategy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStrategy(request: DescribeStrategyRequest): DescribeStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyWithOptions(request, runtime);
}

model DescribeStrategyExecDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  sourceIp?: string(name='SourceIp'),
  strategyId?: int32(name='StrategyId'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime'),
  failCount?: int32(name='FailCount'),
  failedEcsList?: [ 
    {
      IP?: string(name='IP'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      reason?: string(name='Reason'),
    }
  ](name='FailedEcsList'),
  inProcessCount?: int32(name='InProcessCount'),
  percent?: string(name='Percent'),
  requestId?: string(name='RequestId'),
  source?: string(name='Source'),
  startTime?: string(name='StartTime'),
  successCount?: int32(name='SuccessCount'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetailWithOptions(request: DescribeStrategyExecDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyExecDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStrategyExecDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyExecDetailWithOptions(request, runtime);
}

model DescribeStrategyProcessRequest {
  sourceIp?: string(name='SourceIp'),
  strategyId?: long(name='StrategyId'),
}

model DescribeStrategyProcessResponseBody = {
  execStatus?: int32(name='ExecStatus'),
  passRate?: string(name='PassRate'),
  processRate?: int32(name='ProcessRate'),
  requestId?: string(name='RequestId'),
  strategyId?: long(name='StrategyId'),
}

model DescribeStrategyProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyProcessResponseBody(name='body'),
}

async function describeStrategyProcessWithOptions(request: DescribeStrategyProcessRequest, runtime: Util.RuntimeOptions): DescribeStrategyProcessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStrategyProcess', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStrategyProcess(request: DescribeStrategyProcessRequest): DescribeStrategyProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyProcessWithOptions(request, runtime);
}

model DescribeStrategyTargetRequest {
  config?: string(name='Config'),
  sourceIp?: string(name='SourceIp'),
  type?: string(name='Type'),
}

model DescribeStrategyTargetResponseBody = {
  requestId?: string(name='RequestId'),
  strategyTargets?: [ 
    {
      bindUuidCount?: int32(name='BindUuidCount'),
      flag?: string(name='Flag'),
      target?: string(name='Target'),
      targetType?: string(name='TargetType'),
    }
  ](name='StrategyTargets'),
}

model DescribeStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyTargetResponseBody(name='body'),
}

async function describeStrategyTargetWithOptions(request: DescribeStrategyTargetRequest, runtime: Util.RuntimeOptions): DescribeStrategyTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStrategyTarget', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStrategyTarget(request: DescribeStrategyTargetRequest): DescribeStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyTargetWithOptions(request, runtime);
}

model DescribeSummaryInfoRequest {
  lang?: string(name='Lang'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount'),
  requestId?: string(name='RequestId'),
  securityScore?: int32(name='SecurityScore'),
  success?: boolean(name='Success'),
}

model DescribeSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSummaryInfoResponseBody(name='body'),
}

async function describeSummaryInfoWithOptions(request: DescribeSummaryInfoRequest, runtime: Util.RuntimeOptions): DescribeSummaryInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSummaryInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSummaryInfo(request: DescribeSummaryInfoRequest): DescribeSummaryInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryInfoWithOptions(request, runtime);
}

model DescribeSupportRegionResponseBody = {
  requestId?: string(name='RequestId'),
  supportRegion?: [ string ](name='SupportRegion'),
}

model DescribeSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportRegionResponseBody(name='body'),
}

async function describeSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeSupportRegion', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSupportRegion(): DescribeSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportRegionWithOptions(runtime);
}

model DescribeSuspEventDetailRequest {
  from?: string(name='From'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  suspiciousEventId?: int32(name='SuspiciousEventId'),
}

model DescribeSuspEventDetailResponseBody = {
  canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
  dataSource?: string(name='DataSource'),
  details?: [ 
    {
      nameDisplay?: string(name='NameDisplay'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='Details'),
  eventDesc?: string(name='EventDesc'),
  eventName?: string(name='EventName'),
  eventStatus?: string(name='EventStatus'),
  eventTypeDesc?: string(name='EventTypeDesc'),
  id?: int32(name='Id'),
  instanceName?: string(name='InstanceName'),
  internetIp?: string(name='InternetIp'),
  intranetIp?: string(name='IntranetIp'),
  lastTime?: string(name='LastTime'),
  level?: string(name='Level'),
  operateErrorCode?: string(name='OperateErrorCode'),
  operateMsg?: string(name='OperateMsg'),
  requestId?: string(name='RequestId'),
  saleVersion?: string(name='SaleVersion'),
  uuid?: string(name='Uuid'),
}

model DescribeSuspEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventDetailResponseBody(name='body'),
}

async function describeSuspEventDetailWithOptions(request: DescribeSuspEventDetailRequest, runtime: Util.RuntimeOptions): DescribeSuspEventDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEventDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEventDetail(request: DescribeSuspEventDetailRequest): DescribeSuspEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventDetailWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: string(name='CurrentPage'),
  from?: string(name='From'),
  groupId?: string(name='GroupId'),
  pageSize?: string(name='PageSize'),
  quaraTag?: string(name='QuaraTag'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  quaraFiles?: [ 
    {
      eventName?: string(name='EventName'),
      eventType?: string(name='EventType'),
      id?: int32(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      ip?: string(name='Ip'),
      link?: string(name='Link'),
      md5?: string(name='Md5'),
      modifyTime?: string(name='ModifyTime'),
      path?: string(name='Path'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
      uuid?: string(name='Uuid'),
    }
  ](name='QuaraFiles'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEventQuaraFiles', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
  clusterId?: string(name='ClusterId'),
  containerFieldName?: string(name='ContainerFieldName'),
  containerFieldValue?: string(name='ContainerFieldValue'),
  currentPage?: string(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  eventNames?: string(name='EventNames'),
  from?: string(name='From'),
  groupId?: long(name='GroupId'),
  lang?: string(name='Lang'),
  levels?: string(name='Levels'),
  name?: string(name='Name'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList'),
  pageSize?: string(name='PageSize'),
  parentEventTypes?: string(name='ParentEventTypes'),
  remark?: string(name='Remark'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  targetType?: string(name='TargetType'),
  uniqueInfo?: string(name='UniqueInfo'),
  uuids?: string(name='Uuids'),
}

model DescribeSuspEventsResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      advanced?: boolean(name='Advanced'),
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      appName?: string(name='AppName'),
      autoBreaking?: boolean(name='AutoBreaking'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      containHwMode?: boolean(name='ContainHwMode'),
      containerId?: string(name='ContainerId'),
      containerImageId?: string(name='ContainerImageId'),
      containerImageName?: string(name='ContainerImageName'),
      dataSource?: string(name='DataSource'),
      desc?: string(name='Desc'),
      details?: [ 
        {
          nameDisplay?: string(name='NameDisplay'),
          type?: string(name='Type'),
          value?: string(name='Value'),
          valueDisplay?: string(name='ValueDisplay'),
        }
      ](name='Details'),
      eventNotes?: [ 
        {
          note?: string(name='Note'),
          noteId?: long(name='NoteId'),
          noteTime?: string(name='NoteTime'),
        }
      ](name='EventNotes'),
      eventStatus?: int32(name='EventStatus'),
      eventSubType?: string(name='EventSubType'),
      hasTraceInfo?: boolean(name='HasTraceInfo'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      k8sClusterId?: string(name='K8sClusterId'),
      k8sClusterName?: string(name='K8sClusterName'),
      k8sNamespace?: string(name='K8sNamespace'),
      k8sNodeId?: string(name='K8sNodeId'),
      k8sNodeName?: string(name='K8sNodeName'),
      k8sPodName?: string(name='K8sPodName'),
      lastTime?: string(name='LastTime'),
      lastTimeStamp?: long(name='LastTimeStamp'),
      level?: string(name='Level'),
      markMisRules?: string(name='MarkMisRules'),
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      occurrenceTimeStamp?: long(name='OccurrenceTimeStamp'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateMsg?: string(name='OperateMsg'),
      operateTime?: long(name='OperateTime'),
      saleVersion?: string(name='SaleVersion'),
      securityEventIds?: string(name='SecurityEventIds'),
      stages?: string(name='Stages'),
      uniqueInfo?: string(name='UniqueInfo'),
      uuid?: string(name='Uuid'),
    }
  ](name='SuspEvents'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEvents', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeTaskErrorLogRequest {
  buildTaskId?: string(name='BuildTaskId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeTaskErrorLogResponseBody = {
  logs?: [ 
    {
      text?: string(name='Text'),
    }
  ](name='Logs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeTaskErrorLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskErrorLogResponseBody(name='body'),
}

async function describeTaskErrorLogWithOptions(request: DescribeTaskErrorLogRequest, runtime: Util.RuntimeOptions): DescribeTaskErrorLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTaskErrorLog', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTaskErrorLog(request: DescribeTaskErrorLogRequest): DescribeTaskErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskErrorLogWithOptions(request, runtime);
}

model DescribeUniBackupDatabaseRequest {
  currentPage?: int32(name='CurrentPage'),
  databaseType?: string(name='DatabaseType'),
  instanceName?: string(name='InstanceName'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  uniRegionId?: string(name='UniRegionId'),
}

model DescribeUniBackupDatabaseResponseBody = {
  databaseList?: [ 
    {
      agentStatus?: string(name='AgentStatus'),
      createdByProduct?: string(name='CreatedByProduct'),
      databaseName?: string(name='DatabaseName'),
      databaseType?: string(name='DatabaseType'),
      databaseVersion?: string(name='DatabaseVersion'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceUuid?: string(name='InstanceUuid'),
      policyId?: long(name='PolicyId'),
      status?: string(name='Status'),
    }
  ](name='DatabaseList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeUniBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniBackupDatabaseResponseBody(name='body'),
}

async function describeUniBackupDatabaseWithOptions(request: DescribeUniBackupDatabaseRequest, runtime: Util.RuntimeOptions): DescribeUniBackupDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUniBackupDatabase', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniBackupDatabase(request: DescribeUniBackupDatabaseRequest): DescribeUniBackupDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupDatabaseWithOptions(request, runtime);
}

model DescribeUniBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  policyName?: string(name='PolicyName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUniBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  uniBackupPolicies?: [ 
    {
      agentErrorMessage?: string(name='AgentErrorMessage'),
      agentStatus?: string(name='AgentStatus'),
      databaseName?: string(name='DatabaseName'),
      databaseType?: string(name='DatabaseType'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceUuid?: string(name='InstanceUuid'),
      latestBackResult?: string(name='LatestBackResult'),
      latestBackupTime?: string(name='LatestBackupTime'),
      planStatus?: string(name='PlanStatus'),
      policyId?: long(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      policyStatus?: string(name='PolicyStatus'),
      uniBackUpCount?: int32(name='UniBackUpCount'),
      uniRegionId?: string(name='UniRegionId'),
    }
  ](name='UniBackupPolicies'),
}

model DescribeUniBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniBackupPoliciesResponseBody(name='body'),
}

async function describeUniBackupPoliciesWithOptions(request: DescribeUniBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUniBackupPolicies', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniBackupPolicies(request: DescribeUniBackupPoliciesRequest): DescribeUniBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPoliciesWithOptions(request, runtime);
}

model DescribeUniBackupPolicyDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  policyId?: string(name='PolicyId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUniBackupPolicyDetailResponseBody = {
  requestId?: string(name='RequestId'),
  uniBackupPolicyDTO?: {
    accountName?: string(name='AccountName'),
    agentStatus?: string(name='AgentStatus'),
    databaseType?: string(name='DatabaseType'),
    fullPlan?: {
      days?: [ string ](name='Days'),
      interval?: int32(name='Interval'),
      planType?: string(name='PlanType'),
      startTime?: string(name='StartTime'),
    }(name='FullPlan'),
    incPlan?: {
      days?: [ string ](name='Days'),
      interval?: int32(name='Interval'),
      planType?: string(name='PlanType'),
      startTime?: string(name='StartTime'),
    }(name='IncPlan'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    policyId?: long(name='PolicyId'),
    policyName?: string(name='PolicyName'),
    policyStatus?: string(name='PolicyStatus'),
    retention?: int32(name='Retention'),
    speedLimiter?: long(name='SpeedLimiter'),
    uniBackUpCount?: int32(name='UniBackUpCount'),
  }(name='UniBackupPolicyDTO'),
}

model DescribeUniBackupPolicyDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniBackupPolicyDetailResponseBody(name='body'),
}

async function describeUniBackupPolicyDetailWithOptions(request: DescribeUniBackupPolicyDetailRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPolicyDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUniBackupPolicyDetail', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniBackupPolicyDetail(request: DescribeUniBackupPolicyDetailRequest): DescribeUniBackupPolicyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPolicyDetailWithOptions(request, runtime);
}

model DescribeUniBackupStatisticsResponseBody = {
  protectedDatabaseCount?: int32(name='ProtectedDatabaseCount'),
  requestId?: string(name='RequestId'),
  restoringTaskCount?: int32(name='RestoringTaskCount'),
  totalRecoverableCount?: int32(name='TotalRecoverableCount'),
  totalRestoreTaskCount?: int32(name='TotalRestoreTaskCount'),
  unprotectedDatabaseCount?: int32(name='UnprotectedDatabaseCount'),
}

model DescribeUniBackupStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniBackupStatisticsResponseBody(name='body'),
}

async function describeUniBackupStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeUniBackupStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeUniBackupStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniBackupStatistics(): DescribeUniBackupStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupStatisticsWithOptions(runtime);
}

model DescribeUniRecoverableListRequest {
  currentPage?: int32(name='CurrentPage'),
  database?: string(name='Database'),
  pageSize?: int32(name='PageSize'),
  policyId?: long(name='PolicyId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUniRecoverableListResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  database?: string(name='Database'),
  pageSize?: int32(name='PageSize'),
  recoverableInfoList?: [ 
    {
      firstTime?: long(name='FirstTime'),
      lastTime?: long(name='LastTime'),
      name?: string(name='Name'),
      resetScn?: string(name='ResetScn'),
      resetTime?: long(name='ResetTime'),
      restoreInfo?: map[string]any(name='RestoreInfo'),
    }
  ](name='RecoverableInfoList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeUniRecoverableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniRecoverableListResponseBody(name='body'),
}

async function describeUniRecoverableListWithOptions(request: DescribeUniRecoverableListRequest, runtime: Util.RuntimeOptions): DescribeUniRecoverableListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUniRecoverableList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniRecoverableList(request: DescribeUniRecoverableListRequest): DescribeUniRecoverableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniRecoverableListWithOptions(request, runtime);
}

model DescribeUniSupportRegionResponseBody = {
  requestId?: string(name='RequestId'),
  uniSupportRegion?: [ string ](name='UniSupportRegion'),
}

model DescribeUniSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUniSupportRegionResponseBody(name='body'),
}

async function describeUniSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeUniSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeUniSupportRegion', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUniSupportRegion(): DescribeUniSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniSupportRegionWithOptions(runtime);
}

model DescribeUserBackupMachinesResponseBody = {
  machines?: [ 
    {
      id?: long(name='Id'),
      policyName?: string(name='PolicyName'),
      uuid?: string(name='Uuid'),
    }
  ](name='Machines'),
  requestId?: string(name='RequestId'),
}

model DescribeUserBackupMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBackupMachinesResponseBody(name='body'),
}

async function describeUserBackupMachinesWithOptions(runtime: Util.RuntimeOptions): DescribeUserBackupMachinesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeUserBackupMachines', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserBackupMachines(): DescribeUserBackupMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBackupMachinesWithOptions(runtime);
}

model DescribeUserBaselineAuthorizationRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUserBaselineAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  userBaselineAuthorization?: {
    status?: int32(name='Status'),
  }(name='UserBaselineAuthorization'),
}

model DescribeUserBaselineAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBaselineAuthorizationResponseBody(name='body'),
}

async function describeUserBaselineAuthorizationWithOptions(request: DescribeUserBaselineAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserBaselineAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserBaselineAuthorization', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserBaselineAuthorization(request: DescribeUserBaselineAuthorizationRequest): DescribeUserBaselineAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBaselineAuthorizationWithOptions(request, runtime);
}

model DescribeUserLayoutAuthorizationRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUserLayoutAuthorizationResponseBody = {
  authorized?: boolean(name='Authorized'),
  requestId?: string(name='RequestId'),
}

model DescribeUserLayoutAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLayoutAuthorizationResponseBody(name='body'),
}

async function describeUserLayoutAuthorizationWithOptions(request: DescribeUserLayoutAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserLayoutAuthorizationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserLayoutAuthorization', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserLayoutAuthorization(request: DescribeUserLayoutAuthorizationRequest): DescribeUserLayoutAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLayoutAuthorizationWithOptions(request, runtime);
}

model DescribeUuidsByVulNamesRequest {
  dealed?: string(name='Dealed'),
  fieldName?: string(name='FieldName'),
  fieldValue?: string(name='FieldValue'),
  groupId?: long(name='GroupId'),
  lang?: string(name='Lang'),
  level?: string(name='Level'),
  necessity?: string(name='Necessity'),
  remark?: string(name='Remark'),
  searchTags?: string(name='SearchTags'),
  statusList?: string(name='StatusList'),
  tag?: string(name='Tag'),
  targetType?: string(name='TargetType'),
  type?: string(name='Type'),
  vpcInstanceIds?: string(name='VpcInstanceIds'),
  vulNames?: [ string ](name='VulNames'),
}

model DescribeUuidsByVulNamesResponseBody = {
  machineInfoStatistics?: [ 
    {
      machineInstanceId?: string(name='MachineInstanceId'),
      machineIp?: string(name='MachineIp'),
      machineName?: string(name='MachineName'),
      os?: string(name='Os'),
      regionId?: string(name='RegionId'),
      uuid?: string(name='Uuid'),
    }
  ](name='MachineInfoStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeUuidsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUuidsByVulNamesResponseBody(name='body'),
}

async function describeUuidsByVulNamesWithOptions(request: DescribeUuidsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeUuidsByVulNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUuidsByVulNames', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUuidsByVulNames(request: DescribeUuidsByVulNamesRequest): DescribeUuidsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUuidsByVulNamesWithOptions(request, runtime);
}

model DescribeVersionConfigRequest {
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeVersionConfigResponseBody = {
  allowPartialBuy?: int32(name='AllowPartialBuy'),
  appWhiteList?: int32(name='AppWhiteList'),
  appWhiteListAuthCount?: long(name='AppWhiteListAuthCount'),
  assetLevel?: int32(name='AssetLevel'),
  highestVersion?: int32(name='HighestVersion'),
  honeypotCapacity?: long(name='HoneypotCapacity'),
  imageScanCapacity?: long(name='ImageScanCapacity'),
  instanceId?: string(name='InstanceId'),
  isOverBalance?: boolean(name='IsOverBalance'),
  isTrialVersion?: int32(name='IsTrialVersion'),
  lastTrailEndTime?: long(name='LastTrailEndTime'),
  MVAuthCount?: int32(name='MVAuthCount'),
  MVUnusedAuthCount?: int32(name='MVUnusedAuthCount'),
  releaseTime?: long(name='ReleaseTime'),
  requestId?: string(name='RequestId'),
  sasLog?: int32(name='SasLog'),
  sasScreen?: int32(name='SasScreen'),
  slsCapacity?: long(name='SlsCapacity'),
  userDefinedAlarms?: int32(name='UserDefinedAlarms'),
  version?: int32(name='Version'),
  vmCores?: int32(name='VmCores'),
  webLock?: int32(name='WebLock'),
  webLockAuthCount?: long(name='WebLockAuthCount'),
}

model DescribeVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVersionConfigResponseBody(name='body'),
}

async function describeVersionConfigWithOptions(request: DescribeVersionConfigRequest, runtime: Util.RuntimeOptions): DescribeVersionConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVersionConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVersionConfig(request: DescribeVersionConfigRequest): DescribeVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVersionConfigWithOptions(request, runtime);
}

model DescribeVolDingdingMessageRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeVolDingdingMessageResponseBody = {
  dingdingUrl?: string(name='DingdingUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeVolDingdingMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVolDingdingMessageResponseBody(name='body'),
}

async function describeVolDingdingMessageWithOptions(request: DescribeVolDingdingMessageRequest, runtime: Util.RuntimeOptions): DescribeVolDingdingMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVolDingdingMessage', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVolDingdingMessage(request: DescribeVolDingdingMessageRequest): DescribeVolDingdingMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVolDingdingMessageWithOptions(request, runtime);
}

model DescribeVpcHoneyPotCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name'),
      type?: string(name='Type'),
      values?: string(name='Values'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId'),
}

model DescribeVpcHoneyPotCriteriaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcHoneyPotCriteriaResponseBody(name='body'),
}

async function describeVpcHoneyPotCriteriaWithOptions(runtime: Util.RuntimeOptions): DescribeVpcHoneyPotCriteriaResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeVpcHoneyPotCriteria', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcHoneyPotCriteria(): DescribeVpcHoneyPotCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotCriteriaWithOptions(runtime);
}

model DescribeVpcHoneyPotListRequest {
  currentPage?: int32(name='CurrentPage'),
  honeyPotExistence?: boolean(name='HoneyPotExistence'),
  pageSize?: int32(name='PageSize'),
  vpcId?: string(name='VpcId'),
  vpcName?: string(name='VpcName'),
  vpcRegionId?: string(name='VpcRegionId'),
}

model DescribeVpcHoneyPotListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  vpcHoneyPotDTOList?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      createTime?: long(name='CreateTime'),
      honeyPotEcsInstanceStatus?: string(name='HoneyPotEcsInstanceStatus'),
      honeyPotEniInstanceId?: string(name='HoneyPotEniInstanceId'),
      honeyPotExistence?: boolean(name='HoneyPotExistence'),
      honeyPotInstanceStatus?: string(name='HoneyPotInstanceStatus'),
      honeyPotVpcSwitchId?: string(name='HoneyPotVpcSwitchId'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
      vpcRegionId?: string(name='VpcRegionId'),
      vpcStatus?: string(name='VpcStatus'),
      vpcSwitchIdList?: [ 
        {
          vpcSwitchId?: string(name='VpcSwitchId'),
          vpcSwitchName?: string(name='VpcSwitchName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='VpcSwitchIdList'),
    }
  ](name='VpcHoneyPotDTOList'),
}

model DescribeVpcHoneyPotListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcHoneyPotListResponseBody(name='body'),
}

async function describeVpcHoneyPotListWithOptions(request: DescribeVpcHoneyPotListRequest, runtime: Util.RuntimeOptions): DescribeVpcHoneyPotListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcHoneyPotList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcHoneyPotList(request: DescribeVpcHoneyPotListRequest): DescribeVpcHoneyPotListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotListWithOptions(request, runtime);
}

model DescribeVpcListResponseBody = {
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
  vpcList?: [ 
    {
      ecsCount?: int32(name='EcsCount'),
      instanceDesc?: string(name='InstanceDesc'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      regionId?: string(name='RegionId'),
    }
  ](name='VpcList'),
}

model DescribeVpcListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcListResponseBody(name='body'),
}

async function describeVpcListWithOptions(runtime: Util.RuntimeOptions): DescribeVpcListResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeVpcList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcList(): DescribeVpcListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcListWithOptions(runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      classify?: string(name='Classify'),
      classifys?: [ 
        {
          classify?: string(name='Classify'),
          demoVideoUrl?: string(name='DemoVideoUrl'),
          description?: string(name='Description'),
        }
      ](name='Classifys'),
      cnvdId?: string(name='CnvdId'),
      complexity?: string(name='Complexity'),
      content?: string(name='Content'),
      cveId?: string(name='CveId'),
      cvssScore?: string(name='CvssScore'),
      cvssVector?: string(name='CvssVector'),
      poc?: string(name='Poc'),
      pocCreateTime?: long(name='PocCreateTime'),
      pocDisclosureTime?: long(name='PocDisclosureTime'),
      product?: string(name='Product'),
      reference?: string(name='Reference'),
      releaseTime?: long(name='ReleaseTime'),
      solution?: string(name='Solution'),
      summary?: string(name='Summary'),
      title?: string(name='Title'),
      vendor?: string(name='Vendor'),
      vulLevel?: string(name='VulLevel'),
    }
  ](name='Cves'),
  requestId?: string(name='RequestId'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulDetails', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulExportInfoRequest {
  exportId?: long(name='ExportId'),
}

model DescribeVulExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount'),
  exportStatus?: string(name='ExportStatus'),
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  link?: string(name='Link'),
  message?: string(name='Message'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVulExportInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulExportInfoResponseBody(name='body'),
}

async function describeVulExportInfoWithOptions(request: DescribeVulExportInfoRequest, runtime: Util.RuntimeOptions): DescribeVulExportInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulExportInfo', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulExportInfo(request: DescribeVulExportInfoRequest): DescribeVulExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulExportInfoWithOptions(request, runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName'),
  attachTypes?: string(name='AttachTypes'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  groupId?: string(name='GroupId'),
  lang?: string(name='Lang'),
  necessity?: string(name='Necessity'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  type?: string(name='Type'),
  uuids?: string(name='Uuids'),
  vpcInstanceIds?: string(name='VpcInstanceIds'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      extendContentJson?: {
        absolutePath?: string(name='AbsolutePath'),
        aliasName?: string(name='AliasName'),
        ip?: string(name='Ip'),
        lastTs?: long(name='LastTs'),
        necessity?: {
          assetsFactor?: string(name='Assets_factor'),
          cvssFactor?: string(name='Cvss_factor'),
          enviromentFactor?: string(name='Enviroment_factor'),
          isCalc?: string(name='Is_calc'),
          status?: string(name='Status'),
          timeFactor?: string(name='Time_factor'),
          totalScore?: string(name='Total_score'),
        }(name='Necessity'),
        os?: string(name='Os'),
        osRelease?: string(name='OsRelease'),
        primaryId?: long(name='PrimaryId'),
        rpmEntityList?: [ 
          {
            containerName?: string(name='ContainerName'),
            fullVersion?: string(name='FullVersion'),
            imageName?: string(name='ImageName'),
            matchDetail?: string(name='MatchDetail'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            updateCmd?: string(name='UpdateCmd'),
            version?: string(name='Version'),
          }
        ](name='RpmEntityList'),
        status?: string(name='Status'),
        tag?: string(name='Tag'),
        cveList?: [ string ](name='cveList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs'),
      groupId?: int32(name='GroupId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lastTs?: long(name='LastTs'),
      modifyTs?: long(name='ModifyTs'),
      name?: string(name='Name'),
      necessity?: string(name='Necessity'),
      online?: boolean(name='Online'),
      osVersion?: string(name='OsVersion'),
      primaryId?: long(name='PrimaryId'),
      related?: string(name='Related'),
      repairTs?: long(name='RepairTs'),
      resultCode?: string(name='ResultCode'),
      resultMessage?: string(name='ResultMessage'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
    }
  ](name='VulRecords'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulWhitelistRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeVulWhitelistResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulWhitelists?: [ 
    {
      aliasName?: string(name='AliasName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
      targetInfo?: string(name='TargetInfo'),
      type?: string(name='Type'),
    }
  ](name='VulWhitelists'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelistWithOptions(request: DescribeVulWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVulWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulWhitelist', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulWhitelistWithOptions(request, runtime);
}

model DescribeWarningMachinesRequest {
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  machineName?: string(name='MachineName'),
  pageSize?: int32(name='PageSize'),
  riskId?: long(name='RiskId'),
  sourceIp?: string(name='SourceIp'),
  strategyId?: long(name='StrategyId'),
  uuids?: string(name='Uuids'),
}

model DescribeWarningMachinesResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  warningMachines?: [ 
    {
      highWarningCount?: int32(name='HighWarningCount'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lowWarningCount?: int32(name='LowWarningCount'),
      mediumWarningCount?: int32(name='MediumWarningCount'),
      passCount?: int32(name='PassCount'),
      portOpen?: boolean(name='PortOpen'),
      regionId?: string(name='RegionId'),
      status?: int32(name='Status'),
      uuid?: string(name='Uuid'),
    }
  ](name='WarningMachines'),
}

model DescribeWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWarningMachinesResponseBody(name='body'),
}

async function describeWarningMachinesWithOptions(request: DescribeWarningMachinesRequest, runtime: Util.RuntimeOptions): DescribeWarningMachinesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWarningMachines', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWarningMachines(request: DescribeWarningMachinesRequest): DescribeWarningMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWarningMachinesWithOptions(request, runtime);
}

model DescribeWebLockBindListRequest {
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
}

model DescribeWebLockBindListResponseBody = {
  bindList?: [ 
    {
      auditCount?: string(name='AuditCount'),
      blockCount?: string(name='BlockCount'),
      dirCount?: string(name='DirCount'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      os?: string(name='Os'),
      percent?: int32(name='Percent'),
      serviceCode?: string(name='ServiceCode'),
      serviceDetail?: string(name='ServiceDetail'),
      serviceStatus?: string(name='ServiceStatus'),
      status?: string(name='Status'),
      uuid?: string(name='Uuid'),
    }
  ](name='BindList'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockBindListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebLockBindListResponseBody(name='body'),
}

async function describeWebLockBindListWithOptions(request: DescribeWebLockBindListRequest, runtime: Util.RuntimeOptions): DescribeWebLockBindListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWebLockBindList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWebLockBindList(request: DescribeWebLockBindListRequest): DescribeWebLockBindListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockBindListWithOptions(request, runtime);
}

model DescribeWebLockConfigListRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model DescribeWebLockConfigListResponseBody = {
  configList?: [ 
    {
      defenceMode?: string(name='DefenceMode'),
      dir?: string(name='Dir'),
      exclusiveDir?: string(name='ExclusiveDir'),
      exclusiveFile?: string(name='ExclusiveFile'),
      exclusiveFileType?: string(name='ExclusiveFileType'),
      id?: string(name='Id'),
      inclusiveFile?: string(name='InclusiveFile'),
      inclusiveFileType?: string(name='InclusiveFileType'),
      localBackupDir?: string(name='LocalBackupDir'),
      mode?: string(name='Mode'),
      uuid?: string(name='Uuid'),
    }
  ](name='ConfigList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebLockConfigListResponseBody(name='body'),
}

async function describeWebLockConfigListWithOptions(request: DescribeWebLockConfigListRequest, runtime: Util.RuntimeOptions): DescribeWebLockConfigListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWebLockConfigList', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWebLockConfigList(request: DescribeWebLockConfigListRequest): DescribeWebLockConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockConfigListWithOptions(request, runtime);
}

model ExecStrategyRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  strategyId?: int32(name='StrategyId'),
}

model ExecStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExecStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ExecStrategyResponseBody(name='body'),
}

async function execStrategyWithOptions(request: ExecStrategyRequest, runtime: Util.RuntimeOptions): ExecStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecStrategy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function execStrategy(request: ExecStrategyRequest): ExecStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return execStrategyWithOptions(request, runtime);
}

model ExportRecordRequest {
  exportType?: string(name='ExportType'),
  lang?: string(name='Lang'),
  params?: string(name='Params'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName'),
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model ExportRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ExportRecordResponseBody(name='body'),
}

async function exportRecordWithOptions(request: ExportRecordRequest, runtime: Util.RuntimeOptions): ExportRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportRecord', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportRecordWithOptions(request, runtime);
}

model FixCheckWarningsRequest {
  checkParams?: string(name='CheckParams'),
  lang?: string(name='Lang'),
  riskId?: long(name='RiskId'),
  sourceIp?: string(name='SourceIp'),
  uuids?: string(name='Uuids'),
}

model FixCheckWarningsResponseBody = {
  batchId?: long(name='BatchId'),
  requestId?: string(name='RequestId'),
}

model FixCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: FixCheckWarningsResponseBody(name='body'),
}

async function fixCheckWarningsWithOptions(request: FixCheckWarningsRequest, runtime: Util.RuntimeOptions): FixCheckWarningsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FixCheckWarnings', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function fixCheckWarnings(request: FixCheckWarningsRequest): FixCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return fixCheckWarningsWithOptions(request, runtime);
}

model GetBackupStorageCountResponseBody = {
  backupStorageCount?: {
    buyStorageByte?: long(name='BuyStorageByte'),
    ecsUsageStorageByte?: long(name='EcsUsageStorageByte'),
    overflow?: int32(name='Overflow'),
    uniUsageStorageByte?: long(name='UniUsageStorageByte'),
    usageStorageByte?: long(name='UsageStorageByte'),
  }(name='BackupStorageCount'),
  requestId?: string(name='RequestId'),
}

model GetBackupStorageCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetBackupStorageCountResponseBody(name='body'),
}

async function getBackupStorageCountWithOptions(runtime: Util.RuntimeOptions): GetBackupStorageCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetBackupStorageCount', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBackupStorageCount(): GetBackupStorageCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBackupStorageCountWithOptions(runtime);
}

model GetIOCsRequest {
  date?: string(name='Date'),
  type?: string(name='Type'),
}

model GetIOCsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model GetIOCsResponse = {
  headers: map[string]string(name='headers'),
  body: GetIOCsResponseBody(name='body'),
}

async function getIOCsWithOptions(request: GetIOCsRequest, runtime: Util.RuntimeOptions): GetIOCsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetIOCs', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getIOCs(request: GetIOCsRequest): GetIOCsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIOCsWithOptions(request, runtime);
}

model GetIncIOCsRequest {
  date?: string(name='Date'),
  type?: string(name='Type'),
}

model GetIncIOCsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model GetIncIOCsResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncIOCsResponseBody(name='body'),
}

async function getIncIOCsWithOptions(request: GetIncIOCsRequest, runtime: Util.RuntimeOptions): GetIncIOCsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetIncIOCs', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getIncIOCs(request: GetIncIOCsRequest): GetIncIOCsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIncIOCsWithOptions(request, runtime);
}

model GetLocalInstallScriptRequest {
  internalNetwork?: boolean(name='InternalNetwork'),
  platformType?: string(name='PlatformType'),
  uuid?: string(name='Uuid'),
}

model GetLocalInstallScriptResponseBody = {
  requestId?: string(name='RequestId'),
  script?: string(name='Script'),
}

model GetLocalInstallScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetLocalInstallScriptResponseBody(name='body'),
}

async function getLocalInstallScriptWithOptions(request: GetLocalInstallScriptRequest, runtime: Util.RuntimeOptions): GetLocalInstallScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLocalInstallScript', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLocalInstallScript(request: GetLocalInstallScriptRequest): GetLocalInstallScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLocalInstallScriptWithOptions(request, runtime);
}

model GetLocalUninstallScriptRequest {
  internalNetwork?: boolean(name='InternalNetwork'),
  platformType?: string(name='PlatformType'),
  uuid?: string(name='Uuid'),
}

model GetLocalUninstallScriptResponseBody = {
  requestId?: string(name='RequestId'),
  script?: string(name='Script'),
}

model GetLocalUninstallScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetLocalUninstallScriptResponseBody(name='body'),
}

async function getLocalUninstallScriptWithOptions(request: GetLocalUninstallScriptRequest, runtime: Util.RuntimeOptions): GetLocalUninstallScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLocalUninstallScript', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLocalUninstallScript(request: GetLocalUninstallScriptRequest): GetLocalUninstallScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLocalUninstallScriptWithOptions(request, runtime);
}

model GetSuspiciousStatisticsRequest {
  groupIdList?: string(name='GroupIdList'),
  sourceIp?: string(name='SourceIp'),
}

model GetSuspiciousStatisticsResponseBody = {
  remindCount?: int32(name='RemindCount'),
  requestId?: string(name='RequestId'),
  seriousCount?: int32(name='SeriousCount'),
  suspiciousCount?: int32(name='SuspiciousCount'),
  totalCount?: int32(name='TotalCount'),
}

model GetSuspiciousStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSuspiciousStatisticsResponseBody(name='body'),
}

async function getSuspiciousStatisticsWithOptions(request: GetSuspiciousStatisticsRequest, runtime: Util.RuntimeOptions): GetSuspiciousStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSuspiciousStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSuspiciousStatistics(request: GetSuspiciousStatisticsRequest): GetSuspiciousStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspiciousStatisticsWithOptions(request, runtime);
}

model GetVulStatisticsRequest {
  groupIdList?: string(name='GroupIdList'),
  sourceIp?: string(name='SourceIp'),
  typeList?: string(name='TypeList'),
}

model GetVulStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  vulAsapSum?: int32(name='VulAsapSum'),
  vulLaterSum?: int32(name='VulLaterSum'),
  vulNntfSum?: int32(name='VulNntfSum'),
}

model GetVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetVulStatisticsResponseBody(name='body'),
}

async function getVulStatisticsWithOptions(request: GetVulStatisticsRequest, runtime: Util.RuntimeOptions): GetVulStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVulStatistics', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVulStatistics(request: GetVulStatisticsRequest): GetVulStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulStatisticsWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  markBatch?: string(name='MarkBatch'),
  markMissParam?: string(name='MarkMissParam'),
  operationCode?: string(name='OperationCode'),
  operationParams?: string(name='OperationParams'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventIds?: [ string ](name='SecurityEventIds'),
  sourceIp?: string(name='SourceIp'),
}

model HandleSecurityEventsResponseBody = {
  handleSecurityEventsResponse?: {
    taskId?: long(name='TaskId'),
  }(name='HandleSecurityEventsResponse'),
  requestId?: string(name='RequestId'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HandleSecurityEvents', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model HandleSimilarSecurityEventsRequest {
  markMissParam?: string(name='MarkMissParam'),
  operationCode?: string(name='OperationCode'),
  operationParams?: string(name='OperationParams'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  taskId?: long(name='TaskId'),
}

model HandleSimilarSecurityEventsResponseBody = {
  requestId?: string(name='RequestId'),
}

model HandleSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: HandleSimilarSecurityEventsResponseBody(name='body'),
}

async function handleSimilarSecurityEventsWithOptions(request: HandleSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HandleSimilarSecurityEvents', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function handleSimilarSecurityEvents(request: HandleSimilarSecurityEventsRequest): HandleSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSimilarSecurityEventsWithOptions(request, runtime);
}

model IgnoreHcCheckWarningsRequest {
  checkIds?: string(name='CheckIds'),
  checkWarningIds?: string(name='CheckWarningIds'),
  reason?: string(name='Reason'),
  riskId?: string(name='RiskId'),
  sourceIp?: string(name='SourceIp'),
  type?: long(name='Type'),
}

model IgnoreHcCheckWarningsResponseBody = {
  requestId?: string(name='RequestId'),
}

model IgnoreHcCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreHcCheckWarningsResponseBody(name='body'),
}

async function ignoreHcCheckWarningsWithOptions(request: IgnoreHcCheckWarningsRequest, runtime: Util.RuntimeOptions): IgnoreHcCheckWarningsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IgnoreHcCheckWarnings', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function ignoreHcCheckWarnings(request: IgnoreHcCheckWarningsRequest): IgnoreHcCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreHcCheckWarningsWithOptions(request, runtime);
}

model InstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion'),
  uuid?: string(name='Uuid'),
  uuidList?: [ string ](name='UuidList'),
}

model InstallBackupClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  body: InstallBackupClientResponseBody(name='body'),
}

async function installBackupClientWithOptions(request: InstallBackupClientRequest, runtime: Util.RuntimeOptions): InstallBackupClientResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InstallBackupClient', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function installBackupClient(request: InstallBackupClientRequest): InstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return installBackupClientWithOptions(request, runtime);
}

model InstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model InstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  body: InstallUniBackupAgentResponseBody(name='body'),
}

async function installUniBackupAgentWithOptions(request: InstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): InstallUniBackupAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InstallUniBackupAgent', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function installUniBackupAgent(request: InstallUniBackupAgentRequest): InstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return installUniBackupAgentWithOptions(request, runtime);
}

model ModifyAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule'),
  failCount?: int32(name='FailCount'),
  forbiddenTime?: int32(name='ForbiddenTime'),
  id?: long(name='Id'),
  name?: string(name='Name'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  span?: int32(name='Span'),
  uuidList?: [ string ](name='UuidList'),
}

model ModifyAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyAntiBruteForceRuleWithOptions(request: ModifyAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAntiBruteForceRule', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAntiBruteForceRule(request: ModifyAntiBruteForceRuleRequest): ModifyAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyAssetGroupRequest {
  groupId?: long(name='GroupId'),
  sourceIp?: string(name='SourceIp'),
  uuids?: string(name='Uuids'),
}

model ModifyAssetGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAssetGroupResponseBody(name='body'),
}

async function modifyAssetGroupWithOptions(request: ModifyAssetGroupRequest, runtime: Util.RuntimeOptions): ModifyAssetGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAssetGroup', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAssetGroup(request: ModifyAssetGroupRequest): ModifyAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAssetGroupWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  id?: long(name='Id'),
  name?: string(name='Name'),
  policy?: map[string]any(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model ModifyBackupPolicyShrinkRequest {
  id?: long(name='Id'),
  name?: string(name='Name'),
  policyShrink?: string(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(tmpReq: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyBackupPolicyStatusRequest {
  id?: long(name='Id'),
  policyVersion?: string(name='PolicyVersion'),
  status?: string(name='Status'),
}

model ModifyBackupPolicyStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyStatusResponseBody(name='body'),
}

async function modifyBackupPolicyStatusWithOptions(request: ModifyBackupPolicyStatusRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicyStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicyStatus(request: ModifyBackupPolicyStatusRequest): ModifyBackupPolicyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyStatusWithOptions(request, runtime);
}

model ModifyCreateVulWhitelistRequest {
  reason?: string(name='Reason'),
  targetInfo?: string(name='TargetInfo'),
  whitelist?: string(name='Whitelist'),
}

model ModifyCreateVulWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCreateVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCreateVulWhitelistResponseBody(name='body'),
}

async function modifyCreateVulWhitelistWithOptions(request: ModifyCreateVulWhitelistRequest, runtime: Util.RuntimeOptions): ModifyCreateVulWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCreateVulWhitelist', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCreateVulWhitelist(request: ModifyCreateVulWhitelistRequest): ModifyCreateVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCreateVulWhitelistWithOptions(request, runtime);
}

model ModifyEmgVulSubmitRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  userAgreement?: string(name='UserAgreement'),
}

model ModifyEmgVulSubmitResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEmgVulSubmitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEmgVulSubmitResponseBody(name='body'),
}

async function modifyEmgVulSubmitWithOptions(request: ModifyEmgVulSubmitRequest, runtime: Util.RuntimeOptions): ModifyEmgVulSubmitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEmgVulSubmit', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEmgVulSubmit(request: ModifyEmgVulSubmitRequest): ModifyEmgVulSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEmgVulSubmitWithOptions(request, runtime);
}

model ModifyGroupPropertyRequest {
  data?: string(name='Data'),
}

model ModifyGroupPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGroupPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGroupPropertyResponseBody(name='body'),
}

async function modifyGroupPropertyWithOptions(request: ModifyGroupPropertyRequest, runtime: Util.RuntimeOptions): ModifyGroupPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyGroupProperty', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyGroupProperty(request: ModifyGroupPropertyRequest): ModifyGroupPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGroupPropertyWithOptions(request, runtime);
}

model ModifyInstanceAntiBruteForceRuleRequest {
  newRuleId?: long(name='NewRuleId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyInstanceAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyInstanceAntiBruteForceRuleWithOptions(request: ModifyInstanceAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyInstanceAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAntiBruteForceRule', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAntiBruteForceRule(request: ModifyInstanceAntiBruteForceRuleRequest): ModifyInstanceAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyLoginBaseConfigRequest {
  config?: string(name='Config'),
  target?: string(name='Target'),
  type?: string(name='Type'),
}

model ModifyLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLoginBaseConfigResponseBody(name='body'),
}

async function modifyLoginBaseConfigWithOptions(request: ModifyLoginBaseConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginBaseConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLoginBaseConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLoginBaseConfig(request: ModifyLoginBaseConfigRequest): ModifyLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginBaseConfigWithOptions(request, runtime);
}

model ModifyLoginSwitchConfigRequest {
  item?: string(name='Item'),
  status?: int32(name='Status'),
}

model ModifyLoginSwitchConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLoginSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLoginSwitchConfigResponseBody(name='body'),
}

async function modifyLoginSwitchConfigWithOptions(request: ModifyLoginSwitchConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginSwitchConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLoginSwitchConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLoginSwitchConfig(request: ModifyLoginSwitchConfigRequest): ModifyLoginSwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginSwitchConfigWithOptions(request, runtime);
}

model ModifyNoticeConfigRequest {
  project?: string(name='Project'),
  route?: int32(name='Route'),
  sourceIp?: string(name='SourceIp'),
  timeLimit?: int32(name='TimeLimit'),
}

model ModifyNoticeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNoticeConfigResponseBody(name='body'),
}

async function modifyNoticeConfigWithOptions(request: ModifyNoticeConfigRequest, runtime: Util.RuntimeOptions): ModifyNoticeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNoticeConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNoticeConfig(request: ModifyNoticeConfigRequest): ModifyNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNoticeConfigWithOptions(request, runtime);
}

model ModifyOpenLogShipperRequest {
  from?: string(name='From'),
}

model ModifyOpenLogShipperResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOpenLogShipperResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOpenLogShipperResponseBody(name='body'),
}

async function modifyOpenLogShipperWithOptions(request: ModifyOpenLogShipperRequest, runtime: Util.RuntimeOptions): ModifyOpenLogShipperResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOpenLogShipper', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOpenLogShipper(request: ModifyOpenLogShipperRequest): ModifyOpenLogShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOpenLogShipperWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  info?: string(name='Info'),
  operateType?: string(name='OperateType'),
  reason?: string(name='Reason'),
  type?: string(name='Type'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOperateVul', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPushAllTaskRequest {
  sourceIp?: string(name='SourceIp'),
  tasks?: string(name='Tasks'),
  uuids?: string(name='Uuids'),
}

model ModifyPushAllTaskResponseBody = {
  pushTaskRsp?: {
    pushTaskResultList?: [ 
      {
        groupId?: long(name='GroupId'),
        instanceId?: string(name='InstanceId'),
        instanceName?: string(name='InstanceName'),
        ip?: string(name='Ip'),
        message?: string(name='Message'),
        online?: boolean(name='Online'),
        osVersion?: string(name='OsVersion'),
        region?: string(name='Region'),
        success?: boolean(name='Success'),
        uuid?: string(name='Uuid'),
      }
    ](name='PushTaskResultList'),
  }(name='PushTaskRsp'),
  requestId?: string(name='RequestId'),
}

model ModifyPushAllTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPushAllTaskResponseBody(name='body'),
}

async function modifyPushAllTaskWithOptions(request: ModifyPushAllTaskRequest, runtime: Util.RuntimeOptions): ModifyPushAllTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPushAllTask', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPushAllTask(request: ModifyPushAllTaskRequest): ModifyPushAllTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPushAllTaskWithOptions(request, runtime);
}

model ModifyRiskCheckStatusRequest {
  itemId?: long(name='ItemId'),
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model ModifyRiskCheckStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRiskCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRiskCheckStatusResponseBody(name='body'),
}

async function modifyRiskCheckStatusWithOptions(request: ModifyRiskCheckStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskCheckStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRiskCheckStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRiskCheckStatus(request: ModifyRiskCheckStatusRequest): ModifyRiskCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskCheckStatusWithOptions(request, runtime);
}

model ModifyRiskSingleResultStatusRequest {
  ids?: [ string ](name='Ids'),
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model ModifyRiskSingleResultStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRiskSingleResultStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRiskSingleResultStatusResponseBody(name='body'),
}

async function modifyRiskSingleResultStatusWithOptions(request: ModifyRiskSingleResultStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskSingleResultStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRiskSingleResultStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRiskSingleResultStatus(request: ModifyRiskSingleResultStatusRequest): ModifyRiskSingleResultStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskSingleResultStatusWithOptions(request, runtime);
}

model ModifySecurityCheckScheduleConfigRequest {
  daysOfWeek?: string(name='DaysOfWeek'),
  endTime?: int32(name='EndTime'),
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: int32(name='StartTime'),
}

model ModifySecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityCheckScheduleConfigResponseBody(name='body'),
}

async function modifySecurityCheckScheduleConfigWithOptions(request: ModifySecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): ModifySecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityCheckScheduleConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityCheckScheduleConfig(request: ModifySecurityCheckScheduleConfigRequest): ModifySecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityCheckScheduleConfigWithOptions(request, runtime);
}

model ModifyStartVulScanRequest {
  types?: string(name='Types'),
  uuids?: string(name='Uuids'),
}

model ModifyStartVulScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStartVulScanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStartVulScanResponseBody(name='body'),
}

async function modifyStartVulScanWithOptions(request: ModifyStartVulScanRequest, runtime: Util.RuntimeOptions): ModifyStartVulScanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStartVulScan', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStartVulScan(request: ModifyStartVulScanRequest): ModifyStartVulScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStartVulScanWithOptions(request, runtime);
}

model ModifyStrategyRequest {
  customType?: string(name='CustomType'),
  cycleDays?: string(name='CycleDays'),
  cycleStartTime?: string(name='CycleStartTime'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  riskCustomParams?: string(name='RiskCustomParams'),
  riskSubTypeName?: string(name='RiskSubTypeName'),
  sourceIp?: string(name='SourceIp'),
}

model ModifyStrategyResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  result?: {
    strategyId?: int32(name='StrategyId'),
  }(name='Result'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ModifyStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStrategyResponseBody(name='body'),
}

async function modifyStrategyWithOptions(request: ModifyStrategyRequest, runtime: Util.RuntimeOptions): ModifyStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStrategy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStrategy(request: ModifyStrategyRequest): ModifyStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyWithOptions(request, runtime);
}

model ModifyStrategyTargetRequest {
  config?: string(name='Config'),
  sourceIp?: string(name='SourceIp'),
  target?: string(name='Target'),
  type?: string(name='Type'),
}

model ModifyStrategyTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStrategyTargetResponseBody(name='body'),
}

async function modifyStrategyTargetWithOptions(request: ModifyStrategyTargetRequest, runtime: Util.RuntimeOptions): ModifyStrategyTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStrategyTarget', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStrategyTarget(request: ModifyStrategyTargetRequest): ModifyStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyTargetWithOptions(request, runtime);
}

model ModifyTagWithUuidRequest {
  machineTypes?: string(name='MachineTypes'),
  tagId?: string(name='TagId'),
  tagList?: string(name='TagList'),
  uuidList?: string(name='UuidList'),
}

model ModifyTagWithUuidResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTagWithUuidResponseBody(name='body'),
}

async function modifyTagWithUuidWithOptions(request: ModifyTagWithUuidRequest, runtime: Util.RuntimeOptions): ModifyTagWithUuidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTagWithUuid', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTagWithUuid(request: ModifyTagWithUuidRequest): ModifyTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTagWithUuidWithOptions(request, runtime);
}

model ModifyUniBackupPolicyRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  fullPlan?: map[string]any(name='FullPlan'),
  incPlan?: map[string]any(name='IncPlan'),
  policyId?: long(name='PolicyId'),
  policyName?: string(name='PolicyName'),
  policyStatus?: string(name='PolicyStatus'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retention?: int32(name='Retention'),
  sourceIp?: string(name='SourceIp'),
  speedLimiter?: long(name='SpeedLimiter'),
}

model ModifyUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  fullPlanShrink?: string(name='FullPlan'),
  incPlanShrink?: string(name='IncPlan'),
  policyId?: long(name='PolicyId'),
  policyName?: string(name='PolicyName'),
  policyStatus?: string(name='PolicyStatus'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retention?: int32(name='Retention'),
  sourceIp?: string(name='SourceIp'),
  speedLimiter?: long(name='SpeedLimiter'),
}

model ModifyUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUniBackupPolicyResponseBody(name='body'),
}

async function modifyUniBackupPolicyWithOptions(tmpReq: ModifyUniBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUniBackupPolicy', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUniBackupPolicy(request: ModifyUniBackupPolicyRequest): ModifyUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUniBackupPolicyWithOptions(request, runtime);
}

model ModifyVpcHoneyPotRequest {
  honeyPotAction?: string(name='HoneyPotAction'),
  vpcId?: string(name='VpcId'),
}

model ModifyVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcHoneyPotResponseBody(name='body'),
}

async function modifyVpcHoneyPotWithOptions(request: ModifyVpcHoneyPotRequest, runtime: Util.RuntimeOptions): ModifyVpcHoneyPotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcHoneyPot', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcHoneyPot(request: ModifyVpcHoneyPotRequest): ModifyVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcHoneyPotWithOptions(request, runtime);
}

model ModifyVulTargetConfigRequest {
  config?: string(name='Config'),
  sourceIp?: string(name='SourceIp'),
  type?: string(name='Type'),
  uuid?: string(name='Uuid'),
}

model ModifyVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVulTargetConfigResponseBody(name='body'),
}

async function modifyVulTargetConfigWithOptions(request: ModifyVulTargetConfigRequest, runtime: Util.RuntimeOptions): ModifyVulTargetConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVulTargetConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVulTargetConfig(request: ModifyVulTargetConfigRequest): ModifyVulTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulTargetConfigWithOptions(request, runtime);
}

model ModifyWebLockCreateConfigRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  inclusiveFile?: string(name='InclusiveFile'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  lang?: string(name='Lang'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockCreateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockCreateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockCreateConfigResponseBody(name='body'),
}

async function modifyWebLockCreateConfigWithOptions(request: ModifyWebLockCreateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockCreateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockCreateConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockCreateConfig(request: ModifyWebLockCreateConfigRequest): ModifyWebLockCreateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockCreateConfigWithOptions(request, runtime);
}

model ModifyWebLockDeleteConfigRequest {
  id?: int32(name='Id'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockDeleteConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockDeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockDeleteConfigResponseBody(name='body'),
}

async function modifyWebLockDeleteConfigWithOptions(request: ModifyWebLockDeleteConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockDeleteConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockDeleteConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockDeleteConfig(request: ModifyWebLockDeleteConfigRequest): ModifyWebLockDeleteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockDeleteConfigWithOptions(request, runtime);
}

model ModifyWebLockStartRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockStartResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockStartResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockStartResponseBody(name='body'),
}

async function modifyWebLockStartWithOptions(request: ModifyWebLockStartRequest, runtime: Util.RuntimeOptions): ModifyWebLockStartResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockStart', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockStart(request: ModifyWebLockStartRequest): ModifyWebLockStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStartWithOptions(request, runtime);
}

model ModifyWebLockStatusRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockStatusResponseBody(name='body'),
}

async function modifyWebLockStatusWithOptions(request: ModifyWebLockStatusRequest, runtime: Util.RuntimeOptions): ModifyWebLockStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockStatus', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockStatus(request: ModifyWebLockStatusRequest): ModifyWebLockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStatusWithOptions(request, runtime);
}

model ModifyWebLockUnbindRequest {
  uuid?: string(name='Uuid'),
}

model ModifyWebLockUnbindResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockUnbindResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockUnbindResponseBody(name='body'),
}

async function modifyWebLockUnbindWithOptions(request: ModifyWebLockUnbindRequest, runtime: Util.RuntimeOptions): ModifyWebLockUnbindResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockUnbind', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockUnbind(request: ModifyWebLockUnbindRequest): ModifyWebLockUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUnbindWithOptions(request, runtime);
}

model ModifyWebLockUpdateConfigRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  id?: int32(name='Id'),
  inclusiveFile?: string(name='InclusiveFile'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  lang?: string(name='Lang'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockUpdateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockUpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebLockUpdateConfigResponseBody(name='body'),
}

async function modifyWebLockUpdateConfigWithOptions(request: ModifyWebLockUpdateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockUpdateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWebLockUpdateConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWebLockUpdateConfig(request: ModifyWebLockUpdateConfigRequest): ModifyWebLockUpdateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUpdateConfigWithOptions(request, runtime);
}

model OperateAgentClientInstallRequest {
  instanceIds?: string(name='InstanceIds'),
  uuids?: string(name='Uuids'),
}

model OperateAgentClientInstallResponseBody = {
  aegisCelintInstallResposeList?: [ 
    {
      instanceId?: string(name='InstanceId'),
      recordId?: long(name='RecordId'),
      uuid?: string(name='Uuid'),
    }
  ](name='AegisCelintInstallResposeList'),
  requestId?: string(name='RequestId'),
}

model OperateAgentClientInstallResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAgentClientInstallResponseBody(name='body'),
}

async function operateAgentClientInstallWithOptions(request: OperateAgentClientInstallRequest, runtime: Util.RuntimeOptions): OperateAgentClientInstallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateAgentClientInstall', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateAgentClientInstall(request: OperateAgentClientInstallRequest): OperateAgentClientInstallResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAgentClientInstallWithOptions(request, runtime);
}

model OperateSuspiciousTargetConfigRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  targetOperations?: string(name='TargetOperations'),
  targetType?: string(name='TargetType'),
  type?: string(name='Type'),
}

model OperateSuspiciousTargetConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateSuspiciousTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: OperateSuspiciousTargetConfigResponseBody(name='body'),
}

async function operateSuspiciousTargetConfigWithOptions(request: OperateSuspiciousTargetConfigRequest, runtime: Util.RuntimeOptions): OperateSuspiciousTargetConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateSuspiciousTargetConfig', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateSuspiciousTargetConfig(request: OperateSuspiciousTargetConfigRequest): OperateSuspiciousTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateSuspiciousTargetConfigWithOptions(request, runtime);
}

model OperateVulsRequest {
  operateType?: string(name='OperateType'),
  type?: string(name='Type'),
  uuids?: [ string ](name='Uuids'),
  vulNames?: [ string ](name='VulNames'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateVuls', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model OperationSuspEventsRequest {
  from?: string(name='From'),
  operation?: string(name='Operation'),
  sourceIp?: string(name='SourceIp'),
  subOperation?: string(name='SubOperation'),
  suspiciousEventIds?: string(name='SuspiciousEventIds'),
  warnType?: string(name='WarnType'),
}

model OperationSuspEventsResponseBody = {
  accessCode?: string(name='AccessCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperationSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  body: OperationSuspEventsResponseBody(name='body'),
}

async function operationSuspEventsWithOptions(request: OperationSuspEventsRequest, runtime: Util.RuntimeOptions): OperationSuspEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperationSuspEvents', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operationSuspEvents(request: OperationSuspEventsRequest): OperationSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operationSuspEventsWithOptions(request, runtime);
}

model PauseClientRequest {
  uuids?: string(name='Uuids'),
  value?: string(name='Value'),
}

model PauseClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model PauseClientResponse = {
  headers: map[string]string(name='headers'),
  body: PauseClientResponseBody(name='body'),
}

async function pauseClientWithOptions(request: PauseClientRequest, runtime: Util.RuntimeOptions): PauseClientResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PauseClient', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pauseClient(request: PauseClientRequest): PauseClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseClientWithOptions(request, runtime);
}

model QueryDiscoverDatabaseRequest {
  createMark?: string(name='CreateMark'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model QueryDiscoverDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
  taskProgress?: int32(name='TaskProgress'),
}

model QueryDiscoverDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDiscoverDatabaseResponseBody(name='body'),
}

async function queryDiscoverDatabaseWithOptions(request: QueryDiscoverDatabaseRequest, runtime: Util.RuntimeOptions): QueryDiscoverDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDiscoverDatabase', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDiscoverDatabase(request: QueryDiscoverDatabaseRequest): QueryDiscoverDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDiscoverDatabaseWithOptions(request, runtime);
}

model QueryPreCheckDatabaseRequest {
  instanceUuid?: string(name='InstanceUuid'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
  uniRegionId?: string(name='UniRegionId'),
}

model QueryPreCheckDatabaseResponseBody = {
  completedTime?: long(name='CompletedTime'),
  createdTime?: long(name='CreatedTime'),
  description?: string(name='Description'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  updatedTime?: long(name='UpdatedTime'),
}

model QueryPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPreCheckDatabaseResponseBody(name='body'),
}

async function queryPreCheckDatabaseWithOptions(request: QueryPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): QueryPreCheckDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPreCheckDatabase', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPreCheckDatabase(request: QueryPreCheckDatabaseRequest): QueryPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPreCheckDatabaseWithOptions(request, runtime);
}

model RefreshAssetsRequest {
  assetType?: string(name='AssetType'),
}

model RefreshAssetsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefreshAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshAssetsResponseBody(name='body'),
}

async function refreshAssetsWithOptions(request: RefreshAssetsRequest, runtime: Util.RuntimeOptions): RefreshAssetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshAssets', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshAssets(request: RefreshAssetsRequest): RefreshAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshAssetsWithOptions(request, runtime);
}

model RefreshContainerAssetsRequest {
  assetType?: string(name='AssetType'),
}

model RefreshContainerAssetsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefreshContainerAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshContainerAssetsResponseBody(name='body'),
}

async function refreshContainerAssetsWithOptions(request: RefreshContainerAssetsRequest, runtime: Util.RuntimeOptions): RefreshContainerAssetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshContainerAssets', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshContainerAssets(request: RefreshContainerAssetsRequest): RefreshContainerAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshContainerAssetsWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  from?: string(name='From'),
  quaraFileId?: int32(name='QuaraFileId'),
  sourceIp?: string(name='SourceIp'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackSuspEventQuaraFile', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model SasInstallCodeRequest {
  sourceIp?: string(name='SourceIp'),
}

model SasInstallCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model SasInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  body: SasInstallCodeResponseBody(name='body'),
}

async function sasInstallCodeWithOptions(request: SasInstallCodeRequest, runtime: Util.RuntimeOptions): SasInstallCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SasInstallCode', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sasInstallCode(request: SasInstallCodeRequest): SasInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sasInstallCodeWithOptions(request, runtime);
}

model StartBaselineSecurityCheckRequest {
  itemIds?: [ long ](name='ItemIds'),
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  type?: string(name='Type'),
}

model StartBaselineSecurityCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartBaselineSecurityCheckResponse = {
  headers: map[string]string(name='headers'),
  body: StartBaselineSecurityCheckResponseBody(name='body'),
}

async function startBaselineSecurityCheckWithOptions(request: StartBaselineSecurityCheckRequest, runtime: Util.RuntimeOptions): StartBaselineSecurityCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartBaselineSecurityCheck', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startBaselineSecurityCheck(request: StartBaselineSecurityCheckRequest): StartBaselineSecurityCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBaselineSecurityCheckWithOptions(request, runtime);
}

model StartDiscoverDatabaseTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model StartDiscoverDatabaseTaskResponseBody = {
  createMark?: string(name='CreateMark'),
  requestId?: string(name='RequestId'),
}

model StartDiscoverDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiscoverDatabaseTaskResponseBody(name='body'),
}

async function startDiscoverDatabaseTaskWithOptions(request: StartDiscoverDatabaseTaskRequest, runtime: Util.RuntimeOptions): StartDiscoverDatabaseTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDiscoverDatabaseTask', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDiscoverDatabaseTask(request: StartDiscoverDatabaseTaskRequest): StartDiscoverDatabaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiscoverDatabaseTaskWithOptions(request, runtime);
}

model StartImageVulScanRequest {
  imageDigest?: string(name='ImageDigest'),
  imageLayer?: string(name='ImageLayer'),
  imageTag?: string(name='ImageTag'),
  lang?: string(name='Lang'),
  registryTypes?: [ string ](name='RegistryTypes'),
  repName?: string(name='RepName'),
  repoId?: string(name='RepoId'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoNamespace?: string(name='RepoNamespace'),
  repoRegionId?: string(name='RepoRegionId'),
}

model StartImageVulScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartImageVulScanResponse = {
  headers: map[string]string(name='headers'),
  body: StartImageVulScanResponseBody(name='body'),
}

async function startImageVulScanWithOptions(request: StartImageVulScanRequest, runtime: Util.RuntimeOptions): StartImageVulScanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartImageVulScan', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startImageVulScan(request: StartImageVulScanRequest): StartImageVulScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return startImageVulScanWithOptions(request, runtime);
}

model StartPreCheckDatabaseRequest {
  databaseType?: string(name='DatabaseType'),
  instanceUuid?: string(name='InstanceUuid'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  uniRegionId?: string(name='UniRegionId'),
}

model StartPreCheckDatabaseResponseBody = {
  createMark?: string(name='CreateMark'),
  requestId?: string(name='RequestId'),
}

model StartPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: StartPreCheckDatabaseResponseBody(name='body'),
}

async function startPreCheckDatabaseWithOptions(request: StartPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): StartPreCheckDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartPreCheckDatabase', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startPreCheckDatabase(request: StartPreCheckDatabaseRequest): StartPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPreCheckDatabaseWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  targetInfo?: string(name='TargetInfo'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskId?: long(name='ScanTaskId'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartVirusScanTask', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model UnbindAegisRequest {
  uuids?: string(name='Uuids'),
}

model UnbindAegisResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAegisResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAegisResponseBody(name='body'),
}

async function unbindAegisWithOptions(request: UnbindAegisRequest, runtime: Util.RuntimeOptions): UnbindAegisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindAegis', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindAegis(request: UnbindAegisRequest): UnbindAegisResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAegisWithOptions(request, runtime);
}

model UninstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion'),
  uuid?: string(name='Uuid'),
  uuidList?: [ string ](name='UuidList'),
}

model UninstallBackupClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model UninstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallBackupClientResponseBody(name='body'),
}

async function uninstallBackupClientWithOptions(request: UninstallBackupClientRequest, runtime: Util.RuntimeOptions): UninstallBackupClientResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UninstallBackupClient', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uninstallBackupClient(request: UninstallBackupClientRequest): UninstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallBackupClientWithOptions(request, runtime);
}

model UninstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model UninstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId'),
}

model UninstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallUniBackupAgentResponseBody(name='body'),
}

async function uninstallUniBackupAgentWithOptions(request: UninstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): UninstallUniBackupAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UninstallUniBackupAgent', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uninstallUniBackupAgent(request: UninstallUniBackupAgentRequest): UninstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallUniBackupAgentWithOptions(request, runtime);
}

model UpgradeBackupPolicyVersionRequest {
  id?: long(name='Id'),
}

model UpgradeBackupPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeBackupPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeBackupPolicyVersionResponseBody(name='body'),
}

async function upgradeBackupPolicyVersionWithOptions(request: UpgradeBackupPolicyVersionRequest, runtime: Util.RuntimeOptions): UpgradeBackupPolicyVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeBackupPolicyVersion', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeBackupPolicyVersion(request: UpgradeBackupPolicyVersionRequest): UpgradeBackupPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeBackupPolicyVersionWithOptions(request, runtime);
}

model ValidateHcWarningsRequest {
  riskIds?: string(name='RiskIds'),
  sourceIp?: string(name='SourceIp'),
  uuids?: string(name='Uuids'),
}

model ValidateHcWarningsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ValidateHcWarningsResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateHcWarningsResponseBody(name='body'),
}

async function validateHcWarningsWithOptions(request: ValidateHcWarningsRequest, runtime: Util.RuntimeOptions): ValidateHcWarningsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateHcWarnings', '2018-12-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateHcWarnings(request: ValidateHcWarningsRequest): ValidateHcWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateHcWarningsWithOptions(request, runtime);
}

